Este artículo contribuye a resolver de manera efectiva problemas de asignación de recursos estocásticos conocidos por ser NP-Completo mediante un enfoque de descomposición Q y RTDP acotado. Para abordar este complejo problema de gestión de recursos, se propone un enfoque de descomposición Q cuando los recursos ya son compartidos entre los agentes, pero las acciones realizadas por un agente pueden influir en la recompensa obtenida por al menos otro agente. La descomposición Q permite coordinar a estos agentes con recompensas separadas y, por lo tanto, reduce el conjunto de estados y acciones a considerar. Por otro lado, cuando los recursos están disponibles para todos los agentes, no es posible realizar una descomposición Q y utilizamos la búsqueda heurística. En particular, se utiliza la Programación Dinámica en Tiempo Real Acotada (bounded rtdp). El algoritmo Bounded RTDP concentra la planificación solo en estados significativos y poda el espacio de acciones. La poda se logra proponiendo límites superiores e inferiores ajustados en la función de valor. Categorías y Descriptores de Asignaturas I.2.8 [Inteligencia Artificial]: Resolución de Problemas, Métodos de Control y Búsqueda; I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida. Términos generales Algoritmos, Rendimiento, Experimentación. 1. INTRODUCCIÓN Este documento tiene como objetivo contribuir a resolver problemas complejos de asignación de recursos estocásticos. En general, se sabe que los problemas de asignación de recursos son NP-Completos [12]. En tales problemas, un proceso de programación sugiere la acción (es decir, los recursos a asignar) a emprender para llevar a cabo ciertas tareas, de acuerdo con el estado perfectamente observable del entorno. Al ejecutar una acción para llevar a cabo un conjunto de tareas, la naturaleza estocástica del problema induce probabilidades en el siguiente estado visitado. En general, el número de estados es la combinación de todos los estados específicos posibles de cada tarea y recursos disponibles. En este caso, el número de acciones posibles en un estado es la combinación de cada asignación de recursos posible a las tareas individuales. El número muy alto de estados y acciones en este tipo de problema lo hace muy complejo. Pueden existir muchos tipos de problemas de asignación de recursos. En primer lugar, si los recursos ya están compartidos entre los agentes y las acciones realizadas por un agente no influyen en el estado de otro agente, la política óptima global se puede calcular planificando de forma separada para cada agente. Un segundo tipo de problema de asignación de recursos es cuando los recursos ya están compartidos entre los agentes, pero las acciones realizadas por un agente pueden influir en la recompensa obtenida por al menos otro agente. Para resolver este problema de manera eficiente, adaptamos la Qdescomposición propuesta por Russell y Zimdars [9]. En nuestro enfoque de descomposición Q, un agente de planificación gestiona cada tarea y todos los agentes deben compartir los recursos limitados. El proceso de planificación comienza con el estado inicial s0. En s0, cada agente calcula su valor Q respectivo. Entonces, los agentes de planificación se coordinan a través de un árbitro para encontrar el valor Q global más alto al sumar los respectivos valores Q posibles de cada agente. Cuando se implementa con búsqueda heurística, dado que el número de estados y acciones a considerar al calcular la política óptima se reduce exponencialmente en comparación con otros enfoques conocidos, la descomposición Q permite formular el primer algoritmo de búsqueda heurística descompuesta óptima en entornos estocásticos. Por otro lado, cuando los recursos están disponibles para todos los agentes, no es posible ninguna descomposición Q. Una forma común de abordar este gran problema estocástico es mediante el uso de Procesos de Decisión de Markov (MDPs), y en particular la búsqueda en tiempo real donde se han desarrollado muchos algoritmos recientemente. Por ejemplo, la Programación Dinámica en Tiempo Real (RTDP) [1], LRDP [4], HDP [3] y LAO [5] son enfoques de búsqueda heurística de vanguardia en un entorno estocástico. Debido a su calidad en cualquier momento, un enfoque interesante es el RTDP introducido por Barto et al. [1], que actualiza estados en trayectorias desde un estado inicial s0 hasta un estado objetivo sg. En este artículo, se utiliza el RTDP para resolver eficientemente un problema de asignación de recursos restringidos. El RTDP es mucho más efectivo si el espacio de acciones puede ser podado de acciones subóptimas. Para hacer esto, McMahan et al. [6], Smith y Simmons [11], y Singh y Cohn [10] propusieron resolver un problema estocástico utilizando una búsqueda heurística tipo rtdp con límites superiores e inferiores en el valor de los estados. McMahan et al. [6] y Smith y Simmons [11] sugirieron, en particular, una trayectoria eficiente de actualizaciones de estado para acelerar aún más la convergencia, cuando se proporcionan límites superiores e inferiores. Esta trayectoria eficiente de actualizaciones de estado puede combinarse con el enfoque propuesto aquí, ya que este artículo se centra en la definición de límites ajustados y actualización eficiente de estado para un problema de asignación de recursos restringidos. Por otro lado, el enfoque de Singh y Cohn es adecuado para nuestro caso, y se extiende en este documento utilizando, en particular, el concepto de ingreso marginal [7] para elaborar límites precisos. Este documento propone nuevos algoritmos para definir límites superiores e inferiores en el contexto de un enfoque de búsqueda heurística rtdp. Nuestros límites de ingreso marginal se comparan teórica y empíricamente con los límites propuestos por Singh y Cohn. Además, incluso si el algoritmo utilizado para obtener la política óptima es RTDP, nuestros límites pueden ser utilizados con cualquier otro algoritmo para resolver un MDP. La única condición para el uso de nuestros límites es que esté en el contexto de asignación de recursos estocástica con restricciones. El problema ahora está modelado. 2. FORMULACIÓN DEL PROBLEMA Un problema simple de asignación de recursos es aquel en el que hay dos tareas a realizar: ta1 = {lavar los platos} y ta2 = {limpiar el suelo}. Estas dos tareas están en el estado realizado o no realizado. Para realizar las tareas, se asumen dos tipos de recursos: res1 = {cepillo} y res2 = {detergente}. Una computadora tiene que calcular la asignación óptima de estos recursos a los robots limpiadores para llevar a cabo sus tareas. En este problema, un estado representa una conjunción del estado particular de cada tarea y los recursos disponibles. Los recursos pueden estar limitados por la cantidad que se puede utilizar simultáneamente (restricción local) y en total (restricción global). Además, cuanto mayor sea el número de recursos asignados para realizar una tarea, mayor será la expectativa de realizar la tarea. Por esta razón, cuando los estados específicos de las tareas cambian, o cuando el número de recursos disponibles cambia, el valor de este estado puede cambiar. Al ejecutar una acción a en el estado s, los estados específicos de las tareas cambian estocásticamente, y los recursos restantes se determinan con los recursos disponibles en s, restados de los recursos utilizados por la acción a, si el recurso es consumible. De hecho, nuestro modelo puede considerar tipos de recursos consumibles y no consumibles. Un tipo de recurso consumible es aquel en el que la cantidad de recurso disponible disminuye cuando se utiliza. Por otro lado, un tipo de recurso no consumible es aquel en el que la cantidad de recurso disponible no cambia cuando se utiliza. Por ejemplo, un cepillo es un recurso no consumible, mientras que el detergente es un recurso consumible. 2.1 Asignación de recursos como MDPs En nuestro problema, la función de transición y la función de recompensa son ambas conocidas. Un marco de Proceso de Decisión de Markov (MDP) se utiliza para modelar nuestro problema de asignación de recursos estocásticos. Los MDPs han sido ampliamente adoptados por los investigadores hoy en día para modelar un proceso estocástico. Esto se debe a que los MDPS proporcionan un modelo del mundo bien estudiado y simple, pero muy expresivo. Un mdp en el contexto de un problema de asignación de recursos con recursos limitados se define como una tupla Res, T, a, S, A, P, W, R, , donde: • Res = res1, ..., res|Res| es un conjunto finito de tipos de recursos disponibles para un proceso de planificación. Cada tipo de recurso puede tener una restricción de recurso local Lres en la cantidad que se puede utilizar en un solo paso, y una restricción de recurso global Gres en la cantidad que se puede utilizar en total. La restricción global solo se aplica a los tipos de recursos consumibles (Resc) y las restricciones locales siempre se aplican a los tipos de recursos consumibles y no consumibles. • T a es un conjunto finito de tareas con ta ∈ T a que deben ser realizadas. • S es un conjunto finito de estados con s ∈ S. Un estado s es una tupla T a, res1, ..., res|Resc|, que es la característica de cada tarea no realizada ta ∈ T a en el entorno, y los recursos consumibles disponibles. sta es el estado específico de la tarea ta. Además, S contiene un conjunto no vacío sg ⊆ S de estados objetivo. Un estado objetivo es un estado de absorción donde un agente permanece para siempre. • A es un conjunto finito de acciones (o asignaciones). Las acciones a ∈ A(s) aplicables en un estado son la combinación de todas las asignaciones de recursos que pueden ser ejecutadas, de acuerdo al estado s. En particular, a es simplemente una asignación de recursos a las tareas actuales, y ata es la asignación de recursos a la tarea ta. Las posibles acciones están limitadas por Lres y Gres. • Probabilidades de transición Pa(s |s) para s ∈ S y a ∈ A(s). • W = [wta] es el peso relativo (criticidad) de cada tarea. • Recompensas del estado R = [rs] : ta∈T a rsta ← sta × wta. La recompensa relativa del estado de una tarea rsta es el producto de un número real sta por el factor de peso wta. Para nuestro problema, se otorga una recompensa de 1 × wta cuando el estado de una tarea (sta) se encuentra en un estado logrado, y 0 en todos los demás casos. • Un factor de descuento (preferencia) γ, que es un número real entre 0 y 1. Una solución de un MDP es una política π que mapea estados s en acciones a ∈ A(s). En particular, πta(s) es la acción (es decir, los recursos a asignar) que se debe ejecutar en la tarea ta, considerando el estado global s. En este caso, una política óptima es aquella que maximiza la recompensa total esperada por completar todas las tareas. El valor óptimo de un estado, V (s), se da por: V (s) = R(s) + max a∈A(s) γ s ∈S Pa(s |s)V (s ) (1) donde los recursos consumibles restantes en el estado s son Resc \ res(a), donde res(a) son los recursos consumibles utilizados por la acción a. De hecho, dado que una acción a es una asignación de recursos, Resc \ res(a) es el nuevo conjunto de recursos disponibles después de la ejecución de la acción a. Además, se pueden calcular los valores Q Q(a, s) de cada par de estado-acción utilizando el The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1213 la siguiente ecuación: Q(a, s) = R(s) + γ s ∈S Pa(s |s) max a ∈A(s ) Q(a , s ) (2) donde el valor óptimo de un estado es V (s) = max a∈A(s) Q(a, s). La política está sujeta a las restricciones de recursos locales res(π(s)) ≤ Lres para todo s ∈ S, y para todo res ∈ Res. La restricción global se define de acuerdo con todas las trayectorias del sistema tra ∈ T RA. Una trayectoria del sistema tra es una secuencia posible de pares estado-acción, hasta que se alcanza un estado objetivo bajo la política óptima π. Por ejemplo, se introduce el estado s, que puede transitar a s o a s, según la acción a. Las dos posibles trayectorias del sistema son (s, a), (s) y (s, a), (s). La restricción de recursos globales es res(tra) ≤ Gres∀ tra ∈ T RA , y ∀ res ∈ Resc donde res(tra) es una función que devuelve los recursos utilizados por la trayectoria tra. Dado que los recursos consumibles disponibles están representados en el espacio de estado, esta condición se verifica por sí misma. En otras palabras, el modelo es markoviano ya que la historia no tiene que ser considerada en el espacio de estados. Además, el tiempo no se considera en la descripción del modelo, pero también puede incluir un horizonte temporal mediante el uso de un mdp de horizonte finito. Dado que la asignación de recursos en un entorno estocástico es NP-Completo, se deben emplear heurísticas. La Q-descomposición, que descompone un problema de planificación en muchos agentes para reducir la complejidad computacional asociada a los espacios de estado y/o acción, se introduce ahora. 2.2 Q-descomposición para la asignación de recursos. Pueden existir muchos tipos de problemas de asignación de recursos. En primer lugar, si los recursos ya están compartidos entre los agentes y las acciones realizadas por un agente no influyen en el estado de otro agente, la política óptima global se puede calcular planificando de forma separada para cada agente. Un segundo tipo de problema de asignación de recursos es cuando los recursos ya están compartidos entre los agentes, pero las acciones realizadas por un agente pueden influir en la recompensa obtenida por al menos otro agente. Por ejemplo, un grupo de agentes que gestiona el consumo de petróleo de un país cae en este grupo. Estos agentes desean maximizar su recompensa específica consumiendo la cantidad adecuada de petróleo. Sin embargo, todos los agentes son penalizados cuando un agente consume petróleo debido a la contaminación que genera. Otro ejemplo de este tipo proviene de nuestro problema de interés, explicado en la Sección 3, que es una plataforma naval que debe contrarrestar misiles entrantes (es decir, tareas) utilizando sus recursos (es decir, armas, movimientos). En algunos escenarios, puede suceder que los misiles se clasifiquen en dos tipos: aquellos que requieren un conjunto de recursos Res1 y aquellos que requieren un conjunto de recursos Res2. Esto puede ocurrir dependiendo del tipo de misiles, su alcance, y así sucesivamente. En este caso, dos agentes pueden planificar ambos conjuntos de tareas para determinar la política. Sin embargo, existe interacción entre el recurso Res1 y Res2, de modo que ciertas combinaciones de recursos no pueden asignarse. En particular, si un agente i asigna recursos Resi al primer conjunto de tareas Tai, y el agente i asigna recursos Resi al segundo conjunto de tareas Tai, la política resultante puede incluir acciones que no pueden ejecutarse juntas. Para resolver estos conflictos, utilizamos la descomposición Q propuesta por Russell y Zimdars [9] en el contexto del aprendizaje por refuerzo. La suposición principal subyacente en la descomposición Q es que la función de recompensa global R puede descomponerse de forma aditiva en recompensas separadas Ri para cada agente distinto i ∈ Ag, donde |Ag| es el número de agentes. Es decir, R = i∈Ag Ri. Requiere que cada agente calcule un valor, desde su perspectiva, para cada acción. Para coordinarse entre sí, cada agente i informa sus valores de acción Qi(ai, si) para cada estado si ∈ Si a un árbitro en cada iteración de aprendizaje. El árbitro luego elige una acción que maximiza la suma de los valores Q del agente para cada estado global s ∈ S. La próxima vez que se actualice el estado s, un agente i considera el valor como su contribución respectiva, o valor Q, al valor Q global máximo. Es decir, Qi(ai, si) es el valor de un estado tal que maximiza maxa∈A(s) i∈Ag Qi(ai, si). El hecho de que los agentes utilicen un valor Q determinado como el valor de un estado es una extensión del algoritmo en política de Sarsa [8] a la descomposición Q. Russell y Zimdars llamaron a este enfoque Sarsa local. De esta manera, se puede encontrar un compromiso ideal para que los agentes alcancen un óptimo global. De hecho, en lugar de permitir que cada agente elija la acción sucesora, cada agente i utiliza la acción ai ejecutada por el árbitro en el estado sucesor si: Qi(ai, si) = Ri(si) + γ si∈Si Pai (si|si)Qi(ai, si) (3) donde los recursos consumibles restantes en el estado si son Resci \ resi(ai) para un problema de asignación de recursos. Russell y Zimdars [9] demostraron que el Sarsa local converge hacia el óptimo. Además, en algunos casos, esta forma de descomposición del agente permite que las funciones Q locales se expresen mediante un espacio de estados y acciones mucho más reducido. Para nuestro problema de asignación de recursos descrito brevemente en esta sección, se puede aplicar la descomposición Q para generar una solución óptima. De hecho, una copia de seguridad de Bellman óptima se puede aplicar en un estado como en el Algoritmo 1. En la línea 5 de la función Qdec-backup, cada agente que gestiona una tarea calcula su respectivo valor Q. Aquí, Qi (ai, s) determina el valor óptimo de Q del agente i en el estado s. Un agente i utiliza como valor de una posible transición de estado s el valor Q para este agente, que determina el valor Q global máximo para el estado s, como en el enfoque original de descomposición Q. En resumen, para cada estado visitado s ∈ S, cada agente calcula sus respectivos valores Q con respecto al estado global s. Por lo tanto, el espacio de estados es el espacio de estados conjunto de todos los agentes. Parte de la ganancia en complejidad al usar la descomposición Q reside en la parte si∈Si Pai (si|s) de la ecuación. Un agente considera como una posible transición de estado solo los estados posibles del conjunto de tareas que gestiona. Dado que el número de estados es exponencial con el número de tareas, el uso de la descomposición Q debería reducir significativamente el tiempo de planificación. Además, el espacio de acción de los agentes solo tiene en cuenta sus recursos disponibles, lo cual es mucho menos complejo que un espacio de acción estándar, que es la combinación de todas las posibles asignaciones de recursos en un estado para todos los agentes. Entonces, las funcionalidades del árbitro están en las líneas 8 a 20. El valor Q global es la suma de los valores Q producidos por cada agente que gestiona cada tarea, como se muestra en la línea 11, considerando la acción global a. En este caso, cuando una acción de un agente i no puede ser ejecutada simultáneamente con una acción de otro agente i, la acción global simplemente se descarta del espacio de acciones A(s). La línea 14 simplemente asigna el valor actual con respecto al valor Q global más alto, como en una copia de seguridad estándar de Bellman. Entonces, la política óptima y el valor Q de cada agente se actualizan en las líneas 16 y 17 a las sub-acciones ai y los valores Q específicos Qi(ai, s) de cada agente 1214 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) para la acción a. Algoritmo 1 Copia de seguridad de Bellman de descomposición Q. 1: Función Qdec-backup(s) 2: V (s) ← 0 3: para todo i ∈ Ag hacer 4: para todo ai ∈ Ai(s) hacer 5: Qi(ai, s) ← Ri(s) + γ si ∈Si Pai (si|s)Qi (ai, s ) {donde Qi (ai, s ) = hi(s ) cuando s aún no ha sido visitado, y s tiene recursos consumibles restantes Resci \ resi(ai) para cada agente i} 6: fin para 7: fin para 8: para todo a ∈ A(s) hacer 9: Q(a, s) ← 0 10: para todo i ∈ Ag hacer 11: Q(a, s) ← Q(a, s) + Qi(ai, s) 12: fin para 13: si Q(a, s) > V (s) entonces 14: V (s) ← Q(a, s) 15: para todo i ∈ Ag hacer 16: πi(s) ← ai 17: Qi (ai, s) ← Qi(ai, s) 18: fin para 19: fin si 20: fin para Un respaldo de Bellman estándar tiene una complejidad de O(|A| × |SAg|), donde |SAg| es el número de estados conjuntos para todos los agentes excluyendo los recursos, y |A| es el número de acciones conjuntas. Por otro lado, la copia de seguridad de Bellman de la descomposición Q tiene una complejidad de O((|Ag| × |Ai| × |Si)|) + (|A| × |Ag|)), donde |Si| es el número de estados para un agente i, excluyendo los recursos y |Ai| es el número de acciones para un agente i. Dado que |SAg| es combinatorio con el número de tareas, entonces |Si| |S|. Además, |A| es combinatorio con el número de tipos de recursos. Si los recursos ya están compartidos entre los agentes, el número de tipos de recursos para cada agente suele ser menor que el conjunto de todos los tipos de recursos disponibles para todos los agentes. En estas circunstancias, |Ai| |A|. En una copia de seguridad estándar de Bellman, |A| se multiplica por |SAg|, lo cual es mucho más complejo que multiplicar |A| por |Ag| con la copia de seguridad de Bellman de descomposición Q. Por lo tanto, la copia de seguridad de Bellman con descomposición Q es mucho menos compleja que una copia de seguridad de Bellman estándar. Además, el costo de comunicación entre los agentes y el árbitro es nulo ya que este enfoque no considera un problema geográficamente separado. Sin embargo, cuando los recursos están disponibles para todos los agentes, no es posible ninguna descomposición Q. En este caso, la Programación Dinámica en Tiempo Real Acotada (bounded-rtdp) permite enfocar la búsqueda en estados relevantes y podar el espacio de acciones A utilizando límites inferiores y superiores en el valor de los estados. bounded-rtdp se introduce ahora. 2.3 Bounded-RTDP Bonet y Geffner [4] propusieron lrtdp como una mejora de rtdp [1]. lrtdp es un algoritmo simple de programación dinámica que implica una secuencia de ejecuciones de prueba, cada una comenzando en el estado inicial s0 y terminando en un estado objetivo o resuelto. Cada prueba de lrtdp es el resultado de simular la política π mientras se actualizan los valores V(s) utilizando una copia de seguridad de Bellman (Ecuación 1) sobre los estados s que son visitados. h(s) es una heurística que define un valor inicial para el estado s. Esta heurística tiene que ser admisible: el valor dado por la heurística tiene que sobreestimar (o subestimar) el valor óptimo V(s) cuando la función objetivo se maximiza (o minimiza). Por ejemplo, una heurística admisible para un problema de camino más corto estocástico es la solución de un problema determinista de camino más corto. De hecho, dado que el problema es estocástico, el valor óptimo es menor que en la versión determinista. Se ha demostrado que lrtdp, dado un heurístico inicial admisible sobre el valor de los estados, no puede quedar atrapado en bucles y eventualmente produce valores óptimos [4]. La convergencia se logra mediante un procedimiento de etiquetado llamado checkSolved(s, ). Este procedimiento intenta etiquetar como resuelto cada estado recorrido en la trayectoria actual. Cuando el estado inicial se etiqueta como resuelto, el algoritmo ha convergido. En esta sección, se presenta una versión acotada de rtdp (boundedrtdp) en el Algoritmo 2 para podar el espacio de acciones de acciones subóptimas. Este podado permite acelerar la convergencia de lrtdp. bounded-rtdp es similar a rtdp excepto que hay dos heurísticas iniciales distintas para los estados no visitados s ∈ S; hL(s) y hU(s). Además, el procedimiento checkSolved(s, ) se puede omitir porque los límites pueden proporcionar la etiqueta de un estado como resuelto. Por un lado, hL(s) define un límite inferior en el valor de s tal que el valor óptimo de s es mayor que hL(s). Por su parte, hU(s) define un límite superior en el valor de s tal que el valor óptimo de s es menor que hU(s). Los valores de los límites se calculan en las líneas 3 y 4 de la función de copia de seguridad limitada. Calcular estos dos valores Q se realiza simultáneamente ya que las transiciones de estado son las mismas para ambos valores Q. Solo cambian los valores de las transiciones de estado. Por lo tanto, tener que calcular dos valores Q en lugar de uno no aumenta la complejidad del enfoque. De hecho, Smith y Simmons [11] afirman que el tiempo adicional para calcular una copia de seguridad de Bellman para dos límites, en lugar de uno, no es más del 10%, que es también lo que obtuvimos. En particular, L(s) es el límite inferior del estado s, mientras que U(s) es el límite superior del estado s. De manera similar, QL(a, s) es el valor Q del límite inferior de la acción a en el estado s, mientras que QU(a, s) es el valor Q del límite superior de la acción a en el estado s. El uso de estos dos límites permite reducir significativamente el espacio de acciones A. De hecho, en las líneas 5 y 6 de la función de copia de seguridad acotada, si QU (a, s) ≤ L(s) entonces la acción a puede ser eliminada del espacio de acciones de s. En la línea 13 de esta función, un estado puede ser etiquetado como resuelto si la diferencia entre los límites inferior y superior es menor que . Cuando la ejecución regresa a la función bounded-rtdp, el siguiente estado en la Línea 10 tiene un número fijo de recursos consumibles disponibles Resc, determinado en la Línea 9. En resumen, pickNextState(res) selecciona un estado s no resuelto alcanzable bajo la política actual que tiene el mayor error de Bellman (|U(s) − L(s)|). Finalmente, en las líneas 12 a 15, se realiza una copia de seguridad de manera retroactiva en todos los estados visitados de una trayectoria, una vez que esta trayectoria ha sido completada. Esta estrategia ha demostrado ser eficiente [11] [6]. Como se discute por Singh y Cohn [10], este tipo de algoritmo tiene una serie de características deseables en cualquier momento: si se debe elegir una acción en el estado s antes de que el algoritmo haya convergido (mientras permanecen múltiples acciones competitivas), se elige la acción con el límite inferior más alto. Dado que se conoce el límite superior para el estado s, se puede estimar The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1215 Algoritmo 2 El algoritmo bounded-rtdp. Adaptado de [4] y [10]. 1: Función bounded-rtdp(S) 2: devuelve una función de valor V 3: repetir 4: s ← s0 5: visitado ← nulo 6: repetir 7: visitado.push(s) 8: bounded-backup(s) 9: Resc ← Resc \ {π(s)} 10: s ← s.pickNextState(Resc) 11: hasta que s sea una meta 12: mientras visitado = nulo hacer 13: s ← visitado.pop() 14: bounded-backup(s) 15: fin mientras 16: hasta que s0 esté resuelto o |A(s)| = 1 ∀ s ∈ S alcanzable desde s0 17: devolver V Algoritmo 3 La copia de seguridad de Bellman acotada. 1: Función bounded-backup(s) 2: para todo a ∈ A(s) hacer 3: QU (a, s) ← R(s) + γ s ∈S Pa(s |s)U(s ) 4: QL(a, s) ← R(s) + γ s ∈S Pa(s |s)L(s ) {donde L(s ) ← hL(s ) y U(s ) ← hU (s ) cuando s aún no ha sido visitado y s tiene Resc \ res(a) recursos consumibles restantes} 5: si QU (a, s) ≤ L(s) entonces 6: A(s) ← A(s) \ res(a) 7: fin si 8: fin para 9: L(s) ← max a∈A(s) QL(a, s) 10: U(s) ← max a∈A(s) QU (a, s) 11: π(s) ← arg max a∈A(s) QL(a, s) 12: si |U(s) − L(s)| < entonces 13: s ← resuelto 14: fin si qué tan lejos está el límite inferior de lo óptimo. Si la diferencia entre el límite inferior y superior es demasiado alta, se puede optar por utilizar otro algoritmo voraz de elección propia, que genere una solución rápida y cercana a la óptima. Además, si una nueva tarea llega dinámicamente al entorno, puede ser acomodada redefiniendo los límites inferiores y superiores que existen en el momento de su llegada. Singh y Cohn [10] demostraron que un algoritmo que utiliza límites inferiores y superiores admisibles para podar el espacio de acciones está garantizado de converger hacia una solución óptima. Las siguientes secciones describen dos métodos separados para definir hL(s) y hU(s). En primer lugar, se describe brevemente el método de Singh y Cohn [10]. Entonces, nuestro propio método propone límites más estrictos, lo que permite una poda más efectiva del espacio de acción. 2.4 Límites de Singh y Cohn Singh y Cohn [10] definieron límites inferiores y superiores para podar el espacio de acción. Su enfoque es bastante directo. En primer lugar, se calcula una función de valor para todas las tareas a realizar, utilizando un enfoque estándar de RTDP. Entonces, utilizando estas funciones de valor de tarea, se pueden definir un límite inferior hL y un límite superior hU. En particular, hL(s) = max ta∈T a Vta(sta), y hU (s) = ta∈T a Vta(sta). Para mayor claridad, el límite superior propuesto por Singh y Cohn se denomina SinghU, y el límite inferior se denomina SinghL. La admisibilidad de estos límites ha sido demostrada por Singh y Cohn, de tal manera que, el límite superior siempre sobreestima el valor óptimo de cada estado, mientras que el límite inferior siempre subestima el valor óptimo de cada estado. Para determinar la política óptima π, Singh y Cohn implementaron un algoritmo muy similar a bounded-rtdp, que utiliza los límites para inicializar L(s) y U(s). La única diferencia entre bounded-rtdp y la versión rtdp de Singh y Cohn está en los criterios de parada. Singh y Cohn propusieron que el algoritmo termina cuando solo queda una acción competitiva para cada estado, o cuando el rango de todas las acciones competitivas para cualquier estado está limitado por un parámetro de indiferencia. bounded-rtdp etiqueta los estados para los cuales |U(s) − L(s)| < a como resueltos y la convergencia se alcanza cuando s0 está resuelto o cuando solo queda una acción competitiva para cada estado. Este criterio de parada es más efectivo ya que es similar al utilizado por Smith y Simmons [11] y McMahan et al. brtdp [6]. En este documento, los límites definidos por Singh y Cohn e implementados utilizando bounded-rtdp definen el enfoque Singh-rtdp. Las siguientes secciones proponen ajustar los límites de Singh-rtdp para permitir una poda más efectiva del espacio de acciones. 2.5 Reducir el Límite Superior SinghU incluye acciones que pueden no ser posibles de ejecutar debido a restricciones de recursos, lo que sobreestima el límite superior. Para considerar solo las acciones posibles, se introduce nuestro límite superior, llamado maxU: hU (s) = max a∈A(s) ta∈T a Qta(ata, sta) (4) donde Qta(ata, sta) es el valor Q de la tarea ta para el estado sta, y la acción ata se calcula utilizando un enfoque estándar de lrtdp. Teorema 2.1. El límite superior definido por la Ecuación 4 es admisible. Prueba: Las restricciones locales de recursos se cumplen porque el límite superior se calcula utilizando todas las posibles acciones globales a. Sin embargo, hU (s) sigue sobreestimando V (s) porque la restricción de recursos global no se cumple. De hecho, cada tarea puede utilizar todos los recursos consumibles para su propio propósito. Realizar esto produce un valor más alto para cada tarea que el obtenido al planificar todas las tareas globalmente con los recursos limitados compartidos. Calcular el límite maxU en un estado tiene una complejidad de O(|A| × |T a|), y O(|T a|) para SinghU. Una copia de seguridad estándar de Bellman tiene una complejidad de O(|A| × |S|). Dado que |A|×|T a| |A|×|S|, el tiempo de cálculo para determinar el límite superior de un estado, que se realiza una vez por cada estado visitado, es mucho menor que el tiempo de cálculo requerido para realizar una copia de seguridad estándar de Bellman para un estado, que generalmente se realiza muchas veces por cada estado visitado. Por lo tanto, el tiempo de cálculo del límite superior es insignificante. 1216 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 2.6 Aumentando el Límite Inferior La idea para aumentar SinghL es asignar los recursos de antemano entre las tareas. Cuando cada tarea tiene su propio conjunto de recursos, cada tarea puede resolverse de forma independiente. El límite inferior del estado s es hL(s) = ta∈T a Lowta(sta), donde Lowta(sta) es una función de valor para cada tarea ta ∈ T a, de modo que los recursos han sido asignados de antemano. La asignación a priori de los recursos se realiza utilizando el ingreso marginal, que es un concepto muy utilizado en microeconomía [7], y recientemente se ha utilizado para la coordinación de un mdp descentralizado [2]. En resumen, el ingreso marginal es el ingreso adicional que una unidad adicional de producto traerá a una empresa. Por lo tanto, para un problema de asignación de recursos estocásticos, el ingreso marginal de un recurso es el valor esperado adicional que implica. El ingreso marginal de un recurso res para una tarea ta en un estado sta se define de la siguiente manera: mrta(sta) = max ata∈A(sta) Qta(ata, sta)− max ata∈A(sta) Qta(ata|res /∈ ata, sta) (5). El concepto de ingreso marginal de un recurso se utiliza en el Algoritmo 4 para asignar los recursos de antemano entre las tareas, lo que permite definir el valor del límite inferior de un estado. En la Línea 4 del algoritmo, se calcula una función de valor para todas las tareas en el entorno utilizando un enfoque lrtdp estándar [4]. Estas funciones de valor, que también se utilizan para el límite superior, se calculan considerando que cada tarea puede utilizar todos los recursos disponibles. La línea 5 inicializa la variable valueta. Esta variable es el valor estimado de cada tarea ta ∈ T a. Al principio del algoritmo, no se asignan recursos a una tarea específica, por lo tanto, la variable valueta se inicializa en 0 para todas las ta ∈ T a. Entonces, en la línea 9, se selecciona un tipo de recurso res (consumible o no consumible) para ser asignado. Aquí, un experto en el dominio puede separar todos los recursos disponibles en varios tipos o partes para ser asignados. Los recursos se asignan en orden de su especialización. En otras palabras, cuanto más eficiente sea un recurso en un pequeño grupo de tareas, más se asignará temprano. Asignar los recursos en este orden mejora la calidad del límite inferior resultante. La Línea 12 calcula el ingreso marginal de un recurso consumible res para cada tarea ta ∈ T a. Para un recurso no consumible, dado que el recurso no se considera en el espacio de estados, todos los demás estados alcanzables desde sta consideran que el recurso res sigue siendo utilizable. El enfoque aquí es sumar la diferencia entre el valor real de un estado y el valor Q máximo de este estado si el recurso res no puede ser utilizado para todos los estados en una trayectoria dada por la política de la tarea ta. Esta heurística demostró obtener buenos resultados, pero se pueden probar otras, como la simulación de Monte Carlo. En la línea 21, el ingreso marginal se actualiza en función de los recursos ya asignados a cada tarea. R(sgta) es la recompensa por realizar la tarea ta. Por lo tanto, Vta(sta)−valueta R(sgta ) es el valor esperado residual que queda por lograr, conociendo la asignación actual a la tarea ta, y normalizado por la recompensa de realizar las tareas. El ingreso marginal se multiplica por este término para indicar que, cuanto más alto sea el valor residual de una tarea, mayor será su ingreso marginal. Entonces, se selecciona una tarea ta en la línea 23 con el mayor ingreso marginal, ajustado con el valor residual. En la línea 24, se asigna el tipo de recurso res al grupo de recursos Resta de la tarea ta. Después, la Línea 29 recomAlgorithm 4 El algoritmo de límite inferior de ingresos marginales. 1: Función límite de ingresos(S) 2: devuelve un límite inferior LowT a 3: para todo ta ∈ T a hacer 4: Vta ←lrtdp(Sta) 5: valueta ← 0 6: fin para 7: s ← s0 8: repetir 9: res ← Seleccionar un tipo de recurso res ∈ Res 10: para todo ta ∈ T a hacer 11: si res es consumible entonces 12: mrta(sta) ← Vta(sta) − Vta(sta(Res \ res)) 13: sino 14: mrta(sta) ← 0 15: repetir 16: mrta(sta) ← mrta(sta) + Vta(sta)max (ata∈A(sta)|res/∈ata) Qta(ata, sta) 17: sta ← sta.pickNextState(Resc) 18: hasta que sta sea una meta 19: s ← s0 20: fin si 21: mrrvta(sta) ← mrta(sta) × Vta(sta)−valueta R(sgta ) 22: fin para 23: ta ← Tarea ta ∈ T a que maximiza mrrvta(sta) 24: Resta ← Resta {res} 25: temp ← ∅ 26: si res es consumible entonces 27: temp ← res 28: fin si 29: valueta ← valueta + ((Vta(sta) − valueta)× max ata∈A(sta,res) Qta(ata,sta(temp)) Vta(sta) ) 30: hasta que todos los tipos de recursos res ∈ Res estén asignados 31: para todo ta ∈ T a hacer 32: Lowta ←lrtdp(Sta, Resta) 33: fin para 34: devolver LowT a calcula valueta. La primera parte de la ecuación para calcular valueta representa el valor residual esperado para la tarea ta. Este término se multiplica por max ata∈A(sta) Qta(ata,sta(res)) Vta(sta), que es la proporción de la eficiencia del tipo de recurso res. En otras palabras, se asigna valueta a valueta + (el valor residual × la proporción de valor del tipo de recurso res). Para un recurso consumible, el valor Q considera solo el recurso res en el espacio de estado, mientras que para un recurso no consumible, no hay recursos disponibles. Todos los tipos de recursos se asignan de esta manera hasta que Res esté vacío. Todos los tipos de recursos consumibles y no consumibles se asignan a cada tarea. Cuando todos los recursos están asignados, los componentes de límite inferior Lowta de cada tarea se calculan en la línea 32. Cuando se calcula la solución global, el límite inferior es el siguiente: hL(s) = max(SinghL, max a∈A(s) ta∈T a Lowta(sta)) (6) Utilizamos el máximo entre el límite SinghL y la suma de los componentes del límite inferior Lowta, por lo tanto, el ingreso marginal ≥ SinghL. En particular, el límite de SinghL puede ser el Sexto Internacional. La conf. conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1217 será mayor cuando quede un pequeño número de tareas. Dado que los componentes de Lowta se calculan considerando s0; por ejemplo, si en un estado posterior solo queda una tarea, el límite de SinghL será mayor que cualquiera de los componentes de Lowta. La principal diferencia de complejidad entre SinghL y revenue-bound está en la línea 32, donde se debe calcular un valor para cada tarea con el recurso compartido. Sin embargo, dado que los recursos se comparten, el espacio de estados y el espacio de acciones se reducen considerablemente para cada tarea, lo que reduce en gran medida el cálculo en comparación con las funciones de valor calculadas en la Línea 4, que se realiza tanto para SinghL como para el límite de ingresos. Teorema 2.2. El límite inferior de la Ecuación 6 es admisible. Prueba: Lowta(sta) se calcula con el recurso que se comparte. La suma de las funciones de valor Lowta(sta) para cada ta ∈ T a no viola las restricciones locales y globales de recursos. De hecho, dado que los recursos se comparten, las tareas no pueden abusar de ellos. Por lo tanto, hL(s) es una política realizable y un límite inferior admisible. 3. DISCUSIÓN Y EXPERIMENTOS El ámbito de los experimentos es una plataforma naval que debe contrarrestar misiles entrantes (es decir, tareas) utilizando sus recursos (es decir, armas, movimientos). Para los experimentos, se generaron 100 problemas de asignación de recursos de forma aleatoria para cada enfoque y número posible de tareas. En nuestro problema, |Sta| = 4, por lo tanto, cada tarea puede estar en cuatro estados distintos. Hay dos tipos de estados; en primer lugar, estados donde las acciones modifican las probabilidades de transición; y luego, están los estados objetivo. Las transiciones de estado son todas estocásticas porque cuando un misil se encuentra en un estado dado, siempre puede transitar a muchos estados posibles. En particular, cada tipo de recurso tiene una probabilidad de contrarrestar un misil entre el 45% y el 65% dependiendo del estado de la tarea. Cuando un misil no es contrarrestado, transita a otro estado, que puede ser preferido o no al estado actual, donde el estado más preferido para una tarea es cuando es contrarrestado. La efectividad de cada recurso se modifica aleatoriamente en un ±15% al inicio de un escenario. También existen restricciones de recursos locales y globales sobre la cantidad que se puede utilizar. Para las restricciones locales, como máximo se puede asignar 1 recurso de cada tipo para ejecutar tareas en un estado específico. Esta restricción también está presente en una plataforma naval real debido a restricciones de sensores y lanzadores y políticas de compromiso. Además, para los recursos consumibles, la cantidad total de recurso consumible disponible está entre 1 y 2 para cada tipo. La restricción global se genera aleatoriamente al inicio de un escenario para cada tipo de recurso consumible. El número de tipos de recursos se ha fijado en 5, donde hay 3 tipos de recursos consumibles y 2 tipos de recursos no consumibles. Para este problema se ha implementado un enfoque estándar de lrtdp. Se ha utilizado una heurística simple donde el valor de un estado no visitado se asigna como el valor de un estado objetivo de manera que se logren todas las tareas. De esta manera, se asegura que el valor de cada estado no visitado sobreestime su valor real, ya que el valor de lograr una tarea ta es el más alto que el planificador puede obtener para ta. Dado que esta heurística es bastante directa, las ventajas de utilizar heurísticas mejores son más evidentes. Sin embargo, aunque el enfoque lrtdp utilice una heurística simple, todavía una gran parte del espacio de estados no es visitada al calcular la política óptima. Los enfoques descritos en este documento se comparan en las Figuras 1 y 2. Resumamos aquí estos enfoques: • Qdec-lrtdp: Las copias de seguridad se calculan utilizando la función de copia de seguridad Qdec-backup (Algoritmo 1), pero en un contexto lrtdp. En particular, las actualizaciones realizadas en la función checkSolved también se realizan utilizando la función Qdecbackup. • lrtdp-up: El límite superior de maxU se utiliza para lrtdp. • Singh-rtdp: Los límites SinghL y SinghU se utilizan para bounded-rtdp. • mr-rtdp: Los límites de ingresos y maxU se utilizan para bounded-rtdp. Para implementar Qdec-lrtdp, dividimos el conjunto de tareas en dos partes iguales. El conjunto de tareas T ai, gestionado por el agente i, puede ser completado con el conjunto de recursos Resi, mientras que el segundo conjunto de tareas T ai, gestionado por el agente Agi, puede ser completado con el conjunto de recursos Resi. Resi tenía un tipo de recurso consumible y un tipo de recurso no consumible, mientras que Resi tenía dos tipos de recursos consumibles y un tipo de recurso no consumible. Cuando el número de tareas es impar, se asignó una tarea más a T ai. Hay restricciones entre el grupo de recursos Resi y Resi, de modo que algunas asignaciones no son posibles. Estas restricciones son gestionadas por el árbitro según se describe en la Sección 2.2. La descomposición Q permite disminuir significativamente el tiempo de planificación en nuestra configuración de problemas, y parece ser un enfoque muy eficiente cuando un grupo de agentes debe asignar recursos que solo están disponibles para ellos mismos, pero las acciones realizadas por un agente pueden influir en la recompensa obtenida por al menos otro agente. Para calcular el límite inferior de los ingresos, todos los recursos disponibles deben ser separados en varios tipos o partes para ser asignados. Para nuestro problema, asignamos cada recurso de cada tipo en el orden de su especialización, tal como dijimos al describir la función de límite de ingresos. En términos de experimentos, se observa que los enfoques lrtdp, lrtdp-up y para la asignación de recursos, que no podan el espacio de acciones, son mucho más complejos. Por ejemplo, se tardó un promedio de 1512 segundos en planificar el enfoque lrtdp-up con seis tareas (ver Figura 1). El enfoque Singh-rtdp redujo el tiempo de planificación al utilizar un límite inferior y superior para podar el espacio de acciones. mr-rtdp redujo aún más el tiempo de planificación al proporcionar límites iniciales muy ajustados. En particular, Singh-rtdp necesitó 231 segundos en promedio para resolver un problema con seis tareas y mr-rtdp requirió 76 segundos. De hecho, la reducción del tiempo es bastante significativa en comparación con lrtdp-up, lo que demuestra la eficiencia de utilizar límites para podar el espacio de acciones. Además, implementamos mr-rtdp con el límite de SinghU, y esto fue ligeramente menos eficiente que con el límite de maxU. También implementamos mr-rtdp con el límite de SinghL, y esto fue ligeramente más eficiente que Singh-rtdp. A partir de estos resultados, concluimos que la diferencia de eficiencia entre mr-rtdp y Singh-rtdp se debe más al límite inferior de ingresos marginales que al límite superior de maxU. De hecho, cuando el número de tareas a ejecutar es alto, los límites inferiores por Singh-rtdp toman los valores de una sola tarea. Por otro lado, el límite inferior de mr-rtdp tiene en cuenta el valor de los 1218 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 0.01 0.1 1 10 100 1000 10000 100000 1 2 3 4 5 6 7 8 9 10 11 12 13 Tiempo en segundos Número de tareas LRTDP QDEC-LRTDP Figura 1: Eficiencia de Q-descomposición LRTDP y LRTDP. 0.01 0.1 1 10 100 1000 10000 1 2 3 4 5 6 7 8 Tiempo en segundos Número de tareas LRTDP LRTDP-up Singh-RTDP MR-RTDP Figura 2: Eficiencia de MR-RTDP comparado con SINGH-RTDP. tarea mediante el uso de una heurística para distribuir los recursos. De hecho, una asignación óptima es aquella en la que los recursos se distribuyen de la mejor manera para todas las tareas, y nuestro límite inferior lo hace heurísticamente. 4. CONCLUSIÓN Los experimentos han demostrado que la descomposición Q parece ser un enfoque muy eficiente cuando un grupo de agentes debe asignar recursos que solo están disponibles para ellos mismos, pero las acciones realizadas por un agente pueden influir en la recompensa obtenida por al menos otro agente. Por otro lado, cuando los recursos disponibles se comparten, no es posible realizar una descomposición Q y proponemos límites ajustados para la búsqueda heurística. En este caso, el tiempo de planificación de bounded-rtdp, que poda el espacio de acciones, es significativamente menor que el de lrtdp. Además, el límite de ingreso marginal propuesto en este documento se compara favorablemente con el enfoque de Singh y Cohn [10]. La limitación de boundedrtdp con nuestros límites propuestos puede aplicarse a una amplia gama de entornos estocásticos. La única condición para el uso de nuestros límites es que cada tarea posea recursos limitados consumibles y/o no consumibles. Una interesante línea de investigación sería experimentar nuestros límites con otros algoritmos de búsqueda heurística. Por ejemplo, frtdp [11] y brtdp [6] son ambos algoritmos de búsqueda heurística eficientes. En particular, ambos enfoques propusieron actualizaciones eficientes de la trayectoria del estado, cuando se proporcionaron límites superiores e inferiores. Nuestros límites ajustados permitirían, tanto para frtdp como para brtdp, reducir el número de respaldos a realizar antes de la convergencia. Finalmente, la función bounded-rtdp poda el espacio de acciones cuando QU (a, s) ≤ L(s), como sugirieron Singh y Cohn [10]. frtdp y brtdp también podrían podar el espacio de acciones en estas circunstancias para reducir aún más su tiempo de planificación. 5. REFERENCIAS [1] A. Barto, S. Bradtke y S. Singh. Aprendiendo a actuar utilizando programación dinámica en tiempo real. Inteligencia Artificial, 72(1):81-138, 1995. [2] A. Beynier y A. I. Mouaddib. Un algoritmo iterativo para resolver procesos de decisión de Markov descentralizados con restricciones. En Actas de la Vigésimo-Primera Conferencia Nacional de Inteligencia Artificial (AAAI-06), 2006. [3] B. Bonet y H. Geffner. Algoritmos de búsqueda heurística más rápidos para la planificación con incertidumbre y retroalimentación completa. En Actas de la Decimoctava Conferencia Internacional Conjunta de Inteligencia Artificial (IJCAI-03), agosto de 2003. [4] B. Bonet y H. Geffner. Enfoque lrtdp etiquetado: Mejorando la convergencia de la programación dinámica en tiempo real. En Actas de la Decimotercera Conferencia Internacional sobre Planificación y Programación Automáticas (ICAPS-03), páginas 12-21, Trento, Italia, 2003. [5] E. A. Hansen y S. Zilberstein. lao: Un algoritmo de búsqueda heurística que encuentra soluciones con bucles. Inteligencia Artificial, 129(1-2):35-62, 2001. [6] H. B. McMahan, M. Likhachev y G. J. Gordon. Programación dinámica en tiempo real acotada: rtdp con límites superiores monótonos y garantías de rendimiento. En ICML 05: Actas de la Vigésimo Segunda Conferencia Internacional sobre Aprendizaje Automático, páginas 569-576, Nueva York, NY, EE. UU., 2005. ACM Press. [7] R. S. Pindyck y D. L. Rubinfeld. Microeconomía. Prentice Hall, 2000. [8] G. A. Rummery y M. Niranjan. Aprendizaje Q en línea utilizando sistemas conexionistas. Informe técnico CUED/FINFENG/TR 166, Departamento de Ingeniería de la Universidad de Cambridge, 1994. [9] S. J. Russell y A. Zimdars. Descomposición Q para agentes de aprendizaje por refuerzo. En ICML, páginas 656-663, 2003. [10] S. Singh y D. Cohn. Cómo fusionar dinámicamente procesos de decisión de Markov. En Avances en Sistemas de Procesamiento de Información Neural, volumen 10, páginas 1057-1063, Cambridge, MA, EE. UU., 1998. MIT Press. [11] T. Smith y R. Simmons. Programación dinámica en tiempo real enfocada para procesos de decisión de Markov: sacando más provecho de una heurística. En Actas de la Vigésimo-Primera Conferencia Nacional de Inteligencia Artificial (AAAI), Boston, EE. UU., 2006. [12] W. Zhang. Modelado y resolución de un problema de asignación de recursos con técnicas de restricciones flexibles. Informe técnico: wucs-2002-13, Universidad de Washington, San Luis, Misuri, 2002. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1219