Equidad en juegos multijugador distribuidos basados en Dead-Reckoning Sudhir Aggarwal Hemant Banavar Departamento de Ciencias de la Computación Universidad Estatal de Florida, Tallahassee, FL Correo electrónico: {sudhir, banavar}@cs.fsu.edu Sarit Mukherjee Sampath Rangarajan Centro de Investigación en Redes Bell Laboratories, Holmdel, NJ Correo electrónico: {sarit, sampath}@bell-labs.com RESUMEN En un juego multijugador distribuido que utiliza vectores de dead-reckoning para intercambiar información de movimiento entre jugadores, hay inexactitudes al renderizar los objetos en el receptor debido al retraso de red entre el emisor y el receptor. El objeto se coloca en el receptor en la posición indicada por el vector de navegación inercial, pero para ese momento, la posición real podría haber cambiado considerablemente en el emisor. Esta inexactitud sería tolerable si es consistente entre todos los jugadores; es decir, en el mismo momento físico, todos los jugadores ven una posición y trayectoria inexactas (con respecto a la posición real del objeto) pero la misma para un objeto. Pero debido a los retrasos de red variables entre el remitente y los diferentes receptores, la inexactitud también es diferente en diferentes jugadores. Esto conduce a la injusticia en el juego. En este documento, primero presentamos una medida de error para estimar esta inexactitud. Luego desarrollamos un algoritmo para programar el envío de vectores de navegación inercial en un emisor que se esfuerza por igualar este error en diferentes receptores a lo largo del tiempo. Este algoritmo hace que el juego sea muy justo a expensas de aumentar el error medio general de todos los jugadores. Para mitigar este efecto, proponemos un algoritmo basado en presupuesto que brinda una mayor equidad sin aumentar el error medio, manteniendo así la precisión del juego. Hemos implementado tanto el algoritmo de programación como el algoritmo basado en presupuesto como parte de BZFlag, un popular juego multijugador distribuido. Mostramos a través de experimentos que estos algoritmos proporcionan equidad entre los jugadores a pesar de las variaciones amplias en los retrasos de red. Una propiedad adicional de los algoritmos propuestos es que requieren menos cantidad de DRs para ser intercambiados (en comparación con la implementación actual de BZflag) para lograr el mismo nivel de precisión en el juego. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos-Aplicaciones Distribuidas Términos Generales Algoritmos, Diseño, Experimentación, Rendimiento 1. En un juego multijugador distribuido, los jugadores suelen estar distribuidos a lo largo de Internet y tienen diferentes retrasos entre ellos o hacia un servidor central de juego. Por lo general, en este tipo de juegos, los jugadores forman parte del juego y además pueden controlar entidades que lo componen. Durante el transcurso del juego, los jugadores y las entidades se mueven dentro del espacio del juego. Un jugador envía información sobre su movimiento, así como el movimiento de las entidades que controla, a los otros jugadores utilizando un vector de Dead-Reckoning (DR). Un vector DR contiene información sobre la posición actual del jugador/entidad en términos de coordenadas x, y, y z (en el momento en que se envió el vector DR), así como la trayectoria de la entidad en términos de la componente de velocidad en cada una de las dimensiones. Cada uno de los jugadores participantes recibe tales vectores de DR de los demás y representa a los otros jugadores/entidades en las consolas locales hasta que se reciba un nuevo vector de DR para ese jugador/entidad. En un juego de igual a igual, los jugadores envían vectores DR directamente entre sí; en un juego de cliente-servidor, estos vectores DR pueden ser reenviados a través de un servidor de juego. La idea de DR se utiliza porque es casi imposible que los jugadores/entidades intercambien sus posiciones actuales en cada unidad de tiempo. Los vectores DR son la cuantificación de la trayectoria real (a la que nos referimos como camino real) de un jugador. Normalmente, se calcula y envía un nuevo vector DR cuando la trayectoria real se desvía de la trayectoria extrapolada utilizando el vector DR anterior (digamos, en términos de distancia en el plano x, y, z) por una cantidad especificada por un umbral. Nos referimos a la trayectoria que se puede calcular utilizando la secuencia de vectores DR como la ruta exportada. Por lo tanto, en el jugador que envía, hay una desviación entre la trayectoria real y la trayectoria exportada. El error debido a esta desviación puede ser eliminado si cada movimiento del jugador/entidad se comunica a los otros jugadores en cada unidad de tiempo; es decir, se genera un vector DR en cada unidad de tiempo, haciendo que los caminos reales y exportados sean iguales. Dado que no es factible satisfacer esto debido a limitaciones de ancho de banda, este error no es de interés práctico. Por lo tanto, los jugadores receptores pueden, como máximo, seguir la trayectoria exportada. Debido al retraso de red entre los jugadores que envían y reciben, cuando un vector DR es recibido y representado en un jugador, la trayectoria original del jugador/entidad puede haber cambiado ya. Por lo tanto, en el tiempo físico, hay una desviación en el jugador receptor entre la trayectoria exportada y la trayectoria renderizada (a la que nos referimos como trayectoria colocada). Nos referimos a este error como el error de exportación. Ten en cuenta que el error de exportación, a su vez, resulta en una desviación entre las rutas reales y las colocadas. El error de exportación se manifiesta debido a la desviación entre la ruta exportada en el remitente y la ruta colocada en el receptor (i) 1 antes de que el vector DR sea recibido en el receptor (referido como el error antes de la exportación, y (ii) después de que el vector DR sea recibido en el receptor (referido como el error después de la exportación). En un artículo anterior [1], demostramos que al sincronizar los relojes de todos los jugadores y al utilizar una técnica basada en marcar el tiempo de los mensajes que llevan los vectores DR, podemos garantizar que el error después de la exportación se reduce a cero. Es decir, las rutas colocadas y exportadas coinciden después de recibir el vector de DR. También demostramos que el error antes de la exportación nunca puede ser eliminado ya que siempre existe un retraso de red no nulo, pero puede ser significativamente reducido utilizando nuestra técnica [1]. De ahora en adelante asumimos que los jugadores utilizan una técnica que resulta en un error de exportación general inevitable pero pequeño. En este documento consideramos el problema de los retrasos de red diferentes y variables entre cada par emisor-receptor de un vector DR, y consecuentemente, los errores de exportación diferentes y variables en los receptores. Debido a la diferencia en los errores de exportación entre los receptores, la misma entidad se representa en diferentes momentos físicos en diferentes receptores. Esto introduce injusticia en el juego. Por ejemplo, un jugador con un gran retraso siempre vería una entidad tarde en el tiempo físico en comparación con los otros jugadores y, por lo tanto, su acción sobre la entidad se retrasaría (en tiempo físico) incluso si reaccionara instantáneamente después de que la entidad fuera renderizada. Nuestro objetivo en este artículo es mejorar la equidad de estos juegos a pesar de las variaciones en los retrasos de red al igualar el error de exportación entre los jugadores. Exploramos si el promedio temporal de los errores de exportación (que es el error de exportación acumulado durante un período de tiempo promediado en el período de tiempo) en todos los jugadores puede ser igual al programar el envío de los vectores DR de manera apropiada en el remitente. Proponemos dos algoritmos para lograr esto. Ambos algoritmos se basan en retrasar (o eliminar) el envío de vectores de DR a algunos jugadores de forma continua para intentar que el error de exportación sea el mismo en todos los jugadores. A nivel abstracto, el algoritmo retrasa el envío de vectores DR a los jugadores cuyo error acumulado hasta el momento en el juego es menor que el de los demás; esto significaría que el error de exportación debido a este vector DR en estos jugadores será mayor que el de los otros jugadores, haciendo que sean iguales. El objetivo es hacer que este error sea aproximadamente igual en cada vector de DR, con la desviación en el error disminuyendo a medida que avanza el tiempo. El primer algoritmo (al que nos referimos como algoritmo de programación) se basa en estimar el retraso entre los jugadores y perfeccionar el envío de vectores DR programándolos para ser enviados a diferentes jugadores en diferentes momentos en cada punto de generación de DR. A través de la implementación de este algoritmo utilizando el juego de código abierto BZflag, demostramos que este algoritmo hace que el juego sea muy justo (medimos la equidad en términos de la desviación estándar del error). La desventaja de este algoritmo es que tiende a empujar el error de todos los jugadores hacia el del jugador con el peor error (que es el error del jugador más alejado, en términos de retraso, del remitente del DR). Para aliviar este efecto, proponemos un algoritmo basado en presupuesto que asigna un presupuesto para enviar los DRs a diferentes jugadores. A un nivel alto, el algoritmo se basa en la idea de enviar más DRs a los jugadores que están más lejos del remitente en comparación con aquellos que están más cerca. Los resultados experimentales de BZflag ilustran que el algoritmo basado en presupuesto sigue un enfoque más equilibrado. Mejora la equidad del juego, pero al mismo tiempo lo hace sin aumentar el error promedio de los jugadores, manteniendo así la precisión del juego. Además, se ha demostrado que el algoritmo basado en presupuesto logra el mismo nivel de precisión en el juego que la implementación actual de BZflag utilizando un número mucho menor de vectores DR. 2. Trabajos previos Los trabajos anteriores sobre juegos en red para tratar la latencia de red se han centrado principalmente en técnicas de compensación para el retraso y la pérdida de paquetes [2, 3, 4]. Estos métodos tienen como objetivo hacer que los retrasos grandes y la pérdida de mensajes sean tolerables para los jugadores, pero no consideran los problemas que pueden ser introducidos por los retrasos variables desde el servidor hacia diferentes jugadores o entre los propios jugadores. Por ejemplo, el concepto de retraso local ha sido utilizado en [3], donde cada jugador retrasa cada operación local durante un cierto período de tiempo para que los jugadores remotos puedan recibir información sobre la operación local y ejecutar la misma operación aproximadamente al mismo tiempo, reduciendo así las inconsistencias de estado. El juego en línea multijugador MiMaze [2, 5, 6], por ejemplo, utiliza un enfoque de sincronización de cubo estático para compensar las variaciones en los retrasos de la red. En MiMaze, cada jugador retrasa todos los eventos en 100 ms independientemente de si son generados localmente o de forma remota. Los jugadores con un retraso de red mayor a 100 ms simplemente no pueden participar en el juego. En general, las técnicas basadas en la sincronización de cubetas dependen de imponer un retraso máximo en todos los jugadores. Ha habido algunos artículos que han estudiado el problema de la equidad en un juego distribuido mediante mecanismos de entrega de mensajes más sofisticados. Pero estos trabajos [7, 8] asumen la existencia de una visión global del juego donde un servidor de juego mantiene una visión (o estado) del juego. Los jugadores pueden introducir objetos en el juego o eliminar objetos que ya forman parte del juego (por ejemplo, en un juego de disparos en primera persona, disparando al objeto). Estas adiciones y eliminaciones se comunican al servidor del juego utilizando mensajes de acción. Basándose en estos mensajes de acción, el estado del juego se modifica en el servidor del juego y estos cambios se comunican a los jugadores mediante mensajes de actualización. La equidad se logra ordenando la entrega de mensajes de acción y actualización en el servidor de juegos y en los jugadores respectivamente, basándose en la noción de un orden justo que tiene en cuenta los retrasos entre el servidor de juegos y los diferentes jugadores. Los objetos que forman parte del juego pueden moverse, pero cómo se comunica esta información a los jugadores parece estar más allá del alcance de estas obras. En este sentido, estas obras son muy limitadas en alcance y pueden ser aplicables solo a juegos de disparos en primera persona y también solo a juegos donde los jugadores no son parte del juego. Los vectores DR pueden intercambiarse directamente entre los jugadores (modelo peer-to-peer) o utilizando un servidor central como relé (modelo cliente-servidor). Se ha demostrado en [9] que los juegos multijugador que utilizan vectores DR junto con la sincronización de cubos no son a prueba de trampas a menos que se implementen mecanismos adicionales. Tanto el algoritmo de programación como el algoritmo basado en presupuesto descritos en nuestro artículo utilizan vectores DR y, por lo tanto, no son a prueba de trampas. Por ejemplo, un receptor podría distorsionar la estimación de retraso en el remitente para hacerle creer al remitente que el retraso entre el remitente y el receptor es alto, obteniendo así una ventaja indebida. Enfatizamos que el enfoque de este artículo es la equidad sin abordar el tema del engaño. En la siguiente sección, describimos el modelo de juego que utilizamos e ilustramos cómo los emisores y receptores intercambian vectores DR y cómo las entidades se representan en los receptores basándose en el intercambio de vectores DR aumentados con marcas de tiempo según se describe en [1]. En la Sección 4, describimos el algoritmo de programación de vectores DR que tiene como objetivo igualar el error de exportación entre los jugadores con diferentes retrasos desde el remitente de un vector DR, seguido de los resultados experimentales obtenidos de la instrumentación del algoritmo de programación en el juego de código abierto BZFlag. La sección 5 describe el algoritmo basado en presupuesto que logra una mayor equidad sin reducir el nivel de precisión en el juego. Las conclusiones se presentan en la Sección 6.2.3. MODELO DE JUEGO La arquitectura del juego se basa en jugadores distribuidos a través de Internet que intercambian vectores DR entre sí. Los vectores de DR podrían ser enviados directamente de un jugador a otro (modelo peer-to-peer) o podrían ser enviados a través de un servidor de juego que recibe el vector de DR de un jugador y lo reenvía a otros jugadores (modelo cliente-servidor). Como se mencionó anteriormente, asumimos que los relojes de los jugadores participantes están sincronizados. Cada vector DR enviado de un jugador a otro especifica la trayectoria de exactamente un jugador/entidad. Suponemos un vector DR lineal en el que la información contenida en el vector DR es solo suficiente para que el jugador receptor calcule la trayectoria y represente la entidad en un camino en línea recta. Un vector DR de este tipo contiene información sobre la posición inicial y la velocidad del jugador/entidad, donde la velocidad es constante. Por lo tanto, los vectores DR enviados por un jugador especifican el tiempo actual en el jugador cuando se calcula el vector DR (no el tiempo en el que este vector DR se envía a los otros jugadores, como explicaremos más adelante), la posición actual del jugador/entidad en términos de las coordenadas x, y, z y el vector de velocidad en la dirección de las coordenadas x, y, z. Específicamente, el vector DRi enviado por el jugador j sobre la k-ésima entidad se denota como DRj ik y está representado por la siguiente tupla (Tj ik, xj ik, yj ik, zj ik, vxj ik, vyj ik, vzj ik). Sin pérdida de generalidad, en el resto de la discusión, consideramos una secuencia de vectores DR enviados por un solo jugador y para una sola entidad. Para simplificar, consideramos un espacio de juego bidimensional en lugar de uno tridimensional. Por lo tanto, usamos DRi para denotar el i-ésimo vector DR representado como la tupla (Ti, xi, yi, vxi, vyi). El jugador receptor calcula la posición inicial para la entidad basándose en xi, yi y la diferencia de tiempo entre cuando se recibe el vector DR y el tiempo Ti en el que fue calculado. Ten en cuenta que el cálculo de la diferencia de tiempo es factible ya que todos los relojes están sincronizados. El jugador receptor luego utiliza los componentes de velocidad para proyectar y representar la trayectoria de la entidad. Esta trayectoria se sigue hasta que se recibe un nuevo vector DR que cambia la posición y/o velocidad de la entidad. tiempoT1 Real Exportado Colocado dt1 A B C D DR1 = (T1, x1, y1, vx1, vy1) calculado en el tiempo T1 y enviado al receptor DR0 = (T0, x0, y0, vx0, vy0) calculado en el tiempo T0 y enviado al receptor T0 dt0 Colocado E Figura 1: Trayectorias y desviaciones. Basado en este modelo, la Figura 1 ilustra el envío y recepción de vectores DR y los diferentes errores que se encuentran. Otros tipos de vectores DR incluyen vectores DR cuadráticos que especifican la aceleración de la entidad y vectores DR de spline cúbico que consideran la posición y velocidad inicial y la posición y velocidad final de la entidad. La figura muestra la recepción de vectores de DR en un jugador (en adelante llamado receptor). El eje horizontal muestra el tiempo que está sincronizado entre todos los jugadores. El eje vertical intenta capturar conceptualmente la posición bidimensional de una entidad. Suponga que en el tiempo T0 se calcula un vector DR0 por el remitente y se envía inmediatamente al receptor. Supongamos que DR0 es recibido por el receptor después de un retraso de dt0 unidades de tiempo. El receptor calcula la posición inicial de la entidad como (x0 + vx0 × dt0, y0 + vy0 × dt0) (mostrado como punto E). La línea gruesa EBD representa la trayectoria proyectada y renderizada en el receptor basada en los componentes de velocidad vx0 y vy0 (ruta colocada). En el tiempo T1 se calcula un vector DR1 de enrutamiento dinámico para la misma entidad y se envía inmediatamente al receptor2. Suponga que DR1 es recibido por el receptor después de un retraso de dt1 unidades de tiempo. Cuando se recibe este vector DR, se asume que la entidad está en el punto D. Se calcula una nueva posición para la entidad como (x1 + vx1 × dt1, y1 + vy0 × dt1) y la entidad se mueve a esta posición (punto C). Los componentes de velocidad vx1 y vy1 se utilizan para proyectar y representar esta entidad más lejos. Ahora consideremos el error debido al retraso de la red. Aunque DR1 se calculó en el tiempo T1 y se envió al receptor, no llegó al receptor hasta el tiempo T1 + dt1. Esto significa que, aunque la ruta exportada basada en DR1 en el remitente en el tiempo T1 es la trayectoria AC, hasta el tiempo T1 + dt1, en el receptor, esta entidad estaba siendo representada en la trayectoria BD basada en DR0. Solo en el momento T1 + dt1 la entidad se movió al punto C, a partir del cual los caminos exportados y colocados son iguales. La desviación entre las rutas exportadas y colocadas crea un componente de error al que nos referimos como el error de exportación. Una forma de representar el error de exportación es calcular la integral de la distancia entre las dos trayectorias durante el tiempo en que están desincronizadas. Representamos la integral de las distancias entre las rutas colocadas y exportadas debido a algunos DR DRi en un intervalo de tiempo [t1, t2] como Err(DRi, t1, t2). En la figura, el error de exportación debido a DR1 se calcula como la integral de la distancia entre las trayectorias AC y BD en el intervalo de tiempo [T1, T1 + dt1]. Ten en cuenta que también podría haber otras formas de representar este error, pero en este artículo utilizamos la integral de la distancia entre las dos trayectorias como medida del error de exportación. Tenga en cuenta que se habría producido un error de exportación debido a la recepción de DR0, momento en el que la ruta colocada se basaría en un vector DR anterior. Esto no se muestra en la figura, pero sirve para recordar al lector que el error de exportación es acumulativo cuando se reciben una secuencia de vectores DR. A partir del tiempo T1 en adelante, hay una desviación entre las trayectorias reales y las exportadas. Como discutimos anteriormente, este error de exportación es inevitable. La figura y el ejemplo anterior ilustran solo un receptor. Pero en realidad, los vectores DR DR0 y DR1 son enviados por el remitente a todos los jugadores participantes. Cada uno de estos jugadores recibe DR0 y DR1 después de diferentes retrasos, creando así diferentes valores de error de exportación en cada jugador. El objetivo del algoritmo de programación de vectores DR que se describirá en la siguiente sección es hacer que este error de exportación (acumulativo) sea igual en cada jugador de forma independiente para cada una de las entidades que conforman el juego. ALGORITMO DE PROGRAMACIÓN PARA EL ENVÍO DE VECTORES DR En la Sección 3 mostramos cómo el retraso desde el remitente de un nuevo vector DR 2 Normalmente, los vectores DR no se calculan de forma periódica, sino bajo demanda, donde la decisión de calcular un nuevo vector DR se basa en la superación de un umbral en la desviación entre la ruta real y la ruta exportada por el vector DR anterior. 3 vector al receptor del vector DR podría llevar a un error de exportación debido a la desviación de la ruta colocada de la ruta exportada en el receptor hasta que se reciba este nuevo vector DR. También mencionamos que el objetivo del algoritmo de programación de vectores DR es igualar el error de exportación en todos los receptores durante un período de tiempo. Dado que el juego se juega en un entorno distribuido, tiene sentido que el remitente de una entidad lleve un registro de todos los errores en los receptores e intente igualarlos. Sin embargo, el remitente no puede conocer el error real en un receptor hasta que reciba alguna información sobre el error del receptor. Nuestro algoritmo estima el error para calcular un horario para enviar vectores DR a los receptores y corrige el error cuando recibe retroalimentación de los receptores. En esta sección proporcionamos las motivaciones para el algoritmo y describimos los pasos por los que atraviesa. A lo largo de esta sección, utilizaremos el siguiente ejemplo para ilustrar el algoritmo. tiempoT1 Ruta exportada Ruta colocada en el receptor 2 dt1 A B C D E F T0 G2 G1 dt2 DR1 enviado al receptor 1 DR1 enviado al receptor 2 T1 1 T1 2 da1 da2 G H I J K L N M DR1 estimado para ser recibido por el receptor 2 DR1 estimado para ser recibido por el receptor 1 DR1 recibido realmente por el receptor 1 DR1 recibido realmente por el receptor 2 DR0 enviado a ambos receptores DR1 calculado por el remitente Ruta colocada en el receptor 1 Figura 2: Flujo de vector DR entre un remitente y dos receptores y la evolución de las rutas colocadas estimadas y reales en los receptores. DR0 = (T0, T0, x0, y0, vx0, vy0), enviado en el tiempo T0 a ambos receptores. DR1 = (T1, T1 1 , x1, y1, vx1, vy1) enviado en el tiempo T1 1 = T1+δ1 al receptor 1 y DR1 = (T1, T2 1 , x1, y1, vx1, vy1) enviado en el tiempo T2 1 = T1 + δ2 al receptor 2. Considera el ejemplo en la Figura 2. La figura muestra un único emisor enviando vectores DR para una entidad a dos receptores diferentes 1 y 2. DR0 calculado en T0 es enviado y recibido por los receptores en algún momento entre T0 y T1, momento en el cual mueven la ubicación de la entidad para que coincida con la ruta exportada. Por lo tanto, la trayectoria de la entidad se muestra solo desde el punto en que la trayectoria colocada coincide con la trayectoria exportada para DR0. Ahora considera DR1. En el tiempo T1, DR1 es calculado por el remitente, pero se asume que no es enviado inmediatamente a los receptores y solo se envía después de un tiempo δ1 al receptor 1 (en el tiempo T1 1 = T1 + δ1) y después de un tiempo δ2 al receptor 2 (en el tiempo T2 1 = T1 + δ2). Ten en cuenta que el remitente incluye la marca de tiempo de envío con el vector DR como se muestra en la figura. Supongamos que el remitente estima (pronto quedará claro por qué el remitente tiene que estimar el retraso) que después de un retraso de dt1, el receptor 1 lo recibirá, utilizará los parámetros de coordenadas y velocidad para calcular la ubicación actual de la entidad y moverla allí (punto C) y a partir de ese momento, los caminos exportado y colocado serán iguales. Sin embargo, en realidad, el receptor 1 recibe DR1 después de un retraso de da1 (que es menor que las estimaciones de los remitentes de dt1), y mueve la entidad correspondiente al punto H. De manera similar, el remitente estima que después de un retraso de dt2, el receptor 2 recibirá DR1, calculará la ubicación actual de la entidad y la moverá a ese punto (punto E), mientras que en realidad recibe DR1 después de un retraso de da2 > dt2 y mueve la entidad al punto N. Los otros puntos mostrados en las rutas colocadas y exportadas se utilizarán más adelante en la discusión para describir diferentes componentes de error. 4.1 Cálculo del Error de Exportación Relativo Volviendo a la discusión de la Sección 3, desde la perspectiva de los remitentes, el error de exportación en el receptor 1 debido a DR1 se da por Err(DR1, T1, T1 + δ1 + dt1) (la integral de la distancia entre las trayectorias AC y DB en el intervalo de tiempo [T1, T1 + δ1 + dt1]) de la Figura 2. Esto se debe a que el remitente utiliza el retraso estimado dt1 para calcular este error. De manera similar, el error de exportación desde la perspectiva del remitente en el recibido 2 debido a DR1 se da por Err(DR1, T1, T1 + δ2 + dt2) (la integral de la distancia entre las trayectorias AE y DF en el intervalo de tiempo [T1, T1 + δ2 + dt2]). Ten en cuenta que los errores anteriores desde la perspectiva del remitente son solo estimaciones. En realidad, el error de exportación será tanto menor como mayor que el valor estimado, dependiendo de si la estimación de retraso fue mayor o menor que el retraso real experimentado por DR1. La diferencia entre el error de exportación estimado y el real es el error de exportación relativo (que puede ser positivo o negativo) que ocurre para cada vector de DR que se envía y se acumula en el remitente. El concepto de error relativo de exportación se ilustra en la Figura 2. Dado que el retraso actual al receptor 1 es da1, el error de exportación inducido por DR1 en el receptor 1 es Err(DR1, T1, T1 + δ1 + da1). Esto significa que hay un error en el error estimado de exportación y el remitente solo puede calcular este error después de recibir un comentario del receptor sobre la demora real en la entrega de DR1, es decir, el valor de da1. Proponemos que una vez que el receptor 1 reciba DR1, envíe el valor de da1 de vuelta al remitente. El receptor puede calcular esta información ya que conoce el momento en que se envió DR1 (T1 1 = T1 + δ1, que se añade al vector DR como se muestra en la Figura 2) y el tiempo local de recepción (que está sincronizado con el reloj del emisor). Por lo tanto, el remitente calcula el error relativo de exportación para el receptor 1, representado como R1 = Err(DR1, T1, T1 + δ1 + dt1) − Err(DR1, T1, T1 + δ1 + da1) = Err(DR1, T1 + δ1 + dt1, T1 + δ1 + da1). De manera similar, el error relativo de exportación para el receptor 2 se calcula como R2 = Err(DR1, T1, T1 + δ2 + dt2) − Err(DR1, T1, T1 + δ2 + da2) = Err(DR1, T1 + δ2 + dt2, T1 + δ2 + da2). Nótese que R1 > 0 ya que da1 < dt1, y R2 < 0 ya que da2 > dt2. Los errores relativos de exportación son calculados por el remitente en el momento en que recibe la retroalimentación de los destinatarios. Este ejemplo muestra los 4 valores relativos de error de exportación después de que se envía DR1 y se reciben los comentarios correspondientes. 4.2 Igualación del Error Entre Receptores Ahora explicamos lo que queremos decir al hacer que los errores sean iguales en todos los receptores y cómo se puede lograr esto. Como se mencionó anteriormente, el remitente mantiene estimaciones de los retrasos a los receptores, dt1 y dt2 en el ejemplo de la Figura 2. Esto indica que en el momento T1 cuando se calcula DR1, el remitente ya sabe cuánto tiempo pueden tardar los mensajes que llevan este vector DR en llegar a los receptores. El remitente utiliza esta información para calcular los errores de exportación, que son Err(DR1, T1, T1 + δ1 + dt1) y Err(DR1, T1, T1 + δ2 + dt2) para los receptores 1 y 2, respectivamente. Ten en cuenta que las áreas de estos componentes de error son una función de δ1 y δ2, así como de las demoras de red dt1 y dt2. Si queremos que los errores de exportación debido a DR1 sean iguales en ambos receptores, el remitente debe elegir δ1 y δ2 de manera que Err(DR1, T1, T1 + δ1 + dt1) = Err(DR1, T1, T1 + δ2 + dt2). Pero cuando se calculó T1, ya podría haberse acumulado errores relativos de exportación debido a los vectores DR anteriores (DR0 y los anteriores). Representemos el error relativo acumulado hasta DRi para el receptor j como Ri j. Para acomodar estos errores relativos acumulados, el remitente debe elegir ahora δ1 y δ2 de manera que R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2). Los δi determinan el instante de programación del vector DR en el remitente para el receptor i. Este método de cálculo de δs garantiza que el error de exportación acumulado (es decir, el error total real) para cada receptor se iguala en la transmisión de cada vector DR. Para establecer esto, asuma que la retroalimentación para el vector DR Di de un receptor llega al remitente antes de que se calcule el horario para Di+1. Que Si m y Ai m denoten el error estimado para el receptor m utilizado para calcular el horario para Di y el error acumulado para el receptor m calculado después de recibir retroalimentación para Di, respectivamente. Entonces Ri m = Ai m − Si m. Para calcular las instancias de programación (es decir, δs) para Di, para cualquier par de receptores m y n, hacemos Ri−1 m + Si m = Ri−1 n + Si n. El siguiente teorema establece el hecho de que el error acumulado de exportación se iguala en cada instante de programación. TEOREMA 4.1. Cuando se calculan las instancias de horario para enviar Di a cualquier par de receptores m y n, se cumple la siguiente condición: i−1 k=1 Ak m + Si m = i−1 k=1 Ak n + Si n. Prueba: Por inducción. Supongamos que la premisa se cumple para algún i. Mostramos que se cumple para i+1. El caso base para i = 1 se cumple ya que inicialmente R0 m = R0 n = 0, y se utiliza S1 m = S1 n para calcular las instancias de programación. Para calcular el horario de Di+1, primero calculamos los errores relativos como Ri m = Ai m − Si m y Ri n = Ai n − Si n. Luego, para calcular δs, ejecutamos Ri m + Si+1 m = Ri n + Si+1 n Ai m − Si m + Si+1 m = Ai n − Si n + Si+1 n. Añadiendo la condición de la premisa en ambos lados obtenemos, i k=1 Ak m + Si+1 m = i k=1 Ak n + Si+1 n. 4.3 Cálculo del Error de Exportación. Ahora consideremos cómo se pueden calcular los errores de exportación. De la sección anterior, para encontrar δ1 y δ2 necesitamos encontrar Err(DR1, T1, T1 +δ1 +dt1) y Err(DR1, T1, T1 +δ2 +dt2). Se debe tener en cuenta que los valores de R0 1 y R0 2 ya son conocidos en el remitente. Considera el cálculo de Err(DR1, T1, T1 +δ1 +dt1). Esta es la integral de la distancia entre las trayectorias AC debido a DR1 y BD debido a DR0. A partir de DR0 y DR1, el punto A es (X1, Y1) = (x1, y1) y el punto B es (X0, Y0) = (x0 + (T1 − T0) × vx0, y0 + (T1 − T0) × vy0). La trayectoria AC puede ser representada como una función del tiempo como (X1(t), Y1(t) = (X1 + vx1 × t, Y1 + vy1 × t) y la trayectoria de BD puede ser representada como (X0(t), Y0(t) = (X0 + vx0 × t, Y0 + vy0 × t). La distancia entre las dos trayectorias como función del tiempo se convierte entonces en, dist(t) = (X1(t) − X0(t))2 + (Y1(t) − Y0(t))2 = ((X1 − X0) + (vx1 − vx0)t)2 +((Y1 − Y0) + (vy1 − vy0)t)2 = ((vx1 − vx0)2 + (vy1 − vy0)2)t2 +2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0))t +(X1 − X0)2 + (Y1 − Y0)2 Sea a = (vx1 − vx0)2 + (vy1 − vy0)2 b = 2((X1 − X0)(vx1 − vx0) +(Y1 − Y0)(vy1 − vy0)) c = (X1 − X0)2 + (Y1 − Y0)2 Entonces dist(t) se puede escribir como dist(t) = a × t2 + b × t + c. Luego Err(DR1, t1, t2) para algún intervalo de tiempo [t1, t2] se convierte en t2 t1 dist(t) dt = t2 t1 a × t2 + b × t + c dt. Una solución en forma cerrada para la integral indefinida a × t2 + b × t + c dt = (2at + b) √ at2 + bt + c 4a + 1 2 ln 1 2b + at √ a + at2 + bt + c c 1 √ a − 1 8 ln 1 2b + at √ a + at2 + bt + c b2 a− 3 2 Err(DR1, T1, T1 +δ1 +dt1) y Err(DR1, T1, T1 +δ2 +dt2) pueden entonces ser calculadas aplicando los límites apropiados a la solución anterior. En la siguiente sección, consideramos el cálculo de los δs para N receptores. 5 4.4 Cálculo de Instantes de Programación Volvemos a analizar el cálculo de los δs haciendo referencia a la Figura 2. El remitente elige δ1 y δ2 de manera que R0 1 + Err(DR1, T1, T1 + δ1 +dt1) = R0 2 + Err(DR1, T1, T1 + δ2 +dt2). Si R0 1 y R0 2 ambos son cero, entonces δ1 y δ2 deben ser elegidos de tal manera que Err(DR1, T1, T1+ δ1 +dt1) = Err(DR1, T1, T1 +δ2 +dt2). Esta igualdad se mantendrá si δ1 + dt1 = δ2 + dt2. Por lo tanto, si no hay error acumulado relativo de exportación, todo lo que el remitente necesita hacer es elegir los δs de tal manera que contrarresten la diferencia en el retraso a los dos receptores, para que reciban el vector DR al mismo tiempo. Como se discutió anteriormente, dado que el remitente no puede aprender de antemano el retraso, siempre habrá un error relativo acumulado de exportación de un vector DR previo que debe tenerse en cuenta. Para profundizar en esto, considera el cálculo del error de exportación como se ilustra en la sección anterior. Para calcular los δs necesitamos que R0 1 + Err(DR1, T1, T1 + δ1 + dt1) = R0 2 + Err(DR1, T1, T1 + δ2 + dt2). Es decir, R0 1 + T1+δ1+dt1 T1 dist(t) dt = R0 2 + T1+δ2+dt2 T1 dist(t) dt. Eso es R0 1 + T1+dt1 T1 dist(t) dt + T1+dt1+δ1 T1+dt1 dist(t) dt = R0 2 + T1+dt2 T1 dist(t) dt + T1+dt2+δ2 T1+dt2 dist(t) dt. Los componentes R0 1, R0 2, ya son conocidos por (o estimados por) el remitente. Además, los componentes de error T1+dt1 T1 dist(t) dt y T1+dt2 T1 dist(t) dt pueden ser calculados a priori por el remitente utilizando valores estimados de dt1 y dt2. Usemos E1 para denotar R0 1 + T1+dt1 T1 dist(t) dt y E2 para denotar R0 2 + T1+dt2 T1 dist(t) dt. Entonces, requerimos que E1 + T1+dt1+δ1 T1+dt1 dist(t) dt = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt. Suponga que E1 > E2. Entonces, para que la ecuación anterior se cumpla, requerimos que T1+dt1+δ1 T1+dt1 dist(t) dt < T1+dt2+δ2 T1+dt2 dist(t) dt. Para hacer el juego lo más rápido posible dentro de este marco, los valores de δ deben ser lo más pequeños posible para que los vectores DR se envíen a los receptores lo antes posible, sujeto al requisito de equidad. Dado esto, elegiríamos δ1 como cero y calcularíamos δ2 a partir de la ecuación E1 = E2 + T1+dt2+δ2 T1+dt2 dist(t) dt. En general, si hay N receptores 1, . . . , N, cuando un emisor genera un vector DR y decide programarlos para ser enviados, primero calcula los valores de Ei para todos ellos a partir de los errores relativos acumulados en la exportación y las estimaciones de los retrasos. Luego, encuentra el valor más pequeño de estos valores. Que Ek sea el valor más pequeño. El remitente hace que δk sea cero y calcula el resto de los δs a partir de la igualdad Ei + T1+dti+δi T1+dti dist(t) dt = Ek, ∀i 1 ≤ i ≤ N, i = k. (1) Los δs así obtenidos dan los instantes de programación del vector DR para los receptores. 4.5 Pasos del Algoritmo de Programación Para los fines de la discusión a continuación, como antes, vamos a denotar el error relativo acumulado en un remitente para el receptor k hasta DRi como Ri k. Vamos a denotar el retraso programado en el remitente antes de que DRi sea enviado al receptor k como δi k. Dada la discusión anterior, los pasos del algoritmo son los siguientes: 1. El remitente calcula DRi en el tiempo Ti y luego calcula δi k y Ri−1 k, ∀k, 1 ≤ k ≤ N basándose en la estimación de los retrasos dtk, ∀k, 1 ≤ k ≤ N según la Ecuación (1). Programa que DRi se envíe al receptor k en el tiempo Ti + δi k. 2. Los vectores DR se envían a los receptores en los horarios programados, los cuales se reciben después de un retraso de dak, ∀k, 1 ≤ k ≤ N donde dak ≤ o > dtk. Los receptores envían el valor de dak de vuelta al remitente (el receptor puede calcular este valor basándose en las marcas de tiempo en el vector DR como se describió anteriormente). 3. El remitente calcula Ri k como se describe anteriormente e ilustra en la Figura 2. El remitente también recalcula (utilizando un método de promedio exponencial similar a la estimación del tiempo de ida y vuelta por TCP [10]) la estimación del retraso dtk a partir del nuevo valor de dak para el receptor k. 4. Vuelve al Paso 1 para calcular DRi+1 cuando sea necesario y sigue los pasos del algoritmo para programar y enviar este vector DR a los receptores. 4.6 Manejo de Casos en la Práctica Hasta ahora asumimos implícitamente que DRi se envía a todos los receptores antes de tomar una decisión para calcular el siguiente vector DR DRi+1, y los receptores envían el valor de dak correspondiente a DRi y esta información llega al remitente antes de que calcule DRi+1 para que pueda calcular Ri+1 k y luego usarlo en el cálculo de δi+1 k. Dos cuestiones deben tenerse en cuenta con respecto al algoritmo anterior cuando se utiliza en la práctica. • Puede suceder que se calcule un nuevo vector DR incluso antes de que el vector DR anterior se envíe a todos los receptores. ¿Cómo se manejará esta situación? • ¿Qué sucede si la retroalimentación no llega antes de que se calcule y programe el envío de DRi+1? Consideremos el primer escenario. Suponemos que DRi ha sido programado para ser enviado y los instantes de programación son tales que δi 1 < δi 2 < · · · < δi N. Suponga que se va a calcular DRi+1 (porque la trayectoria real se ha desviado excediendo un umbral de la trayectoria exportada por DRi) en el tiempo Ti+1 donde Ti + δi k < Ti+1 < Ti + δi k+1. Esto significa que DRi ha sido enviado solo a receptores hasta k en el orden programado. En nuestro algoritmo, en este caso, se vacía la cola de ordenación de retrasos programados, lo que significa que DRi no se envía a los receptores que aún están en cola para recibirlo, pero se calcula un nuevo orden de programación para que todos los receptores envíen DRi+1. Para aquellos receptores a quienes se les ha enviado DRi, asumir por ahora que se ha recibido de todos los receptores daj, 1 ≤ j ≤ k (el escenario donde daj no ha sido recibido se considerará como parte del segundo escenario más tarde). Para estos receptores, Ei j, 1 ≤ j ≤ k se pueden calcular. Para aquellos receptores j, k + 1 ≤ j ≤ N a quienes no se les envió DRi, Ei j no aplica. Considera un receptor j, k + 1 ≤ j ≤ N a quien no se le envió DRi. Consulte la Figura 3. Para un receptor j dado, cuando se programa DRi+1 y se exporta la ruta dtj A B C D Ti-1 Gi j, DRi+1 calculado por el remitente y DRi para el receptor k+1 a N se eliminan de la cola. DRi+1 programado para el receptor k+1, Ti+1 G H E F, DRi programado para el receptor j, DRi calculado por el remitente, se coloca la ruta en el receptor k+1, Gi+1 j. Figura 3: Cálculo de programación cuando DRi no se envía al receptor j, k + 1 ≤ j ≤ N. Se necesita calcular δi+1 j, el error total de exportación es el error de exportación relativo acumulado en el tiempo Ti cuando se programó el DRi, más la integral de la distancia entre las dos trayectorias AC y BD de la Figura 3 en el intervalo de tiempo [Ti, Ti+1 + δi+1 j + dtj]. Ten en cuenta que esta integral está dada por Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj). Por lo tanto, en lugar de Ei j de la Ecuación (1), utilizamos el valor Ri−1 j + Err(DRi, Ti, Ti+1) + Err(DRi+1, Ti+1, Ti+1 + δi+1 j + dtj) donde Ri−1 j es el error relativo de exportación utilizado cuando se calculó el horario para DRi. Ahora considera el segundo escenario. Aquí el dak de retroalimentación correspondiente a DRi no ha llegado antes de que se calcule y programe DRi+1. En este caso, Ri k no se puede calcular. Por lo tanto, en el cálculo de δk para DRi+1, se asumirá que es cero. Suponemos que se utiliza un mecanismo confiable para enviar el dak de vuelta al remitente. Cuando esta información llegue en un momento posterior, Ri k se calculará y acumulará a los errores relativos de exportación futuros (por ejemplo, Ri+1 k si dak se recibe antes de que se calcule DRi+2) y se utilizará en el cálculo de δk cuando se programe un vector DR futuro (por ejemplo, DRi+2). 4.7 Resultados Experimentales Para evaluar la efectividad y cuantificar los beneficios obtenidos a través del uso del algoritmo de programación, implementamos el algoritmo propuesto en el juego BZFlag (Battle Zone Flag) [11]. Es un juego de disparos en primera persona donde los jugadores en equipos conducen tanques y se mueven dentro de un campo de batalla. El objetivo de los jugadores es navegar y capturar las banderas pertenecientes al otro equipo y llevarlas de vuelta a su propia área. Los jugadores disparan a los tanques de los demás usando balas de disparo. El movimiento de los tanques, así como el de los disparos, se intercambian entre los jugadores utilizando vectores DR. Hemos modificado la implementación de BZFlag para incorporar relojes sincronizados entre los jugadores y el servidor, y intercambiar marcas de tiempo con el vector DR. Establecimos un banco de pruebas con cuatro jugadores ejecutando la versión instrumentada de BZFlag, con uno como emisor y el resto como receptores. El enfoque de programación y el caso base en el que cada vector de DR se envió a todos los receptores simultáneamente en cada punto de activación se implementaron en la misma ejecución etiquetando los vectores de DR según el tipo de enfoque utilizado para enviar el vector de DR. NISTNet [12] se utilizó para introducir retrasos en el emisor y los tres receptores. Se introdujeron retrasos medios de 800 ms, 500 ms y 200 ms entre el emisor y el primer, segundo y tercer receptor, respectivamente. Introducimos una variación de 100 milisegundos (al retraso medio de cada receptor) para modelar la variabilidad en el retraso. El remitente registró los errores de cada receptor cada 100 milisegundos tanto para el enfoque de programación como para el caso base. El remitente también calculó la desviación estándar y la media del error de exportación acumulado de todos los receptores cada 100 milisegundos. La Figura 4 representa la media y la desviación estándar del error acumulado de exportación de todos los receptores en el caso de programación frente al caso base. Ten en cuenta que el eje x de estos gráficos (y de los demás gráficos que siguen) representa el tiempo del sistema cuando se tomó la instantánea del juego. Observe que la desviación estándar del error con la programación es mucho menor en comparación con el caso base. Esto implica que los errores acumulados de los receptores en el caso de programación están más cerca unos de otros. Esto demuestra que el enfoque de programación logra equidad entre los receptores incluso si se encuentran a diferentes distancias (es decir, latencias) del emisor. Observe que la media del error acumulado aumentó varias veces con la programación en comparación con el caso base. La exploración adicional de la razón del aumento en la media llevó a la conclusión de que cada vez que los vectores de DR se programan de manera que igualen el error total, empuja el error total de cada receptor hacia arriba. Además, dado que el error acumulado tiene un componente estimado, el horario no es preciso para igualar los errores de los receptores, lo que provoca que el vector de DR llegue antes o después de la programación real. En cualquier caso, el error no se iguala y si el vector de DR llega tarde, en realidad aumenta el error para un receptor más allá del error acumulado más alto. Esto significa que en el próximo disparo, este receptor será el que tenga el error más alto y el error de todos los demás receptores se ajustará a este valor de error. Este efecto de cambio repentino conlleva un aumento en el error acumulado para todos los receptores. La programación para la equidad conduce a la disminución de la desviación estándar (es decir, aumenta la equidad entre los diferentes jugadores), pero esto conlleva un mayor error medio, lo cual puede no ser una característica deseable. Esto nos llevó a explorar diferentes formas de igualar los errores acumulados. El enfoque discutido en la siguiente sección es un enfoque heurístico basado en la siguiente idea. Utilizando la misma cantidad de vectores de DR a lo largo del tiempo que en el caso base, en lugar de enviar los vectores de DR a todos los receptores con la misma frecuencia que en el caso base, si podemos aumentar la frecuencia de envío de los vectores de DR al receptor con un error acumulado más alto y disminuir la frecuencia de envío de los vectores de DR al receptor con un error acumulado más bajo, podemos igualar el error de exportación de todos los receptores a lo largo del tiempo. Al mismo tiempo, deseamos disminuir el error del receptor con el error acumulado más alto en el caso base (por supuesto, este receptor recibiría más vectores DR que en el caso base). Nos referimos a dicho algoritmo como un algoritmo basado en presupuesto. ALGORITMO BASADO EN PRESUPUESTO En un juego, el remitente de una entidad envía vectores DR a todos los receptores cada vez que la entidad cruza un umbral. Al reducir el umbral, se generan más vectores de DR durante un período de tiempo dado. Dado que los vectores DR se envían a todos los receptores y el retraso de red entre los pares emisor-receptor no se puede evitar, el error antes de la exportación 3 con el jugador más distante siempre será 3. Tenga en cuenta que después de la exportación, el error se elimina mediante el uso de un reloj sincronizado entre los jugadores. 7 0 1000 2000 3000 4000 5000 15950 16000 16050 16100 16150 16200 16250 16300 Error acumulado promedio en segundos Algoritmo de programación del caso base #1 0 50 100 150 200 250 300 350 400 450 500 15950 16000 16050 16100 16150 16200 16250 16300 Desviación estándar del error acumulado en segundos Algoritmo de programación del caso base #1 Figura 4: Promedio y desviación estándar del error con programación y sin ella (es decir, caso base) serán más altos que el resto. Para mitigar el desequilibrio en el error, proponemos enviar vectores de DR selectivamente a diferentes jugadores basándonos en los errores acumulados de estos jugadores. El algoritmo basado en presupuesto se fundamenta en esta idea y existen dos variaciones de él. Uno es un esquema de presupuesto probabilístico y el otro, un esquema de presupuesto determinístico. 5.1 Esquema de presupuesto probabilístico El esquema de presupuesto probabilístico tiene tres pasos principales: a) reducir el umbral de navegación inercial pero al mismo tiempo mantener el número total de DR enviados igual que en el caso base, b) en cada disparador, elegir probabilísticamente a un jugador para enviarle el vector de DR, y c) enviar el vector de DR al jugador elegido. Estos pasos se describen a continuación. La reducción del umbral de DR se implementa de la siguiente manera. Reducir el umbral es equivalente a aumentar el número de puntos de activación donde se generan los vectores de DR. Supongamos que el umbral es tal que el número de disparadores causados por él en el caso base es t y en cada disparador se envían n vectores DR por el remitente, lo que resulta en un total de nt vectores DR. Nuestro objetivo es mantener el número total de vectores DR enviados por el remitente fijo en nt, pero reducir el número de vectores DR enviados en cada activación (es decir, no enviar el vector DR a todos los receptores). Que n y t sean el número de vectores DR enviados en cada disparo y el número de disparos respectivamente en el caso modificado. Queremos asegurarnos de que n t = nt. Dado que queremos aumentar el número de puntos de activación, es decir, t > t, esto significaría que n < n. Es decir, no todos los receptores recibirán el vector DR en cada activación. En el esquema de presupuesto probabilístico, en cada activación, se calcula una probabilidad para que cada receptor reciba un vector DR y solo un receptor recibe el DR (n = 1). Esta probabilidad se basa en los pesos relativos de los errores acumulados de los receptores. Es decir, un receptor con un error acumulado más alto tendrá una probabilidad más alta de recibir el vector DR. Ten en cuenta que el error acumulado para tres jugadores es a1, a2 y a3 respectivamente. Entonces, la probabilidad de que el jugador 1 reciba el vector DR sería a1 a1+a2+a3. Del mismo modo para los otros jugadores. Una vez que se elige al jugador, el vector DR se envía a ese jugador. Para comparar el algoritmo basado en presupuesto probabilístico con el caso base, necesitábamos reducir el umbral para el caso base (para una comparación justa). Dado que el umbral de cálculo de la posición muerta en el caso base ya era muy fino, se decidió que en lugar de reducir el umbral, se compararía el enfoque basado en el presupuesto probabilístico con un caso base modificado que utilizaría el umbral normal como algoritmo basado en el presupuesto, pero el caso base se modificó de tal manera que cada tercer disparador se usaría realmente para enviar un vector de cálculo de la posición muerta a los tres receptores utilizados en nuestros experimentos. Esto fue llamado como el caso base 1/3 ya que resultó en el envío de 1/3 del número de vectores DR en comparación con el caso base. El presupuesto por disparador para el enfoque basado en la probabilidad se calculó como un vector de DR en cada disparador en comparación con tres vectores de DR en cada tercer disparador en el caso base de 1/3; por lo tanto, los dos casos resultan en el mismo número de vectores de DR enviados con el tiempo. Para evaluar la efectividad del algoritmo de presupuesto probabilístico, instrumentamos el juego BZFlag para utilizar este enfoque. Utilizamos el mismo banco de pruebas que consistía en un emisor y tres receptores con retardos de 800ms, 500ms y 200ms desde el emisor y con baja varianza de retardo (100ms) y moderada varianza de retardo (180ms). Los resultados se muestran en las Figuras 5 y 6. Como se mencionó anteriormente, el eje x de estos gráficos representa el tiempo del sistema cuando se tomó la instantánea del juego. Observe de las figuras que la desviación estándar del error acumulado entre los receptores con el algoritmo basado en presupuesto probabilístico es menor que el caso base de 1/3 y la media es un poco más alta que el caso base de 1/3. Esto implica que el juego es más justo en comparación con el caso base de 1/3 a costa de aumentar ligeramente el error medio en comparación con el caso base de 1/3. El aumento en el error medio en el caso probabilístico en comparación con el caso base de 1/3 se puede atribuir al hecho de que, aunque en promedio el enfoque probabilístico envía el mismo número de vectores DR que el caso base de 1/3, a veces envía vectores DR a un receptor con menos frecuencia y a veces con más frecuencia que el caso base de 1/3 debido a su naturaleza probabilística. Cuando un receptor no recibe un vector DR durante mucho tiempo, la trayectoria del receptor se aleja cada vez más de la trayectoria del emisor y, por lo tanto, la tasa de acumulación del error en el receptor es mayor. En ocasiones, cuando un receptor recibe vectores de DR con más frecuencia, acumula errores a un ritmo más bajo, pero no hay forma de revertir el error acumulado cuando no recibió un vector de DR durante mucho tiempo. Esto lleva a que los receptores acumulen más error en el caso probabilístico en comparación con el caso base de 1/3 donde los receptores reciben un vector DR casi periódicamente. Para limitar el aumento en el error medio, decidimos modificar el algoritmo basado en presupuesto para que sea determinista. Los dos primeros pasos del algoritmo son los mismos que en el algoritmo probabilístico; los puntos de activación se incrementan para reducir el umbral y los errores acumulados se utilizan para calcular la probabilidad de que un receptor reciba un vector DR. Una vez que se completen estos pasos, se calcula un horario determinista para el receptor de la siguiente manera: 1. Si hay algún receptor etiquetado para recibir un vector DR en el disparador actual, el remitente envía el vector DR al(s) receptor(es) respectivo(s). Si al menos un receptor recibió un vector DR, el remitente calcula las probabilidades de que cada receptor reciba un vector DR como se explicó anteriormente y sigue los pasos del 2 al 6; de lo contrario, no hace nada. 2. Para cada receptor, el valor de probabilidad se multiplica por el presupuesto disponible en cada activador (que se establece en 1 como se explica a continuación) para dar la frecuencia de envío del vector DR a cada receptor. Si alguna de las frecuencias de los receptores, después de multiplicarse por el presupuesto, supera 1, la frecuencia del receptor se establece en 1 y la cantidad excedente se distribuye equitativamente entre todos los receptores sumando la cantidad a sus frecuencias existentes. Este proceso se repite hasta que todos los receptores tengan una frecuencia menor o igual a 1. Esto se debe a que en un disparador no podemos enviar más de un vector DR al receptor respectivo. Eso sería un desperdicio de vectores DR al enviar información redundante. 4. (1/frecuencia) nos da el horario en el que el remitente debe enviar vectores DR al receptor respectivo. El crédito obtenido previamente (explicado en el paso 5), si lo hubiera, se resta del horario. Observe que el valor resultante del horario podría no ser un número entero; por lo tanto, el valor se redondea hacia arriba tomando el techo del horario. Por ejemplo, si la frecuencia es de 1/3.5, esto implica que nos gustaría que se enviara un vector de DR cada 3.5 disparadores. Sin embargo, estamos obligados a enviarlo en el cuarto disparo, lo que nos otorga un crédito de 0.5. Cuando enviemos el vector DR la próxima vez, podremos enviarlo en el 3er disparo debido al crédito de 0.5. La diferencia entre el horario y el límite del horario es el crédito que el receptor ha obtenido, que se recuerda para el futuro y se utiliza en el próximo momento, como se explica en el paso 4. 6. Para cada uno de esos receptores a quienes se les envió un vector DR en el disparador actual, los receptores están etiquetados para recibir el próximo vector DR en el disparador que ocurre exactamente el número de veces programado (el techo del programa) lejos del disparador actual. Observe que en este punto no se modifica el horario de ningún otro receptor, ya que todos están ejecutando un horario calculado en algún punto anterior en el tiempo. Esos horarios se modificarán automáticamente en el disparador cuando estén programados para recibir el siguiente vector de DR. En el primer disparador, el remitente envía el vector DR a todos los receptores y utiliza una probabilidad relativa de 1/n para cada receptor y sigue los pasos 2 al 6 para calcular el próximo horario para cada receptor de la misma manera que se menciona para otros disparadores. Este algoritmo garantiza que cada receptor tenga un horario garantizado para recibir vectores DR y, por lo tanto, no haya irregularidades en el envío del vector DR a ningún receptor, como se observó en el algoritmo probabilístico basado en presupuesto. Utilizamos el banco de pruebas descrito anteriormente (tres receptores con retardos variables) para evaluar el algoritmo determinista utilizando el presupuesto de 1 vector DR por activación para así utilizar el mismo número de vectores DR que en el caso base 1/3. Los resultados de nuestros experimentos se muestran en las Figuras 5 y 6. Se puede observar que la desviación estándar del error en el algoritmo basado en presupuesto determinista es menor que el caso base de 1/3 y también tiene el mismo error medio que el caso base de 1/3. Esto indica que el algoritmo determinista es más justo que el caso base de 1/3 y al mismo tiempo no aumenta el error medio, lo que conduce a una mejor calidad de juego en comparación con el algoritmo probabilístico. En general, al comparar el enfoque determinista con el enfoque probabilístico, encontramos que el error acumulado promedio siempre fue menor en el enfoque determinista. Con respecto a la desviación estándar del error acumulado, encontramos que en los casos de varianza fija o baja, el enfoque determinista fue generalmente menor, pero en casos de mayor varianza, era más difícil sacar conclusiones ya que a veces el enfoque probabilístico era mejor que el determinista. CONCLUSIONES Y TRABAJO FUTURO En los juegos multijugador distribuidos que se juegan a través de Internet, los objetos y la trayectoria de los jugadores dentro del espacio de juego se intercambian en términos de vectores DR. Debido al retraso variable entre jugadores, estos vectores DR llegan a diferentes jugadores en momentos distintos. Existe una ventaja injusta obtenida por los receptores que están más cerca del remitente del DR, ya que pueden representar la posición del remitente de manera más precisa en tiempo real. En este documento, primero desarrollamos un modelo para estimar el error en la representación de las trayectorias de los jugadores en los receptores. Luego presentamos un algoritmo basado en programar los vectores de DR para ser enviados a diferentes jugadores en diferentes momentos, igualando así el error en los diferentes jugadores. Este algoritmo tiene como objetivo hacer que el juego sea justo para todos los jugadores, pero tiende a aumentar el error promedio de los jugadores. Para contrarrestar este efecto, presentamos algoritmos basados en presupuestos donde los vectores de DR aún se programan para ser enviados a diferentes jugadores en diferentes momentos, pero el algoritmo equilibra la necesidad de equidad con el requisito de que el error de los jugadores en el peor caso (que están más lejos del remitente) no se incremente en comparación con el caso base (donde todos los vectores de DR se envían a todos los jugadores cada vez que se genera un vector de DR). Presentamos dos variaciones de los algoritmos basados en el presupuesto y, a través de experimentación, demostramos que los algoritmos reducen la desviación estándar del error, haciendo así el juego más justo y al mismo tiempo manteniendo un error medio comparable al caso base. REFERENCIAS [1] S. Aggarwal, H. Banavar, A. Khandelwal, S. Mukherjee y S. Rangarajan, Precisión en juegos distribuidos multijugador basados en Dead-Reckoning, Actas del Taller ACM SIGCOMM 2004 sobre Soporte de Redes y Sistemas para Juegos (NetGames 2004), agosto de 2004. [2] L. Gautier y C. Diot, Diseño y Evaluación de MiMaze, un juego multijugador en Internet, en Actas de IEEE Multimedia (ICMCS98), 1998. [3] M. Mauve, Consistencia en medios interactivos continuos replicados, en Actas de la Conferencia ACM sobre Trabajo Cooperativo Asistido por Computadora (CSCW00), 2000, pp. 181-190. [4] S.K. Singhal y D.R. Cheriton, Explotando el historial de posición para una representación remota eficiente en la realidad virtual en red, Presencia: Teleoperadores y Entornos Virtuales, vol. 4, núm. 2, pp. 169-193, 1995. [5] C. Diot y L. Gautier, Una arquitectura distribuida para aplicaciones interactivas multijugador en Internet, en la revista IEEE Network, 1999, vol. 13, pp. 6-15. [6] L. Pantel y L.C. Wolf, Sobre el impacto del retraso en los juegos multijugador en tiempo real, en Actas de ACM NOSSDAV02, mayo de 2002. [7] Y. Lin, K. Guo y S. Paul, Sync-MS: Servicio de mensajería sincronizada para juegos distribuidos multijugador en tiempo real, en Actas de la 10ª Conferencia Internacional de Protocolos de Red de IEEE (ICNP), noviembre de 2002. [8] K. Guo, S. Mukherjee, S. Rangarajan y S. Paul, Un marco de intercambio de mensajes justo para juegos distribuidos multijugador, en Actas de NetGames2003, mayo de 2003. [9] N. E. Baughman y B. N. Levine, Reproducción a prueba de trampas para juegos en línea centralizados y distribuidos, en Actas de IEEE INFOCOM01, abril de 2001. [10] M. Allman y V. Paxson, Sobre la estimación de propiedades de la ruta de red de extremo a extremo, en Actas de ACM SIGCOMM99, septiembre de 1999. [11] Foro de BZFlag, Juego de BZFlag, URL: http://www.bzflag.org. [12] Instituto Nacional de Estándares y Tecnología, NIST Net, URL: http://snad.ncsl.nist.gov/nistnet/.