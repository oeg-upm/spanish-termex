La determinación del ganador en subastas combinatorias es el problema de determinar la asignación de los artículos entre los postores que maximiza la suma de los precios de las ofertas aceptadas. Si bien este problema es en general NP-difícil, se sabe que es factible en tiempo polinómico en aquellas instancias cuyos grafos de elementos asociados tienen un ancho de árbol acotado (llamados grafos de elementos estructurados). Formalmente, un grafo de elementos es un grafo cuyos nodos están en correspondencia uno a uno con los elementos, y las aristas son tales que para cualquier oferta, los elementos que aparecen en ella inducen un subgrafo conectado. Ten en cuenta que muchos grafos de elementos pueden estar asociados con una subasta combinatoria dada, dependiendo de las aristas seleccionadas para garantizar la conectividad. De hecho, la tratabilidad de determinar si existe un grafo de ítems estructurados con un ancho de árbol fijo (y en caso afirmativo, calcularlo) se dejó como un problema abierto crucial. En este artículo, resolvemos este problema demostrando que la existencia de un grafo de elementos estructurados es computacionalmente intratable, incluso para una treewidth de 3. Motivados por estas malas noticias, investigamos diferentes tipos de requisitos estructurales que se pueden utilizar para aislar clases manejables de subastas combinatorias. Mostramos que la noción de descomposición de hiperárboles, una medida recientemente introducida de ciclicidad de hipergrafos, resulta ser muy útil aquí. De hecho, demostramos que el problema de determinación del ganador es soluble en tiempo polinómico en instancias cuyas interacciones de licitantes pueden ser representadas con hipergrafos (duales) que tienen un ancho de hiperárbol acotado. Aún más sorprendentemente, demostramos que la clase de instancias tratables identificadas mediante nuestro enfoque contiene adecuadamente la clase de instancias que tienen un grafo de elementos estructurado. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía; F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas 1. INTRODUCCIÓN Subastas combinatorias. Las subastas combinatorias son mecanismos bien conocidos para la asignación de recursos y tareas donde a los postores se les permite pujar simultáneamente por combinaciones de artículos. Esto es deseable cuando la valoración de un postor de un conjunto de artículos no es igual a la suma de sus valoraciones de los artículos individuales. Este marco se utiliza actualmente para regular las interacciones de agentes en varios dominios de aplicación (cf., por ejemplo, [21]), como mercados de electricidad [13], subastas de ancho de banda [14] e intercambios de transporte [18]. Formalmente, una subasta combinatoria es un par I, B, donde I = {I1, ..., Im} es el conjunto de artículos que el subastador tiene para vender, y B = {B1, ..., Bn} es el conjunto de ofertas de los compradores interesados en los artículos en I. Cada oferta Bi tiene la forma item(Bi), pay(Bi), donde pay(Bi) es un número racional que denota el precio que un comprador ofrece por los artículos en item(Bi) ⊆ I. Un resultado para I, B es un subconjunto b de B tal que item(Bi)∩item(Bj) = ∅, para cada par Bi y Bj de ofertas en b con i = j. El problema de determinación del ganador. Un problema crucial para las subastas combinatorias es determinar el resultado b∗ que maximiza la suma de los precios de las ofertas aceptadas (es decir, Bi∈b∗ paga(Bi)) sobre todos los resultados posibles. Este problema, llamado problema de determinación del ganador (por ejemplo, [11]), se sabe que es intratable, de hecho NP-duro [17], e incluso no aproximable en tiempo polinómico a menos que NP = ZPP [19]. Por lo tanto, no sorprende que se hayan dedicado varios esfuerzos para diseñar algoritmos prácticamente eficientes para subastas generales (por ejemplo, [20, 5, 2, 8, 23]) e identificar clases de instancias donde resolver el problema de determinación del ganador sea factible en tiempo polinómico (por ejemplo, [15, 22, 12, 21]). De hecho, se demostró que restringir la interacción de los postores es útil para identificar clases de subastas combinatorias manejables. Gráficos de ítems. Actualmente, la clase más general de subastas combinatorias tratables ha sido identificada mediante la modelización de las interacciones entre postores con la noción de grafo de elementos, que es un grafo cuyos nodos están en correspondencia uno a uno con los elementos, y las aristas son tales que para cualquier oferta, los elementos que la componen inducen un subgrafo conectado. De hecho, se demostró que el problema de determinación del ganador es soluble en tiempo polinómico si las interacciones entre los postores pueden ser representadas mediante un grafo de elementos estructurado, es decir, un árbol o, más generalmente, un grafo con estructura similar a un árbol [3]-formalmente limitado por el ancho del árbol [16]. Para tener una intuición sobre cómo se pueden construir los gráficos de elementos, notamos que la interacción del postor en una subasta combinatoria I, B puede ser representada mediante un hipergrafo H I,B de tal manera que su conjunto de nodos N(H I,B) coincide con el conjunto de elementos I, y donde sus aristas E(H I,B) son precisamente las ofertas de los compradores {elemento(Bi) | Bi ∈ B}. Un gráfico de ítems especiales para I, B es el gráfico primal de H I,B, denotado por G(H I,B), que contiene una arista entre cada par de nodos en alguna hiperarista de H I,B. Entonces, cualquier gráfico de elementos para H I,B se puede ver como una simplificación de G(H I,B) obtenida al eliminar algunas aristas, manteniendo la condición de conectividad en los nodos incluidos en cada hiperarista. Ejemplo 1. El hipercubo H I0,B0 reportado en la Figura 1. (a) es una codificación para una subasta combinatoria I0, B0, donde I0 = {I1, ..., I5}, y item(Bi) = hi, para cada 1 ≤ i ≤ 3. El grafo primario para H I0,B0 se reporta en la Figura 1. (b), mientras que dos ejemplos de grafos de elementos se reportan en la Figura 1. (c) y (d), donde se muestran en negrita las aristas necesarias para mantener la conectividad para h1. ¡Problema abierto: Calcular de manera eficiente los grafos de elementos estructurados. El resultado de tratabilidad mencionado anteriormente en grafos de elementos estructurados resulta ser útil en la práctica solo cuando un grafo de elementos estructurados está dado o puede determinarse eficientemente. Sin embargo, podría haber una cantidad exponencial de gráficos de elementos asociados con una subasta combinatoria, y no está claro cómo determinar si existe un gráfico de elementos estructurado de cierto ancho de árbol (constante), y en caso afirmativo, cómo calcular eficientemente dicho gráfico de elementos estructurado. Los algoritmos de tiempo polinómico para encontrar la mejor simplificación del grafo primal solo se conocían hasta ahora para los casos en los que el grafo de elementos a construir es una línea [10], un ciclo [4] o un árbol [3], pero era un importante problema abierto (cf. [3]) si es factible verificar si para una subasta combinatoria, existe un grafo de elementos con un ancho de árbol limitado por un número natural fijo k y si se puede construir en tiempo polinómico, en caso afirmativo. Empaquetamiento de conjuntos ponderado. Cabe destacar que la representación de hipergrafo H I,B de una subasta combinatoria I, B también es útil para establecer la analogía entre el problema de determinación del ganador y el problema de empaquetamiento de conjuntos con peso máximo en hipergrafos (por ejemplo, [17]). Formalmente, un empaquetamiento h para un hipergrafo H es un conjunto de hiperarcos de H tal que para cada par h, h ∈ h con h ≠ h, se cumple que h ∩ h = ∅. Si se deja que w sea una función de ponderación para H, es decir, una función computable en tiempo polinómico de E(H) a números racionales, el peso de un empaquetado h es el número racional w(h) = h∈h w(h), donde w({}) = 0. Entonces, el problema de empaquetamiento de conjuntos con peso máximo para H con respecto a w, denotado por MaxWSP(H, w), es el problema de encontrar un empaquetamiento para H que tenga el peso máximo entre todos los empaquetamientos para H. Para ver que MaxWSP es simplemente una formulación diferente para el problema de determinación del ganador, dado una subasta combinatoria I, B, es suficiente definir la función de ponderación w I,B (elemento(Bi)) = pago(Bi). Entonces, el conjunto de soluciones para el problema de empaquetamiento de conjuntos ponderados para H I,B con respecto a w I,B coincide con el conjunto de soluciones para el problema de determinación del ganador en I, B. Ejemplo 2. Considera nuevamente el hipercubo H I0,B0 reportado en la Figura 1.(a). Un ejemplo de empaquetado para H I0, B0 es h = {h1}, que intuitivamente corresponde a un resultado para I0, B0, donde el subastador aceptó la oferta B1. Al asumir que las ofertas B1, B2 y B3 son tales que pay(B1) = pay(B2) = pay(B3), el empaquetado h no es una solución para el problema MaxWSP(H I0,B0 , w I0,B0). De hecho, el empaque h∗ = {h2, h3} es tal que w I0,B0 (h∗ ) > w I0,B0 (h). ¡Contribuciones! El objetivo principal de este artículo es identificar clases grandes y manejables para el problema de determinación del ganador, que además sean reconocibles de forma polinómica. Con este objetivo, primero estudiamos grafos de elementos estructurados y resolvemos el problema abierto en [3]. El resultado es una noticia muy mala: es NP completo verificar si una subasta combinatoria tiene un grafo de elementos estructurado de ancho de árbol 3. De manera más formal, dejando que C(ig, k) denote la clase de todos los hipergrafos que tienen un árbol de ítems con un ancho de árbol limitado por k, demostramos que decidir si un hipergrafo (asociado con un problema de subasta combinatoria) pertenece a C(ig, 3) es NP-completo. A la luz de este resultado, fue crucial evaluar si existen otros tipos de requisitos estructurales que puedan ser verificados en tiempo polinómico y que aún puedan ser utilizados para aislar clases tratables del problema de empaquetamiento de conjuntos con peso máximo o, equivalentemente, el problema de determinación del ganador. Nuestras investigaciones, esta vez, llevaron a noticias muy buenas que se resumen a continuación: Para un hipercubo H, su dual ¯H = (V, E) es tal que los nodos en V están en correspondencia uno a uno con los hiperarcos en H, y para cada nodo x ∈ N(H), {h | x ∈ h ∧ h ∈ 153 E(H)} está en E. Mostramos que MaxWSP es tratable en la clase de aquellas instancias cuyos hipercubos duales tienen un ancho de hiperárbol[7] limitado por k (abreviado: clase C(hw, k) de hipercubos). Cabe destacar que un problema clave de la tratabilidad es considerar el ancho de hiperárbol del hipergrafo dual ¯H en lugar del hipergrafo de subastas H. De hecho, podemos demostrar que MaxWSP sigue siendo NP-duro incluso cuando H es acíclico (es decir, cuando tiene un ancho de hiperárbol de 1), incluso cuando cada nodo está contenido en un máximo de 3 hiperarcos. Para algunas clases especiales relevantes de hipergrafos en C(hw, k), diseñamos un algoritmo altamente paralelizable para MaxWSP. Específicamente, si las funciones de ponderación se pueden calcular en espacio logarítmico y los pesos son polinomiales (por ejemplo, cuando todos los hiperarcos tienen pesos unitarios y se está interesado en encontrar el empaquetamiento con el máximo número de arcos), demostramos que MaxWSP puede resolverse mediante un algoritmo LOGCFL. Recuerde, de hecho, que LOGCFL es la clase de problemas de decisión que son reducibles en espacio logarítmico a lenguajes libres de contexto, y que LOGCFL ⊆ NC2 ⊆ P (ver, por ejemplo, [9]). Sorprendentemente, demostramos que no se pierde nada en términos de generalidad al considerar la descomposición de hipertree de los hipergrafos duales en lugar de la treewidth de los grafos de elementos. Por el contrario, el método de descomposición propuesto basado en hypertrees es estrictamente más general que el método de grafos de elementos estructurados. De hecho, demostramos que clases de instancias estrictamente más grandes son tratables según nuestro nuevo enfoque que según el enfoque de gráficos de elementos estructurados. De manera intuitiva, la NP-dificultad de reconocer grafos de elementos estructurados de ancho acotado no se debe a su gran generalidad, sino más bien a algunas peculiaridades en su definición. La prueba de los resultados anteriores nos brinda una perspectiva interesante sobre la noción de grafo de elementos estructurados. De hecho, demostramos que los grafos de elementos estructurados están en correspondencia uno a uno con algunos tipos especiales de descomposición de hiperárboles del hipergrafo dual, a los que llamamos descomposiciones de hiperárboles estrictas. También se propone una caracterización de juego para la noción de ancho de hiperárbol estricto, que se especializa en el juego de Ladrón y Policías en [6] (propuesto para caracterizar el ancho de hiperárbol), y que aclara los requisitos adicionales sobre las descomposiciones de hiperárboles. El resto del documento está organizado de la siguiente manera. La sección 2 discute la intratabilidad de los grafos de elementos estructurados. La sección 3 presenta el algoritmo de tiempo polinómico para resolver MaxWSP en la clase de aquellas instancias cuyos hipergrafos duales tienen un ancho de hipertree acotado, y discute los casos en los que el algoritmo también es altamente paralelizable. La comparación entre las clases C(ig, k) y C(hw, k) se discute en la Sección 4. Finalmente, en la Sección 5 sacamos nuestras conclusiones también delineando las direcciones para futuras investigaciones. 2. COMPLEJIDAD DE LOS GRAFOS DE ELEMENTOS ESTRUCTURADOS Sea H un hipergrafo. Un grafo G = (V, E) es un grafo de elementos para H si V = N(H) y, para cada h ∈ E(H), el subgrafo de G inducido sobre los nodos en h está conectado. Una clase importante de grafos de elementos es la de grafos de elementos estructurados, es decir, aquellos grafos de elementos que tienen un ancho de árbol acotado como se formaliza a continuación. Una descomposición de árbol [16] de un grafo G = (V, E) es un par T, χ, donde T = (N, F) es un árbol, y χ es una función de etiquetado que asigna a cada vértice p ∈ N un conjunto de vértices χ(p) ⊆ V, de modo que se satisfacen las siguientes condiciones: (1) para cada vértice b de G, existe un p ∈ N tal que b ∈ χ(p); (2) para cada arista {b, d} ∈ E, existe un p ∈ N tal que {b, d} ⊆ χ(p); (3) para cada vértice b de G, el conjunto {p ∈ N | b ∈ χ(p)} induce un subárbol conectado de T. El ancho de T, χ es el número maxp∈N |χ(p) − 1|. El treewidth de G, denotado por tw(G), es el ancho mínimo sobre todas sus descomposiciones en árboles. El problema de determinación del ganador puede resolverse en tiempo polinómico en grafos de elementos con treewidth acotado [3]. Teorema 1 (cf. [3]). Se tiene una descomposición en árbol de ancho k T, χ de un grafo de elementos para H. Entonces, MaxWSP(H, w) se puede resolver en tiempo O(|T|2 ×(|E(H)|+1)k+1 ). Muchos gráficos de elementos pueden estar asociados con un hipergráfico. Como ejemplo, observe que el grafo de elementos en la Figura 1. (c) tiene un ancho de árbol de 1, mientras que la Figura 1. (d) muestra un grafo de elementos cuyo ancho de árbol es 2. De hecho, era una pregunta abierta si, para una constante k dada, se puede verificar en tiempo polinómico si existe un grafo de ítems de ancho de árbol k, y en caso afirmativo, si dicho grafo de ítems se puede calcular eficientemente. La principal tarea de esta sección es demostrar que la clase C(ig, k) es difícil de reconocer. Teorema 2. Decidir si un hipergrafo H pertenece a C(ig, 3) es NP-difícil. La prueba de este resultado se basa en una reducción elaborada del problema de camino hamiltoniano HP(s, t) que consiste en decidir si hay un camino hamiltoniano desde un nodo s hasta un nodo t en un grafo dirigido G = (N, E). Para ayudar a la intuición, aquí presentamos una descripción general de alto nivel de los principales ingredientes utilizados en la prueba. La idea general es construir un hipercubo HG de tal manera que exista un grafo de elementos G para HG con tw(G) ≤ 3 si y solo si HP(s, t) sobre G tiene una solución. Primero, discutimos la forma en que se construye HG. Ver la Figura 2. (a) para una ilustración, donde el grafo G consiste en los nodos s, x, y, y t, y el conjunto de sus aristas es {e1 = (s, x), e2 = (x, y), e3 = (x, t), e4 = (y, t)}. De G a HG. Sea G = (N, E) un grafo dirigido. Entonces, el conjunto de nodos en HG es tal que: para cada x ∈ N, N(HG) contiene los nodos bsx, btx, bx, bx, bdx; para cada e = (x, y) ∈ E, N(HG) contiene los nodos nsx, nsx, nty, nty, nsex y ntey. Ningún otro nodo está en N(HG). Los hiperarcos en HG son de tres tipos: 1) para cada x ∈ N, E(HG) contiene los hiperarcos: • Sx = {bsx} ∪ {nse x | e = (x, y) ∈ E}; • Tx = {btx} ∪ {nte x | e = (z, x) ∈ E}; • A1 x = {bdx, bx}, A2 x = {bdx, bx}, y A3 x = {bx, bx} -nota que estos hiperarcos inducen una clique en los nodos {bx, bx, bdx}; 1 Las pruebas detalladas se pueden encontrar en el Apéndice, disponible en www.mat.unical.it/∼ggreco/papers/ca.pdf. Figura 2: Prueba del Teorema 2: (a) de G a HG - solo se reportan los hiperarcos en 1) y 2); (b) un esqueleto para una descomposición en árbol TD para HG. • SA1 x = {bsx, bx}, SA2 x = {bsx, bx}, SA3 x = {bsx, bdx} -nota que estos hiperarcos más A1 x, A2 x y A3 x inducen una clique en los nodos {bsx, bx, bx, bdx}; • TA1 x = {btx, bx}, TA2 x = {btx, bx}, y TA3 x = {btx, bdx} -nota que estos hiperarcos más A1 x, A2 x y A3 x inducen una clique en los nodos {btx, bx, bx, bdx}; 2) para cada e = (x, y) ∈ E, E(HG) contiene los hiperarcos: • SHx = {nsx, nsx}; • THy = {nty, nty}; • SEe = {nsx, nse x} y SEe = {nsx, nse x} -nota que estos dos hiperarcos más SHx inducen una clique en los nodos {nsx, nsx, nse x}; • TEe = {nty, nte y} y TEe = {nty, nte y} -nota que estos dos hiperarcos más THy inducen una clique en los nodos {nty, nty, nte y}. Observa que cada uno de los hiperarcos anteriores, excepto aquellos de la forma Sx y Tx, contiene exactamente dos nodos. Como ejemplo de los hiperarcos de tipo 1) y 2), el lector puede referirse a la construcción de ejemplo reportada en la Figura 2. (a), y notar, por ejemplo, que Sx = {bsx, nse2 x, nse3 x} y que Tt = {btt, nte4 t, nte3 t}. 3) finalmente, denotamos por DG al conjunto que contiene los hiperarcos en E(HG) del tercer tipo. En la reducción que estamos explotando, DG puede ser un conjunto arbitrario de hiperarcos que satisfacen las cuatro condiciones que se discuten a continuación. Sea PG el conjunto de los siguientes |PG| ≤ |N| + 3 × |E| pares: PG = {(bx, bx) | x ∈ N} ∪ {(nsx, nsx), (nty, nty ), (nse x, nte y) | e = (x, y) ∈ E}. Además, sea I(v) el conjunto {h ∈ E(H) | v ∈ h} de los hiperarcos de H que son tocados por v; y, para un conjunto V ⊆ N(H), sea I(V) = v∈V I(v). Entonces, DG tiene que ser un conjunto tal que: (c1) ∀(α, β) ∈ PG, I(α) ∩ I(β) ∩ DG = ∅; (c2) ∀(α, β) ∈ PG, I(α) ∪ I(β) ⊇ DG; (c3) ∀α ∈ N tal que ∃β ∈ N con (α, β) ∈ PG o (β, α) ∈ PG, se cumple: I(α) ∩ DG = ∅; y, (c4) ∀S ⊆ N tal que |S| ≤ 3 y donde ∃α, β ∈ S con (α, β) ∈ PG, se cumple que: I(S) ⊇ DG. De manera intuitiva, el conjunto DG es tal que cada una de sus hiperaristas es tocada exactamente por uno de los dos nodos en cada par de PG, cf. (c1) y (c2). Además, los hiperarcos en DG solo tocan vértices incluidos en al menos un par de PG - cf. (c3); y, cualquier triple de nodos no es capaz de tocar todos los elementos de DG si ninguno de los pares que se pueden construir a partir de él pertenece a PG - cf. (c4). El lector puede preguntarse ahora si existe un conjunto DG que satisfaga (c1), (c2), (c3) y (c4). En el siguiente lema, respondemos positivamente a esta pregunta y referimos al lector a su demostración para un ejemplo de construcción. Lema 1. Un conjunto DG, con |DG| = 2 × |PG| + 2, que cumple las condiciones (c1), (c2), (c3) y (c4) se puede construir en tiempo O(|PG|2). Ingredientes clave. Ahora estamos en la posición de presentar una visión general de los ingredientes clave de la prueba. Sea G un grafo de elementos arbitrario para HG, y sea TD = T, χ una descomposición de árbol de ancho 3 de G (nota que, debido a las cliques, por ejemplo, en los nodos {bsx, bx, bx, bdx}, cualquier grafo de elementos para HG tiene un ancho de árbol de al menos 3). Hay tres observaciones básicas que sirven para demostrar la corrección de la reducción. Bloques de TD: Primero, observamos que TD debe contener algunos tipos especiales de vértices. Específicamente, para cada nodo x ∈ N, TD contiene un vértice bs(x) tal que χ(bs(x)) ⊇ {bsx, bx, bx, bdx}, y un vértice bt(x) tal que χ(bt(x)) ⊇ {btx, bx, bx, bdx}. Y, para cada arista e = (x, y) ∈ E, TD contiene un vértice ns(x,e) tal que χ(ns(x,e)) ⊇ {nse x, nsx, nsx}, y un vértice nt(y,e) tal que χ(nt(y,e)) ⊇ {nte y, nty, nty}. Intuitivamente, se requiere que estos vértices cubran los cliques de HG asociados con los hiperarcos de tipo 1) y 2). Cada uno de estos vértices desempeña un papel específico en la reducción. De hecho, cada arista dirigida e = (x, y) ∈ E está codificada en TD mediante los vértices: ns(x,e), que representan precisamente que e comienza en x; y nt(y,e), que representan precisamente que e termina en y. Además, cada nodo x ∈ N está codificado en TD mediante los vértices: bs(x), que representa el punto de inicio de las aristas que se originan en x; y, bt(x), que representa el punto de terminación de las aristas que terminan en x. Como ejemplo, la Figura 2. (b) muestra el esqueleto de una descomposición de árbol TD. El lector puede notar en él los bloques definidos anteriormente y cómo están relacionados con el hipercubo HG en la Figura 2. (a) - otros bloques en él (de la forma w(x,y)) se definen a continuación. La conexión entre bloques y la unicidad de las conexiones: La segunda observación crucial es que en el camino que conecta un vértice de la forma bs(x) (resp., bt(y)) con un vértice de la forma ns(x,e) (resp., nt(y,e)) hay un vértice especial de la forma w(x,y) tal que: χ(w(x,y)) ⊇ {nse x , nte y }, para alguna arista e = (x, y) ∈ E. Garantizar la existencia de un vértice así es precisamente el papel que desempeñan los hiperarcos en DG. Los argumentos para la prueba son los siguientes. Primero, observamos que I(χ(bs(x))) ∩ I(χ(ns(x,e))) ⊇ DG ∪ {Sx} e I(χ(bt(y))) ∩ I(χ(nt(y,e))) ⊇ DG ∪ {Ty}. Luego, mostramos una propiedad que establece que para un par de vértices consecutivos p y q en el camino que conecta bs(x) y ns(x,e) (resp., bt(y) y nt(y,e)), I(χ(p) ∩ χ(q)) ⊇ I(χ(bs(x))) ∩ I(χ(ns(x,e))) (resp., I(χ(p) ∩ χ(q)) ⊇ I(χ(bt(x))) ∩ I(χ(nt(y,e)))). Por lo tanto, tenemos: I(χ(p) ∩ χ(q)) ⊇ DG ∪{Sx} (o bien, I(χ(p)∩χ(q)) ⊇ DG ∪{Ty}). Basándose en esta observación, y al explotar las propiedades de los hiperarcos en DG, no es difícil demostrar que cualquier par de vértices consecutivos p y q deben compartir dos nodos de HG formando un par en PG, y ambos deben tocar Sx (resp., Ty). Cuando el ancho de árbol de G es 3, podemos concluir que un vértice, digamos w(x,y), en este camino es tal que χ(w(x,y)) ⊇ {nse x , nte y }, para alguna arista e = (x, y) ∈ E - para ello, note que nse x ∈ Sx, nte t ∈ Ty, e I(χ(w(x,y))) ⊇ DG. En particular, w(x,y) es el único tipo de vértice que satisface estas condiciones, es decir, en el camino no hay otro vértice de la forma w(x,z), para z = y (o bien, w(z,y), para z = x). Para ayudar a la intuición, observamos que tener un vértice de la forma w(x,y) en TD corresponde a la selección de un borde desde el nodo x hasta el nodo y en el camino hamiltoniano. De hecho, dada la singularidad de estos vértices seleccionados para garantizar la conectividad, se puede establecer una correspondencia uno a uno entre la existencia de un camino hamiltoniano para G y los vértices de la forma w(x,y). Como ejemplo, en la Figura 2. (b), los vértices de la forma w(s,x), w(x,y) y w(y,t) están en TD, y GT D muestra el camino hamiltoniano correspondiente. Bloques no utilizados: Finalmente, el tercer ingrediente de la prueba es la observación de que si un vértice de la forma w(x, y), para una arista e = (x, y) ∈ E no está en TD (es decir, si la arista (x, y) no pertenece al camino hamiltoniano), entonces el bloque correspondiente ns(x, e) (resp., nt(y, e)) puede ser agregado arbitrariamente en el subárbol enraizado en el bloque ns(x, e) (resp., nt(y, e)), donde e es la arista de la forma e = (x, z) (resp., e = (z, y)) tal que w(x, z) (resp., w(z, y)) está en TD. Por ejemplo, la Figura 2. (a) muestra w(x,t), que no se utiliza en TD, y la Figura 2. (b) muestra cómo los bloques ns(x,e3) y nt(t,e3) pueden ser dispuestos en TD para garantizar la condición de conectividad. CASOS TRACTABLES MEDIANTE DESCOMPOSICIONES DE HIPERÁRBOLES Dado que construir grafos de elementos estructurados es intratable, es relevante evaluar si otras restricciones estructurales pueden ser utilizadas para identificar clases de instancias de MaxWSP tratables. Con este fin, nos enfocamos en la noción de descomposición de hiperárboles [7], que es una generalización natural de la aciclicidad de hipergrafos y que ha sido utilizada de manera rentable en otros ámbitos, por ejemplo, en la satisfacción de restricciones y la evaluación de consultas de bases de datos, para identificar islas de tratabilidad para problemas NP-duros. Un hypertree para un hipercubo H es un triple T, χ, λ, donde T = (N, E) es un árbol raíz, y χ y λ son funciones de etiquetado que asocian a cada vértice p ∈ N con dos conjuntos χ(p) ⊆ N(H) y λ(p) ⊆ E(H). Si T = (N, E) es un subárbol de T, definimos χ(T) = v∈N χ(v). Denotamos el conjunto de vértices N de T como vertices(T). Además, para cualquier p ∈ N, Tp denota el subárbol de T con raíz en p. Definición 1. Una descomposición de hipertree de un hypergraph H es un hypertree HD = T, χ, λ para H que satisface todas las siguientes condiciones: 1. para cada arista h ∈ E(H), existe p ∈ vértices(T) tal que h ⊆ χ(p) (decimos que p cubre h); Figura 3: Problema MaxWSP de ejemplo: (a) Hypergraph H1; (b) Hypergraph ¯H1; (c) Una descomposición de hipertree de ancho 2 de ¯H1. 2. para cada nodo Y ∈ N(H), el conjunto {p ∈ vértices(T) | Y ∈ χ(p)} induce un subárbol (conectado) de T; 3. para cada p ∈ vértices(T), χ(p) ⊆ N(λ(p)); 4. para cada p ∈ vértices(T), N(λ(p)) ∩ χ(Tp) ⊆ χ(p). El ancho de una descomposición de hipertree T, χ, λ es maxp∈vertices(T )|λ(p)|. El ancho de HYPERTREE hw(H) de H es el ancho mínimo sobre todas sus descomposiciones hypertree. Un hipergrafo H es acíclico si hw(H) = 1. Ejemplo 3. El hipergrafo H I0,B0 reportado en la Figura 1. (a) es un ejemplo de hipergrafo acíclico. En cambio, tanto los hipergráficos H1 y ¯H1 mostrados en la Figura 3. (a) y la Figura 3. (b), respectivamente, no son acíclicos ya que su anchura de hipertiempo es 2. Se reporta una descomposición de hipertree de ancho 2 para ¯H1 en la Figura 3.(c). En particular, observe que H1 se ha obtenido agregando los dos hiperarcos h4 y h5 a H I0,B0 para modelar, por ejemplo, que dos nuevas ofertas, B4 y B5, respectivamente, han sido propuestas al subastador. En lo siguiente, en lugar de trabajar en el hipercampo H asociado con un problema de MaxWSP, trataremos con su dual ¯H, es decir, con el hipercampo tal que sus nodos están en correspondencia uno a uno con los hiperarcos de H, y donde para cada nodo x ∈ N(H), {h | x ∈ h ∧ h ∈ E(H)} está en E( ¯H). Como ejemplo, el lector puede querer revisar nuevamente el hipercubo H1 en la Figura 3 (a) y notar que el hipercubo en la Figura 3 (b) es de hecho su dual. La razón de esta elección es que imponer restricciones en el hipercubo original garantiza la tratabilidad solo en escenarios muy simples. Teorema 3. En la clase de hipergrafos acíclicos, MaxWSP está (1) en P si cada nodo ocurre en un máximo de dos hiperarcos; y, (2) NP-duro, incluso si cada nodo está contenido en un máximo de tres hiperarcos. 3.1 Descomposición de hiperárboles en el hipergrafo dual y problemas de empaquetamiento tratables Para una constante fija k, sea C(hw, k) la clase de todos los hipergrafos cuyos hipergrafos duales tienen un ancho de hiperárbol limitado por k. El problema de empaquetamiento de conjuntos con peso máximo se puede resolver en tiempo polinómico en la clase C(hw, k) mediante el algoritmo ComputeSetPackingk, mostrado en la Figura 4. El algoritmo recibe como entrada un hipercubo H, una función de ponderación w, y una descomposición de hipertree de ancho k HD = T=(N, E), χ, λ de ¯H. Para cada vértice v ∈ N, sea Hv el hipergrafo cuyo conjunto de nodos N(Hv) ⊆ N(H) coincide con λ(v), y cuyo conjunto de aristas E(Hv) ⊆ E(H) coincide con χ(v). En un paso de inicialización, el algoritmo equipa a cada vértice v con todos los empaquetamientos posibles para Hv, los cuales se almacenan en el conjunto Hv. Se debe tener en cuenta que el tamaño de Hv está limitado por (|E(H)| + 1)k, ya que cada nodo en λ(v) está sin cubrir en un empaquetamiento o está cubierto precisamente por una de las hiperaristas en χ(v) ⊆ E(H). Entonces, ComputeSetPackingk está diseñado para filtrar estos empaquetamientos conservando solo aquellos que se ajusten a algún empaquetamiento para Hc, para cada hijo c de v en T, como se formaliza a continuación. Dejen que hv y hc sean dos empaquetados para Hv y Hc, respectivamente. Decimos que hv se ajusta a hc, indicado por hv ≈ hc si: para cada h ∈ hc ∩ E(Hv), h está en hv; y, para cada h ∈ (E(Hc) − hc), h no está en hv. Ejemplo 4. Considera nuevamente la descomposición de hipertree de ¯H1 reportada en la Figura 3.(c). Luego, el conjunto de todos los empaquetados posibles (que se construyen en el paso de inicialización de ComputeSetPackingk), para cada uno de sus vértices, se reFigure 5: Ejemplo de aplicación del Algoritmo ComputeSetPackingk. 157 Entrada: H, w, y una descomposición de hipertree de ancho k HD = T = (N, E), χ, λ de ¯H; Salida: Una solución para MaxWSP(H, w); var Hv: conjunto de empaquetados para Hv, para cada v ∈ N; h∗: empaquetado para H; v hv: número racional, para cada empaquetado parcial hv para Hv; hhv,c: empaquetado parcial para Hc, para cada empaquetado parcial hv para Hv, y para cada (v, c) ∈ E; -------------------------------------------Procedimiento BottomUp; begin Done := el conjunto de todas las hojas de T; mientras ∃v ∈ T tal que (i) v ∈ Done, y (ii) {c | c es hijo de v} ⊆ Done hacer para cada c tal que (v, c) ∈ E hacer Hv := Hv - {hv | ∃hc ∈ Hc tal que hv ≈ hc}; para cada hv ∈ Hv hacer v hv := w(hv); para cada c tal que (v, c) ∈ E hacer ¯hc := arg maxhc∈Hc|hv≈ hc c hc - w(hc ∩ hv); hhv,c := ¯hc; (* establecer mejor empaquetado *) v hv := v hv + c ¯hc - w(¯hc ∩ hv); end for end for Done := Done ∪ {v}; end mientras end; -------------------------------------------begin (* PRINCIPAL *) para cada vértice v en T hacer Hv := {hv empaquetado para Hv}; BottomUp; sea r la raíz de T; ¯hr := arg maxhr∈Hr r hr; h∗ := ¯hr; (* incluir empaquetado *) T opDown(r, hr); return h∗; end. Procedimiento TopDown(v: vértice de N, ¯hv ∈ Hv); comenzar para cada c ∈ N tal que (v, c) ∈ E hacer ¯hc := h¯hv,c; h∗ := h∗ ∪ ¯hc; (* incluir empaquetado *) TopDown(c, ¯hc); fin para fin; Figura 4: Algoritmo ComputeSetPackingk. representado en la Figura 5.(a). Por ejemplo, la raíz v1 es tal que Hv1 = { {}, {h1}, {h3}, {h5} }. Además, una flecha de un empaque hc a hv indica que hv cumple con hc. Por ejemplo, el lector puede comprobar que el empaquetado {h3} ∈ Hv1 se ajusta al empaquetado {h2, h3} ∈ Hv3, pero no se ajusta a {h1} ∈ Hv3. ¡ComputeSetPackingk construye una solución recorriendo T en dos fases. En la primera fase, los vértices de T se procesan desde las hojas hasta la raíz r, mediante el procedimiento BottomUp. Para cada nodo v que se está procesando, el conjunto Hv se actualiza preliminarmente eliminando todos los empaquetados hv que no cumplen con ningún empaquetado para algunos de los hijos de v. Después de realizar este filtrado, se actualiza el peso hv. De manera intuitiva, v hv almacena el peso del mejor empaquetado parcial para H calculado utilizando solo los hiperarcos que ocurren en χ(Tv). De hecho, si v es una hoja, entonces v hv = w(hv). De lo contrario, para cada hijo c de v en T, v hv se actualiza con el máximo de c hc - w(hc ∩ hv) sobre todos los empaquetados hc que se ajustan a hv (resolviendo empates de forma arbitraria). El empaque ¯hc para el cual se logra este máximo se almacena en la variable hhv,c. En la segunda fase, el árbol T se procesa comenzando desde la raíz. En primer lugar, se selecciona el empaque h∗ que maximiza el peso equipado con los empaques en Hr. Luego, el procedimiento TopDown se utiliza para extender h∗ a todos los otros empaquetamientos parciales para los vértices de T. En particular, en cada vértice v, h∗ se extiende con el empaquetamiento hhv,c, para cada hijo c de v. Ejemplo 5. Supongamos que, en nuestro ejemplo en curso, w(h1) = w(h2) = w(h3) = w(h4) = 1. Luego, una ejecución de ComputeSetPackingk se representa gráficamente en la Figura 5. (b), donde una flecha de un empaquetado hc a un empaquetado hv se utiliza para denotar que hc = hhv,c. Específicamente, las elecciones realizadas durante el cálculo son tales que se calcula el empaquetamiento {h2, h3}. En particular, durante la fase de abajo hacia arriba, tenemos que: (1) se procesa v4 y establecemos v4 {h2} = v4 {h4} = 1 y v4 {} = 0; (2) se procesa v3 y establecemos v3 {h1} = v3 {h3} = 1 y v3 {} = 0; (3) se procesa v2 y establecemos v2 {h1} = v2 {h2} = v2 {h3} = v2 {h4} = 1, v2 {h2,h3} = 2 y v3 {} = 0; (4) se procesa v1 y establecemos v1 {h1} = 1, v1 {h5} = v1 {h3} = 2 y v1 {} = 0. Por ejemplo, observe que v1 {h5} = 2 ya que {h5} se ajusta al empaquetado {h4} de Hv2 de tal manera que v2 {h4} = 1. Entonces, al comienzo de la fase de arriba hacia abajo, ComputeSetPackingk selecciona {h3} como un empaquetado para Hv1 y propaga esta elección en el árbol. De manera equivalente, el algoritmo pudo haber elegido {h5}. Como ejemplo adicional, se informa en la Figura 5.(c) la forma en que se obtiene la solución {h1} mediante el algoritmo cuando w(h1) = 5 y w(h2) = w(h3) = w(h4) = 1. Observa que, en esta ocasión, en la fase de arriba hacia abajo, ComputeSetPackingk comienza a seleccionar {h1} como el mejor empaquetado para Hv1. ¡Teorema 4. Sea H un hipergrafo y w una función de ponderación para él. Sea HD = T, χ, λ una descomposición de hipertree completa de ancho k de ¯H. Entonces, ComputeSetPackingk en la entrada H, w y HD produce correctamente una solución para MaxWSP(H, w) en tiempo O(|T| × (|E(H)| + 1)2k. Prueba. [Bosquejo] Observamos que h∗ (calculado por ComputeSetPackingk) es un empaquetamiento para H. De hecho, consideremos un par de hiperarcos h1 y h2 en h∗, y supongamos, para efectos de contradicción, que h1 ∩ h2 = ∅. Sea v1 (resp., v2) un vértice arbitrario de T, para el cual ComputeSetPackingk incluyó h1 (resp., h2) en h∗ en el cálculo de abajo hacia arriba. Por construcción, tenemos h1 ∈ χ(v1) y h2 ∈ χ(v2). Sea I un elemento en h1 ∩ h2. En el hipergrafo dual H, I es un hiperborde en E(¯H) que cubre tanto los nodos h1 como h2. Por lo tanto, por la condición (1) en la Definición 1, existe un vértice v ∈ vértices(T) tal que {h1, h2} ⊆ χ(v). Se debe tener en cuenta que, debido a la condición de conectividad en la Definición 1, también podemos asumir, sin pérdida de generalidad, que v está en el camino que conecta v1 y v2 en T. Sea hv ∈ Hv el elemento añadido por ComputeSetPackingk en h∗ durante la fase de abajo hacia arriba. Dado que los elementos en Hv son empaquetamientos para Hv, se cumple que o bien h1 ∈ hv o h2 ∈ hv. Supongamos, sin pérdida de generalidad, que h1 ∈ hv, y notemos que cada vértice w en T en el camino que conecta v con v1 es tal que h1 ∈ χ(w), debido a la condición de conectividad. Por lo tanto, debido a la definición de conformidad, el empaque hw seleccionado por ComputeSetPackingk para ser agregado en el vértice w en h∗ debe ser tal que h1 ∈ hw. Esto se cumple en particular para w = v1. Contradicción con la definición de v1. Por lo tanto, h∗ es un empaquetamiento para H. Queda entonces por demostrar que tiene el peso máximo sobre todos los empaquetamientos para H. Con este fin, podemos utilizar la inducción estructural en T para demostrar que, en la fase de abajo hacia arriba, la variable v hv se actualiza para contener el peso del empaquetamiento en las aristas en χ(Tv), que contiene hv y que tiene el peso máximo sobre todos los empaquetamientos para las aristas en χ(Tv). Entonces, el resultado sigue, ya que en la fase de arriba hacia abajo, el empaquetado hr que da el peso máximo sobre χ(Tr) = E(H) se incluye primero en h∗, y luego se extiende en cada nodo c con el empaquetado hhv,c de forma conforme con hv y de manera que se alcance el valor máximo de v hv. En cuanto a la complejidad, observe que el paso de inicialización requiere la construcción del conjunto Hv, para cada vértice v, y cada conjunto tiene un tamaño de (|E(H)| + 1)k como máximo. Luego, la función BottomUp verifica la conformidad entre las estrategias en Hv con las estrategias en Hc, para cada par (v, c) ∈ E, y actualiza el peso v hv. Estas tareas pueden llevarse a cabo en tiempo O((|E(H)| + 1)2k) y deben repetirse para cada arista en T, es decir, O(|T|) veces. Finalmente, la función TopDown puede implementarse en tiempo lineal en el tamaño de T, ya que solo requiere actualizar h∗ accediendo a la variable hhv,c. El resultado anterior muestra que si se proporciona una descomposición de hipertree de ancho k, el problema MaxWSP se puede resolver de manera eficiente. Además, a diferencia del caso de los grafos de elementos estructurados, es bien sabido que decidir la existencia de una descomposición de hipertree acotada por k y calcular una (si existe alguna) son problemas que pueden resolverse eficientemente en tiempo polinómico [7]. Por lo tanto, el Teorema 4 confirma que la clase C(hw, k) constituye en realidad una clase manejable para el problema de determinación del ganador. Como muestra el siguiente teorema, para subclases grandes (que dependen solo de cómo se especifica la función de peso), MaxWSP(H, w) es altamente paralelizable. Llamemos a una función de ponderación suave si es computable en espacio logarítmico y si todos los pesos son polinomiales (y por lo tanto solo requieren O(log n) bits para su representación). Recuerde que LOGCFL es una clase de complejidad paralela contenida en NC2, cf. [9]. La versión funcional de LOGCFL es LLOGCFL, la cual se obtiene equipando un transductor de espacio logarítmico con un oráculo en LOGCFL. Teorema 5. Sea H un hipergrafo en C(hw, k), y sea w una función de ponderación suave para él. Entonces, MaxWSP(H, w) está en LLOGCFL. 4. Dadas las descomposiciones de hipertree frente a los grafos de elementos estructurados, y considerando que se ha demostrado que la clase C(hw, k) es una isla de tratabilidad para el problema de determinación del ganador, y dado que se ha demostrado que la clase C(ig, k) no es reconocible eficientemente, uno podría inclinarse a pensar que existen instancias con ancho de hipertree ilimitado, pero que admiten un grafo de elementos de ancho de árbol acotado (por lo que la intratabilidad de los grafos de elementos estructurados residiría en su generalidad). Sorprendentemente, establecemos que este no es el caso. La clave de la prueba es primero demostrar que los grafos de elementos estructurados están en correspondencia uno a uno con un tipo especial de descomposiciones de hiperárboles del hipergrafo dual, al que llamaremos estricto. Entonces, el resultado seguirá al demostrar que las descomposiciones estrictas de hipertree de ancho k son menos potentes que las descomposiciones de hipertree de ancho k. 4.1 Descomposiciones estrictas de hipertree Deje que H sea un hipergrafo, y V ⊆ N(H) sea un conjunto de nodos y X, Y ∈ N(H). X es [V]-adyacente a Y si existe un borde h ∈ E(H) tal que {X, Y} ⊆ (h - V). Un camino [V] π de X a Y es una secuencia X = X0, . . . , X = Y de variables tal que: Xi es [V]-adyacente a Xi+1, para cada i ∈ [0... -1]. Un conjunto W ⊆ N(H) de nodos está [V]-conectado si ∀X, Y ∈ W hay un [V]-camino de X a Y. Un componente [V ] es un conjunto maximal no vacío de nodos W ⊆ (N(H) − V ) que está [V ]-conectado. Para cualquier componente [V] C, sea E(C) = {h ∈ E(H) | h ∩ C = ∅}. Definición 2. Una descomposición de hipertree HD = T, χ, λ de H es estricta si se cumplen las siguientes condiciones: 1. para cada par de vértices r y s en los vértices de T tal que s es un hijo de r, y para cada componente [χ(r)]-Cr. La intersección de Cr con χ(Ts) es vacía, Cr es un componente de [χ(r) ∩ N(λ(r) ∩ λ(s))]; 2. para cada arista h ∈ E(H), hay un vértice p tal que h ∈ λ(p) y h ⊆ χ(p) (decimos que p cubre fuertemente a h); 3. para cada arista h ∈ E(H), el conjunto {p ∈ vértices(T) | h ∈ λ(p)} induce un subárbol (conectado) de T. La anchura estricta de hipertree shw(H) de H es la anchura mínima sobre todas sus descomposiciones estrictas de hipertree. La relación básica entre las descomposiciones de hipertree agradables y los grafos de elementos estructurados se muestra en el siguiente teorema. Teorema 6. Sea H un hipergrafo tal que para cada nodo v ∈ N(H), {v} está en E(H). Entonces, una k-anchura descomposición en árbol de un grafo de elementos para H existe si y solo si ¯H tiene una (k + 1)-anchura descomposición estricta en hiperárbol. Se debe tener en cuenta que, en lo que respecta al problema de empaquetamiento de conjuntos ponderados máximo, dado un hipercubo H, siempre podemos asumir que para cada nodo v ∈ N(H), {v} está en E(H). De hecho, si esta hiperarista no está en el hipercubo, entonces se puede agregar sin pérdida de generalidad, estableciendo w({v}) = 0. Por lo tanto, dejando que C(shw, k) denote la clase de todos los hipergrafos cuyos hipergrafos duales (asociados con un máximo de 2 términos +1) solo juegan el papel técnico de ocuparse de la diferente definición de ancho para las descomposiciones de árboles y las descomposiciones de hiperárboles. 159 problemas de empaquetamiento de conjuntos ponderados) tienen un ancho de hiperárbol estricto limitado por k, tenemos que C(shw, k + 1) = C(ig, k). Por definición, las descomposiciones de hipertree estrictas son descomposiciones de hipertree especiales. De hecho, podemos demostrar que las condiciones adicionales en la Definición 2 inducen una restricción real en el poder de descomposición. Teorema 7. C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1). 

C(ig, k) = C(shw, k + 1) ⊂ C(hw, k + 1). Una vista desde la teoría de juegos. Arrojamos más luz sobre las descomposiciones estrictas de hypertrees al discutir una interesante caracterización basada en el juego estricto de Robber y Marshals, definido adaptando el juego de Robber y Marshals definido en [6], que caracteriza el ancho de hypertree. El juego se juega en un hipercubo H por un ladrón contra k marshals que actúan en coordinación. Los alguaciles se mueven en los hiperarcos de H, mientras que el ladrón se mueve en los nodos de H. El ladrón ve hacia dónde los alguaciles tienen la intención de moverse, y reacciona moviéndose a otro nodo que esté conectado con su posición actual y a través de un camino en G(H) que no utilice ningún nodo contenido en un hiperarco que esté ocupado por los alguaciles antes y después de su movimiento; decimos que estos hiperarcos están bloqueados. Ten en cuenta que en el juego básico definido en [6], al ladrón no se le permite moverse en vértices ocupados por los marshals antes y después de su movimiento, incluso si no pertenecen a hiperarcos bloqueados. Es importante que los marshals jueguen de manera monótona, es decir, no pueden ocupar un borde que haya sido ocupado previamente en el juego y que actualmente no lo esté. Los alguaciles ganan el juego si capturan al ladrón, ocupando un borde que cubra un nodo donde se encuentre el ladrón. De lo contrario, el ladrón gana. Teorema 8. Sea H un hipergrafo tal que para cada nodo v ∈ N(H), {v} está en E(H). Entonces, ¯H tiene una descomposición estricta de hipertree de k-anchura si y solo si k marshals pueden ganar el Juego estricto de Robber y Marshals en ¯H, sin importar los movimientos de los ladrones. 5. CONCLUSIONES Hemos resuelto la pregunta abierta de determinar la complejidad de calcular un grafo de elementos estructurado asociado con un escenario de subasta combinatoria. El resultado es una mala noticia, ya que resultó que es NP-completo verificar si una subasta combinatoria tiene un grafo de elementos estructurado, incluso para un ancho de árbol de 3. Motivados por este resultado, investigamos el uso de la descomposición de hiperárboles (en el hipergrafo dual asociado con el escenario) y demostramos que el problema es tratable en la clase de aquellas instancias cuyos hipergrafos duales tienen un ancho de hiperárbol acotado. Para algunos casos especiales y relevantes, también se discute un algoritmo altamente paralelizable. Curiosamente, también se descubrió que la clase de grafos de elementos estructurados está adecuadamente contenida en la clase de instancias con ancho de hiperárbol acotado (por lo tanto, la razón de su intratabilidad no es su generalidad). En particular, este último resultado se establece mostrando una relación precisa entre los grafos de elementos estructurados y formas restringidas de descomposiciones de hiperárboles (en el hipergrafo dual), llamadas descomposiciones de consultas (ver, por ejemplo, [7]). A la luz de esta observación, notamos que demostrar algunos resultados de aproximabilidad para grafos de elementos estructurados requiere una comprensión profunda de la aproximabilidad de las descomposiciones de consultas, la cual actualmente no se encuentra en la literatura. Como una vía adicional de investigación, sería relevante mejorar el algoritmo ComputeSetPackingk, por ejemplo, mediante el uso de estructuras de datos especializadas, con el fin de evitar la dependencia cuadrática de (|E(H)| + 1)k. Finalmente, otra pregunta interesante es evaluar si las técnicas de descomposición estructural discutidas en el artículo pueden ser utilizadas para abordar eficientemente generalizaciones del problema de determinación del ganador. Por ejemplo, podría ser relevante en varios escenarios de aplicación diseñar algoritmos que puedan encontrar una estrategia de venta cuando hay varias copias del mismo artículo disponibles para la venta, y además cuando el subastador está satisfecho cuando se venden al menos un número dado de copias. El trabajo de G. Gottlob fue apoyado por el EC3 - Centro de Competencia en Comercio Electrónico (Viena) y por un Premio de Mérito de Investigación Wolfson de la Royal Society. En particular, este premio permitió a Gottlob invitar a G. Greco para una visita de investigación a Oxford. Además, G. Greco cuenta con el apoyo de ICAR-CNR y del M.I.U.R. en el marco del proyecto TOCAI.IT. 6. REFERENCIAS [1] I. Adler, G. Gottlob y M. Grohe. Anchura de hipertree y invariantes de hipergrafo relacionados. En Proc. de EUROCOMB05, páginas 5-10, 2005. [2] C. Boutilier. Resolviendo problemas de subasta combinatoria expresados de manera concisa. En Proc. de AAAI02, páginas 359-366, 2002. [3] V. Conitzer, J. Derryberry y T. Sandholm. Subastas combinatorias con grafos de elementos estructurados. En Proc. de AAAI04, páginas 212-218, 2004. [4] E. M. Eschen y J. P. Sinrad. Un algoritmo O(n2) para el reconocimiento de grafos de arco circular. En Proc. de SODA93, páginas 128-137, 1993. [5] Y. Fujishima, K. Leyton-Brown y Y. Shoham. Domando la complejidad computacional de las subastas combinatorias: Óptimo y aproximado. En Proc. de IJCAI99, páginas 548-553, 1999. [6] G. Gottlob, N. Leone y F. Scarcello. Ladrones, marshals y guardias: caracterizaciones lógicas y teóricas de la amplitud de hiperárboles. Revista de Ciencias de la Computación y de Sistemas, 66(4):775-808, 2003. [7] G. Gottlob, N. Leone y S. Scarcello. Descomposiciones de hiperárboles y consultas tratables. Revista de Ciencias de la Computación y de Sistemas, 63(3):579-627, 2002. [8] H. H. Hoos y C. Boutilier. Resolviendo subastas combinatorias utilizando búsqueda local estocástica. En Proc. de AAAI00, páginas 22-29, 2000. [9] D. Johnson. Un catálogo de clases de complejidad. En P. Cramton, Y. Shoham y R. Steinberg, editores, Manual de Ciencias de la Computación Teórica, Volumen A: Algoritmos y Complejidad, páginas 67-161. 1990. [10] N. Korte y R. H. Mohring. Un algoritmo incremental de tiempo lineal para reconocer grafos de intervalo. Revista SIAM sobre Computación, 18(1):68-81, 1989. [11] D. Lehmann, R. M¨uller y T. Sandholm. El Problema de Determinación del Ganador. En P. Cramton, Y. Shoham y R. Steinberg, editores, Subastas Combinatorias. MIT Press, 2006. [12] D. Lehmann, L. I. OCallaghan, y Y. Shoham. Revelación de la verdad en aproximadamente 160 subastas combinatorias eficientes. J. ACM, 49(5):577-602, 2002. [13] R. McAfee y J. McMillan. Analizando la subasta de las ondas aéreas. Revista de Perspectivas Económicas, 10(1):159-175, 1996. [14] J. McMillan. Vendiendo derechos de espectro. Revista de Perspectivas Económicas, 8(3):145-62, 1994. [15] N. Nisan. Subasta y asignación en subastas combinatorias. En Proc. de EC00, páginas 1-12, 2000. [16] N. Robertson y P. Seymour. Menores de grafos ii. Aspectos algorítmicos del ancho de árbol. Revista de Algoritmos, 7:309-322, 1986. [17] M. H. Rothkopf, A. Pekec y R. M. Harstad. Subastas combinatorias computacionalmente manejables. Ciencia de la Gestión, 44:1131-1147, 1998. [18] T. Sandholm. Una implementación del protocolo de red de contratos basada en cálculos de costos marginales. En Proc. de AAAI93, páginas 256-262, 1993. [19] T. Sandholm. Algoritmo para la determinación óptima del ganador en subastas combinatorias. Inteligencia Artificial, 135(1-2):1-54, 2002. [20] T. Sandholm. Algoritmos de determinación de ganadores. En P. Cramton, Y. Shoham y R. Steinberg, editores, Subastas Combinatorias. MIT Press, 2006. [21] T. Sandholm y S. Suri. Bob: Mejora en la determinación de ganadores en subastas combinatorias y generalizaciones. Inteligencia Artificial, 7:33-58, 2003. [22] M. Tennenholtz. Algunas subastas combinatorias manejables. En Proc. de AAAI00, páginas 98-103, 2000. [23] E. Zurel y N. Nisan. Un algoritmo de asignación aproximada eficiente para subastas combinatorias. En Proc. de EC01, páginas 125-136, 2001. 161