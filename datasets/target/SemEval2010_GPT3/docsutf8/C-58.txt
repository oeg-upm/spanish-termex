Un sistema escalable de gestión de información distribuida ∗ praveen yalagandula ypraveen@cs.utexas.edu mike dahlin dahlin@cs.utexas.edu Departamento de ciencias informáticas La Universidad de Texas en Austin Austin, TX 78712 Resumen. Presentamos un sistema de gestión de información distribuido escalable (SDIMS SDIMS) que agrega información sobre los sistemas en red a gran escala y que puede servir como un bloque de construcción básico para una amplia gama de aplicaciones distribuidas a gran escala al proporcionar vistas detalladas de la información cercana y las vistas sumarias de la información global. Para servir como un bloque de construcción básico, un SDIMS debe tener cuatro propiedades: escalabilidad a muchos nodos y atributos, flexibilidad para acomodar una amplia gama de aplicaciones, aislamiento administrativo para la seguridad y la disponibilidad, y la robustez a las fallas de nodos y redes. Diseñamos, implementamos y evaluamos un SDIMS que (1) aprovecha las tablas de hash distribuidas (DHT) para crear árboles de agregación escalables, (2) proporciona flexibilidad a través de una API simple que permite que las aplicaciones controlen la propagación de lecturas y escrituras, (3) proporciona aislamiento administrativoA través de extensiones simples a los algoritmos DHT actuales, y (4) logra robustez a las reconfiguraciones de nodos y redes a través de la reegregación perezosa, la reegregación a pedido y la replicación espacial sintonizable. A través de extensas simulaciones y experimentos de micro benchmark, observamos que nuestro sistema es un orden de magnitud más escalable que los enfoques existentes, logra propiedades de aislamiento a costa de una latencia de lectura modestamente aumentada en comparación con los DHT planos y maneja con gracia fallas. Categorías y descriptores de sujetos C.2.4 [Redes de comunicación por computadora]: sistemas operativos de red de sistemas distribuidos, bases de datos distribuidas de gestión de términos generales, diseño, experimentación 1. Introducción El objetivo de esta investigación es diseñar y construir un Sistema de Gestión de Información Distribuida escalable (SDIMS) que agregue información sobre sistemas en red a gran escala y que puede servir como un bloque de construcción básico para una amplia gama de aplicaciones distribuidas a gran escala. Monitoreo, consulta y reaccionamiento a los cambios en el estado de un sistema distribuido son componentes centrales de aplicaciones como la gestión del sistema [15, 31, 37, 42], la colocación de servicios [14, 43], el intercambio de datos y el almacenamiento en caché [18, 29, 32, 35, 46], monitoreo y control del sensor [20, 21], formación de árboles de multidifusión [8, 9, 33, 36, 38], y enrutamiento de nombres y solicitudes [10, 11]. Por lo tanto, especulamos que un SDIMS en un sistema en red proporcionaría una red troncal de sistemas operativos distribuidos y facilitaría el desarrollo y la implementación de nuevos servicios distribuidos. Para un sistema de información a gran escala, la agregación jerárquica es una abstracción fundamental para la escalabilidad. En lugar de exponer toda la información a todos los nodos, la agregación jerárquica permite que un nodo acceda a vistas detalladas de la información cercana y las vistas sumarias de la información global. En un SDIMS basado en la agregación jerárquica, los diferentes nodos pueden recibir diferentes respuestas a la consulta encontrar un nodo [cercano] con al menos 1 GB de memoria libre o encontrar una copia [cercana] del archivo foo. Un sistema jerárquico que agrega información a través de árboles de reducción [21, 38] permite que los nodos accedan a la información que les importa mientras mantiene la escalabilidad del sistema. Para ser utilizado como un bloque de construcción básico, un SDIMS debe tener cuatro propiedades. Primero, el sistema debe ser escalable: debe acomodar grandes cantidades de nodos participantes, y debe permitir que las aplicaciones instalen y monitoreen grandes números de atributos de datos. Los sistemas empresariales y de escala global hoy en día pueden tener decenas de miles o millones de nodos y estos números aumentarán con el tiempo. Del mismo modo, esperamos admitir muchas aplicaciones, y cada aplicación puede rastrear varios atributos (por ejemplo, la carga y la memoria libre de las máquinas de sistemas) o millones de atributos (por ejemplo, qué archivos se almacenan en qué máquinas). En segundo lugar, el sistema debe tener flexibilidad para acomodar una amplia gama de aplicaciones y atributos. Por ejemplo, los atributos de lectura como NUMCPU rara vez cambian en el valor, mientras que los atributos dominados por la escritura como los numrocesos cambian con bastante frecuencia. Un enfoque ajustado para los atributos dominados por lectura consumirá un alto ancho de banda cuando se aplique a los atributos dominados por la escritura. Por el contrario, un enfoque ajustado para los atributos dominados por la escritura sufrirá una latencia o imprecisión innecesaria de consultas para atributos dominados por lectura. Por lo tanto, un SDIMS debe proporcionar mecanismos para manejar diferentes tipos de atributos y dejar la decisión política de ajustar la replicación a las aplicaciones. Tercero, un SDIMS debe proporcionar aislamiento administrativo. En un sistema grande, es natural organizar nodos en una jerarquía organizacional o administrativa. Un SDIMS debe apoyar la Administración 10: Sistemas de información distribuidos 379 TIVE ASOLACIÓN EN EL QUE LAS CONSULTAS SOBRE UNA INFORMACIÓN DE DOMINOS ADMINISTRATIVOS PUEDEN SE SECUESTRA Dentro del dominio para que el sistema pueda operar durante las desconexiones de otros dominios, para que un observador externo no pueda monitorear o afectar Intra-Intra-Intraconsultas de dominio y para admitir consultas con escoltas de dominio de manera eficiente. Cuarto, el sistema debe ser robusto para las fallas y las desconexiones de los nodos. Un SDIMS debe adaptarse a las reconfiguraciones de manera oportuna y también debe proporcionar mecanismos para que las aplicaciones puedan intercambiar el costo de adaptación con el nivel de consistencia en los resultados agregados cuando ocurren reconfiguraciones. Nos inspiramos en dos trabajos anteriores: Astrolabe [38] y tablas de hash distribuidas (DHT). Astrolabe [38] es un sistema de gestión de información robusto. Astrolabe proporciona la abstracción de un solo árbol de agregación lógica que refleja una jerarquía administrativa de sistemas. Proporciona una interfaz general para instalar nuevas funciones de agregación y proporciona una consistencia eventual en sus datos. Astrolabe es robusto debido al uso de un protocolo de chismes no estructurado para difundir información y su estrategia de replicar todos los valores de atributos agregados para un subárbol en todos los nodos en el subárbol. Esta combinación permite que cualquier patrón de comunicación produzca una consistencia eventual y permite que cualquier nodo responda cualquier consulta utilizando información local. Sin embargo, este alto grado de replicación puede limitar la capacidad de los sistemas para acomodar grandes cantidades de atributos. Además, aunque el enfoque funciona bien para los atributos dominados por las lecturas, una actualización en un nodo eventualmente puede afectar el estado en todos los nodos, lo que puede limitar la flexibilidad de los sistemas para admitir atributos dominados por la escritura. Investigaciones recientes en redes estructuradas entre pares dieron como resultado una estructura de datos distribuidas (DHTS) [18, 28, 29, 32, 35, 46] -A estructura de datos que escala con el número de nodos y que distribuye la carga de lectura-escriturapara diferentes consultas entre los nodos participantes. Es interesante observar que, aunque estos sistemas exportan una abstracción global de la tabla de hash, muchos de ellos hacen uso internamente de lo que se puede ver como un sistema escalable de árboles de agregación para, por ejemplo, enrutar una solicitud de una clave dada para el DHT correctonodo. De hecho, en lugar de exportar una interfaz DHT general, Plaxton et al.s [28] la aplicación original utiliza la agregación jerárquica para permitir que los nodos ubiquen copias cercanas de objetos. Parece atractivo desarrollar una abstracción SDIMS que exponga esta funcionalidad interna de manera general para que los árboles escalables para la agregación puedan ser un bloque básico de construcción de sistemas junto con los DHT. A primera vista, puede parecer obvio que simplemente fusionar los DHT con abstracción de agregación de astrolabes dará como resultado un SDIMS. Sin embargo, cumplir con los requisitos de SDIMS obliga a un diseño a abordar cuatro preguntas: (1) ¿Cómo asignar diferentes atributos a diferentes árboles de agregación en una malla DHT?(2) ¿Cómo proporcionar flexibilidad en la agregación para acomodar diferentes requisitos de aplicación?(3) ¿Cómo adaptar una malla DHT global y plana para lograr una propiedad de aislamiento administrativo?y (4) ¿Cómo proporcionar robustez sin chismes no estructurados y replicación total? Las contribuciones clave de este documento que forman la base de nuestro diseño SDIMS son las siguientes.1. Definimos una nueva abstracción de agregación que especifica tanto el tipo de atributo como el nombre del atributo y que asocia una función de agregación con un tipo de atributo particular. Esta abstracción allana el camino para utilizar los árboles internos de los sistemas DHT para la agregación y para lograr la escalabilidad con nodos y atributos.2. Proporcionamos una API flexible que permite que las aplicaciones controlen la propagación de lecturas y escrituras y, por lo tanto, intercambiaran costos de actualización, latencia de lectura, replicación y estancamiento.3. Aumentamos un algoritmo DHT existente para garantizar las propiedades de convergencia de ruta y localidad de ruta para lograr el aislamiento administrativo.4. Proporcionamos robustez a las reconfiguraciones de nodos y redes al (a) proporcionar una replicación temporal a través de la reagregación perezosa que garantiza una consistencia eventual y (b) asegurando que nuestra API flexible permita que las aplicaciones exigentes obtengan robustez adicional utilizando la replicación espacial sintonizable de agregados de datos o al realizar rápidamente-Demand reagregación para aumentar la reagregación perezosa subyacente o haciendo ambas cosas. Hemos construido un prototipo de SDIMS. A través de simulaciones y experimentos micro-bencionos en varias máquinas de departamento y nodos de planetlab [27], observamos que el prototipo logra la escalabilidad con respecto a ambos nodos y atributos mediante el uso de su API flexible, inflige un orden de estrés de nodo máximo menor de magnitud más bajoque los esquemas de chismes no estructurados, logra propiedades de aislamiento a un costo de latencia de lectura modesta aumentada en comparación con los DHT planos y maneja con gracia fallas de nodos. Este estudio inicial analiza aspectos clave de un esfuerzo continuo de construcción de sistemas, pero no aborda todos los problemas en la construcción de un SDIMS. Por ejemplo, creemos que nuestras estrategias para proporcionar robustez se combinarán bien con técnicas como supernodos [22] y otros esfuerzos continuos para mejorar los DHT [30] para mejorar aún más la robustez. Además, aunque la agregación de división entre muchos árboles mejora la escalabilidad para consultas simples, este enfoque puede hacer que las consultas complejas y de múltiples atributos sean más caras en comparación con un solo árbol. Se necesita trabajo adicional para comprender la importancia de esta limitación para las cargas de trabajo reales y, si es necesario, para adaptar las técnicas de planificación de consultas de las abstracciones DHT [16, 19] a las abstracciones de árbol de agregación escalables. En la Sección 2, explicamos la abstracción de agregación jerárquica que SDIMS proporciona a las aplicaciones. En las Secciones 3 y 4, describimos el diseño de nuestro sistema para lograr la flexibilidad, la escalabilidad y los requisitos de aislamiento administrativo de un SDIMS. En la Sección 5, detallamos la implementación de nuestro sistema prototipo. La Sección 6 aborda el tema de la adaptación a las reconfiguraciones topológicas. En la Sección 7, presentamos la evaluación de nuestro sistema a través de simulaciones y microbistres a gran escala en redes reales. La Sección 8 detalla el trabajo relacionado, y la Sección 9 resume nuestra contribución.2. La agregación de abstracción de la agregación es una abstracción natural para un sistema de información distribuida a gran escala porque la agregación proporciona escalabilidad al permitir que un nodo vea información detallada sobre el estado cercano y resúmenes de grano progresivamente más grueso sobre subconjuntos progresivamente más grandes de datos de sistemas [38]. Nuestra abstracción de agregación se define a través de un árbol que abarca todos los nodos del sistema. Cada nodo físico en el sistema es una hoja y cada subárbol representa un grupo lógico de nodos. Tenga en cuenta que los grupos lógicos pueden corresponder a dominios administrativos (por ejemplo, departamento o universidad) o grupos de nodos dentro de un dominio (por ejemplo, 10 estaciones de trabajo en una LAN en el departamento de CS). Un nodo interno no hojas, que llamamos nodo virtual, está simulado por uno o más nodos físicos en las hojas del subárbol para el cual el nodo virtual es la raíz. Describimos cómo formar tales árboles en una sección posterior. Cada nodo físico tiene datos locales almacenados como un conjunto de tuplas (AttributeType, AttributeName, Value) tales como (Configuración, NumCPUS, 16), (MCAST Membresía, Session Foo, Yes) o (Archivo almacenado, Foo, Myipaddress). El sistema asocia una función de agregación FTYPE con cada tipo de atributo, y para cada subárbol de nivel I en el sistema, el sistema define un valor agregado VI, tipo, nombre para cada par (AT380 TributeteType, AttributeName) par de la siguiente manera. Para un nodo de hoja (físico) T0 en el nivel 0, V0, tipo, el nombre es el valor almacenado localmente para el tipo de atributo y el nombre o nulo si no existe una tupla coincidente. Luego, el valor agregado para un subárbol de nivel I es la función de agregación para el tipo, FTYPE calculado en los valores agregados de cada uno de los niños: VI, tipo, nombre = ftype (V0 i-1, tipo, nombre, nombre, V1i - 1, tipo, nombre, ..., vk - 1 i - 1, tipo, nombre). Aunque SDIMS permite funciones de agregación arbitraria, a menudo es deseable que estas funciones satisfagan la propiedad de cálculo jerárquico [21]: F (V1, ..., Vn) = F (F (V1, ..., VS1), F (VS1+1, ..., vs2), ..., f (vsk+1, ..., vn)), donde vi es el valor de un atributo en el nodo i. Por ejemplo, la operación promedio, definida como AVG (V1, ..., VN) = 1/N.∑N i = 0 VI, no satisface la propiedad. En cambio, si un atributo almacena valores como tuplas (suma, recuento), el atributo satisface la propiedad de cálculo jerárquico y al mismo tiempo permite que las aplicaciones calculen el promedio de los valores de suma y recuento agregados. Finalmente, tenga en cuenta que para un sistema a gran escala, es difícil o imposible insistir en que el valor de agregación devuelto por una sonda corresponde a la función calculada sobre los valores actuales en las hojas en el instante de la sonda. Por lo tanto, nuestro sistema proporciona solo garantías de consistencia débiles, específicamente consistencia eventual como se define en [38].3. Flexibilidad Una innovación importante de nuestro trabajo es permitir el cálculo y propagación agregados flexibles. La definición de la abstracción de agregación permite una flexibilidad considerable en cómo, cuándo y dónde se calculan y propagan los valores agregados. Mientras que los sistemas anteriores [15, 29, 38, 32, 35, 46] implementan una sola estrategia estática, argumentamos que un SDIMS debe proporcionar un cálculo y propagación flexibles para apoyar eficientemente una amplia variedad de aplicaciones con diversos requisitos. Para proporcionar esta flexibilidad, desarrollamos una interfaz simple que descompone la abstracción de la agregación en tres piezas de funcionalidad: instalar, actualizar y sondear. Esta definición de la abstracción de la agregación permite que nuestro sistema proporcione un espectro continuo de estrategias que van desde el cálculo y propagación agregados perezosos en lecturas hasta computación y propagación inmediatas agresivas en escrituras. En la Figura 1, ilustramos tanto estrategias extremas como una estrategia intermedia. Bajo la estrategia de cálculo y propagación locales de actualización perezosa, una actualización (o escritura) solo afecta el estado local. Luego, una sonda (o leída) que lee un valor agregado de nivel I se envía al árbol al antepasado de niveles de nivel I y luego baja el árbol a las hojas. Luego, el sistema calcula el valor agregado deseado en cada capa en el árbol hasta que el ancestro de nivel I que contenga el valor deseado. Finalmente, el antepasado de nivel I envía el resultado por el árbol al nodo emisor. En el otro caso extremo de la actualización agresiva, todo el cálculo y la propagación inmediatos en las escrituras [38], cuando se produce una actualización, los cambios se agregan en el árbol, y cada nuevo valor agregado se inunda a todos los descendientes de un nodos. En este caso, cada nodo de nivel I no solo mantiene los valores agregados para el subárbol de nivel I, sino que también recibe y almacena localmente copias de todos sus antepasados de nivel de nivel J (j> i). Además, una hoja satisface una sonda para un agregado de nivel I utilizando datos puramente locales. En una estrategia de actualización intermedia, la raíz de cada subárbol mantiene el valor agregado actual de los subárboles, y cuando ocurre una actualización, el nodo Leaf actualiza su estado local y pasa la actualización a su padre, y luego cada subárbol de encierra sucesivo actualiza su agregado.valor y pasa el nuevo valor a su padre. Esta estrategia satisface una sonda de hoja para un valor agregado de nivel I enviando la sonda al ancestro de nivel I de la hoja y luego enviando el valor agregado a la hoja. Finalmente, observe que existen otras estrategias. En general, una estrategia Update-Upk-Downj se agrega al parámetro Descripción Opcional Atrtype Atributo Tipo de agregación AgrfUnC Función ARRIBA A qué distancia se envía cada actualización (predeterminada: ALL) X Down hasta dónde se envía cada agregado (predeterminado: Ninguno) X)Restricción del dominio del dominio (predeterminado: Ninguno) x Exptime Expiry Time Tabla 1: Argumentos para la operación de instalación El nivel de KTH y propaga los valores agregados de un nodo en el nivel L (S.T. L ≤ K) hacia abajo para los niveles J. Un SDIMS debe proporcionar una amplia gama de estrategias flexibles de cálculo y propagación a las aplicaciones para que sea una abstracción general. Una aplicación debe poder elegir un mecanismo particular basado en su relación de lectura-escritura que reduzca el consumo de ancho de banda mientras alcanza la capacidad de respuesta y precisión requeridas. Tenga en cuenta que la relación de lectura-escritura de los atributos que las aplicaciones instalan varían ampliamente. Por ejemplo, un atributo dominado por lectura como NUMCPUS rara vez cambia en el valor, mientras que un atributo escrito por numerosos se cambia con bastante frecuencia. Una estrategia de agregación como Update-All Funciona bien para atributos dominados por las lecturas, pero sufre un alto consumo de ancho de banda cuando se aplica a los atributos dominados por la escritura. Por el contrario, un enfoque como UpdateLocal funciona bien para atributos dominados por la escritura, pero sufre latencia o imprecisión de consulta innecesaria para atributos dominados por lecturas. SDIMS también permite el cálculo y la propagación no uniformes en el árbol de agregación con diferentes parámetros hacia arriba y hacia abajo en diferentes subárboles para que las aplicaciones puedan adaptarse con la heterogeneidad espacial y temporal de las operaciones de lectura y escritura. Con respecto a la heterogeneidad espacial, los patrones de acceso pueden diferir para diferentes partes del árbol, lo que requiere diferentes estrategias de propagación para diferentes partes del árbol. De manera similar, con respecto a la heterogeneidad temporal, los patrones de acceso pueden cambiar con el tiempo que requieren diferentes estrategias con el tiempo.3.1 API de agregación Proporcionamos la flexibilidad descrita anteriormente dividiendo la API de agregación en tres funciones: install () instala una función de agregación que define una operación en un tipo de atributo y especifica la estrategia de actualización que la función usará, actualizando () inserta o modificaUn valor local de nodos para un atributo, y la sonda () obtiene un valor agregado para un subárbol especificado. La interfaz de instalación permite que las aplicaciones especifiquen los parámetros K y J de la estrategia Update-UPK-Downj junto con la función de agregación. La interfaz de actualización invoca la agregación de un atributo en el árbol de acuerdo con la estrategia de agregación de funciones de agregación correspondientes. La interfaz de la sonda no solo permite que las aplicaciones obtengan el valor agregado para un árbol especificado, sino que también permite que un nodo de sondeo obtenga continuamente los valores durante un tiempo especificado, lo que permite que una aplicación se adapte a la heterogeneidad espacial y temporal. El resto de la sección describe estas tres interfaces en detalle.3.1.1 Instalar la operación de instalación Instala una función de agregación en el sistema. Los argumentos para esta operación se enumeran en la Tabla 1. El argumento AttrType denota el tipo de atributos en los que se invoca esta función de agregación. Las funciones instaladas son un estado suave que debe renovarse periódicamente o serán recolectados de basura en Exptime. Los argumentos de arriba y hacia abajo especifican la estrategia de actualización del cálculo 381 agregado sobre la actualización en la sonda para el valor agregado global en la sonda para el nivel 1 valor agregado actualización de actualización-up actualización-todo Figura 1: parámetro de la API flexible descripción de atributo attrtype opcional atributo attrename atributoModo de nombre Continuo o One-Shot (Predeterminado: One-Shot) X Nivel de nivel en el que se busca el agregado (predeterminado: en todos los nivelLejos para ir y rehacer (predeterminado: Ninguno) x Exptime Exputy Time Tabla 2: Argumentos para la operación de la sonda y la actualización de la estrategia de propagación-upk-downj. El argumento del dominio, si está presente, indica que la función de agregación debe instalarse en todos los nodos en el dominio especificado;De lo contrario, la función se instala en todos los nodos del sistema.3.1.2 Actualizar la operación de actualización toma tres argumentos AttrType, AttrName y Value y crea un nuevo (attrType, attrname, valor) o actualiza el valor de una tupla antigua con attrype y attryame coincidente en un nodo hoja. La interfaz de actualización se combina con la estrategia de cálculo y propagación agregado instalado para proporcionar flexibilidad. En particular, como se describió anteriormente y se describe en detalle en la Sección 5, después de que una hoja aplica una actualización localmente, la actualización puede activar la computación de los valores agregados en el árbol y también puede desencadenar la propagación de los valores agregados modificados en el árbol. Observe que nuestra abstracción asocia una función de agregación con solo un attrtype, pero permite que las actualizaciones especifiquen un nombre ATTTR junto con el AttrType. Esta técnica ayuda a lograr la escalabilidad con respecto a los nodos y atributos como se describe en la Sección 4. 3.1.3 La sonda La operación de la sonda devuelve el valor de un atributo a una aplicación. El argumento completo establecido para la operación de la sonda se muestra en la Tabla 2. Junto con el AttrName y los argumentos AttrType, un argumento de nivel especifica el nivel en el que se requieren las respuestas para un atributo. En nuestra implementación, elegimos devolver los resultados en todos los niveles k <l para una sonda de nivel L porque (i) es económico ya que los nodos atravesados para la sonda nivel-L también contienen agregados de nivel K para k <l y como esperamos losEl costo de la red de transmitir la información adicional para que sea pequeño para los pequeños agregados que enfocamos y (ii) es útil ya que las aplicaciones pueden obtener de manera eficiente varios agregados con una sola sonda (por ejemplo, para consultas escopadas por dominio como se explica en la Sección 4.2). Las sondas con el modo establecido en continuo y con EXPTime finito permiten que las aplicaciones manejen la heterogeneidad espacial y temporal. Cuando el nodo A emite una sonda continua en el nivel L para un atributo, independientemente de los parámetros arriba y abajo, las actualizaciones para el atributo en cualquier subárbol de antepasados de nivel L AS se agregan hasta el nivel L y el valor agregado se propaga hacia abajo.a lo largo del camino desde el antepasado hasta A. Tenga en cuenta que el modo continuo permite a SDIMS admitir un mecanismo distribuido de sensor-activador en el que un sensor monitorea un agregado de nivel I con una sonda de modo continuo y activa un actuador al recibir nuevos valores para la sonda. Los argumentos hacia arriba y hacia abajo permiten que las aplicaciones realicen una agregación rápida en el demand durante las reconfiguraciones, donde se realiza una re-agregación forzada para los niveles correspondientes, incluso si el valor agregado está disponible, como discutimos en la Sección 6. Cuando está presente, los argumentos hacia arriba y hacia abajo se interpretan como se describe en la operación de instalación.3.1.4 Adaptación dinámica a nivel API, los argumentos hacia arriba y hacia abajo en la API de instalación pueden considerarse como sugerencias, ya que sugieren una estrategia de cálculo pero no afectan la semántica de una función de agregación. Una implementación de SDIMS puede ajustar dinámicamente sus estrategias hacia arriba/hacia abajo para un atributo basado en su frecuencia de lectura/escritura medida. Pero un nodo intermedio virtual necesita conocer los valores de propagación actuales hacia arriba y hacia abajo para decidir si el agregado local es fresco para responder una sonda. Esta es la razón clave por la cual arriba y abajo deben definirse estáticamente en el momento de la instalación y no se puede especificar en la operación de actualización. En la adaptación dinámica, implementamos un mecanismo basado en arrendamiento donde un nodo emite un arrendamiento a un padre o un hijo que denota que seguirá propagando las actualizaciones a ese padre o hijo. Actualmente estamos evaluando diferentes políticas para decidir cuándo emitir un contrato de arrendamiento y cuándo revocar un contrato de arrendamiento.4. Escalabilidad Nuestro diseño logra escalabilidad con respecto a ambos nodos y atributos a través de dos ideas clave. Primero, define cuidadosamente la abstracción de la agregación para combinar bien con su sistema DHT escalable subyacente. En segundo lugar, refina la abstracción DHT básica para formar un DHT autónomo (ADHT) para lograr las propiedades de aislamiento administrativo que son cruciales para la escala para grandes sistemas del mundo real. En esta sección, describimos estas dos ideas en detalle.4.1 Aprovechando los DHT en contraste con los sistemas anteriores [4, 15, 38, 39, 45], la abstracción de agregación de SDIMSS especifica tanto un tipo de atributo como un nombre de atributo y asocia una función de agregación con un tipo en lugar de especificar y asociar una función con un nombre. La instalación de una sola función que puede operar en muchos atributos con nombre diferentes que coinciden con un tipo de escalabilidad para tipos de atributos dispersos con espacios de nombre grandes y fallecidos. Por ejemplo, para construir un servicio de ubicación de archivo, nuestra interfaz nos permite instalar una función única que calcule un valor agregado para cualquier archivo con nombre. Un valor agregado de subárboles para (fileloc, nombre) sería la ID de un nodo en el subárbol que almacena el archivo nombrado. Por el contrario, Astrolabe se enfrenta a atributos dispersos al hacer que las funciones de agregación calculen conjuntos o listas y sugiere que la escalabilidad puede mejorarse representando tales conjuntos con filtros Bloom [6]. El apoyo de nombres escasos dentro de un tipo proporciona al menos dos ventajas. Primero, cuando se actualiza el valor asociado con un nombre, solo el estado Asoci382 001 010100 000 011 101 111 111 110 011 111 001 101 000 100 110010 L0 L1 L2 L3 Figura 2: El árbol DHT correspondiente a la clave 111 (dhttree111) y la correspondienteÁrbol de agregación.Ated con ese nombre debe actualizarse y propagarse a otros nodos. En segundo lugar, la división de valores asociados con diferentes nombres en diferentes valores de agregación permite a nuestro sistema aprovechar las tablas de hash distribuidas (DHT) para asignar diferentes nombres a diferentes árboles y, por lo tanto, difundir las funciones que los nodos de raíz lógicos se cargan y dicen en múltiples nodos físicos. Dada esta abstracción, los atributos de mapeo escalablemente a los DHT son sencillos. Los sistemas DHT asignan una identificación larga y aleatoria a cada nodo y definen un algoritmo para enrutar una solicitud de Key K a un nodo rootk de tal manera que la unión de rutas de todos los nodos forma un árbol dhttreek enraizado en el nodo rootk. Ahora, como se ilustra en la Figura 2, al agregar un atributo a lo largo del árbol de agregación correspondiente a Dhttreek para k = hash (tipo de atributo, nombre del atributo), se agregarán diferentes atributos a lo largo de diferentes árboles. En comparación con un esquema donde todos los atributos se agregan a lo largo de un solo árbol, la agregación a lo largo de múltiples árboles incurre en el estrés del nodo máximo más bajo: mientras que en un solo enfoque de árbol de agregación, la raíz y los nodos intermedios pasan más mensajes que los nodos de la hoja, en un DHT-La de árboles basados en el árbol, cada nodo actúa como un punto de agregación intermedio para algunos atributos y como un nodo de hoja para otros atributos. Por lo tanto, este enfoque distribuye la responsabilidad de la agregación en todos los nodos.4.2 Los árboles de agregación administrativa de aislamiento deben proporcionar un aislamiento administrativo asegurando que para cada dominio, el nodo virtual en la raíz del subárbol de agregación más pequeño que contiene todos los nodos de ese dominio es alojado por un nodo en ese dominio. El aislamiento administrativo es importante por tres razones: (i) por seguridad, de modo que las actualizaciones y las sondas que fluyen en un dominio no sean accesibles fuera del dominio, (ii) para la disponibilidad, de modo que las consultas para los valores en un dominio no se ven afectadas por fallas de fallas deNodos en otros dominios, y (iii) para la eficiencia, de modo que las consultas escopadas por dominio pueden ser simples y eficientes. Para proporcionar aislamiento administrativo a los árboles de agregación, un DHT debe satisfacer dos propiedades: 1. Localidad de ruta: las rutas de búsqueda siempre deben estar contenidas en el dominio más pequeño posible.2. Convergencia de ruta: las rutas de búsqueda para una clave de diferentes nodos en un dominio deberían converger en un nodo en ese dominio. La localidad de la ruta de soporte de DHTS existente [18] o puede soportarlo fácilmente utilizando la cercanía del dominio como la métrica de distancia [7, 17], pero no garantizan la convergencia de la ruta ya que esos sistemas intentan optimizar la ruta de búsqueda a la raíz para reducir la respuestalatencia. Por ejemplo, Pastry [32] utiliza un enrutamiento de prefijo en el que cada tabla de enrutamiento de cada nodo contiene una fila por dígito hexadecimal en el espacio de nodoid donde la fila de ésimo contiene una lista de nodos cuyos nodoides difieren de los nodos actuales en el dígito ésimo con una entrada con una entrada con unapara cada posible valor de dígitos. Dada una topología de enrutamiento, para enrutar un paquete a una clave de destino arbitraria, un nodo en pastel reenvía un paquete al nodo con un prefijo de nodoid que coincide con la clave en al menos un dígito más que el nodo actual. Si no se conoce dicho nodo, el nodo actual utiliza una estructura de datos adicional, el conjunto de hoja que contiene 110xx 010xx 011xx 100xx 101xx UNIV DEP1 DEP2 CLAVE = 111XX 011XX 100XX 101XX 110XX 010XX L1 L0 L2 Figura 3: Ejemplo muestra cómo la propiedad de la isolación está violada Violación decon pastel original. También mostramos el árbol de agregación correspondiente.110XX 010XX 011XX 100XX 101XX UNIV DEP1 DEP2 CLAVE = 111XX X 011XX 100XX 101XX 110XX 010XX L0 L1 L2 Figura 4: DHT autónomo que satisface la propiedad de aislamiento. También se muestra el árbol de agregación correspondiente. L Vecinos más altos e inferiores inmediatos en el espacio de nodoid, y reenvía el paquete a un nodo con un prefijo idéntico, pero eso está numéricamente más cerca de la clave de destino en el espacio de nodoid. Este proceso continúa hasta que aparece el nodo de destino en el conjunto de hoja, después de lo cual el mensaje se enruta directamente. Pastrys El número esperado de pasos de enrutamiento es logn, donde n es el número de nodos, pero como lo ilustra la Figura 3, este algoritmo no garantiza la convergencia de la ruta: si dos nodos en un dominio tienen nodos que coinciden con una clave en el mismo número de bits,Ambos pueden enrutar a un tercer nodo fuera del dominio al enrutar esa clave. Las modificaciones simples a los protocolos de construcción de la tabla de ruta de Pastrys y los protocolos de ruta clave producen un DHT autónomo (ADHT) que satisface las propiedades de la localidad de ruta y la convergencia de ruta. Como ilustra la Figura 4, cada vez que dos nodos en un dominio comparten el mismo prefijo con respecto a una clave y ningún otro nodo en el dominio tiene un prefijo más largo, nuestro algoritmo presenta un nodo virtual en el límite del dominio correspondiente a ese prefijo más elsiguiente dígito de la llave;Tal nodo virtual está simulado por el nodo existente cuya ID es numéricamente más cercana al ID de nodos virtuales. Nuestra tabla de enrutamiento ADHTS difiere de Pastrys de dos maneras. Primero, cada nodo mantiene un conjunto de hoja separado para cada dominio del cual es una parte. En segundo lugar, los nodos usan dos métricas de proximidad al poblar las tablas de enrutamiento: la proximidad del dominio jerárquico es la métrica principal y la distancia de red es secundaria. Luego, para enrutar un paquete a una raíz global para una clave, el algoritmo de enrutamiento de ADHT utiliza la tabla de enrutamiento y las entradas de ajuste de hoja a la ruta a cada raíz de dominios de encerrado sucesivo (el nodo virtual o real en el dominio que coincide con la clave en el número máximode dígitos). Detalles adicionales sobre el algoritmo ADHT están disponibles en un informe técnico extendido [44]. Mantener un conjunto de hoja diferente para cada nivel de jerarquía administrativa aumenta el número de vecinos que cada nodo rastrea a (2b) ∗ Lgb n+C.L de (2b) ∗ Lgb n+C en pasteles no modificados, donde B es el número de bits en A aDigit, N es el número de nodos, C es el tamaño del conjunto de hoja y L es el número de niveles de dominio. El enrutamiento requiere pasos O (LGBN + L) en comparación con los pasos O (LGBN) en la masa;Además, cada salto de enrutamiento puede ser más largo que en la masa porque la tabla de enrutamiento de algoritmos modificados prefiere los nodos de dominio del mismo dominio sobre los nodos cercanos. Cuantificamos experimentalmente los costos de enrutamiento adicionales en la Sección 7. En un sistema grande, la topología de ADHT permite que los dominios IM383 A1 A2 B1 ((B1.B., 1), (B., 1), (., 1)) ((B1.B., 1), (B., 1), (., 1)) L2 L1 L0 ((B1.B., 1), (B., 1), (., 3)) ((A1.A., 1), (A., 2), (., 2)) ((A1.A., 1), (A., 1), (., 1)) ((A2.A., 1), (A., 1),(., 1)) Figura 5: Ejemplo de consultas con escolción de dominio demuestra seguridad para los tipos de atributos confidenciales al instalarlos solo dentro de un dominio especificado. Luego, la agregación ocurre completamente dentro del dominio y un nodo externo al dominio no puede observar ni afectar las actualizaciones y los cálculos de agregación del tipo de atributo. Además, aunque no hemos implementado esta característica en el prototipo, la topología ADHT también admitiría sondas de dominio de dominio que podrían garantizar que nadie fuera de un dominio pueda observar una sonda para los datos almacenados dentro del dominio. La topología ADHT también mejora la disponibilidad al permitir que el caso común de las sondas para los datos dentro de un dominio dependa solo de los nodos de dominios. Esto, por ejemplo, permite que un dominio que se desconecte del resto de Internet continúe respondiendo consultas para los datos locales. Los árboles de agregación que proporcionan aislamiento administrativo también permiten la definición de funciones de agregación de dominio simples y eficientes para respaldar consultas como ¿cuál es la carga promedio en las máquinas en el dominio x? Por ejemplo, considere una función de agregación para contar el número de máquinas en un sistema de ejemplo con tres máquinas ilustradas en la Figura 5. Cada nodo de hoja L actualiza el atributo numachines con un valor VL que contiene un conjunto de tuplas de forma (dominio, recuento) para cada dominio del cual el nodo es parte. En el ejemplo, el nodo A1 con el nombre A1.A.Realiza una actualización con el valor ((A1.A., 1), (A., 1), (., 1)). Una función de agregación en un nodo virtual interno alojado en el nodo n con el conjunto de hijos C calcula el agregado como un conjunto de tuplas: para cada dominio d de que n forma parte, formar una tupla (d, ∑c∈C (count | (D, contar) ∈ Vc)). Este cálculo se ilustra en la Figura 5. Ahora una consulta para numachinas con nivel establecido en max devolverá los valores agregados en cada nodo virtual intermedio en la ruta hacia la raíz como un conjunto de tuplas (nivel de árbol, valor agregado) del que es fácil extraer el recuento de máquinas encada dominio de adjunto. Por ejemplo, A1 recibiría ((2, ((B1.B., 1), (B., 1), (., 3))), (1, ((A1.A., 1), (A., 2), (., 2))), (0, ((A1.A., 1), (A., 1), (., 1)))). Tenga en cuenta que las consultas de soporte de dominio serían menos convenientes y menos eficientes si los árboles de agregación no se ajustaran a la estructura administrativa de los sistemas. Sería menos eficiente porque cada nodo virtual intermedio tendrá que mantener una lista de todos los valores en las hojas en su subárbol junto con sus nombres y serían menos convenientes como aplicaciones que necesitan un agregado para un dominio tendrán que elegir valores deNodos en ese dominio de la lista devuelto por una sonda y realizar el cálculo.5. Implementación del prototipo El diseño interno de nuestro prototipo SDIMS comprende dos capas: la capa Autónoma DHT (ADHT) gestiona la topología de superposición del sistema y la capa de gestión de agregación (AML) mantiene las tuplas de atributos, realiza agregaciones, tiendas y propagenta los valores de agregado. Dada la construcción de ADHT descrita en la Sección 4.2, cada nodo implementa una capa de gestión de agregación (AML) para admitir la API flexible descrita en la Sección 3. En esta sección, describimos el estado interno y la operación de la capa AML de un nodo en el sistema.MIB MIB MIB LOCAL Reducción del antepasado MIB (Nivel 1) Ancestro MIBS MIB de niño 0x ... MIB del niño 0x ... Nivel 2 Nivel 1 Nivel 3 Nivel 0 1xxx ... 10xx ... 100x ... De los padres0x ..Al padre 0x ... −− Funciones de agregación de los padres al padre 10xx ... 1x .. 1x .. 1x .. al padre 11xx ... ID de nodo: (1001xxx) 1001x .. 100x .. 10x .. 1x.. Nodo virtual Figura 6: Ejemplo que ilustra las estructuras de datos y la organización de ellas en un nodo. Nos referimos a un almacén de (tipo de atributo, nombre de atributo, valor) tuples como una base de información de gestión o MIB, siguiendo la terminología de Astrolabe [38] y SNMP [34]. Referimos una tupla (tipo de atributo, nombre de atributo) como una clave de atributo. Como ilustra la Figura 6, cada nodo físico en el sistema actúa como varios nodos virtuales en la AML: un nodo actúa como hoja para todas las teclas de atributo, como un subárbol de nivel 1 para las teclas cuyo hash coincide con la identificación de nodos en bits de prefijo B ((donde B es el número de bits corregidos en cada paso del esquema de enrutamiento de ADHTS), como un subárbol de nivel I Roots para las teclas de atributo cuyo hash coincide con los nodos ID en los bits I ∗ B iniciales, y como los sistemas global para atribuir el atributoLas claves cuyo hash coincide con la identificación de nodos en más bits de prefijo que cualquier otro nodo (en caso de un empate, se ignora el primer bit no coincidente y la comparación continúa [46]). Para apoyar la agregación jerárquica, cada nodo virtual en la raíz de un subárbol de nivel I mantiene varios MIB que almacenan (1) MIB infantiles que contienen valores agregados sin procesar recopilados de los niños, (2) un MIB de reducción que contiene valores agregados localmente en esta información sin procesar,y (3) un antepasado MIB que contiene valores agregados dispersos de los antepasados. Esta estrategia básica de mantener el niño, la reducción y el antepasado MIBS se basa en astrolabio [38], pero nuestra estrategia de propagación estructurada canaliza información que fluye de acuerdo con su clave de atributo y nuestra estrategia de propagación flexible solo envía actualizaciones de niños y los resultados agregados de antepasadosEn cuanto a la función de agregación de teclas de atributo. Tenga en cuenta que en la discusión a continuación, para facilitar la explicación, suponemos que el protocolo de enrutamiento está corrigiendo un solo bit a la vez (b = 1). Nuestro sistema, construido sobre pasteles, maneja la corrección de múltiples bits (b = 4) y es una extensión simple del esquema descrito aquí. Para un nodo virtual determinado Ni en el nivel I, cada MIB de niño contiene el subconjunto de un MIB de reducción de Childs que contiene tuplas que coinciden con la ID del nodo NIS en I bits y cuyo atributo de función de agregación UP es al menos i. Estas copias locales facilitan que un nodo recomputara un valor agregado de nivel I cuando la entrada de un niño cambia. Los nodos mantienen a sus MIB de hijos en almacenamiento estable y usan una versión simplificada del Protocolo de intercambio de registros de Bayou (detección y resolución de conflictos SANS) para la sincronización después de las desconexiones [26]. Virtual Node Ni en el nivel I mantiene un MIB de reducción de tuplas con una tupla para cada clave presente en cualquier MIB infantil que contenga el tipo de atributo, el nombre del atributo y la salida de las funciones agregadas de los tipos de atributos aplicados a las tuplas de los niños. Un nodo virtual Ni en el Nivel I también mantiene un Ancestor MIB para almacenar las tuplas que contienen la clave de atributos y una lista de valores agregados en diferentes niveles dispersos de los antepasados. Tenga en cuenta que la lista 384 para una clave puede contener múltiples valores agregados para un mismo nivel pero agregado en diferentes nodos (ver Figura 4). Por lo tanto, los valores agregados se etiquetan no solo con información de nivel, sino que también están etiquetados con ID del nodo que realizó la agregación. El nivel-0 difiere ligeramente de otros niveles. Cada nodo de hoja de nivel 0 mantiene un MIB local en lugar de mantener MIB infantiles y una MIB de reducción. Este MIB local almacena información sobre el estado de nodos locales insertado por aplicaciones locales a través de llamadas Update (). Imaginamos varios programas de sensores y aplicaciones insertar datos en MIB local. Por ejemplo, un programa puede monitorear la configuración local y realizar actualizaciones con información como la memoria total, la memoria libre, etc., un sistema de archivos distribuido puede realizar la actualización de cada archivo almacenado en el nodo local. Junto con estos MIB, un nodo virtual mantiene otras dos tablas: una tabla de funciones de agregación y una tabla de sondas sobresaliente. Una tabla de funciones de agregación contiene la función de agregación y los argumentos de instalación (ver Tabla 1) asociado con un tipo de atributo o un tipo de atributo y nombre. Cada función agregada se instala en todos los nodos en un subárbol de dominios, por lo que la tabla de funciones agregadas puede considerarse como un caso especial del antepasado MIB con funciones de dominio siempre instaladas en una raíz dentro de un dominio especificado y hasta todos los nodos dentro de los nodos dentro de los nodos dentro de los nodos dentro de los nodos dentro de los nodos dentro dedominio. La tabla de sondas pendiente mantiene información temporal sobre sondas en progreso. Dadas estas estructuras de datos, es simple admitir las tres funciones API descritas en la Sección 3.1. Instale la operación de instalación (consulte la Tabla 1) Instala en un dominio una función de agregación que actúa en un tipo de atributo especificado. Ejecución de una operación de instalación para la función Agrfunc en el tipo de atributo Atrtype se realiza en dos fases: Primero, la solicitud de instalación se transmite el árbol ADHT con la tecla de atributo (AttrType, NULL) hasta que alcanza la raíz de esa tecla dentro del dominio especificado. Luego, la solicitud se inunda por el árbol y se instala en todos los nodos intermedios y de hoja. Actualización Cuando un nodo virtual de nivel I recibe una actualización para un atributo de un niño a continuación: primero recomputa el valor agregado de nivel I para la clave especificada, almacena que valore en su reducción de MIB y luego, sujeto a las funciones y los parámetros de dominio, pasa el valor actualizado al padre apropiado en función de la clave de atributo. Además, el nodo virtual de nivel I (i ≥ 1) envía el agregado de nivel I actualizado a todos sus hijos si el parámetro de baja funciones excede cero. Al recibir un agregado de nivel I de un padre, un nodo virtual de nivel K almacena el valor en su antepasado MIB y, si K ≥ I-down, reenvía este agregado a sus hijos. La sonda una sonda recopila y devuelve el valor agregado para una clave de atributo especificada para un nivel especificado del árbol. Como ilustra la Figura 1, el sistema satisface una sonda para un valor agregado de nivel I utilizando un protocolo de cuatro fases que puede ser cortado en cortocircuito cuando las actualizaciones han propagado previamente resultados o resultados parciales hacia arriba o hacia abajo del árbol. En la fase 1, la fase de la sonda de ruta, el sistema enruta la sonda del árbol de claves de atributo a la raíz del subárbol de nivel I o a un nodo que almacena el valor solicitado en su Ancestro MIB. En el primer caso, el sistema procede a la fase 2 y en el segundo se salta a la fase 4. En la fase 2, la fase de dispersión de la sonda, cada nodo que recibe una solicitud de sonda lo envía a todos sus hijos a menos que la reducción de los nodos MIB ya tenga un valor que coincida con la clave de atributo de sondas, en cuyo caso el nodo inicia la fase 3 en nombre desu subárbol. En la fase 3, la fase de agregación de la sonda, cuando un nodo recibe valores para la clave especificada de cada uno de sus hijos, ejecuta la función agregada en estos valores y (a) reenvía el resultado a su padre (si su nivel es menor quei) o (b) inicia la fase 4 (si está en el nivel I). Finalmente, en la fase 4, la fase de enrutamiento agregado El valor agregado se enruta al nodo que lo solicitó. Tenga en cuenta que en el caso extremo de una función instalada con up = down = 0, una sonda de nivel I puede tocar todos los nodos en un subárbol de nivel I, mientras que en el caso extremo opuesto de una función instalada con up = down = todos, sonda, sondaes una operación completamente local en una hoja. Para las sondas que incluyen fases 2 (dispersión de la sonda) y 3 (agregación de la sonda), un problema es cómo decidir cuándo un nodo debe dejar de esperar a que sus hijos respondan y envíen su valor agregado actual. Un nodo deja de esperar a sus hijos cuando ocurren una de las tres condiciones: (1) Todos los niños han respondido, (2) la capa de ADHT señala uno o más eventos de reconfiguración que marcan a todos los niños que aún no han respondido como inalcanzables, o (3)Un temporizador Watchdog para la solicitud dispara. El último caso explica los nodos que participan en el protocolo ADHT pero que fallan en el nivel de AML. En un nodo virtual, las sondas continuas se manejan de manera similar como sondas de un solo disparo, excepto que tales sondas se almacenan en la tabla de sondas pendiente durante un período de tiempo de Exptime especificado en la sonda. Por lo tanto, cada actualización para un atributo desencadena la reevaluación de las sondas continuas para ese atributo. Implementamos un mecanismo basado en arrendamiento para la adaptación dinámica. Un nodo virtual de nivel L para un atributo puede emitir el arrendamiento para el agregado de Levell a un padre o un hijo solo si arriba es mayor que L o tiene arrendamientos de todos sus hijos. Un nodo virtual en el nivel L puede emitir el arrendamiento para el agregado de nivel K para K> L a un niño solo si es descendente ≥ k −l o si tiene el arrendamiento para ese agregado de su padre. Ahora, una sonda para el agregado de nivel K se puede responder mediante el nodo virtual Level-L si tiene un arrendamiento válido, independientemente de los valores hacia arriba y hacia abajo. Actualmente estamos diseñando diferentes políticas para decidir cuándo emitir un contrato de arrendamiento y cuándo revocar un contrato de arrendamiento y también las evaluamos con el mecanismo anterior. Nuestro prototipo actual no implementa el control de acceso en las operaciones de instalación, actualización y sonda, pero planeamos implementar restricciones basadas en certificados de astrolabes [38]. Además, nuestro prototipo actual no restringe el consumo de recursos en la ejecución de las funciones de agregación;Pero, las técnicas de la investigación sobre la gestión de recursos en sistemas de servidores y sistemas operativos [2, 3] se pueden aplicar aquí.6. La robustez en los sistemas a gran escala, las reconfiguraciones son comunes. Nuestros dos principios principales para la robustez son garantizar (i) leer la disponibilidad: las sondas completadas en tiempo finito, y (ii) consistencia eventual: las actualizaciones de un nodo en vivo serán visibles para las sondas por nodos conectados en tiempo finito. Durante las reconfiguraciones, una sonda podría devolver un valor obsoleto por dos razones. Primero, las reconfiguraciones conducen a la incorrección en los valores agregados anteriores. En segundo lugar, los nodos necesarios para la agregación para responder a la sonda se vuelven inalcanzables. Nuestro sistema también proporciona dos ganchos que las aplicaciones pueden usar para mejorar la robustez de extremo a extremo en presencia de reconfiguraciones: (1) re-agregación en el demand y (2) replicación controlada por la aplicación. Nuestro sistema maneja las reconfiguraciones en dos niveles: adaptación en la capa ADHT para garantizar la conectividad y la adaptación en la capa de AML para garantizar el acceso a los datos en SDIMS.6.1 Adaptación ADHT Nuestro algoritmo de adaptación de la capa ADHT es el mismo que el algoritmo de adaptación de Pastrys [32]: los conjuntos de hoja se reparan tan pronto como se detecta una reconfiguración y la tabla de enrutamiento se repara perezosamente. Tenga en cuenta que mantener conjuntos de hoja adicionales no degrada la propiedad de tolerancia a fallas de la masa original;De hecho, mejora la resiliencia de los ADHT a las fallas al proporcionar enlaces de enrutamiento adicionales. Debido a la redundancia en los conjuntos de hoja y la tabla de enrutamiento, las actualizaciones se pueden enrutar hacia sus nodos raíz con éxito incluso durante las fallas.385 RECONFIG AVISOS DE RECONFIG DHT parcial dht completo dht termina datos de tiempo de lazada 3 7 81 2 4 5 6 directs Datos de los perrosas inicios de datos de los perroseares inicios de datos perezososLa propiedad de aislamiento satisfecha por nuestro algoritmo ADHT asegura que las reconfiguraciones en un dominio de nivel I no afecten las sondas para el nivel I en un dominio de hermanos.6.2 Adaptación de AML En general, utilizamos dos tipos de estrategias para la adaptación de AML frente a las reconfiguraciones: (1) replicación en el tiempo como una estrategia de referencia fundamental y (2) replicación en el espacio como una optimización adicional del rendimiento que recurre a la replicación entiempo cuando el sistema se queda sin réplicas. Proporcionamos dos mecanismos para la replicación a tiempo. Primero, la reagregación perezosa se propaga ya recibió actualizaciones a niños nuevos o nuevos padres de manera perezosa con el tiempo. En segundo lugar, las aplicaciones pueden reducir la probabilidad de estallidad de la respuesta de la sonda durante tales reparaciones a través de nuestra API flexible con la configuración adecuada del parámetro hacia abajo. Reengregación perezosa: la capa DHT informa la capa de AML sobre las reconfiguraciones en la red utilizando las siguientes tres llamadas de función: NewParent, Fournchild y NewChild. En NewParent (Padre, Prefijo), se reevalúan todas las sondas en la tabla de probos pendientes correspondientes al prefijo. Si el padre no es nulo, entonces las funciones de agregación y los datos ya existentes se transfieren perezosamente en segundo plano. Cualquier nueva actualización, instalaciones y sondas para este prefijo se envían al padre de inmediato. En FallyChild (niño, prefijo), la capa de AML marca al niño como inactivo y cualquier sonda pendiente que esté esperando datos de este niño se vuelvan a evaluar. En Newchild (Child, Prefix), la capa AML crea espacio en sus estructuras de datos para este niño. La Figura 7 muestra la línea de tiempo para la reagregación perezosa predeterminada tras la reconfiguración. Las sondas iniciadas entre los puntos 1 y 2 y que se ven afectadas por las reconfiguraciones son reevaluadas por AML al detectar la reconfiguración. Las sondas que completan o comienzan entre los puntos 2 y 8 pueden devolver respuestas rancias. Reengregación a pedido: el esquema de agregación perezosa predeterminada propaga perezosamente las antiguas actualizaciones en el sistema. Además, utilizando las perillas arriba y abajo en la API de la sonda, las aplicaciones pueden forzar la agregación rápida a pedido de las actualizaciones para evitar la incomodidad frente a las reconfiguraciones. En particular, si una aplicación detecta o sospecha una respuesta como obsoleta, entonces puede volver a emitir la sonda aumentando los parámetros hacia arriba y hacia abajo para forzar la refrescante de los datos en caché. Tenga en cuenta que esta estrategia será útil solo después de que se complete la adaptación DHT (punto 6 en la línea de tiempo en la Figura 7). Replicación en el espacio: la replicación en el espacio es más desafiante en nuestro sistema que en una aplicación de ubicación de archivo DHT porque la replicación en el espacio se puede lograr fácilmente en este último replicando el contenido de los nodos raíz. En nuestro sistema, sin embargo, todos los nodos internos deben replicarse junto con la raíz. En nuestro sistema, las aplicaciones controlan la replicación en el espacio que usa perillas arriba y abajo en la API de instalación;Con valores grandes hacia arriba y hacia abajo, los agregados en los nodos virtuales intermedios se propagan a más nodos en el sistema. Al reducir el número de nodos a los que se debe acceder para responder una sonda, las aplicaciones pueden reducir la probabilidad de que ocurran resultados incorrectos debido a la falla de los nodos que no contribuyen al agregado. Por ejemplo, en una aplicación de ubicación de archivo, el uso de un parámetro positivo no positivo de cero asegura que un agregado global de archivos se replique en nodos distintos de la raíz.0.1 1 10 100 1000 10000 0.0001 0.01 1 100 10000 AVG. NumberOfMessagePerperation Leer a la relación de escritura Actualización: All Up = All, Down = 9 Up = All, Down = 6 Actualización de actualización Local up = 2, Down = 0 Up = =5, hacia abajo = 0 Figura 8: Flexibilidad de nuestro enfoque. Con diferentes valores hacia arriba y hacia abajo en una red de nodos 4096 para diferentes relaciones de lectura. Las sondas para la ubicación del archivo se pueden responder sin acceder a la raíz;Por lo tanto, no se ven afectados por la falla de la raíz. Sin embargo, tenga en cuenta que esta técnica no es apropiada en algunos casos. Un valor agregado en el sistema de ubicación del archivo es válido siempre que el nodo que aloja el archivo esté activo, independientemente del estado de otros nodos en el sistema;Mientras que una aplicación que cuenta el número de máquinas en un sistema puede recibir resultados incorrectos, independientemente de la replicación. Si las reconfiguraciones son solo transitorias (como un nodo temporalmente que no responde debido a una explosión de carga), el agregado replicado se parece estrechamente al estado actual.7. Evaluación Hemos implementado un prototipo de SDIMS en Java utilizando el marco Freepastry [32] y realizamos experimentos de simulación a gran escala y experimentos de micro-benchmark en dos redes reales: 187 máquinas en el departamento y 69 máquinas en el Testbed de PlanetLab [27]. En todos los experimentos, utilizamos valores estáticos hacia arriba y hacia abajo y apagamos la adaptación dinámica. Nuestra evaluación respalda cuatro conclusiones principales. Primero, la API flexible proporciona diferentes estrategias de propagación que minimizan los recursos de comunicación en diferentes relaciones de lectura a escritura. Por ejemplo, en nuestra simulación observamos actualizar el local para ser eficientes para las relaciones de lectura a escritura por debajo de 0.0001, actualizar alrededor de 1 y actualizar todo por encima de 50000. En segundo lugar, nuestro sistema es escalable con respecto a los nodos y los atributos. En particular, encontramos que el estrés del nodo máximo en nuestro sistema es un orden más bajo que el observado con un enfoque de chismes de actualización. Tercero, en contraste con la pastelería no modificada que viola la propiedad de convergencia de ruta en hasta el 14% de los casos, nuestro sistema se ajusta a la propiedad. Cuarto, el sistema es robusto para las reconfiguraciones y se adapta a las fallas con en unos pocos segundos.7.1 Experimentos de simulación Flexibilidad y escalabilidad: una innovación importante de nuestro sistema es su capacidad para proporcionar un cálculo flexible y la propagación de los agregados. En la Figura 8, demostramos la flexibilidad expuesta por la API de agregación explicada en la Sección 3. Simulamos un sistema con 4096 nodos dispuestos en una jerarquía de dominio con factor de ramificación (BF) de 16 e instalamos varios atributos con diferentes parámetros hacia arriba y hacia abajo. Trazamos el número promedio de mensajes por operación incurridos para una amplia gama de relaciones de lectura a escritura de las operaciones para diferentes atributos. Las simulaciones con otros tamaños de redes con diferentes factores de ramificación revelan resultados similares. Este gráfico demuestra claramente el beneficio de apoyar una amplia gama de estrategias de cálculo y propagación. Aunque tiene un pequeño UP 386 1 10 100 1000 10000 100000 1e+06 1e+07 1 10 100 1000 10000 100000 MAXIMUMNDESTRESS Número de atributos instalados Gossip 256 Gossip 4096 Gossip 65536 DHT 256 DHT 4096 DHT 65536 Figura 9: Estrés de nodo máximo para un tensión de gossiping de gossipingEnfoque versus enfoque basado en ADHT para diferentes números de nodos con un número creciente de atributos dispersos.El valor es eficiente para los atributos con bajas relaciones de lectura-escritura (redacción de aplicaciones dominadas), la latencia de la sonda, cuando se producen lecturas, puede ser alta ya que la sonda necesita agregar los datos de todos los nodos que no enviaron su agregado. Por el contrario, las aplicaciones que desean mejorar los gastos o latencias de la sonda pueden aumentar su propagación ascendente a un costo potencial de aumento en los gastos generales de escritura. En comparación con un enfoque de árbol de agregación única existente [38], la escalabilidad en SDIMS proviene de (1) aprovechar los DHT para formar múltiples árboles de agregación que dividen la carga en los nodos y (2) propagación flexible que evita la propagación de todas las actualizaciones a todosnodos. La Figura 9 demuestra la escalabilidad SDIMSS con nodos y atributos. Para este experimento, construimos un simulador para simular tanto astrolabio [38] (un enfoque de chismes, actualizaciones de actualización) y nuestro sistema para un número creciente de atributos escasos. Cada atributo corresponde a la membresía en una sesión de multidifusión con un pequeño número de participantes. Para este experimento, el tamaño de la sesión se establece en 8, el factor de ramificación se establece en 16, el modo de propagación para SDIMS se actualiza y los nodos participantes realizan sondas continuas para el valor agregado global. Trazamos el estrés del nodo máximo (en términos de mensajes) observado en ambos esquemas para redes de diferentes tamaños con un número creciente de sesiones cuando el participante de cada sesión realiza una operación de actualización. Claramente, el esquema basado en DHT es más escalable con respecto a los atributos que un esquema de chismes de actualización. Observe que en un número constante de atributos, a medida que aumenta el número de nodos en el sistema, el estrés de nodo máximo aumenta en el enfoque de chismes, mientras que disminuye en nuestro enfoque a medida que la carga de agregación se extiende a través de más nodos. Las simulaciones con otros tamaños de sesión (4 y 16) producen resultados similares. Jerarquía administrativa y robustez: aunque el protocolo de enrutamiento de ADHT podría conducir a un mayor número de lúpulo para alcanzar la raíz de una clave en comparación con la masa original, el algoritmo se ajusta a la convergencia de ruta y las propiedades de la localidad y, por lo tanto, proporciona propiedades de aislamiento administrativo. En la Figura 10, cuantificamos el aumento de la longitud de la ruta mediante comparaciones con pasteles no modificados para redes de diferentes tamaños con diferentes factores de ramificación del árbol de jerarquía de dominio. Para cuantificar la propiedad de convergencia de ruta, realizamos simulaciones con una gran cantidad de pares de sondas, cada par sondeando para una clave aleatoria que comienza desde dos nodos elegidos al azar. En la Figura 11, trazamos el porcentaje de pares de sondas para pasteles no modificados que no se ajustan a la propiedad de convergencia de ruta. Cuando el factor de ramificación es bajo, el árbol de jerarquía de dominio es más profundo, lo que resulta en una gran diferencia entre 0 1 2 3 4 5 6 7 10 100 1000 10000 100000 Número de nodos de longitud= 4,16,64 Figura 10: Longitud promedio de la ruta a la raíz en pasteles versus ADHT para diferentes factores de ramificación. Tenga en cuenta que todas las líneas correspondientes a la superposición de pastelería.0 2 4 6 8 10 12 14 16 10 100 1000 10000 100000 Porcentaje de Violaciones Número de nodos BF = 4 BF = 16 BF = 64 Figura 11: Porcentaje de pares de sondas cuyos caminos a la raíz no se ajustaban a la propiedad de convergencia de la ruta con Pastry. U pdate-todo u pdate-u p u pdate-local 0 200 400 600 800 LATENCIA (INM) LATENCIA promedio U PDATE-ALL U PDATE-U P U PDATE LOCAL 0 1000 2000 3000 LATENCIA (INM) LATENCIA promedio (a)(b) Figura 12: Latencia de las sondas para el agregado a nivel de raíz global con tres modos diferentes de propagación agregada en (a) máquinas de departamento y (b) máquinas PlanetLab Pastry y ADHT en la longitud promedio de la ruta;Pero es en estos pequeños tamaños de dominio, que la convergencia del camino falla con más frecuencia con la masa original.7.2 Experimentos de Testbed Ejecutamos nuestro prototipo en 180 máquinas de departamento (algunas máquinas ejecutaron múltiples instancias de nodos, por lo que esta configuración tiene un total de 283 nodos SDIMS) y también en 69 máquinas del Bebed de Testlab [27]. Medimos el rendimiento de nuestro sistema con dos micro-benchmarks. En el primer micro-benchmar, instalamos tres funciones de agregación de tipos de actualización local, actualización y actualización, realice una operación de actualización en todos los nodos para las tres funciones de agregación y medimos las latencias incurridas por las sondas para el agregado global del agregado globalde todos los nodos en el sistema. Figura 12 387 0 20 40 60 80 100 120 140 0 5 10 15 20 25 2700 2720 2740 2760 2780 2800 2820 2840 LATENCIA (INM) Tiempo de tiempo (en Sec) Valores Nodo de latencia muerto Figura 13: Micro-Bencillo en la red de departamento que muestra elComportamiento de las sondas de un solo nodo cuando están ocurriendo fallas en otros nodos. Los 283 nodos asignan un valor de 10 al atributo.10 100 1000 10000 100000 0 50 50 100 150 200 250 300 350 400 450 500 500 550 600 650 700 LATENCIA (INMS) Valores de tiempo Observado (en SEC) Valores Nodo de latencia Figura 14: rendimiento de la sonda durante fallas en 69 máquinas de planetlab testbed muestra elLatencias observadas para ambos tallas de prueba. Observe que la latencia en Update-Local es alta en comparación con la política de actualización. Esto se debe a que la latencia en Update-Local se ve afectada por la presencia de incluso una sola máquina lenta o una sola máquina con una conexión de red de alta latencia. En el segundo punto de referencia, examinamos la robustez. Instalamos una función de agregación de la actualización de tipo que realiza una operación de suma en un atributo valorado en entero. Cada nodo actualiza el atributo con el valor 10. Luego monitoreamos las latencias y los resultados devueltos en la operación de la sonda para el agregado global en un nodo elegido, mientras que matamos algunos nodos después de cada pocas sondas. La Figura 13 muestra los resultados en el Bed de la Prueba departamental. Debido a la naturaleza del Testbed (máquinas en un departamento), hay pocos cambios en las latencias incluso frente a las reconfiguraciones. En la Figura 14, presentamos los resultados del experimento en PlanetLab Testbed. El nodo raíz del árbol de agregación termina después de aproximadamente 275 segundos. Hay un aumento 5x en las latencias después de la muerte del nodo de raíz inicial, ya que un nodo más distante se convierte en el nodo raíz después de las reparaciones. En ambos experimentos, los valores devueltos en las sondas comienzan a reflejar la situación correcta dentro de poco tiempo después de las fallas. Tanto los experimentos de referencia de la prueba de prueba como de los experimentos de simulación sobre flexibilidad y escalabilidad, concluimos que (1) la flexibilidad proporcionada por SDIMS permite que las aplicaciones intercambien sobrecargas de lectura-escritura (Figura 8), latencia de lectura y sensibilidad a máquinas ralas (Figura 12), (2) Una buena estrategia de agregación predeterminada es la actualización que tiene gastos generales moderados tanto en las lecturas como en las escrituras (Figura 8), tiene latencias de lectura moderadas (Figura 12) y es escalable con respecto a los nodos y los atributos (Figura 9), y (3) los tamaños de dominio pequeños son los casos en que los algoritmos DHT no proporcionan la convergencia de ruta con más frecuencia y los SDIMS aseguran la convergencia de la ruta con solo un aumento moderado en las longitudes de la ruta (Figura 11).7.3 Aplicaciones SDIMS está diseñada como una infraestructura general de control y control distribuido para una amplia gama de aplicaciones. Arriba, discutimos algunos microbistres simples que incluyen un servicio de membresía de multidifusión y una función de calculación de suma. Van Renesse et al.[38] proporcionan ejemplos detallados de cómo dicho servicio puede usarse para un directorio de almacenamiento en caché de pares, un servicio de difusión de datos, un sistema PublishSubscribe, sincronización de barreras y votación. Además, tenemos experiencia inicial utilizando SDIMS para construir dos aplicaciones significativas: el plano de control para un sistema de archivos distribuidos a gran escala [12] y un monitor de red para identificar bateadores pesados que consumen recursos en exceso. Control del sistema de archivos distribuido: el sistema de replicación práctica (replicación parcial, consistencia arbitraria, independencia de la topología) proporciona un conjunto de mecanismos para la replicación de datos sobre los cuales se pueden colocar políticas de control arbitrarias. Utilizamos SDIMS para proporcionar varias funciones clave para crear un sistema de archivos a través de los mecanismos prácticos de bajo nivel. Primero, los nodos usan SDIMS como directorio para manejar la lectura. Cuando un nodo n recibe un objeto o, actualiza el atributo (readDir, o) con el valor n;Cuando n descarga O de su tienda local, se restablece (readdir, o) a null. En cada nodo virtual, la función de agregación ReadDir simplemente selecciona un valor infantil no nulo aleatorio (si lo hay) y utilizamos la política de actualización para propagar actualizaciones. Finalmente, para localizar una copia cercana de un objeto O, un nodo n1 emite una serie de solicitudes de sonda para el atributo (readdir, o), comenzando con nivel = 1 y aumentando el valor de nivel con cada solicitud de sonda repetida hasta que no sea un no nuloSe devuelve el ID del nodo N2.N1 luego envía una solicitud de lectura de demanda a N2, y N2 envía los datos si los tiene. Por el contrario, si N2 no tiene una copia de O, envía un NACK a N1, y N1 emite una sonda de reintento con el parámetro descendente establecido en un valor mayor que el utilizado en la sonda anterior para forzar la reagregación a pedido, que producirá un valor más fresco para el reintento. En segundo lugar, los nodos se suscriben a invalidaciones y actualizaciones a los conjuntos de intereses de los archivos, y los nodos usan SDIMS para configurar y mantener los árboles que abarcan la red-topología de sets porterestas para propagar esta información. Para suscribirse a las invalidaciones para el conjunto de intereses I, un nodo N1 actualiza primero el atributo (Inval, i) con su identidad N1, y la función de agregación en cada nodo virtual selecciona un valor infantil no nulo. Finalmente, N1 sondea niveles de aumento del atributo (Inval, i) hasta que encuentra el primer nodo n2 = n1;N1 luego usa N2 como padre en el árbol de expansión.N1 también emite una sonda continua para este atributo en este nivel, de modo que se notifique a cualquier cambio a su padre de la extensión. Los árboles que abarcan corrientes de actualizaciones empujadas se mantienen de manera similar. En el futuro, planeamos usar SDIMS para al menos dos servicios adicionales dentro de este sistema de replicación. Primero, planeamos usar SDIMS para rastrear las tarifas de lectura y escritura a diferentes objetos;Los algoritmos previos a la captura utilizarán esta información para priorizar la replicación [40, 41]. En segundo lugar, planeamos rastrear los rangos de los números de secuencia de invalidación vistos por cada nodo para cada interés establecido para aumentar los árboles de expansión descritos anteriormente con relleno adicional de agujeros para permitir que los nodos ubiquen invalidaciones específicas que se han perdido. En general, nuestra experiencia inicial con el uso de SDIMS para el sistema de replicación práctica sugiere que (1) la interfaz de agregación general proporcionada por SDIMS simplifica la construcción de aplicaciones distribuidas otorgadas los mecanismos de bajo nivel, 388 pudimos construir un sistema de archivos básicoque utiliza SDIMS para varias tareas de control distintas en menos de dos semanas y (2) las garantías de consistencia débil proporcionadas por los SDIMS cumplen con los requisitos de este controlador de nodos de aplicación, cada uno de los nodos trata efectivamente la información de SDIMS como sugerencias, y si un nodo contactado no tiene elLos datos necesarios, el controlador se reactiva, utilizando la reagregación de SDIMS bajo demanda para obtener una pista más fresca. Problema de bateador pesado distribuido: el objetivo del problema de los bateadores pesados es identificar fuentes de red, destinos o protocolos que representan cantidades significativas o inusuales de tráfico. Como señalaron Estan et al.[13], esta información es útil para una variedad de aplicaciones, como la detección de intrusos (por ejemplo, escaneo de puertos), detección de servicios, detección y seguimiento de gusanos, asignación de red justa y mantenimiento de la red. Se ha realizado un trabajo significativo para desarrollar algoritmos de procesamiento de flujo de alto rendimiento para identificar bateadores pesados en un enrutador, pero esto es solo un primer paso;Idealmente, a estas aplicaciones les gustaría no solo una visión de los enrutadores de los bateadores pesados sino una vista agregada. Utilizamos SDIMS para permitir que la información local sobre los bateadores pesados se agrupe en una vista de los bateadores pesados globales. Para cada dirección IP de destino IPX, un nodo actualiza el atributo (DestBW, IPX) con el número de bytes enviados a IPX en la última ventana de tiempo. La función de agregación para el tipo de atributo Destbw se instala con la estrategia de actualización y simplemente agrega los valores de los nodos infantiles. Los nodos realizan una sonda continua para el agregado global del atributo y aumentan una alarma cuando el valor agregado global va por encima de un límite específico. Tenga en cuenta que solo los nodos que envían datos a una dirección IP particular realizan sondas para el atributo correspondiente. También tenga en cuenta que las técnicas de [25] pueden extenderse al caso jerárquico para la precisión de compensación para el ancho de banda de comunicación.8. Trabajo relacionado La abstracción de agregación que usamos en nuestro trabajo está fuertemente influenciada por el proyecto Astrolabe [38]. Astrolabe adopta una técnica de chismes propagateall y no estructuradas para lograr robustez [5]. Sin embargo, cualquier esquema de chismes requiere una replicación agresiva de los agregados. Si bien dicha replicación agresiva es eficiente para los atributos dominados por lecturas, incurre en un alto costo de mensajes para los atributos con una pequeña relación de lectura-escritura. Nuestro enfoque proporciona una API flexible para que las aplicaciones establezcan reglas de propagación de acuerdo con sus relaciones de lectura a escritura. Otros proyectos estrechamente relacionados incluyen Willow [39], Cono [4], Dasis [1] y Somo [45]. Willow, Dasis y Somo construyen un solo árbol para la agregación. Cono construye un árbol por atributo y requiere un orden total en los valores de atributo. Se han diseñado varios sistemas académicos [15, 21, 42] y comerciales [37] de monitoreo distribuido para monitorear el estado de grandes sistemas en red. Algunos de ellos están centralizados donde se recopilan y analizan todos los datos de monitoreo en un huésped central. Los ganglios [15, 23] usan un sistema jerárquico donde los atributos se replican dentro de los grupos utilizando multidifusión y luego los agregados de clúster se agregan aún más a lo largo de un solo árbol. Sophia [42] es un sistema de monitoreo distribuido diseñado con un modelo de programación lógica declarativa donde la ubicación de la ejecución de la consulta es explícita en el lenguaje y se puede calcular durante la evaluación. Esta investigación es complementaria a nuestro trabajo. Etiqueta [21] recopila información de una gran cantidad de sensores a lo largo de un solo árbol. La observación de que los DHT proporcionan internamente un bosque escalable de árboles de reducción no es nueva. Plaxton et al.s [28] El documento original no describe un DHT, sino un sistema para agregar y consultar los datos de ubicación de objetos jerárquicamente para enrutar las solicitudes a copias cercanas de objetos. Muchos sistemas construyen tanto la estrategia de corrección de bits de los plaxtones [32, 46] como en otras estrategias [24, 29, 35] -He elegido para ocultar esta potencia y exportar una abstracción de tabla de hash distribuida simple y general como un bloque de construcción útil paraUna amplia gama de aplicaciones distribuidas. Algunos de estos sistemas utilizan internamente el bosque de reducción no solo para el enrutamiento sino también para el almacenamiento en caché [32], sino que por simplicidad, estos sistemas generalmente no exportan esta poderosa funcionalidad en su interfaz externa. Nuestro objetivo es desarrollar y exponer el bosque de reducción interna de los DHT como una abstracción igualmente general y útil. Aunque la ubicación del objeto es una aplicación objetivo predominante para DHTS, varias otras aplicaciones como la multidifusión [8, 9, 33, 36] y DNS [11] también se construyen utilizando DHT. Todos estos sistemas realizan implícitamente la agregación en algún atributo, y cada uno de ellos debe estar diseñado para manejar cualquier reconfiguración en el DHT subyacente. Con la abstracción de agregación proporcionada por nuestro sistema, el diseño y la construcción de tales aplicaciones se vuelve más fácil. Los árboles DHT internos generalmente no satisfacen las propiedades de la localidad de dominio requeridas en nuestro sistema. Castro et al.[7] y Gummadi et al.[17] señalan la importancia de la convergencia de la ruta desde la perspectiva de lograr la eficiencia e investigar el rendimiento de la pastelería y otros algoritmos DHT, respectivamente. Skipnet [18] proporciona un enrutamiento restringido de dominio donde una búsqueda de clave se limita al dominio especificado. Esta interfaz se puede utilizar para garantizar la convergencia de ruta buscando en el dominio más bajo y avanzando al siguiente dominio cuando la búsqueda llega a la raíz en el dominio actual. Aunque esta estrategia garantiza la convergencia de la ruta, pierde la propiedad de abstracción del árbol de agregación de los DHT, ya que el enrutamiento limitado del dominio podría tocar un nodo más de una vez (mientras busca hacia adelante y luego hacia atrás para permanecer dentro de un dominio).9. Conclusiones Este documento presenta un sistema escalable de gestión de información distribuida (SDIMS) que agrega información en sistemas en red a gran escala y que puede servir como un bloque de construcción básico para una amplia gama de aplicaciones. Para los sistemas a gran escala, la agregación jerárquica es una abstracción fundamental para la escalabilidad. Construimos nuestro sistema extendiendo ideas de Astrolabe y DHTS para lograr (i) escalabilidad con respecto a los nodos y atributos a través de una nueva abstracción de agregación que ayuda a aprovechar los árboles internos de DHTS para la agregación, (ii) a través de una API simple que permite que las aplicaciones controlen las aplicacionesPropagación de lecturas y escrituras, (iii) aislamiento administrativo a través de aumentos simples de los algoritmos DHT actuales, y (iv) robustez a las reconfiguraciones de nodos y redes a través de la reegregación perezosa, la reegregación a pedido y la replicación espacial sintonizable. Agradecimientos Agradecemos a J.C. Browne, Robert Van Renseee, Amin Vahdat, Jay Lepreau y los revisores anónimos por sus útiles comentarios sobre este trabajo.10. Referencias [1] K. Albrecht, R. Arnold, M. Gahwiler y R. Wattenhofer. Únase y deje en los sistemas de igual a igual: el enfoque DASIS. Informe técnico, CS, Eth Zurich, 2003. [2] G. Back, W. H. Hsieh y J. Lepreau. Procesos en Kaffeos: aislamiento, gestión de recursos e intercambio en Java. Osdi, octubre de 2000. [3] G. Banga, P. Druschel y J. Contenedores de recursos: una nueva instalación para la gestión de recursos en los sistemas de servidores. En OSDI99, febrero de 1999. [4] R. Bhagwan, P. Mahadevan, G. Varghese y G. M. Voelker. Cono: un enfoque distribuido basado en el montón para la selección de recursos. Informe técnico CS2004-0784, UCSD, 2004. 389 [5] K. P. Birman. El sorprendente poder de la comunicación epidémica. En Actas de Fudico, 2003. [6] B. Bloom. Las compensaciones de espacio/tiempo en la codificación hash con errores permitidos. Comunicaciónde la ACM, 13 (7): 422-425, 1970. [7] M. Castro, P. Druschel, Y. C. Hu y A. Rowstron. Explotación de la proximidad de la red en redes de superposición de igual a igual. Informe técnico MSR-TR-2002-82, MSR.[8] M. Castro, P. Druschel, A.-M.Kermarrec, A. Nandi, A. Rowstron y A. Singh. Splitstream: multidifusión de alto ancho de banda en un entorno cooperativo. En Sosp, 2003. [9] M. Castro, P. Druschel, A.-M.Kermarrec y A. Rowstron. Escribo: una infraestructura de multidifusión de multidifusión a gran escala y descentralizada de nivel de aplicación. IEEE JSAC (número especial sobre soporte de red para comunicaciones de multidifusión), 2002. [10] J. Challenger, P. Dantzig y A. Iyengar. Un sistema escalable y altamente disponible para servir datos dinámicos en sitios web de acceso frecuente. En Actas de ACM/IEEE, SuperComputing 98 (SC98), noviembre de 1998. [11] R. Cox, A. Muthitacharoen y R. T. Morris. Sirviendo DNS utilizando un servicio de búsqueda entre pares. En IPTPS, 2002. [12] M. Dahlin, L. Gao, A. Nayate, A. Venkataramani, P. Yalagandula y J. Zheng. Replicación práctica para sistemas a gran escala. Informe técnico TR-04-28, Universidad de Texas en Austin, 2004. [13] C. Estan, G. Varghese y M. Fisk. Algoritmos de mapa de bits para contar flujos activos en enlaces de alta velocidad. En Internet Medeurement Conference 2003, 2003. [14] Y. Fu, J. Chase, B. Chun, S. Schwab y A. Vahdat. Sharp: una arquitectura para la mirada de recursos seguros. Sosp, octubre de 2003. [15] Ganglios: Sistema de monitoreo y ejecución distribuidos.http://ganglia.sourceforge.net.[16] S. Gribble, A. Halevy, Z. Ives, M. Rodrig y D. Suciu. ¿Qué puede hacer entre pares para las bases de datos y viceversa? En Proceedings of the WebDB, 2001. [17] K. Gummadi, R. Gummadi, S. D. Gribble, S. Ratnasamy, S. Shenker e I. Stoica. El impacto de la geometría de enrutamiento de DHT en la resiliencia y la proximidad. A. Harvey, M. B. Jones, S. Saroiu, M. Theimer y A. Wolman. Skipnet: una red superpuesta escalable con propiedades prácticas de localidad. En Usits, marzo de 2003. [19] R. Huebsch, J. M. Hellerstein, N. Lanham, B. T. Loo, S. Shenker e I. Stoica. Consulta en Internet con Pier. En Actas de la Conferencia VLDB, mayo de 2003. [20] C. Intanagonwiwat, R. Govindan y D. Estrin. Difusión dirigida: un paradigma de comunicación escalable y robusto para redes de sensores. En Mobicom, 2000. [21] S. R. Madden, M. J. Franklin, J. M. Hellerstein y W. Hong. Etiqueta: un pequeño servicio de agregación para redes de sensores ad-hoc. En Osdi, 2002. [22] D. Malkhi. En Fudico, 2002. [23] M. L. Massie, B. N. Chun y D. E. Culler. El sistema de monitoreo distribuido de los ganglios: diseño, implementación y experiencia. En sumisión.[24] P. Maymounkov y D. Mazieres. Kademlia: un sistema de información entre pares basado en la métrica XOR. En procedimientos de los IPTPS, marzo de 2002. [25] C. Olston y J. Widom. Ofreciendo una compensación de precisión-rendimiento para consultas de agregación sobre datos replicados. En VLDB, páginas 144-155, septiembre de 2000. [26] K. Petersen, M. Spreitzer, D. Terry, M. Theimer y A. Demers. Propagación de actualización flexible para una replicación débilmente consistente. Sosp, octubre de 1997. [27] Planetlab.http://www.planet-lab.org.[28] C. G. Plaxton, R. Rajaraman y A. W. Richa. Acceso a copias cercanas de objetos replicados en un entorno distribuido. En ACM Spaa, 1997. [29] S. Ratnasamy, P. Francis, M. Handley, R. Karp y S. Shenker. Una red de contenido de contenido escalable. En Actas de ACM Sigcomm, 2001. [30] S. Ratnasamy, S. Shenker e I. Stoica. Algoritmos de enrutamiento para DHT: algunas preguntas abiertas. En IPTPS, marzo de 2002. [31] T. Roscoe, R. Mortier, P. Jardetzky y S. Hand. InfoSpect: utilizando un lenguaje lógico para el monitoreo de la salud del sistema en sistemas distribuidos. En Actas del Taller Europeo de Sigops, 2002. [32] A. Rowstron y P. Druschel. PASTRA: ubicación y enrutamiento de objetos escalables y distribuidos para sistemas de pares a igual a gran escala. En Middleware, 2001. [33] S.Ratnasamy, M.Handley, R.Karp y S.Shenker. Multicast de nivel de aplicación utilizando redes de contenido directo. En Actas de la NGC, noviembre de 2001. [34] W. Stallings. Addison-Wesley, 1993. [35] I. Stoica, R. Morris, D. Karger, F. Kaashoek y H. Balakrishnan. Acorde: un servicio de búsqueda de pares escalable para aplicaciones de Internet. En ACM Sigcomm, 2001. [36] S.Zhuang, B.Zhao, A.Joseph, R.Katz y J.Kubiatowicz. Bayeux: una arquitectura para la difusión de datos de área amplia escalable y tolerante a fallas. En Nossdav, 2001. [37] Monitoreo de IBM Tivoli.www.ibm.com/software/tivoli/products/monitor.[38] R. Vanrenesse, K. P. Birman y W. Vogels. Astrolabe: una tecnología robusta y escalable para el monitoreo, gestión y minería de datos distribuidos del sistema. TOCS, 2003. [39] R. Vanrenesse y A. Bozdog. Willow: DHT, agregación y publicar/suscríbete en un protocolo. En IPTPS, 2004. [40] A. Venkataramani, P. Weidmann y M. Dahlin. Ancho de banda Ubicación restringida en un WAN. En Podc, agosto de 2001. [41] A. Venkataramani, P. Yalagandula, R. Kokku, S. Sharif y M. Dahlin. Costos y beneficios potenciales de la prioridad a largo plazo para la distribución de contenido. Elsevier Computer Communications, 25 (4): 367-375, marzo de 2002. [42] M. Wawrzoniak, L. Peterson y T. Roscoe. Sophia: un plano de información para sistemas en red. En Hotnets-II, 2003. [43] R. Wolski, N. Spring y J. Hayes. El servicio meteorológico de la red: un servicio de pronóstico de rendimiento de recursos distribuido para metacomputación. Journal of Future Generation Computing Systems, 15 (5-6): 757-768, octubre de 1999. [44] P. Yalagandula y M. Dahlin. SDIMS: un sistema de gestión de información distribuido escalable. Informe técnico TR-03-47, Departamento de Ciencias de la Computadora, UT Austin, septiembre de 2003. [45] Z. Zhang, S.-M.Shi y J. Zhu. Somo: superposición de metadatos autoorganizados para la gestión de recursos en P2P DHT. En IPTPS, 2003. [46] B. Y. Zhao, J. D. Kubiatowicz y A. D. Joseph. Tapestry: una infraestructura para la ubicación y el enrutamiento del área ancha tolerante a fallas. Informe técnico UCB/CSD-01-1141, UC Berkeley, abril de 2001. 390