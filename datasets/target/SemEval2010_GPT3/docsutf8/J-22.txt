Apostando en Permutaciones Yiling Chen Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ Laboratorio de CS & AI Instituto de Tecnología de Massachusetts Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6to piso Nueva York, NY 10011 RESUMEN Consideramos un escenario de apuestas de permutación, donde las personas apostan por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de emparejar apuestas sin riesgo o, de manera equivalente, encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los licitadores que enumeren explícitamente los pedidos en los que les gustaría apostar es tanto antinatural como intratable, ya que el número de pedidos es n! y el número de subconjuntos de pedidos es 2n!. Proponemos dos lenguajes de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso. La apuesta de subconjunto permite a los traders apostar que un candidato terminará clasificado entre algún subconjunto de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición será ocupada por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2. Para las apuestas de subconjuntos, demostramos que el problema del subastador se puede resolver en tiempo polinómico si las órdenes son divisibles. La apuesta por parejas permite a los traders apostar si un candidato terminará clasificado por encima de otro candidato, por ejemplo, si el caballo A vencerá al caballo B. Demostramos que el problema del subastador se vuelve NP-duro para las apuestas por pares. Identificamos una condición suficiente para la existencia de un par de apuestas que puede ser verificada en tiempo polinómico. También demostramos que un algoritmo voraz natural proporciona una mala aproximación para pedidos indivisibles. Categorías y Descriptores de Asignaturas J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía Términos Generales Economía, Teoría 1. La compra o venta de un valor financiero es, en efecto, una apuesta sobre el valor del valor. Por ejemplo, comprar una acción es una apuesta a que el valor de las acciones es mayor que su precio actual. Cada comerciante evalúa su beneficio esperado para decidir la cantidad a comprar o vender según su propia información y evaluación de probabilidad subjetiva. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de toda la información y creencias de los operadores. En la práctica, esta evaluación del valor de seguridad basada en el mercado agregado suele ser más precisa que otras previsiones que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considerar la compra de un valor de cincuenta y dos centavos, que paga $1 solo si un Demócrata gana las elecciones presidenciales de EE. UU. de 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un Demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un Demócrata gana. En este caso de una seguridad contingente a eventos, el precio, es decir, el valor de mercado de la seguridad, corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes emparejan a socios comerciales bilaterales. Por ejemplo, un operador dispuesto a aceptar una pérdida de x dólares si un Demócrata no gana a cambio de una ganancia de y dólares si un Demócrata gana se empareja con un segundo operador dispuesto a aceptar lo opuesto. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un trader apuesta que el candidato demócrata recibirá más votos que el candidato republicano, un segundo trader apuesta que el candidato republicano recibirá más votos que el candidato libertario, y un tercer trader apuesta que el candidato libertario recibirá más votos que el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrezca, puede haber una coincidencia de tres vías aceptable aunque no existan coincidencias de dos vías. Proponemos un intercambio donde los comerciantes tienen una considerable flexibilidad para expresar de forma natural y concisa sus apuestas, y examinar la complejidad computacional del problema de emparejamiento resultante de los subastadores para identificar acuerdos bilaterales y multilaterales. En particular, nos enfocamos en un escenario donde los traders apuestan por el resultado de una competencia entre n candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una carrera, etc.) y, por lo tanto, n! posibles ordenamientos de candidatos después del recuento final de votos. Los comerciantes pueden querer apostar en propiedades arbitrarias del orden final, por ejemplo, que el candidato D ganará, que el candidato D terminará en primer lugar o en último lugar, que el candidato D vencerá al candidato R, que los candidatos D y R vencerán al candidato L, etc. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntas formen una combinación agradable. Como veremos, el problema de emparejamiento se puede plantear como un programa lineal o entero, dependiendo de si los pedidos son divisibles o indivisibles, respectivamente. Intentar reducir el problema a un problema de emparejamiento bilateral mediante la creación explícita de n! valores, uno para cada orden final posible, resulta tanto engorroso para los operadores como computacionalmente inviable incluso para valores moderados de n. Además, la atención de los operadores se dispersaría entre n! opciones independientes, lo que haría que la probabilidad de que dos operadores converjan al mismo tiempo y lugar parezca remota. Existe un equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Queremos ofrecer a los traders el lenguaje de oferta más expresivo posible manteniendo la viabilidad computacional. Exploramos dos lenguajes de oferta que parecen naturales desde la perspectiva de un comerciante. La apuesta de subconjunto, descrita en la Sección 3.2, permite a los operadores apostar en qué posiciones del ranking caerá un candidato, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los traders también pueden apostar por qué candidatos caerán en una posición particular. En la Sección 4, derivamos un algoritmo de tiempo polinómico para emparejar apuestas de subconjuntos (divisibles). La clave del resultado es demostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce al emparejamiento bipartito ponderado máximo y, en consecuencia, podemos resolverlo en tiempo polinómico en el número de órdenes. Las apuestas por pares, descritas en la Sección 3.3, permiten a los traders apostar por la clasificación final de cualquier par de candidatos, por ejemplo, que el candidato D vencerá al candidato R. En la Sección 5, demostramos que el emparejamiento óptimo de apuestas por pares (divisibles o indivisibles) es NP-duro, mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. También proporcionamos una condición suficiente verificable polinómicamente para la existencia de un partido de apuestas por pares y demostramos que un algoritmo voraz ofrece una mala aproximación para apuestas por pares indivisibles. 2. ANTECEDENTES Y TRABAJO RELACIONADO Consideramos las apuestas de permutación, o apostar por el resultado de una competencia entre n candidatos. El resultado final o estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado la lista de caballos en orden creciente de sus tiempos de finalización. El espacio de estados S contiene todas las n! permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, las personas apuestan por propiedades del resultado como que el caballo A ganará, el caballo A se mostrará, o terminará en el primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en el hipódromo, cada uno de estos diferentes tipos de apuestas se procesan en piscinas o grupos separados. En otras palabras, todas las apuestas a ganador se procesan juntas, y todas las apuestas a mostrar se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede afectar la liquidez y la agregación de información. Por ejemplo, aunque el caballo A sea el favorito para ganar, eso no necesariamente aumentará directamente las probabilidades del caballo de quedar en los primeros lugares. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, nos gustaría permitir a los traders apostar sobre cualquier propiedad del orden final que prefieran, expresada en el idioma exacto que elijan. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta emparejar a los comerciantes dispuestos. Exploramos el equilibrio entre la expresividad del lenguaje de oferta y la complejidad computacional del problema de emparejamiento. Consideramos un marco en el que las personas proponen comprar valores que pagan $1 si y solo si alguna propiedad del orden final es verdadera. Los operadores indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar. (Las órdenes de venta pueden no ser necesarias explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al comerciante recibir menos acciones de las solicitadas, siempre y cuando se cumpla la restricción de precio; una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago, o cualquiera de las diversas aproximaciones practicadas en círculos financieros y de apuestas. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n! valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de n! valores linealmente independientes). Este es el llamado mercado completo de valores Arrow-Debreu [1] para nuestra configuración. En la práctica, los operadores no quieren lidiar con la especificación de bajo nivel de ordenamientos completos: las personas piensan de forma más natural en términos de propiedades de alto nivel de los ordenamientos. Además, operar n! valores es impracticable en la práctica desde un punto de vista computacional a medida que n crece. Un lenguaje de apuestas muy simple podría permitir a los comerciantes apostar solo por quién gana la competencia, como se hace en la piscina de ganancias en los hipódromos. El problema de correspondencia correspondiente es polinomial, sin embargo el lenguaje no es muy expresivo. Un comerciante que cree que A vencerá a B, pero que ninguno ganará claramente, no puede transmitir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar, pero nada más. Nuestro objetivo es encontrar lenguajes que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, manteniendo al mismo tiempo la viabilidad computacional. Nuestro trabajo es una analogía directa al trabajo de Fortnow et al. [6]. Mientras exploramos la combinatoria de permutaciones, Fortnow y otros exploran la combinatoria booleana. Los autores consideran un espacio de estados de las 2n posibles resultados de n variables binarias. Los traders expresan apuestas en lógica booleana. Los autores demuestran que el emparejamiento divisible es co-NP-completo y el emparejamiento indivisible es Σp 2-completo. Hanson [9] describe un mecanismo de reglas de puntuación de mercado que permite apostar en un número combinatorio de resultados. El mercado comienza con una distribución conjunta de probabilidad en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier comerciante puede cambiar la distribución de probabilidad siempre y cuando esté de acuerdo en pagar al comerciante más reciente 327 según la regla de puntuación. El creador de mercado paga al último comerciante. Por lo tanto, él asume riesgos y puede sufrir pérdidas. Los mecanismos de reglas de puntuación de mercado tienen la propiedad de que la pérdida máxima del creador de mercado está acotada. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no han sido completamente explorados. Nuestros mecanismos cuentan con un subastador que no asume ningún riesgo y solo empareja órdenes. La investigación sobre lenguajes de oferta y determinación del ganador en subastas combinatorias [4, 14, 18] considera desafíos computacionales similares en encontrar una asignación de artículos a postores que maximice los ingresos de los subastadores. Las subastas combinatorias permiten a los postores asignar valores distintos a conjuntos de bienes en lugar de solo a bienes individuales. La incertidumbre y el riesgo generalmente no se consideran, y el problema central del subastador es maximizar el bienestar social. Nuestros mecanismos permiten a los traders construir apuestas para un evento con n! resultados. La incertidumbre y el riesgo son considerados y el problema del subastador es explorar oportunidades de arbitraje y emparejar apuestas sin riesgo. En esta sección, definimos los problemas de emparejamiento y emparejamiento óptimo que un subastador necesita resolver en un mercado de apuestas de permutaciones general. Luego ilustramos las definiciones del problema en el contexto de los mercados de apuestas de subconjuntos y de apuestas por pares. 3.1 Valores, Órdenes y Problemas de Coincidencia Consideremos un evento con n candidatos competidores donde el resultado (estado) es un ranking de los n candidatos. El idioma de la oferta de un mercado que ofrece valores en los resultados futuros determina el tipo y número de valores disponibles y afecta directamente qué información se puede agregar sobre el resultado. Un lenguaje de oferta completamente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final; un lenguaje menos expresivo limita el tipo de información que se puede agregar, aunque puede permitir una solución más eficiente al problema de emparejamiento. Para cualquier idioma de oferta y número de valores en un mercado de apuestas de permutación, podemos representar de manera sucinta el problema del subastador para igualar ofertas sin riesgo de la siguiente manera. Considera un conjunto de índices de apuestas u órdenes O que los traders envían al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto está dispuesto a pagar el operador por una acción de seguridad φi y qi es la cantidad de acciones de la seguridad que desea comprar a un precio bi. Naturalmente, bi ∈ (0, 1) ya que una unidad del valor paga como máximo $1 cuando el evento se realiza. Dado que el orden i está definido para un único valor de seguridad φi, omitiremos la variable de seguridad siempre que sea claro en el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Que xi sea la fracción de orden i ∈ O aceptada. En la versión indivisible del mercado xi = 0 o 1, mientras que en la versión divisible xi ∈ [0, 1]. Además, dejemos que Ii(s) sea la variable indicadora de si el pedido i está ganando en el estado s, es decir, Ii(s) = 1 si el pedido recibe $1 en el estado s y Ii(s) = 0 en caso contrario. Hay dos posibles problemas que el subastador puede querer resolver. La forma más sencilla es encontrar un subconjunto de órdenes que puedan ser emparejadas sin riesgo, es decir, un subconjunto de órdenes que, aceptadas juntas, den una ganancia no negativa al subastador en cada posible resultado. Llamamos a este problema la existencia de una coincidencia o a veces simplemente, el problema de coincidencia. El problema más complejo es para el subastador encontrar la combinación óptima con respecto a algún criterio como el beneficio, el volumen de negociación, etc. Definición 1 (Existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes O, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) De manera similar, podemos definir la existencia de una coincidencia con órdenes divisibles. Definición 2 (Existencia de coincidencia, pedidos divisibles). Dado un conjunto de pedidos O, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi > 0 tal que i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito de libre de riesgos, el subastador puede optimizar algún criterio al determinar las órdenes a aceptar. Algunos objetivos razonables incluyen maximizar el volumen total de operaciones en el mercado o el beneficio en el peor de los casos del subastador. Los siguientes problemas de emparejamiento óptimo están definidos para un subastador que maximiza su beneficio en el peor de los casos. Definición 3 (Emparejamiento óptimo, órdenes indivisibles). Dado un conjunto de pedidos O, elige xi ∈ {0, 1} de manera que el siguiente problema de programación entera mixta alcance su optimalidad max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (Emparejamiento óptimo, pedidos divisibles). Dado un conjunto de pedidos O, elige xi ∈ [0, 1] de manera que el siguiente problema de programación lineal alcance su optimalidad max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable c es la ganancia en el peor de los casos para el subastador. Cabe destacar que, estrictamente hablando, los problemas de emparejamiento óptimo no requieren resolver los problemas de optimización (3) y (4), ya que solo se necesita el conjunto óptimo de pedidos. La ganancia óptima en el peor de los casos puede permanecer desconocida. 3.2 Apuestas de subconjunto Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar en un subconjunto de posiciones en las que un candidato podría terminar, o pueden apostar en un subconjunto de candidatos que ocuparán una posición particular. Un contrato de seguridad α|Φ donde Φ es un subconjunto de posiciones paga $1 si el candidato α se encuentra en una posición que es un elemento de Φ y paga $0 en caso contrario. Por ejemplo, la seguridad α|{2, 4} paga $1 cuando el candidato α 328 es clasificado en segundo o cuarto lugar. De manera similar, una seguridad Ψ|j donde Ψ es un subconjunto de candidatos paga $1 si alguno de los candidatos en el conjunto Ψ se clasifica en la posición j. Por ejemplo, la seguridad {α, γ}|2 paga $1 cuando cualquiera de los candidatos α o γ es clasificado en segundo lugar. El subastador en un mercado de apuestas enfrenta un problema de emparejamiento no trivial, es decir, determinar qué órdenes aceptar entre todas las órdenes presentadas i ∈ O. Ten en cuenta que aunque solo hay n candidatos y n posiciones posibles, el número de valores disponibles para apostar es exponencial, ya que un trader puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones. Con esto, no está claro de inmediato si se puede encontrar un socio comercial o una coincidencia para que ocurra el intercambio, o si el subastador puede resolver el problema de emparejamiento en tiempo polinómico. En la siguiente sección, mostraremos que sorprendentemente existe una elegante solución polinómica tanto para el problema de emparejamiento como para el problema de emparejamiento óptimo, basada en problemas combinatorios clásicos. Cuando se acepta un pedido, el comerciante correspondiente paga al subastador el precio del pedido presentado y el subastador paga a los pedidos ganadores $1 por acción después de que se revele el resultado. El subastador debe elegir cuidadosamente qué órdenes y qué fracciones de ellas aceptar para garantizar una ganancia no negativa en cualquier estado futuro. El siguiente ejemplo ilustra el problema de emparejamiento para órdenes indivisibles en el mercado de apuestas de subconjuntos. Ejemplo 1. Supongamos que n = 3. Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia. El subastador recibe las siguientes 4 órdenes: (1) comprar 1 acción α|{1} a un precio de $0.6; (2) comprar 1 acción β|{1, 2} a un precio de $0.7; (3) comprar 1 acción γ|{1, 3} a un precio de $0.8; y (4) comprar 1 acción β|{3} a un precio de $0.7. Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα. Las ganancias dependientes del estado correspondientes del subastador para cada pedido se pueden calcular como los siguientes vectores, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columnas corresponden a los 6 estados futuros. Para órdenes indivisibles, el subastador puede aceptar las órdenes (2) y (4) y obtener un vector de ganancias c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar las órdenes (2), (3) y (4) y tener ganancias en el estado c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Apuestas en Parejas Un mercado de apuestas en parejas permite a los traders apostar sobre si un candidato se clasificará por encima de otro candidato, en un resultado que es una permutación de n candidatos. Un valor de seguridad α > β paga $1 si el candidato α está clasificado por encima del candidato β y $0 en caso contrario. Hay un total de N(N −1) valores diferentes ofrecidos en el mercado, cada uno correspondiente a un par ordenado de candidatos. Los operadores realizan pedidos de la forma comprar qi acciones de α > β a un precio por acción no mayor que bi. En general, bi debe estar entre 0 y 1. Nuevamente, la orden puede ser tanto indivisible como divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figura 1: Cada ciclo tiene una ganancia negativa en el peor de los casos de -0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad da una ganancia positiva en el peor de los casos de 0.44. xi ∈ {0, 1} para órdenes indivisibles y xi ∈ [0, 1] para órdenes divisibles. Las mismas definiciones para la existencia de un partido y un partido óptimo de la Sección 3.1 se aplican. Las órdenes en el mercado de apuestas por pares tienen una interpretación natural como un grafo, donde los candidatos son nodos en el grafo y cada orden que clasifica un par de candidatos α > β está representada por una arista dirigida e = (α, β) con precio be y peso qe. Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia máxima no negativa. Suponiendo que qe = 1 para todos los e, esto es un ciclo C con un total de |C| aristas tal que la ganancia en el peor de los casos para el subastador es e∈C be − (|C| − 1) ≥ 0, ya que en el estado de peor caso el subastador necesita pagar $1 a cada pedido en el ciclo excepto uno. Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de pedidos en el que cada ciclo individual tenga una ganancia negativa en el peor de los casos, y sin embargo haya una coincidencia positiva en el peor de los casos en general. Las etiquetas de borde en la figura son los precios; tanto la solución óptima divisible como indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1.4. COMPLEJIDAD DE LAS APUESTAS DE SUBCONJUNTOS Los problemas de emparejamiento del subastador en cualquier mercado de permutaciones, incluido el mercado de apuestas de subconjuntos, tienen n! restricciones. Los métodos de fuerza bruta tomarían tiempo exponencial para resolver. Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjuntos, podemos demostrar que los problemas de emparejamiento para órdenes divisibles pueden resolverse en tiempo polinómico. Teorema 1. La existencia de un partido y los problemas de emparejamiento óptimo con órdenes divisibles en un mercado de apuestas de subconjuntos pueden resolverse en tiempo polinómico. 329 Prueba. Considera el problema de programación lineal (4) para encontrar una coincidencia óptima. Este programa lineal tiene |O| + 1 variables, una variable xi para cada orden i y la variable de beneficio c. También tiene una cantidad exponencial de restricciones. Sin embargo, podemos resolver el programa en tiempo polinómico en el número de pedidos |O| utilizando el algoritmo del elipsoide, siempre y cuando podamos resolver eficientemente su problema de separación correspondiente en tiempo polinómico [7, 8]. El problema de separación para un programa lineal toma como entrada un vector de valores de variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada. Para los valores dados de las variables, una restricción violada en la Ecuación (4) pregunta si hay un estado o permutación s en el que la ganancia sea menor que c, y puede ser reescrita como i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Por lo tanto, basta con mostrar cómo encontrar eficientemente un estado s que satisfaga la desigualdad anterior (5) o verificar que la desigualdad opuesta se cumple para todos los estados s. Mostraremos que el problema de separación se puede reducir al problema de emparejamiento bipartito ponderado máximo [3]. El lado izquierdo en la Ecuación (5) es el dinero total que el subastador necesita pagar a los operadores ganadores en el estado s. El primer término en el lado derecho es el dinero total recolectado por el subastador y está fijo para un vector de solución dado de xis y c. Se puede construir un grafo bipartito ponderado entre el conjunto de candidatos y el conjunto de posiciones. Para cada orden de la forma α|Φ hay aristas desde el nodo candidato α hacia cada nodo de posición en Φ. Para órdenes de la forma Ψ|j hay aristas desde cada candidato en Ψ hasta la posición j. Para cada orden i, ponemos peso qixi en cada uno de estos bordes. Todas las aristas múltiples con los mismos puntos finales son reemplazadas entonces por una sola arista que lleva el peso total de la arista múltiple. Cada estado s corresponde entonces a un emparejamiento perfecto en el grafo bipartito. Además, el subastador paga a los ganadores la suma de todos los pesos de los bordes en el emparejamiento perfecto, ya que cada candidato solo puede ocupar una posición y cada posición es ocupada por un candidato. Por lo tanto, el peor caso del estado y el pago de los subastadores son la solución al problema de emparejamiento bipartito ponderado máximo, el cual tiene algoritmos de tiempo polinomial conocidos [12, 13]. Por lo tanto, el problema de separación puede resolverse en tiempo polinómico. Naturalmente, si la solución óptima para (4) da como resultado una ganancia en el peor de los casos de c∗ > 0, existe una correspondencia. Por lo tanto, el problema de emparejamiento también puede resolverse en tiempo polinómico. 5. COMPLEJIDAD DE LAS APUESTAS EN PAREJA En esta sección mostramos que un ligero cambio en el lenguaje de la oferta puede provocar un cambio drástico en la complejidad del problema de emparejamiento óptimo del subastador. En particular, demostramos que encontrar la combinación óptima en el mercado de apuestas de pares es NP-duro tanto para órdenes divisibles como indivisibles. Luego identificamos una condición suficiente verificable en tiempo polinómico para decidir la existencia de una coincidencia. Los resultados de dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas por pares tiene un lenguaje de oferta aparentemente más restrictivo que solo ofrece n(n−1) 1. La noción de emparejamiento perfecto en un grafo bipartito, que solo utilizamos en esta demostración, no debe confundirse con la noción de emparejar apuestas que utilizamos a lo largo del documento. Por el contrario, el mercado de apuestas de subconjuntos permite a los operadores apostar en un número exponencial de valores y aún así tenía una solución de tiempo polinómico para encontrar la coincidencia óptima. Nuestra esperanza es que la comparación de las complejidades de los mercados de apuestas de subconjuntos y de pares ofrezca una visión sobre lo que hace que un lenguaje de oferta sea expresivo al mismo tiempo que permite una solución de emparejamiento eficiente. En todos los análisis que siguen, asumimos que los operadores envían órdenes unitarias en mercados de apuestas por pares, es decir, qi = 1. Un conjunto de órdenes O recibidas por el subastador en un mercado de apuestas en pares con órdenes unitarias puede ser representado por un grafo dirigido, G(V, E), donde el conjunto de vértices V contiene a los candidatos en los que los traders hacen apuestas. Un borde e ∈ E, denotado (α, β, be), representa una orden de comprar 1 acción del valor α > β a un precio be. Todos los bordes tienen un peso igual de 1. Adoptamos las siguientes notaciones a lo largo del documento: • G(V, E): grafo dirigido original con pesos iguales para el conjunto de órdenes unitarias O. • be: precio de la orden para la arista e. • G∗ (V∗, E∗): un grafo dirigido ponderado de órdenes aceptadas para el emparejamiento óptimo, donde el peso de la arista xe es la cantidad de la orden e aceptada por el subastador. xe = 1 para órdenes indivisibles y 0 < xe ≤ 1 para órdenes divisibles. • H(V, E): un grafo dirigido ponderado genérico de órdenes aceptadas. • k(H): solución al problema del conjunto mínimo de arcos de retroalimentación no ponderado en el grafo H. k(H) es el número mínimo de aristas a eliminar para que H se vuelva acíclico. • l(H): solución al problema del conjunto mínimo de arcos de retroalimentación ponderado en el grafo H. l(H) es el peso total mínimo para el conjunto de aristas que, al eliminarse, dejan a H acíclico. • c(H): beneficio en el peor de los casos del subastador si acepta todas las órdenes en el grafo H. • ε: un número real positivo suficientemente pequeño. Donde no se indique, < 1/(2|E|) para un grafo H(V, E). En otros casos, el valor se determina en el contexto. Un conjunto de arcos de retroalimentación de un grafo dirigido es un conjunto de arcos que, al ser eliminados del grafo, dejan un grafo dirigido acíclico (DAG). El problema del conjunto mínimo de arcos de retroalimentación no ponderado consiste en encontrar un conjunto de arcos de retroalimentación con la cardinalidad mínima, mientras que el problema del conjunto mínimo de arcos de retroalimentación ponderado busca encontrar un conjunto de arcos de retroalimentación con el peso total mínimo de aristas. Tanto los problemas de conjunto mínimo de arcos de retroalimentación no ponderados como ponderados se ha demostrado que son NP-completos [10]. Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas por pares. 5.1 Emparejamiento Indivisible Óptimo El problema de emparejamiento indivisible óptimo del subastador se introduce en la Definición 3 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de los subastadores en un mercado de apuestas en pares como la selección de un subconjunto de aristas para aceptar de manera que se maximice la ganancia en el peor caso de 330 en el siguiente problema de optimización, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin pérdida de generalidad, asumimos que no hay multi-aristas en el grafo de órdenes G. Mostramos que el problema de emparejamiento óptimo para órdenes indivisibles es NP-duro mediante una reducción del problema del conjunto mínimo de arcos de retroalimentación no ponderados. El último toma como entrada un grafo dirigido, y pregunta cuál es el número mínimo de aristas que se deben eliminar del grafo para que quede un DAG. Nuestra prueba de dureza se basa en los siguientes lemas. Lema 2. Supongamos que el subastador acepta todos los bordes en un grafo dirigido ponderado de manera equitativa H(V, E) con precio de borde be = (1 − ) y peso de borde xe = 1. Entonces, la ganancia en el peor de los casos es igual a k(H) − |E|, donde k(H) es la solución al problema del arco de retroalimentación mínimo no ponderado en H. Demostración. Si el orden de un borde obtiene un beneficio de $1 al final del mercado, llamamos a ese borde un borde ganador, de lo contrario se le llama un borde perdedor. Para cualquier estado s, todas las aristas ganadoras necesariamente forman un DAG. Por el contrario, para cada DAG hay un estado en el que los bordes del DAG son ganadores (aunque los bordes restantes en G no necesariamente son perdedores). Supongamos que en el estado s hay ws aristas ganadoras y ls = |E| − ws aristas perdedoras. Entonces, ls es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los arcos perdedores en el estado s. Los arcos que permanecen después de eliminar el conjunto mínimo de arcos de retroalimentación forman el DAG máximo para el grafo H. Considere el estado smax en el que todos los arcos del DAG máximo son ganadores. Esto proporciona el número máximo de aristas ganadoras wmax. Todos los demás bordes son necesariamente perdedores en el estado smax, ya que cualquier borde que no esté en el DAG máximo debe formar un ciclo junto con algunos de los bordes del DAG. El número de aristas perdedoras en el estado smax es la cardinalidad del conjunto mínimo de arcos de retroalimentación de H, es decir, |E| - wmax = k(H). La ganancia del subastador en un estado s es profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, donde la igualdad se cumple cuando s = smax. Por lo tanto, la ganancia en el peor de los casos se logra en el estado smax, ganancia(smax) = (|E| − wmax) − |E| = k(H) − |E|. Considera el grafo de pedidos aceptados para el emparejamiento óptimo, G∗ (V ∗ , E∗ ), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, es decir, aristas con xe = 1 en la solución del problema de optimización (6). Tenemos el siguiente lema. Lema 3. Si los precios de los bordes son be = (1− ), entonces el grafo de solución indivisible óptima G∗ tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que el grafo de todos los pedidos G, es decir, k(G∗ ) = k(G). Además, G∗ es el subgrafo más pequeño de G que cumple con estas condiciones, es decir, es el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño de conjunto mínimo de arcos de retroalimentación no ponderados que G. Demostración. G∗ es un subgrafo de G, por lo tanto, el número mínimo de aristas para romper ciclos en G∗ no es mayor que en G, es decir, k(G∗) ≤ k(G). Supongamos que k(G∗) < k(G). Dado que tanto k(G∗) como k(G) son números enteros, para cualquier < 1 |E| tenemos que k(G∗) − |E∗| < k(G) − |E|. Por lo tanto, según el Lema 2, el subastador obtiene un beneficio máximo peor al aceptar G que al aceptar G∗, lo cual contradice la optimalidad de G∗. Finalmente, la ganancia en el peor de los casos k(G) − |E∗ | se maximiza cuando |E∗ | se minimiza. Por lo tanto, G∗ es el subgrafo más pequeño de G tal que k(G∗) = k(G). Las dos lemas anteriores demuestran que la ganancia máxima en el peor caso en el emparejamiento indivisible óptimo está directamente relacionada con el tamaño del conjunto mínimo de arcos de retroalimentación. Por lo tanto, calcular uno automáticamente da el otro, por lo tanto, calcular la ganancia máxima en el peor caso en el problema de apuestas de pares indivisibles es NP-duro. Teorema 4. Calcular la ganancia máxima en el peor de los casos en apuestas de pares indivisibles es un problema NP-duro. Prueba. Según el Lema 3, la ganancia máxima en el peor caso, que es óptima para el problema de programación entera mixta (6), es k(G) − |E∗|, donde |E∗| es el número de aristas aceptadas. Dado que k(G) es un número entero y |E∗ | ≤ |E| < 1, resolver (6) nos dará automáticamente la cardinalidad del conjunto mínimo de arcos de retroalimentación de G, k(G). Dado que el problema del conjunto mínimo de arcos de retroalimentación es NP-completo [10], calcular la máxima ganancia en el peor de los casos es NP-difícil. El Teorema 4 establece que resolver el problema de optimización es difícil, porque incluso si se proporciona el conjunto óptimo de pedidos, calcular la ganancia óptima en el peor de los casos al aceptar esos pedidos es NP-duro. Sin embargo, no implica si el problema de emparejamiento óptimo, es decir, encontrar el conjunto óptimo de pedidos para aceptar, es NP-duro. Es posible poder determinar qué aristas en un grafo participan en la coincidencia óptima, pero no poder calcular la ganancia correspondiente en el peor de los casos. A continuación, demostramos que el problema de emparejamiento óptimo indivisible es en realidad NP-duro. Utilizaremos el siguiente dato corto repetidamente. Lema 5 (Lema de eliminación de aristas). Dado un grafo ponderado H(V, E), al eliminar un solo borde e con peso xe del grafo, se reduce la solución mínima ponderada del conjunto de arcos de retroalimentación l(H) en no más de xe y se reduce la solución mínima no ponderada del conjunto de arcos de retroalimentación k(H) en no más de 1. Prueba. Supongamos que el conjunto mínimo de arcos de retroalimentación ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene un peso total de aristas de l(H−{e})+xe. Dado que l(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, tenemos que l(H) ≤ l(H −{e})+xe, lo que implica que l(H − {e}) ≥ l(H) − xe. De manera similar, supongamos que el conjunto mínimo de arcos de retroalimentación no ponderados para el grafo H − {e} es F. Entonces F ∪ {e} es un conjunto de arcos de retroalimentación para H, y tiene una cardinalidad de conjunto de k(H−{e})+1. Dado que k(H) es la solución al problema del conjunto mínimo de arcos de retroalimentación no ponderados en H, tenemos k(H) ≤ k(H − {e}) + 1, lo que implica que k(H − {e}) ≥ k(H) − 1. Teorema 6. Encontrar la combinación óptima en apuestas de pares indivisibles es NP-duro. 331 Prueba. Reducimos nuevamente del problema del conjunto mínimo de arcos de retroalimentación no ponderados, aunque con una transformación polinómica ligeramente más compleja que implica múltiples llamadas al oráculo de coincidencias óptimas. Considera un grafo de instancia G del problema del conjunto mínimo de arcos de retroalimentación. Estamos interesados en calcular k(G), el tamaño del conjunto mínimo de arcos de retroalimentación de G. Supongamos que tenemos un oráculo que resuelve el problema de emparejamiento óptimo. Denote por emparejamiento óptimo(G) la salida del oráculo de emparejamiento óptimo en el grafo G con precios be = (1− ) en todas sus aristas. Según el Lema 3, al introducir G como entrada, el emparejamiento óptimo del oráculo devuelve el subgrafo de G con el menor número de aristas, que tiene el mismo tamaño que el conjunto mínimo de arcos de retroalimentación de G. El siguiente procedimiento encuentra k(G) utilizando un número polinomial de llamadas al oráculo de coincidencia óptima en una secuencia de subgrafos de G. Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia óptima(G) si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras devolver (iteraciones) Este procedimiento elimina aristas del grafo original G capa por capa hasta que el grafo esté vacío, al mismo tiempo que calcula el tamaño mínimo del conjunto de arcos de retroalimentación k(G) del grafo original como el número de iteraciones. En cada iteración, comenzamos con un grafo G y lo reemplazamos con el subgrafo más pequeño G que tiene el mismo k(G). En esta etapa, eliminar un borde adicional e resulta necesariamente en k(G −{e}) = k(G )−1, porque k(G −{e}) < k(G ) debido a la optimalidad de G , y k(G − {e}) ≥ k(G ) − 1 según el lema de eliminación de bordes. Por lo tanto, en cada iteración la cardinalidad del conjunto mínimo de arcos de retroalimentación se reduce exactamente en 1. Por lo tanto, el número de iteraciones es igual a k(G). Se debe tener en cuenta que este procedimiento proporciona una transformación polinómica del problema de emparejamiento óptimo al problema del conjunto mínimo de arcos de retroalimentación no ponderados, que llama al oráculo de emparejamiento óptimo exactamente k(G) ≤ |E| veces, donde |E| es el número de aristas de G. Por lo tanto, el problema de emparejamiento óptimo es NP-duro. 5.2 Emparejamiento Óptimo Divisible Cuando los pedidos son divisibles, el problema de emparejamiento óptimo del subastador se describe en la Definición 4 de la Sección 3. Suponiendo órdenes de unidades y considerando el grafo de órdenes G(V, E), reformulamos el problema de emparejamiento óptimo de subastadores para órdenes divisibles como la elección de la cantidad de órdenes a aceptar, xe ∈ [0, 1], de modo que se maximice la ganancia en el peor de los casos en el siguiente problema de programación lineal, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. Aún asumimos que no hay multiarcos en el grafo de órdenes G. Cuando las órdenes son divisibles, el subastador puede beneficiarse más aceptando órdenes parciales. El ejemplo 2 muestra una situación en la que aceptar pedidos parciales genera un beneficio máximo en el peor de los casos mayor que la solución óptima indivisible. Ejemplo 2. Mostramos que el programa lineal (7) a veces tiene una solución óptima no entera. Figura 2: Un gráfico de órdenes. Las letras en los bordes representan los precios de orden. Considera el gráfico en la Figura 2. Hay un total de cinco ciclos en el gráfico: tres ciclos de cuatro aristas ABCD, ABEF, CDEF, y dos ciclos de seis aristas ABCDEF y ABEFCD. Supongamos que cada arista tiene un precio b tal que 4b − 3 > 0 y 6b − 5 < 0, es decir, b ∈ (.75, .80), por ejemplo b = .78. Con esto, la solución óptima indivisible consiste en un ciclo de cuatro aristas como máximo, con un beneficio en el peor de los casos de (4b−3). Por otro lado, tomar 1 2 fracción de cada uno de los tres ciclos de cuatro aristas resultaría en una ganancia máxima en el peor de los casos de 3 2 (4b − 3). A pesar del aumento potencial de beneficios al aceptar pedidos divisibles, el problema de emparejamiento óptimo de los subastadores sigue siendo NP-duro para pedidos divisibles, lo cual se presenta a continuación a través de varios lemas y teoremas. Lema 7. Supongamos que el subastador acepta pedidos descritos por un grafo dirigido ponderado H(V, E) con peso de borde xe que representa la cantidad aceptada para el borde del pedido e. El beneficio en el peor de los casos para el subastador es c(H) = e∈E (be − 1)xe + l(H). (8) Prueba. Para cualquier estado s, las aristas ganadoras forman un DAG. Por lo tanto, la ganancia máxima en el peor de los casos para el subastador se logra en el estado o estados en los que la cantidad total de órdenes perdedoras se minimiza. La cantidad total mínima de órdenes perdedoras es la solución al problema del conjunto mínimo de arcos de retroalimentación ponderados en H, que es l(H). Considera el grafo de pedidos aceptados para el emparejamiento divisible óptimo, G∗ (V∗, E∗), que consiste en el subconjunto óptimo de aristas E∗ que deben ser aceptadas por el subastador, con peso de arista xe > 0 obtenido de la solución óptima del programa lineal (7). Tenemos los siguientes lemas. 332 Lema 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G). Prueba. l(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación ponderados en G∗, mientras que k(G∗) es la solución del problema del conjunto mínimo de arcos de retroalimentación no ponderados en G∗. Cuando todos los pesos de las aristas en G∗ son 1, l(G∗) = k(G∗). Cuando xes son menores que 1, l(G∗) puede ser menor o igual a k(G∗). Dado que G∗ es un subgrafo de G pero posiblemente con pesos de arista diferentes, k(G∗) ≤ k(G). Por lo tanto, tenemos la relación anterior. Lema 9. Existe algún tal que cuando todos los precios de las aristas son (1 − ), l(G∗ ) = k(G). Prueba. A partir del lema 8, l(G∗ ) ≤ k(G). Sabemos que la ganancia máxima en el peor de los casos para los subastadores al aceptar G∗ es c(G∗) = e∈E∗ (be − 1)xe + l(G∗) = l(G∗) − e∈E∗ xe. Cuando acepta el grafo de orden original G en su totalidad, su beneficio en el peor de los casos es c(G) = e∈E (be − 1) + k(G) = k(G) − |E|. Supongamos que l(G∗ ) < k(G). Si |E| − e∈E∗ xe = 0, significa que G∗ es G. Por lo tanto, l(G∗ ) = k(G) independientemente de , lo cual contradice la suposición l(G∗ ) < k(G). Si |E| − e∈E∗ xe > 0, entonces cuando < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) es estrictamente mayor que c(G∗), lo cual contradice la optimalidad de c(G∗). Dado que los xes son menores que 1, es imposible que l(G∗ ) > k(G). Por lo tanto, l(G∗) = k(G). Teorema 10. Encontrar la ganancia óptima en el peor de los casos en las apuestas de pares divisibles es NP-duro. Prueba. Dado el conjunto óptimo de órdenes parciales para aceptar en G cuando los pesos de las aristas son (1 − ε), si podemos calcular la ganancia óptima en el peor de los casos, mediante el lema 9 podemos resolver el problema del conjunto mínimo de arcos de retroalimentación no ponderados en G, que es NP-duro. Por lo tanto, encontrar la ganancia óptima en el peor de los casos es NP-duro. El teorema 10 establece que resolver el programa lineal (7) es NP-duro. De manera similar al caso indivisible, aún necesitamos demostrar que encontrar la coincidencia óptima divisible es difícil, en lugar de poder calcular la ganancia óptima en el peor de los casos. Dado que en el caso divisible las aristas no necesariamente tienen pesos unitarios, la demostración en el Teorema 6 no se aplica directamente. Sin embargo, con una propiedad adicional del caso divisible, podemos ampliar el procedimiento de la prueba de dureza indivisible para calcular el tamaño mínimo del conjunto de arcos de retroalimentación no ponderados k(G) aquí también. Primero, hay que tener en cuenta que el subgrafo divisible óptimo G∗ de un grafo G es el subgrafo ponderado con el tamaño mínimo de conjunto de arcos de retroalimentación ponderados l(G∗) = k(G) y la menor suma de pesos de aristas e∈E∗ xe, ya que su beneficio en el peor caso correspondiente es k(G) − e∈E∗ xe según los lemas 7 y 9. Lema 11. Supongamos que el grafo H satisface l(H) = k(H) y eliminamos la arista e de él con peso xe < 1. Entonces, k(H − {e}) = k(H). Prueba. Supongamos lo contrario, es decir, k(H−{e}) < k(H). Entonces, por el Lema 5, k(H − {e}) = k(H) − 1. Dado que eliminar un solo borde no puede reducir el conjunto mínimo de arcos de retroalimentación en más que el peso del borde, l(H) − xe ≤ l(H − {e}). (9) Por otro lado, H − {e} ⊂ H, por lo que tenemos, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combinando (9) y (10), obtenemos xe ≥ 1. La contradicción surge. Por lo tanto, eliminar cualquier borde con peso inferior a la unidad de un grafo divisible óptimo no cambia k(H), el tamaño mínimo del conjunto de arcos de retroalimentación de la versión no ponderada del grafo. Ahora podemos ampliar el procedimiento para el caso indivisible en el Teorema 6, para demostrar la dificultad de la versión divisible, de la siguiente manera. Teorema 12. Encontrar la combinación óptima en las apuestas de pares divisibles es NP-duro. Prueba. Reducimos del problema del conjunto mínimo de arcos de retroalimentación no ponderados para el grafo G. Supongamos que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en el grafo de entrada H calcula los pesos de los arcos xe ∈ (0, 1] para el subgrafo óptimo H∗ de H, satisfaciendo l(H∗ ) = k(H). El procedimiento siguiente produce k(G). Establecer G := G iteraciones := 0 mientras (G tiene un conjunto de aristas no vacío) restablecer G := coincidencia divisible óptima(G) mientras (G tiene aristas con peso < 1) eliminar una arista con peso < 1 de G restablecer G estableciendo todos los pesos de las aristas a 1 restablecer G := coincidencia divisible óptima(G) fin mientras si (G tiene un conjunto de aristas no vacío) incrementar iteraciones en 1 restablecer G eliminando cualquier arista e fin si fin mientras retornar (iteraciones) Como en la demostración del Teorema 6 correspondiente al caso indivisible, calculamos k(G) eliminando iterativamente aristas y recalculando la solución divisible óptima en el subgrafo restante, hasta que todas las aristas sean eliminadas. En cada iteración del bucle while externo, el conjunto mínimo de arcos de retroalimentación se reduce en 1, por lo tanto, el número de iteraciones es igual a k(G). Queda verificar que cada iteración reduce k(G) exactamente en 1. Partiendo de un gráfico al inicio de una iteración, calculamos su subgráfico divisible óptimo. Luego seguimos eliminando un borde de peso no unitario a la vez y recalculando el subgrafo divisible óptimo, hasta que este último contenga solo bordes con peso unitario. Por el Lema 11 a lo largo de la iteración hasta ahora, el conjunto mínimo de arcos de retroalimentación del grafo no ponderado correspondiente permanece inalterado. Una vez que el oráculo devuelve un grafo G con pesos de arista unitarios, eliminar cualquier arista reduciría el conjunto mínimo de arcos de retroalimentación: de lo contrario, G no es óptimo ya que G − {e} tendría el mismo conjunto mínimo de arcos de retroalimentación pero un peso total de arista menor. Según el Lema 5, al eliminar un solo borde no se puede reducir el conjunto mínimo de arcos de retroalimentación en más de uno, por lo tanto, dado que todos los bordes tienen peso unitario, k(G) se reduce exactamente en uno. k(G) es igual al valor devuelto por el procedimiento. Por lo tanto, el problema de emparejamiento óptimo para órdenes divisibles es NP-duro. 5.3 Existencia de un Emparejamiento Sabiendo que el problema de emparejamiento óptimo es NP-duro tanto para órdenes indivisibles como divisibles en apuestas de pares, verificamos si el subastador puede identificar la existencia de un emparejamiento con facilidad. El Lema 13 establece una condición suficiente para el problema de emparejamiento con órdenes tanto indivisibles como divisibles. Lema 13. Una condición suficiente para la existencia de una coincidencia para las apuestas por parejas es que exista un ciclo C en G tal que, e∈C sea ≥ |C| − 1, donde |C| es el número de aristas en el ciclo C. Demostración. El lado izquierdo de la desigualdad (11) representa el pago total que recibe el subastador al aceptar todos los pedidos de unidades en el ciclo C en su totalidad. Debido a que la dirección de un borde representa el orden predicho de los dos nodos conectados en la clasificación final, formar un ciclo significa que hay alguna contradicción lógica en los órdenes predichos de los candidatos. Por lo tanto, cualquiera que sea el estado que se realice, no todos los bordes en el ciclo pueden ser bordes ganadores. El peor caso para el subastador corresponde a un estado donde cada borde en el ciclo recibe un pago de $1, excepto uno, con |C| − 1 siendo el pago máximo a los comerciantes. Por lo tanto, si se cumple la desigualdad (11), el subastador tiene un beneficio en el peor de los casos no negativo al aceptar los pedidos en el ciclo. Se puede demostrar que identificar un ciclo de beneficio no negativo en el peor caso en un grafo de órdenes G se puede lograr en tiempo polinómico. Lema 14. Se necesita tiempo polinómico para encontrar un ciclo en un grafo de orden G(V, E) que tenga la mayor ganancia en el peor caso, es decir, max C∈C e∈C be − (|C| − 1), donde C es el conjunto de todos los ciclos en G. Demostración. Dado que e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), encontrar el ciclo que proporciona la mayor ganancia en el peor caso en el grafo de orden original G es equivalente a encontrar el ciclo más corto en un grafo convertido H(V, E), donde H se logra estableciendo el peso para la arista e en G como (1 − be). Encontrar el ciclo más corto en el grafo H se puede hacer en tiempo polinómico recurriendo al problema de la ruta más corta. Para cualquier vértice v en V, consideramos cada vértice vecino w tal que (v, w) ∈ E. Luego encontramos el camino más corto desde w hasta v, denotado como camino(w, v). El ciclo más corto que pasa por el vértice v se encuentra eligiendo el w tal que e(v,w) + camino(w, v) se minimice. Al comparar el ciclo más corto encontrado para cada vértice, entonces podemos determinar el ciclo más corto en general para el grafo H. Debido a que el problema de la ruta más corta puede resolverse en tiempo polinómico [3], podemos encontrar la solución a nuestro problema en tiempo polinómico. Si la ganancia en el peor de los casos para el ciclo óptimo es no negativa, sabemos que existe una coincidencia en G. Sin embargo, la condición en el lema 13 no es una condición necesaria para la existencia de una coincidencia. Aunque todos los ciclos individuales en el grafo de órdenes tengan una ganancia negativa en el peor de los casos, el subastador puede aceptar múltiples ciclos entrelazados para tener una ganancia positiva en el peor de los casos. La Figura 1 muestra tal situación. Si la mejor coincidencia indivisible consiste solo en ciclos disjuntos de aristas, un algoritmo voraz natural puede encontrar el ciclo que brinda la mayor ganancia en el peor caso, eliminar sus aristas del grafo y continuar hasta que no existan más ciclos. Sin embargo, demostramos que dicho algoritmo voraz puede dar una aproximación muy pobre. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n aristas en el que el algoritmo voraz encuentra solo dos ciclos, el ciclo punteado en el centro y el único ciclo restante. Las etiquetas en las caras indican el número de aristas en el ciclo correspondiente. Lema 15. El algoritmo voraz da como máximo una aproximación de O( √ n) al número máximo de ciclos disjuntos. Prueba. Considera el gráfico en la Figura 3 que consiste en un ciclo con √ n aristas, cada una de las cuales participa en otro ciclo (disjunto de lo contrario) con √ n + 1 aristas. Supongamos que todos los pesos de las aristas son (1 − ). El número máximo de ciclos disjuntos es claramente √ n, tomando todos los ciclos con longitud √ n + 1. Debido a que los ciclos más pequeños dan un mayor beneficio en el peor de los casos, el algoritmo voraz seleccionaría primero el ciclo de longitud √ n, después del cual solo quedaría un ciclo restante de longitud n. Por lo tanto, el número total de ciclos seleccionados por el algoritmo voraz es 2 y el factor de aproximación en este caso es √ n/2. A la luz del Lema 15, se puede esperar que los algoritmos voraces den aproximaciones de √ n como máximo. Los algoritmos de aproximación para encontrar el máximo número de ciclos disjuntos por aristas han sido considerados por Krivelevich, Nutov y Yuster [11, 19]. De hecho, para el caso de grafos dirigidos, los autores demuestran que un algoritmo voraz proporciona una aproximación de a√ n [11]. Cuando la coincidencia óptima no consiste en ciclos disjuntos de bordes como en el ejemplo de la Figura 3, el algoritmo voraz que intenta encontrar ciclos individuales óptimos falla evidentemente. 6. CONCLUSIÓN Consideramos un escenario de apuestas de permutación, donde los traders apuestan por el orden final de n candidatos. Si bien es antinatural e intratable permitir a los comerciantes apostar directamente en las n! diferentes ordenaciones finales, proponemos dos lenguajes de apuestas expresivas, la apuesta de subconjunto y la apuesta de par. En un mercado de apuestas de subconjuntos, los traders pueden apostar ya sea por un subconjunto de posiciones que un candidato ocupa o por un subconjunto de candidatos que ocupan una posición específica en el orden final. La apuesta por pares permite a los traders apostar si un candidato dado ocupa un rango más alto que otro candidato dado. Examinamos el problema del subastador de emparejar órdenes sin incurrir en riesgos. Encontramos que en un mercado de apuestas de subconjuntos, un subastador puede encontrar el conjunto óptimo y la cantidad de órdenes a aceptar de manera que su beneficio en el peor de los casos se maximice en tiempo polinómico si las órdenes son divisibles. La complejidad cambia drásticamente para las apuestas en pareja. Demostramos que el problema de emparejamiento óptimo para el subastador es NP-duro para las apuestas por pares con órdenes tanto indivisibles como divisibles a través de reducciones al problema del conjunto mínimo de arcos de retroalimentación. Identificamos una condición suficiente para la existencia de una coincidencia, la cual puede ser verificada en tiempo polinómico. Se ha demostrado que un algoritmo voraz natural da una mala aproximación para las apuestas de pares indivisibles. Interesantes preguntas abiertas para nuestras apuestas de permutación incluyen la complejidad computacional del emparejamiento indivisible óptimo para las apuestas de subconjuntos y la condición necesaria para la existencia de un emparejamiento en los mercados de apuestas por pares. Estamos interesados en seguir explorando mejores algoritmos de aproximación para mercados de apuestas por pares. AGRADECIMIENTOS Agradecemos a Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin y a los miembros de Yahoo! Investiga para obtener ideas valiosas y discusiones. REFERENCIAS [1] K. J. Arrow. El papel de los valores en la asignación óptima de la capacidad de soportar riesgos. Revisión de Estudios Económicos, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson y T. A. Rietz. Resultados de una docena de años de investigación en mercados de futuros electorales. En C. A. Plott y V. Smith, editores, Manual de Resultados Económicos Experimentales (próximamente). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest y C. Stein. Introducción a los Algoritmos (Segunda Edición). MIT Press y McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham y R. Steinberg. Subastas combinatorias. MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, y T. W. Ross. Deseos, expectativas y acciones: Una encuesta sobre la formación de precios en los mercados de acciones electorales. Revista de Comportamiento Económico y Organización, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock y M. P. Wellman. Apostando al estilo booleano: Un marco de trabajo para operar en valores basado en fórmulas lógicas. Sistemas de Apoyo a la Decisión, 39(1):87-104, 2004. [7] M. Grötschel, L. Lovász y A. Schrijver. El método del elipsoide y sus consecuencias en la optimización combinatoria. Combinatorica, 1(2):169-197, 1981. [8] M. Grötschel, L. Lovász, y A. Schrijver. Algoritmos geométricos y optimización combinatoria. Springer-Verlag, Berlín Heidelberg, 1993. [9] R. D. Hanson. Diseño de mercado de información combinatoria. Sistemas de Información Frontiers, 5(1):107-119, 2003. [10] R. M. Karp. Reductibilidad entre problemas combinatorios. En la complejidad de las computaciones computacionales (Proc. Simposio, IBM Thomas J. Watson Res. Centro, Yorktown Heights, Nueva York), páginas 85-103. Plenum, Nueva York, 1972. [11] M. Krivelevich, Z. Nutov y R. Yuster. Algoritmos de aproximación para problemas de empaquetamiento de ciclos. Actas del decimosexto simposio anual ACM-SIAM sobre algoritmos discretos, páginas 556-561, 2005. [12] H. W. Kuhn. El método húngaro para el problema de asignación. Revista Cuatrimestral de Logística de Investigación Naval, 2:83-97, 1955. [13] J. Munkres. Algoritmos para los problemas de asignación y transporte. Revista de la Sociedad de Matemáticas Industriales y Aplicadas, 5(1):32-38, 1957. [14] N. Nisan. Subasta y asignación en subastas combinatorias. En Actas de la 2ª Conferencia de la ACM sobre Comercio Electrónico (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles y F. A. Nielsen. El verdadero poder de los mercados artificiales. Ciencia, 291:987-988, febrero de 2002. [16] C. Plott y S. Sunder. Eficiencia de los mercados de seguridad experimental con información privilegiada: Una aplicación de modelos de expectativas racionales. Revista de Economía Política, 90:663-98, 1982. [17] C. Plott y S. Sunder. Expectativas racionales y la agregación de información diversa en mercados de seguridad de laboratorio. Econometrica, 56:1085-1118, 1988. [18] T. Sandholm. 

Econometrica, 56:1085-1118, 1988. [18] T. Sandholm. Algoritmo para la determinación óptima del ganador en subastas combinatorias. Inteligencia Artificial, 135:1-54, 2002. [19] R. Yuster y Z. Nutov. Empaquetando ciclos dirigidos de manera eficiente. Actas del 29º Simposio Internacional sobre Fundamentos Matemáticos de la Ciencia de la Computación (MFCS), 2004. 335