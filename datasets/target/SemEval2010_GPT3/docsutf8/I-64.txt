Diseño de la organización en entornos semi-dinámicos Sachin Kamboj ∗ y Keith S. Decker Departamento de Ciencias de la Computación e Información Universidad de Delaware Newark, DE 19716 {Kamboj, decker ostsistemas multiagentes. Sin embargo, no hay la mejor manera de organizarse y todas las formas de organizar no son igualmente efectivas. Intentar optimizar una estructura organizativa depende en gran medida de las características ambientales, incluidas las características del problema, los recursos disponibles y las capacidades de los agentes. Si el entorno es dinámico, las condiciones ambientales o la estructura de la tarea problemática pueden cambiar con el tiempo. Esto impide el uso de estructuras organizativas generadas estáticas en el tiempo de diseño en tales sistemas. Por otro lado, para muchos entornos reales, los problemas tampoco son totalmente únicos: ciertas características y condiciones cambian lentamente, si es que lo hacen, y estos pueden tener un efecto importante en la creación de estructuras organizativas estables. El diseño de la organización de la organización (OSD) se ha propuesto como un enfoque para construir estructuras organizacionales adecuadas en tiempo de ejecución. Extendemos el enfoque de OSD existente para incluir dominios digitados, modelar otros recursos además de solo recursos del procesador y incorporar la robustez en la organización. Luego evaluamos nuestro enfoque contra el enfoque de la red de contratos y mostramos que nuestros agentes de OSD funcionan mejor, son más eficientes y más flexibles para los cambios en el medio ambiente. Categorías y descriptores de sujetos I.2.11 [Inteligencia artificial distribuida]: Sistemas multiagentes Algoritmos de términos generales, diseño, rendimiento, experimentación 1. Introducción En este documento, estamos principalmente interesados en el diseño organizacional de un sistema multiagente: los roles promulgados por los agentes, ∗ El autor principal es un estudiante la coordinación entre los roles y el número y la asignación de roles y recursos a los agentes individuales. El diseño organizacional se complica por el hecho de que no existe la mejor manera de organizarse y que todas las formas de organizar no son igualmente efectivas [2]. En cambio, la estructura organizativa óptima depende tanto del problema en cuestión como de las condiciones ambientales bajo las cuales el problema debe resolverse. Las condiciones ambientales pueden no ser conocidas a priori, o pueden cambiar con el tiempo, lo que impediría el uso de una estructura organizativa estática. Por otro lado, todas las instancias problemáticas y las condiciones ambientales no siempre son únicos, lo que haría ineficiente el uso de una nueva estructura organizativa a medida para cada instancia de problemas. Se ha propuesto el auto-diseño organizacional (OSD) [4, 10] como un enfoque para diseñar organizaciones en tiempo de ejecución en el que los agentes son responsables de generar sus propias estructuras organizativas. Creemos que OSD es especialmente adecuado para el escenario anterior en el que el medio ambiente es semi-dinámico, ya que los agentes pueden adaptarse a los cambios en las estructuras de tareas y las condiciones ambientales, al tiempo que pueden generar estructuras organizativas relativamente estables que explotan las características comunes entreinstancias problemáticas. En nuestro enfoque (como en [10]), definimos dos operadores para el desove y la composición del agente OSD - cuando un agente se sobrecarga, genera un nuevo agente para manejar parte de su carga/responsabilidad de tareas;Cuando un agente está inactivo durante un período prolongado de tiempo, puede decidir componer con otro agente. Usamos Tæms como la representación subyacente para nuestras solicitudes de resolución de problemas. Tæms [11] (análisis de tareas, modelado y simulación de entorno) es un marco computacional para representar y razonar sobre entornos de tareas complejos en los que se representan las tareas (problemas) utilizando estructuras de tareas jerárquicas extendidas [3]. El nodo raíz de la estructura de tareas representa el objetivo de alto nivel que el agente está tratando de lograr. Los sub-nodos de un nodo representan las subtareas y métodos que componen la tarea de alto nivel. Los nodos de la hoja están en el nivel más bajo de abstracción y representan métodos ejecutables: las acciones primitivas que los agentes pueden realizar. Los métodos ejecutables, ellos mismos, pueden tener múltiples resultados, con diferentes probabilidades y diferentes características, como calidad, costo y duración. Tæms también permite varios mecanismos para especificar variaciones y alternativas de subtareas, es decir, cada nodo en Tæms está etiquetado con una función de acumulación característica que describe cuántos o subconocentes o conjuntos de subggoals deben lograrse para lograr un objetivo de nivel superior particular. Tæms se ha utilizado para modelar muchos entornos de problemas diferentes, incluidas redes de sensores distribuidos, recopilación de información, programación de hospitales, EMS y planificación militar.[5, 6, 3, 15]. Las principales contribuciones de este documento son las siguientes: 1. Extendemos los enfoques de OSD existentes para usar Tæms como la representación del problema subyacente, que nos permite modelar y usar OSD para dominios orientados a la pena. Esto a su vez nos permite razonar sobre (1) tareas alternativas y asignaciones de roles que hacen diferentes compensaciones de calidad/costos y generan diferentes estructuras organizacionales y (2) incertidumbres en la ejecución de tareas.2. Modelamos el uso de recursos que no sean solo recursos del procesador.3. Incorporamos robustez en las estructuras organizacionales.2. Trabajo relacionado El concepto de OSD no es nuevo y ha existido desde el trabajo de Corkill y menor en el sistema DVMT [4], a pesar de que el concepto no fue completamente desarrollado por ellos. Más recientemente Dignum et.Alabama.[8] han descrito a OSD en el contexto de la reorganización de las sociedades de los agentes e intentan clasificar los diversos tipos de reorganización posibles de acuerdo con el motivo de la reorganización, el tipo de reorganización y quién es responsable de la decisión de reorganización. Según su esquema, el tipo de reorganización realizada por nuestros agentes cae en la categoría de cambios estructurales y la decisión de reorganización puede describirse como un comando compartido. Nuestra investigación se basa principalmente en el trabajo realizado por Gasser e Ishida [10], en el que usan OSD en el contexto de un sistema de producción para realizar la asignación de trabajo adaptativo y el equilibrio de carga. En su enfoque, definen dos primitivas organizacionales: composición y descomposición, que son similares a nuestras primitivas organizacionales para el desove y la composición de los agentes. La principal diferencia entre su trabajo y nuestro trabajo es que usamos Tæms como la representación subyacente para nuestros problemas, lo que permite, en primer lugar, la representación de una clase de problemas más grande y más general y, en segundo lugar, razonamiento cuantitativo sobre las estructuras de tareas. Este último también nos permite incorporar diferentes programadores de diseño a criterios [16]. Horling y Lesser [9] presentan un enfoque diferente y de arriba hacia abajo para OSD que también usa Tæms como la representación subyacente. Sin embargo, su enfoque supone un número fijo de agentes con roles designados (y fijos). OSD se usa en su trabajo para cambiar los patrones de interacción entre los agentes y los resultados en los agentes que usan diferentes subtareas o diferentes recursos para lograr sus objetivos. También extendemos el trabajo realizado por Sycara et.Al., [13] sobre la clonación del agente, que es otro enfoque para la asignación de recursos y el equilibrio de carga. En este enfoque, los autores presentan la clonación del agente como una posible respuesta a la sobrecarga del agente: si un agente detecta que está sobrecargado y que hay recursos de repuesto (no utilizado) en el sistema, el agente se clama y le da a su clon una parte de sucarga de tareas. Por lo tanto, la clonación del agente puede considerarse como el desove del agente en nuestro enfoque. Sin embargo, los dos enfoques son diferentes, ya que no hay especialización de los agentes en los anteriores, los agentes clonados son réplicas perfectas de los agentes originales y cumplen los mismos roles y responsabilidades que los agentes originales. En nuestro enfoque, por otro lado, los agentes generados están especializados en una subparte de la estructura de tareas de los agentes de desove, que ya no es responsabilidad del agente de desove. Por lo tanto, nuestro enfoque también trata con la formación explícita de la organización y la coordinación de las tareas de los agentes que no son manejadas por su enfoque. Otros enfoques para OSD incluyen el trabajo de SO y Durfee [14], quienes describen un modelo de arriba hacia abajo de OSD en el contexto de la resolución cooperativa de problemas distributivos (CDP) y Barber y Martin [1], que describen un marco de toma de decisiones adaptativoen el que los agentes pueden reorganizar los grupos de toma de decisiones cambiando dinámicamente (1) quién toma las decisiones para un objetivo particular y (2) que deben llevar a cabo estas decisiones. Este último trabajo se ocupa principalmente de las decisiones de coordinación y se puede utilizarComplementa nuestro trabajo de OSD, que trata principalmente de la asignación de tareas y recursos.3. Tarea y modelo de recursos Para fundamentar nuestra discusión sobre OSD, ahora describimos formalmente nuestra tarea y modelo de recursos. En nuestro modelo, la entrada principal al sistema de agentes múltiples (MAS) es un conjunto ordenado de solicitudes de resolución de problemas o instancias de tareas, <P1, P2, P3, ..., Pn>, donde cada solicitud de resolución de problemas, PI,se puede representar usando la tuple <ti, ai, di>. En este esquema, Ti es la estructura de tareas Tæms subyacente, ai ∈ N+ es el tiempo de llegada y di ∈ N+ es la fecha límite de la instancia de la tarea ésima 1. El MAS no tiene conocimiento previo sobre la tarea TI antes de la hora de llegada, IA. Para que el MAS acumule la calidad, la tarea TI debe completarse antes de la fecha límite, DI. Además, cada estructura de tareas subyacente, TI, puede representarse utilizando la tuple <t, τ, m, q, e, r, ρ, c>, donde: • t es el conjunto de tareas. Las tareas son nodos no hojas en una estructura de tareas Tæms y se utilizan para denotar objetivos que los agentes deben alcanzar. Las tareas tienen una función de acumulación característica (ver más abajo) y están compuestas por otras subtareas y/o métodos que deben lograrse para lograr el objetivo representado por esa tarea. Formalmente, cada tarea TJ se puede representar usando el par (QJ, SJ), donde Qj ∈ Q y Sj ⊂ (T ∪ M). Para nuestra comodidad, definimos dos subtareas de funciones (tarea): t → P (t ∪ m) y supertasks (nodo tæms): t ∪ m → p (t), que devuelven las subtareas y supertasks de un nodo Tæms respectivamente 2.• τ ∈ T, es la raíz de la estructura de tareas, es decir, el objetivo de nivel más alto que la organización está tratando de lograr. La calidad acumulada en un problema es igual a la calidad de la tarea τ.• M es el conjunto de métodos ejecutables, es decir, m = {m1, m2, ..., mn}, donde cada método, mk, se representa utilizando la distribución de resultados, {(o1, p1), (o2, p2),..., (om, pm)}. En la pareja (OL, PL), OL es un resultado y PL es la probabilidad de que la ejecución de MK resulte en el resultado OL. Además, cada resultado, OL se representa utilizando el triple (Ql, Cl, DL), donde QL es la distribución de calidad, CL es la distribución de costos y DL es la distribución de duración del resultado OL. Cada distribución discreta es en sí misma un conjunto de pares, {(n1, p1), (n2, p2), ..., (nn, pn)}, donde pi ∈ + es la probabilidad de que el resultado tenga una calidad/costo/Duración de nl ∈ N dependiendo del tipo de distribución y PM i = 1 pl = 1. • Q es el conjunto de funciones de acumulación de calidad/características (CAF). Los CAF determinan cómo un grupo de tareas acumula calidad dada la calidad acumulada por sus subtareas/métodos. Para nuestra investigación, usamos cuatro CAF: Min, Max, Sum y Exact Exact. Ver [5] para definiciones formales.• E es el conjunto de efectos (no locales). Nuevamente, ver [5] para las definiciones formales.• R es el conjunto de recursos.• ρ es una asignación de un método y recurso ejecutable a la cantidad de ese recurso necesario (por un agente) para programar/ejecutar ese método. Es decir ρ (método, recurso): M × R → N. 1 N es el conjunto de números naturales que incluyen cero y n+ es el conjunto de números naturales positivos que excluyen cero.2 P es el conjunto de potencia de SET, es decir, el conjunto de todos los subconjuntos de un conjunto del sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 1229 • C es un mapeo de un recurso a el costo de ese recurso, es decir, C (recurso): R → N+ también hacemos el siguiente conjunto de supuestos en nuestra investigación:1. Los agentes en el MAS se extraen del conjunto infinito a = {a1, a2, a3, ...}. Es decir, no asumimos un conjunto fijo de agentes, en cambio, los agentes se crean (generados) y se destruyen (combinados) según sea necesario.2. Todas las solicitudes de resolución de problemas tienen la misma estructura de tareas subyacentes, es decir, ∃t∀iti = t, donde t es la estructura de tareas del problema que el MAS está tratando de resolver. Creemos que esta suposición es válida para muchos de los problemas prácticos que tenemos en mente porque las estructuras de tareas de Tæms son básicamente planes de alto nivel para lograr un objetivo en el que los pasos necesarios para lograr el objetivo, así como las posibles situaciones de contingenciaha sido precomputado fuera de línea y representado en la estructura de tareas. Debido a que representa muchas contingencias, alternativas, características inciertas y opciones flexibles en tiempo de ejecución, la misma estructura de tareas subyacentes puede desarrollarse de manera muy diferente en instancias específicas.3. Todos los recursos son exclusivos, es decir, solo un agente puede usar un recurso en un momento dado. Además, suponemos que cada agente debe poseer el conjunto de recursos que necesita, aunque la propiedad de los recursos puede cambiar durante la evolución de la organización.4. Todos los recursos no pueden consultar.4. Auto diseño organizacional 4.1 Roles y relaciones de agentes La estructura organizacional se compone principalmente de roles y las relaciones entre los roles. Uno o más agentes pueden promulgar un papel particular y cada agente debe promulgar uno o más roles. Se pueden considerar los roles como las partes que juegan los agentes que promulgan los roles en la solución al problema y reflejan los compromisos a largo plazo hechos por los agentes en cuestión a un cierto curso de acción (que incluye la responsabilidad de la tarea, la autoridad yMecanismos para la coordinación). Las relaciones entre los roles son las relaciones de coordinación que existen entre las subpartes de un problema. En nuestro enfoque, el diseño organizacional depende directamente de la estructura de tareas y las condiciones ambientales bajo las cuales los problemas deben resolverse. Definimos un papel como un subárbol Tæms enraizado en un nodo particular. Por lo tanto, el conjunto (T ∪ M) abarca el espacio de todos los roles posibles. Tenga en cuenta que, por definición, un papel puede consistir en uno o más roles (sub) como un nodo Tæms particular puede estar compuesto por uno o más subreos. Por lo tanto, utilizaremos el rol de los términos, el nodo de tareas y la tarea indistintamente. También diferenciamos entre roles locales y administrados (no locales). Los roles locales son roles que son responsabilidad exclusiva de un solo agente, es decir, el agente en cuestión es responsable de resolver todos los subproblemas del árbol arraigado en ese nodo. Para tales roles, el agente en cuestión puede hacer una o más subtareas, únicamente a su discreción y sin consultar con ningún otro agente. Los roles administrados, por otro lado, deben coordinarse entre dos o más agentes como tales roles tendrán dos o más roles locales descendientes que son responsabilidad de dos o más agentes separados. Cualquiera de los mecanismos de coordinación existentes (como GPGP [11]) puede usarse para lograr esta coordinación. Formalmente, si el tipo de función (agente, nodo Tæms): a × (t ∪ m) → {local, administrado, sin asignar}, devuelve el tipo de responsabilidad del agente hacia el rol especificado, entonces escriba (a, r)= Local ⇐⇒ ∀ri∈Subtasks (r) tipo (a, ri) = tipo local (a, r) = gestionado ⇐⇒ [∃a1∃r1 (r1 ∈ Subtareas (r)) ∧ (tipo (a1, r1)= Administrado)] ∨ [∃a2∃a3∃r2∃r3 (a2 = a3) ∧ (r2 = r3) ∧ (r2 ∈ Subtareas (r)) ∧ (r3 ∈ Subtareas (r)) ∧ (tipo (a2, r2) = Local) ∧ (tipo (A3, R3) = local)] 4.2 Formación y adaptación de la organización para formar o adaptar su estructura organizacional, los agentes usan dos primitivas organizacionales: desove de agentes y composición. Estas dos primitivas dan como resultado un cambio en la asignación de roles a los agentes. El desove del agente es la generación de un nuevo agente para manejar un subconjunto de los roles del agente de desove. La composición del agente, por otro lado, es ortogonal al desove del agente e implica la fusión de dos o más agentes juntos: el agente combinado es responsable de promulgar todos los roles de los agentes que se fusionan. Para participar en la formación y adaptación de una organización, los agentes deben representar explícitamente y razonar sobre las asignaciones de roles. Por lo tanto, como parte de su conocimiento organizacional, cada agente mantiene una lista de los roles locales que está promulgando y los roles no locales que está administrando. Tenga en cuenta que cada agente solo tiene un conocimiento organizacional limitado y es individualmente responsable de desovar o combinar con otro agente, según sea necesario, en función de su estimación de su desempeño hasta ahora. Para ver cómo funcionan las primitivas organizacionales, primero describimos cuatro reglas que pueden considerarse como los invariantes organizacionales que siempre se mantendrán antes y después de cualquier cambio organizacional: 1. Para un papel local, todos los nodos descendientes de ese papel serán locales. Tipo (a, r) = local = ⇒ ∀ri∈Subtasks (r) tipo (a, ri) = local 2. Del mismo modo, para un papel administrado (no local), se gestionarán todos los nodos ascendentes de ese rol. Tipo (a, r) = administrado = ⇒ ∀ri∈SuperTasks (r) ∃ai (ai ∈ A) ∧ (tipo (ai, ri) = administrado) 3. Si dos roles locales promulgados por dos agentes diferentes comparten un antepasado común, ese antepasado será un papel administrado.(Tipo (a1, r1) = local) ∧ (tipo (a2, r2) = local) ∧ (a1 = a2) ∧ (r1 = r2) = ⇒ ∀ri∈ (SuperTasks (R1) ∩superTasks (R2)) ∃ai (ai ∈ A) ∧ (tipo (ai, ri) = administrado) 4. Si todos los descendientes directos de un papel son locales y la única responsabilidad de un solo agente, ese papel será un papel local.∃a∃r∀ri∈Subtasks (r) (a ∈ A) ∧ (r ∈ (t ∪ m)) ∧ (tipo (a, ri) = local) = ⇒ (tipo (a, r) = local) cuandoSe genera un nuevo agente, el agente que realiza el desove asignará uno o más de sus roles locales al agente recién generado (Algoritmo 1). Para preservar las reglas invariantes 2 y 3, el agente de desove cambiará el tipo de todos los roles ascendentes de los nodos asignados al agente recién generado de local a administrado. Tenga en cuenta que el agente de desove solo está cambiando su conocimiento organizacional local y no el conocimiento organizacional global. En el 1230 el sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) al mismo tiempo, el agente de desove está asumiendo la tarea de administrar los roles previamente locales. Del mismo modo, el agente recién generado solo sabrá de sus roles locales recién asignados. Cuando un agente (el agente de composición) decide componer con otro agente (el agente compuesto), el conocimiento organizacional del agente de composición se fusiona con el conocimiento organizacional del agente compuesto. Para hacer esto, el agente compuesto asume los roles de todas las tareas locales y administradas del agente de composición. Se tiene cuidado para preservar las reglas invariantes de la organización 1 y 4. Algoritmo 1 Spawnagent (Spawningagent): A → A 1: LocalRoles ← {r ⊆ (T ∪ M) |Tipo (SpawningAgent, R) = Local} 2: NewAgent ← CreateNewagent () 3: NewAgentRoles ← FindRolesForsPawnedAgent (LocalRoles) 4: Para el papel en NewAgentroles do 5: Tipo (NewAgent, rol) ← Local 6: Tipo (Spawninggent, rol) ← ← ←No asignado 7: PreserveRorganizationalInvariants () 8: Algoritmo de retorno NewAgent 2 FindRolesForsPawnedAgent (SpawningAgentRoles): (T ∪ M) → (T ∪ M) 1: R ← SpawningageNroles 2: Roles seleccionados ← Nil 3: para el roles en [P) - {{{φ, r}] do 4: if costo (r, roleset) <cost (r, selectionrols) luego 5: Selectedroles ← Roleset 6: Devuelve el algoritmo de roles 3 getResourCecost (roles): (t ∪ m) → 1: m ← ((((Roles ∩ m) 2: Costo ← 0 3: para recursos en r do 4: maxResourceUsage ← 0 5: para el método en m do 6: if ρ (método, recurso)> maxResourceUsage entonces 7: max ← ρ (método, recurso)8: Costo ← Costo + [C (Recurso) × MaxResourceUsage] 9: Costo de retorno 4.2.1 Asignación de roles durante el desove Una de las preguntas clave que el agente que realiza el desove debe responder es: ¿cuál de sus roles locales debe asignaral agente recién generado y ¿cuál de sus roles locales debería mantenerse para sí mismo? La responsabilidad de responder a esta pregunta recae en la función FindRolesForsPawnedAgent (), que se muestra en el Algoritmo 2 anterior. Esta función toma el conjunto de roles locales que son responsabilidad del agente de desove y devuelve un subconjunto de esos roles para la asignación al agente recién generado. Este subconjunto se selecciona en función de los resultados de una función de costo como es evidente en la línea 4 del algoritmo. Dado que el uso de diferentes funciones de costo dará como resultado diferentes estructuras organizacionales y, dado que no tenemos una razón a priori para creer que una función de costo superará a la otra, evaluamos el rendimiento de tres funciones de costo diferentes basadas en las siguientes tres heurísticas diferentes: Algoritmo 4 GetEppectedDuration (roles): (t ∪ m) → n+ 1: m ← (roles ∩ m) 2: exptduration ← 0 3: para [resultado = <(q, c, d), resultados de resultados>] en m do4: Exptoutcomeduration ← 0 5: for (n, p) en d do 6: exptoutcomeduration ← n × p 7: exptduration ← exptduration + [exptoutcomeduration × resultados de resultados] 8: return expturation asignando roles de mayor mayorprimero en los nodos más altos. Es decir, si los nodos de una estructura de tareas estuvieran numerados, comenzando desde la raíz, de manera amplia, entonces esta heurística seleccionaría el rol local del agente de desove que tenía el número más bajo y la ruptura ese nodo (al asignaruna de sus subtareas al agente recién generado). Seleccionamos esta heurística porque (a) es el más simple de implementar, (b) más rápido de ejecutar (la asignación de roles se puede hacer en tiempo constante sin la necesidad de una búsqueda a través de la estructura de tareas) y (c) tiene sentido desdeUna perspectiva humana-organización como esta heurística corresponde a dividir una organización a lo largo de líneas funcionales. Minimización de recursos totales: esta heurística intenta minimizar el costo total de los recursos que necesitan los agentes de la organización para ejecutar sus roles. Si r es las roles locales del agente de desove y R ser el subconjunto de roles que se evalúan para la asignación al agente recién generado, la función de costo para esta heurística está dada por: Costo (R, R) ← GetResourCecost (R - R)+Tiempo de ejecución de equilibrio de GetResourCost (R): esta heurística intenta asignar roles de una manera que intente garantizar que cada agente tenga una cantidad igual de trabajo por hacer. Para cada asignación de roles potencial, esta heurística funciona calculando el valor absoluto de la diferencia entre la duración esperada de sus propios roles después del desove y la duración esperada de los roles del agente recién generado. Si esta diferencia está cerca de cero, entonces los dos agentes tienen aproximadamente la misma cantidad de trabajo por hacer. Formalmente, si r es las roles locales del agente de desove y R ser el subconjunto de roles que se evalúan para la asignación al agente recién generado, entonces la función de costo para esta heurística viene dada por: Costo (R, R) ← | GetEppectedDuration (R - r) -getEppectedDuration (r) |Para evaluar estas heurísticas, realizamos una serie de experimentos que probaron el rendimiento de la organización resultante en estructuras de tareas generadas al azar. Los resultados se dan en la Sección 6. 4.3 Razones para el cambio organizacional ya que el cambio organizacional es costoso (requiere ciclos de reloj, asignación/desacuerdo de recursos, etc.) Queremos una estructura organizacional estable adecuada para la tarea y las condiciones ambientales en cuestión. Por lo tanto, deseamos cambiar la estructura organizativa solo si la estructura de tareas y/o las condiciones ambientales cambian. También para permitir que se pasen por alto los cambios temporales en las condiciones ambientales, queremos que la probabilidad de que un cambio organizacional sea inversamente proporcional al tiempo desde el último cambio organizacional. Si este tiempo es relativamente corto, los agentes todavía se están ajustando a los cambios en el entorno, por lo tanto, la probabilidad de que un agente inicie un cambio organizacional debería ser alta. Del mismo modo, si el tiempo desde el último cambio organizacional es relativamente grande, deseamos tener una baja probabilidad de cambio organizacional. Para permitir esta variación en la probabilidad de cambio organizacional, utilizamos recocido simulado para determinar la probabilidad de mantener el sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 1231 una estructura organizacional existente. Esta probabilidad se calcula utilizando la fórmula de recocido: P = E - ΔE Kt donde ΔE es la cantidad de sobrecarga/subcarga, T es el tiempo desde el último cambio organizacional y K es una constante. El mecanismo de calcular ΔE es diferente para el desove de los agentes que para la composición del agente y se describe a continuación. De esta fórmula, si T es grande, P, o la probabilidad de mantener la estructura organizativa existente es grande. Tenga en cuenta que el valor de P se limita a un cierto umbral para evitar que la organización sea demasiado lenta en su reacción al cambio ambiental. Para calcular si el desove del agente es necesario, usamos la ecuación de recocido con ΔE = 1 α ∗ Slack donde α es una constante y la holgura es la diferencia entre el tiempo total disponible para completar las tareas pendientes y la suma del tiempo esperado parafinalización de cada tarea en la cola de tareas. Además, si la cantidad de holgura es negativa, se producirá el desove de agente inmediato sin el uso de la ecuación de recocido. Para calcular si la composición del agente es necesaria, nuevamente usamos la ecuación de recocido simulada. Sin embargo, en este caso, ΔE = β ∗ tiempo de inactividad, donde β es un tiempo constante y el tiempo inactivo es la cantidad de tiempo para el cual el agente estaba inactivo. Si el agente ha estado inactivo durante un largo período de tiempo, ΔE es grande, lo que implica que P, la probabilidad de mantener la estructura organizacional existente, es baja.5. Organización y robustez Hay dos enfoques comúnmente utilizados para lograr la robustez en los sistemas multiagentes: 1. El enfoque de supervivencia [12], que implica replicar agentes de dominio para permitir que las réplicas se hagan cargo si los agentes originales falla;y 2. El enfoque ciudadano [7], que implica el uso de agentes de monitoreo especiales (llamados agentes centinela) para detectar la falla del agente e iniciar dinámicamente nuevos agentes en lugar de los fallidos. La ventaja del enfoque de supervivencia es que la recuperación es relativamente rápida, ya que las réplicas son preexistentes en la organización y pueden hacerse cargo tan pronto como se detecta una falla. Las ventajas del enfoque ciudadano son que requiere menos recursos, poca modificación para la estructura organizacional existente y el protocolo de coordinación y es más simple de implementar. Ambos enfoques se pueden aplicar para lograr la robustez en nuestros agentes de OSD y no está claro qué enfoque sería mejor. Más bien se requeriría una evaluación empírica exhaustiva de ambos enfoques. En este artículo, presentamos el enfoque ciudadano tal como ha demostrado tener un mejor desempeño que el enfoque de supervivencia en el protocolo de red del contrato, y dejar la presentación y evaluación del enfoque de supervivencia para un documento futuro. Para implementar el enfoque ciudadano, diseñamos agentes de monitoreo especiales, que periódicamente encuestan a los agentes de dominio enviándoles mensajes vivos a los que los agentes deben responder. Si un agente falla, no responderá a tales mensajes: los agentes de monitoreo pueden crear un nuevo agente y delegar las responsabilidades del agente muerto al nuevo agente. Esta delegación de responsabilidades no es trivial ya que los agentes de monitoreo no tienen acceso al estado interno de los agentes de dominio, que se compone en dos componentes: el conocimiento organizacional y la información de la tarea. El primero consiste en la información sobre los roles locales y gerenciales del agente, mientras que el segundo está compuesto por los métodos que se están programando y ejecutando y las tareas que se han delegado a otros agentes. Esta información de estado solo se puede deducir al monitorear y registrar los mensajes enviados y recibidos por los agentes de dominio. Por ejemplo, para deducir el conocimiento organizacional, los agentes de monitoreo deben realizar un seguimiento de los mensajes de desove y componer los agentes enviados por los agentes para desencadenar las operaciones de desove y composición, respectivamente. El proceso de deducción es particularmente complicado en el caso de la información de la tarea, ya que los agentes de monitoreo no tienen acceso a los horarios privados de los agentes de dominio. Los detalles están más allá del alcance de este documento.6. Evaluación Para evaluar nuestro enfoque, ejecutamos una serie de experimentos que simularon el funcionamiento tanto de los agentes de OSD como de los agentes netos por contrato en diversas estructuras de tareas con variadas tasas de llegada y plazos. Al comienzo de cada experimento, se generó una estructura de tarea TEMS aleatoria con una profundidad especificada y un factor de ramificación. Durante el curso del experimento, una serie de instancias de tareas (problemas) llegan a la organización y deben ser completadas por los agentes antes de sus plazos especificados. Para comparar directamente el enfoque OSD con el enfoque neto del contrato, cada experimento se repitió varias veces, utilizando agentes de OSD en la primera ejecución y un número diferente de agentes netos de contrato en cada ejecución posterior. Tuvimos cuidado de usar la misma estructura de tareas, tiempos de llegada de tareas, plazos de tareas y números aleatorios para cada uno de estos ensayos. Dividimos los experimentos en dos grupos: experimentos en los que el entorno era estático (tasas de llegada de tareas fijas y plazos) y experimentos en los que el entorno era dinámico (tasas de llegada variables y/o plazos). Los dos gráficos en la Figura 1 muestran el desempeño promedio de la organización OSD contra las organizaciones de redes contractuales con 8, 10, 12 y 14 agentes. Los resultados mostrados son los promedios de ejecutar 40 experimentos.20 de esos experimentos tenían un entorno estático con un tiempo de llegada de tarea fija de 15 ciclos y una ventana de fecha límite de 20 ciclos. Los 20 experimentos restantes tuvieron una tasa de llegada de tarea variable: la tasa de llegada de la tarea se cambió de 15 ciclos a 30 ciclos y de regreso a 15 ciclos después de cada 20 tareas. En todos los experimentos, las estructuras de tareas se generaron aleatoriamente con una profundidad máxima de 4 y un factor de ramificación máximo de 3. El tiempo de ejecución de todos los experimentos fue de 2500 ciclos. Probamos varias hipótesis relacionadas con el rendimiento comparativo de nuestro enfoque OSD utilizando las pruebas de rango con firma de pares de pares de Wilcoxon. El par coincidente significa que estamos comparando el rendimiento de cada sistema en el mismo conjunto de tareas aleatorias dentro de cada experimento separado. La hipótesis probada es: La organización OSD requiere menos agentes para completar un número igual o mayor de tareas en comparación con la organización neta del contrato: para probar esta hipótesis, probamos la hipótesis nula más fuerte que establece que los agentes netos por contrato completan más tareas. Esta hipótesis nula es rechazada para todas las organizaciones netas de contrato con menos de 14 agentes (estática: p <0.0003; dinámica: p <0.03). Para las grandes organizaciones de redes contractuales, el número de tareas completadas es estadísticamente equivalente al número completado por los agentes de OSD, sin embargo, el número de agentes utilizados por la organización OSD es menor: 9.59 agentes (en el caso estático) y 7.38 agentes (en elCaso dinámico) versus 14 agentes netos de contrato3. Por lo tanto, la hipótesis original, que OSD requiere menos agentes a 3, estos valores no deben interpretarse como una indicación de la escalabilidad de nuestro enfoque. Hemos probado nuestro enfoque en organizaciones con más de 300 agentes, que es significativamente mayor que el número de agentes necesarios para el tipo de aplicaciones que tenemos en mente (es decir, coreografía de servicios web, uso dinámico eficiente de la computación de la red, recopilación de información distribuida,etc.).1232 El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) Figura 1: Gráfico comparando el rendimiento promedio de la organización OSD con las organizaciones de redes contractuales (con 8, 10, 12 y 14 agentes). Las barras de error muestran las desviaciones estándar.Completa un número igual o mayor de tareas, se mantiene. Las organizaciones de OSD logran una calidad promedio igual o mayor que las organizaciones netas de contrato: la hipótesis nula es que los agentes netos por contrato logran una calidad promedio mayor. Podemos rechazar la hipótesis nula para las organizaciones de redes contractuales con menos de 12 agentes (estática: p <0.01; dinámica: p <0.05). Para organizaciones netas contractuales más grandes, la calidad promedio es estadísticamente equivalente a la lograda por OSD. Los agentes de OSD tienen un tiempo de respuesta promedio más bajo en comparación con los agentes netos de contrato: la hipótesis nula de que OSD tiene el mismo tiempo de respuesta o más alto para todas las organizaciones netas de contrato (estática: P <0.0002; dinámica: p <0.0004). Los agentes de OSD envían menos mensajes que los agentes netos de contrato: la hipótesis nula de que OSD envía lo mismo o más mensajes es rechazado para todas las organizaciones netas de contrato (p <.0003 en todos los casos, excepto 8 agentes netos por contrato en un entorno estático donde p <0.02) Por lo tanto, como lo demuestran las pruebas anteriores, nuestros agentes funcionan mejor que los agentes netos por contrato, ya que completan un mayor número de tareas, logran una mayor calidad y también tienen un tiempo de respuesta y una sobrecarga de comunicación más bajas. Estos resultados tienen sentido intuitivo dado nuestros objetivos para el enfoque OSD. Esperábamos que las organizaciones de OSD tuvieran un tiempo de respuesta promedio más rápido y enviaran menos mensajes porque los agentes de la organización OSD no están perdiendo tiempo y mensajes que envían solicitudes de ofertas y respondiendo a las ofertas. La calidad adquirida en las tareas depende directamente de los criterios/apuesta heurística TF MR RAND Número de agentes 572 567 100 139 No-ORG-Changes 641 51 5 177 Total-Messages-Sent 586 499 13 11 Coste de recursos 346 418 337 66Tareas Completadas 427 560 154 166 Qualidad promedio 367 492 298 339 Tiempo de respuesta promedio 356 321 370 283 RUNE ADRUME 543 323 74 116 Tiempo promedio de vigilancia 560 314 74 126 Tabla 1: El número de veces que cada heurística realizó realizados realizadoslo mejor o estadísticamente equivalente a lo mejor para cada uno de los criterios de rendimiento. Clave heurística: BET es equilibrar el tiempo de ejecución, TF es el más alto primero, MR está minimizando los recursos y Rand es una estrategia de asignación aleatoria, en la que cada nodo Tæms tiene una probabilidad uniforme de ser seleccionado para la asignación.Número de tareas completadas, por lo tanto, cuanto más se completen el número de tareas, mayor calidad promedio. Los resultados de la prueba de la primera hipótesis fueron un poco más sorprendentes. Parece que debido a la ineficiencia inherente del protocolo neto del contrato en la licitación para cada instancia de tareas, se necesita un mayor número de agentes para completar un número igual de tareas. A continuación, evaluamos el rendimiento de las tres heurísticas para asignar tareas. Algunos experimentos preliminares (que no se informan aquí debido a limitaciones de espacio) demostraron la falta de un claro ganador entre las tres heurísticas para la mayoría de los criterios de rendimiento que evaluamos. Sospechamos que este es el caso porque diferentes heurísticas son mejores para diferentes estructuras de tareas y condiciones ambientales, y dado que cada experimento comienza con una estructura de tareas aleatorias diferente, no pudimos encontrar una estrategia de asignación que siempre dominara al otro para todos los criterios de rendimiento. Para determinar qué heurística realiza el mejor, dado un conjunto de estructuras de tareas, condiciones ambientales y criterios de rendimiento, realizamos una serie de experimentos que se controlaron utilizando las siguientes cinco variables: • La profundidad de la estructura de la tarea varió de 3 a 5.• El factor de ramificación se varió de 3 a 5. • La probabilidad de que cualquier nodo de tarea dado que tenga un CAF min se varió de 0.0 a 1.0 en incrementos de 0.2. La probabilidad de que cualquier nodo tuviera un CAF de suma se modificó a su vez para garantizar que las probabilidades suman 14.• La tasa de llegada: de 10 a 40 ciclos en incrementos de 10. • La fecha límite: de 5 a 15 en incrementos de 5. Cada experimento se repitió 20 veces, con una nueva estructura de tareas generada cada vez: estos 20 experimentos formaron un conjunto experimental. Por lo tanto, todos los experimentos en un conjunto experimental tenían los mismos valores para las variables exógenas que se usaron para controlar el experimento. Tenga en cuenta que se utilizó un entorno estático en cada uno de estos experimentos, ya que queríamos ver el rendimiento de la tasa de llegada y la floja de la fecha límite en cada una de las tres heurísticas. También los resultados de cualquier experimento en el que la organización OSD consistiera en un solo agente de agente seleccionado de los resultados. Del mismo modo, 4 Dado que nuestro análisis preliminar lideró es creer que el número de max y exactamente un CAFS en una estructura de tareas tienen un efecto mínimo en el rendimiento de las estrategias de asignación que se evalúan, establecemos las probabilidades del máximo y exactamente un CAFS0 Para reducir la explosión combinatoria del diseño experimental factorial completo. El sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 1233 experimentos en los que las estructuras de tareas generadas eran insatisfactorias (dadas las limitaciones de la fecha límite), se eliminaron de los resultados finales. Si algún conjunto experimental tenía más de 15 experimentos, así eliminado, se ignoró todo el conjunto para realizar la evaluación. La evaluación final se realizó en 673 conjuntos experimentales. Probamos el potencial de estas tres heurísticas sobre los siguientes criterios de rendimiento: 1. El número promedio de agentes utilizados.2. El número total de cambios organizacionales.3. Los mensajes totales enviados por todos los agentes.4. El costo total de recursos de la organización.5. El número de tareas completadas.6. La calidad promedio acumulada. La calidad promedio se define como la calidad total acumulada durante la ejecución experimental dividida por la suma del número de tareas completadas y el número de tareas falló.7. El tiempo de respuesta promedio de la organización. El tiempo de respuesta de una tarea se define como la diferencia entre el momento en que cualquier agente en la organización comienza a trabajar en la tarea (la hora de inicio) y el momento en que se generó la tarea (el tiempo de generación). Por lo tanto, el tiempo de respuesta es equivalente al tiempo de espera. Para las tareas que nunca se intentan/inician, el tiempo de respuesta se establece en el tiempo de ejecución final menos el tiempo de generación.8. El tiempo de ejecución promedio de las tareas intentadas por la organización. Este tiempo se define como la diferencia entre el momento en que la tarea completó o falló y la hora de inicio. Para las tareas que nunca se declararon, esta vez se establece en cero.9. El tiempo de respuesta se define como la suma del tiempo de respuesta y el tiempo de ejecución de una tarea. Excepto por el número de tareas completadas y la calidad promedio acumulada, los valores más bajos para los diversos criterios de rendimiento indican un mejor rendimiento. Nuevamente realizamos las pruebas de rango firmado de pares de par de pares de Wilcoxon en los experimentos en cada uno de los conjuntos experimentales. La hipótesis nula en cada caso fue que no hay diferencia entre el par de heurísticas para los criterios de rendimiento bajo consideración. Estábamos interesados en los casos en los que podríamos rechazar la hipótesis nula con una confianza del 95% (P <0.05). Notamos la cantidad de veces que una heurística funcionó mejor o estaba en un grupo que funcionó estadísticamente mejor que el resto. Estos recuentos se dan en las Tablas 1 y 2. El número de conjuntos experimentales en los que cada heurística realizó el mejor o estadísticamente equivalente a los mejores se muestra en la Tabla 1. La ruptura de estos números en (1) el número de veces que cada heurística funcionó mejor que todas las demás heurísticas y (2) el número de veces que cada heurística era estadísticamente equivalente a otro grupo de heurística, todos los cuales funcionaban mejor, IS.se muestra en la Tabla 2. Ambas tablas nos permiten obtener información importante sobre el rendimiento de las tres heurísticas. Particularmente interesantes fueron los siguientes resultados: • Mientras que el tiempo de ejecución de equilibrio (BET) utilizó el menor número de agentes en el mayor número de conjuntos experimentales (572), en la mayoría de estos casos (337 conjuntos experimentales) fue estadísticamente equivalente primero (TF (TF TF). Cuando estas dos heurísticas no funcionaron por igual, hubo una división casi uniforme entre el número de conjuntos experimentales en los que uno superó al otro. Creemos que este fue el caso porque BET siempre bifurca a los agentes en dos agentes que tienen una carga de tareas más o menos igual. Esto a menudo resulta en organizaciones que tienen una Figura 2: Graph que demuestra la robustez del enfoque ciudadano. La línea de base muestra el número de tareas completadas en ausencia de cualquier falla.Número de agentes, ninguno de los cuales es lo suficientemente pequeño como para combinar en un agente más grande. Con TF, por otro lado, un gran agente puede generar sucesivamente agentes más pequeños hasta que los agentes desovados son lo suficientemente pequeños como para completar sus tareas antes de los plazos, esto a menudo resulta en organizaciones con un número impar de agentes que son menores que losutilizado por BET.• Como se esperaba, BET logró el menor número de cambios organizacionales en el mayor número de conjuntos experimentales. De hecho, fue más de diez veces más bueno que su segundo mejor competidor (TF). Esto muestra que si los agentes son conscientes en su asignación de tareas inicial, existe una menor necesidad de cambio organizacional más adelante, especialmente para entornos estáticos.• Un resultado particularmente interesante, pero fácilmente explicable, fue el del tiempo de respuesta promedio. ¡Descubrimos que la heurística de recursos de minimización (MR) funcionó mejor cuando se trataba de minimizar el tiempo de respuesta promedio! Esto puede explicarse por el hecho de que el Sr. Heuristic es extremadamente codicioso y prefiere desovar pequeños agentes que tienen una pequeña huella de recursos (para minimizar el aumento total en el costo de los recursos para la organización en el momento del desove). Mientras que la mayoría de estos pequeños agentes pueden componer con otros agentes con el tiempo, la presencia de un solo agente pequeño es suficiente para reducir el tiempo de respuesta. De hecho, la heurística del Sr. no es la heurística más efectiva cuando se trata de minimizar el costo de recursos de la organización; de hecho, solo supera una asignación de tarea/recursos aleatorias. Creemos que esto se debe en parte a la naturaleza codiciosa de esta heurística y en parte debido al hecho de que todas las operaciones de desove y composición solo usan información local. Creemos que usar información no local sobre la asignación de recursos podría ayudar a tomar mejores decisiones, algo que planeamos ver en el futuro. Finalmente evaluamos el desempeño del enfoque de la robustez de los ciudadanos aplicados a nuestro mecanismo OSD (Figura 2). Como se esperaba, a medida que aumenta la probabilidad de falla, el número de agentes que fallan durante una ejecución también aumenta. Esto da como resultado una ligera disminución en el número de tareas completadas, lo que puede explicarse por el hecho de que cada vez que un agente falla, pierde el trabajo que estaba haciendo en ese momento. El agente recién creado que se complete para los 5 fallidos para esta discusión, los pequeños agentes son agentes que tienen una baja duración esperada para sus roles locales (calculado por el algoritmo 4).1234 El sexto intl. Conf.sobre agentes autónomos y sistemas de múltiples agentes (AAMAS 07) Criterios/Heuristic BET TF MR RAND BET+TF BET+RAND MR+RAND TF+MR BET+TF+MR Todos los agentes 94 88 3 7 337 2 0 0 12 85No-ORG-Changes 480 0 0 0 29 16 113 0 0 0 0 5 Messages Total-Sent 170 85 0 2 399 1 0 0 7 5 Coste de recursos 26 100 170 42 167 0 7 6 128 15 Tasks Completed 77 197 4 28 28184 1 3 9 36 99 Calidad promedio 38 147 26 104 76 0 11 11 34 208 Tiempo de respuesta promedio 104 74 162 43 31 20 16 8 7 169 RUNTIME promedio 322 110 0 12 121 13 1 1 69 Promedio de cambio-Time 318 94 1 11 125 26 1 0 7 64 Tabla 2: Tabla que muestra el número de veces que cada heurística individual realizó lo mejor y el número de veces que un cierto grupo de heurísticas estadísticamente equivalentes tuvo el mejor rendimiento. Solo se muestran las agrupaciones heurísticas más interesantes. Todo muestra el número de conjuntos experimentales en los que no hubo diferencia estadística entre las tres heurísticas y una estrategia de asignación aleatoria, uno debe rehacer el trabajo, perdiendo así un tiempo precioso que podría no estar disponible cerca de una fecha límite. Como parte de nuestra futura investigación, deseamos, en primer lugar, evaluar el enfoque de supervivencia de la robustez. El enfoque de supervivencia podría ser mejor que el enfoque ciudadano para las probabilidades más altas de la falla del agente, ya que los agentes replicados pueden estar procesando las estructuras de tareas en paralelo y pueden tomar el momento en que los agentes originales fallan, ahorrando el tiempo en torno a los plazos ajustados. Además, creemos firmemente que la estructura organizacional óptima puede variar, dependiendo de la probabilidad de falla y el nivel deseado de robustez. Por ejemplo, una forma de lograr un mayor nivel de robustez en el enfoque de supervivencia, dado un gran número de fallas de agentes, sería relajar los plazos de tareas. Sin embargo, tal relajación daría como resultado que el sistema use menos agentes para conservar los recursos, lo que a su vez tendría un efecto perjudicial en la robustez. Por lo tanto, con este fin, hemos comenzado a explorar las propiedades de robustez de las estructuras de tareas y las formas en que el diseño organizacional puede modificarse para tener en cuenta tales propiedades.7. Conclusión En este documento, hemos presentado un enfoque de organización en el tiempo de ejecución en el que los agentes usan el auto-diseño organizacional para crear una estructura organizativa adecuada. También hemos evaluado el desempeño de las organizaciones generadas por los agentes que siguen nuestro enfoque con la formación de la organización a medida que tiene lugar en el protocolo NET del contrato y hemos demostrado que nuestro enfoque es mejor que el enfoque neto del contrato como es evidente por la mayor cantidad de tareasCompletado, mayor calidad alcanzada y tiempo de respuesta más bajo. Finalmente, probamos el rendimiento de tres heurísticas de asignación de recursos diferentes sobre diversas métricas de rendimiento y también evaluamos la solidez de nuestro enfoque.8. Referencias [1] K. S. Barber y C. E. Martin. Reorganización dinámica de grupos de toma de decisiones. En Agentes 01, páginas 513-520, Nueva York, NY, EE. UU., 2001. [2] K. M. Carley y L. Gasser. Teoría de la organización computacional. En G. Wiess, editor, Sistemas Multiagentes: un enfoque moderno para la inteligencia artificial distribuida, páginas 299-330, MIT Press, 1999. [3] W. Chen y K. S. Decker. El análisis de la coordinación en una aplicación del sistema de información: servicios médicos de emergencia. En Notas de conferencia en informática (LNC), número 3508, páginas 36-51. Springer-Verlag, mayo de 2005. [4] D. Corkill y V. Lesser. El uso del control de nivel meta para la coordinación en una red de resolución de problemas distribuida. Actas de la Octava Conferencia Internacional Conjunta sobre Inteligencia Artificial, páginas 748-756, agosto de 1983. [5] K. S. Decker. Análisis centrado en el medio ambiente y diseño de mecanismos de coordinación. Doctor.Tesis, Departamento de Comp. Science, Universidad de Massachusetts, Amherst, mayo de 1995. [6] K. S. Decker y J. Li. Coordinar recursos mutuamente excluyentes utilizando GPGP. Agentes autónomos y sistemas de múltiples agentes, 3 (2): 133-157, 2000. [7] C. Dellarocas y M. Klein. Una evaluación experimental de los servicios de manejo de fallas independientes del dominio en sistemas abiertos de múltiples agentes. Actas de la Conferencia Internacional sobre Sistemas de Multi-Agentes (ICMAS-2000), julio de 2000. [8] V. Dignum, F. Dignum y L. Sonenberg. Hacia la reorganización dinámica de las sociedades de los agentes. En Actas de CEAS: Taller sobre coordinación en sociedades de agentes emergentes en ECAI, páginas 22-27, Valencia, España, septiembre de 2004. [9] B. Horling, B. Benyo y V. Lesser. Uso de autodiagnóstico para adaptar las estructuras organizacionales. En Agentes 01, páginas 529-536, Nueva York, NY, EE. UU., 2001. ACM Press.[10] T. Ishida, L. Gasser y M. Yokoo. Organización Autodeseño de los sistemas de producción distribuidos. Transacciones IEEE sobre conocimiento e ingeniería de datos, 4 (2): 123-134, 1992. [11] V. R. Lesser et.Alabama. Evolución del marco de coordinación independiente del dominio GPGP/Tæms. Agentes autónomos y sistemas de múltiples agentes, 9 (1-2): 87-143, 2004. [12] O. Marin, P. Sens, J. Briot y Z. Adivesum. Hacia la tolerancia adaptativa de fallas para sistemas distribuidos de agentes múltiples. Actas de Ersads 2001, mayo de 2001. [13] O. Shehory, K. Sycara, et.Alabama. Clonación de agentes: un enfoque para la movilidad del agente y la asignación de recursos. IEEE Communications Magazine, 36 (7): 58-67, 1998. [14] Y. Entonces y E. Durfee. Un modelo de autoinicio organizacional para el cambio organizacional. En el taller de AAAI-93 sobre IA y teorías de grupos y organizaciones, páginas 8-15, Washington, D.C., julio de 1993. [15] T. Wagner. Asistentes de apoyo a la decisión de coordinación (coordinadores). Informe técnico 04-29, BAA, 2004. [16] T. Wagner y V. Lesser. Programación de diseño a criterios: control de agentes en tiempo real. Proc.del Simposio de primavera AAAAI 2000 sobre sistemas autónomos en tiempo real, 89-96. El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 1235