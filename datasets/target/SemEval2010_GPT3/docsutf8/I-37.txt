Un marco para el aprendizaje automático distribuido basado en agentes y la minería de datos Jan Tozicka Laboratorio Gerstner Universidad Técnica Checa Technick«a 2, Praga, 166 27 República Checa tozicka@labe.felk.cvut.cz Michael Rovatsos Escuela de Informática Universidad de Edimburgo Edimburgo EH8 9LE Reino Unido mrovatso@inf.ed.ac.uk Michal Pechoucek Laboratorio Gerstner Universidad Técnica Checa Technick«a 2, Praga, 166 27 República Checa pechouc@labe.felk.cvut.cz RESUMEN Este artículo propone un marco para el aprendizaje automático distribuido basado en agentes y la minería de datos, que se fundamenta en (i) el intercambio de descripciones a nivel meta de procesos de aprendizaje individuales entre agentes y (ii) el razonamiento en línea sobre el éxito del aprendizaje y el progreso del aprendizaje por parte de los agentes de aprendizaje. Presentamos una arquitectura abstracta que permite a los agentes intercambiar modelos de sus procesos de aprendizaje locales e introduce una serie de métodos diferentes para integrar estos procesos. Esto nos permite aplicar mecanismos de interacción de agentes existentes a tareas distribuidas de aprendizaje automático, aprovechando así los potentes métodos de coordinación disponibles en la computación basada en agentes, y permite a los agentes participar en la meta-razonamiento sobre sus propias decisiones de aprendizaje. Aplicamos esta arquitectura a una aplicación de agrupamiento distribuido del mundo real para ilustrar cómo el marco conceptual puede ser utilizado en sistemas prácticos en los que diferentes aprendices pueden estar utilizando diferentes conjuntos de datos, hipótesis y algoritmos de aprendizaje. Informamos sobre los resultados experimentales obtenidos utilizando este sistema, revisamos trabajos relacionados sobre el tema y discutimos posibles extensiones futuras al marco de trabajo. Categorías y Descriptores de Asignaturas de la Teoría de Términos Generales I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida-Sistemas Multiagente 1. En las áreas de aprendizaje automático y minería de datos (cf. [14, 17] para revisiones), se ha reconocido desde hace tiempo que la paralelización y la distribución pueden utilizarse para mejorar el rendimiento del aprendizaje. Se han sugerido varias técnicas al respecto, que van desde la integración a nivel bajo de hipótesis de aprendizaje derivadas de forma independiente (por ejemplo, combinando diferentes clasificadores para tomar decisiones de clasificación óptimas [4, 7], promediando modelos de clasificadores bayesianos [8], o métodos basados en consenso para integrar diferentes agrupamientos [11]), hasta la combinación a nivel alto de resultados de aprendizaje obtenidos por agentes de aprendizaje heterogéneos utilizando meta-aprendizaje (por ejemplo, [3, 10, 21]). Todas estas aproximaciones asumen la homogeneidad del diseño de los agentes (todos los agentes aplican el mismo algoritmo de aprendizaje) y/o los objetivos de los agentes (todos los agentes intentan resolver cooperativamente un único problema global de aprendizaje). Por lo tanto, las técnicas que sugieren no son aplicables en sociedades de aprendices autónomos interactuando en sistemas abiertos. En tales sistemas, los aprendices (agentes) pueden no ser capaces de integrar sus conjuntos de datos o resultados de aprendizaje (debido a diferentes formatos y representaciones de datos, algoritmos de aprendizaje o restricciones legales que prohíben dicha integración [11]) y no siempre se puede garantizar que interactúen de manera estrictamente cooperativa (el conocimiento descubierto y los datos recopilados podrían ser activos económicos que solo deben compartirse cuando se considere rentable; los agentes maliciosos podrían intentar influir negativamente en los resultados de aprendizaje de otros, etc.). Ejemplos de aplicaciones de este tipo abundan. Muchos dominios de aprendizaje distribuido implican el uso de datos sensibles y prohíben el intercambio de estos datos (por ejemplo, el intercambio de datos de pacientes en el diagnóstico distribuido de tumores cerebrales) - sin embargo, pueden permitir el intercambio de hipótesis de aprendizaje locales entre diferentes aprendices. En otras áreas, los datos de entrenamiento podrían tener un valor comercial, por lo que los agentes solo los pondrían a disposición de otros si esos agentes pudieran ofrecer algo a cambio (por ejemplo, en la vigilancia y seguimiento de barcos remotos, donde las diferentes agencias involucradas son proveedores de servicios comerciales). Además, los agentes podrían tener un interés propio en afectar negativamente el rendimiento de aprendizaje de otros agentes. Un ejemplo de esto es el de agentes fraudulentos en eBay que pueden intentar evitar que los agentes de aprendizaje de reputación construyan modelos útiles para detectar fraudes. Ver a los estudiantes como agentes autónomos y autodirigidos es la única perspectiva adecuada que se puede adoptar al modelar estos entornos de aprendizaje distribuido: la metáfora del agente se convierte en una necesidad en contraposición a las preferencias por la escalabilidad, la selección dinámica de datos, la interactividad [13], que también se pueden lograr a través de la distribución y paralelización (no de agentes) en principio. A pesar de la autonomía y auto-dirección de los agentes de aprendizaje, muchos de estos sistemas muestran una superposición suficiente en términos de objetivos de aprendizaje individuales para que la cooperación beneficiosa sea posible si existiera un modelo de interacción flexible entre los aprendices autónomos que permitiera a los agentes 1. intercambiar información sobre diferentes aspectos de su propio mecanismo de aprendizaje en diferentes niveles de detalle sin ser obligados a revelar información privada que no debería ser divulgada, 2. decidir en qué medida desean compartir información sobre sus propios procesos de aprendizaje y utilizar la información proporcionada por otros aprendices, y 3. razonar sobre cómo esta información puede ser mejor utilizada para mejorar su propio rendimiento de aprendizaje. Nuestro modelo se basa en la idea simple de que los aprendices autónomos deben mantener meta-descripciones de sus propios procesos de aprendizaje (ver también [3]) para poder intercambiar información y razonar sobre ellos de manera racional (es decir, con el objetivo general de mejorar sus propios resultados de aprendizaje). Nuestra hipótesis es muy simple: Si podemos idear una vista lo suficientemente general y abstracta para describir los procesos de aprendizaje, podremos utilizar toda la gama de métodos para (i) razonamiento racional y (ii) comunicación y coordinación ofrecidos por la tecnología de agentes para construir agentes de aprendizaje autónomos efectivos. Para probar esta hipótesis, introducimos una arquitectura abstracta (sección 2) e implementamos una instancia simple y concreta de la misma en un dominio del mundo real (sección 3). Informamos sobre los resultados empíricos obtenidos con este sistema implementado que demuestran la viabilidad de nuestro enfoque (sección 4). Finalmente, revisamos el trabajo relacionado (sección 5) y concluimos con un resumen, discusión de nuestro enfoque y perspectivas para trabajos futuros sobre el tema (sección 6). 2. Nuestra arquitectura abstracta se basa en proporcionar descripciones formales (a nivel meta) de los procesos de aprendizaje, es decir, representaciones de todos los componentes relevantes de la maquinaria de aprendizaje utilizada por un agente de aprendizaje, junto con información sobre el estado del proceso de aprendizaje. Para asegurar que este marco sea lo suficientemente general, consideramos la siguiente descripción general de un problema de aprendizaje: Dados los datos D ⊆ D tomados de un espacio de instancias D, un espacio de hipótesis H y una función objetivo c ∈ H1 (desconocida), derivar una función h ∈ H que aproxime c lo mejor posible según alguna medida de rendimiento g : H → Q donde Q es un conjunto de posibles niveles de rendimiento de aprendizaje. Al requerir esto, estamos asegurando que el problema de aprendizaje pueda resolverse en principio utilizando el espacio de hipótesis dado. Esta definición muy amplia incluye varios componentes de un problema de aprendizaje para los cuales se pueden proporcionar especificaciones más concretas si queremos ser más precisos. Para los casos de clasificación y agrupamiento, por ejemplo, podemos especificar lo anterior de la siguiente manera: Los datos de aprendizaje pueden describirse en ambos casos como D = ×n i=1[Ai] donde [Ai] es el dominio del i-ésimo atributo y el conjunto de atributos es A = {1, . . . , n}. Para el espacio de hipótesis obtenemos H ⊆ {h|h : D → {0, 1}} en el caso de clasificación (es decir, un subconjunto del conjunto de todos los clasificadores posibles, cuya naturaleza depende de la expresividad del algoritmo de aprendizaje utilizado) y H ⊆ {h|h : D → N, h es total con rango {1, . . . , k}} en el caso de agrupamiento (es decir, un subconjunto de todos los conjuntos de asignaciones de clúster posibles que asignan puntos de datos a un número finito de clústeres numerados del 1 al k). Para la clasificación, g podría definirse en términos de los números de falsos negativos y falsos positivos con respecto a algún conjunto de validación V ⊆ D, y el agrupamiento podría utilizar diversas medidas de validez de clúster para evaluar la calidad de una hipótesis actual, de modo que Q = R en ambos casos (pero se pueden imaginar otros conjuntos de niveles de calidad de aprendizaje). A continuación, introducimos una noción de paso de aprendizaje, que impone una estructura básica uniforme en todos los procesos de aprendizaje que se supone intercambiarán información utilizando nuestro marco de trabajo. Para esto, asumimos que a cada aprendiz se le presenta un conjunto finito de datos D = d1, . . . dk en cada paso (este es un conjunto ordenado para expresar que el orden en el que se utilizan las muestras para el entrenamiento es importante) y emplea una función de entrenamiento/actualización f : H × D∗ → H que actualiza h dado una serie de muestras d1, . . . , dk. En otras palabras, un paso de aprendizaje siempre consiste en aplicar la función de actualización a todas las muestras en D exactamente una vez. Definimos un paso de aprendizaje como una tupla l = D, H, f, g, h donde requerimos que H ⊆ H y h ∈ H. La intuición detrás de esta definición es que cada paso de aprendizaje describe completamente una iteración de aprendizaje como se muestra en la Figura 1: en el paso t, el aprendiz actualiza la hipótesis actual ht−1 con los datos Dt, y evalúa la nueva hipótesis resultante ht de acuerdo con la medida de rendimiento actual gt. Un paso de aprendizaje como este es equivalente a los siguientes pasos de computación: 1. entrenar el algoritmo en todas las muestras en D (una vez), es decir, calcular ft(ht−1, Dt) = ht, 2. calcular la calidad gt de la hipótesis resultante gt(ht). Denotamos el conjunto de todos los posibles pasos de aprendizaje como L. Para mayor facilidad en la notación, denotamos los componentes de cualquier l ∈ L como D(l), H(l), f(l) y g(l), respectivamente. La razón por la que las especificaciones de pasos de aprendizaje utilizan un subconjunto H de H en lugar de H mismo es que los aprendices a menudo tienen conocimiento explícito sobre qué hipótesis son efectivamente descartadas por f dado h en el futuro (si este no es el caso, aún podemos establecer H = H). Un proceso de aprendizaje es una secuencia finita y no vacía l = l1 → l2 → . . . → ln de pasos de aprendizaje tal que ∀1 ≤ i < n .h(li+1) = f(li)(h(li), D(li)) El Sexto Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 679 función de entrenamiento ht medida de rendimiento calidad de solución qtgtft conjunto de entrenamiento Dt hipótesis hipótesis ht−1 Figura 1: Un modelo genérico de un paso de aprendizaje, es decir, el único requisito que hace la relación de transición →⊆ L × L es que la nueva hipótesis sea el resultado de entrenar la antigua hipótesis con todos los datos de muestra disponibles que pertenecen al paso actual. Denotamos el conjunto de todos los posibles procesos de aprendizaje como L (ignorando, para facilitar la notación, el hecho de que este conjunto depende de H, D y los espacios de posibles funciones de entrenamiento y evaluación f y g). La traza de rendimiento asociada con un proceso de aprendizaje l es la secuencia q1, . . . , qn ∈ Qn donde qi = g(li)(h(li)), es decir, la secuencia de valores de calidad calculados por las medidas de rendimiento de los pasos individuales de aprendizaje en las respectivas hipótesis. Tales especificaciones permiten a los agentes proporcionar una autodescripción de su proceso de aprendizaje. Sin embargo, en la comunicación entre agentes de aprendizaje, a menudo es útil proporcionar solo información parcial sobre el proceso de aprendizaje interno en lugar de sus detalles completos, por ejemplo, al publicitar esta información para entrar en negociaciones de intercambio de información con otros. Para este propósito, asumiremos que los aprendices describen su estado interno en términos de conjuntos de procesos de aprendizaje (en el sentido de elección disyuntiva) que llamamos descripciones de procesos de aprendizaje (LPDs) en lugar de dar descripciones precisas sobre un único proceso de aprendizaje concreto. Esto nos permite describir las propiedades de un proceso de aprendizaje sin especificar exhaustivamente sus detalles. Como ejemplo, el conjunto {l ∈ L|∀l = l[i].D(l) ≤ 100} describe todos los procesos que tienen un conjunto de entrenamiento de como máximo 100 muestras (donde todos los demás elementos son arbitrarios). Asimismo, {l ∈ L|∀l = l[i].D(l) = {d}} es equivalente a simplemente proporcionar información sobre una única muestra {d} y ningún otro detalle sobre el proceso (esto puede ser útil para modelar, por ejemplo, datos recibidos del entorno). Por lo tanto, utilizamos ℘(L), que es el conjunto de todos los LPDs, como base para diseñar lenguajes de contenido para la comunicación en los protocolos que especificamos a continuación. En la práctica, el lenguaje de contenido real elegido estará, por supuesto, más restringido y permitirá solo que se especifiquen de manera compacta un tipo especial de subconjuntos de L, y su elección será crucial para las interacciones que pueden ocurrir entre los agentes de aprendizaje. Para nuestros ejemplos a continuación, simplemente asumimos la enumeración explícita de todos los posibles elementos de los respectivos conjuntos y espacios de funciones (D, H, etc.) extendidos por el uso de símbolos comodín ∗ (de modo que nuestro segundo ejemplo anterior se convertiría en ({d}, ∗, ∗, ∗, ∗)). 2.1 Agentes de aprendizaje En nuestro marco, un agente de aprendizaje es esencialmente una función de metarazonamiento que opera sobre información acerca de procesos de aprendizaje y está situado en un entorno cohabitado por otros agentes de aprendizaje. Esto significa que no solo es capaz de controlar a nivel meta cómo aprender, sino que al hacerlo puede tener en cuenta la información proporcionada por otros agentes o el entorno. Aunque son posibles casos puramente cooperativos o híbridos, para los propósitos de este documento asumiremos que los agentes son puramente egoístas, y que aunque pueda haber un potencial para la cooperación considerando cómo los agentes pueden mejorar mutuamente el rendimiento de aprendizaje de cada uno, no hay un mecanismo global que pueda hacer cumplir dicho comportamiento cooperativo. Formalmente hablando, la función de aprendizaje de un agente es una función que, dada un conjunto de historias de procesos de aprendizaje previos (propios y potencialmente de procesos de aprendizaje sobre los cuales otros agentes han proporcionado información) y produce un paso de aprendizaje que es su próxima acción de aprendizaje. En el sentido más general, el proceso de actualización interna de aprendizaje de nuestros agentes de aprendizaje puede verse como una función λ: ℘(L) → L × ℘(L) que toma un conjunto de historias de aprendizaje propias y de otros como entradas y calcula un nuevo paso de aprendizaje a ejecutar mientras actualiza el conjunto de historias de procesos de aprendizaje conocidos (por ejemplo, agregando la nueva acción de aprendizaje a nuestro propio proceso de aprendizaje y dejando intacta toda la información sobre los procesos de aprendizaje de los demás). Ten en cuenta que en λ({l1, . . . ln}) = (l, {l1, . . . ln }) algunos elementos li del conjunto de procesos de aprendizaje de entrada pueden ser descripciones de nuevos datos de aprendizaje recibidos del entorno. La función λ puede ser elegida libremente por el agente siempre y cuando se cumpla un requisito, a saber, que los datos de aprendizaje que se estén utilizando siempre provengan de lo que se ha observado previamente. De manera más formal, ∀{l1, . . . ln} ∈ ℘(L).λ({l1, . . . ln}) = (l, {l1, . . . ln }) ⇒ „ D(l) ∪ [ l =li[j] D(l ) « ⊆ [ l =li[j] D(l ) es decir, lo que sea que λ genere como un nuevo paso de aprendizaje y un conjunto actualizado de historias de aprendizaje, no puede inventar nuevos datos; tiene que trabajar con las muestras que han estado disponibles anteriormente en el proceso a través del entorno o de otros agentes (y, por supuesto, puede volver a entrenar con datos previamente utilizados). El objetivo del agente es producir un paso de aprendizaje óptimo en cada iteración dada la información de la que dispone. Una posibilidad de especificar esto es requerir que ∀{l1, . . . ln} ∈ ℘(L).λ({l1, . . . ln}) = (l, {l1, . . . ln }) ⇒ l = arg max l ∈L g(l )(h(l )) pero dado que generalmente será poco realista calcular el siguiente paso de aprendizaje óptimo en cada situación, es más útil 2. Nota que nuestra perspectiva no solo es diferente de los modelos comunes y cooperativos de aprendizaje distribuido de máquinas y minería de datos, sino que también delinea nuestro enfoque de los sistemas de aprendizaje multiagente en los que los agentes aprenden sobre otros agentes [25], es decir, el objetivo de aprendizaje en sí no se ve afectado por el comportamiento de los agentes en el entorno. 680 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) i j Dj Hj fj gj hj Di pD→D 1 (Di, Dj) . .. pD→D kD→D (Di, Dj) . . . . . . n/a . . . Hola. .. ... n/a fi . .. ... n/a gi . .. n/a pg→h 1 (gi, hj) . .. pg→h kg→h (gi, hj) hi . .. n/a ... Tabla 1: Matriz de funciones de integración para mensajes enviados del aprendiz i al j para simplemente usar g(l )(h(l )) como una medida de rendimiento en ejecución para evaluar qué tan bien está funcionando el agente. Esto es demasiado abstracto y poco específico para nuestros propósitos: aunque describe lo que los agentes deberían hacer (transformar los ajustes para el siguiente paso de aprendizaje de manera óptima), no especifica cómo esto puede lograrse en la práctica. 2.2 Integración de información del proceso de aprendizaje Para especificar cómo el proceso de aprendizaje de un agente puede verse afectado al integrar información recibida de otros, necesitamos detallar cómo los pasos de aprendizaje que realizará pueden ser modificados utilizando la información entrante sobre procesos de aprendizaje descritos por otros agentes (esto incluye la adquisición de nuevos datos de aprendizaje del entorno como un caso especial). En el caso más general, podemos especificar esto en términos de las posibles modificaciones al información existente sobre historias de aprendizaje que pueden realizarse utilizando nueva información. Para facilitar la presentación, asumiremos que los agentes son procesos de aprendizaje estacionarios que solo pueden registrar el paso de aprendizaje ejecutado previamente y solo intercambiar información sobre este paso individual de aprendizaje (nuestro modelo puede ser fácilmente extendido para adaptarse a entornos más complejos). Deje que lj = Dj, Hj, fj, gj, hj sea el estado actual del agente j al recibir una descripción del proceso de aprendizaje li = Di, Hi, fi, gi, hi del agente i (por el momento, asumimos que este es un paso de aprendizaje específico y no una descripción más vaga y disyuntiva de las propiedades del paso de aprendizaje de i). Considerando todas las posibles interacciones a un nivel abstracto, básicamente obtenemos una matriz de posibilidades para modificaciones de la especificación del paso de aprendizaje de js, como se muestra en la Tabla 1. En esta matriz, cada entrada especifica una familia de funciones de integración pc→c 1 , . . . , pc→c kc→c donde c, c ∈ {D, H, f, g, h} y que definen cómo se modificará el componente cj del agente j utilizando la información ci proporcionada sobre (el mismo o un componente diferente) en el paso de aprendizaje aplicando pc→c r (ci, cj) para algún r ∈ {1, . . . , kc→c }. Para simplificar, las colecciones de funciones p que un agente j utiliza especifican cómo modificará su propio comportamiento de aprendizaje utilizando la información obtenida de i. Para la diagonal de esta matriz, que contiene las formas más comunes de integrar nueva información en el propio modelo de aprendizaje, las formas obvias de modificar el propio proceso de aprendizaje incluyen reemplazar cj por ci o ignorar por completo ci. Formas más complejas/sutiles de integración del proceso de aprendizaje incluyen: • Modificación de Dj: añadir Di a Dj; filtrar todos los elementos de Dj que también aparecen en Di; añadir Di a Dj descartando todos los elementos con atributos fuera de los rangos que afectan a gj, o aquellos elementos ya clasificados correctamente por hj; • Modificación de Hi: usar la unión/intersección de Hi y Hj; alternativamente, descartar elementos de Hj que son inconsistentes con Dj en el proceso de intersección o unión, o filtrar elementos que no pueden ser obtenidos usando fj (a menos que fj sea modificado al mismo tiempo) • Modificación de fj: modificar parámetros o conocimiento previo de fj usando información sobre fi; evaluar su relevancia simulando pasos de aprendizaje anteriores en Dj usando gj y descartar aquellos que no ayuden a mejorar el rendimiento propio • Modificación de hj: combinar hj con hi usando operadores lógicos o matemáticos (por ejemplo); hacer que el uso de hi dependa de una evaluación previa de su calidad usando los datos propios Dj y gj. Aunque esta lista no incluye operaciones de integración completamente desarrolladas y concretas para procesos de aprendizaje, es indicativa de la amplia gama de interacciones entre agentes individuales en procesos de aprendizaje que nuestro marco permite. Ten en cuenta que la lista no incluye ninguna modificación a gj. Esto se debe a que no permitimos modificaciones en la medida de calidad propia de los agentes, ya que esto haría que el modelo de acción racional (de aprendizaje) fuera inútil (si la medida de calidad es relativa y volátil, no podemos juzgar objetivamente el rendimiento de aprendizaje). También hay que tener en cuenta que algunos de los ejemplos anteriores requieren consultar otros elementos de lj que no aparecen como argumentos de las p-operaciones; los omitimos por facilidad de notación, pero enfatizamos que las operaciones ricas en información implicarán consultar muchos aspectos diferentes de lj. Además de las operaciones a lo largo de la diagonal de la matriz, son concebibles operaciones de integración más exóticas que combinan información sobre diferentes componentes. En teoría podríamos llenar la mayor parte de la matriz con entradas para ellos, pero por falta de espacio solo enumeramos algunos ejemplos: • Modificación de Dj usando fi: preprocesar muestras en fi, por ejemplo, para lograr representaciones intermedias a las que fj se pueda aplicar • Modificación de Dj usando hi: filtrar muestras de Dj que estén cubiertas por hi y construir hj usando fj solo en las muestras restantes • Modificación de Hj usando fi: filtrar hipótesis de Hj que no sean realizables usando fi • Modificación de hj usando gi: si hj está compuesto por varios subcomponentes, filtrar aquellos subcomponentes que no funcionen bien según gi • . . . Finalmente, muchos mensajes recibidos de otros describiendo propiedades de sus procesos de aprendizaje contendrán información sobre varios elementos de un paso de aprendizaje, dando lugar a operaciones aún más complejas que dependen de qué tipos de información estén disponibles. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 681 Figura 2: Captura de pantalla de nuestro sistema de simulación, mostrando datos de seguimiento en línea de embarcaciones para la región del Mar del Norte 3. EJEMPLO DE APLICACIÓN 3.1 Descripción del dominio Como ilustración de nuestro marco de trabajo, presentamos un sistema de minería de datos basado en agentes para vigilancia basada en agrupamiento utilizando datos del AIS (Sistema de Identificación Automática [1]). En nuestro dominio de aplicación, diferentes agencias comerciales y gubernamentales rastrean los viajes de los barcos a lo largo del tiempo utilizando datos AIS que contienen información estructurada proporcionada automáticamente por los barcos equipados con estaciones móviles AIS a estaciones en tierra, otros barcos y aeronaves. Estos datos contienen la identidad de los barcos, tipo, posición, rumbo, velocidad, estado de navegación y otra información relacionada con la seguridad. La Figura 2 muestra una captura de pantalla de nuestro sistema de simulación. Es tarea de las agencias de AIS detectar comportamientos anómalos para alertar a las unidades de policía/costera a fin de investigar más a fondo comportamientos inusuales, potencialmente sospechosos. Dicho comportamiento podría incluir cosas como desviaciones de las rutas estándar entre el origen declarado y el destino del viaje, encuentros cercanos inesperados entre diferentes embarcaciones en el mar, o patrones inusuales en la elección del destino en múltiples viajes, teniendo en cuenta el tipo de embarcación y la carga reportada. Si bien las razones de dicho comportamiento inusual pueden ir desde una mera coincidencia o problemas técnicos hasta actividades criminales (como contrabando, piratería, ataques terroristas/militares), resulta obviamente útil preprocesar la gran cantidad de datos de embarcaciones (de seguimiento) disponibles antes de proceder con un análisis más detallado por parte de expertos humanos. Para apoyar esta tarea automatizada de preprocesamiento, el software utilizado por estas agencias aplica métodos de agrupamiento para identificar valores atípicos y marcarlos como entidades potencialmente sospechosas para el usuario humano. Sin embargo, muchas agencias activas en este ámbito son empresas competidoras y utilizan sus conjuntos de datos y hipótesis de aprendizaje (modelos) (parcialmente superpuestos, pero distintos) como activos, por lo que no se puede esperar que colaboren de manera totalmente cooperativa para mejorar los resultados de aprendizaje en general. Considerando que esta es la realidad del dominio en el mundo real, es fácil ver que un marco como el que hemos sugerido arriba podría ser útil para explotar el potencial de cooperación que no es aprovechado por los sistemas actuales. 3.2 Diseño de un sistema de aprendizaje distribuido basado en agentes Para describir un diseño concreto para el dominio de AIS, necesitamos especificar los siguientes elementos del sistema general: 1. Los conjuntos de datos y algoritmos de agrupamiento disponibles para agentes individuales, 2. el mecanismo de interacción utilizado para intercambiar descripciones de procesos de aprendizaje, y 3. el mecanismo de decisión que los agentes aplican para tomar decisiones de aprendizaje. En cuanto a 1., nuestros agentes cuentan con sus propios conjuntos de datos privados en forma de descripciones de embarcaciones. Las muestras de aprendizaje están representadas por tuplas que contienen datos sobre embarcaciones individuales en términos de atributos A = {1, . . . , n}, que incluyen cosas como ancho, longitud, etc., con dominios de valores reales ([Ai] = R para todo i). En términos de algoritmo de aprendizaje, consideramos el agrupamiento con un número fijo de k clústeres utilizando los algoritmos de agrupamiento k-means y k-medoids [5] (fijo significa que el algoritmo de aprendizaje siempre producirá k clústeres; sin embargo, permitimos a los agentes cambiar el valor de k en diferentes ciclos de aprendizaje). Esto significa que el espacio de hipótesis puede ser definido como H = { c1, . . . , ck |ci ∈ R|A| } es decir, el conjunto de todos los posibles conjuntos de k centroides de clúster en el espacio euclidiano de dimensión |A|. Para cada hipótesis h = c1, . . . , ck y cualquier punto de datos d ∈ ×n i=1[Ai] dado el dominio [Ai] para el atributo i-ésimo de cada muestra, la asignación a los clústeres se da por C( c1, . . . , ck , d) = arg min 1≤j≤k |d − cj| es decir, d se asigna a ese clúster cuyo centroide está más cerca del punto de datos en términos de distancia euclidiana. Para fines de evaluación, cada conjunto de datos relacionado con un agente particular i se divide inicialmente en un conjunto de entrenamiento Di y un conjunto de validación Vi. Luego, generamos un conjunto de embarcaciones falsas Fi tal que |Fi| = |Vi|. Estos dos conjuntos evalúan la capacidad de los agentes para detectar embarcaciones sospechosas. Para esto, asignamos un valor de confianza r(h, d) a cada barco d: r(h, d) = 1 |d − cC(h,d)| donde C(h, d) es el índice del centroide más cercano. Basándonos en esta medida, clasificamos cualquier embarcación en Fi ∪ Vi como falsa si su valor r está por debajo de la mediana de todas las confianzas r(h, d) para d ∈ Fi ∪ Vi. Con esto, podemos calcular la calidad gi(h) ∈ R como la proporción entre todos los vasos clasificados correctamente y todos los vasos en Fi ∪ Vi. En lo que respecta al punto 2., utilizamos un mecanismo de intercambio de hipótesis basado en un Protocolo de Red de Contratos (CNP) [20] simple: Antes de cada iteración de aprendizaje, los agentes emiten (difunden públicamente) Llamadas a Propuestas (CfPs), anunciando la calidad de su propio modelo numérico. En otras palabras, el iniciador de un CNP describe su propio estado de aprendizaje actual como (∗, ∗, ∗, gi(h), ∗) donde h es su hipótesis/modelo actual. Suponemos que los agentes son sinceros al publicitar la calidad de su modelo, pero observamos que esta calidad podría tener una relevancia limitada para otros agentes, ya que podrían especializarse en regiones específicas del espacio de datos no relacionadas con el conjunto de pruebas del remitente de la CfP. Posteriormente, algunos agentes pueden realizar ofertas en las que publicitan, a su vez, la calidad de su propio modelo. Si el 682 El Sexto Internacional. Las ofertas (si las hay) para la Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) son aceptadas por el iniciador del protocolo que emitió la convocatoria, los agentes intercambian sus hipótesis y comienza la siguiente iteración de aprendizaje. Para describir lo que es necesario para el punto 3., tenemos que especificar (i) bajo qué condiciones los agentes presentan ofertas en respuesta a una CfP, (ii) cuándo aceptan ofertas en el proceso de negociación CNP, y (iii) cómo integran la información recibida en su propio proceso de aprendizaje. En cuanto a (i) y (ii), empleamos una regla muy simple que es idéntica en ambos casos: sea g la calidad del propio modelo y g la anunciada por el CfP (o la oferta más alta, respectivamente). Si g > g, respondemos a la CfP (aceptamos la oferta), de lo contrario respondemos a la CfP (aceptamos la oferta) con probabilidad P(g / g) y la ignoramos (rechazamos) en otro caso. Si dos agentes hacen un trato, intercambian sus hipótesis de aprendizaje (modelos). En nuestros experimentos, g y g se calculan mediante un agente adicional que actúa como un mecanismo de validación global para todos los agentes (en un entorno más realista, se tendría que proporcionar un mecanismo de comparación para diferentes funciones g). En cuanto a (iii), cada agente utiliza un único operador de fusión de modelos tomado de las siguientes dos clases de operadores (hj es el modelo propio del receptor y hi es el modelo del proveedor): • ph→h (hi, hj): - m-join: Los m mejores grupos (en términos de cobertura de Dj) de la hipótesis hi se añaden a hj. - m-select: El conjunto de los m mejores grupos (en términos de cobertura de Dj) de la unión hi ∪ hj se elige como un nuevo modelo. (A diferencia de m-join, este método no prefiere los grupos propios sobre los de otros). • ph→D (hi, Dj): - m-filter: Los m mejores grupos (como se mencionó anteriormente) de hi se identifican y se añaden a un nuevo modelo formado utilizando esas muestras no cubiertas por estos grupos aplicando el algoritmo de aprendizaje propio fj. Cuando m es lo suficientemente grande como para abarcar todos los grupos, simplemente escribimos unir o filtrar para ellos. En la sección 4 analizamos el rendimiento de cada una de estas dos clases para diferentes elecciones de m. Es destacable que este sistema de minería de datos distribuida basado en agentes es uno de los ejemplos más simples concebibles de nuestra arquitectura abstracta. Aunque anteriormente lo hemos aplicado también a una arquitectura basada en el mercado más compleja utilizando aprendices de Programación Lógica Inductiva en un dominio de logística de transporte [22], creemos que el sistema descrito aquí es lo suficientemente complejo como para ilustrar las decisiones de diseño clave involucradas en el uso de nuestro marco y proporciona soluciones de ejemplo simples para estos problemas de diseño. 4. RESULTADOS EXPERIMENTALES La Figura 3 muestra los resultados obtenidos de las simulaciones con tres agentes de aprendizaje en el sistema anterior utilizando los métodos de agrupamiento k-means y k-medoids respectivamente. Dividimos el conjunto de datos total de 300 barcos en tres conjuntos disjuntos de 100 muestras cada uno y asignamos cada uno de estos a un agente de aprendizaje. El Agente Único está aprendiendo de todo el conjunto de datos. El parámetro k se establece en 10 ya que este es el valor óptimo para el conjunto de datos total según el índice de Davies-Bouldin [9]. Para m-select asumimos que m = k, lo cual logra una Figura 3 constante: Resultados de rendimiento obtenidos para diferentes operaciones de integración en sociedades de aprendices homogéneas utilizando el tamaño del modelo de los métodos k-means (arriba) y k-medoids (abajo). Para m-join y m-filter asumimos que m = 3 para limitar en qué medida los modelos aumentan con el tiempo. Durante cada experimento, los agentes de aprendizaje reciben descripciones de barcos en lotes de 10 muestras. Entre estos lotes, hay suficiente tiempo para intercambiar los modelos entre los agentes y recalcular los modelos si es necesario. Cada barco se describe utilizando atributos de ancho, longitud, calado y velocidad con el objetivo de aprender a detectar qué embarcaciones han proporcionado descripciones falsas de sus propiedades. El conjunto de validación contiene 100 barcos reales y 100 barcos falsos generados aleatoriamente. Para generar propiedades lo suficientemente realistas para barcos falsos, los valores de sus atributos individuales se toman de barcos seleccionados al azar en el conjunto de validación (de modo que cada muestra falsa es una combinación de valores de atributos de varios barcos existentes). En estos experimentos, estamos principalmente interesados en investigar si una forma simple de compartir conocimiento entre agentes de aprendizaje interesados en sí mismos podría mejorar el rendimiento del agente en comparación con un entorno de aprendices aislados. Por lo tanto, distinguimos entre sociedades de aprendices homogéneas donde todos los agentes utilizan el mismo algoritmo de agrupamiento y heterogéneas donde diferentes agentes utilizan algoritmos diferentes. Como se puede ver en los gráficos de rendimiento en la Figura 3 (caso homogéneo) y 4 (caso heterogéneo, dos agentes usan el mismo método y un agente usa el otro), esto es claramente el caso para las operaciones de integración de unión y filtro (m = k) en ambos casos. Esto es bastante natural, ya que estas operaciones equivalen a compartir todo el conocimiento del modelo disponible entre los agentes (bajo restricciones apropiadas dependiendo de lo beneficioso que parezca el intercambio para los agentes). Podemos ver que la calidad de estas operaciones es muy cercana a la del Agente Único que tiene acceso a todos los datos de entrenamiento. Para los métodos de unión m, filtrado m y selección m restringidos (m < k), también podemos observar una distinción interesante, La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Figura 4: Resultados de rendimiento obtenidos para diferentes operaciones de integración en sociedades heterogéneas con la mayoría de aprendices utilizando los métodos k-means (arriba) y k-medoids (abajo), es decir, que estos métodos tienen un rendimiento similar al caso de aprendices aislados en grupos de agentes homogéneos, pero mejor que los aprendices aislados en sociedades más heterogéneas. Esto sugiere que los aprendices heterogéneos pueden beneficiarse incluso de un intercambio de conocimientos bastante limitado (y esto es lo que equivale a usar un valor bastante pequeño de m = 3 dado que k = 10), mientras que esto no siempre es cierto para agentes homogéneos. Esto ilustra claramente cómo diferentes algoritmos de aprendizaje o minería de datos pueden especializarse en diferentes partes del espacio del problema y luego integrar sus resultados locales para lograr un mejor rendimiento individual. Además de estos beneficios obvios en el rendimiento, integrar resultados de aprendizaje parciales también puede tener otras ventajas: la operación de filtro m, por ejemplo, disminuye el número de muestras de aprendizaje y, por lo tanto, puede acelerar el proceso de aprendizaje. El número relativo de ejemplos filtrados medido en nuestros experimentos se muestra en la siguiente tabla. k-means k-medoids filtrado 30-40 % 10-20 % m-filtrado 20-30 % 5-15 % La conclusión general que podemos extraer de estos experimentos iniciales con nuestra arquitectura es que dado que una aplicación muy simplista de sus principios ha demostrado ser capaz de mejorar el rendimiento de agentes de aprendizaje individuales, vale la pena investigar formas más complejas de intercambio de información sobre procesos de aprendizaje entre aprendices autónomos. 5. TRABAJO RELACIONADO Ya hemos mencionado el trabajo sobre aprendizaje automático y minería de datos distribuidos (no basados en agentes) en el capítulo introductorio, por lo que en esta sección nos limitaremos a enfoques que están más estrechamente relacionados con nuestra perspectiva sobre sistemas de aprendizaje distribuido. Con mucha frecuencia, los enfoques que supuestamente son basados en agentes ignoran por completo la autonomía de los agentes y prescriben procedimientos de toma de decisiones locales de antemano. Un ejemplo típico para este tipo de sistema es el sugerido por Caragea et al. [6], el cual se basa en un enfoque de máquina de vectores de soporte distribuida donde los agentes unen incrementalmente sus conjuntos de datos de acuerdo con un algoritmo distribuido fijo. Un ejemplo similar es el trabajo de Weiss [24], donde grupos de agentes clasificadores aprenden a organizar su actividad para optimizar el comportamiento del sistema global. La diferencia entre este tipo de sistemas de aprendizaje colaborativo basados en agentes [16] y nuestro propio marco es que estos enfoques asumen un objetivo de aprendizaje conjunto que es perseguido colaborativamente por todos los agentes. Muchos enfoques dependen en gran medida de una suposición de homogeneidad: Plaza y Ontanon [15] sugieren métodos para la reutilización inteligente de casos basada en agentes en el razonamiento basado en casos, pero solo es aplicable a sociedades de aprendices homogéneos (y acuñado hacia un método de aprendizaje específico). Un método basado en agentes para integrar procesos de análisis de clúster distribuidos utilizando estimación de densidad es presentado por Klusch et al. [13], el cual también está específicamente diseñado para un algoritmo de aprendizaje particular. Lo mismo ocurre con [22, 23], que presentan mecanismos basados en el mercado para agregar la producción de múltiples agentes de aprendizaje, aunque estos enfoques consideran mecanismos de interacción más interesantes entre los aprendices. Se han propuesto varias estrategias para compartir datos de aprendizaje [18]: Grecu y Becker [12] sugieren un intercambio de muestras de aprendizaje entre agentes, y Ghosh et al. [11] es un paso en la dirección correcta en cuanto a revelar solo información parcial sobre el proceso de aprendizaje, ya que aborda el intercambio limitado de información en el agrupamiento distribuido. Papyrus [3] es un sistema que proporciona un lenguaje de marcado para la meta-descripción de datos, hipótesis y resultados intermedios, y permite el intercambio de toda esta información entre diferentes nodos, sin embargo, con un objetivo estrictamente cooperativo de distribuir la carga para tareas de minería de datos masivamente distribuidas. El sistema MALE [19] fue un sistema de aprendizaje multiagente muy temprano en el que los agentes utilizaban un enfoque de pizarra para comunicar sus hipótesis. Los agentes pudieron criticar las hipótesis de los demás hasta llegar a un acuerdo. Sin embargo, todos los agentes en este sistema eran idénticos y el sistema era estrictamente cooperativo. El sistema ANIMALS [10] se utilizó para simular el aprendizaje multiestratégico al combinar dos o más técnicas de aprendizaje (representadas por agentes heterogéneos) con el fin de superar las debilidades en los algoritmos individuales, aunque también era un sistema estrictamente cooperativo. Como muestran estos ejemplos y según nuestro mejor conocimiento, no ha habido intentos previos de proporcionar un marco que pueda dar cabida tanto a agentes de aprendizaje independientes como heterogéneos, y esto puede considerarse como la principal contribución de nuestro trabajo. CONCLUSIÓN En este documento, delineamos un marco genérico y abstracto para el aprendizaje automático distribuido y la minería de datos. Este marco constituye, según nuestro conocimiento, el primer intento 684 de la Sexta Conferencia Internacional. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) para capturar formas complejas de interacción entre aprendices heterogéneos y/o egoístas en una arquitectura que puede ser utilizada como base para implementar sistemas que utilizan mecanismos de interacción y razonamiento complejos para permitir a los agentes informar y mejorar sus habilidades de aprendizaje con información proporcionada por otros aprendices en el sistema, siempre y cuando todos los agentes participen en una actividad de aprendizaje suficientemente similar. Para ilustrar que los principios abstractos de nuestra arquitectura pueden convertirse en sistemas concretos y computacionales, describimos un sistema de agrupamiento distribuido basado en el mercado que fue evaluado en el ámbito del seguimiento de embarcaciones con el fin de identificar comportamientos desviados o sospechosos. Aunque nuestros resultados experimentales solo insinúan el potencial de utilizar nuestra arquitectura, subrayan que lo que estamos proponiendo es factible en principio y puede tener efectos beneficiosos incluso en su forma más simple. Sin embargo, hay una serie de problemas que no hemos abordado en la presentación de la arquitectura y su evaluación empírica: en primer lugar, no hemos considerado el costo de la comunicación y hemos hecho la suposición implícita de que la comunicación requerida es gratuita. Esto es, por supuesto, insuficiente si queremos evaluar nuestro método en términos del esfuerzo total requerido para producir cierta calidad de resultados de aprendizaje. En segundo lugar, no hemos experimentado con agentes que utilicen algoritmos de aprendizaje completamente diferentes (por ejemplo, simbólicos y numéricos). En sistemas compuestos por agentes completamente diferentes, las circunstancias bajo las cuales se puede lograr un intercambio exitoso de información pueden ser muy diferentes a las descritas aquí, y métodos de comunicación y razonamiento mucho más complejos pueden ser necesarios para lograr una integración útil de los procesos de aprendizaje de los diferentes agentes. Finalmente, se deben desarrollar criterios de evaluación más sofisticados para tales arquitecturas de aprendizaje distribuido con el fin de arrojar luz sobre cuáles deberían ser las medidas correctas de optimalidad para agentes que razonan y se comunican de forma autónoma. Estos problemas, junto con una investigación más sistemática y exhaustiva de mecanismos avanzados de interacción y comunicación para agentes distribuidos, colaborativos y competitivos, serán el tema de nuestro futuro trabajo sobre el asunto. Agradecimiento: Agradecemos sinceramente el apoyo brindado a la investigación presentada por el proyecto del Laboratorio de Investigación del Ejército N62558-03-0819 y el proyecto de la Oficina de Investigación Naval N00014-06-1-0232. REFERENCIAS [1] http://www.aislive.com. [2] http://www.healthagents.com. [3] S. Bailey, R. Grossman, H. Sivakumar y A. Turinsky. Papiro: Un sistema para la minería de datos en clústeres locales y de área amplia, así como super-clústeres. En Proc. de la Conferencia sobre Supercomputación. 1999. [4] E. Bauer y R. Kohavi. Una comparación empírica de algoritmos de clasificación de votación: Bagging, Boosting y variantes. Aprendizaje automático, 36, 1999. [5] P. Berkhin. Encuesta de técnicas de minería de datos de agrupamiento, Informe técnico, Accrue Software, 2002. [6] D. Caragea, A. Silvescu y V. Honavar. Agentes que aprenden de fuentes de datos dinámicas distribuidas. En Actas del Taller sobre Agentes de Aprendizaje, 2000. [7] N. Chawla y S. E. y L. O. Sala. Creando conjuntos de clasificadores. En Actas de ICDM 2001, páginas 580-581, San José, CA, EE. UU., 2001. [8] D. Dash y G. F. Cooper. Promediando modelos para predicción con redes bayesianas discretas. Revista de Investigación en Aprendizaje Automático, 5:1177-1203, 2004. [9] D. L. Davies y D. W. Bouldin. Una medida de separación de clústeres. IEEE Transactions on Pattern Analysis and Machine Intelligence, 4:224-227, 1979. [10] P. Edwards y W. Davies. Un sistema de aprendizaje multiagente heterogéneo. En Actas del Grupo de Interés Especial en Sistemas Basados en el Conocimiento Cooperativo, páginas 163-184, 1993. [11] J. Ghosh, A. Strehl y S. Merugu. Un marco de consenso para integrar agrupamientos distribuidos bajo un intercambio limitado de conocimiento. En el Taller de la NSF sobre Minería de Datos de Próxima Generación, 99-108, 2002. [12] D. L. Grecu y L. A. Becker. Aprendizaje coactivo para la minería de datos distribuida. En Actas de KDD-98, páginas 209-213, Nueva York, NY, agosto de 1998. [13] M. Klusch, S. Lodi y G. Moro. Minería de datos distribuida basada en agentes: El esquema KDEC. En AgentLink, número 2586 en LNCS. Springer, 2003. [14] T. M. Mitchell. 

Springer, 2003. [14] T. M. Mitchell. Aprendizaje automático, páginas 29-36. McGraw-Hill, Nueva York, 1997. [15] S. Ontañón y E. Plaza. Reciclaje de datos para el aprendizaje multiagente. En Proc. de ICML-05, 2005. [16] L. Panait y S. Luke. Aprendizaje cooperativo de múltiples agentes: El estado del arte. Agentes Autónomos y Sistemas Multiagente, 11(3):387-434, 2005. [17] B. Parque y H. Kargupta. Minería de datos distribuida: algoritmos, sistemas y aplicaciones. En N. Ye, editor, Manual de Minería de Datos, páginas 341-358, 2002. [18] F. J. Provost y D. N. Hennessy. Escalando: Aprendizaje automático distribuido con cooperación. En Proc. de AAAI-96, páginas 74-79. AAAI Press, 1996. [19] S. Sian. 

Editorial AAAI, 1996. [19] S. Sian. Ampliando el aprendizaje a múltiples agentes: Problemas y un modelo para el aprendizaje automático multiagente (ma-ml). En Y. Kodratoff, editor, Machine LearningEWSL-91, páginas 440-456. Springer-Verlag, 1991. [20] R. Smith. 

Springer-Verlag, 1991. [20] R. Smith. El protocolo de red de contratos: Comunicación y control de alto nivel en un solucionador de problemas distribuido. IEEE Transactions on Computers, C-29(12):1104-1113, 1980. [21] S. J. Stolfo, A. L. Prodromidis, S. Tselepis, W. Lee, D. W. Fan, y P. K. Chan. Jam: Agentes de Java para Meta-Aprendizaje sobre Bases de Datos Distribuidas. En Proc. de la KDD-97, páginas 74-81, EE. UU., 1997. [22] J. Toˇziˇcka, M. Jakob y M. Pˇechouˇcek. Enfoque inspirado en el mercado para el aprendizaje colaborativo. En Agentes de Información Cooperativa X (CIA 2006), volumen 4149 de LNCS, páginas 213-227. Springer, 2006. [23] Y. 

Springer, 2006. [23] Y. Z. Wei, L. Moreau y N. R. Jennings. Sistemas de recomendación: un diseño basado en el mercado. En Actas de AAMAS-03, páginas 600-607, 2003. [24] G. Weiß. Una perspectiva multiagente del aprendizaje automático paralelo y distribuido. En Actas de Agents98, páginas 226-230, 1998. [25] G. Weiss y P. Dillenbourg. ¿Qué significa "multi" en el aprendizaje multiagente? Aprendizaje colaborativo: Enfoques cognitivos y computacionales, 64-80, 1999. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 685