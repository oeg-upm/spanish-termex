Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke Escuela de Ciencias de la Computación, Universidad de Waterloo, Canadá claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un conjunto de resultados en el que los primeros puestos están dominados por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este documento presenta y evalúa un algoritmo que vuelve a clasificar este conjunto de resultados, con el objetivo de minimizar el contenido redundante mientras se preservan los beneficios de la recuperación de elementos, incluido el beneficio de identificar componentes centrados en el tema contenidos en documentos relevantes. La colección de pruebas desarrollada por la Iniciativa para la Evaluación de la Recuperación XML (INEX) constituye la base para la evaluación. Categorías y Descriptores de Asignaturas H.3.3 [Sistemas de Información]: Almacenamiento y Recuperación de Información-Búsqueda y Recuperación de Información Términos Generales Algoritmos, Medición, Rendimiento, Experimentación 1. La representación de documentos en XML brinda una oportunidad para que los sistemas de recuperación de información aprovechen la estructura del documento, devolviendo componentes individuales del documento cuando sea apropiado, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta de usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Esta facilidad es de particular beneficio cuando una colección contiene documentos muy largos, como manuales de productos o libros, donde el usuario debe ser dirigido a las partes más relevantes de estos documentos. La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, ilustrando muchas de las características importantes de los documentos XML. Las etiquetas indican el inicio y el final de cada elemento, con elementos que varían ampliamente en tamaño, desde una palabra hasta miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de búsqueda, pero otros no son apropiados. Los elementos se superponen entre sí: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta el diseño de un sistema de IR XML, y cada una conlleva problemas fundamentales que deben resolverse en un sistema exitoso. La mayoría de estos problemas fundamentales pueden resolverse mediante la cuidadosa adaptación de técnicas estándar de IR, pero los problemas causados por la superposición son únicos en esta área [4,11] y constituyen el enfoque principal de este artículo. El artículo de la figura 1 puede ser visto como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede ser representada como un bosque de árboles ordenados y enraizados, que consiste en un conjunto de nodos N y un conjunto de aristas dirigidas E que conectan estos nodos. Para cada nodo x ∈ N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos de x. Dado que un elemento puede estar representado por el nodo en su raíz, la salida de un sistema de IR XML puede ser vista como una lista clasificada de los m nodos principales. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los primeros puestos están dominados por muchos elementos estructuralmente relacionados. Una sección con una puntuación alta probablemente contenga varios párrafos con una puntuación alta y esté contenida en un artículo con una puntuación alta. Por ejemplo, muchos de los elementos en la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índices de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando contenido redundante. Una posible solución es informar solo el elemento de mayor puntuación a lo largo de un camino dado en el árbol, y eliminar de los rangos inferiores cualquier elemento que lo contenga o esté contenido en él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar fuertemente enfocado en el tema de la consulta y proporcionar un breve resumen de los conceptos clave. En tales casos, es razonable informar sobre elementos que contienen, o están contenidos en, elementos de rango superior. Incluso cuando un libro entero es relevante, un usuario aún puede desear que se destaquen los párrafos más importantes, para guiar su lectura y ahorrar tiempo [6]. Este documento presenta un método para controlar la superposición. A partir de una clasificación inicial de elementos, un algoritmo de re-clasificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ser ahora redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en la clasificación, las puntuaciones de los párrafos que contiene y del artículo que lo contiene se reducen. La inspiración para esta estrategia proviene parcialmente del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, reciben diferentes pesos [20]. Extendiendo ese enfoque, el algoritmo de reordenamiento varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento está organizado de la siguiente manera: Después de una discusión sobre el trabajo de antecedentes y la metodología de evaluación, se presenta un método de recuperación de referencia en la sección 4. Este método de referencia representa una adaptación razonable de la tecnología estándar de IR al XML. La sección 5 luego describe una estrategia para controlar la superposición, utilizando el método de línea base como punto de partida. Un algoritmo de reordenamiento que implementa esta estrategia se presenta en la sección 6 y se evalúa en la sección 7. La sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección proporciona una visión general de la recuperación de información XML y discute trabajos relacionados, con énfasis en los problemas fundamentales mencionados en la introducción. Mucha investigación en el área de recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupándose por problemas como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de joins [1]. Aquí adoptamos una perspectiva de IR orientada al contenido, centrándonos en documentos XML que contienen principalmente datos en lenguaje natural y consultas que están principalmente expresadas en lenguaje natural. Suponemos que estas consultas indican únicamente la naturaleza del contenido deseado, no su estructura, y que el papel del sistema de RI es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otra investigación en IR ha considerado consultas mixtas, en las que se especifican tanto requisitos de contenido como estructurales [2,6,14,17,23]. 2.1 Estadísticas de Términos y Documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera que es el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódico y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de la RI XML, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de términos disponibles para cada uno [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas globales (por ejemplo, frecuencia inversa de documentos) calculadas sobre la colección en su totalidad. Si consideramos que esta colección incluye todos los elementos que podrían ser devueltos por el sistema, una ocurrencia específica de un término puede aparecer en varios documentos diferentes, quizás en elementos que representan un párrafo, una subsección, una sección y un artículo. No es apropiado calcular la frecuencia inversa de documentos bajo la suposición de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende completamente del arreglo estructural de los documentos [13,23]. 2.2 Elementos Recuperables Si bien un sistema de recuperación de información XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Esto suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga solo los términos de búsqueda puede recibir una puntuación alta de un algoritmo de clasificación, pero por sí solo tendría un valor limitado para un usuario, quien podría preferir la sección real en sí misma. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de la estructura lógica, lo cual puede tener poco o ningún significado para un usuario. Un sistema de recuperación de información XML efectivo debe devolver solo aquellos elementos que tengan suficiente contenido para ser utilizables y puedan funcionar como objetos independientes [15,18]. Componentes estándar de documentos como párrafos, secciones, subsecciones y resúmenes generalmente cumplen con estos requisitos; los títulos, frases en cursiva y campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de Evaluación En los últimos tres años, la Iniciativa para la Evaluación de la Recuperación de Información XML (INEX) ha fomentado la investigación en tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similar a TREC, en la que grupos de diferentes instituciones completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparan sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha convertido en tan influyente en el área de la RI XML como lo es TREC en otras áreas de la RI. La investigación descrita en este artículo, al igual que gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables en la evaluación de la recuperación, y los organizadores y participantes de INEX han luchado con estos problemas desde el principio. Aunque se ha logrado un progreso sustancial, estos problemas aún no están completamente resueltos. Kazai et al. [11] proporcionan una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación de INEX y discuten tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. Las limitaciones de espacio impiden incluir más que un breve resumen de las tareas y metodología de evaluación de INEX 2004. Para obtener información detallada, se deben consultar las actas de la conferencia en sí [8]. 3.1 Tareas Para las principales tareas experimentales, a los participantes de INEX 2004 se les proporcionó una colección de 12,107 artículos tomados de las revistas y publicaciones de la IEEE Computer Societies entre 1995 y 2002. Cada documento está codificado en XML utilizando una DTD común, siendo el documento de las figuras 1 y 2 un ejemplo. En INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación ad hoc, investigando el rendimiento de sistemas que buscan en una colección estática utilizando temas previamente no vistos. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de solo contenido o CO, los temas consisten en declaraciones cortas en lenguaje natural sin hacer referencia directa a la estructura de los documentos en la colección. Para esta tarea, se requiere que el sistema de IR seleccione los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura del documento, que el sistema de IR debe intentar satisfacer. Dado que el trabajo descrito en este documento se enfoca en la tarea de solo contenido, donde el sistema de IR no recibe orientación sobre los elementos a devolver, la tarea de CAS se ignora en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO de las contribuciones proporcionadas por los participantes de la conferencia. Cada tema incluye una breve consulta de palabras clave, la cual es ejecutada sobre la colección por cada grupo participante en su propio sistema de IR XML. Cada grupo podría presentar hasta tres ejecuciones experimentales que consistieran en los primeros m = 1500 elementos para cada tema. 3.2 Evaluación de Relevancia Dado que la RI XML se preocupa por localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen la menor cantidad de información irrelevante posible, los juicios simples de relevante vs. no relevante no son suficientes. En cambio, los organizadores de INEX adoptaron dos dimensiones para la evaluación de relevancia: la dimensión de exhaustividad refleja el grado en que un elemento abarca el tema, y la dimensión de especificidad refleja el grado en que un elemento se enfoca en el tema. Se utiliza una escala de cuatro puntos en ambas dimensiones. Por lo tanto, un elemento (3,3) es altamente exhaustivo y altamente específico, un elemento (1,3) es marginalmente exhaustivo y altamente específico, y un elemento (0,0) no es relevante. Información adicional sobre la metodología de evaluación se puede encontrar en Piwowarski y Lalmas [19], quienes proporcionan una justificación detallada. 3.3 Métricas de Evaluación La métrica de evaluación principal utilizada en INEX 2004 es una versión de la precisión promedio media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de sus valores de exhaustividad y especificidad. Una variante, la función de cuantización estricta asigna un peso de 1 a los elementos (3,3) y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con elementos (3,3) tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantización están diseñadas para otorgar crédito parcial a elementos que son aproximaciones cercanas, debido a la falta de exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la función de generalización orientada a la especificidad (sog) acreditan elementos según su grado de relevancia [11], siendo que la segunda función pone mayor énfasis en la especificidad. Este documento informa los resultados de esta métrica utilizando las tres funciones de cuantización. Desde que esta métrica fue introducida por primera vez en INEX 2002, generalmente se le conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizadas como las de sog otorgan crédito parcial a un casi acierto incluso cuando se informa un elemento (3,3) que se superpone a él en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de las valoraciones de relevancia al eliminar la superposición y retener solo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensa las ejecuciones de recuperación que evitan la superposición. Aunque XCG no se utilizó oficialmente en INEX 2004, es probable que se utilice una versión de él en el futuro. En INEX 2003, se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Este métrico inex-2003 extiende las definiciones de precisión y exhaustividad para considerar tanto el tamaño de los componentes informados como la superposición entre ellos. Se crearon dos versiones, una que consideraba solo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica inex-2003 presenta anomalías no deseadas [11] y no se utilizó en 2004, se informan valores en la sección de evaluación para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RECUPERACIÓN DE BASELINE Esta sección proporciona una descripción general del método de recuperación de información XML de base actualmente utilizado en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y ajuste de la medida Okapi BM25 [21] a la tarea de recuperación de información en XML. El sistema MultiText tuvo un desempeño respetable en INEX 2004, ubicándose entre los diez primeros en todas las funciones de cuantización, y ocupando el primer lugar cuando la función de cuantización enfatizaba la exhaustividad. Para admitir la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas de la forma: clasificar X por Y donde X es una subconsulta que especifica un conjunto de elementos de documentos a clasificar y Y es un vector de subconsultas que especifican términos de recuperación individuales. Para nuestras ejecuciones de INEX 2004, la subconsulta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas de la siguiente manera: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt. Esta lista incluye entradas bibliográficas (bb) y leyendas de figuras (fig) así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección de INEX y las evaluaciones de relevancia de INEX 2003 fueron analizadas manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas fueron seleccionados en base a su frecuencia en la colección, el tamaño promedio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. Automatizar este proceso de selección está planeado como trabajo futuro. Para INEX 2004, el vector término Y se derivó del tema dividiendo frases en palabras individuales, eliminando palabras vacías y términos negativos (aquellos que comienzan con -), y aplicando un stemmer. Por ejemplo, el campo de palabra clave del tema 166 +distancia de edición de árbol + XML -imagen se convirtió en la consulta de cuatro términos $árbol $edición $distancia $xml donde el operador $ dentro de una cadena entre comillas deriva el término que le sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] al establecer los parámetros k2 = 0 y k3 = ∞. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t∈Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log ¡ D − Dt + 0.5 Dt + 0.5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia con la que t ocurre en el tema xt = frecuencia con la que t ocurre en x K = k1((1 − b) + b · lx/lavg) lx = longitud de x lavg = longitud promedio del documento 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14 0.15 0 2 4 6 8 10 12 14 16 PrecisiónPromedio(inex-2002) k1 estricto generalizado sog Figura 3: Impacto de k1 en la precisión promedio de inex-2002 con b = 0.75 (temas CO de INEX 2003). Antes de INEX 2004, los temas y juicios de INEX 2003 se utilizaron para ajustar los parámetros b y k1, y el impacto de este ajuste se discute más adelante en esta sección. Para los propósitos de calcular estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos con menos de 25 palabras de longitud. El uso de estadísticas de artículos para todos los tipos de elementos podría ser cuestionado. Este enfoque puede justificarse al considerar la colección como un conjunto de artículos que se pueden buscar utilizando técnicas estándar orientadas a documentos, donde solo se devuelven artículos. El puntaje calculado para un elemento es esencialmente el puntaje que recibiría si se agregara a la colección como un nuevo documento, ignorando los ajustes menores necesarios para las estadísticas a nivel de documento. Sin embargo, planeamos examinar este tema nuevamente en el futuro. En nuestra experiencia, el rendimiento de BM25 suele beneficiarse al ajustar los parámetros b y k1 a la colección, siempre que haya consultas de entrenamiento disponibles con este propósito. Antes de INEX 2004, entrenamos el sistema MultiText utilizando las consultas de INEX 2003. Como punto de partida, utilizamos los valores b = 0.75 y k1 = 1.2, que funcionan bien en colecciones TREC adhoc y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de variar k1 con b = 0.75 en los valores de MAP bajo tres funciones de cuantización. En nuestra experiencia, los valores óptimos para k1 suelen estar en el rango de 0.0 a 2.0. En este caso, se requieren valores grandes para un buen rendimiento. Entre k1 = 1.0 y k1 = 6.0, el MAP aumenta en más del 15% bajo la cuantización estricta. Se observan mejoras similares bajo las cuantizaciones generalizada y SOG. Por el contrario, nuestro valor predeterminado de b = 0.75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de ajustar una amplia gama de valores bajo varias funciones de cuantización, seleccionamos los valores de k = 10.0 y b = 0.80 para nuestros experimentos de INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14 0.15 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 PrecisiónPromedioMedia (inex-2002) b estricto generalizado sog Figura 4: Impacto de b en la precisión promedio media de inex-2002 con k1 = 10 (temas CO de INEX 2003). 5. CONTROL DE SUPERPOSICIÓN Comenzando con una clasificación de elementos generada por el método de referencia descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición ajustando de forma iterativa las puntuaciones de aquellos elementos que contienen o están contenidos en elementos de clasificación más alta. A nivel conceptual, la reorganización procede de la siguiente manera: 1. Informe el elemento de rango más alto. Ajustar las puntuaciones de los elementos no reportados. 3. Repetir los pasos 1 y 2 hasta que se informen m elementos. Un enfoque para ajustar las puntuaciones de los elementos no informados en el paso 2 podría basarse en las puntuaciones Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que se informa un párrafo con una puntuación p en el paso 1. En el paso 2, la sección que contiene el párrafo podría tener su puntuación s reducida en una cantidad α · p para reflejar la contribución reducida que el párrafo debería hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan en contra de la combinación lineal de las puntuaciones de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociados con páginas web. Un enfoque común para este problema puntúa el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de ambos. Robertson et al. discuten las deficiencias teóricas en este enfoque y demuestran experimentalmente que puede perjudicar realmente la efectividad de la recuperación. En cambio, aplican los pesos a nivel de frecuencia de términos, donde la aparición de un término de consulta t en el título contribuye más al puntaje que una aparición en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces que t aparece en el título y zt es el número de veces que t aparece en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informan. La siguiente sección presenta y analiza un algoritmo de reordenamiento simple que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos informados se reduce por el mismo factor independientemente del número de elementos informados en los que aparezca. En la sección 8, el algoritmo se extiende para aplicar pesos crecientes, disminuyendo la puntuación, cuando un término aparece en más de un elemento informado. 6. ALGORITMO DE REORDENAMIENTO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados según sus puntuaciones iniciales de BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir solo aquellos nodos con puntuaciones BM25 distintas de cero, por lo que n puede ser considerablemente menor que |N|. La salida del algoritmo es una lista de los primeros m elementos, clasificados según sus puntajes ajustados. Un elemento está representado por el nodo x ∈ N en su raíz. Asociados con este nodo se encuentran campos que almacenan la longitud del elemento, las frecuencias de términos y otra información requerida por el algoritmo de re-ranking, de la siguiente manera: x.f - vector de frecuencia de términos x.g - ajustes de frecuencia de términos x.l - longitud del elemento x.score - puntaje actual de Okapi BM25 x.reported - bandera booleana, inicialmente falsa x.children - conjunto de nodos hijos x.parent - nodo padre, si existe Estos campos se llenan durante el proceso de clasificación inicial y se actualizan a medida que avanza el algoritmo. El vector x.f contiene información de frecuencia de términos correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y se actualiza por el algoritmo a medida que se informan elementos. El campo de puntuación contiene la puntuación BM25 actual para el elemento, la cual cambiará a medida que cambien los valores en x.g. El puntaje se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t ∈ Q, sea ft el componente de x.f correspondiente a t, y sea gt el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de reordenamiento, los nodos se almacenan en colas de prioridad, ordenadas por puntaje decreciente. Cada cola de prioridad PQ admite tres operaciones: PQ.front() - devuelve el nodo con la puntuación más alta, PQ.add(x) - agrega el nodo x a la cola, PQ.remove(x) - elimina el nodo x de la cola. Cuando se implementan utilizando estructuras de datos estándar, la operación front requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de reordenamiento se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los primeros m nodos reordenados en la cola de prioridad F. Después de inicializar F como vacío en la línea 1, el algoritmo recorre m veces las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al inicio de cada iteración, el nodo no reportado al frente de S tiene el mayor puntaje ajustado, y se elimina y se agrega a F. El algoritmo luego recorre el 1 F ← ∅ 2 para i ← 1 a m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reported ← true 6 F.add(x) 7 8 para cada y ∈ x.children hacer 9 Abajo (y) 10 fin hacer 11 12 si x no es un nodo raíz entonces 13 Arriba (x, x.parent) 14 fin si 15 fin hacer Figura 5: Algoritmo de Re-Ranking - Como entrada, el algoritmo toma una cola de prioridad S, que contiene nodos XML clasificados por sus puntajes iniciales, y devuelve sus resultados en la cola de prioridad F, clasificados por puntajes ajustados. 1 Arriba(x, y) ≡ 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recalcular y.score 5 S.add(y) 6 si y no es un nodo raíz entonces 7 Arriba (x, y.parent) 8 fin si 9 10 Abajo(x) ≡ 11 si no x.reported entonces 12 S.remove(x) 14 x.g ← x.f 15 recalcular x.score 16 si x.score > 0 entonces 17 F.add(x) 18 fin si 19 x.reported ← true 20 para cada y ∈ x.children hacer 21 Abajo (y) 22 fin hacer 23 fin si Figura 6: Rutinas de recorrido de árbol llamadas por el algoritmo de re-ranking. 0.0 0.02 0.04 0.06 0.08 0.10 0.12 0.14 0.16 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 0.25 0.26 0.27 0.28 0.29 0.30 0.31 0.32 0.33 0.34 0.35 0.36 PrecisiónPromedioMedia (inex-2002) GananciaAcumuladaXML(XCG) alfa MAP (estricto) MAP (generalizado) MAP (sog) XCG (sog2) Figura 7: Impacto de α en XCG y MAP inex-2002 (temas CO de INEX 2004; conjunto de evaluación I). nodos ancestros (líneas 8-10) y descendientes (líneas 12-14) ajustando los puntajes de estos nodos. Las rutinas de recorrido de árboles, Arriba y Abajo, se muestran en la figura 6. El procedimiento Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recalcula su puntuación y lo vuelve a agregar a S. El ajuste de los valores de frecuencia de término (línea 3) agrega a y.g solo las ocurrencias de términos no reportadas previamente en x. El recalculo de la puntuación en la línea 4 utiliza las ecuaciones 1 y 2. La rutina Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está completamente contenido en un elemento informado, su puntuación final puede ser calculada, y se elimina de S y se agrega a F. Para determinar la complejidad temporal del algoritmo, primero observe que un nodo puede ser un argumento de Down como máximo una vez. Posteriormente, la bandera reportada de su padre es verdadera. Durante cada llamada a Down, un nodo puede ser movido de S a F, lo que requiere un tiempo O(log n). Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, se elimina un nodo y cada uno de sus ancestros de una cola de prioridad y luego se vuelven a agregar a la cola de prioridad. Dado que un nodo puede tener como máximo h ancestros, donde h es la altura máxima de cualquier árbol en la colección, cada una de las m iteraciones requiere un tiempo de O(h log n). La combinación de estas observaciones produce una complejidad temporal general de O((n + mh) log n). En la práctica, volver a clasificar un conjunto de resultados de INEX requiere menos de 200 ms en una PC de escritorio de tres años de antigüedad. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 se ajusta adecuadamente a la perspectiva de superposición defendida por este documento. Sin embargo, cuando se toman en conjunto, proporcionan información sobre el comportamiento del algoritmo de reordenamiento. Los paquetes de evaluación de INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG fueron calculados utilizando el software proporcionado por sus inventores [11]. La Figura 7 representa juntas las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Los valores para estas métricas 0.0 0.02 0.04 0.06 0.08 0.10 0.12 0.14 0.16 0.18 0.20 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 Precisión Media Promedio (inex-2003) alfa estricto, superposición no considerada estricto, superposición considerada generalizado, superposición no considerada generalizado, superposición considerada Figura 8: Impacto de α en MAP inex-2003 (temas CO de INEX 2004; conjunto de evaluación I). se trazan para valores de α entre 0.0 y 1.0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es evidente. Los valores de MAP en un extremo (α = 0.0) y el valor de XCG en el otro extremo (α = 1.0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. La Figura 8 muestra los valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de la superposición. Una vez más, el conflicto es evidente, con la influencia de α considerablemente disminuida cuando se considera la superposición. 8. ALGORITMO EXTENDIDO Una limitación del algoritmo de reordenamiento es que se utiliza un único peso α para ajustar las puntuaciones tanto de los ancestros como de los descendientes de los elementos informados. Una extensión obvia es usar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente de cuántas veces un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección reportada y luego formar parte de un artículo reportado. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debería ser reducida aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de reordenamiento puede ser extendido con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥ ... ≥ βM ≥ 0, donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo reportado j veces. Ten en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que M sea relativamente pequeño (quizás 3 o 4). La Figura 9 presenta reemplazos para las rutinas de Subir y Bajar de la Figura 6, incorporando esta serie de pesas. Se requiere un campo adicional en cada nodo, de la siguiente manera: x.j - conteo descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que se llama a Down con x como su argumento. Al calcular la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) ≡ 2 si no y.reported entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recalcular y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.padre) 10 fin si 11 fin si 12 13 Down(x) ≡ 14 si x.j < M entonces 15 x.j ← x.j + 1 16 si no x.reported entonces 17 S.remove(x) 18 recalcular x.score 19 S.add(x) 20 fin si 21 para cada y ∈ x.hijos hacer 22 Down (y) 23 fin hacer 24 fin si Figura 9: Rutinas extendidas de recorrido de árbol. el peso a aplicar al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde ft y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender Up y Down. La rutina Up devuelve inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de términos ya han sido ajustadas en sus ancestros. El procedimiento Down no informa su argumento, sino que vuelve a calcular su puntuación y la agrega de nuevo a S. Un nodo no puede ser un argumento de Down más de M +1 veces, lo que a su vez implica una complejidad temporal total de O((nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad temporal también es O(nh log n). DISCUSIÓN CONCLUSIVA Al generar resultados de recuperación en una colección de XML, se debe tolerar cierta superposición en los resultados, lo cual puede ser beneficioso. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser informados al usuario, y los algoritmos de recuperación y las métricas de evaluación deben respetar esta relación. El algoritmo presentado en este documento controla la superposición ponderando los términos que aparecen en los elementos informados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando se presentan los resultados de recuperación de XML a los usuarios, puede ser deseable agrupar elementos relacionados estructuralmente juntos, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a lidiar con la superposición, la estrategia presentada en este documento sigue siendo aplicable, al determinar los mejores elementos para incluir en cada grupo. En Waterloo, seguimos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque en las estadísticas de documentos y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de los términos [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para calcular la métrica XCG, y gracias a Phil Tilker y Stefan B¨uttcher por su ayuda con la evaluación experimental. En parte, la financiación para este proyecto fue proporcionada por IBM Canadá a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Uniones de ramas holísticas: Coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional ACM SIGMOD 2002 sobre la Gestión de Datos, páginas 310-321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Masa y A. Soffer. Buscando documentos XML a través de fragmentos XML. En Actas de la 26ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información, páginas 151-158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos MultiText para INEX 2004. En Actas del Taller INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al esfuerzo del usuario de sistemas de recuperación sin unidad de recuperación predefinida. En las Actas de la Conferencia RIAO 2004, páginas 463-473, Aviñón, Francia, abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens y M. T. ¨Ozsu. Una traducción exhaustiva de XQuery a SQL utilizando codificación dinámica de intervalos. En Actas de la Conferencia Internacional ACM SIGMOD 2003 sobre la Gestión de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información, páginas 172-180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas y S. Malik, editores. Iniciativa para la Evaluación de la Recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl, Alemania, diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik y Zoltán Szlávik, editores. Iniciativa para la Evaluación de la Recuperación de XML. Actas del Tercer Taller (INEX 2004), Dagstuhl, Alemania, diciembre de 2004. Publicado como Avances en la Recuperación de Información XML, Notas de Conferencia en Ciencias de la Computación, volumen 3493, Springer, 2005. [9] K. J¨avelin y J. Kek¨al¨ainen. Evaluación basada en la ganancia acumulada de técnicas de recuperación de información. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbjörnsson. Normalización de longitud en la recuperación de XML. En Actas de la 27ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas y A. P. de Vries. El problema de superposición en la evaluación de la recuperación de XML orientada al contenido. En Actas de la 27ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas y A. P. de Vries. Pruebas de confiabilidad para las métricas XCG e inex-2002. En Actas del Taller INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek¨al¨ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En Actas del Taller INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. Indexación y clasificación configurables para la recuperación de información en XML. En Actas de la 27ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Masa y M. Mandelbrot. Recuperando los componentes XML más relevantes. En las Actas del Taller INEX 2003, Dagstuhl, Alemania, diciembre de 2003. [16] Y. Masa y M. Mandelbrot. Clasificación de componentes y refinamiento automático de consultas para la recuperación de XML. En Actas del Taller INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquicos para la recuperación de componentes XML. En Actas del Taller INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom y A. Vercoustre. Recuperación híbrida de XML revisitada. En Actas del Taller INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionando evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13ª Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, páginas 361-370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión simple de BM25 a múltiples campos ponderados. En Actas de la 13ª Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, páginas 42-50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Búsqueda automática, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia de Recuperación de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbjörnsson. NEXI, ahora y después. En Actas del Taller INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En Actas del Taller INEX 2004, 2004. Publicado en LNCS 3493 [8].