Apocrita: Un sistema de intercambio de archivos distribuido de igual a igual para intranets Joshua J. Reynolds, Robbie McLeod, Qusay H. Mahmoud Computación Distribuida y Tecnología Inalámbrica y de Telecomunicaciones Universidad de Guelph-Humber Toronto, ON, M9W 5L7 Canadá {jreyno04,rmcleo01,qmahmoud}@uoguelph.ca RESUMEN Muchas organizaciones necesitan redactar documentos para diversos fines, y es posible que estos documentos deban ser accesibles para todos los miembros de la organización. Este acceso puede ser necesario para editar o simplemente ver un documento. En algunos casos, estos documentos son compartidos entre autores, a través de correo electrónico, para ser editados. Esto puede causar fácilmente que se envíe una versión incorrecta o se creen conflictos entre múltiples usuarios que intentan hacer modificaciones a un documento. Incluso puede haber varios documentos diferentes en proceso de edición. El usuario puede verse en la necesidad de buscar un documento en particular, para lo cual algunas herramientas de búsqueda como Google Desktop pueden ser una solución para documentos locales, pero no encontrarán un documento en la máquina de otro usuario. Otro problema surge cuando un documento está disponible en la máquina de un usuario y ese usuario está desconectado, en cuyo caso el documento ya no es accesible. En este artículo presentamos Apocrita, un revolucionario sistema distribuido de intercambio de archivos P2P para intranets. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos - Aplicaciones Distribuidas. Términos generales Diseño, Experimentación, Rendimiento. 1. INTRODUCCIÓN El paradigma de computación Peer-to-Peer (P2P) se está convirtiendo en una forma completamente nueva de compartir recursos mutuos a través de Internet. Con el acceso cada vez más común a Internet de banda ancha, la tecnología P2P finalmente se ha convertido en una forma viable de compartir documentos y archivos multimedia. Ya existen programas en el mercado que permiten compartir archivos P2P. Estos programas permiten a millones de usuarios compartir archivos entre ellos. Si bien la utilización de clientes P2P ya es un gran avance en comparación con descargar archivos de sitios web, el uso de dichos programas no está exento de problemas. Los archivos descargados todavía requieren mucho manejo manual por parte del usuario. El usuario todavía necesita colocar los archivos en el directorio adecuado, gestionar archivos con múltiples versiones, eliminar los archivos cuando ya no se deseen. Nos esforzamos por hacer que el proceso de compartir documentos dentro de una Intranet sea más fácil. Muchas organizaciones están obligadas a redactar documentos para diversos fines, y dichos documentos pueden necesitar ser accesibles para todos los miembros de la organización. Este acceso puede ser necesario para editar o simplemente ver un documento. En algunos casos, estos documentos son enviados entre autores, por correo electrónico, para ser editados. Esto puede causar fácilmente que se envíe una versión incorrecta o que se creen conflictos entre múltiples usuarios que intentan hacer modificaciones a un documento. Puede haber incluso varios documentos diferentes en proceso de edición. El usuario puede verse en la necesidad de buscar un documento en particular, para lo cual algunas herramientas de búsqueda como Google Desktop pueden ser una solución para documentos locales, pero no encontrarán un documento en la máquina de otro usuario. Además, algunas organizaciones no cuentan con un servidor de intercambio de archivos o la infraestructura de red necesaria para habilitar uno. En este artículo presentamos Apocrita, que es un sistema de intercambio de archivos P2P distribuido y rentable para dichas organizaciones. El resto de este documento está organizado de la siguiente manera. En la sección 2, presentamos Apocrita. El mecanismo de indexación distribuida y el protocolo se presentan en la Sección 3. La sección 4 presenta el modelo de distribución peer-to-peer. Se presenta un prototipo de prueba de concepto en la Sección 5, y las evaluaciones de rendimiento se discuten en la Sección 6. El trabajo relacionado se presenta en la Sección 7, y finalmente las conclusiones y el trabajo futuro se discuten en la Sección 8. Apocrita es un sistema de intercambio de archivos entre pares distribuido, y ha sido diseñado para facilitar la búsqueda de documentos en un entorno de Intranet. Actualmente, es posible que los documentos se encuentren en la máquina de un usuario o en una máquina remota. Es incluso posible que diferentes revisiones puedan residir en cada nodo de la Intranet. Esto significa que debe haber un proceso manual para mantener las versiones de los documentos. Apocrita resuelve este problema utilizando dos enfoques. Primero, debido a la naturaleza inherente de Apocrita, el documento solo residirá en una ubicación lógica única. En segundo lugar, Apocrita proporciona un método para revertir a versiones anteriores de documentos. Se concede el permiso de hacer copias digitales o impresas de todo o parte de este trabajo para uso personal o en el aula sin cargo alguno, siempre y cuando las copias no se realicen ni distribuyan con fines de lucro o ventaja comercial, y que las copias lleven este aviso y la cita completa en la primera página. Para copiar de otra manera, o republicar, publicar en servidores o redistribuir en listas, se requiere permiso específico previo y/o un pago. ACMSE07, 23-24 DE MARZO DE 2007, WINSTON-SALEM, NC, EE. UU. COPYRIGHT 2007 ACM 978-1-59593-629-5/07/0003 …$5.00. 174 también distribuirá documentos en múltiples máquinas para garantizar la alta disponibilidad de documentos importantes. Por ejemplo, si una máquina contiene un documento importante y actualmente no es accesible, el sistema es capaz de mantener la disponibilidad del documento a través de este mecanismo de distribución. Proporciona una interfaz sencilla para buscar y acceder a archivos que pueden existir tanto local como remotamente. La naturaleza distribuida de los documentos es transparente para el usuario. Apocrita apoya un modelo de red descentralizada en el que los pares utilizan un protocolo de descubrimiento para determinar los pares. Apocrita está destinado para usuarios de red en una Intranet. El enfoque principal son las organizaciones que pueden no tener una red lo suficientemente grande como para necesitar un servidor de archivos y la infraestructura de soporte. Elimina la necesidad de que los documentos sean compartidos manualmente entre usuarios mientras se editan y reduce la posibilidad de que se distribuyan versiones conflictivas. El sistema también proporciona cierta redundancia y en caso de fallo de una máquina, no se perderán documentos importantes. Es independiente del sistema operativo y fácil de acceder a través de un navegador web o mediante una aplicación independiente. Para disminuir el tiempo requerido para indexar una gran cantidad de documentos, el proceso de indexación se distribuye entre los nodos inactivos disponibles. Los archivos locales y remotos deben ser fácilmente accesibles a través de un sistema de archivos virtual montable, proporcionando transparencia para los usuarios. Apocrita utiliza un índice distribuido para todos los documentos disponibles en la intranet. Cada nodo contendrá una parte del índice completo y estará al tanto de qué parte del índice tiene cada otro nodo. Un nodo podrá contactar a cada nodo que contenga una porción única del índice. Además, cada nodo tiene un índice local separado de sus propios documentos. Pero como se discutió más tarde, en la implementación actual, cada nodo tiene una copia de todo el índice. La indexación de los documentos está distribuida. Por lo tanto, si un nodo está en proceso de indexar muchos documentos, distribuirá el trabajo entre los nodos. Una vez que el índice local de un nodo se actualiza con los nuevos documentos, entonces se actualizará el índice distribuido. El sistema de indexación distribuida actual consta de tres módulos separados: NodeController, FileSender y NodeIndexer. La responsabilidad de cada módulo se discute más adelante en esta sección. 3.1 Protocolo de indexación El protocolo que hemos diseñado para la indexación distribuida se muestra en la Figura 1. Figura 1. Protocolo de indexación distribuida Apocrita. La CONSULTA INACTIVA se envía desde el nodo iniciador para determinar qué otros nodos pueden ayudar con el proceso de indexación en general. No se enviaron parámetros con el comando. El nodo receptor responderá con un comando BUSY o IDLE. Si se recibe el comando IDLE, el nodo iniciador agregará el nodo que responde a una lista de ayudantes de indexación distribuida disponibles. En caso de recibir un comando OCUPADO, el nodo que responde es ignorado. OCUPADO: Una vez que un nodo recibe una CONSULTA IDL, determinará si puede considerarse un candidato para la indexación distribuida. Esta determinación se basa en el uso general de la CPU del nodo. Si el nodo está utilizando la mayor parte de su CPU para otros procesos, el nodo responderá a la CONSULTA DE INACTIVIDAD con un comando OCUPADO. Como en el caso de la respuesta BUSY, el nodo que recibe la CONSULTA DE INACTIVIDAD determinará su elegibilidad para la indexación distribuida. Para ser considerado un candidato para la indexación distribuida, el uso total de la CPU debe ser mínimo para permitir la indexación dedicada de los documentos distribuidos. Si este es el caso, el nodo responderá con un comando IDLE. ARCHIVO ENTRANTE: Una vez que el nodo iniciador reúne un conjunto de nodos inactivos para ayudar con la indexación distribuida, dividirá los documentos que se enviarán a los nodos. Para hacer esto, envía un mensaje de ARCHIVO ENTRANTE, que contiene el nombre del archivo y su tamaño en bytes. Después de que se haya enviado el comando ARCHIVO ENTRANTE, el nodo iniciador comenzará a transmitir el archivo al otro nodo. El nodo iniciador recorrerá los archivos que se enviarán al otro nodo; cada flujo de archivo estará precedido por el comando ARCHIVO ENTRANTE con los parámetros apropiados. ARCHIVO DE ÍNDICE: Una vez que el nodo de indexación haya completado el proceso de indexación del conjunto de archivos, debe enviar el índice resultante de vuelta al nodo iniciador. El índice está compuesto por varios archivos, que existen en el sistema de archivos del nodo de indexación. Al igual que con el comando INCOMING FILE, el nodo de indexación transmite cada archivo de índice después de enviar un comando INDEX FILE. El comando INDEX FILE tiene dos parámetros: el primero es el nombre del índice y el segundo es el tamaño del archivo en bytes. Al enviar los conjuntos de archivos tanto para el índice como para los archivos a ser indexados, el nodo debe notificar al nodo correspondiente cuando el proceso esté completo. Una vez que el nodo iniciador haya terminado de enviar el conjunto de documentos a ser indexados, enviará entonces un comando de ENVÍO COMPLETO indicando al nodo de indexación que no hay más archivos y que el nodo puede proceder con la indexación de los archivos. En el caso de que el nodo iniciador envíe los archivos de índice, el nodo de indexación completará la transferencia con el comando ENVIAR COMPLETO indicando al nodo iniciador que no hay más archivos de índice por enviar y que el nodo iniciador puede entonces ensamblar esos archivos de índice en el índice principal. El NodeController es responsable de establecer conexiones con nodos en estado de reposo para distribuir el proceso de indexación. Usando JXTA [5], el controlador de nodos obtendrá un conjunto de nodos. Este conjunto de nodos se itera y a cada uno se le envía el comando IDLE QUERY. Los nodos que responden con inactividad son luego recopilados. El conjunto de nodos inactivos incluye al nodo que inicia el proceso de indexación distribuida, conocido como nodo local. Una vez que se obtiene la colección de nodos inactivos, el nodo actualiza el conjunto de controladores y divide equitativamente el conjunto de documentos que se van a indexar. Por ejemplo, si hay 100 documentos y 10 nodos (incluyendo el nodo local) entonces cada nodo tendrá 10 documentos para indexar. Para cada nodo de indexación se crea una instancia del objeto FileSender. El FileSender es consciente del conjunto de documentos de los que el nodo es responsable. Una vez que se ha creado un objeto FileSender para cada nodo, el NodeController espera a que cada FileSender termine. Cuando los objetos FileSender hayan completado, el NodeController tomará los índices resultantes de 175 nodos y los pasará a una instancia del IndexCompiler, que mantiene el índice y la lista de FileSenders. Una vez que el IndexCompiler haya completado, volverá al estado inactivo y activará el escáner de directorios para monitorear el conjunto de documentos de propiedad local en busca de cambios que puedan requerir reindexación. El NodeIndexer es responsable de recibir los documentos enviados por el nodo iniciador y luego indexarlos utilizando el motor Lucene [7]. Una vez que se completa el indexado, el índice resultante se transmite de vuelta al nodo iniciador y se compila en el índice local del propio nodo indexador. Antes de iniciar el proceso de indexación, se debe enviar un mensaje de CONSULTA INACTIVA. Esta es la primera orden que inicia el proceso de indexación. El nodo indexador determinará si se considera inactivo en función del uso actual de la CPU. Como se describe en la sección del protocolo, si el nodo no se está utilizando y tiene un bajo porcentaje de uso de CPU en general, devolverá IDLE al comando de CONSULTA DE INACTIVIDAD. Si el uso de la CPU de los nodos del indexador está por encima del 50% durante un período de tiempo especificado, se considerará ocupado y responderá al comando IDLE QUERY con BUSY. Si un nodo se determina ocupado, vuelve a su estado de escucha esperando otra CONSULTA INACTIVA de otro nodo iniciador. Si se determina que el nodo está inactivo, entrará en el estado en el que recibirá archivos del nodo iniciador de los que es responsable de indexar. Una vez que todos los archivos son recibidos por el nodo iniciador, indicado por un mensaje de ENVÍO COMPLETO, se inicia una instancia del motor de indexación de Lucene. Los archivos se almacenan en un directorio temporal separado de los documentos locales de los nodos que son responsables de mantener un índice de los mismos. El escritor de índices de Lucene indexa luego todos los archivos transferidos. El índice se almacena en la unidad dentro de un directorio temporal separado del índice actual. Después de que se completa la indexación de los archivos, el nodo indexador entra en el estado en el que los archivos de índice son enviados de vuelta al nodo iniciador. El nodo indexador recorre todos los archivos creados por Lucene's IndexWriter y los transmite al nodo iniciador. Una vez que estos archivos son devueltos, ese índice se fusiona en el índice completo de los nodos indexadores de los archivos existentes. Luego entra en el estado de espera, donde escuchará a otros nodos que requieran distribuir el proceso de indexación. El objeto FileSender es el nodo iniciador equivalente al nodo indexador. Inicia la comunicación entre el nodo iniciador y el nodo que ayudará en la indexación distribuida. El nodo iniciador ejecuta muchas instancias del nodo FileSender, una para cada otro nodo que haya determinado que está inactivo. Al instanciar el FileSender se le pasa el nodo al que es responsable de contactar y el conjunto de archivos que deben ser enviados. El primer trabajo de FileSenders es enviar los archivos que deben ser indexados por el otro nodo inactivo. Los archivos se transmiten uno a la vez al otro nodo. Envía cada archivo utilizando el comando ARCHIVO ENTRANTE. Con ese comando se envía el nombre del archivo que se está enviando y el tamaño en bytes. Una vez que todos los archivos hayan sido enviados, el FileSender envía el comando de ENVÍO COMPLETADO. El FileSender crea una instancia de Lucene's IndexWriter y se prepara para crear el índice en un directorio temporal en el sistema de archivos. El FileSender comenzará a recibir los archivos que se guardarán dentro del índice. Recibe un comando de ARCHIVO DE ÍNDICE con el nombre de los archivos y el tamaño en bytes. Este archivo se transmite luego al directorio de índice temporal en el nodo de FileSender. Después de que se haya completado la transferencia de los archivos de índice, el FileSender notifica a la instancia del compilador de índices que está lista para combinar el índice. Cada instancia del FileSender tiene su propia sección única de espacio temporal para almacenar el índice que ha sido transferido desde el nodo de indexación. Al notificar al IndexCompiler, también pasará la ubicación del directorio particular de FileSenders de ese índice. 4. Apocrita utiliza un modelo de distribución peer-to-peer para distribuir archivos. Los archivos se distribuyen únicamente desde un nodo servidor a un nodo cliente sin tener en cuenta la disponibilidad de las partes de archivo de otros clientes en la red. Esto significa que las transferencias de archivos serán rápidas y eficientes y no deberían afectar severamente la usabilidad de los nodos de servicio desde el punto de vista de un usuario local. El marco de trabajo JXTA se utiliza para implementar funcionalidades peer-to-peer. Esto se ha decidido debido al plazo extremadamente corto del proyecto, lo que nos permite aprovechar más de cinco años de pruebas y desarrollo, así como el apoyo de muchas organizaciones grandes que emplean JXTA en sus propios productos. No estamos preocupados por posibles problemas de calidad porque JXTA se considera el marco de pares a pares más maduro y estable disponible. Usando la terminología de JXTA, hay tres tipos de pares utilizados en la clasificación de nodos. Los pares de borde suelen ser nodos de baja capacidad de ancho de banda y no dedicados. Debido a estas características, los pares de borde no se utilizan con Apocrita. Los nodos de retransmisión suelen ser nodos dedicados de mayor ancho de banda. Esta es la clasificación de todos los nodos en la red de Apocrita, y, como tal, es la clasificación predeterminada utilizada. Los pares de encuentro se utilizan para coordinar el intercambio de mensajes entre nodos en la red de Apocrita. Esto significa que se requiere un mínimo de un par de encuentro por subred. 4.1 Descubrimiento de pares El subsistema del servidor Apocrita utiliza el Protocolo de Descubrimiento de Pares (PDP) de JXTA para encontrar pares participantes dentro de la red, como se muestra en la Figura 2. Figura 2. El proceso de descubrimiento de pares de Apocrita. 176 El PDP escucha los anuncios de pares de otros nodos en el enjambre de Apocrita. Si se detecta un anuncio de pares, el servidor intentará unirse al grupo de pares y comenzar a contribuir activamente a la red. Si el servicio de descubrimiento no encuentra pares, el servidor creará un nuevo grupo de pares y comenzará a anunciar este grupo de pares. Este nuevo grupo de pares se anunciará periódicamente en la red; cualquier nuevo par que se una a la red se conectará a este grupo de pares. Una ventaja distintiva de usar el PDP de JXTA es que Apocrita no tiene que ser sensible a matices de redes particulares como la Unidad de Transmisión Máxima (MTU). Además, Apocrita no tiene que admitir métodos de entrega de paquetes uno a muchos, como la multidifusión, y en su lugar puede depender de JXTA para este soporte. Operación de consulta de índice 4.2 Todos los nodos en el enjambre de Apocrita tienen una copia completa y actualizada del índice de red almacenado localmente. Esto hace que la consulta del índice para obtener resultados de búsqueda sea trivial. A diferencia del protocolo Gnutella, una consulta no tiene que propagarse por toda la red. Esto también significa que el tiempo para devolver los resultados de la consulta es muy rápido, mucho más rápido que los protocolos que dependen de los nodos en la red para pasar la consulta a lo largo de la red y luego esperar los resultados. Esto se demuestra en la Figura 3. Figura 3. Operación de consulta de Apocrita. Cada documento en el enjambre tiene un número de identificación único (ID) para el documento. Un nodo consultará el índice y se devolverá un resultado con el número de identificación del documento, así como una lista de pares con una copia del documento coincidente. Es entonces responsabilidad del par que busca contactar a los pares de la lista para negociar la transferencia de archivos entre el cliente y el servidor. IMPLEMENTACIÓN DEL PROTOTIPO Apocrita utiliza el marco de trabajo Lucene [7], el cual es un proyecto en desarrollo por la Fundación de Software Apache. Apache Lucene es una biblioteca de motor de búsqueda de texto de alto rendimiento y con todas las funciones, escrita completamente en Java. En la implementación actual, Apocrita solo es capaz de indexar documentos de texto plano. Apocrita utiliza el marco de trabajo JXTA [5] como una biblioteca de transporte peer-to-peer entre nodos. JXTA se utiliza para pasar tanto mensajes como archivos entre nodos en la red de búsqueda. Al utilizar JXTA, Apocrita aprovecha un mecanismo de transporte peer-to-peer confiable y probado. Utiliza la facilidad de tuberías para pasar mensajes y archivos entre nodos. La instalación de tuberías ofrece muchos tipos diferentes de anuncios de tuberías. Esto incluye un conducto unicast no seguro, un conducto unicast seguro y un conducto no seguro propagado. El paso de mensajes se utiliza para enviar mensajes de estado entre nodos con el fin de ayudar en la indexación, búsqueda y recuperación. Por ejemplo, un nodo que intenta encontrar un nodo inactivo para participar en la indexación consultará a otros nodos a través de la facilidad de mensajes. Los nodos inactivos responderán con un mensaje de estado para indicar que están disponibles para comenzar a indexar. La transferencia de archivos se utiliza dentro de Apocrita para la transferencia de archivos. Después de que un archivo haya sido buscado y localizado dentro del grupo de pares, se abrirá un socket JXTA y se llevará a cabo la transferencia de archivos. Un socket JXTA es similar a un socket Java estándar, sin embargo un socket JXTA utiliza tuberías JXTA en el transporte de red subyacente. El paso de archivos utiliza un conducto unicast no seguro para transferir datos. La transferencia de archivos también se utiliza dentro de Apocrita para la transferencia de índices. La transferencia de índice funciona exactamente igual que la transferencia de archivos. De hecho, la transferencia de índice realmente pasa el índice como un archivo. Sin embargo, hay una diferencia clave entre la transferencia de archivos y la transferencia de índices. En el caso de la transferencia de archivos, se crea un socket entre solo dos nodos. En el caso de la transferencia de índices, se debe crear un socket entre todos los nodos de la red para pasar el índice, lo que permite que todos los nodos tengan un índice completo y total de toda la red. Para facilitar esta transferencia de manera eficiente, la transferencia de índices utilizará un tubo propagado no seguro para comunicarse con todos los nodos en la red de Apocrita. 6. EVALUACIÓN DEL RENDIMIENTO Es difícil comparar objetivamente los resultados obtenidos a través de Apocrita porque no hay otro sistema disponible actualmente con los mismos objetivos que Apocrita. Sin embargo, hemos evaluado el rendimiento de las secciones críticas del sistema. Las secciones críticas fueron determinadas como los procesos que requieren más tiempo. La evaluación se completó en computadoras de laboratorio estándar en una LAN Ethernet de 100Mb/s; las máquinas ejecutan Windows XP con un CPU Pentium 4 funcionando a 2.4GHz con 512 MB de RAM. El tiempo de indexación se ha ejecutado tanto en la colección de la revista Time [8], que contiene 432 documentos y 83 consultas con sus resultados más relevantes, como en la colección NPL [8], que tiene un total de 11,429 documentos y 93 consultas con resultados esperados. Cada documento tiene un tamaño que oscila entre 4KB y 8KB. Como muestra la Figura 4, el número de nodos involucrados en el proceso de indexación afecta el tiempo necesario para completar el proceso de indexación, a veces de manera drástica. Figura 4. Tiempo de nodo vs. tiempo de índice. La diferencia al pasar de un nodo de indexación a dos nodos de indexación es la más drástica y equivale a un tiempo de indexación un 37% más rápido que un solo nodo de indexación. La diferencia entre dos nodos de indexación y tres nodos de indexación sigue siendo significativa y representa un tiempo un 16% más rápido que dos nodos de indexación. A medida que aumenta el número de nodos de indexación, los resultados son menos dramáticos. Esto se puede atribuir al tiempo adicional asociado con tener muchos nodos realizando indexación. El tiempo necesario para comunicarse con un nodo es constante, por lo que a medida que aumenta el número de nodos, esta constante se vuelve más predominante. Además, la complejidad de unir los resultados de indexación es una operación compleja y se complica aún más a medida que aumenta el número de nodos de indexación. El rendimiento del socket también es una parte muy importante de Apocrita. Se realizaron pruebas de rendimiento utilizando un archivo de 65MB en un sistema con el cliente y el servidor ejecutándose localmente. Esto se hizo para aislar posibles problemas de red. Aunque menos drásticos, se mostraron resultados similares cuando el cliente y el servidor se ejecutan en hardware independiente. Para mitigar posibles errores inesperados, cada prueba se ejecutó 10 veces. Figura 5. Sockets de Java vs. sockets de JXTA. Como muestra la Figura 5, el rendimiento de los sockets JXTA es pésimo en comparación con el rendimiento de los sockets estándar de Java. La tasa de transferencia mínima obtenida utilizando sockets de Java es de 81,945KB/s, mientras que la tasa de transferencia mínima obtenida utilizando sockets de JXTA es mucho menor, de 3,805KB/s. La tasa de transferencia máxima obtenida usando sockets de Java es de 97,412KB/s, mientras que la tasa de transferencia máxima obtenida usando sockets de JXTA es de 5,530KB/s. Finalmente, la tasa de transferencia promedio utilizando sockets de Java es de 87,540KB/s, mientras que la tasa de transferencia promedio utilizando sockets de JXTA es de 4,293KB/s. El problema principal encontrado en estos benchmarks es que el mecanismo de transporte de red subyacente no funciona tan rápido o eficientemente como se esperaba. Para obtener un aumento en el rendimiento, el marco de trabajo JXTA necesita ser sustituido por un enfoque más tradicional. El tiempo de indexación también es un cuello de botella y deberá mejorarse para que la calidad general de Apocrita mejore. 7. TRABAJO RELACIONADO Existen hoy varios sistemas descentralizados P2P [1, 2, 3] que Apocrita incluye algunas de sus funcionalidades. Sin embargo, Apocrita también cuenta con características únicas de búsqueda e indexación novedosas que hacen que este sistema sea único. Por ejemplo, Majestic-12 [4] es un proyecto de búsqueda e indexación distribuida diseñado para buscar en Internet. Cada usuario instalaría un cliente, el cual es responsable de indexar una parte de la web. Una área central para consultar el índice está disponible en la página web de Majestic-12. El índice en sí no se distribuye, solo la acción de indexar se distribuye. El aspecto de indexación distribuida de este proyecto se relaciona más estrechamente con los objetivos de Apocrita. YaCy es una aplicación de búsqueda web peer-to-peer. YaCy consta de un rastreador web, un indexador, un motor de base de datos incorporado y un protocolo de intercambio de índices p2p. YaCy está diseñado para mantener un índice distribuido de Internet. Utilizaba una tabla hash distribuida (DHT) para mantener el índice. El nodo local se utiliza para hacer consultas, pero todos los resultados que se devuelven son accesibles en Internet. YaCy utilizó muchos pares y DHT para mantener un índice distribuido. Apocrita también utilizará un índice distribuido en futuras implementaciones y podría beneficiarse de utilizar una implementación de un DHT. Sin embargo, YaCy está diseñado como un motor de búsqueda web y, por lo tanto, resuelve un problema muy diferente al de Apocrita. 8. CONCLUSIONES Y TRABAJO FUTURO Presentamos Apocrita, un sistema distribuido de búsqueda e indexación P2P destinado a usuarios de redes en una intranet. Puede ayudar a las organizaciones que no cuentan con un servidor de archivos en red o con la infraestructura de red necesaria para compartir documentos. Elimina la necesidad de que los documentos sean compartidos manualmente entre usuarios mientras se editan y reduce la posibilidad de que se distribuyan versiones conflictivas. Se ha construido un prototipo de prueba de concepto, pero los resultados de medir el mecanismo de transporte de red y el tiempo de indexación no fueron tan impresionantes como se había imaginado inicialmente. A pesar de estas deficiencias, la experiencia adquirida en el diseño e implementación de Apocrita nos ha brindado una mayor comprensión sobre la construcción de sistemas distribuidos desafiantes. Para trabajos futuros, Apocrita contará con un modelo inteligente de distribución de contenido en el que una única instancia de un archivo puede replicarse de manera inteligente y transparente en toda la red para garantizar que una copia de cada archivo importante esté siempre disponible independientemente de la disponibilidad de nodos específicos en la red. Además, planeamos integrar un sistema de control de revisiones en la parte de distribución de contenido de Apocrita para que los usuarios puedan actualizar un archivo existente que encontraron y mantener la revisión antigua, propagando la nueva revisión. Finalmente, la implementación actual tiene cierto sobrecosto y redundancia debido a que se mantiene todo el índice en cada nodo individual, planeamos diseñar un índice distribuido. 9. REFERENCIAS [1] Rodrigues, R., Liskov, B., Shrira, L.: El diseño de un sistema peer-to-peer robusto. Disponible en línea: http://www.pmg.lcs.mit.edu/~rodrigo/ew02-robust.pdf. [2] Chawathe, Y., Ratnasamy, S., Breslau, L., Lanham, N., y Chenker, S.: Haciendo escalables los sistemas P2P similares a Gnutella. En Actas de SIGCOMM03, Karlsruhe, Alemania. [3] Harvest: Un Sistema de Búsqueda Distribuida: http://harvest.sourceforge.net. [4] Majestic-12: Motor de Búsqueda Distribuido: http://www.majestic12.co.uk. [5] JXTA: http://www.jxta.org. [6] YaCy: Indexación Web Distribuida basada en P2P: http://www.yacy.net/yacy. [7] Biblioteca del Motor de Búsqueda Lucene: http://lucene.apache.org. [8] Colecciones de Pruebas (Time Magazine y NPL): www.dcs.gla.ac.uk/idom/ir_resources/test_collections. 178