Esquema de indexación basado en la ubicación para DAYS Debopam Acharya y Vijay Kumar 1 Ciencias de la Computación e Informática Universidad de Missouri-Kansas City Kansas City, MO 64110 dargc(kumarv)@umkc.edu RESUMEN La diseminación de datos a través de canales inalámbricos para la difusión de información a los consumidores se está volviendo bastante común. Se han propuesto muchos esquemas de difusión, pero la mayoría de ellos envían datos a canales inalámbricos para consumo general. La difusión basada en empuje es fundamentalmente asimétrica, es decir, el volumen de datos es mayor del servidor a los usuarios que de los usuarios de regreso al servidor. El esquema basado en empuje requiere cierto indexado que indique cuándo se transmitirán los datos y su posición en la transmisión. La latencia de acceso y el tiempo de ajuste son los dos parámetros principales que se pueden utilizar para evaluar un esquema de indexación. Dos de los esquemas de indexación importantes propuestos anteriormente fueron basados en árboles y los esquemas de indexación exponencial. Ninguno de estos esquemas pudo abordar los requisitos de los datos dependientes de la ubicación (LDD), que es una característica altamente deseable de la difusión de datos. En este artículo, discutimos la difusión de LDD en nuestro proyecto DAta in Your Space (DAYS) y proponemos un esquema para indexar LDD. Sostenemos que este esquema, cuando se aplica a LDD, mejora significativamente el rendimiento en términos de tiempo de ajuste en comparación con los esquemas mencionados anteriormente. Demostramos nuestro argumento con la ayuda de los resultados de la simulación. Categorías y Descriptores de Asignaturas H.3.1 [Sistemas de Información]: Almacenamiento y recuperación de información - análisis de contenido e indexación; H.3.3 [Sistemas de Información]: Almacenamiento y recuperación de información - búsqueda y recuperación de información. Términos generales Algoritmos, Rendimiento, Experimentación 1. La difusión inalámbrica de datos es una forma económica y eficiente de poner a disposición de un gran número de usuarios móviles o estáticos los datos deseados. El modo de transferencia de datos es esencialmente asimétrico, es decir, la capacidad de transferencia de datos (comunicación descendente) desde el servidor hacia el cliente (usuario móvil) es significativamente mayor que la del cliente o usuario móvil hacia el servidor (comunicación ascendente). La efectividad de un sistema de difusión de datos se juzga por su capacidad para proporcionar al usuario los datos requeridos en cualquier lugar y en cualquier momento. Una de las mejores formas de lograr esto es a través de la difusión de Servicios Basados en la Localización (LBS) altamente personalizados que permiten a los usuarios acceder a datos personalizados dependientes de la ubicación. Un ejemplo sería alguien usando su dispositivo móvil para buscar un restaurante vegetariano. La aplicación de LBS interactuaría con otros componentes de tecnología de ubicación o utilizaría la entrada de los usuarios móviles para determinar la ubicación de los usuarios y descargar la información sobre los restaurantes cercanos al usuario sintonizando el canal inalámbrico que está difundiendo LDD. Observamos una implementación limitada de LBS por parte de algunos proveedores de servicios. Pero hay todas las indicaciones de que con el tiempo algunos de los problemas técnicos complejos como el marco de ubicación uniforme, el cálculo y seguimiento de ubicaciones en todo tipo de lugares, la posicionamiento en diversos entornos, aplicaciones de ubicación innovadoras, etc., se resolverán y los servicios basados en la localización (LBS) se convertirán en una facilidad común y ayudarán a mejorar la productividad del mercado y la comodidad del cliente. En nuestro proyecto llamado DAYS, utilizamos un mecanismo de transmisión de datos inalámbricos para enviar LDD a los usuarios, quienes monitorean y ajustan el canal para encontrar y descargar los datos requeridos. Una simple transmisión, sin embargo, es probable que cause una degradación significativa del rendimiento en los dispositivos móviles con restricciones energéticas y una solución común a este problema es el uso de indexación aérea eficiente. El enfoque de indexación almacena información de control que le indica al usuario la ubicación de los datos en la transmisión y cómo y cuándo podría acceder a ellos. Un usuario de móvil, por lo tanto, tiene algo de tiempo libre para entrar en el modo de suspensión que conserva energía valiosa. También permite al usuario personalizar su propio dispositivo móvil ajustando selectivamente la información de su elección. La eficiencia de acceso y la conservación de energía son los dos problemas significativos para los sistemas de difusión de datos. La eficiencia de acceso se refiere a la latencia experimentada desde que se inicia una solicitud hasta que se recibe la respuesta. La conservación de energía se refiere al uso eficiente de la energía limitada del dispositivo móvil para acceder a datos de transmisión. Dos parámetros que afectan a estos son el tiempo de ajuste y la latencia de acceso. El tiempo de ajuste se refiere al tiempo durante el cual la unidad móvil (MU) permanece en estado activo para sintonizar el canal y descargar los datos requeridos. También se puede definir como el número de contenedores ajustados por el dispositivo móvil en estado activo para obtener sus datos requeridos. La latencia de acceso puede definirse como el tiempo transcurrido desde que se emitió una solicitud hasta que se recibió la respuesta. Este estudio fue apoyado por una subvención de la NSF IIS-0209170. Varios esquemas de indexación han sido propuestos en el pasado y los más destacados entre ellos son los esquemas de indexación basados en árboles y los esquemas de indexación exponencial [17]. Las principales desventajas de los esquemas basados en árboles son que se basan en estructuras de árbol centralizadas. Para iniciar una búsqueda, el MU tiene que esperar hasta que llegue a la raíz del siguiente árbol de difusión. Esto afecta significativamente el tiempo de ajuste de la unidad móvil. Los esquemas exponenciales facilitan la replicación de índices al compartir enlaces en diferentes árboles de búsqueda. Para emisiones con un gran número de páginas, se ha demostrado que el esquema exponencial tiene un rendimiento similar a los esquemas basados en árboles en cuanto a la latencia de acceso. Además, la longitud promedio de la transmisión aumenta debido a la replicación del índice y esto puede causar un aumento significativo en la latencia de acceso. Ninguno de los esquemas de indexación anteriores es igualmente efectivo en la difusión de datos dependientes de la ubicación. Además de proporcionar baja latencia, carecen de propiedades que se utilizan para abordar problemas de LDD. Proponemos un esquema de indexación en DAYS que se encarga de algunos de estos problemas. Mostramos con resultados de simulación que nuestro esquema supera a algunos de los esquemas de indexación anteriores para la difusión de LDD en términos de tiempo de ajuste. El resto del documento se presenta de la siguiente manera. En la sección 2, discutimos trabajos previos relacionados con la indexación de datos de transmisión. La sección 3 describe nuestra arquitectura DAYS. Los datos dependientes de la ubicación, su generación y posterior transmisión se presentan en la sección 4. La sección 5 discute nuestro esquema de indexación en detalle. La simulación de nuestro esquema y su evaluación de rendimiento se presenta en la sección 6. La sección 7 concluye el artículo y menciona trabajos futuros relacionados. 2. TRABAJO PREVIO Varias técnicas de indexación basadas en disco se han utilizado para la indexación aérea. Imielinski et al. [5, 6] aplicaron el árbol de índice B+, donde los nodos hoja almacenan los tiempos de llegada de los elementos de datos. El método de indexación distribuida fue propuesto para replicar y distribuir eficientemente el árbol de índices en una difusión. Específicamente, el árbol de índice se divide en una parte replicada y una parte no replicada. Cada transmisión consta de la parte replicada y la parte no replicada que indexa los elementos de datos que le siguen inmediatamente. Por lo tanto, cada nodo en la parte no replicada aparece solo una vez en una difusión y, por lo tanto, reduce el costo de replicación y la latencia de acceso al tiempo que logra un buen tiempo de ajuste. Chen et al. [2] y Shivakumar et al. [8] consideraron estructuras de árbol desequilibradas para optimizar el consumo de energía para el acceso de datos no uniforme. Estas estructuras minimizan el costo promedio de búsqueda de índices al reducir el número de búsquedas de índices para datos calientes a expensas de gastar más en datos fríos. Tan y Yu discutieron la organización de datos e índices bajo el Hashing de difusión sesgado y también se han sugerido métodos de firma para la difusión inalámbrica que admiten consultas de igualdad [9]. Se propuso un método de indexación flexible en [5]. El índice flexible primero ordena los elementos de datos en orden ascendente (o descendente) de los valores clave de búsqueda y luego los divide en p segmentos. El primer cubo en cada segmento de datos contiene un índice de control, que es un índice binario que mapea un valor de clave dado al segmento que contiene esa clave, y un índice local, que es un índice de m entradas que mapea un valor de clave dado a los cubos dentro del segmento actual. Al ajustar los parámetros de p y m, los clientes móviles pueden lograr un buen tiempo de ajuste o una buena latencia de acceso. Otra técnica de indexación propuesta es el esquema de indexación exponencial [17]. En este esquema, se utiliza un índice parametrizado, llamado índice exponencial, para optimizar la latencia de acceso o el tiempo de ajuste. Facilita la replicación de índices al vincular diferentes árboles de búsqueda. Todos los esquemas mencionados anteriormente se han aplicado a datos que no están relacionados entre sí. Estos datos no relacionados pueden ser agrupados o no agrupados. Sin embargo, ninguno de ellos ha abordado específicamente los requisitos de LDD. Los datos dependientes de la ubicación son datos que están asociados con una ubicación. Actualmente hay varias aplicaciones que tratan con LDD [13, 16]. Casi todos ellos representan LDD con la ayuda de estructuras jerárquicas [3, 4]. Esto se basa en la propiedad de contención de datos dependientes de la ubicación. La propiedad de Contención ayuda a determinar la posición relativa de un objeto al definir o identificar las ubicaciones que contienen esos objetos. Las ubicaciones subordinadas están relacionadas jerárquicamente entre sí. Por lo tanto, la propiedad de Contención limita el alcance de disponibilidad o funcionamiento de un servicio. Utilizamos esta propiedad de contención en nuestro esquema de indexación para indexar LDD. 3. DAYS ARCHITECTURE DAYS ha sido concebido para difundir datos tanto actuales como no actuales a los usuarios en un espacio de transmisión local y para aceptar consultas de usuarios individuales a nivel global. Los datos actuales, como la información meteorológica, la información de tráfico, la información bursátil, etc., cambian constantemente con el tiempo. Datos no relacionados con el tema como precios de hoteles, restaurantes, bienes raíces, etc., no cambian tan frecuentemente. Por lo tanto, visualizamos la presencia de dos tipos de distribución de datos: En el primer caso, el servidor envía datos a los usuarios locales a través de canales inalámbricos. El otro caso trata de que el servidor envía los resultados de las consultas de los usuarios a través de canales inalámbricos de enlace descendente. Técnicamente, vemos la presencia de dos tipos de colas en el acceso de datos basado en extracción. Una es una cola muy cargada que contiene consultas cargadas globalmente. La otra es una cola comparativamente poco cargada que consiste en consultas cargadas localmente. La arquitectura DAYS [12], como se muestra en la figura 1, consta de un Servidor de Datos, Programador de Difusión, Coordinador de DAYS, Red de satélites LEO para entrega global de datos y un Espacio de difusión local. Los datos se envían al espacio de difusión local para que los usuarios puedan sintonizar los canales inalámbricos y acceder a los datos. El espacio de transmisión local consiste en una torre de transmisión, unidades móviles y una red de máquinas de preparación de datos llamadas los sustitutos. El almacenamiento de datos en sustitutos ha sido investigado anteriormente como una técnica exitosa [12, 15] para almacenar en caché los datos relacionados con los usuarios. Creemos que la puesta en escena de datos se puede utilizar para reducir drásticamente el tiempo de latencia tanto para los datos de transmisión local como para las respuestas globales. La solicitud de consulta en los sustitutos puede utilizarse posteriormente para generar los patrones de popularidad que finalmente deciden el horario de emisión [12]. 18 Retroalimentación de popularidad de los sustitutos para el programador de emisión Espacio de emisión local Torre de emisión Sustituto MU MU MU MU Servidor de datos Programador de emisión DÍAS Coordinador Canal de enlace descendente local Canal de enlace descendente global Cola de solicitudes de extracción Cola de solicitudes globales Cola de solicitudes locales Índice basado en la ubicación Starbucks Plaza Kansas City Figura 1. Arquitectura de DÍAS Figura 2. Estructura de ubicación de Starbucks, Plaza 4. DATOS DEPENDIENTES DE LA UBICACIÓN (DDU) Sostenemos que la incorporación de información de ubicación en la difusión de datos inalámbricos puede disminuir significativamente la latencia de acceso. Esta propiedad se vuelve muy útil para una unidad móvil que tiene capacidad de almacenamiento y procesamiento limitada. Hay una variedad de aplicaciones para obtener información sobre el tráfico, reservas en restaurantes y hoteles, comida rápida, gasolineras, oficinas de correos, tiendas de comestibles, etc. Si estas aplicaciones están vinculadas con información de ubicación, entonces la búsqueda será rápida y altamente rentable. Una propiedad importante de las ubicaciones es la Contención, la cual ayuda a determinar la ubicación relativa de un objeto con respecto a su padre que contiene el objeto. Por lo tanto, el Contención limita el alcance de disponibilidad de un dato. Utilizamos esta propiedad en nuestro esquema de indexación. La base de datos contiene los contenidos de transmisión que se convierten en LDD [14] al asociarlos con ubicaciones respectivas para que puedan ser transmitidos de manera agrupada. La agrupación de LDD ayuda al usuario a localizar información de manera eficiente y respalda la propiedad de contención. Presentamos un ejemplo para justificar nuestra proposición. Suponga que un usuario emite la consulta Starbucks Coffee en Plaza por favor. para acceder a información sobre la sucursal de Plaza de Starbucks Coffee en Kansas City. En el caso de una configuración independiente de la ubicación, el sistema mostrará una lista de todas las cafeterías Starbucks en el área de Kansas City. Es obvio que tales respuestas aumentarán la latencia de acceso y no son deseables. Estos pueden ser gestionados eficientemente si el servidor cuenta con datos dependientes de la ubicación, es decir, un mapeo entre los datos de una cafetería Starbucks y su ubicación física. Además, para una consulta que incluya un rango de ubicaciones de Starbucks, una sola consulta solicitando las ubicaciones para toda la región de Kansas City, como se muestra en la Figura 2, será suficiente. Esto ahorrará una enorme cantidad de ancho de banda al disminuir el número de mensajes y al mismo tiempo será útil para prevenir el cuello de botella de escalabilidad en áreas altamente pobladas. 4.1 Función de mapeo para LDD. El ejemplo justifica la necesidad de una función de mapeo para procesar consultas dependientes de la ubicación. Esto será especialmente importante para consultas basadas en extracción de datos en todo el mundo, para las cuales la respuesta podría ser redactada para diferentes partes del mundo. La función de mapeo es necesaria para construir el horario de transmisión. Definimos el Conjunto de Propiedades Globales (GPS) [11], el conjunto de Contenido de Información (IC) y el conjunto de Jerarquía de Localización (LH) donde IC ⊆ GPS y LH ⊆ GPS para desarrollar una función de mapeo. LH = {l1, l2, l3…,lk} donde li representa ubicaciones en el árbol de ubicaciones e IC = {ic1, ic2, ic3,…,icn} donde ici representa el tipo de información. Por ejemplo, si tenemos información de tráfico, clima y acciones en la transmisión, entonces IC = {ictráfico, icclima e icacciones}. El esquema de mapeo debe ser capaz de identificar y seleccionar un miembro de IC y un nodo de LH para (a) asociación correcta, (b) coincidencia de granularidad, (c) y condición de terminación. Por ejemplo, el clima ∈ IC podría estar asociado con un país o un estado o una ciudad o un pueblo de LH. La coincidencia de granularidad entre el clima y un nodo LH es según los requisitos del usuario. Por lo tanto, con una granularidad gruesa se asocia la información meteorológica con un país para obtener el clima del país y con una granularidad más fina con una ciudad. Si un pueblo es la granularidad más fina, entonces define la condición terminal para la asociación entre IC y LH para el clima. Esto significa que un usuario no puede obtener información meteorológica sobre la subdivisión de un pueblo. En realidad, el clima de una subdivisión no tiene sentido. Desarrollamos un enfoque de mapeo heurístico simple basado en los requisitos del usuario. Sea IC = {m1, m2, m3,..., mk}, donde mi representa su elemento y sea LH = {n1, n2, n3,..., nl}, donde ni representa el miembro de LH. Definimos GPS para IC (GPSIC) ⊆ GPS y para LH (GPSLH) ⊆ GPS como GPSIC = {P1, P2,…, Pn}, donde P1, P2, P3,…, Pn son propiedades de sus miembros y GPSLH = {Q1, Q2,…, Qm} donde Q1, Q2,…, Qm son propiedades de sus miembros. Las propiedades de un miembro particular de IC son un subconjunto de GPSIC. Generalmente es cierto que (conjunto de propiedades (mi∈ IC) ∪ conjunto de propiedades (mj∈ IC)) ≠ ∅, sin embargo, puede haber casos donde la intersección no sea nula. Por ejemplo, el stock ∈ IC y la película ∈ IC no tienen ninguna propiedad en común. Suponemos que cualquier par de miembros o más de IC tienen al menos una propiedad geográfica común (es decir, ubicación) porque DAYS transmite información sobre esas categorías, que están estrechamente relacionadas con una ubicación. Por ejemplo, las acciones de una empresa están relacionadas con un país, el clima está relacionado con una ciudad o estado, etc. Definimos el subconjunto de propiedades de mi ∈ IC como PSm i ∀ mi ∈ IC y PSm i = {P1, P2, ..., Pr} donde r ≤ n. ∀ Pr {Pr ∈ PSm i → Pr ∈ GPSIC} lo cual implica que ∀ i, PSm i ⊆ GPSIC. Las propiedades geográficas de este conjunto son indicativas de si mi ∈ IC se puede asignar a un solo nivel de granularidad (es decir, a una sola ubicación) en LH o a múltiples niveles de granularidad (es decir, a más de un nodo en la jerarquía) en LH. El número y la granularidad a la que un MI debe mapearse dependen del nivel en el que el proveedor de servicios desee proporcionar información sobre el MI en cuestión. De manera similar definimos un subconjunto de propiedades de los miembros de LH como PSn j ∀ nj ∈ LH, lo cual puede escribirse como PSn j ={Q1, Q2, Q3, …, Qs} donde s ≤ m. Además, ∀ Qs {Qs∈ PSn j → Qs∈ GPSLH} lo cual implica que ∀j, PSn j ⊆ GPSLH. El proceso de mapeo de IC a LH consiste en identificar para algún mx∈ IC uno o más ny∈ LH de manera que PSmx ∩ PSnv ≠ φ. Esto significa que cuando mx se asigna a ny y todos los hijos de ny, si mx puede asignarse a múltiples niveles de granularidad o si mx solo se asigna a ny si puede asignarse a un solo nivel de granularidad. Suponemos que los nuevos miembros pueden unirse y los antiguos miembros pueden abandonar IC o LH en cualquier momento. La eliminación de miembros del espacio IC es simple, pero la adición de miembros al espacio IC es más restrictiva. Si queremos agregar un nuevo miembro al espacio IC, primero definimos un conjunto de propiedades para el nuevo miembro: PSmnew_m = {P1, P2, P3, …, Pt} y lo agregamos al IC solo si se cumple la condición: ∀ Pw {Pw∈ PSpnew_m → Pw∈ GPSIC}. Este esquema tiene un beneficio adicional que permite a los proveedores de servicios de información tener control sobre qué tipo de información desean proporcionar a los usuarios. Presentamos el siguiente ejemplo para ilustrar el concepto de mapeo. IC = {Tráfico, Acciones, Restaurante, Clima, Fechas importantes de la historia, Condiciones de la carretera} LH = {País, Estado, Ciudad, Código postal, Carreteras principales} GPSIC = {Movilidad en superficie, Carreteras, Alto, Bajo, Comida italiana, Nombre del estado, Temperatura, Nombre de la ciudad, Disponibilidad de asientos, Código postal, Atascos de tráfico, Precio de las acciones, Nombre del país, Nombre de la carretera principal, Guerras, Descubrimientos, Mundo} GPSLH = {País, Tamaño del país, Nombre del estado, Nombre de la ciudad, Código postal, Nombre de la carretera principal} Ps(ICAcciones) = {Precio de las acciones, Nombre del país, Alto, Bajo} Ps(ICTráfico) = {Movilidad en superfficie, Carreteras, Alto, Bajo, Atascos de tráfico, Nombre de la ciudad} Ps(ICFechas importantes en la historia) = {Mundo, Guerras, Descubrimientos} Ps(ICCondiciones de la carretera) = {Precipitación, Nombre del estado, Nombre de la ciudad} Ps(ICRestaurante) = {Comida italiana, Código postal} Ps(ICClima) = {Nombre del estado, Nombre de la ciudad, Precipitación, Temperatura} PS(LHPaís) = {Nombre del país, Tamaño del país} PS(LHEstado) = {Nombre del estado, Tamaño del estado} PS(LHCiudad) = {Nombre de la ciudad, Tamaño de la ciudad} PS(LHCódigo postal) = {Número de código postal} PS(LHCarreteras principales) = {Nombre de la carretera principal} Ahora, solo Ps(ICAcciones) ∩ PsPaís ≠φ. Además, PS(ICStock) indicó que el Stock puede mapearse solo a un único país de ubicación. Cuando consideramos el tráfico de miembros del espacio IC, solo PS(ICTraffic) ∩ PScity ≠ φ. Como PS(ICTraffic) indica que el tráfico solo puede asignarse a una ubicación, se asigna solo a la Ciudad y ninguno de sus hijos. Ahora, a diferencia de Stock, el mapeo del Tráfico con las Carreteras Principales, que es un hijo de Ciudad, tiene sentido. Sin embargo, los proveedores de servicios tienen derecho a controlar los niveles de granularidad en los que desean proporcionar información sobre un miembro del espacio de IC. PS (condiciones de la carretera) ∩ PS (estado) ≠φ y PS (condiciones de la carretera) ∩ PS (ciudad) ≠φ. Por lo tanto, los mapas de condiciones de la carretera se aplican tanto al estado como a la ciudad. Como PS(ICRoad conditions) indica que las condiciones de la carretera pueden mapearse a múltiples niveles de granularidad, las condiciones de la carretera también se mapearán a Código Postal y Carreteras principales, que son los hijos de Estado y Ciudad. De manera similar, el Restaurante se mapea solo al código postal, y el Clima se mapea al Estado, Ciudad y sus subcategorías, Carreteras principales y Código Postal. 5. Esquema de indexación basado en la ubicación. Esta sección discute nuestro esquema de indexación basado en la ubicación (LBIS). El esquema está diseñado para cumplir con la transmisión LDD en nuestro proyecto DAYS. Como se discutió anteriormente, utilizamos la propiedad de contención de LDD en el esquema de indexación. Esto limita significativamente la búsqueda de nuestros datos requeridos a una parte específica de la transmisión. Por lo tanto, argumentamos que el esquema proporciona un tiempo de ajuste limitado. Describimos la arquitectura de nuestro esquema de indexación. Nuestro esquema contiene cubos de datos separados y cubos de índices. Los buckets de índice son de dos tipos. El primer tipo se llama índice Mayor. El índice Mayor proporciona información sobre los tipos de datos transmitidos. Por ejemplo, si pretendemos transmitir información como Entretenimiento, Clima, Tráfico, etc., entonces el índice principal apunta a estos tipos principales de información y/o sus subtipos principales de información, siendo el número de subtipos principales variable de una información a otra. Esto limita estrictamente el número de accesos a un índice principal. El índice Mayor nunca apunta a los datos originales. Apunta a los subíndices llamados el índice Menor. Los índices menores son los índices que realmente apuntan a los datos originales. Llamamos a estos punteros de índice menor como Punteros de Ubicación ya que apuntan a los datos que están asociados con una ubicación. Por lo tanto, nuestra búsqueda de datos incluye el acceso a un índice principal y algunos índices secundarios, siendo el número de índices secundarios variable dependiendo del tipo de información. Por lo tanto, nuestro esquema de indexación tiene en cuenta la naturaleza jerárquica del LDD, la propiedad de Contención y requiere que nuestro horario de difusión se agrupe según el tipo de datos y la ubicación. La estructura de la jerarquía de ubicación requiere el uso de diferentes tipos de índices en diferentes niveles. La estructura y posiciones del índice dependen estrictamente de la jerarquía de ubicación como se describe en nuestro esquema de mapeo anterior. Ilustramos la implementación de nuestro esquema con un ejemplo. Las reglas para enmarcar el índice se mencionan posteriormente. 20 A1 Entretenimiento Restaurante Película A2 A3 A4 R1 R2 R3 R4 R5 R6 R7 R8 Clima KC SL JC SF Entretenimiento R1 R2 R3 R4 R5 R6 R7 R8 KC SL JC SF (A, R, SIGUIENTE = 8) 3, R5 4, R7 Tipo (S, L) ER W E EM (1, 4) (5, 4) (1, 4), (9, 4) (9, 4) Tipo (S, L) W E EM ER (1, 4) (5, 8) (5, 4) (9, 4) Tipo (S, L) E EM ER W (1, 8) (1, 4) (5, 4) (9, 4) A1 A2 A3 A4 Película Restaurante Clima 1 2 3 4 5 6 7 8 9 10 11 12 Índice mayor Índice mayor Índice mayor Índice menor Índice mayor Índice menor Figura 3. Información de ubicación mapeada para la Figura 4 de la transmisión. Datos acoplados con un ejemplo de índice basado en la ubicación: Supongamos que nuestro contenido de transmisión contiene ICentertainment e ICweather, que se representan como se muestra en la Figura 3. Ai representa áreas de la ciudad y Ri representa carreteras en una zona específica. Las hojas de la estructura del tiempo representan cuatro ciudades. La estructura del índice se muestra en la Fig. 4, que indica la posición de los índices principales y secundarios, así como los datos en la programación de difusión. Proponemos las siguientes reglas para la creación del horario de transmisión indexado del aire: • Se crean el índice principal y el índice secundario. • El índice principal contiene la posición y el rango de diferentes tipos de elementos de datos (Clima y Entretenimiento, Figura 3) y sus categorías. Las subcategorías de Entretenimiento, Cine y Restaurante, también están en el índice. Por lo tanto, el índice principal contiene Entretenimiento (E), Entretenimiento-Cine (EM), Entretenimiento-Restaurante (ER) y Clima (W). La tupla (S, L) representa la posición inicial (S) del elemento de datos y L representa el rango del elemento en términos del número de cubos de datos. El índice menor contiene las variables A, R y un puntero Next. En nuestro ejemplo (Figura 3), la carretera R representa el primer nodo del área A. El índice menor se utiliza para señalar los cubos de datos reales presentes en los niveles más bajos de la jerarquía. Por el contrario, el índice principal señala una gama más amplia de ubicaciones y, por lo tanto, contiene información sobre las categorías principales y secundarias de datos. La información del índice no está incorporada en los contenedores de datos. Los buckets de índice están separados y contienen únicamente la información de control. • El número de buckets de índice principales m = #(IC), IC = {ic1, ic2, ic3,...,icn} donde ici representa el tipo de información y # representa la cardinalidad del conjunto de Contenido de Información IC. En este ejemplo, IC = {icPelícula, icClima, icRestaurante} y por lo tanto #(IC) = 3. Por lo tanto, el número de buckets de índice principales es 3. • El mecanismo para resolver la consulta está presente en el coordinador basado en Java en MU. Por ejemplo, si se presenta una consulta Q como Q (Entretenimiento, Película, Carretera_1), entonces la búsqueda resultante será para la información de EM en el índice principal. Decimos, Q EM. Nuestro índice propuesto funciona de la siguiente manera: Supongamos que un MU emite una consulta que está representada por el Coordinador de Java presente en el MU como información de restaurante en la Carretera 7. Esto se resuelve por el coordinador como Q ER. Esto significa que uno tiene que buscar la unidad de ER del índice principal en el índice. Supongamos que el MU inicia sesión en el canal en R2. El primer índice que recibe es un índice menor después de R2. En este índice, el valor de la variable Next = 4, lo que significa que el siguiente índice principal está presente después del cubo 4. El MU puede entrar en modo de reposo. Se activa después del cubo 4 y recibe el índice principal. Busca información sobre ER que es la primera entrada en este índice. Ahora es seguro que la Unidad de Memoria (MU) obtendrá la posición del depósito de datos en el índice menor adyacente. La segunda unidad en el índice menor representa la posición de los datos requeridos R7. Indica que el contenedor de datos es el primer contenedor en el Área 4. El MU entra en modo de reposo nuevamente y se vuelve activo después del cubo 6. Obtiene los datos requeridos en el siguiente cubo. Presentamos el algoritmo para buscar en el índice basado en la ubicación. Algoritmo 1 Búsqueda de Índice Basada en la Ubicación en DAYS 1. Explorar la transmisión para el siguiente cubo de índice, encontrado=false 2. Mientras (no encontrado) hacer 3. si el cubo es Índice Principal entonces 4. Encuentra el Tipo & Tupla (S, L) 5. si S es mayor que 1, entra en modo de reposo por S segundos 6. fin si 7. Despierta en el cubo S y observa el Índice Menor 8. termina si 9. si el cubo es Índice Menor entonces 10. si el Tipo Solicitado no es igual al Tipo encontrado y la Solicitud (A, R) no es igual a la encontrada (A, R) entonces 11. Entrar en modo de suspensión hasta SIGUIENTE y repetir desde el paso 3 12. fin si 13. de lo contrario, encontrar la entrada en el Índice Menor que apunta a los datos 14. Calcular el tiempo de llegada T del paquete de datos 15. Entra en modo de suspensión hasta T 16. Despierta a la hora T y accede a los datos, encontrado = verdadero 17. fin si 18. fin si 19. fin Mientras 21 6. EVALUACIÓN DEL RENDIMIENTO La conservación de energía es la principal preocupación cuando intentamos acceder a datos desde una transmisión inalámbrica. Un esquema eficiente debería permitir que el dispositivo móvil acceda a sus datos requeridos manteniéndose activo durante un tiempo mínimo. Esto ahorraría una cantidad considerable de energía. Dado que los artículos se distribuyen según tipos y se asignan a ubicaciones adecuadas, sostenemos que nuestra transmisión trata con tipos de datos agrupados. La unidad móvil debe acceder a un índice principal más grande y a un índice menor relativamente mucho más pequeño para obtener información sobre la hora de llegada de los datos. Esto contrasta con el esquema exponencial donde los índices son de tamaños iguales. El ejemplo discutido y el Algoritmo 1 revelan que para acceder a cualquier dato, solo necesitamos acceder al índice principal una vez, seguido de uno o más accesos al índice secundario. El número de accesos al índice menor depende del número de ubicaciones internas. Dado que el número de ubicaciones internas varía de un elemento a otro (por ejemplo, el clima generalmente se asocia con una ciudad, mientras que el tráfico se desglosa hasta las carreteras principales y secundarias de una ciudad), sostenemos que la estructura de la información mapeada de ubicaciones puede visualizarse como un bosque que es una colección de árboles generales, el número de árboles generales dependiendo de los tipos de información transmitida y la profundidad de un árbol dependiendo de la granularidad de la información de ubicación asociada con la información. Para nuestros experimentos, asumimos el bosque como una colección de árboles M-arios balanceados. Además, asumimos que los árboles M-arios están completos al suponer la presencia de nodos ficticios en diferentes niveles de un árbol. Por lo tanto, si el número de elementos de datos es d y la altura del árbol es m, entonces n= (m*d-1)/(m-1) donde n es el número de vértices en el árbol e i= (d-1)/(m-1) donde i es el número de vértices internos. El tiempo de ajuste para un elemento de datos implica 1 unidad de tiempo requerida para acceder al índice principal más el tiempo requerido para acceder a los elementos de datos presentes en las hojas del árbol. Por lo tanto, el tiempo de ajuste con d elementos de datos es t = logmd+1. Podemos decir que el tiempo de ajuste está limitado por O(logmd). Comparamos nuestro esquema con el indexado distribuido y el esquema exponencial. Suponemos una difusión plana y un número de páginas que varía de 5000 a 25000. Los diversos parámetros de simulación se muestran en la Tabla 1. La Figura 5-8 muestra los tiempos de ajuste relativos de tres algoritmos de indexación, es decir, el LBIS, el esquema exponencial y el esquema de árbol distribuido. La Figura 5 muestra el resultado para un número de nodos de ubicación interna = 3. Podemos ver que LBIS supera significativamente a ambos otros esquemas. El tiempo de ajuste en LBIS varía aproximadamente de 6.8 a 8. Este largo tiempo de ajuste se debe a que después de alcanzar el índice menor más bajo, la Unidad de Memoria (MU) puede tener que acceder a pocos cubos de forma secuencial para obtener el cubo de datos requerido. Podemos ver que el tiempo de ajuste tiende a estabilizarse a medida que aumenta la duración de la transmisión. En la figura 6 consideramos m= 4. Aquí podemos ver que el exponencial y el distribuido se comportan de manera casi similar, aunque el primero parece tener un rendimiento ligeramente mejor a medida que aumenta la longitud de la transmisión. Un patrón muy interesante es visible en la figura 7. Para un tamaño de transmisión más pequeño, el LBIS parece tener un tiempo de ajuste más largo que los otros dos esquemas. Pero a medida que aumenta la duración de la transmisión, es claramente visible que LBIS supera a los otros dos esquemas. La indexación de árbol distribuido muestra un comportamiento similar al LBIS. El tiempo de ajuste en LBIS sigue siendo bajo porque el algoritmo permite que la Unidad de Medida omita algunos Índices Menores intermedios. Esto permite que la Unidad de Manejo se traslade directamente a niveles inferiores después de entrar en modo activo, ahorrando así energía valiosa. Esta acción no es posible en la indexación de árbol distribuido y, por lo tanto, podemos observar que su tiempo de ajuste es mayor que el esquema LBIS, aunque tiene un mejor rendimiento que el esquema exponencial. La Figura 8, en contraste, nos muestra que el tiempo de ajuste en LBIS, aunque menor que en los otros dos esquemas, tiende a aumentar bruscamente a medida que la longitud de la transmisión supera las 15000 páginas. Esto puede atribuirse tanto al aumento en el tiempo requerido para escanear los índices menores intermedios como a la duración de la transmisión. Pero podemos observar que la pendiente de la curva LBIS es significativamente menor que las otras dos curvas. Tabla 1 Parámetros de simulación P Definición Valores N Número de elementos de datos 5000 - 25000 m Número de nodos de ubicación internos 3, 4, 5, 6 B Capacidad del cubo sin índice (para índice exponencial) 10, 64, 128, 256 i Base del índice para índice exponencial 2, 4, 6, 8 k Tamaño del índice para árbol distribuido 8 bytes Los resultados de la simulación establecen algunos hechos sobre nuestro esquema de indexación basado en la ubicación. El esquema funciona mejor que los otros dos esquemas en términos de tiempo de ajuste en la mayoría de los casos. A medida que la duración de la transmisión aumenta, después de cierto punto, aunque el tiempo de ajuste aumenta como resultado de factores que hemos descrito anteriormente, el esquema siempre funciona mejor que los otros dos esquemas. Debido al límite prescrito de la cantidad de páginas en el documento, no podemos mostrar más resultados. Pero estos resultados omitidos muestran una tendencia similar a los resultados representados en la figura 5-8. 7. CONCLUSIÓN Y TRABAJOS FUTUROS En este artículo hemos presentado un esquema para el mapeo de datos de transmisión inalámbrica con sus ubicaciones. Hemos presentado un ejemplo para mostrar cómo la estructura jerárquica del árbol de ubicación se relaciona con los datos para crear LDD. Hemos presentado un esquema llamado LBIS para indexar este LDD. Hemos utilizado la propiedad de contención de LDD en el esquema que limita la búsqueda a un rango estrecho de datos en la transmisión, ahorrando así energía valiosa en el dispositivo. El mapeo de datos con ubicaciones y el esquema de indexación se utilizarán en nuestro proyecto DAYS para crear la arquitectura basada en push. El LBIS ha sido comparado con otros dos esquemas de indexación prominentes, es decir, el esquema de indexación de árbol distribuido y el esquema de indexación exponencial. Mostramos en nuestras simulaciones que el esquema LBIS tiene el menor tiempo de ajuste para las transmisiones que tienen un gran número de páginas, ahorrando así valiosa energía de la batería en la MU. En el trabajo futuro intentaremos incorporar una arquitectura basada en pull en nuestro proyecto DAYS. Los datos del servidor están disponibles para ser accedidos por los usuarios globales. Esto se puede hacer enviando una solicitud al servidor de origen. La consulta en este caso es una consulta global. Se transfiere desde el servidor de origen de los usuarios al servidor de destino a través del uso de satélites LEO. Tenemos la intención de utilizar nuestro esquema LDD y arquitectura de preparación de datos en la arquitectura basada en extracción. Demostraremos que el esquema LDD junto con la arquitectura de preparación de datos mejora significativamente la latencia tanto para consultas globales como locales. 8. REFERENCIAS [1] Acharya, S., Alonso, R., Franklin, M. y Zdonik S. Broadcast disk: Gestión de datos para entornos de comunicaciones asimétricas. En Actas de la Conferencia ACM SIGMOD sobre Gestión de Datos, páginas 199-210, San José, CA, mayo de 1995. [2] Chen, M.S., Wu, K.L. y Yu, P. S. Optimización de la asignación de índices para la difusión de datos secuenciales en computación móvil inalámbrica. IEEE Transactions on Knowledge and Data Engineering (TKDE), 15(1):161-173, enero/febrero de 2003. Figura 5. Tamaño de transmisión (# de cubetas) Árbol de distribución Expo LBIS Figura 6. Tamaño de transmisión (# de cubetas) Árbol de distribución Expo LBIS Figura 7. Tamaño de transmisión (# de cubetas) Árbol de distribución Expo LBIS Figura 8. Tamaño de transmisión (# de cubetas) Árbol de distribución Expo LBIS Tiempo de ajuste promedio Tiempo de ajuste promedio Tiempo de ajuste promedio Tiempo de ajuste promedio 23 [3] Hu, Q. L., Lee, D. L. y Lee, W.C. Evaluación del rendimiento de un sistema inalámbrico de difusión de datos jerárquico. En Actas de la 5ta Conferencia Internacional Anual de ACM sobre Computación y Redes Móviles (MobiCom99), páginas 163-173, Seattle, WA, agosto de 1999. [4] Hu, Q. L. Lee, W.C. y Lee, D. L. Consultas multiatributo conservadoras de energía en difusión de datos. En Actas de la 16ª Conferencia Internacional sobre Ingeniería de Datos (ICDE00), páginas 157-166, San Diego, CA, febrero de 2000. [5] Imielinski, T., Viswanathan, S. y Badrinath. Filtrado eficiente de datos sobre el aire. En Actas de la 4ta Conferencia Internacional sobre Tecnología de Bases de Datos Extendidas (EDBT94), páginas 245-258, Cambridge, Reino Unido, marzo de 1994. [6] Imielinski, T., Viswanathan, S. y Badrinath. Datos de B. R. sobre el aire - Organización y acceso. IEEE Transactions on Knowledge and Data Engineering (TKDE), 9(3):353-372, mayo/junio de 1997. [7] Shih, E., Bahl, P. y Sinclair, M. J. Despertar de forma inalámbrica: Una estrategia de ahorro de energía impulsada por eventos para dispositivos con batería. En Actas de la 8ª Conferencia Internacional Anual de la ACM sobre Computación y Redes Móviles (MobiCom02), páginas 160-171, Atlanta, GA, septiembre de 2002. [8] Shivakumar N. y Venkatasubramanian, S. Indexación energéticamente eficiente para la difusión de información en sistemas inalámbricos. Revista ACM/Baltzer de Redes Móviles y Aplicaciones (MONET), 1(4):433-446, diciembre de 1996. [9] Tan K. L. y Yu, J. X. Filtrado energéticamente eficiente de difusión no uniforme. En Actas de la 16ª Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS96), páginas 520-527, Hong Kong, mayo de 1996. [10] Viredaz, M. A., Brakmo, L. S. y Hamburgen, W. R. Gestión de energía en dispositivos portátiles. ACM Queue, 1(7):44-52, octubre de 2003. [11] Garg, N. Kumar, V., & Dunham, M.H. Mapeo e indexación de información en DAYS, 6º Taller Internacional sobre Movilidad en Bases de Datos y Sistemas Distribuidos, en conjunto con la 14ª Conferencia Internacional sobre Aplicaciones de Bases de Datos y Sistemas Expertos, del 1 al 5 de septiembre en Praga, República Checa, 2003. [12] Acharya D., Kumar, V., & Dunham, M.H. InfoSpace: Sistema híbrido y adaptativo de difusión de datos públicos para la computación ubicua. Aceptado para su publicación en el número especial de Computación Ubicua. Revista Wiley para Comunicaciones Inalámbricas y Computación Móvil, 2004. [13] Acharya D., Kumar, V., & Prabhu, N. Descubriendo y utilizando Servicios Web en M-Commerce, Actas del 5º Taller VLDB sobre Tecnologías para E-Servicios, Toronto, Canadá, 2004. [14] Acharya D., Kumar, V. Indexación de Datos Dependientes de la Ubicación en un entorno de transmisión. Aceptado para su publicación, número especial de JDIM sobre Gestión de Datos Distribuidos, 2005. [15] Flinn, J., Sinnamohideen, S. y Satyanarayan, M. Preparación de datos en sustitutos no confiables, Intel Research, Pittsburg, Informe no publicado, 2003. [16] Seydim, A.Y., Dunham, M.H. y Kumar, V. Procesamiento de consultas dependiente de la ubicación, Actas del 2º taller internacional de ACM sobre ingeniería de datos para acceso inalámbrico y móvil, p.47-53, Santa Bárbara, California, EE. UU., 2001. [17] Xu, J., Lee, W.C., Tang, X. Índice Exponencial: Un esquema de indexación distribuida parametrizado para datos en el aire. En Actas de la 2da Conferencia Internacional ACM/USENIX sobre Sistemas, Aplicaciones y Servicios Móviles (MobiSys04), Boston, MA, junio de 2004. 24