Presentamos un mecanismo de subasta aproximadamente eficiente y aproximadamente a prueba de estrategias para un problema de asignación multiunidad de un solo bien. El lenguaje de oferta en nuestras subastas permite curvas constantes por tramos con disminución marginal. Primero, desarrollamos un esquema de aproximación de tiempo polinómico completo para el problema de asignación de múltiples unidades, que calcula una aproximación de (1 + ) en tiempo de peor caso T = O(n3 / ), dado n ofertas cada una con un número constante de piezas. Segundo, incrustamos este esquema de aproximación dentro de un mecanismo de Vickrey-Clarke-Groves (VCG) y calculamos los pagos a n agentes por un costo asintótico de O(T log n). La ganancia máxima posible de la manipulación para un postor en el esquema combinado está limitada por /(1+ )V, donde V es el excedente total en el resultado eficiente. Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento-Economía. Términos generales Algoritmos, Economía. 1. En este documento presentamos un esquema de aproximación de tiempo polinómico completo para el problema de subasta multiunidad de un solo bien. Nuestro esquema es tanto aproximadamente eficiente como aproximadamente a prueba de estrategias. Las configuraciones de subasta consideradas en nuestro artículo están motivadas por las tendencias recientes en el comercio electrónico; por ejemplo, las corporaciones están utilizando cada vez más subastas para sus adquisiciones estratégicas. Consideramos tanto una variación de subasta inversa como una variación de subasta directa, y proponemos un lenguaje de oferta compacto y expresivo que permite curvas constantes por tramos con disminución marginal. En la subasta inversa, consideramos un único comprador con una demanda de M unidades de un bien y n proveedores, cada uno con una función de coste marginal decreciente y constante por tramos. Además, cada proveedor también puede expresar un límite superior, o restricción de capacidad, sobre la cantidad de unidades que puede suministrar. Los modelos de variación inversa, por ejemplo, representan una subasta de adquisiciones para obtener materias primas u otros servicios (por ejemplo, placas de circuito, fuentes de alimentación, cartuchos de tóner), con lotes de tamaño flexible. En la subasta ascendente, consideramos un único vendedor con M unidades de un bien y n compradores, cada uno con una función de valoración marginal decreciente y constante por tramos. Un comprador también puede expresar un límite inferior, o tamaño mínimo de lote, en la cantidad de unidades que demanda. Los modelos de variación hacia adelante, por ejemplo, simulan una subasta para vender inventario excedente en lotes de tamaño flexible. Consideramos la complejidad computacional de implementar el mecanismo de Vickrey-Clarke-Groves [22, 5, 11] para el problema de la subasta de unidades múltiples. El mecanismo de Vickrey-Clarke-Groves (VCG) tiene varias propiedades económicas interesantes en este contexto, incluyendo la a prueba de estrategias, de modo que hacer ofertas veraces es una estrategia dominante para los compradores en la subasta ascendente y para los vendedores en la subasta descendente, y la eficiencia asignativa, de modo que el resultado maximiza el excedente total en el sistema. Sin embargo, como discutimos en la Sección 2, la aplicación del enfoque basado en VCG está limitada en la dirección inversa a casos en los que los pagos totales a los vendedores son menores que el valor del resultado para el comprador. De lo contrario, la subasta debe operar con pérdidas en estos casos, o no se puede esperar que el comprador elija participar voluntariamente. Este es un ejemplo del problema del déficit presupuestario que a menudo ocurre en el diseño eficiente de mecanismos [17]. El problema computacional es interesante, porque incluso con curvas de oferta marginal decrecientes, el problema de asignación subyacente resulta ser (débilmente) intratable. Por ejemplo, la clásica mochila 0/1 es un caso especial de este problema. Modelamos el problema como una generalización novedosa e interesante del problema clásico de la mochila, y desarrollamos un esquema de aproximación de tiempo polinómico completo, calculando una aproximación (1 + ε) en tiempo de peor caso T = O(n3 /ε), donde cada oferta tiene un número fijo de piezas constantes por tramos. Dado este esquema, un cálculo directo de los pagos VCG a todos los n agentes requiere un tiempo O(nT). Calculamos pagos VCG aproximados en tiempo de peor caso O(αT log(αn/ε)), donde α es una constante que cuantifica una suposición razonable de no monopolio. Específicamente, en la subasta inversa, supongamos que C(I) es el costo mínimo para adquirir M unidades con todos los vendedores I, y C(I \ i) es el costo mínimo sin el vendedor i. Entonces, la constante α se define como una cota superior para la razón C(I \i)/C(I), sobre todos los vendedores i. Este límite superior tiende a 1 a medida que aumenta el número de vendedores. El mecanismo VCG aproximado es ( ε 1+ε )-estrategia-veraz para una aproximación dentro de (1 + ) de la asignación óptima. Esto significa que un postor puede obtener como máximo ( ε 1+ε )V de una oferta no veraz, donde V es el excedente total de la asignación eficiente. Por lo tanto, este es un ejemplo de un resultado de dominancia ε computacionalmente viable. En la práctica, podemos tener la seguridad de que los postores sin buena información sobre las estrategias de oferta de otros participantes tendrán poco que ganar con intentos de manipulación. La sección 2 define de manera formal las subastas directas e inversas, y define los mecanismos VCG. También demostramos nuestras afirmaciones sobre la ε-estrategia de prueba. La Sección 3 proporciona la formulación generalizada de la mochila para los problemas de asignación de múltiples unidades e introduce el esquema de aproximación de tiempo polinómico completo. La sección 4 define el esquema de aproximación para los pagos en el mecanismo VCG. La Sección 5 concluye. 1.1 Trabajo Relacionado Ha habido un considerable interés en los últimos años en caracterizar casos especiales del problema general de asignación combinatoria que pueden resolverse en tiempo polinómico o aproximarse, en los cuales hay múltiples elementos diferentes. El problema de asignación combinatoria (CAP) es tanto NP-completo como intratable (por ejemplo, [6]). Aunque se han identificado algunos casos de tiempo polinómico para el CAP [6, 20], la introducción de un lenguaje de oferta exclusiva-o expresivo rápidamente rompe estos casos especiales. Identificamos un problema de asignación no trivial pero aproximable con un lenguaje de oferta exclusivo expresivo: el receptor de la oferta en nuestro escenario puede aceptar como máximo un punto en la curva de oferta. La idea de utilizar aproximaciones dentro de los mecanismos, manteniendo ya sea la plena estrategia de prueba o la ε-dominancia, ha recibido cierta atención previa. Por ejemplo, Lehmann et al. [15] proponen una aproximación codiciosa y a prueba de estrategias para un problema de subasta combinatoria de un solo interesado. Nisan & Ronen [18] discutieron mecanismos aproximados basados en VCG, pero recurrieron a aproximaciones particulares de rango máximo para conservar la plena estrategia-proofness, o a agentes con recursos limitados con limitaciones de información o computacionales en la capacidad de calcular estrategias. Restricciones de tamaño mínimo de lote de Feigenbaum por parte de los compradores. Sin embargo, esto puede no ser un ejemplo de lo que Feigenbaum & Shenker se refieren como un mecanismo tolerablemente manipulable, ya que no hemos intentado limitar el efecto de dicha manipulación en la eficiencia del resultado. El mecanismo VCG sí tiene una propiedad auto-correctora natural, ya que una manipulación útil para un agente es un valor reportado que mejora el valor total de la asignación basado en los reportes de otros agentes y el valor propio del agente. Baum & Shenker [8] han definido el concepto de aproximaciones estratégicamente fieles, y propuesto el estudio de aproximaciones como una dirección importante para el diseño de mecanismos algorítmicos. Schummer [21] y Parkes et al [19] han considerado previamente la ε-dominancia, en el contexto de resultados de imposibilidad económica, por ejemplo en intercambios combinatorios. Eso et al. [7] han estudiado un problema de adquisiciones similar, pero para un modelo de descuento por volumen diferente. Este trabajo anterior formula el problema como un programa lineal entero mixto general y proporciona algunos resultados empíricos sobre datos simulados. Kalagnanam et al. [12] abordan subastas dobles, donde múltiples compradores y vendedores intercambian un bien divisible. El enfoque de este artículo también es diferente: investiga los precios de equilibrio utilizando las curvas de oferta y demanda, mientras que nuestro enfoque se centra en el diseño de mecanismos eficientes. Ausubel ha propuesto una subasta de múltiples unidades con precios ascendentes para compradores con valores marginales decrecientes, con una interpretación como algoritmo primal-dual. En esta sección, primero describimos el lenguaje de oferta por tramos decrecientes marginales que se utiliza en nuestras subastas hacia adelante y hacia atrás, que son aproximadamente a prueba de estrategias VCG. Continuando, introducimos el mecanismo VCG para el problema y los resultados de ε-dominancia para aproximaciones a los resultados de VCG. También discutimos las propiedades económicas de los mecanismos VCG en estos entornos de subasta multiunidad de tipo forward y reverse. 2.1 Pujas por tramos decrecientes marginalmente Proporcionamos un lenguaje de pujas constante por tramos y decreciente marginalmente. Este lenguaje de oferta es expresivo para una clase natural de funciones de valoración y costos: precios unitarios fijos sobre intervalos de cantidades. Consulta la Figura 1 para ver un ejemplo. Además, relajamos ligeramente el requisito de disminución marginal para permitir que: un postor en la subasta hacia adelante establezca un monto mínimo de compra, de modo que tenga un valor cero para cantidades menores a ese monto; un vendedor en la subasta inversa establezca una restricción de capacidad, de modo que tenga un costo efectivamente infinito para suministrar cantidades superiores a una cantidad específica. Subasta inversa Oferta 7 5 10 20 25 10 8 Cantidad Precio 7 5 10 20 25 10 8 Cantidad Precio Subasta directa Oferta Figura 1: Ofertas marginales decrecientes y constantes por tramos. En la subasta de oferta ascendente, el postor ofrece $10 por unidad para cantidades en el rango [5, 10), $8 por unidad en el rango [10, 20), y $7 en el rango [20, 25]. Su valoración es cero para cantidades fuera del rango [10, 25]. En la subasta inversa, el costo del vendedor es ∞ fuera del rango [10, 25]. En detalle, en una subasta ascendente, una oferta del comprador i puede ser escrita como una lista de tuplas (rango de cantidad, precio unitario), ((u1 i , p1 i ), (u2 i , p2 i ), . . . , (umi−1 i , pmi−1 i )), con un límite superior umi i en la cantidad. La interpretación es que la valoración de los postores en el rango de cantidad 167 (semiabierto) [uj i , uj+1 i ) es pj i para cada unidad. Además, se asume que la valoración es 0 para cantidades menores que u1 i, así como para cantidades mayores que um i. Esto se implementa añadiendo dos tuplas de oferta ficticias, con precios de cero en el rango [0, u1 i ) y (umi i , ∞). Interpretamos la lista de ofertas como la definición de una función de precio, pbid,i(q) = qpj i , si uj i ≤ q < uj+1 i , donde j = 1, 2, . . . , mi −1. Para resolver la condición de límite, asumimos que el precio de oferta para la cantidad límite superior umi i es pbid,i(umi i ) = umi i pmi−1 i. Una oferta de vendedor se define de manera similar en la subasta inversa. La interpretación es que el costo de los postores en el rango de cantidad (semiabierto) [uj i , uj+1 i ) es pj i por cada unidad. Además, se asume que el costo es ∞ para cantidades menores que u1 i y también para cantidades mayores que um i. De manera equivalente, los precios unitarios en los rangos [0, u1 i ) y (um i , ∞) son infinito. Interpretamos la lista de ofertas como la definición de una función de precio, pask,i(q) = qpj i , si uj i ≤ q < uj+1 i. 2.2 Subastas Multiunidad basadas en VCG Construimos subastas multiunidad manejables y aproximadamente a prueba de estrategias alrededor de un mecanismo VCG. Suponemos que todos los agentes tienen funciones de utilidad cuasilineales; es decir, ui(q, p) = vi(q)− p, para un comprador i con valoración vi(q) por q unidades a un precio p, y ui(q, p) = p − ci(q) para un vendedor i con costo ci(q) a un precio p. Esta es una suposición estándar en la literatura de subastas, equivalente a asumir agentes neutrales al riesgo [13]. Usaremos el término "pago" de forma intercambiable con "utilidad". En la subasta ascendente, hay un vendedor con M unidades para vender. Suponemos que este vendedor no tiene un valor intrínseco para los artículos. Dado un conjunto de ofertas de I agentes, sea V(I) el ingreso máximo para el vendedor, dado que se puede seleccionar como máximo un punto en la curva de oferta de cada agente y no se pueden vender más de M unidades del artículo. Sea x∗ = (x∗ 1, . . . , x∗ N ) la solución a este problema de determinación del ganador, donde x∗ i es el número de unidades vendidas al agente i. De manera similar, sea V (I \ i) el ingreso máximo para el vendedor sin ofertas del agente i. El mecanismo VCG se define de la siguiente manera: 1. Recibe curvas de oferta constantes por tramos y restricciones de capacidad de todos los compradores. 2. Implementar el resultado x∗ que resuelve el problema de determinación del ganador con todos los compradores. 3. Recauda el pago pvcg,i = pbid,i(x∗ i ) − [V (I) − V (I \ i)] de cada comprador y pasa los pagos al vendedor. En esta subasta ascendente, el mecanismo VCG es a prueba de estrategias para los compradores, lo que significa que hacer ofertas honestas es una estrategia dominante, es decir, maximiza la utilidad independientemente de las ofertas de otros compradores. Además, el mecanismo VCG es eficiente en términos de asignación, y los pagos de cada comprador son siempre positivos. Además, cada comprador paga menos que su valor, y recibe un beneficio de V(I) - V(I \ i) en equilibrio; esto es precisamente el valor marginal que el comprador i contribuye a la eficiencia económica del sistema. En la subasta inversa, hay un comprador con M unidades para comprar y n proveedores. Suponemos que el comprador tiene un valor V > 0 para comprar todas las M unidades, pero un valor de cero en caso contrario. Para simplificar el problema de diseño del mecanismo, asumimos que el comprador anunciará sinceramente este valor al mecanismo. De hecho, el mecanismo VCG maximiza el pago esperado al vendedor entre todos los mecanismos eficientes, incluso permitiendo implementaciones de Bayes-Nash. Sin esta suposición, el resultado de imposibilidad de Myerson-Satterthwaite ya implicaría que no deberíamos esperar un mecanismo de intercambio eficiente en este escenario. El problema de determinación del ganador en la subasta inversa es determinar la asignación, x∗, que minimiza el costo para el comprador, o renunciar al intercambio si el costo mínimo es mayor que el valor, V. Que C(I) denote el costo mínimo dado los presupuestos de todos los vendedores, y que C(I \i) denote el costo mínimo sin los presupuestos del vendedor i. Podemos asumir, sin pérdida de generalidad, que existe un comercio eficiente y V ≥ C(I). De lo contrario, el resultado eficiente es la ausencia de intercambio, y el resultado del mecanismo VCG es la ausencia de intercambio y de pagos. El mecanismo VCG implementa el resultado x∗ que minimiza el costo basado en las ofertas de todos los vendedores, y luego proporciona el pago pvcg,i = pask,i(x∗ i )+[V −C(I)−max(0, V −C(I\i))] a cada vendedor. El pago total se recoge del comprador. Nuevamente, en equilibrio, la ganancia de cada vendedor es exactamente el valor marginal que el vendedor contribuye a la eficiencia económica del sistema; en el caso simple en el que V ≥ C(I \ i) para todos los vendedores i, esto es precisamente C(I \ i) − C(I). Aunque el mecanismo VCG sigue siendo a prueba de estrategias para los vendedores en la dirección inversa, su aplicabilidad está limitada a casos en los que los pagos totales a los vendedores son menores que el valor de los compradores. De lo contrario, habrá casos en los que el comprador no elija participar voluntariamente en el mecanismo, basándose en su propio valor y sus creencias sobre los costos de los vendedores. Esto conduce a una pérdida de eficiencia cuando el comprador elige no participar, ya que se pierden intercambios eficientes. Este problema con el tamaño de los pagos no ocurre en subastas inversas simples de un solo artículo, ni siquiera en subastas inversas de múltiples unidades con un comprador que tiene una valoración marginal constante para cada artículo adicional que adquiere. Intuitivamente, el problema ocurre en el entorno de subastas inversas de múltiples unidades porque el comprador demanda un número fijo de artículos y no tiene valor sin ellos. Esto lleva a la posibilidad de que el comercio esté condicionado a la presencia de vendedores particulares, llamados vendedores clave. Define a seller i as pivotal, if C(I) ≤ V but C(I\i) > V. 

Define a un vendedor i como pivotal, si C(I) ≤ V pero C(I\i) > V. En otras palabras, no habría comercio eficiente sin el vendedor. Cada vez que hay un vendedor clave, los pagos VCG a ese vendedor le permiten extraer todo el excedente, y los pagos son demasiado grandes para sostenerse con el valor de los compradores a menos que este sea el único vendedor ganador. Concretamente, tenemos este problema de participación en la subasta inversa cuando el pago total a los vendedores, en equilibrio, supera el pago total de la asignación eficiente: V − C(I) ≥ i [V − C(I) − max(0, V − C(I \ i))] Como se mencionó anteriormente, primero notemos que requerimos V > C(I \ i) para todos los vendedores i. En otras palabras, no debe haber vendedores clave. Dado esto, es entonces necesario y suficiente que: V − C(I) ≥ i (C(I \ i) − C(I)) (1) Para que la subasta inversa sea simétrica con la dirección hacia adelante, necesitaríamos un comprador con un valor marginal constante para comprar las primeras M unidades, y un valor cero para unidades adicionales. Los pagos a los vendedores nunca superarían el valor de los compradores en este caso. Por el contrario, para hacer la subasta ascendente simétrica con la subasta descendente, necesitaríamos un vendedor con un costo marginal constante (y alto) para vender cualquier cosa menos de las primeras M unidades, y luego un costo marginal bajo (o cero). Los pagos totales recibidos por el vendedor pueden ser inferiores al costo del vendedor por el resultado en este caso. En palabras, el excedente de la asignación eficiente debe ser mayor que el excedente marginal total proporcionado por cada vendedor. Considera un ejemplo con 3 agentes {1, 2, 3}, y V = 150 y C(123) = 50. La condición (1) se cumple cuando C(12) = C(23) = 70 y C(13) = 100, pero no cuando C(12) = C(23) = 80 y C(13) = 100. En el primer caso, las ganancias del agente π = (π0, π1, π2, π3), donde 0 es el vendedor, son (10, 20, 50, 20). En el segundo caso, los pagos son π = (−10, 30, 50, 30). Una cosa que sabemos, porque el mecanismo VCG maximizará el pago al comprador a través de todos los mecanismos eficientes [14], es que siempre que la Ec. 1 no se cumpla, no puede haber un mecanismo de subasta eficiente. 2.3 ε-Strategyproofness Ahora consideramos el mismo mecanismo VCG, pero con un esquema de aproximación para el problema de asignación subyacente. Obtenemos un resultado de ε-estrategia a prueba de manipulaciones, que limita la ganancia máxima en el pago que un agente puede esperar lograr a través de una desviación unilateral de seguir una estrategia simple que revela la verdad. Describimos el resultado para la dirección de la subasta hacia adelante, pero es una observación bastante general. Como antes, sea V(I) el valor de la solución óptima al problema de asignación con ofertas veraces de todos los agentes, y V(I \i) el valor de la solución óptima calculada sin las ofertas del agente i. Que ˆV (I) y ˆV (I \ i) denoten el valor de la asignación calculado con un esquema de aproximación, y suponga que la aproximación cumple con: (1 + ) ˆV (I) ≥ V (I) para algún > 0. Proporcionamos un esquema de aproximación para nuestra configuración más adelante en el artículo. Que ˆx denote la asignación implementada por el esquema de aproximación. El pago para el agente i, al anunciar la valoración ˆvi, es: vi(ˆxi) + j=i ˆvj (ˆxj) − ˆV (I \ i) El término final es independiente del valor anunciado por los agentes, y puede ser ignorado en un análisis de incentivos. Sin embargo, el agente i puede intentar mejorar su recompensa a través del efecto de su valor anunciado en la asignación ˆx implementada por el mecanismo. En particular, el agente i desea que el mecanismo seleccione ˆx para maximizar la suma de su valor real, vi(ˆxi), y el valor reportado de los otros agentes, Èj=i ˆvj (ˆxj). Si el algoritmo de asignación de mecanismos es óptimo, entonces todo lo que el agente necesita hacer es declarar honestamente su valor y el mecanismo hará el resto. Sin embargo, ante un algoritmo de asignación aproximado, el agente puede intentar mejorar su recompensa anunciando un valor que corrija la aproximación, y provoque que el algoritmo de aproximación implemente la asignación que maximiza exactamente el valor total informado de los otros agentes junto con su propio valor real. Esta condición está implícita en el requisito de que los agentes sean sustitutos, que ha recibido cierta atención en la literatura de subastas combinatorias porque caracteriza el caso en el que los pagos VCG pueden ser respaldados en un equilibrio competitivo. Las caracterizaciones útiles de las condiciones que satisfacen a los agentes como sustitutos, en términos de las valoraciones subyacentes de los agentes, han resultado bastante esquivas. Además, aunque existe una pequeña literatura sobre mecanismos de eficiencia máxima sujetos a requisitos de participación voluntaria y equilibrio presupuestario (es decir, con el mecanismo sin introducir o eliminar dinero), los resultados analíticos solo se conocen para problemas simples (por ejemplo, [16, 4]). Ahora podemos analizar la mejor ganancia posible de la manipulación para un agente en nuestro entorno. Primero asumimos que los otros agentes son veraces, y luego flexibilizamos esto. En ambos casos, el beneficio máximo para el agente i ocurre cuando la aproximación inicial es la peor posible. Con informes veraces de otros agentes, esto ocurre cuando el valor de la elección ˆx es V (I)/(1 + ε). Entonces, un agente podría esperar recibir un beneficio mejorado de: V (I) − V (I) 1 + ε = ε 1 + ε V (I). Esto es posible si el agente es capaz de seleccionar un tipo informado para corregir el algoritmo de aproximación y hacer que el algoritmo implemente la asignación con valor V (I). Por lo tanto, si otros agentes son veraces, y con un esquema de aproximación (1 + ε) para el problema de asignación, entonces ningún agente puede mejorar su ganancia en más de un factor ε/(1 + ε) del valor de la solución óptima. El análisis es muy similar cuando los otros agentes no son sinceros. En este caso, un agente individual puede mejorar su recompensa en no más de un factor /(1 + ) del valor de la solución óptima dada los valores reportados por los otros agentes. Que V en el siguiente teorema defina el valor total de la asignación eficiente, dado los valores reportados de los agentes j = i, y el valor real del agente i. TEOREMA 1. Un mecanismo basado en VCG con un algoritmo de asignación (1 + ε) es (1+ −V ) a prueba de estrategias para el agente i, y el agente i puede obtener como máximo esta ganancia a través de alguna estrategia no veraz. Observa que no fue necesario acotar el error en los problemas de asignación sin cada agente, ya que el resultado de ser -estrictamente veraz se sigue de la precisión del primer término en el pago VCG y es independiente de la precisión del segundo término. Sin embargo, la precisión de la solución al problema sin cada agente es importante para implementar una buena aproximación a las propiedades de ingresos del mecanismo VCG. En esta sección, diseñamos un esquema de aproximación polinómica completa para el problema de la mochila generalizada, que modela el problema de determinación de ganadores para las subastas multiunidad basadas en VCG. Describimos nuestros resultados para la variación de la subasta inversa, pero la formulación es completamente simétrica para la subasta ascendente. Al describir nuestro esquema de aproximación, comenzamos con una propiedad simple (la propiedad Ancla) de una solución óptima de la mochila. Utilizamos esta propiedad para desarrollar una aproximación de 2 tiempos O(n2) para la mochila generalizada. A su vez, utilizamos esta aproximación básica para desarrollar nuestro esquema de aproximación en tiempo polinómico completo (FPTAS). Uno de los principales atractivos de nuestro lenguaje de oferta por tramos es su representación compacta de las funciones de valoración de los postores. Nos esforzamos por preservar esto, y presentamos un esquema de aproximación que dependerá solo del número de postores, y no de la cantidad máxima, M, que puede ser muy grande en entornos realistas de adquisiciones. El FPTAS implementa una aproximación (1 + ε) a la solución óptima x∗, en un tiempo de peor caso T = O(n3 /ε), donde n es el número de postores, y donde asumimos que la oferta segmentada para cada postor tiene O(1) segmentos. La dependencia del número de piezas también es polinómica: si cada oferta tiene un máximo de 169 piezas c, entonces el tiempo de ejecución se puede derivar sustituyendo nc por cada ocurrencia de n. 3.1 Preliminares Antes de comenzar, recordemos el clásico problema de la mochila 0/1: se nos da un conjunto de n elementos, donde el elemento i tiene un valor vi y un tamaño si, y una mochila de capacidad M; todos los tamaños son enteros. El objetivo es determinar un subconjunto de elementos de valor máximo con un tamaño total de como máximo M. Dado que queremos enfocarnos en una subasta inversa, el problema de la mochila equivalente será elegir un conjunto de elementos con valor mínimo (es decir, costo) cuyo tamaño exceda M. El problema de la mochila generalizado de interés para nosotros se puede definir de la siguiente manera: Problema de la mochila generalizado: Instancia: Un objetivo M y un conjunto de n listas, donde la i-ésima lista tiene la forma Bi = (u1 i , p1 i ), . . . , (umi−1 i , pmi−1 i ), (umi i (i), ∞) , donde uj i son crecientes con j y pj i son decrecientes con j, y uj i , pj i , M son enteros positivos. Problema: Determinar un conjunto de enteros xj i de manera que 1. (Uno por lista) Como máximo un xj i es distinto de cero para cualquier i, 2. (Pertenencia) xj i = 0 implica xj i ∈ [uj i , uj+1 i ), 3. (Objetivo) Èi Èj xj i ≥ M, y 4. (Objetivo) Èi Èj pj i xj i se minimice. Esta formulación generalizada de la mochila es una generalización clara de la clásica mochila 0/1. En este último, cada lista consiste en un único punto (si, vi). La conexión entre la mochila generalizada y nuestro problema de subasta es transparente. Cada lista codifica una oferta, representando múltiples intervalos de cantidad mutuamente excluyentes, y se puede elegir cualquier cantidad en un intervalo, pero como máximo se puede seleccionar un intervalo. Elegir el intervalo [uj i , uj+1 i ) tiene un costo de pj i por unidad. El objetivo es adquirir al menos M unidades del bien al menor costo posible. El problema tiene cierto sabor del problema de la mochila continua. Sin embargo, hay dos diferencias principales que hacen que nuestro problema sea significativamente más difícil: (1) los intervalos tienen límites, por lo que elegir el intervalo [uj i , uj+1 i ) requiere que se tomen al menos uj i y como máximo uj+1 i unidades; (2) a diferencia de la mochila clásica, no podemos ordenar los elementos (ofertas) por valor/tamaño, ya que diferentes intervalos en una lista tienen costos unitarios diferentes. 3.2 Un Esquema de Aproximación de 2 We comenzamos con una definición. Dado una instancia de la mochila generalizada, llamamos a cada tupla tj i = (uj i , pj i ) un ancla. Recuerde que estas tuplas representan los puntos de quiebre en las ofertas de curva constante por tramos. Decimos que el tamaño de un ancla tj i es uj i, 8 De hecho, debido a la restricción de uno por lista, el problema generalizado se asemeja más al problema de la mochila de selección múltiple [9], donde el conjunto subyacente de elementos se divide en subconjuntos disjuntos U1, U2, . . . , Uk, y se puede elegir como máximo un elemento de cada subconjunto. Existen PTAS para este problema [10], y de hecho, se puede convertir nuestro problema en una gran instancia del problema de la mochila de selección múltiple, creando un grupo para cada lista; colocar un par de puntos (cantidad, precio) (x, p) para cada cantidad posible para un postor en su grupo (subconjunto). Sin embargo, esta conversión hace que el tamaño del problema explote, volviéndolo inviable para todos menos los casos más triviales. el número mínimo de unidades disponibles a este precio de anclaje pj i. El costo del ancla tj i se define como el precio total mínimo asociado con esta tupla, es decir, coste(tj i) = pj i uj i si j < mi, y coste(tmi i) = pmi−1 i umi i. En una solución factible {x1, x2, . . . , xn} del problema de la mochila generalizado, decimos que un elemento xi = 0 es un ancla si xi = uj i , para algún ancla uj i. De lo contrario, decimos que xi es el rango medio. Observamos que una solución óptima de la mochila siempre se puede construir de manera que como máximo un elemento de la solución esté en el rango medio. Si hay dos elementos de rango medio x y x, para ofertas de dos agentes diferentes, con x ≤ x, entonces podemos incrementar x y decrementar x, hasta que uno de ellos se convierta en un ancla. Consulte la Figura 2 para ver un ejemplo. LEMMA 1. [Propiedad de Anclaje] Existe una solución óptima del problema de la mochila generalizada con a lo sumo un elemento de rango medio. Todos los demás elementos son anclas. 1 oferta de rango medio 5 20 15 10 25 5 25 30201510 35 3 2 1 Precio Cantidad 5 20 15 10 25 5 25 30201510 35 3 2 1 Precio Cantidad (i) Solución óptima con 2 ofertas de rango medio (ii) Solución óptima con Figura 2: (i) Una solución óptima con más de una oferta no anclada (2,3); (ii) una solución óptima con solo una oferta (3) no anclada. Utilizamos la propiedad del ancla para obtener primero un esquema de aproximación 2 en tiempo polinómico. Esto lo hacemos resolviendo varias instancias de un problema de mochila generalizado restringido, al que llamamos iKnapsack, donde un elemento debe estar en el rango medio para un intervalo particular. Específicamente, supongamos que el elemento x para el agente l está obligado a estar en su rango j-ésimo, [uj, uj+1), mientras que todos los demás elementos, x1, ..., xl−1, xl+1, xn, deben ser anclas o cero. Esto corresponde al problema restringido iKnapsack( , j), en el que el objetivo es obtener al menos M − uj unidades con el costo mínimo. El elemento x se asume que ya ha contribuido uj unidades. El valor de una solución para iKnapsack( , j) representa el costo adicional mínimo para comprar el resto de las unidades. Creamos n − 1 grupos de posibles anclas, donde el grupo i-ésimo contiene todas las anclas de la lista i en la mochila generalizada. El grupo para el agente l contiene un único elemento que representa el intervalo [0, uj+1 −uj), y el precio unitario asociado pj. Este intervalo representa el número excedente de unidades que se pueden tomar del agente l en iKnapsack( , j), además de uj, que ya ha sido comprometido. En cualquier otro grupo, podemos elegir como máximo un ancla. El siguiente pseudocódigo describe nuestro algoritmo para esta restricción del problema de la mochila generalizada. U es la unión de todas las tuplas en n grupos, incluyendo una tupla t para el agente l. El tamaño de esta tupla especial se define como uj+1 − uj, y el costo se define como pj l (uj+1 − uj). R es el número de unidades que quedan por adquirir. S es el conjunto de tuplas aceptadas en la actual solución tentativa 170. La mejor es la mejor solución encontrada hasta ahora. La variable Skip solo se utiliza en la demostración de corrección. Algoritmo Voraz( , j) 1. Ordena todas las tuplas de U en orden ascendente según el precio unitario; en caso de empate, ordénalas en orden ascendente según las cantidades unitarias. Establecer mark(i) = 0, para todas las listas i = 1, 2, . . . , n. Inicializar R = M − uj, S = Best = Skip = ∅. 3. Escanea las tuplas en U en orden ordenado. Supongamos que la siguiente tupla es tk i, es decir, el k-ésimo ancla del agente i. Si mark(i) = 1, ignora esta tupla; de lo contrario, sigue los siguientes pasos: • si size(tk i ) > R e i = return min {cost(S) + Rpj , cost(Best)}; • si size(tk i ) > R y cost(tk i ) ≤ cost(S) return min {cost(S) + cost(tk i ), cost(Best)}; • si size(tk i ) > R y cost(tk i ) > cost(S) Agregar tk i a Skip; Establecer Best como S ∪ {tk i } si el costo mejora; • si size(tk i ) ≤ R entonces agregar tk i a S; mark(i) = 1; restar size(tk i ) de R. El algoritmo de aproximación es muy similar al algoritmo de aproximación para la mochila. Dado que deseamos minimizar el costo total, consideramos las tuplas en orden de costo por unidad creciente. Si el tamaño de la tupla tk i es menor que R, entonces la agregamos a S, actualizamos R y eliminamos de U todas las tuplas que pertenecen al mismo grupo que tk i. Si el tamaño de tk i es mayor que R, entonces S junto con tk i forma una solución factible. Sin embargo, esta solución puede estar lejos de ser óptima si el tamaño de tk i es mucho mayor que R. Si el costo total de S y tk i es menor que la mejor solución actual, actualizamos Mejor. Una excepción a esta regla es la tupla t. Dado que esta tupla puede ser tomada fraccionalmente, actualizamos Mejor si la suma del costo de Ss y el costo fraccional de t es una mejora. El algoritmo termina en cualquiera de los dos primeros casos, o cuando se escanean todas las tuplas. En particular, termina cuando encontramos un tk i tal que el tamaño(tk i) es mayor que R pero el costo(tk i) es menor que el costo(S), o cuando alcanzamos la tupla que representa al agente l y proporciona una solución factible. LEMMA 2. 

LEMMA 2. Supongamos que A∗ es una solución óptima del problema de la mochila generalizado, y supongamos que el elemento (l, j) está en la mitad de la solución óptima. Entonces, el costo V (l, j), devuelto por Greedy( , j), satisface: V ( , j) + costo(tj ) ≤ 2costo(A∗ ) PRUEBA. Sea V( , j) el valor devuelto por Greedy( , j) y sea V ∗ ( , j) una solución óptima para iKnapsack( , j). Considera el conjunto Skip al finalizar Greedy( , j). Hay dos casos a considerar: o bien algún conjunto t ∈ Skip también está en V ∗ ( , j), o ningún conjunto en Skip está en V ∗ ( , j). En el primer caso, sea St la solución tentativa S en el momento en que se agregó a Skip. Dado que t ∈ Skip entonces size(t) > R, y St junto con t forman una solución factible, y tenemos: V( , j) ≤ coste(Mejor) ≤ coste(St) + coste(t). Nuevamente, dado que t ∈ Skip entonces cost(t) > cost(St), y tenemos V( , j) < 2cost(t). Por otro lado, dado que t está incluido en V ∗ ( , j), tenemos que V ∗ ( , j) ≥ cost(t). Estas dos desigualdades implican el límite deseado: V ∗ ( , j) ≤ V ( , j) < 2V ∗ ( , j). En el segundo caso, imagina una instancia modificada de iKnapsack( , j), que excluye todas las tuplas del conjunto Skip. Dado que ninguno de estos pares ordenados fue incluido en V ∗ ( , j), la solución óptima para el problema modificado debería ser la misma que la del original. Supongamos que nuestro algoritmo de aproximación devuelve el valor V( , j) para esta instancia modificada. Sea t la última tupla considerada por el algoritmo de aproximación antes de la terminación en la instancia modificada, y sea St el conjunto de soluciones tentativas correspondiente en ese paso. Dado que consideramos las tuplas en orden de precio por unidad creciente, y ninguna de las tuplas va a ser colocada en el conjunto Skip, debemos tener cost(St) < V ∗ ( , j) porque St es la forma óptima de obtener size(St). También tenemos cost(t) ≤ cost(St), y las siguientes desigualdades: V( , j) ≤ V( , j) ≤ cost(St) + cost(t) < 2V ∗( , j). La desigualdad V( , j) ≤ V( , j) se sigue del hecho de que una tupla en la lista de omisión solo puede afectar a la Mejor solución pero no a las soluciones tentativas. Por lo tanto, eliminar las tuplas en el conjunto Skip solo puede empeorar la solución. El argumento anterior ha demostrado que el valor devuelto por Greedy( , j) está dentro de un factor 2 de la solución óptima para iKnapsack( , j). Ahora demostramos que el valor V( , j) más el costo(tj) es una aproximación de 2 del problema original de la mochila generalizada. Sea A∗ una solución óptima del problema de la mochila generalizada, y supongamos que el elemento xj es de rango medio. Deje x− ser el conjunto de los elementos restantes, ya sea cero o anclas, en esta solución. Además, define x = xj − uj. Por lo tanto, el costo(A∗) = costo(xl) + costo(tj l) + costo(x−l). Es fácil ver que (x−, x) es una solución óptima para iKnapsack( , j). Dado que V( , j) es una aproximación de 2 para esta solución óptima, tenemos las siguientes desigualdades: V( , j) + costo(tj) ≤ costo(tj) + 2(costo(x) + costo(x−)) ≤ 2(costo(x) + costo(tj) + costo(x−)) ≤ 2costo(A∗). Esto completa la prueba del Lema 2. Es fácil ver que, después de una clasificación inicial de las tuplas en U, el algoritmo Greedy( , j) toma tiempo O(n). Tenemos nuestro primer algoritmo de aproximación polinomial. TEOREMA 2. Una aproximación de 2 del problema de la mochila generalizada se puede encontrar en tiempo O(n2), donde n es el número de listas de elementos (cada una de longitud constante). PRUEBA. Ejecutamos el algoritmo Greedy( , j) una vez por cada tupla (l, j) como candidato para el rango medio. Hay O(n) tuplas, y basta con ordenarlas una vez, el costo total del algoritmo es O(n^2). Por el Lema 1, hay una solución óptima con a lo sumo un elemento de rango medio, por lo que nuestro algoritmo encontrará una aproximación de 2, como se afirma. La dependencia del número de piezas también es polinómica: si cada oferta tiene un máximo de c piezas, entonces el tiempo de ejecución es O((nc)2). 171 3.3 Un Esquema de Aproximación Ahora utilizamos el algoritmo de aproximación 2 presentado en la sección anterior para desarrollar un esquema de aproximación completamente polinómico (FPTAS) para el problema de la mochila generalizada. La idea de alto nivel es bastante estándar, pero los detalles requieren cuidado técnico. Utilizamos un algoritmo de programación dinámica para resolver iKnapsack( , j) para cada posible elemento de rango medio, con el algoritmo de aproximación 2 proporcionando un límite superior en el valor de la solución y permitiendo el uso de escalado en la dimensión de coste de la tabla de programación dinámica (DP). Consideremos, por ejemplo, el caso en que el elemento de rango medio es x, que cae en el rango [uj, uj+1). En nuestro FPTAS, en lugar de utilizar un algoritmo de aproximación voraz para resolver iKnapsack( , j), construimos una tabla de programación dinámica para calcular el costo mínimo al cual se pueden obtener al menos M − uj+1 unidades utilizando las n − 1 listas restantes en la mochila generalizada. Supongamos que G[i, r] denota el número máximo de unidades que se pueden obtener a un costo de como máximo r utilizando solo las primeras i listas en la mochila generalizada. Entonces, la siguiente relación de recurrencia describe cómo construir la tabla de programación dinámica: G[0, r] = 0 G[i, r] = máximo ´ G[i − 1, r] máximo j∈β(i,r) {G[i − 1, r − cost(tj i )] + uj i } µ donde β(i, r) = {j : 1 ≤ j ≤ mi, cost(tj i ) ≤ r}, es el conjunto de anclas para el agente i. Como convención, el agente i indexará la fila y el costo r indexará la columna. Este algoritmo de programación dinámica es solo seudo-polinómico, ya que el número de columnas en la tabla de programación dinámica depende del costo total. Sin embargo, podemos convertirlo en un FPTAS escalando la dimensión del costo. Que A denote la aproximación de 2 al problema de la mochila generalizada, con costo total, coste(A). Que ε denote el factor de aproximación deseado. Calculamos el costo escalado de una tupla tj i, denotado como scost(tj i), como scost(tj i) = n cost(tj i) εcost(A) (2). Este escalado mejora el tiempo de ejecución del algoritmo porque el número de columnas en la tabla modificada es a lo sumo n ε, e independiente del costo total. Sin embargo, la solución calculada podría no ser una solución óptima para el problema original. Mostramos que el error introducido está dentro de un factor de ε de la solución óptima. Como preludio a nuestra garantía de aproximación, primero demostramos que si dos soluciones diferentes al problema de la mochila escalada tienen un costo escalado igual, entonces sus costos originales (no escalados) no pueden diferir en más de εcost(A). LEMMA 3. 

LEMMA 3. Sean x e y dos soluciones factibles distintas de iKnapsack( , j), excluyendo sus elementos de rango medio. Si x e y tienen costos escalados iguales, entonces sus costos no escalados no pueden diferir en más de εcosto(A). PRUEBA. Que Ix e Iy, respectivamente, denoten las funciones indicadoras asociadas con los vectores ancla x e y, hay un 1 en la posición Ix[i, k] si el xk i > 0. Dado que x e y tienen un costo escalado igual, i= k scost(tk i )Ix[i, k] = i= k scost(tk i )Iy[i, k] (3) Sin embargo, por (2), los costos escalados satisfacen las siguientes desigualdades: (scost(tk i ) − 1)εcost(A) n ≤ cost(tk i ) ≤ scost(tk i )εcost(A) n (4) Sustituyendo el límite superior del costo escalado de (4) por el costo(x), el límite inferior del costo escalado de (4) por el costo(y), y usando la igualdad (3) para simplificar, obtenemos: cost(x) − cost(y) ≤ εcost(A) n i= k Iy[i, k] ≤ εcost(A), La última desigualdad utiliza el hecho de que como máximo n componentes de un vector indicador son diferentes de cero; es decir, cualquier solución factible contiene como máximo n tuplas. Finalmente, dado la tabla de programación dinámica para iKnapsack( , j), consideramos todas las entradas en la última fila de esta tabla, G[n−1, r]. Estas entradas corresponden a soluciones óptimas con todos los agentes excepto l, para diferentes niveles de costo. En particular, consideramos las entradas que proporcionan al menos M − uj+1 unidades. Junto con una contribución del agente l, elegimos la entrada en este conjunto que minimiza el costo total, definido de la siguiente manera: costo(G[n − 1, r]) + max {uj , M − G[n − 1, r]}pj, donde costo() es el costo original y no escalado asociado con la entrada G[n−1, r]. Vale la pena señalar que, a diferencia del esquema de aproximación 2 para iKnapsack( , j), el valor calculado con este FPTAS incluye el costo de adquirir uj l unidades de l. El siguiente lema muestra que logramos una aproximación (1+ε). LEMMA 4. 

LEMMA 4. Supongamos que A∗ es una solución óptima del problema de la mochila generalizada, y supongamos que el elemento (l, j) está en la mitad de la solución óptima. Entonces, la solución A(l, j) obtenida al ejecutar el algoritmo de programación dinámica escalado en iKnapsack( , j) satisface que el costo de A(l, j) es menor o igual a (1 + 2ε) veces el costo de A∗. DEMOSTRACIÓN. Sea x− el vector de los elementos en la solución A∗ sin el elemento l. Entonces, por definición, el costo(A∗) = costo(x−) + pj xj. Sea r = scost(x− ) el costo escalado asociado con el vector x− . Ahora considera la tabla de programación dinámica construida para iKnapsack( , j), y considera su entrada G[n − 1, r]. Que A denote la aproximación de 2 al problema de la mochila generalizada, y A(l, j) denote la solución del algoritmo de programación dinámica. Supongamos que y− es la solución asociada con esta entrada en nuestro programa dinámico; los componentes del vector y− son las cantidades de diferentes listas. Dado que tanto x− como y− tienen costos escalados iguales, por el Lema 3, sus costos no escalados están dentro de εcost(A) uno del otro; es decir, cost(y−) − cost(x−) ≤ εcost(A). Ahora, define yj = max{uj , M − Σi=1 Σj yji}; esta es la contribución necesaria de yj para hacer que (y− , yj ) sea una solución factible. Entre todas las soluciones de igual costo, nuestras tablas de programación dinámica eligen la que tiene el máximo de unidades. Por lo tanto, i= j yj i ≥ i= j xj i 172 Por lo tanto, debe ser el caso que yj ≤ xj. Dado que (yj, y−) es también una solución factible, si nuestro algoritmo devuelve una solución con costo coste(A(l, j)), entonces debemos tener coste(A(l, j)) ≤ coste(y−) + pj yj ≤ coste(x−) + εcoste(A) + pj xj ≤ (1 + 2ε)coste(A∗), donde utilizamos el hecho de que coste(A) ≤ 2coste(A∗). Al juntar esto, nuestro esquema de aproximación para el problema de la mochila generalizada iterará el esquema descrito anteriormente para cada elección del elemento de rango medio (l, j), y elegirá la mejor solución de entre estas O(n) soluciones. Para un rango medio dado, el paso más costoso en el algoritmo es la construcción de la tabla de programación dinámica, la cual puede realizarse en tiempo O(n2 /ε) asumiendo intervalos constantes por lista. Por lo tanto, tenemos el siguiente resultado. TEOREMA 3. Podemos calcular una aproximación (1 + ε) a la solución de un problema de la mochila generalizada en tiempo de peor caso O(n3 /ε). La dependencia del número de piezas también es polinómica: si cada oferta tiene un máximo de c piezas, entonces el tiempo de ejecución se puede derivar sustituyendo cn por cada ocurrencia de n. CALCULANDO LOS PAGOS VCG Ahora consideramos el problema relacionado de calcular los pagos VCG para todos los agentes. Un enfoque ingenuo requiere resolver el problema de asignación n veces, eliminando a cada agente por turno. En esta sección, demostramos que nuestro esquema de aproximación para la mochila generalizada se puede extender para determinar los n pagos en un tiempo total de O(αT log(αn/ε)), donde 1 ≤ C(I\i)/C(I) ≤ α, para un límite superior constante, α, y T es la complejidad de resolver el problema de asignación una vez. Este límite α puede justificarse como una condición de no monopolio, ya que limita el valor marginal que un único comprador aporta a la subasta. De manera similar, en la variación inversa podemos calcular los pagos VCG a cada vendedor en tiempo O(αT log(αn/ε)), donde α acota la razón C(I\ i)/C(I) para todos los i. Nuestra estrategia general será construir dos tablas de programación dinámica, una hacia adelante y otra hacia atrás, para cada elemento de rango medio (l, j) una vez. La tabla hacia adelante se construye considerando a los agentes en el orden de sus índices, mientras que la tabla hacia atrás se construye considerándolos en orden inverso. La solución óptima correspondiente a C(I \ i) se puede dividir en dos partes: una correspondiente a los primeros (i − 1) agentes y la otra correspondiente a los últimos (n − i) agentes. Dado que la fila (i − 1) de la tabla hacia adelante corresponde a los vendedores con los primeros (i−1) índices, una aproximación a la primera parte estará contenida en la fila (i − 1) de la tabla hacia adelante. De manera similar, la fila (n− i) de la tabla inversa contendrá una aproximación para la segunda parte. Primero presentamos una forma simple pero ineficiente de calcular el valor aproximado de C(I \ i), que ilustra la idea principal de nuestro algoritmo. Luego presentamos un esquema mejorado, que utiliza el hecho de que los elementos en las filas están ordenados, para calcular el valor aproximado de manera más eficiente. En lo siguiente, nos concentramos en calcular una asignación con xj siendo el rango medio, y algún agente i = l eliminado. Esto será un componente en el cálculo de una aproximación a C(I \ i), el valor de la solución al problema de la mochila generalizada sin ofertas del agente i. Comenzamos con el esquema simple. 4.1 Un Esquema de Aproximación Simple Implementamos el algoritmo de programación dinámica escalado para iKnapsack( , j) con dos órdenes alternativos sobre los otros vendedores, k = l, uno con los vendedores ordenados 1, 2, . . . , n, y otro con los vendedores ordenados n, n − 1, . . . , 1. Llamamos a la primera tabla la tabla hacia adelante, y la denotamos como F, y a la segunda tabla la tabla hacia atrás, y la denotamos como Bl. El subíndice nos recuerda que el agente está en el rango medio. Al construir estas tablas, utilizamos el mismo factor de escala que antes; es decir, el costo de una tupla tj i se escala de la siguiente manera: scost(tj i ) = ncost(tj i ) εcost(A) donde cost(A) es el límite superior en C(I), dado por nuestro esquema de aproximación de 2 aproximaciones. En este caso, dado que C(I \ i) puede ser α veces C(I), el valor escalado de C(I \ i) puede ser a lo sumo nα/ε. Por lo tanto, la dimensión de costos de nuestra tabla de programas dinámicos será nα/ε. Tabla F (i−1)l 2 3 1 2 i−1 1 m−1 m n−1 g 2 31 m−1 m B (n−i) n−1 n−2 n−i 1 lh Tabla Bl Figura 3: Cálculo de pagos VCG. m = nα ε Ahora, supongamos que queremos calcular una aproximación (1 + ) al problema de la mochila generalizada restringido al elemento (l, j) de rango medio, y además restringido para eliminar ofertas de algún vendedor i = l. Llamemos a este problema iKnapsack−i ( , j). Recuerda que la fila i-ésima de nuestra tabla de programación dinámica almacena la mejor solución posible utilizando solo los primeros i agentes, excluyendo al agente l, todos ellos ya sea despejados en cero o en anclas. Estos primeros agentes i son un subconjunto diferente de agentes en las tablas hacia adelante y hacia atrás. Al combinar cuidadosamente una fila de Fl con una fila de Bl, podemos calcular una aproximación a iKnapsack−i( , j). Consideramos la fila de Fl que corresponde a las soluciones construidas a partir de los agentes {1, 2, . . . , i − 1}, omitiendo al agente l. Consideramos la fila de Bl que corresponde a las soluciones construidas a partir de los agentes {i+1, i+2, . . . , n}, nuevamente omitiendo al agente l. Las filas están etiquetadas como Fl(i − 1) y Bl(n − i) respectivamente. Los costos escalados para adquirir estas unidades son los índices de columna para estas entradas. Para resolver iKnapsack−i( , j) elegimos una entrada de la fila F(i−1) y una de la fila B(n−i) de modo que su cantidad total supere a M − uj+1 y su costo combinado sea mínimo entre todas esas combinaciones. Formalmente, sea g ∈ Fl(i − 1) y h ∈ Bl(n − 1) denotando las entradas en cada fila, con size(g), size(h) denotando el número de unidades y cost(g) y cost(h) denotando el costo no escalado asociado con la entrada. Calculamos lo siguiente, sujeto 9 Podríamos etiquetar las tablas con ambos y j, para indicar que la j-ésima tupla está obligada a ser de rango medio, pero omitimos j para evitar desorden. Para ser precisos, el índice de las filas son (i − 2) y (n − i) para Fl y Bl cuando l < i, y (i − 1) y (n − i − 1), respectivamente, cuando l > i. 173 a la condición de que g y h satisfacen size(g) + size(h) > M − uj+1 : min g∈F (i−1),h∈B (n−i) Òcost(g) + cost(h) + pj · max{uj , M − size(g) − size(h)} Ó (5) LEMA 5. Supongamos que A−i es una solución óptima del problema de la mochila generalizada sin ofertas del agente i, y supongamos que el elemento (l, j) es el elemento de rango medio en la solución óptima. Entonces, la expresión en la Ecuación 5, para el problema restringido iKnapsack−i ( , j), calcula una aproximación (1 + ε) a A−i. PRUEBA. Desde antes, definimos el costo(A−i) = C(I \ i). Podemos dividir la solución óptima, A−i, en tres partes disjuntas: xl corresponde al vendedor de rango medio, xi corresponde a los primeros i − 1 vendedores (omitir al agente l si l < i), y x−i corresponde a los últimos n − i vendedores (omitir al agente l si l > i). Tenemos: coste(A−i) = coste(xi) + coste(x−i) + pj xj Sea ri = scoste(xi) y r−i = scoste(x−i). Dejen que yi e y−i sean los vectores solución correspondientes a los costos escalados ri y r−i en F(i − 1) y B(n − i), respectivamente. A partir del Lema 3 concluimos que, cost(yi) + cost(y−i) − cost(xi) − cost(x−i) ≤ εcost(A) donde cost(A) es la cota superior de C(I) calculada con la aproximación de 2. Entre todas las soluciones de costos escalados iguales, nuestro programa dinámico elige la que tiene el máximo de unidades. Por lo tanto, también tenemos (tamaño(yi) ≥ tamaño(xi)) y (tamaño(y−i) ≥ tamaño(x−i)) donde usamos la abreviatura tamaño(x) para denotar el número total de unidades en todas las tuplas en x. Ahora, define yj l = max(uj l , M −tamaño(yi)−tamaño(y−i)). A partir de las desigualdades anteriores, tenemos yj l ≤ xj l. Dado que (yj l , yi, y−i) también es una solución factible para el problema de la mochila generalizado sin el agente i, el valor devuelto por la Ecuación 5 es a lo sumo cost(yi) + cost(y−i) + pj l yj l ≤ C(I \ i) + εcost(A) ≤ C(I \ i) + 2cost(A∗ )ε ≤ C(I \ i) + 2C(I \ i)ε. Esto completa la prueba. Una implementación ingenua de este esquema será ineficiente porque podría verificar (nα/ε)2 pares de elementos, para cualquier elección particular de (l, j) y elección del agente eliminado i. En la siguiente sección, presentamos una forma eficiente de calcular la Ecuación 5, y eventualmente calcular los pagos VCG. 4.2 Esquema de Aproximación Mejorado Nuestro esquema de aproximación mejorado para el problema de determinación del ganador sin el agente i utiliza el hecho de que los elementos en F (i − 1) y B (n − i) están ordenados; específicamente, tanto el costo no escalado como la cantidad (es decir, el tamaño) aumentan de izquierda a derecha. Como antes, dejemos que g y h denoten entradas genéricas en F (i − 1) y B (n − i) respectivamente. Para calcular la Ecuación 5, consideramos todos los pares de tuplas y primero dividimos las tuplas que satisfacen la condición tamaño(g) + tamaño(h) > M − uj+1 l en dos conjuntos disjuntos. Para cada conjunto calculamos la mejor solución, y luego tomamos la mejor entre los dos conjuntos. [caso I: tamaño(g) + tamaño(h) ≥ M − uj l ] El problema se reduce a min g∈F (i−1), h∈B (n−i) Òcosto(g) + costo(h) + pj l uj Ó (6) Definimos un par (g, h) como factible si tamaño(g) + tamaño(h) ≥ M − uj l. Ahora, para calcular la Ecuación 6, realizamos un recorrido hacia adelante y hacia atrás en F (i − 1) y B (n − i) respectivamente. Empezamos desde el índice más pequeño de F (i − 1) y nos movemos hacia la derecha, y desde el índice más alto de B (n − i) y nos movemos hacia la izquierda. Que (g, h) sea el par actual. Si (g, h) es factible, decrementamos el puntero de Bs (es decir, retrocedemos); de lo contrario, incrementamos el puntero de Fs. Las parejas factibles encontradas durante la caminata se utilizan para calcular la Ecuación 6. La complejidad de este paso es lineal en el tamaño de F (i − 1), que es O(nα/ε). [caso II: M − uj+1 l ≤ tamaño(g) + tamaño(h) ≤ M − uj l] El problema se reduce a min g∈F (i−1), h∈B (n−i) Òcosto(g) + costo(h) + pj l (M − tamaño(g) − tamaño(h)) Ó Para calcular la ecuación anterior, transformamos el problema anterior en otro problema utilizando un costo modificado, que se define como: mcosto(g) = costo(g) − pj l · tamaño(g) mcosto(h) = costo(h) − pj l · tamaño(h) El nuevo problema es calcular min g∈F (i−1), h∈B (n−i) Òmcosto(g) + mcosto(h) + pj l M Ó (7) El costo modificado simplifica el problema, pero desafortunadamente los elementos en F (i − 1) y B (n − i) ya no están ordenados con respecto a mcosto. Sin embargo, los elementos siguen ordenados por cantidad y utilizamos esta propiedad para calcular la Ec. 7. Llama a un par (g, h) factible si M − uj+1 l ≤ tamaño(g) + tamaño(h) ≤ M − uj l. Define el conjunto factible de g como los elementos h ∈ B (n − i) que son factibles dados g. Dado que los elementos están ordenados por cantidad, el conjunto factible de g es un subconjunto contiguo de B (n − i) y se desplaza hacia la izquierda a medida que g aumenta. 2 3 4 5 10 20 30 40 50 60 Comienzo Fin B (n−i)15 20 25 30 35 40 65421 3 1 6 F (i−1)l l Figura 4: El conjunto factible de g = 3, definido en B (n − i), es {2, 3, 4} cuando M − uj+1 l = 50 y M − uj l = 60. "Begin y End representan los punteros de inicio y fin al conjunto factible." Por lo tanto, podemos calcular la Ec. 7 realizando un recorrido hacia adelante y hacia atrás en F (i − 1) y B (n − i) respectivamente. Caminamos en B (n − i), comenzando desde el índice más alto, utilizando dos punteros, Inicio y Fin, para indicar el inicio y el final del conjunto factible actual. Mantenemos el conjunto factible como un montículo mínimo, donde la clave es el costo modificado. Para actualizar el conjunto factible, al incrementar el puntero Fs (avanzar), caminamos hacia la izquierda en B, primero utilizando End para eliminar elementos del conjunto factible que ya no son factibles y luego utilizando Begin para agregar nuevos elementos factibles. Para un valor dado de g, el único elemento que necesitamos considerar en el conjunto factible de gs es aquel con el costo modificado mínimo, el cual puede ser calculado en tiempo constante con el montículo mínimo. Por lo tanto, la principal complejidad del cálculo radica en las actualizaciones del montículo. Dado que cualquier elemento se agrega o elimina a lo sumo una vez, hay O(nα ε ) actualizaciones de montículo y la complejidad temporal de este paso es O(nα ε log nα ε ). 4.3 Recopilando las piezas. El algoritmo funciona de la siguiente manera. Primero, utilizando el algoritmo de aproximación 2, calculamos una cota superior en C(I). Utilizamos este límite para reducir los costos de la tupla. Usando los costos escalados, construimos las tablas hacia adelante y hacia atrás correspondientes a cada tupla (l, j). Las tablas de avance se utilizan para calcular C(I). Para calcular C(I \ i), iteramos sobre todas las posibles tuplas de rango medio y utilizamos las tablas correspondientes de avance y retroceso para calcular la solución localmente óptima utilizando el esquema anterior. Entre todas las soluciones localmente óptimas, elegimos una con el costo total mínimo. El paso más costoso en el algoritmo es el cálculo de C(I \ i). La complejidad temporal de este paso es O(n2 α ε log nα ε ) ya que tenemos que iterar sobre todas las O(n) opciones de tj l , para todos los l = i, y cada vez usar el esquema anterior para calcular la Ec. 5. En el peor de los casos, podríamos necesitar calcular C(I \ i) para todos los n vendedores, en cuyo caso la complejidad final del algoritmo será O(n3 α ε log nα ε). TEOREMA 4. Podemos calcular una aproximación a la estrategia-proof de /(1+ ) al mecanismo VCG en las subastas de unidades múltiples hacia adelante y hacia atrás en un tiempo de peor caso O(n3 α ε log nα ε ). Es interesante recordar que T = O(n3 ε ) es la complejidad temporal del FPTAS para el problema de la mochila generalizada con todos los agentes. Nuestro esquema combinado calcula una aproximación al mecanismo VCG completo, incluyendo pagos a O(n) agentes, en complejidad temporal O(T log(n/ε)), tomando el parámetro de no-monopolio, α, como una constante. Por lo tanto, nuestro algoritmo funciona mucho mejor que el esquema ingenuo, que calcula el pago VCG para cada agente resolviendo una nueva instancia del problema de la mochila generalizada. La aceleración proviene de la forma en que resolvemos iKnapsack−i( , j). La complejidad temporal de calcular iKnapsack−i ( , j) creando una nueva tabla de programación dinámica será O(n2 ε ), pero al usar las tablas hacia adelante y hacia atrás, la complejidad se reduce a O(n ε log n ε ). Podemos mejorar aún más la complejidad temporal de nuestro algoritmo al calcular la Ec. 5 de manera más eficiente. Actualmente, el algoritmo utiliza un montículo, que tiene un tiempo de actualización logarítmico. En el peor de los casos, podemos tener dos operaciones de actualización de montículos por cada elemento, lo que hace que la complejidad temporal sea superlineal. Si podemos calcular la Ec. 5 en tiempo lineal, entonces la complejidad de calcular el pago VCG será la misma que la complejidad de resolver un único problema de la mochila generalizada. 5. CONCLUSIONES Presentamos un esquema de aproximación de tiempo polinómico completo para el problema de subasta multiunidad de un solo bien, utilizando un lenguaje de oferta constante por tramos decreciente marginalmente. Nuestro esquema es aproximadamente eficiente y aproximadamente a prueba de estrategias dentro de cualquier factor especificado ε > 0. Como tal, es un ejemplo de un resultado de dominancia ε computacionalmente tratable, así como un ejemplo de un problema de asignación no trivial pero aproximable. Es particularmente interesante que podamos calcular los pagos a n agentes en un mecanismo basado en VCG en un tiempo de peor caso O(T log n), donde T es la complejidad temporal para calcular la solución a un problema de asignación individual. REFERENCIAS [1] L M Ausubel y P R Milgrom. Subastas ascendentes con ofertas de paquetes. Fronteras de la Economía Teórica, 1:1-42, 2002. [2] S Bikchandani, S de Vries, J Schummer y R V Vohra. Programación lineal y subastas de Vickrey. Informe técnico, Escuela de Posgrado Anderson de Administración, U.C.L.A., 2001. [3] S Bikchandani y J M Ostroy. El modelo de asignación de paquetes. Revista de Teoría Económica, 2002. Próximamente. [4] K Chatterjee y W Samuelson. Negociación bajo información incompleta. Investigación de Operaciones, 31:835-851, 1983. [5] E H Clarke. Precios escalonados de bienes públicos. Elección Pública, 11:17-33, 1971. [6] S de Vries y R V Vohra. Subastas combinatorias: Un estudio. Revista Informs sobre Computación, 2002. Próximo. [7] M Eso, S Ghosh, J R Kalagnanam y L Ladanyi. Evaluación de ofertas en subastas de adquisiciones con curvas de oferta lineales por tramos. Informe técnico, Centro de Investigación IBM TJ Watson, 2001. En preparación. [8] J Feigenbaum y S Shenker. Diseño de Mecanismos Algorítmicos Distribuidos: Resultados Recientes y Futuras Direcciones. En Actas del 6º Taller Internacional sobre Algoritmos Discretos y Métodos para Computación y Comunicaciones Móviles, páginas 1-13, 2002. [9] M R Garey y D S Johnson. Computadoras e Intractabilidad: Una Guía de la Teoría de NP-Completitud. W.H. Freeman and Company, Nueva York, 1979. [10] G V Gens y E V Levner. Complejidad computacional de algoritmos de aproximación para problemas combinatorios. En Fundamentos Matemáticos de la Ciencia de la Computación, 292-300, 1979. [11] T Groves. Incentivos en equipos. Econometrica, 41:617-631, 1973. [12] J R Kalagnanam, A J Davenport y H S Lee. Aspectos computacionales de la compensación de subastas dobles continuas con restricciones de asignación y demanda indivisible. Revista de Comercio Electrónico, 1(3):221-238, 2001. [13] V Krishna. Teoría de subastas. Academic Press, 2002. [14] V Krishna y M Perry. Diseño de mecanismos eficientes. Informe técnico, Universidad Estatal de Pensilvania, 1998. Disponible en: http://econ.la.psu.edu/˜vkrishna/vcg18.ps. [15] D Lehmann, L I OCallaghan y Y Shoham. Revelación de la verdad en subastas combinatorias aproximadamente eficientes. JACM, 49(5):577-602, septiembre de 2002. [16] R B Myerson. Diseño óptimo de subasta. Matemáticas de la Investigación de Operaciones, 6:58-73, 1981. [17] R B Myerson y M A Satterthwaite. Mecanismos eficientes para el comercio bilateral. Revista de Teoría Económica, 28:265-281, 1983. [18] N Nisan y A Ronen. Mecanismos VCG computacionalmente factibles. En ACM-EC, páginas 242-252, 2000. [19] D C Parkes, J R Kalagnanam y M Eso. Lograr el equilibrio presupuestario con esquemas de pago basados en Vickrey en intercambios. En IJCAI, 2001. [20] M H Rothkopf, A Pekeˇc y R M Harstad. Subastas combinatorias manejables computacionalmente. Ciencia de la Gestión, 44(8):1131-1147, 1998. [21] J Schummer. Casi implementación de estrategia dominante. Informe técnico, Departamento de MEDS, Escuela de Posgrado de Administración Kellogg, 2001. [22] W Vickrey. Contrarreforma, subastas y ofertas selladas competitivas. Revista de Finanzas, 16:8-37, 1961. 175