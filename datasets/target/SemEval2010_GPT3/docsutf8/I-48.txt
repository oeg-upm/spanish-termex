Juegos de sistemas normativos Thomas ◦ Agotnes Depto. de Ingeniería Informática Colegio Universitario de Bergen PB. En 2030, N-5020 Bergen, Noruega tag@hib.no Wiebe van der Hoek Dept de Ciencias de la Computación Universidad de Liverpool Liverpool L69 7ZF Reino Unido wiebe@csc.liv.ac.uk Michael Wooldridge Dept de Ciencias de la Computación Universidad de Liverpool Liverpool L69 7ZF Reino Unido mjw@csc.liv.ac.uk RESUMEN Desarrollamos un modelo de sistemas normativos en el que se asume que los agentes tienen múltiples objetivos de prioridad creciente, e investigamos la complejidad computacional y las propiedades teóricas de juegos de este modelo. En el modelo subyacente de sistemas normativos, utilizamos estructuras de Kripke para representar las posibles transiciones de un sistema multiagente. Un sistema normativo es simplemente un subconjunto de la estructura de Kripke, que contiene los arcos que están prohibidos por el sistema normativo. Especificamos los objetivos de un agente como una jerarquía de fórmulas de Lógica del Árbol de Cómputo (CTL), una lógica ampliamente utilizada para representar las propiedades de las estructuras de Kripke: la intuición es que los objetivos más arriba en la jerarquía son preferidos por el agente sobre aquellos que aparecen más abajo en la jerarquía. Usando este esquema, definimos un modelo de utilidad ordinal, lo que a su vez nos permite interpretar nuestros sistemas normativos basados en Kripke como juegos, en los que los agentes deben determinar si cumplir con el sistema normativo o no. Luego caracterizamos la complejidad computacional de varios problemas de decisión asociados con estos juegos de sistemas normativos basados en Kripke; por ejemplo, demostramos que la complejidad de verificar si existe un sistema normativo que tiene la propiedad de ser una implementación de Nash es NP-completa. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial Distribuida]: Sistemas Multiagente; I.2.4 [Formalismos y Métodos de Representación del Conocimiento] Términos Generales Teoría 1. Los sistemas normativos, o leyes sociales, han demostrado ser un enfoque atractivo para la coordinación en sistemas multiagente [13, 14, 10, 15, 1]. Aunque las diversas aproximaciones a los sistemas normativos propuestas en la literatura difieren en detalles técnicos, todas comparten la misma intuición básica de que un sistema normativo es un conjunto de restricciones sobre el comportamiento de los agentes en el sistema; al imponer estas restricciones, se espera que surja algún objetivo deseable. La idea de utilizar leyes sociales para coordinar sistemas multiagente fue propuesta por Shoham y Tennenholtz [13, 14]; su enfoque fue ampliado por van der Hoek et al. para incluir la idea de especificar un objetivo global deseable para una ley social como una fórmula lógica, con la idea de que el sistema normativo sería considerado exitoso si, después de implementarlo (es decir, después de eliminar todas las acciones prohibidas), la fórmula del objetivo estuviera garantizada de ser satisfecha en el sistema [15]. Sin embargo, este modelo no tuvo en cuenta las preferencias de los agentes individuales, y por lo tanto no consideró el posible comportamiento estratégico de los agentes al decidir si cumplir o no con el sistema normativo. Este modelo de sistemas normativos fue ampliado aún más al atribuir a cada agente un único objetivo en [16]. Sin embargo, este modelo todavía era demasiado limitado para capturar los tipos de toma de decisiones que tienen lugar cuando un agente decide si cumplir o no con una ley social. En realidad, entran en juego consideraciones estratégicas: un agente tiene en cuenta no solo si el sistema normativo sería beneficioso para sí mismo, sino también si otros agentes elegirán participar racionalmente. En este artículo, desarrollamos un modelo de sistemas normativos en el que se asume que los agentes tienen múltiples objetivos, de prioridad creciente. Especificamos los objetivos de un agente como una jerarquía de fórmulas de Lógica del Árbol de Computación (CTL), una lógica ampliamente utilizada para representar las propiedades de las estructuras de Kripke [8]: la intuición es que los objetivos más arriba en la jerarquía son preferidos por el agente sobre aquellos que aparecen más abajo en la jerarquía. Usando este esquema, definimos un modelo de utilidad ordinal, lo que a su vez nos permite interpretar nuestros sistemas normativos basados en Kripke como juegos, en los que los agentes deben determinar si cumplir con el sistema normativo o no. Por lo tanto, proporcionamos un puente muy natural entre las estructuras lógicas y los idiomas y las técnicas y conceptos de la teoría de juegos, que han demostrado ser muy poderosos para analizar escenarios de estilo de contrato social como sistemas normativos [3, 4]. Luego caracterizamos la complejidad computacional de varios problemas de decisión asociados con estos juegos de sistemas normativos basados en Kripke; por ejemplo, demostramos que la complejidad de verificar si existe un sistema normativo que tiene la propiedad de ser una implementación de Nash es NP-completa. Utilizamos estructuras de Kripke como nuestro modelo semántico básico para sistemas multiagentes [8]. Una estructura de Kripke es esencialmente un grafo dirigido, con el conjunto de vértices S correspondiente a los posibles estados del sistema que se está modelando, y la relación R ⊆ S × S capturando las posibles transiciones del sistema; intuitivamente, estas transiciones son causadas por agentes en el sistema realizando acciones, aunque no incluimos dichas acciones en nuestro modelo semántico (ver, por ejemplo, [13, 2, 15] para modelos relacionados que incluyen acciones como ciudadanos de primera clase). Dejamos que S0 denote el conjunto de posibles estados iniciales del sistema. Nuestro modelo está destinado a corresponder al conocido modelo de concurrencia entrelazada de la literatura de sistemas reactivos: por lo tanto, un arco corresponde a la ejecución de una acción atómica por uno de los procesos en el sistema, a los que llamamos agentes. Es importante tener en cuenta que, a diferencia de modelos como [2, 15], aquí no estamos modelando una acción sincrónica. Esta suposición no es esencial para nuestro análisis, pero simplifica en gran medida la presentación. Sin embargo, encontramos conveniente incluir en nuestro modelo a los agentes que causan transiciones. Por lo tanto, asumimos un conjunto A de agentes, y etiquetamos cada transición en R con el agente que causa la transición a través de una función α: R → A. Finalmente, usamos un vocabulario Φ = {p, q, . . .} de variables booleanas para expresar las propiedades de los estados individuales S: utilizamos una función V : S → 2Φ para etiquetar cada estado con las variables booleanas verdaderas (o satisfechas) en ese estado. Reuniendo estos componentes, una estructura de Kripke etiquetada por agentes (sobre Φ) es una 6-tupla: K = S, S0, R, A, α, V, donde: • S es un conjunto finito y no vacío de estados, • S0 ⊆ S (S0 = ∅) es el conjunto de estados iniciales; • R ⊆ S × S es una relación binaria total en S, a la que nos referimos como la relación de transición; • A = {1, . . . , n} es un conjunto de agentes; • α: R → A etiqueta cada transición en R con un agente; y • V: S → 2Φ etiqueta cada estado con el conjunto de variables proposicionales verdaderas en ese estado. En aras de la brevedad, de aquí en adelante nos referiremos a un agente etiquetado como estructura de Kripke simplemente como una estructura de Kripke. Un camino sobre una relación de transición R es una secuencia infinita de estados π = s0, s1, . . . que debe cumplir la propiedad de que ∀u ∈ N: (su , su+1) ∈ R. Si u ∈ N, entonces denotamos por π[u] el componente indexado por u en π (así π[0] denota el primer elemento, π[1] el segundo, y así sucesivamente). Un camino π tal que π[0] = s es un camino s. Dejemos que ΠR(s) denote el conjunto de s-caminos sobre R; dado que usualmente será claro en el contexto, a menudo omitimos la referencia a R y simplemente escribimos Π(s). A veces nos referiremos y pensaremos en un s-camino como una posible computación, o evolución del sistema, desde s. EJEMPLO 1. Nuestro ejemplo en ejecución es de un sistema con un recurso no compartible único, el cual es deseado por dos agentes. Considera la estructura de Kripke representada en la Figura 1. Tenemos dos estados, s y t, y dos variables booleanas correspondientes p1 y p2, que son 1. En la literatura de lógica temporal de tiempo de ramificación, se dice que una relación R ⊆ S × S es total si ∀s ∃s : (s, s ) ∈ R. Nótese que a veces se utiliza el término relación total para referirse a relaciones R ⊆ S × S tales que para cada par de elementos s, s ∈ S tenemos o bien (s, s ) ∈ R o bien (s , s) ∈ R; no estamos utilizando el término de esta manera aquí. También vale la pena señalar que para algunos dominios, puede ser más apropiado aplicar otras restricciones en lugar de simplemente la totalidad. Por ejemplo, uno podría considerar el requisito de totalidad del agente, que en cada estado, cada agente tiene al menos una transición posible disponible: ∀s∀i ∈ A∃s : (s, s ) ∈ R y α(s, s ) = i. Pi se puede interpretar como que el agente i tiene actualmente control sobre el recurso. Cada agente tiene dos posibles acciones, cuando posee el recurso: o bien regalarlo o conservarlo. Obviamente hay infinitamente muchos caminos s y caminos t diferentes. Digamos que nuestro conjunto de estados iniciales S0 es igual a {s, t}, es decir, no hacemos ninguna suposición sobre quién tiene inicialmente el control sobre el recurso. 2.1 CTL Ahora definimos la Lógica de Árbol de Computación (CTL), una lógica temporal de tiempo de ramificación destinada a representar las propiedades de las estructuras de Kripke [8]. Ten en cuenta que dado que CTL es bien conocido y ampliamente documentado en la literatura, nuestra presentación, aunque completa, será algo concisa. Utilizaremos CTL para expresar los objetivos de los agentes. La sintaxis de CTL está definida por la siguiente gramática: ϕ ::= | p | ¬ϕ | ϕ ∨ ϕ | E fϕ | E(ϕ U ϕ) | A fϕ | A(ϕ U ϕ) donde p ∈ Φ. Denotamos el conjunto de fórmulas CTL sobre Φ por LΦ; dado que Φ se entiende, generalmente omitimos hacer referencia a ella. La semántica de CTL se da con respecto a la relación de satisfacción |=, que se cumple entre pares de la forma K, s (donde K es una estructura de Kripke y s es un estado en K) y fórmulas del lenguaje. La relación de satisfacción se define de la siguiente manera: K, s |= ; K, s |= p si y solo si p ∈ V (s) (donde p ∈ Φ); K, s |= ¬ϕ si y solo si no K, s |= ϕ; K, s |= ϕ ∨ ψ si y solo si K, s |= ϕ o K, s |= ψ; K, s |= A fϕ si y solo si ∀π ∈ Π(s) : K, π[1] |= ϕ; K, s |= E fϕ si y solo si ∃π ∈ Π(s) : K, π[1] |= ϕ; K, s |= A(ϕ U ψ) si y solo si ∀π ∈ Π(s), ∃u ∈ N, tal que. K, π[u] |= ψ y ∀v, (0 ≤ v < u) : K, π[v] |= ϕ K, s |= E(ϕ U ψ) si y solo si ∃π ∈ Π(s), ∃u ∈ N, tal que K, π[u] |= ψ y ∀v, (0 ≤ v < u) : K, π[v] |= ϕ Se asume que los conectivos lógicos clásicos restantes (∧, →, ↔) están definidos como abreviaturas en términos de ¬, ∨, de manera convencional. Los operadores temporales CTL restantes están definidos: A♦ϕ ≡ A( U ϕ) E♦ϕ ≡ E( U ϕ) A ϕ ≡ ¬E♦¬ϕ E ϕ ≡ ¬A♦¬ϕ Decimos que ϕ es satisfacible si K, s |= ϕ para alguna estructura de Kripke K y estado s en K; ϕ es válida si K, s |= ϕ para todas las estructuras de Kripke K y estados s en K. El problema de verificar si K, s |= ϕ para un K, s, ϕ dado (verificación de modelos) se puede hacer en tiempo polinómico determinista, mientras que verificar si un ϕ dado es satisfacible o si ϕ es válido es EXPTIME-completo [8]. Escribimos K |= ϕ si K, s0 |= ϕ para todo s0 ∈ S0, y |= ϕ si K |= ϕ para todo K. 882 La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 3. SISTEMAS NORMATIVOS Para nuestros propósitos, un sistema normativo es simplemente un conjunto de restricciones sobre el comportamiento de agentes en un sistema [1]. Más precisamente, un sistema normativo define, para cada posible transición del sistema, si esa transición se considera legal o no. Los diferentes sistemas normativos pueden diferir en si una transición es legal o no. Formalmente, un sistema normativo η (con respecto a una estructura de Kripke K = S, S0 , R, A, α, V) es simplemente un subconjunto de R, tal que R \ η es una relación total. El requisito de que R\η sea total es una restricción de razonabilidad: evita sistemas normativos que conducen a estados sin sucesor. Sea N (R) = {η : (η ⊆ R) & (R \ η es total)} el conjunto de sistemas normativos sobre R. La interpretación prevista de un sistema normativo η es que (s, s ) ∈ η significa que la transición (s, s ) está prohibida en el contexto de η; por lo tanto, R \ η denota las transiciones legales de η. Dado que se asume que η es razonable, se garantiza que existe una transición legal hacia afuera para cada estado. Denotamos el sistema normativo vacío como η∅, por lo tanto, η∅ = ∅. Se debe tener en cuenta que el sistema normativo vacío η∅ es razonable con respecto a cualquier relación de transición R. El efecto de implementar un sistema normativo en una estructura de Kripke es eliminar de ella todas las transiciones que están prohibidas según este sistema normativo (ver [15, 1]). Si K es una estructura de Kripke, y η es un sistema normativo sobre K, entonces K † η denota la estructura de Kripke obtenida a partir de K al eliminar las transiciones prohibidas en η. Formalmente, si K = S, S0, R, A, α, V, y η ∈ N(R), entonces dejemos que K†η = K sea la estructura de Kripke K = S, S0, R, A, α, V donde: • S = S, S0 = S0, A = A, y V = V; • R = R \ η; y • α es la restricción de α a R: α(s, s') = j α(s, s') si (s, s') ∈ R, indefinido en otro caso. Observa que para todo K, tenemos K † η∅ = K. EJEMPLO 1. (continuación) Al pensar en términos de equidad, parece natural considerar sistemas normativos η que contengan (s, s) o (t, t). Un sistema normativo con (s, t) no sería justo, en el sentido de que A♦A ¬p1 ∨ A♦A ¬p2 se cumple: en todos los caminos, a partir de algún momento, un agente tendrá control para siempre. Para futuras referencias, fijemos η1 = {(s, s)}, η2 = {(t, t)}, y η3 = {(s, s), (t, t)}. Más tarde, abordaremos la cuestión de si los agentes deberían elegir racionalmente cumplir con un sistema normativo particular. En este contexto, es útil definir operadores en sistemas normativos que correspondan a grupos de agentes que se desvían del sistema normativo. Formalmente, sea K = S, S0, R, A, α, V una estructura de Kripke, sea C ⊆ A un conjunto de agentes sobre K, y sea η un sistema normativo sobre K. Entonces: • η C denota el sistema normativo que es igual a η excepto que solo contiene los arcos de η que corresponden a las acciones de los agentes en C. Llamamos a η C la restricción de η a C, y se define como: η C = {(s, s ) : (s, s ) ∈ η & α(s, s ) ∈ C}. Así, K † (η C) es la estructura de Kripke que resulta si solo los agentes en C eligen cumplir con el sistema normativo. • η C denota el sistema normativo que es igual a η excepto que solo contiene los arcos de η que no corresponden a acciones de agentes en C. Llamamos a η C la exclusión de C de η, y se define como: η C = {(s, s ) : (s, s ) ∈ η & α(s, s ) ∈ C}. Por lo tanto, K † (η C) es la estructura de Kripke que resulta si solo los agentes en C eligen no cumplir con el sistema normativo (es decir, los únicos que cumplen son aquellos en A \ C). Ten en cuenta que tenemos η C = η (A\C) y η C = η (A\C). EJEMPLO 1. (Continuación) Tenemos η1 {1} = η1 = {(s, s)}, mientras que η1 {1} = η∅ = η1 {2}. De manera similar, tenemos η3 {1} = {(s, s)} y η3 {1} = {(t, t)}. 4. OBJETIVOS Y UTILIDADES A continuación, queremos ser capaces de capturar los objetivos que tienen los agentes, ya que estos impulsarán las consideraciones estratégicas de un agente, en particular, como veremos, consideraciones sobre si cumplir o no con un sistema normativo. Modelaremos los objetivos de un agente como una lista priorizada de fórmulas CTL, que representan propiedades cada vez más deseadas que el agente desea mantener. La interpretación prevista de una jerarquía de objetivos γi para el agente i ∈ A es que cuanto más arriba esté un objetivo en la jerarquía, más deseado es por i. Ten en cuenta que asumimos que si un agente puede lograr un objetivo en un nivel particular de su jerarquía de objetivos, entonces no le preocupa los objetivos más bajos en la jerarquía. Formalmente, una jerarquía de objetivos, γ, (sobre una estructura de Kripke K) es una secuencia finita y no vacía de fórmulas CTL γ = (ϕ0, ϕ1, . . . , ϕk ) en la que, por convención, ϕ0 = . Utilizamos una notación de indexación de números naturales para extraer los elementos de una jerarquía de objetivos, por lo que si γ = (ϕ0, ϕ1, . . . , ϕk ) entonces γ[0] = ϕ0, γ[1] = ϕ1, y así sucesivamente. Denotamos el índice más grande de cualquier elemento en γ por |γ|. Una estructura Kripke particular K se dice que satisface un objetivo en el índice x en la jerarquía de objetivos γ si K |= γ[x], es decir, si γ[x] se cumple en todos los estados iniciales S0 de K. Una propiedad potencialmente obvia de las jerarquías de objetivos es la monotonicidad: donde los objetivos en niveles más altos en la jerarquía implican lógicamente a los de niveles más bajos en la jerarquía. Formalmente, una jerarquía de objetivos γ es monótona si para todo x ∈ {1, . . . , |γ|} ⊆ N, tenemos |= γ[x] → γ[x − 1]. El tipo más simple de jerarquía de metas monótonas es aquella en la que γ[x + 1] = γ[x] ∧ ψx+1 para algún ψx+1, por lo que en cada nivel sucesivo de la jerarquía, agregamos nuevas restricciones a la meta del nivel anterior. Aunque esta es una propiedad natural de muchas jerarquías de objetivos, no es una propiedad que exigimos de todas las jerarquías de objetivos. EJEMPLO 1. (continuación) Supongamos que los agentes tienen objetivos similares, pero opuestos: cada agente i quiere mantener la fuente para sí mismo tan a menudo y durante tanto tiempo como sea posible. Define la jerarquía de objetivos de cada agente como: γi = ( ϕi 0 = , ϕi 1 = E♦pi , ϕi 2 = E E♦pi , ϕi 3 = E♦E pi , ϕi 4 = A E♦pi , ϕi 5 = E♦A pi ϕi 6 = A A♦pi , ϕi 7 = A (A♦pi ∧ E pi ), ϕi 8 = A pi ) El objetivo más deseado del agente i es, en cada cálculo, siempre tener el recurso pi (esto se expresa en ϕi 8). Gracias a nuestra restricción de razonabilidad, este objetivo implica ϕi 7, que dice que, sin importar cómo evolucionen los caminos de computación, siempre será que todos The Sixth Intl. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 883 continuaciones llegarán a un punto en el que pi, y, además, hay una continuación en la que pi siempre se cumple. La meta ϕi 6 es una restricción de equidad implícita en ella. Ten en cuenta que A♦pi dice que cada computación eventualmente llega a un estado pi. Esto puede significar que después de que haya ocurrido pi, nunca volverá a ocurrir. ϕi evita esto: dice que, sin importar dónde te encuentres, debería haber un estado pi futuro. El objetivo ϕi 5 es similar al objetivo fuerte ϕi 8, pero acepta que esto solo se logra en algunas computaciones, eventualmente. ϕi 4 requiere que en cada camino, siempre haya una continuación que eventualmente dé pi. La meta ϕi 3 dice que pi debería ser verdadero en alguna rama, a partir de algún momento. Implica ϕi 2, lo cual expresa que hay un cálculo tal que en todo momento durante él, es posible elegir una continuación que eventualmente satisfaga pi. Esto implica ϕi 1, lo cual indica que pi al menos no debería ser imposible. Si incluso eliminamos esa demanda, tenemos el objetivo trivial ϕi 0. Observamos que puede parecer más natural expresar una restricción de equidad ϕi 6 como A ♦pi. Sin embargo, esta no es una fórmula CTL adecuada. De hecho, es una fórmula en CTL ∗ [9], y en esta lógica, las dos expresiones serían equivalentes. Sin embargo, nuestros resultados de complejidad básica en las siguientes secciones no se aplicarían al lenguaje más rico CTL ∗2, y el precio a pagar por esto es que debemos formular nuestros objetivos deseados de una manera algo más engorrosa de lo que idealmente nos gustaría. Por supuesto, nuestro marco básico no exige que los objetivos se expresen en CTL; igualmente podrían expresarse en CTL ∗ o incluso en ATL [2] (como en [15]). Comentaremos sobre las implicaciones de las representaciones alternativas de objetivos al concluir la siguiente sección. Un sistema multiagente reúne una estructura de Kripke (que representa las propiedades básicas de un sistema en consideración: su espacio de estados y las posibles transiciones de estado que pueden ocurrir en él), junto con una jerarquía de objetivos, una para cada agente, que representa las aspiraciones de los agentes en el sistema. Formalmente, un sistema multiagente, M, es una n-tupla (n + 1): M = K, γ1, . . . , γn donde K es una estructura de Kripke, y para cada agente i en K, γi es una jerarquía de objetivos sobre K. 4.1 La utilidad de los sistemas normativos Ahora podemos definir la utilidad de una estructura de Kripke para un agente. La idea es que la utilidad de una estructura de Kripke es el índice más alto de cualquier objetivo que esté garantizado para ese agente en la estructura de Kripke. Hacemos esto preciso en la función ui (·): ui (K) = max{j : 0 ≤ j ≤ |γi | & K |= γi [j ]} Nótese que utilizando estas definiciones de metas y utilidad, nunca tiene sentido tener una meta ϕ en el índice n si hay una meta lógicamente más débil ψ en el índice n + k en la jerarquía: por definición de utilidad, nunca podría ser n para ninguna estructura K. EJEMPLO 1. (continuación) Sea M = K, γ1, γ2 el sistema multiagente de la Figura 1, con γ1 y γ2 como se definió anteriormente en este ejemplo. Recuerde que hemos definido S0 como {s, t}. Entonces, u1(K) = u2(K) = 4: el objetivo ϕ4 es verdadero en S0, pero ϕ5 no lo es. Para ver que ϕ2 4 = A E♦p2 es verdadero en s, por ejemplo: observe que en cada camino siempre es el caso que hay una transición a t, en la cual p2 es verdadero. Observa que dado que para cualquier jerarquía de objetivos γi tenemos γ[0] = , entonces para todas las estructuras de Kripke, ui (K) está bien definido, con ui (K) ≥ 2. El modelado de verificación de modelos CTL ∗ es PSPACE-completo, y por lo tanto mucho peor (bajo suposiciones estándar de complejidad teórica) que la verificación de modelos CTL [8]. η δ1(K, η) δ2(K, η) η∅ 0 0 η1 0 3 η2 3 0 η3 2 2 C D C (2, 2) (0, 3) D (3, 0) (0, 0) Figura 2: Beneficios de implementar un sistema normativo η (izquierda) y pagos para el juego ΣM. 0. Ten en cuenta que esta es una medida de utilidad ordinal: nos indica, para cualquier agente dado, la utilidad relativa de diferentes estructuras de Kripke, pero los valores de utilidad no están en una escala estándar a nivel del sistema. El hecho de que ui (K1) > ui (K2) ciertamente significa que i prefiere estrictamente K1 sobre K2, pero el hecho de que ui (K) > uj (K) no significa que i valore más a K que j. Por lo tanto, no tiene sentido comparar los valores de utilidad entre agentes, y así, por ejemplo, algunas medidas de utilidad a nivel del sistema (notablemente aquellas que agregan las utilidades individuales, como el bienestar social) no tienen sentido cuando se aplican en este contexto. Sin embargo, como veremos en breve, otras medidas, como la eficiencia de Pareto, pueden aplicarse de manera útil. Existen otras representaciones para los objetivos, que nos permitirían definir utilidades cardinales. Lo más sencillo sería especificar los objetivos γ para un agente como una relación finita, no vacía y biunívoca: γ ⊆ L×R. Suponemos que los valores de x en pares (ϕ, x) ∈ γ están especificados de manera que x para el agente i signifique lo mismo que x para el agente j, y así tenemos utilidad cardinal. Luego definimos la utilidad para i de una estructura de Kripke K como ui(K) = max{x : (ϕ, x) ∈ γi & K |= ϕ}. Los resultados de este artículo, de hecho, se mantienen independientemente de cuál de estas representaciones elijamos en realidad; optamos por el enfoque de jerarquía de objetivos en aras de la simplicidad. Nuestro próximo paso es mostrar cómo, de manera muy similar, podemos elevar la función de utilidad de las estructuras de Kripke a los sistemas normativos. Supongamos que se nos da un sistema multiagente M = K, γ1, . . . , γn y un sistema normativo asociado η sobre K. Para el agente i, sea δi (K, K ) la diferencia en su utilidad al moverse de K a K: δi (K, K ) = ui (K )− ui (K). Entonces, la utilidad de η para el agente i con respecto a K es δi (K, K † η). A veces abusaremos de la notación y simplemente escribiremos δi (K, η) para esto, y nos referiremos a ello como el beneficio para el agente i de implementar η en K. Tenga en cuenta que este beneficio puede ser negativo. En resumen, la utilidad de un sistema normativo para un agente es la diferencia entre la utilidad de la estructura de Kripke en la que se implementó el sistema normativo y la estructura de Kripke original. Si este valor es mayor que 0, entonces al agente le iría mejor si se impusiera el sistema normativo, mientras que si es menor que 0, entonces al agente le iría peor si se impusiera η que en el sistema original. Decimos que η es individualmente racional para i con respecto a K si δi (K, η) > 0, y es individualmente racional en sentido estricto si η es individualmente racional para cada agente. Un sistema social ahora es un par Σ = M, η donde M es un sistema multiagente, y η es un sistema normativo sobre M. EJEMPLO 1. La tabla a la izquierda en la Figura 2 muestra las utilidades δi (K, η) de implementar η en la estructura de Kripke de nuestro ejemplo en curso, para los sistemas normativos η = η∅, η1, η2 y η3, introducidos anteriormente. Recuerde que u1(K) = u2(K) = 4. 4.2 Objetivos Universales y Existenciales 884 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Teniendo en cuenta que una norma η restringe las posibles transiciones del modelo en consideración, hacemos la siguiente observación, tomando prestado de [15]. Algunas clases de objetivos son monótonas o antimonótonas con respecto a la adición de restricciones adicionales a un sistema. Por lo tanto, definamos dos fragmentos del lenguaje de CTL: el lenguaje universal Lu con elemento típico μ, y el fragmento existencial Le con elemento típico ε. μ ::= | p | ¬p | μ ∨ μ | A fμ | A μ | A(μ U μ) ε ::= | p | ¬p | ε ∨ ε | E fε | E♦ε | E(ε U ε) Digamos, para dos estructuras de Kripke K1 = S, S0 , R1, A, α, V y K2 = S, S0 , R2, A, α, V que K1 es un subsistema de K2 y K2 es un super-sistema de K1, escrito K1 K2 si R1 ⊆ R2. Ten en cuenta que típicamente K † η K. Luego tenemos (cf. [15]). TEOREMA 1. Supongamos que K1 K2 y s ∈ S. Entonces ∀ε ∈ Le : K1, s |= ε ⇒ K2, s |= ε ∀μ ∈ Lu : K2, s |= μ ⇒ K1, s |= μ Esto tiene el siguiente efecto al imponer una nueva norma: COROLARIO 1. Sea K una estructura y η un sistema normativo. Que γi denote una jerarquía de objetivos para el agente i. 1. Se supone que el agente tiene utilidad ui (K) igual a n, y γi [n] ∈ Lu, es decir, γi [n] es una fórmula universal. Entonces, para cualquier sistema normativo η, δi (K, η) ≥ 0.2. Se supone que el agente tiene una utilidad ui (K † η) igual a n, y γi [n] es una fórmula existencial ε. Entonces, δi (K † η, K) ≥ 0. El primer ítem del corolario 1 dice que un agente cuyo objetivo máximo actual en un sistema es una fórmula universal, nunca debe temer la imposición de una nueva norma η. La razón es que su objetivo actual al menos seguirá siendo cierto (de hecho, un objetivo más alto en la jerarquía puede volverse cierto). Se deduce de esto que un agente con solo objetivos universales solo puede beneficiarse de la imposición de sistemas normativos η. Lo contrario es cierto para los objetivos existenciales, según el segundo ítem del corolario: nunca puede ser malo para un agente deshacer una norma η. Por lo tanto, un agente con solo metas existenciales bien podría temer cualquier norma η. Sin embargo, estas observaciones asumen implícitamente que todos los agentes en el sistema cumplirán con la norma. Si de hecho lo harán, por supuesto, es una decisión estratégica: en parte depende de lo que el agente piense que harán los otros agentes. Esto nos motiva a considerar juegos de sistemas normativos. 5. JUEGOS DE SISTEMAS NORMATIVOS Ahora tenemos una forma fundamentada de hablar sobre la utilidad de los sistemas normativos para los agentes, por lo que podemos comenzar a aplicar el aparato técnico de la teoría de juegos para analizarlos. Supongamos que tenemos un sistema multiagente M = K, γ1, . . . , γn y un sistema normativo η sobre K. Se propone a los agentes en M que η debería ser impuesta en K, (típicamente para lograr algún objetivo de coordinación). Nuestro agente, digamos agente i, se enfrenta entonces a una elección: ¿debería cumplir con las restricciones del sistema normativo o no? Ten en cuenta que este razonamiento se produce antes de que el agente esté en el sistema, es una consideración en el momento del diseño. Podemos entender el razonamiento aquí como un juego, de la siguiente manera. Un juego en forma normal estratégica (cf. [11, p.11]) es una estructura: G = AG, S1, . . . , Sn , U1, . . . , Un donde: • AG = {1, . . . , n} es un conjunto de agentes, los jugadores del juego; • Si es el conjunto de estrategias para cada agente i ∈ AG (una estrategia para un agente i no es más que una elección entre acciones alternativas); y • Ui : (S1 × · · · × Sn ) → R es la función de utilidad para el agente i ∈ AG, que asigna una utilidad a cada combinación de elecciones de estrategias para los agentes. Ahora, supongamos que se nos da un sistema social Σ = M, η donde M = K, γ1, . . . , γn. Entonces podemos asociar un juego, el juego del sistema normativo - GΣ, con Σ, de la siguiente manera. Los agentes AG en GΣ son como en Σ. Cada agente i tiene solo dos estrategias disponibles: • C - cumplir (cooperar) con el sistema normativo; y • D - no cumplir (defectar) del sistema normativo. Si S es una tupla de estrategias, una para cada agente, y x ∈ {C, D}, entonces denotamos por AGx S al subconjunto de agentes que juegan la estrategia x en S. Por lo tanto, para un sistema social Σ = M , η , el sistema normativo η AGC S solo implementa las restricciones para aquellos agentes que eligen cooperar en GΣ. Ten en cuenta que esto es lo mismo que η AGD S: el sistema normativo que excluye todas las restricciones de agentes que juegan D en GΣ. Luego definimos las funciones de utilidad Ui para cada i ∈ AG como: Ui (S) = δi (K, η AGC S ). Por ejemplo, si SD es una colección de estrategias en la que cada agente traiciona (es decir, no cumple con la norma), entonces Ui (SD) = δi (K, (η AGD SD)) = ui (K † η∅) - ui (K) = 0. De la misma manera, si SC es una colección de estrategias en la que cada agente coopera (es decir, cumple con la norma), entonces Ui(SC) = δi(K, (η AGD SC)) = ui(K † (η ∅)) = ui(K † η). Ahora podemos comenzar a investigar algunas propiedades de los juegos de sistemas normativos. Para nuestro sistema de ejemplo, hemos mostrado los diferentes valores de U para nuestro sistema de múltiples agentes con la norma η3, es decir, {(s, s), (t, t)} como la segunda tabla de la Figura 2. Por ejemplo, el par (0, 3) en la matriz bajo la entrada S = C, D se obtiene de la siguiente manera. U1( C, D ) = δ1(K, η3 AGC C,D ) = u1(K † η3 AGC C,D ) − u1(K). 

U1( C, D ) = δ1(K, η3 AGC C,D ) = u1(K † η3 AGC C,D ) − u1(K). El primer término de esto es la utilidad de 1 en el sistema K donde implementamos η3 para el agente cooperante, es decir, 1, solamente. Esto significa que las transiciones son R \ {(s, s)}. En este sistema, todavía ϕ1 4 = A E♦p1 es el objetivo más alto para el agente 1. Esta es la misma utilidad para 1 que en K, y por lo tanto, δ1(K, η3 AGC C,D ) = 0. El agente 2, por supuesto, se beneficia si el agente 1 cumple con η3 mientras que el 2 no lo hace. Su utilidad sería 3, ya que η3 AGC C,D es de hecho η1. 5.1 Sistemas Normativos Individualmente Racionales Un sistema normativo es individualmente racional si a cada agente le iría mejor si el sistema normativo fuera impuesto que de otra manera. Esta es una condición necesaria, aunque no suficiente, en una norma para esperar que todos la respeten. Cabe destacar que η3 de nuestro ejemplo es racional individualmente tanto para 1 como para 2, aunque esta no es una situación estable: dado que los demás juegan C, i está mejor jugando D. Podemos caracterizar fácilmente la racionalidad individual con respecto al juego correspondiente en forma estratégica, de la siguiente manera. Que Σ = M , η sea un sistema social. Entonces, lo siguiente es equivalente: El Sexto Congreso Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 885 f(xk) ... s0 s1 s2 s3 s4 s(2k−1) s2k t(x1) f(x1) t(x2) f(x2) t(xk) Figura 3: La estructura de Kripke producida en la reducción del Teorema 2; todas las transiciones están asociadas con el agente 1, el único estado inicial es s0. 1. η es individualmente racional en M; 2. ∀i ∈ AG, Ui (SC) > Ui (SD) en el juego GΣ. El problema de decisión asociado con sistemas normativos individualmente racionales es el siguiente: SISTEMA NORMATIVO INDIVIDUALMENTE RACIONAL (SNIR): Dado: Sistema multiagente M. ¿Existe un sistema normativo individualmente racional para M? TEOREMA 2. IRNS es NP-completo, incluso en sistemas de un solo agente. PRUEBA. Para la membresía de NP, adivina un sistema normativo η y verifica que sea racional individualmente. Dado que η ⊆ R, podremos adivinarlo en tiempo polinómico no determinista. Para verificar que es racional individualmente, comprobamos que para todo i, tenemos ui (K † η) > ui (K); calcular K † η es simplemente una resta de conjuntos, por lo que se puede hacer en tiempo polinómico, mientras que determinar el valor de ui (K) para cualquier K se puede hacer con un número polinómico de llamadas de verificación de modelos, cada una de las cuales requiere solo tiempo polinómico en el K y γ. Por lo tanto, verificar que ui (K † η) > ui (K) solo requiere tiempo polinómico. Para la NP-dificultad, reducimos SAT [12, p.77]. Dada una instancia SAT ϕ sobre variables booleanas x1, . . . , xk, producimos una instancia de IRNS de la siguiente manera. Primero, definimos un agente único A = {1}. Para cada variable booleana xi en la instancia SAT, creamos dos variables booleanas t(xi) y f(xi) en la instancia IRNS. Luego creamos una estructura de Kripke Kϕ con 2k + 1 estados, como se muestra en la Figura 3: los arcos en este grafo corresponden a transiciones en Kϕ. Sea ϕ∗ el resultado de sustituir sistemáticamente, en ϕ, la expresión CTL (E ft(xi)) por cada variable booleana xi. A continuación, considera las siguientes fórmulas: k^ i=1 E f(t(xi ) ∨ f (xi )) (1) k^ i=1 ¬((E ft(xi )) ∧ (E ff (xi ))) (2) Luego definimos la jerarquía de objetivos para todos los agentes 1 de la siguiente manera: γ1[0] = γ1[1] = (1) ∧ (2) ∧ ϕ∗ Sostenemos que existe un sistema normativo individualmente racional para la instancia construida si y solo si ϕ es satisfactorio. Primero, observe que cualquier sistema normativo individualmente racional debe obligar a que γ1[1] sea verdadero, ya que en el sistema original, no tenemos γ1[1]. Para la dirección ⇒, si existe un sistema normativo individualmente racional η, entonces construimos una asignación satisfactoria para ϕ considerando los arcos que están prohibidos por η: la fórmula (1) asegura que debemos prohibir un arco hacia un estado t(xi) o f(xi) para todas las variables xi, pero (2) asegura que no podemos prohibir arcos hacia ambos. Entonces, si prohibimos un arco a un estado t(xi) entonces en la valuación correspondiente para ϕ hacemos que xi sea falso, mientras que si prohibimos un arco a un estado f(xi) entonces hacemos que xi sea verdadero. El hecho de que ϕ∗ sea parte del objetivo asegura que el sistema normativo es, de hecho, una valoración para ϕ. Para ⇐, tenga en cuenta que para cualquier valuación satisfactoria para ϕ podemos construir un sistema normativo individualmente racional η, de la siguiente manera: si la valuación hace que xi sea verdadero, prohibimos el arco hacia el estado f(xi), mientras que si la valuación hace que xi sea falso, prohibimos el arco hacia el estado t(xi). El sistema normativo resultante garantiza γ1[1], y por lo tanto es racional a nivel individual. Observa que la estructura de Kripke construida en la reducción contiene solo un agente, por lo que el Teorema está demostrado. 5.2 Sistemas Normativos Eficientes de Pareto La eficiencia de Pareto es una medida básica de qué tan buena es un resultado particular para un grupo de agentes [11, p.7]. De manera intuitiva, un resultado es eficiente en Pareto si no hay otro resultado que mejore la situación de todos los agentes. En nuestro marco de trabajo, supongamos que se nos da un sistema social Σ = M , η, y se nos pregunta si η es eficiente de Pareto. Esto equivale a preguntar si existe algún otro sistema normativo η tal que cada agente estaría mejor bajo η que con η. Si η hace que cada agente esté mejor que η, entonces decimos que η domina a η según Pareto. El problema de decisión es el siguiente: SISTEMA NORMATIVO EFICIENTE DE PARETO (PENS): Dado: Sistema multiagente M y sistema normativo η sobre M. ¿Es η eficiente en Pareto para M? TEOREMA 3. PENS es co-NP-completo, incluso para sistemas de un solo agente. PRUEBA. Sean M y η como en el Teorema. Mostramos que el problema complementario de PENS, al que nos referimos como DOMINADO POR PARETO, es NP-completo. En este problema, se nos dan M y η, y se nos pregunta si η está dominado por Pareto, es decir, si existe algún η sobre M tal que η mejore la situación de todos los agentes en comparación con η. Para la membresía de NP, simplemente adivina un sistema normativo η y verifica que para todo i ∈ A, tenemos ui (K † η) > ui (K † η) - verificar requiere un número polinómico de problemas de verificación de modelos, cada uno de los cuales toma tiempo polinómico. Dado que η ⊆ R, el sistema normativo puede ser adivinado en tiempo polinómico no determinista. Para la NP-dificultad, reducimos IRNS, el cual sabemos que es NP-completo según el Teorema 2. Dada una instancia M de IRNS, permitimos que M en la instancia de DOMINIO DE PARETO sea como en la instancia de IRNS, y definimos el sistema normativo para DOMINIO DE PARETO como η∅, el sistema normativo vacío. Ahora, es evidente que existe un sistema normativo η que domina a η∅ de Pareto en M si y solo si existe un sistema normativo individualmente racional en M. Dado que el problema del complemento es NP-completo, se deduce que PENS es co-NP-completo. 886 The Sixth Intl. ¿Qué tal las normas eficientes de Pareto para nuestro ejemplo de juguete? Resolver esta pregunta implica encontrar los sistemas normativos dominantes entre η0 = η∅, η1, η2, η3 definidos anteriormente, y η4 = {(s, t)}, η5 = {(t, s)}, η6 = {(s, s), (t, s)}, η7 = {(t, t), (s, t)} y η8 = {(s, t), (t, s)}. Los servicios públicos para cada sistema se encuentran en la Tabla 1. De esto se infiere que las normas eficientes de Pareto son η1, η2, η3, η6 y η7. Ten en cuenta que η8 prohíbe que el recurso se pase de un agente a otro, lo cual no es bueno para ningún agente (dado que hemos elegido S0 = {s, t}, ningún agente puede estar seguro de recibir el recurso, es decir, el objetivo ϕi 1 no es verdadero en K † η8). 5.3 Sistemas Normativos de Implementación Nash El concepto de solución más famoso en la teoría de juegos es, por supuesto, el equilibrio de Nash [11, p.14]. Una colección de estrategias, una para cada agente, se dice que forma un equilibrio de Nash si ningún agente puede beneficiarse haciendo algo distinto a jugar su estrategia, bajo la suposición de que los otros agentes juegan las suyas. Los equilibrios de Nash son importantes porque proporcionan soluciones estables al problema de qué estrategia debe jugar un agente. Cabe destacar que en nuestro ejemplo de juguete, aunque η3 es racional individualmente para cada agente, no es un equilibrio de Nash, ya que dada esta norma, sería beneficioso para el agente 1 desviarse (y lo mismo para el 2). En nuestro marco, decimos que un sistema social Σ = M , η (donde η = η∅) es una implementación de Nash si SC (es decir, todos cumpliendo con el sistema normativo) forma un equilibrio de Nash en el juego GΣ. La intuición es que si Σ es una implementación de Nash, entonces cumplir con el sistema normativo es una solución razonable para todos los involucrados: no puede haber beneficio en desviarse de él, de hecho, hay un incentivo positivo para que todos cumplan. Si Σ no es una implementación de Nash, entonces es poco probable que el sistema normativo tenga éxito, ya que el cumplimiento no es racional para algunos agentes. (Nuestra elección de terminología está deliberadamente seleccionada para reflejar la forma en que se utiliza el término implementación de Nash en la teoría de implementación, o diseño de mecanismos [11, p.185], donde un diseñador de juegos busca lograr ciertos resultados diseñando las reglas del juego de manera que estos resultados sean equilibrios). IMPLEMENTACIÓN DE NASH (NI): Dado: Sistema multiagente M. ¿Existe un sistema normativo no vacío η sobre M tal que M, η forme una implementación de Nash? Verificar que un sistema social particular forme una implementación de Nash se puede hacer en tiempo polinómico: consiste en comprobar: ∀i ∈ A : ui (K † η) ≥ ui (K † (η {i})). Esto claramente requiere solo un número polinómico de llamadas de verificación de modelos, cada una de las cuales requiere solo tiempo polinómico. TEOREMA 4. El problema de la interacción no cooperativa es NP-completo, incluso para sistemas de dos agentes. PRUEBA. Para la membresía de NP, simplemente adivine un sistema normativo η y verifique que forme una implementación de Nash; dado que η ⊆ R, adivinar se puede hacer en tiempo polinómico no determinista, y como s(2k+1) 1 1 1 1 1 1 11 1 1 11 2 2 2 2 2 2 2 2 2 2 2 t(x1) f(x1) t(x2) f(x2) t(xk) f(xk) 2 2 t(x1) f(x1) t(x2) f(x2) t(xk) f(xk) ...... s0 Figura 4: Reducción para el Teorema 4. como argumentamos anteriormente, verificar que forme una implementación de Nash se puede hacer en tiempo polinómico. Para la NP-dificultad, reducimos SAT. Supongamos que se nos da una instancia SAT ϕ sobre variables booleanas x1, . . . , xk. Luego construimos una instancia de NI de la siguiente manera. Creamos dos agentes, A = {1, 2}. Para cada variable booleana xi creamos dos variables booleanas, t(xi) y f(xi), y luego definimos una estructura de Kripke como se muestra en la Figura 4, con s0 siendo el único estado inicial; la etiquetación de los arcos en la Figura 4 da la función α, y cada estado está etiquetado con las proposiciones que son verdaderas en ese estado. Para cada variable booleana xi, definimos las fórmulas xi y x⊥ i de la siguiente manera: xi = E f(t(xi) ∧ E f((E f(t(xi))) ∧ A f(¬f(xi))) x⊥ i = E f(f(xi) ∧ E f((E f(f(xi))) ∧ A f(¬t(xi))) Sea ϕ∗ la fórmula obtenida de ϕ al sustituir sistemáticamente xi por xi. Cada agente tiene tres objetivos: γi [0] = para ambos i ∈ {1, 2}, mientras que γ1[1] = k^ i=1 ((E f(t(xi ))) ∧ (E f(f (xi )))) γ2[1] = E fE f k^ i=1 ((E f(t(xi ))) ∧ (E f(f (xi )))) y finalmente, para ambos agentes, γi [2] siendo la conjunción de las siguientes fórmulas: The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 887 k^ i=1 (xi ∨ x⊥ i ) (3) k^ i=1 ¬(xi ∧ x⊥ i ) (4) k^ i=1 ¬(E f(t(xi )) ∧ E f(f (xi ))) (5) ϕ∗ (6) Denominamos al sistema multiagente construido de esta manera como Mϕ. Ahora, demostramos que la instancia SAT ϕ es satisfacible si y solo si Mϕ tiene un sistema normativo de implementación Nash: Para la dirección ⇒, supongamos que ϕ es satisfacible y sea X una valuación satisfactoria, es decir, un conjunto de variables booleanas que hacen que ϕ sea verdadero. Podemos extraer de X un sistema normativo de implementación de Nash η de la siguiente manera: si xi ∈ X, entonces η incluye el arco desde s0 hasta el estado en el que f(xi) es verdadero, e incluye también el arco desde s(2k + 1) hasta el estado en el que f(xi) es verdadero; si xi ∈ X, entonces η incluye el arco desde s0 hasta el estado en el que t(xi) es verdadero, e incluye también el arco desde s(2k + 1) hasta el estado en el que t(xi) es verdadero. Ningún otro arco, aparte de los definidos de esa manera, está incluido en η. Observa que η es racional individualmente para ambos agentes: si ambos cumplen con el sistema normativo, entonces lograrán sus objetivos γi [2], lo cual no sucede en el sistema básico. Para ver que η forma una implementación de Nash, observe que si alguno de los agentes se desvía de η, entonces ninguno de los dos logrará sus objetivos γi [2]: el agente 1 prefiere estrictamente (C, C) sobre (D, C), y el agente 2 prefiere estrictamente (C, C) sobre (C, D). Para la dirección ⇐, supongamos que existe un sistema normativo de implementación de Nash η, en cuyo caso η = ∅. Entonces ϕ es satisfactible; supongamos lo contrario. Entonces, los objetivos γi [2] no son alcanzables por ningún sistema normativo, (por construcción). Ahora, dado que η debe prohibir al menos una transición, entonces al menos un agente no lograría que se cumpla su objetivo γi [1] si cumpliera, por lo tanto, al menos uno estaría mejor si se desviara, es decir, no cumpliera con η. Pero esto contradice la suposición de que η es una implementación de Nash, es decir, que (C, C) forma un equilibrio de Nash. Este resultado es quizás de cierto interés técnico más allá de las preocupaciones específicas del presente artículo, ya que está relacionado con dos problemas de interés más amplio: la complejidad del diseño de mecanismos [5] y la complejidad de calcular equilibrios de Nash [6, 7]. 5.4 Lenguajes de Objetivos más Ricos Es interesante considerar qué sucede con la complejidad de los problemas que consideramos anteriormente si permitimos lenguajes más ricos para los objetivos: en particular, CTL ∗ [9]. La diferencia principal es que determinar ui (K) en un sistema multiagente M dado cuando se utiliza un lenguaje objetivo implica resolver un problema completo en PSPACE (ya que la verificación de modelos para CTL ∗ es completa en PSPACE [8]). De hecho, parece que para cada uno de los tres problemas que consideramos anteriormente, el problema correspondiente bajo la suposición de una representación CTL ∗ para objetivos también es PSPACE-completo. No puede ser más fácil, ya que determinar la utilidad de una estructura de Kripke particular implica resolver un problema completo de PSPACE. Para ver la pertenencia a PSPACE podemos aprovechar el hecho de que PSPACE = NPSPACE [12, p.150], y así podemos adivinar el sistema normativo deseado, aplicando un procedimiento de verificación de PSPACE para comprobar que tiene las propiedades deseadas. 6. CONCLUSIONES Se supone que las normas sociales restringen nuestro comportamiento. Por supuesto, tal restricción no tiene por qué ser negativa: el hecho de que el comportamiento de un agente esté restringido puede parecer una limitación, pero puede haber beneficios si puede asumir que otros también limitarán su comportamiento. La pregunta entonces, para un agente, es cómo asegurarse de que otros cumplirán con una norma. Y, para un diseñador de sistemas, ¿cómo asegurarse de que el sistema se comportará de manera social, es decir, de acuerdo con su norma? La teoría de juegos es una herramienta muy natural para analizar y responder a estas preguntas, que implican consideraciones estratégicas, y hemos propuesto una forma de traducir preguntas clave relacionadas con sistemas normativos basados en la lógica a preguntas de teoría de juegos. Hemos propuesto un marco lógico para razonar sobre tales escenarios, y hemos proporcionado algunos costos computacionales para resolver algunas de las preguntas principales sobre ellos. Por supuesto, nuestro enfoque está abierto en muchos sentidos para su extensión o enriquecimiento. Un problema evidente a considerar es la complejidad de las preguntas que planteamos para representaciones más prácticas de los modelos (cf. [1]), y considerar otras clases de objetivos permitidos. 7. REFERENCIAS [1] T. Agotnes, W. van der Hoek, J. A. Rodriguez-Aguilar, C. Sierra y M. Wooldridge. Sobre la lógica de los sistemas normativos. En Proc. IJCAI-07, Hyderabad, India, 2007. [2] R. Alur, T. A. Henzinger, y O. Kupferman. Lógica temporal de tiempo alternante. Revista de la ACM, 49(5):672-713, 2002. [3] K. Binmore. Teoría de juegos y el contrato social Volumen 1: Jugando limpio. The MIT Press: Cambridge, MA, 1994. [4] K. Binmore. 

La editorial MIT Press: Cambridge, MA, 1994. [4] K. Binmore. Teoría de juegos y el contrato social Volumen 2: Solo jugando. The MIT Press: Cambridge, MA, 1998. [5] V. Conitzer y T. Sandholm. Complejidad del diseño de mecanismos. En Proc. UAI, Edmonton, Canadá, 2002. [6] V. Conitzer y T. Sandholm. Resultados de complejidad sobre equilibrios de Nash. En Proc. IJCAI-03, pp. 765-771, Acapulco, México, 2003. [7] C. Daskalakis, P. W. Goldberg y C. H. Papadimitriou. La complejidad de calcular un equilibrio de Nash. En Proc. STOC, Seattle, WA, 2006. [8] E. A. Emerson.
STOC, Seattle, WA, 2006. [8] E. A. Emerson. Lógica temporal y modal. En Manual de Teoría. This is not a complete sentence. Please provide the full sentence you would like me to translate to Spanish. Ciencia. Volumen. B, páginas 996-1072. Elsevier, 1990. [9] E. A. Emerson y J. Y. Halpern. A veces y no nunca revisado: sobre la lógica temporal de tiempo ramificado versus tiempo lineal. Revista de la ACM, 33(1):151-178, 1986. [10] D. Fitoussi y M. Tennenholtz. Seleccionando leyes sociales para sistemas multiagente: Minimalidad y simplicidad. Inteligencia Artificial, 119(1-2):61-101, 2000. [11] M. J. Osborne y A. Rubinstein. Un curso de teoría de juegos. The MIT Press: Cambridge, MA, 1994. [12] C. H. Papadimitriou.
La editorial MIT Press: Cambridge, MA, 1994. [12] C. H. Papadimitriou. Complejidad computacional. Addison-Wesley: Reading, MA, 1994. [13] Y. Shoham y M. Tennenholtz. Sobre la síntesis de leyes sociales útiles para las sociedades de agentes artificiales. En Proc. AAAI, San Diego, CA, 1992. [14] Y. Shoham y M. Tennenholtz. Sobre leyes sociales para sociedades de agentes artificiales: Diseño fuera de línea. En Teorías Computacionales de Interacción y Agencia, páginas 597-618. The MIT Press: Cambridge, MA, 1996. [15] W. van der Hoek, M. Roberts, and M. Wooldridge. 

La editorial MIT Press: Cambridge, MA, 1996. [15] W. van der Hoek, M. Roberts y M. Wooldridge. Leyes sociales en tiempo alternante: Efectividad, viabilidad y síntesis. Synthese, 2007. [16] M. Wooldridge y W. van der Hoek. Sobre obligaciones y capacidad normativa. Rev. de Apl. Lógica, 3:396-420, 2005. 888 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07)