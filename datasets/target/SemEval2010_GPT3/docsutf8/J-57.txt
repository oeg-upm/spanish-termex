Contribuciones marginales netas: Un esquema de representación compacto para juegos coalicionales ∗ Samuel Ieong † Departamento de Ciencias de la Computación Universidad de Stanford Stanford, CA 94305 sieong@stanford.edu Yoav Shoham Departamento de Ciencias de la Computación Universidad de Stanford Stanford, CA 94305 shoham@stanford.edu RESUMEN Presentamos un nuevo enfoque para representar juegos coalicionales basado en reglas que describen las contribuciones marginales de los agentes. Este esquema de representación captura las características de las interacciones entre los agentes de una manera natural y concisa. También desarrollamos algoritmos eficientes para dos de los conceptos de solución más importantes, el valor de Shapley y el núcleo, bajo esta representación. El valor de Shapley se puede calcular en tiempo lineal en función del tamaño de la entrada. La vacuidad del núcleo puede determinarse en tiempo exponencial solo en el ancho del árbol de una interpretación gráfica de nuestra representación. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial Distribuida]: Sistemas multiagente; J.4 [Ciencias Sociales y del Comportamiento]: Economía; F.2 [Análisis de Algoritmos y Complejidad de Problemas] Términos Generales Algoritmos, Economía. INTRODUCCIÓN
Los agentes a menudo pueden beneficiarse coordinando sus acciones. Los juegos coalicionales capturan estas oportunidades de coordinación al modelar explícitamente la capacidad de los agentes para tomar acciones conjuntas como primitivas. Como abstracción, los juegos coalicionales asignan un beneficio a cada grupo de agentes en el juego. Este pago está destinado a reflejar el pago que el grupo de agentes puede asegurar para sí mismos independientemente de las acciones de los agentes que no están en el grupo. Estas elecciones de primitivas contrastan con las de juegos no cooperativos, en los que los agentes se modelan de forma independiente y sus ganancias dependen críticamente de las acciones elegidas por los otros agentes. Juegos de Coalición y Comercio Electrónico Los juegos de coalición han aparecido en el contexto del comercio electrónico. En [7], Kleinberg et al. utilizan juegos coalicionales para estudiar sistemas de recomendación. En su modelo, cada individuo conoce un cierto conjunto de elementos, está interesado en aprender sobre todos los elementos y se beneficia al descubrirlos. Los beneficios para grupos de agentes son el número total de elementos distintos conocidos por sus miembros. Dado este escenario de juego coalicional, Kleinberg et al. calculan el valor de la información privada de los agentes para el sistema utilizando el concepto de solución del valor de Shapley (la definición se puede encontrar en la sección 2). Estos valores pueden ser utilizados para determinar cuánto debe recibir cada agente por participar en el sistema. Como otro ejemplo, considera la economía detrás de la formación de cadenas de suministro. El aumento en el uso de Internet como medio para llevar a cabo negocios ha disminuido los costos para las empresas al coordinar sus acciones, por lo tanto, el juego coalicional es un buen modelo para estudiar el problema de la cadena de suministro. Supongamos que cada fabricante compra sus materias primas de un conjunto de proveedores, y que los proveedores ofrecen mayores descuentos con más compras. La disminución en los costos de comunicación permitirá a los fabricantes encontrar a otros interesados en el mismo conjunto de proveedores de manera más económica, y facilita la formación de coaliciones para negociar con los proveedores. Dependiendo del conjunto de proveedores y cuánto compra cada coalición de cada proveedor, podemos asignar pagos a las coaliciones según el descuento que reciban. El juego resultante puede ser analizado utilizando la teoría de juegos coalicionales, y podemos responder preguntas como la estabilidad de las coaliciones y cómo dividir de manera justa los beneficios entre los fabricantes participantes. Un problema similar, la formación de coaliciones combinatorias, ha sido estudiado previamente en [8].
Criterios de evaluación para la representación de juegos coalicionales. Para capturar los juegos coalicionales descritos anteriormente y realizar cálculos sobre ellos, primero debemos encontrar una representación para estos juegos. La solución ingenua es enumerar los pagos para cada conjunto de agentes, lo que requiere un espacio exponencial de 193 en el número de agentes en el juego. Para las dos aplicaciones descritas, el número de agentes en el sistema puede fácilmente superar los cien; este enfoque ingenuo no será escalable para tales problemas. Por lo tanto, es fundamental encontrar buenos esquemas de representación para juegos coalicionales. Creemos que la calidad de un esquema de representación debe ser evaluada por cuatro criterios. Expresividad: la amplitud de la clase de juegos coalicionales cubiertos por la representación. Concisión: el requisito de espacio de la representación. Eficiencia: la eficiencia de los algoritmos que podemos desarrollar para la representación. Simplicidad: la facilidad de uso de la representación por parte de los usuarios del sistema. La representación ideal debería ser completamente expresiva, es decir, debería ser capaz de representar cualquier juego coalicional, ocupar el menor espacio posible, tener algoritmos eficientes para su cálculo y ser fácil de usar. El objetivo de este documento es desarrollar un esquema de representación que tenga propiedades cercanas a la representación ideal. Desafortunadamente, dado que el número de grados de libertad de los juegos coalicionales es O(2n), no todos los juegos pueden ser representados de manera concisa utilizando un único esquema debido a restricciones de la teoría de la información. Para cualquier clase de juegos dada, uno puede ser capaz de desarrollar un esquema de representación que esté adaptado y sea más compacto que un esquema general. Por ejemplo, para el sistema de recomendación de juegos, una representación altamente compacta sería aquella que simplemente indica qué agentes conocen qué productos, y permite que los algoritmos que operan en la representación calculen los valores de las coaliciones de manera adecuada. Para algunos problemas, sin embargo, puede que no existan algoritmos eficientes para representaciones personalizadas. Al tener una representación general y algoritmos eficientes que la acompañen, la representación será útil como una herramienta de prototipado para estudiar nuevas situaciones económicas. 1.3 Trabajos Previos La cuestión de la representación de juegos coalicionales solo ha sido explorada de manera escasa en el pasado [2, 3, 4]. En [4], Deng y Papadimitriou se enfocaron en la complejidad de diferentes conceptos de solución en juegos coalicionales definidos en grafos. Si bien la representación es compacta, no es completamente expresiva. En [2], Conitzer y Sandholm investigaron el problema de determinar el vaciamiento del núcleo en juegos superaditivos. Desarrollaron un esquema de representación compacto para este tipo de juegos, pero nuevamente la representación tampoco es completamente expresiva. En [3], Conitzer y Sandholm desarrollaron un esquema de representación completamente expresivo basado en la descomposición. Nuestro trabajo extiende y generaliza los esquemas de representación en [3, 4] mediante la descomposición del juego en un conjunto de reglas que asignan contribuciones marginales a grupos de agentes. Realizaremos una revisión más detallada de estos documentos en la sección 2.2 después de cubrir el trasfondo técnico. Resumen de Nuestras Contribuciones: Desarrollamos la representación de redes de contribución marginal, un esquema de representación completamente expresivo cuyo tamaño escala de acuerdo con la complejidad de las interacciones entre los agentes. Creemos que la representación también es simple e intuitiva.
Desarrollamos un algoritmo para calcular el valor de Shapley de juegos coalicionales bajo esta representación que se ejecuta en tiempo lineal en el tamaño de la entrada.
Bajo la interpretación gráfica de la representación, desarrollamos un algoritmo para determinar si un vector de pagos está en el núcleo y la vacuidad del núcleo en tiempo exponencial solo en el treewidth del grafo. PRELIMINARES En esta sección, revisaremos brevemente los conceptos básicos de la teoría de juegos coalicionales y sus dos principales conceptos de solución, el valor de Shapley y el núcleo. También revisaremos trabajos previos sobre la representación de juegos coalicionales con más detalle. A lo largo de este documento, asumiremos que la recompensa para un grupo de agentes puede ser distribuida libremente entre sus miembros. Esta suposición es frecuentemente conocida como la suposición de utilidad transferible. 2.1 Antecedentes técnicos Podemos representar un juego de coalición con utilidad transferible mediante el par N, v, donde • N es el conjunto de agentes; y • v: 2N → R es una función que asigna a cada grupo de agentes S ⊆ N un pago con valor real. Esta representación es conocida como la forma característica. Dado que hay un número exponencial de subconjuntos, se requerirá un espacio exponencial en el número de agentes para describir un juego coalicional. Un resultado en un juego coalicional especifica las utilidades que reciben los agentes. Un concepto de solución asigna a cada juego coalicional un conjunto de resultados razonables. Diferentes conceptos de solución intentan capturar de alguna manera resultados que son estables y/o justos. Dos de los conceptos de solución más conocidos son el valor de Shapley y el núcleo. El valor de Shapley es un concepto de solución normativa. Prescribe una forma justa de dividir las ganancias de la cooperación cuando se forma la gran coalición (es decir, N). La división del pago al agente i es la contribución marginal promedio del agente i sobre todas las posibles permutaciones de los agentes. Formalmente, sea φi(v) el valor de Shapley de i bajo la función característica v, entonces φi(v) = S⊂N s! (n − s − 1)! n! (v(S ∪ {i}) − v(S)) (1). El valor de Shapley es un concepto de solución que satisface muchas propiedades interesantes, y ha sido estudiado extensamente en la literatura económica y de teoría de juegos. Tiene una caracterización axiomática muy útil. Eficiencia (EFF) Se distribuye un total de v(N) a los agentes, es decir, i∈N φi(v) = v(N). Simetría (SYM) Si los agentes i y j son intercambiables, entonces φi(v) = φj(v).
Los materiales y la terminología se basan en los libros de texto de Mas-Colell et al. [9] y Osborne y Rubinstein [11].
Como conveniencia notacional, usaremos la letra minúscula para representar la cardinalidad de un conjunto denotado por la letra mayúscula correspondiente.
Dummy (DUM) Si el agente i es un jugador ficticio, es decir, su contribución marginal a todos los grupos S es la misma, φi(v) = v({i}). Aditividad (ADD) Para cualquier par de juegos coalicionales v y w definidos sobre el mismo conjunto de agentes N, φi(v + w) = φi(v) + φi(w) para todo i ∈ N, donde el juego v + w se define como (v + w)(S) = v(S) + w(S) para todo S ⊆ N. Nos referiremos a estos axiomas más adelante en nuestra demostración de la corrección del algoritmo para calcular el valor de Shapley bajo nuestra representación en la sección 4. El núcleo es otro concepto importante de solución para los juegos coalicionales. Es un concepto de solución descriptivo que se centra en resultados que son estables. La estabilidad bajo el núcleo significa que ningún grupo de jugadores puede desviarse conjuntamente para mejorar sus ganancias. Formalmente, dejemos que x(S) denote i∈S xi. Un resultado x ∈ Rn está en el núcleo si ∀S ⊆ N x(S) ≥ v(S) (2). El núcleo fue uno de los primeros conceptos de solución propuestos para juegos coalicionales, y ha sido estudiado en detalle. Una pregunta importante para un juego coalicional dado es si el núcleo está vacío. En otras palabras, si hay algún resultado que sea estable en relación a la desviación del grupo. Para que un juego tenga un núcleo no vacío, debe cumplir con la propiedad de equilibrio, definida de la siguiente manera. Sea 1S ∈ Rn el vector característico de S dado por (1S)i = 1 si i ∈ S, 0 en caso contrario. Sea (λS)S⊆N un conjunto de pesos tal que cada λS está en el rango entre 0 y 1. Este conjunto de pesos, (λS)S⊆N, es una colección equilibrada si para todo i ∈ N, S⊆N λS(1S)i = 1. Un juego es equilibrado si para todas las colecciones equilibradas de pesos, S⊆N λSv(S) ≤ v(N). Según el teorema de Bondereva-Shapley, el núcleo de un juego coalicional es no vacío si y solo si el juego es equilibrado. Por lo tanto, podemos usar programación lineal para determinar si el núcleo de un juego está vacío. maximizar λ∈R2n S⊆N λSv(S) sujeto a S⊆N λS1S = 1 ∀i ∈ N λS ≥ 0 ∀S ⊆ N (4) Si el valor óptimo de (4) es mayor que el valor de la gran coalición, entonces el núcleo está vacío. Desafortunadamente, este programa tiene un número exponencial de variables en la cantidad de jugadores en el juego, por lo tanto, un algoritmo que opere directamente en este programa sería inviable en la práctica. En la sección 5.4, describiremos un algoritmo que responde a la pregunta de vacío del núcleo que funciona en el dual de este programa en su lugar.
2.2 Trabajo Previo Revisitado Deng y Papadimitriou investigaron la complejidad de varios conceptos de solución en juegos coalicionales jugados en grafos ponderados en [4]. En su representación, el conjunto de agentes son los nodos del grafo, y el valor de un conjunto de agentes S es la suma de los pesos de las aristas abarcadas por ellos. Ten en cuenta que esta representación es concisa ya que el espacio requerido para especificar dicho juego es O(n2). Sin embargo, esta representación no es general; no podrá representar interacciones entre tres o más agentes. Por ejemplo, no podrá representar el juego de mayoría, donde un grupo de agentes S tendrá un valor de 1 si y solo si s > n/2. Por otro lado, existe un algoritmo eficiente para calcular el valor de Shapley del juego y para determinar si el núcleo está vacío bajo la restricción de pesos de arista positivos. Sin embargo, en el caso no restringido, determinar si el núcleo está vacío es coNP-completo. Conitzer y Sandholm en [2] consideraron juegos coalicionales que son superaditivos. Describieron un esquema de representación conciso que solo indica el valor de una coalición si el valor es estrictamente superaditivo. Más precisamente, la semántica de la representación es que para un grupo de agentes S, v(S) = max {T1,T2,...,Tn}∈Π i v(Ti) donde Π es el conjunto de todas las particiones posibles de S. El valor v(S) solo se especifica explícitamente para S si v(S) es mayor que todas las particiones de S que no sean la partición trivial ({S}). Si bien esta representación puede representar todos los juegos que son superaditivos, hay juegos coalicionales que no puede representar. Por ejemplo, no podrá representar juegos con sustituibilidad entre los agentes. Un ejemplo de un juego que no se puede representar es el juego de la unidad, donde v(S) = 1 siempre que S = ∅. Bajo esta representación, los autores demostraron que determinar si el núcleo está vacío es coNP-completo. De hecho, incluso determinar el valor de un grupo de agentes es NP-completo. En un artículo más reciente, Conitzer y Sandholm describieron una representación que descompone un juego coalicional en varios subjuegos cuya suma equivale al juego original [3]. Los pagos en estos subjuegos son representados por sus respectivas funciones características. Este esquema es completamente general ya que la forma característica es un caso especial de esta representación. Para cualquier juego dado, puede haber múltiples formas de descomponer el juego, y la descomposición puede influir en la complejidad computacional. Para calcular el valor de Shapley, los autores demostraron que la complejidad es lineal en la descripción de la entrada; en particular, si el subjuego más grande (medido por el número de agentes) tiene un tamaño de n y el número de subjuegos es m, entonces su algoritmo se ejecuta en tiempo O(m2n), donde el tamaño de la entrada también será O(m2n). Por otro lado, el problema de determinar si un cierto resultado está en el núcleo es coNP-completo. CONTRIBUCIÓN MARGINAL EN REDES En esta sección, describiremos el esquema de representación de Redes de Contribución Marginal. Mostraremos que la idea es flexible y que podemos extenderla fácilmente para aumentar su concisión. También mostraremos cómo podemos usar este esquema para representar el juego de recomendación de la introducción. Finalmente, demostraremos que este esquema es completamente expresivo y generaliza los esquemas de representación en [3, 4]. 3.1 Reglas y Redes de Contribución Marginal La idea básica detrás de las redes de contribución marginal (MC-nets) es representar juegos coalicionales utilizando conjuntos de reglas. Las reglas en las redes MC tienen la siguiente forma sintáctica: Patrón → valor. Se dice que una regla se aplica a un grupo de agentes S si S cumple con el requisito del Patrón. En el esquema básico, estos patrones son conjunciones de agentes, y S cumple con el requisito del patrón dado si S es un superconjunto de él. El valor de un grupo de agentes se define como la suma de los valores de todas las reglas que se aplican al grupo. Por ejemplo, si el conjunto de reglas es {a ∧ b} → 5 {b} → 2 entonces v({a}) = 0, v({b}) = 2, y v({a, b}) = 5 + 2 = 7. MC-nets es un esquema de representación muy flexible y puede ser extendido de diferentes formas. Una forma sencilla de ampliarlo y aumentar su concisión es permitir una clase más amplia de patrones en las reglas. Un patrón que utilizaremos a lo largo del resto del documento es uno que se aplica solo en ausencia de ciertos agentes. Esto es útil para expresar conceptos como la sustituibilidad o los valores predeterminados. Formalmente, expresamos tales patrones como {p1 ∧ p2 ∧ . . . ∧ pm ∧ ¬n1 ∧ ¬n2 ∧ . . . ∧ ¬nn}, lo cual tiene la semántica de que dicha regla se aplicará a un grupo S solo si {pi}m i=1 ∈ S y {nj}n j=1 /∈ S. Llamaremos a {pi}m i=1 en el patrón anterior los literales positivos, y a {nj}n j=1 los literales negativos. Ten en cuenta que si el patrón de una regla consiste únicamente en literales negativos, consideraremos que el conjunto vacío de agentes también satisfará dicho patrón, y por lo tanto v(∅) puede ser distinto de cero en presencia de literales negativos. Para demostrar el aumento en la concisión de la representación, considere el juego de unidad descrito en la sección 2.2. Para representar un juego de este tipo sin usar literales negativos, necesitaremos 2n reglas para n jugadores: necesitamos una regla de valor 1 para cada agente individual, una regla de valor -1 para cada par de agentes para contrarrestar el doble conteo, una regla de valor 1 para cada trío de agentes, etc., similar al principio de inclusión-exclusión. Por otro lado, al usar literales negativos, solo necesitamos n reglas: valor 1 para el primer agente, valor 1 para el segundo agente en ausencia del primer agente, valor 1 para el tercer agente en ausencia de los dos primeros agentes, etc. Los ahorros representacionales pueden ser exponenciales en el número de agentes. Dado un juego representado como una red de MC, podemos interpretar el conjunto de reglas que conforman el juego como un grafo. Llamamos a este gráfico el gráfico de agentes. Los nodos en el grafo representarán a los agentes en el juego, y para cada regla en la MCnet, conectamos todos los agentes en la regla juntos y asignamos un valor al clique formado por el conjunto de agentes. Ten en cuenta que para acomodar literales negativos, necesitaremos anotar el clique apropiadamente. Esta vista alternativa de las redes MC será útil en nuestro algoritmo para la Membresía Central en la sección 5. Nos gustaría finalizar nuestra discusión sobre el esquema de representación mencionando un compromiso entre la expresividad de los patrones y el espacio necesario para representarlos. Para representar un juego coalicional en forma característica, se necesitaría especificar todos los 2n − 1 valores. No hay gastos adicionales además de eso, ya que hay un orden natural de los grupos. Para las redes MC-nets, sin embargo, la especificación de las reglas requiere especificar tanto los patrones como los valores. Los patrones, si no se representan de forma compacta, pueden terminar abrumando el ahorro de tener menos valores que especificar. El espacio requerido para los patrones también conlleva un compromiso entre la expresividad de los patrones permitidos y la simplicidad de representarlos. Sin embargo, creemos que para la mayoría de los juegos que surgen naturalmente, debería haber suficiente estructura en el problema para que nuestra representación logre un ahorro neto sobre la forma característica.  
3.2 Ejemplo: Juego de Recomendación  
Como ejemplo, utilizaremos MC-net para representar el juego de recomendación discutido en la introducción. Para cada producto, dado que el beneficio de conocer sobre el producto solo se contará una vez para cada grupo, necesitamos capturar la sustituibilidad entre los agentes. Esto se puede capturar mediante un juego de unidad escalado. Supongamos que el valor del conocimiento sobre el producto i es vi, y hay ni agentes, denotados por {xj i}, que conocen el producto, el juego para el producto i puede entonces representarse como las siguientes reglas: {x1 i} → vi {x2 i ∧ ¬x1 i} → vi ... {xni i ∧ ¬xni−1 i ∧ · · · ∧ ¬x1 i} → vi El juego completo puede construirse a partir de los conjuntos de reglas de cada producto. El requisito de espacio será O(mn∗), donde m es el número de productos en el sistema, y n∗ es el número máximo de agentes que conocen el mismo producto.
3.3 Poder de Representación Discutiremos la expresividad y concisión de nuestro esquema de representación y lo compararemos con los trabajos anteriores en esta subsección. Proposición 1. Las redes de contribución marginal constituyen un esquema de representación completamente expresivo. Prueba. Considera un juego de coalición arbitrario N, v en representación en forma característica. Podemos construir un conjunto de reglas para describir este juego comenzando desde los conjuntos unitarios y construyendo el conjunto de reglas. Para cualquier conjunto unitario {i}, creamos una regla {i} → v(i). Para cualquier par de agentes {i, j}, creamos una regla {i ∧ j} → v({i, j}) − v({i}) − v({j}). Podemos seguir construyendo reglas de manera similar al principio de inclusión-exclusión. Dado que el juego es arbitrario, las redes MC son completamente expresivas. Usando la construcción descrita en la prueba, podemos demostrar que nuestro esquema de representación puede simular el esquema de representación multi-tema de [3] en casi la misma cantidad de espacio. Proposición 2. Las redes de contribución marginal utilizan como máximo un factor lineal (en el número de agentes) más de espacio que la representación multi-tema para cualquier juego. Prueba. Dado un juego en representación de múltiples problemas, comenzamos describiendo cada uno de los subjuegos, que están representados en forma característica en [3], con un conjunto de reglas. Luego construimos el juego principal incluyendo todas las reglas de los subjuegos. Ten en cuenta que nuestra representación puede requerir un espacio mayor por un factor lineal debido a la necesidad de describir los patrones para cada regla. Por otro lado, nuestro enfoque puede tener menos reglas que un número exponencial para cada subjuego, dependiendo de la estructura de estos subjuegos, y por lo tanto puede ser más conciso que una representación de múltiples problemas. Por otro lado, hay juegos que requieren exponencialmente más espacio para representarse bajo el esquema de múltiples problemas en comparación con nuestro esquema. Proposición 3. Las redes de contribución marginal son exponencialmente más concisas que la representación multi-tema para ciertos juegos. Prueba. Considera un juego de unidad sobre todos los agentes N. Como se explica en 3.1, este juego puede ser representado en un espacio lineal utilizando redes de MC con literales negativos. Sin embargo, como no hay descomposición de este juego en subjuegos más pequeños, se requerirá un espacio O(2n) para representar este juego bajo la representación multi-issue. Bajo la interpretación del grafo de agentes de las redes MC, podemos ver que las redes MC son una generalización de la representación gráfica en [4], es decir, de grafos ponderados a hipergrafos ponderados. Proposición 4. Las redes de contribución marginal pueden representar cualquier juego en forma gráfica (bajo [4]) en la misma cantidad de espacio. Prueba. Dado un juego en forma gráfica, G, para cada borde (i, j) con peso wij en el grafo, creamos una regla {i, j} → wij. Claramente esto ocupa exactamente el mismo espacio que el tamaño de G, y por la semántica aditiva de las reglas, representa el mismo juego que G. 4. CALCULANDO EL VALOR DE SHAPLEY Dado un MC-net, tenemos un algoritmo simple para calcular el valor de Shapley del juego. Considerando cada regla como un juego separado, comenzamos calculando el valor de Shapley de los agentes para cada regla. Para cada agente, luego sumamos los valores de Shapley de ese agente sobre todas las reglas. Primero mostramos que este proceso final de sumar calcula correctamente el valor de Shapley de los agentes. Proposición 5. El valor de Shapley de un agente en una red de contribución marginal es igual a la suma de los valores de Shapley de ese agente sobre cada regla. Prueba. Para cualquier grupo S, bajo la representación de redes MC-nets, v(S) se define como la suma de los valores de todas las reglas que se aplican a S. Por lo tanto, considerando cada regla como un juego, según el axioma (ADD) discutido en la sección 2, el valor de Shapley del juego creado a partir de la agregación de todas las reglas es igual a la suma de los valores de Shapley sobre las reglas. La pregunta que queda es cómo calcular los valores de Shapley de las reglas. Podemos separar el análisis en dos casos, uno para reglas con solo literales positivos y otro para reglas con literales mixtos. Para reglas que solo tienen literales positivos, el valor de Shapley de los agentes es v/m, donde v es el valor de la regla y m es el número de agentes en la regla. Esto es una consecuencia directa del axioma (SYM) del valor de Shapley, ya que los agentes en una regla son indistinguibles entre sí. Para reglas que tienen literales tanto positivos como negativos, podemos considerar los literales positivos y negativos por separado. Para un literal positivo dado i, la regla se aplicará solo si i ocurre en una permutación dada después del resto de los literales positivos pero antes de cualquiera de los literales negativos. Formalmente, sea φi el valor de Shapley de i, p la cardinalidad del conjunto positivo y n la cardinalidad del conjunto negativo, entonces φi = (p − 1)!n! (p + n)! v = v p p+n n. Para una literal negativa dada j, j será responsable de cancelar la aplicación de la regla si todas las literales positivas vienen antes de las literales negativas en el orden y j es la primera entre las literales negativas. Por lo tanto, φj = p! (n − 1)! (p + n)! (−v) = −v n p+n p. Por el axioma (SYM), todas las literales positivas tendrán el valor de φi y todas las literales negativas tendrán el valor de φj. Ten en cuenta que la suma sobre todos los agentes en reglas con literales mixtos es 0. Esto es de esperarse ya que estas reglas contribuyen con 0 a la gran coalición. El hecho de que estas reglas no tengan efecto en la gran coalición puede parecer extraño al principio. Pero esto se debe a que la presencia de tales reglas es para definir los valores de coaliciones más pequeñas que la gran coalición. En términos de complejidad computacional, dado que el valor de Shapley de cualquier agente en una regla dada se puede calcular en tiempo lineal en el patrón de la regla, el tiempo de ejecución total del algoritmo para calcular el valor de Shapley del juego es lineal en el tamaño de la entrada. RESPONDIENDO A PREGUNTAS RELACIONADAS CON EL NÚCLEO Hay algunos problemas computacionales diferentes pero relacionados asociados con el concepto de solución del núcleo. Nos enfocaremos en los siguientes dos problemas: Definición 1. (Membresía del núcleo) Dado un juego coalicional y un vector de pagos x, determinar si x está en el núcleo. Definición 2. (Núcleo-No-Vacuidad) Dado un juego coalicional, determinar si el núcleo no está vacío. En el resto de la sección, primero demostraremos que estos dos problemas son coNP-completos y coNP-duros respectivamente, y discutiremos algunas consideraciones de complejidad sobre estos problemas. Luego revisaremos las ideas principales de la descomposición de árboles, ya que se utilizará ampliamente en nuestro algoritmo para la Membresía Central. A continuación, presentaremos el algoritmo para la Membresía del Núcleo, y demostraremos que el algoritmo se ejecuta en tiempo polinómico para grafos de ancho de árbol acotado. Terminamos extendiendo este algoritmo para responder la pregunta de No-Vaciabilidad del Núcleo en tiempo polinómico para grafos de treewidth acotada. 5.1 Complejidad Computacional La dificultad de la Membresía del Núcleo y la No-Vaciabilidad del Núcleo se sigue directamente de los resultados de dificultad de juegos sobre grafos ponderados en [4]. Proposición 6. 197 La pertenencia central para juegos representados como redes de contribución marginal es coNP-completa. Prueba. La pertenencia central en las redes de MC está en la clase de coNP, ya que cualquier conjunto de agentes S del cual v(S) > x(S) servirá como certificado para demostrar que x no pertenece al núcleo. En cuanto a su dureza, dado cualquier ejemplo de CoreMembership para un juego en forma gráfica de [4], podemos codificar el juego exactamente en el mismo espacio utilizando MC-net debido a la Proposición 4. Dado que la Membresía del Núcleo para juegos en forma gráfica es coNP-completa, la Membresía del Núcleo en redes de MC es coNP-difícil. Proposición 7. La no vacuidad del núcleo para juegos representados como redes de contribución marginal es coNP-difícil. Prueba. El mismo argumento de dificultad entre juegos en forma gráfica y redes de MC se aplica al problema de No-Vaciado del Núcleo. No conocemos un certificado que demuestre que Core-NonEmptiness está en la clase de coNP en este momento. Ten en cuenta que el certificado obvio de un conjunto equilibrado de pesos basado en el teorema de Bondereva-Shapley es de tamaño exponencial. En [4], Deng y Papadimitriou demostraron la coNP-completitud de la No-Vaciabilidad del Núcleo a través de una caracterización combinatoria, a saber, que el núcleo es no vacío si y solo si no hay un corte negativo en el grafo. En las redes MC-nets, sin embargo, no es necesario que haya un hiperconjunto negativo en el grafo para que el núcleo esté vacío, como se demuestra en el siguiente juego (N = {1, 2, 3, 4}): v(S) =    1 si S = {1, 2, 3, 4} 3/4 si S = {1, 2}, {1, 3}, {1, 4} o {2, 3, 4} 0 en otro caso (5) Aplicando el teorema de Bondareva-Shapley, si permitimos que λ12 = λ13 = λ14 = 1/3, y λ234 = 2/3, este conjunto de pesos demuestra que el juego no está equilibrado, por lo tanto, el núcleo está vacío. Por otro lado, este juego puede ser representado con redes de Markov de campo como sigue (pesos en hiperarcos): w({1, 2}) = w({1, 3}) = w({1, 4}) = 3/4 w({1, 2, 3}) = w({1, 2, 4}) = w({1, 3, 4}) = −6/4 w({2, 3, 4}) = 3/4 w({1, 2, 3, 4}) = 10/4 No importa cómo se divida el conjunto, la suma de los pesos de los hiperarcos en el corte siempre es no negativa. Para superar la dificultad computacional de estos problemas, hemos desarrollado algoritmos basados en técnicas de descomposición de árboles. Para la Membresía Principal, nuestro algoritmo se ejecuta en tiempo exponencial solo en el treewidth del grafo de agentes. Por lo tanto, para grafos de pequeño ancho de árbol, como los árboles, tenemos una solución manejable para determinar si un vector de pagos está en el núcleo. Al utilizar este procedimiento como un oráculo de separación, es decir, un procedimiento para devolver la desigualdad violada por una solución candidata, para resolver un programa lineal relacionado con la No-Vaciabilidad del Núcleo utilizando el método de la elipsoide, podemos obtener un algoritmo de tiempo polinómico para la No-Vaciabilidad del Núcleo para grafos de treewidth acotada. 5.2 Revisión de la Descomposición de Árboles Dado que nuestro algoritmo para la Membresía del Núcleo depende en gran medida de la descomposición de árboles, primero revisaremos brevemente las ideas principales en la descomposición de árboles y la treewidth. Definición 3. Una descomposición de un árbol de un grafo G = (V, E) es un par (X, T), donde T = (I, F) es un árbol y X = {Xi | i ∈ I} es una familia de subconjuntos de V, uno para cada nodo de T, tal que • i∈I Xi = V; • Para todas las aristas (v, w) ∈ E, existe un i ∈ I con v ∈ Xi y w ∈ Xi; y • (Propiedad de Intersección en Ejecución) Para todo i, j, k ∈ I: si j está en el camino de i a k en T, entonces Xi ∩ Xk ⊆ Xj. El treewidth de una descomposición de un árbol se define como la cardinalidad máxima sobre todos los conjuntos en X, menos uno. El ancho de árbol de un grafo se define como el ancho de árbol mínimo sobre todas las descomposiciones en árbol del grafo. Dada una descomposición de un árbol, podemos convertirla en una descomposición de un árbol agradable con el mismo ancho de árbol y de tamaño lineal en el de T. Definición 4. Una descomposición de árbol T es buena si T está enraizado y tiene cuatro tipos de nodos: Los nodos hoja i son hojas de T con |Xi| = 1. Introduce nodos i tengo un hijo j tal que Xi = Xj ∪ {v} de algún v ∈ V. Olvida los nodos, tengo un hijo j tal que Xi = Xj \ {v} para algún v ∈ Xj. Unir nodos i que tienen dos hijos j y k con Xi = Xj = Xk. Un ejemplo de una descomposición de árbol (parcial) junto con una clasificación de los diferentes tipos de nodos se muestra en la Figura 1. En la siguiente sección, nos referiremos a los nodos en la descomposición del árbol como nodos, y a los nodos en el grafo del agente como agentes. 5.3 Algoritmo para la Membresía del Núcleo Nuestro algoritmo para la Membresía del Núcleo toma como entrada una descomposición de árbol T del grafo del agente y un vector de pagos x. Por definición, si x pertenece al núcleo, entonces para todos los grupos S ⊆ N, x(S) ≥ v(S). Por lo tanto, la diferencia x(S)−v(S) mide qué tan cerca está el grupo S de violar la condición del núcleo. Llamamos a esta diferencia el exceso del grupo S. Definición 5. El exceso de una coalición S, e(S), se define como x(S) − v(S). Un enfoque de fuerza bruta para determinar si un vector de pagos pertenece al núcleo tendrá que verificar que los excesos de todos los grupos sean no negativos. Sin embargo, este enfoque ignora la estructura en el grafo del agente que permitirá a un algoritmo inferir que ciertos grupos tienen excesos no negativos debido a 3. Esto se basa en gran medida en los materiales de un artículo de revisión de Bodlaender [1]. 198 i j k l nm Introducir Nodo: Xj = {1, 4} Xk = {1, 4} Olvidar Nodo: Xl = {1, 4} Introducir Nodo: Xm = {1, 2, 4} Xn = {4} Nodo Hoja: Nodo de Unión: Xi = {1, 3, 4} Nodo de Unión: Figura 1: Ejemplo de una descomposición de árbol (parcial) agradable, los excesos se calculan en otro lugar en el grafo. La descomposición de árboles es la clave para aprovechar tales inferencias de manera estructurada. Por ahora, centrémonos en reglas con literales positivos. Supongamos que ya hemos verificado que los excesos de todos los conjuntos R ⊆ U son no negativos, y nos gustaría verificar si la adición de un agente i al conjunto U creará un grupo con exceso negativo. Una solución ingenua sería calcular los excesos de todos los conjuntos que incluyen i. El exceso del grupo (R ∪ {i}) para cualquier grupo R se puede calcular de la siguiente manera: e(R ∪ {i}) = e(R) + xi − v(c) (6) donde c es el corte entre R e i, y v(c) es la suma de los pesos de las aristas en el corte. Sin embargo, supongamos que a partir de la descomposición del árbol, sabemos que i solo está conectado a un subconjunto de U, digamos S, al que llamaremos el conjunto de entrada a U. Idealmente, dado que i no comparte aristas con los miembros de ¯U = (U \ S), esperaríamos que un algoritmo pueda aprovechar esta estructura revisando solo conjuntos que son subconjuntos de (S ∪ {i}). Este ahorro computacional puede ser posible ya que (xi − v(c)) en la ecuación de actualización de (6) no depende de ¯U. Sin embargo, no podemos simplemente ignorar ¯U, ya que los miembros de ¯U aún pueden influir en los excesos de los grupos que incluyen al agente i a través del grupo S. Específicamente, si existe un grupo T ⊃ S tal que e(T) < e(S), entonces incluso cuando e(S ∪ {i}) tiene un exceso no negativo, e(T ∪ {i}) puede tener un exceso negativo. En otras palabras, el exceso disponible en S puede haberse agotado debido a T. Esto motiva la definición de la reserva de un grupo. Definición 6. La reserva de una coalición S con respecto a una coalición U es el exceso mínimo sobre todas las coaliciones entre S y U, es decir, todas las T: S ⊆ T ⊆ U. Denotamos este valor como r(S, U). Nos referiremos al grupo T que tiene el exceso mínimo como arg r(S, U). También llamaremos U al conjunto límite de la reserva y S al conjunto base de la reserva. Nuestro algoritmo funciona manteniendo un registro de las reservas de todos los subconjuntos no vacíos que pueden formarse por los agentes de un nodo en cada uno de los nodos de la descomposición del árbol. Comenzando desde las hojas del árbol y trabajando hacia la raíz, en cada nodo i, nuestro algoritmo calcula las reservas de todos los grupos S ⊆ Xi, limitados por el conjunto de agentes en el subárbol enraizado en i, Ti, excepto aquellos en (Xi\S). Los agentes en (Xi\S) están excluidos para asegurar que S sea un conjunto de entrada. Específicamente, S es el conjunto de entrada establecido como ((Ti \ Xi) ∪ S). Para acomodar los literales negativos, necesitaremos hacer dos ajustes. En primer lugar, el corte entre un agente m y un conjunto S en el nodo i ahora se refiere al corte entre el agente m, el conjunto S y el conjunto ¬(Xi \ S), y su valor debe ser calculado en consecuencia. Además, cuando se introduce un agente m a un grupo en un nodo de introducción, también necesitaremos considerar el cambio en las reservas de los grupos que no incluyen a m debido a un posible corte que involucre a ¬m y al grupo. Como ejemplo de los valores de reserva que seguimos en un nodo del árbol, considera el nodo i del árbol en la Figura 1. En el nodo i, haremos un seguimiento de lo siguiente: r({1}, {1, 2, . . .}) r({3}, {2, 3, . . .}) r({4}, {2, 4, . . .}) r({1, 3}, {1, 2, 3, . . .}) r({1, 4}, {1, 2, 4, . . .}) r({3, 4}, {2, 3, 4, . . .}) r({1, 3, 4}, {1, 2, 3, 4, . . .}) donde los puntos suspensivos . . . se refieren a los agentes enraizados bajo el nodo m. Para uso notacional, usaremos ri(S) para denotar r(S, U) en el nodo i donde U es el conjunto de agentes en el subárbol enraizado en el nodo i excluyendo agentes en (Xi \ S). A veces nos referimos a estos valores como los valores r de un nodo. Los detalles de los cálculos del valor r están en el Algoritmo 1. Para determinar si el vector de pagos x está en el núcleo, durante el cálculo del valor r en cada nodo, podemos verificar si todos los valores de r son no negativos. Si esto es así para todos los nodos en el árbol, el vector de pagos x está en el núcleo. La corrección del algoritmo se debe a la siguiente proposición. Proposición 8. El vector de pagos x no está en el núcleo si y solo si los valores r en algún nodo i para algún grupo S son negativos. Prueba. (⇐) Si la reserva en algún nodo i para algún grupo S es negativa, entonces existe una coalición T para la cual e(T) = x(T) − v(T) < 0, por lo tanto, x no está en el núcleo. (⇒) Supongamos que x no está en el núcleo, entonces existe algún grupo R∗ tal que e(R∗) < 0. Sea Xroot el conjunto de nodos en la raíz. Considerando cualquier conjunto S ∈ Xroot, rroot(S) tendrá el conjunto base de S y el conjunto límite de ((N \ Xroot) ∪ S). La unión sobre todos estos rangos incluye todos los conjuntos U para los cuales U ∩ Xroot = ∅. Por lo tanto, si R∗ no es disjunto de Xroot, el valor r para algún grupo en la raíz es negativo. Si R∗ es disjunto de U, considera el bosque {Ti} resultante de la eliminación de todos los nodos de árbol que incluyen agentes en Xroot. Algoritmo 1 Subprocedimientos para la Membresía del Núcleo Nodo-Hoja(i) 1: ri(Xi) ← e(Xi) Introducir-Nodo(i) 2: j ← hijo de i 3: m ← Xi \ Xj {el nodo introducido} 4: para todo S ⊆ Xj, S = ∅ hacer 5: C ← todos los hiperarcos en el corte de m, S, y ¬(Xi \ S) 6: ri(S ∪ {x}) ← rj(S) + xm − v(C) 7: C ← todos los hiperarcos en el corte de ¬m, S, y ¬(Xi \ S) 8: ri(S) ← rj(S) − v(C) 9: fin para 10: r({m}) ← e({m}) Olvidar-Nodo(i) 11: j ← hijo de i 12: m ← Xj \ Xi {el nodo olvidado} 13: para todo S ⊆ Xi, S = ∅ hacer 14: ri(S) = min(rj(S), rj(S ∪ {m})) 15: fin para Unir-Nodo(i) 16: {j, k} ← {hijo izquierdo, hijo derecho} de i 17: para todo S ⊆ Xi, S = ∅ hacer 18: ri(S) ← rj(S) + rk(S) − e(S) 19: fin para Por la propiedad de intersección en ejecución, los conjuntos de nodos en los árboles Tis son disjuntos. Por lo tanto, si el conjunto R∗ = i Si para algún Si ∈ Ti, e(R∗ ) = i e(Si) < 0 implica que algún grupo S∗ i también tiene exceso negativo. Por lo tanto, solo necesitamos verificar los valores de r de los nodos en los árboles individuales en el bosque. Pero para cada árbol en el bosque, podemos aplicar el mismo argumento restringido a los agentes en el árbol. En el caso base, tenemos los nodos hoja de la descomposición del árbol original, digamos, para el agente i. Si R∗ = {i}, entonces r({i}) = e({i}) < 0. Por lo tanto, por inducción, si e(R∗ ) < 0, alguna reserva en algún nodo sería negativa. A continuación, explicaremos la intuición detrás de la corrección de los cálculos para los valores de r en los nodos del árbol. Una prueba detallada de la corrección de estos cálculos se puede encontrar en el apéndice bajo los Lemas 1 y 2. Proposición 9. El procedimiento en el Algoritmo 1 calcula correctamente los valores r en cada uno de los nodos del árbol. Prueba. (Bosquejo) Podemos realizar un análisis de casos sobre los cuatro tipos de nodos de árbol en una descomposición de árbol agradable. Nodos hoja (i) El único valor de reserva a calcular es ri(Xi), que es igual a r(Xi, Xi), y por lo tanto es simplemente el exceso del grupo Xi. Olvida los nodos (i con hijo j). Sea m el nodo olvidado. Para cualquier subconjunto S ⊆ Xi, arg ri(S) debe ser elegido entre los grupos de S y S ∪ {m}, y por lo tanto elegimos entre el menor de los dos valores r en el nodo j. Introducir nodos (i con hijo j). Sea m el nodo introducido. Para cualquier subconjunto T ⊆ Xi que incluya a m, sea S el conjunto (T \ {m}). Por la propiedad de intersección en ejecución, no hay reglas que involucren m y agentes del subárbol enraizado en el nodo i, excepto aquellas que involucren m y agentes en Xi. Dado que tanto el conjunto base como el conjunto límite de los valores r del nodo j y del nodo i difieren por {m}, para cualquier grupo V que se encuentre entre el conjunto base y el conjunto límite del nodo i, el exceso del grupo V diferirá por una cantidad constante del grupo correspondiente (V \ {m}) en el nodo j. Por lo tanto, el conjunto arg ri(T) es igual al conjunto arg rj(S) ∪ {m}, y ri(T) = rj(S) + xm − v(cut), donde v(cut) es el valor de las reglas en el corte entre m y S. Para cualquier subconjunto S ⊂ Xi que no incluya a m, necesitamos considerar los valores de las reglas que incluyen ¬m como literal en el patrón. Además, al calcular la reserva, el pago xm no contribuirá al grupo S. Por lo tanto, junto con la propiedad de intersección en ejecución como se argumentó anteriormente, podemos mostrar que ri(S) = rj(S) − v(cut). Unir nodos (i con hijo izquierdo j y hijo derecho k). Para cualquier conjunto dado S ⊆ Xi, considera los valores r de ese conjunto en j y k. Si arg rj(S) o arg rk(S) incluye agentes que no están en S, entonces argrj(S) y argrk(S) serán disjuntos entre sí debido a la propiedad de intersección en ejecución. Por lo tanto, podemos descomponer arg ri(S) en tres conjuntos, (arg rj(S) \ S) a la izquierda, S en el medio y (arg rk(S) \ S) a la derecha. La reserva rj(S) cubrirá los excesos a la izquierda y en el medio, mientras que la reserva rk(S) cubrirá los de la derecha y en el medio, por lo que los excesos en el medio se cuentan dos veces. Ajustamos por la doble contabilización restando los excesos en el medio de la suma de las dos reservas rj(S) y rk(S). Finalmente, cabe destacar que cada paso en el cálculo de los valores r de cada nodo i toma tiempo como máximo exponencial en el tamaño de Xi, por lo tanto, el algoritmo se ejecuta en tiempo exponencial solo en el treewidth del grafo. 5.4 Algoritmo para la No Vacuidad del Núcleo Podemos extender el algoritmo para la Membresía del Núcleo en un algoritmo para la No Vacuidad del Núcleo. Como se describe en la sección 2, si el núcleo está vacío se puede verificar utilizando el programa de optimización basado en la condición de equilibrio (3). Desafortunadamente, ese programa tiene un número exponencial de variables. Por otro lado, el dual del programa tiene solo n variables y puede escribirse de la siguiente manera: minimizar x∈Rn n i=1 xi sujeto a x(S) ≥ v(S), ∀S ⊆ N (7). Por dualidad fuerte, el valor óptimo de (7) es igual al valor óptimo de (4), el programa primal descrito en la sección 2. Por lo tanto, según el teorema de Bondareva-Shapley, si el valor óptimo de (7) es mayor que v(N), el núcleo está vacío. Podemos resolver el programa dual utilizando el método del elipsoide con Core-Membership como un oráculo de separación, es decir, un procedimiento para devolver una restricción que está violada. Ten en cuenta que una simple extensión al algoritmo de Membresía-Principal nos permitirá hacer un seguimiento del conjunto T para el cual e(T) < 0 durante el cálculo de los valores r, y por lo tanto podemos devolver la desigualdad sobre T como la restricción violada. Por lo tanto, Core-Non-Emptiness puede ejecutarse en tiempo polinómico en el tiempo de ejecución de Core-Membership, que a su vez se ejecuta en 200 veces exponencial solo en el treewidth del grafo. Ten en cuenta que cuando el núcleo no está vacío, este programa devolverá un resultado en el núcleo. 6. CONCLUSIONES FINALES
Hemos desarrollado un esquema de representación completamente expresivo para juegos coalicionales cuyo tamaño depende de la complejidad de las interacciones entre los agentes. Nuestro enfoque en la representación general contrasta con el enfoque adoptado en [3, 4]. También hemos desarrollado un algoritmo eficiente para el cálculo de los valores de Shapley para esta representación. Si bien la Membresía Central para redes MC es coNP-completa, hemos desarrollado un algoritmo para la Membresía Central que se ejecuta en tiempo exponencial solo en el treewidth del grafo de agentes. También hemos extendido el algoritmo para resolver la Core-No-Vacuidad. Aparte del algoritmo para la Core-No-Vacío en [4] bajo la restricción de pesos de aristas no negativos, y el de [2] para juegos superaditivos cuando se conoce el valor de la gran coalición, no tenemos conocimiento de ninguna descripción explícita de algoritmos para problemas relacionados con el núcleo en la literatura. El trabajo en este documento está relacionado con varias áreas en informática, especialmente en inteligencia artificial. Por ejemplo, la interpretación gráfica de las redes MC está estrechamente relacionada con los campos aleatorios de Markov (MRFs) de la comunidad de redes Bayes. Ambos abordan el tema de la concisión de la representación utilizando la estructura combinatoria de hipergrafos ponderados. De hecho, Kearns et al. primero aplican estas ideas a la teoría de juegos al introducir un esquema de representación derivado de la red de Bayes para representar juegos no cooperativos [6]. Los problemas de representación enfrentados en juegos coalicionales están estrechamente relacionados con el problema de expresar valoraciones en subastas combinatorias [5, 10]. El lenguaje OR-bid, por ejemplo, está fuertemente relacionado con la superaditividad. La cuestión del poder de representación de diferentes patrones también está relacionada con la complejidad de las expresiones booleanas [12]. Creemos que con una mejor comprensión de las relaciones entre estas áreas relacionadas, podríamos desarrollar representaciones y algoritmos más eficientes para juegos coalicionales. Finalmente, nos gustaría concluir con algunas ideas para ampliar el trabajo en este artículo. Una dirección para aumentar la concisión de las redes MC es permitir la definición de clases equivalentes de agentes, similar a la idea de extender las redes Bayes a modelos relacionales probabilísticos. El concepto de simetría es prevalente en los juegos, y el uso de clases de agentes nos permitirá capturar la simetría de forma natural y concisa. Esto también abordará el problema de representaciones asimétricas desagradables de juegos simétricos en nuestra representación. Siguiendo la línea de explotar la simetría, dado que los agentes dentro de la misma clase son simétricos entre sí, podemos extender la idea anterior permitiendo la descripción funcional de las contribuciones marginales. Más concretamente, podemos especificar el valor de una regla como dependiente del número de agentes de cada clase relevante. El uso de funciones permitirá una descripción concisa de los rendimientos marginales decrecientes (RMD). Sin el uso de funciones, el espacio necesario para describir MDRs entre n agentes en redes MC es O(n). Con el uso de funciones, el espacio requerido se puede reducir a O(1). Otra idea para extender las redes MC es aumentar la semántica para permitir construcciones que especifiquen que ciertas reglas no pueden aplicarse simultáneamente. Esto es útil en situaciones donde un cierto agente representa un tipo de recurso agotable, y por lo tanto las reglas que dependen de la presencia del agente no deben aplicarse simultáneamente. Por ejemplo, si el agente i en el sistema representa al carbón, podemos usarlo como combustible para una central eléctrica o como insumo para una acería para fabricar acero, pero no para ambas cosas al mismo tiempo. Actualmente, para representar tales situaciones, tenemos que especificar reglas para cancelar los efectos de la aplicación de diferentes reglas. La semántica aumentada puede simplificar la representación al especificar cuándo las reglas no pueden aplicarse juntas. 7. AGRADECIMIENTO Los autores desean agradecer a Chris Luhrs, Bob McGrew, Eugene Nudelman y Qixiang Sun por las discusiones fructíferas, y a los revisores anónimos por sus comentarios útiles sobre el artículo. 8. REFERENCIAS [1] H. L. Bodlaender. Anchura de árbol: Técnicas algorítmicas y resultados. En Actas del 22º Simposio sobre Fundamentos Matemáticos de la Ciencia de la Computación, páginas 19-36. Springer-Verlag LNCS 1295, 1997.
[2] V. Conitzer and T. Sandholm. Complejidad de determinar la no vacuidad del núcleo. En Proc. 18th Int. Conferencia Conjunta sobre Inteligencia Artificial, páginas 613-618, 2003. [3] V. Conitzer y T. Sandholm. Calculando los valores de Shapley, manipulando esquemas de división de valor y verificando la membresía del núcleo en dominios de múltiples problemas. En Proc. 19º Nat. Conf. sobre Inteligencia Artificial, páginas 219-225, 2004. [4] X. Deng y C. H. Papadimitriou. Sobre la complejidad de los conceptos de solución cooperativa. Matemáticas. Operación. Res., 19:257-266, mayo de 1994. [5] Y. Fujishima, K. Leyton-Brown y Y. Shoham. Domando la complejidad computacional de las subastas combinatorias: Enfoques óptimos y aproximados. En Proc. 16th Int. Conferencia Conjunta sobre Inteligencia Artificial, páginas 548-553, 1999. [6] M. Kearns, M. L. Littman y S. Singh. Modelos gráficos para teoría de juegos. En Actas de la 17ª Conferencia sobre Incertidumbre en Inteligencia Artificial, páginas 253-260, 2001. [7] J. Kleinberg, C. H. Papadimitriou y P. Raghavan. Sobre el valor de la información privada. En Proc. 8ª Conf. sobre Aspectos Teóricos de la Racionalidad y el Conocimiento, páginas 249-257, 2001. [8] C. Li y K. Sycara. Algoritmos para la formación de coaliciones combinatorias y la división de pagos en un mercado electrónico. Informe técnico, Instituto de Robótica, Universidad Carnegie Mellon, noviembre de 2001. [9] A. Mas-Colell, M. D. Whinston y J. R. Green. Teoría microeconómica. Oxford University Press, Nueva York, 1995. [10] N. Nisan. Subasta y asignación en subastas combinatorias. En Proc. 2da Conf. ACM sobre Comercio Electrónico, páginas 1-12, 2000. [11] M. J. Osborne y A. Rubinstein. Un curso de Teoría de Juegos. The MIT Press, Cambridge, Massachusetts, 1994. [12] I. Wegener. La complejidad de las funciones booleanas. John Wiley & Sons, Nueva York, octubre de 1987.
201 APÉNDICE
Mostraremos formalmente la corrección del cálculo del valor r en el Algoritmo 1 de introducir nodos y unir nodos. Lema 1. El procedimiento para calcular los valores de r de los nodos introducidos en el Algoritmo 1 es correcto. Prueba. Que el nodo m sea el agente recién introducido en i. Que U denote el conjunto de agentes en el subárbol con raíz en i. Por la propiedad de intersección en ejecución, todas las interacciones (los hiperarcos) entre m y U deben estar en el nodo i. Para todo S ⊆ Xi : m ∈ S, sea R el conjunto (U \ Xi) ∪ S), y Q sea el conjunto (R \ {m}). ri(S) = r(S, R) = min T :S⊆T ⊆R e(T) = min T :S⊆T ⊆R x(T) − v(T) = min T :S⊆T ⊆R x(T \ {m}) + xm − v(T \ {m}) − v(cut) = min T :S\{m}⊆T ⊆Q e(T ) + xm − v(cut) = rj(S) + xm − v(cut) El argumento para conjuntos S ⊆ Xi : m /∈ S es simétrico excepto que xm no contribuirá a la reserva debido a la ausencia de m. Lema 2. El procedimiento para calcular los valores de r de los nodos de unión en el Algoritmo 1 es correcto. Prueba. Considera cualquier conjunto S ⊆ Xi. Que Uj denote el subárbol enraizado en el hijo izquierdo, Rj denote ((Uj \ Xj) ∪ S), y Qj denote (Uj \ Xj). Dejen que Uk, Rk y Qk se definan de manera análoga para el hijo derecho. Que R denote (U \ Xi) ∪ S). ri(S) = r(S, R) = min T :S⊆T ⊆R x(T) − v(T) = min T :S⊆T ⊆R x(S) + x(T ∩ Qj) + x(T ∩ Qk) − v(S) − v(cut(S, T ∩ Qj) − v(cut(S, T ∩ Qk) = min T :S⊆T ⊆R x(T ∩ Qj) − v(cut(S, T ∩ Qj)) + min T :S⊆T ⊆R x(T ∩ Qk) − v(cut(S, T ∩ Qk)) + (x(S) − v(S)) (*) = min T :S⊆T ⊆R x(T ∩ Qj) + x(S) − v(cut(S, T ∩ Qj)) − v(S) + min T :S⊆T ⊆R x(T ∩ Qk) + x(S) − v(cut(S, T ∩ Qk)) − v(S) − (x(S) − v(S)) = min T :S⊆T ⊆R e(T ∩ Rj) + min T :S⊆T ⊆R e(T ∩ Rk) − e(S) = min T :S⊆T ⊆Rj e(T ) + min T :S⊆T ⊆Rk e(T ) − e(S) = rj(S) + rk(S) − e(S) donde (*) es verdadero ya que T ∩ Qj y T ∩ Qk son disjuntos debido a la propiedad de intersección en ejecución de la descomposición de árbol, y por lo tanto el mínimo de la suma puede descomponerse en la suma de los mínimos. 202