Un Mecanismo de Asignación de Recursos que Anticipa Precios para Clústeres Compartidos Distribuidos Michal Feldman∗ mfeldman@sims.berkeley.edu Kevin Lai† kevin.lai@hp.com Li Zhang† l.zhang@hp.com RESUMEN En este artículo formulamos el juego de asignación de recursos con presupuesto fijo para comprender el rendimiento de un sistema de asignación de recursos basado en el mercado distribuido. Varios usuarios deciden cómo distribuir su presupuesto (ofertas) entre varias máquinas de acuerdo con sus preferencias individuales para maximizar su utilidad individual. Observamos tanto la eficiencia como la equidad de la asignación en el equilibrio, donde la equidad se evalúa a través de las medidas de uniformidad de utilidad y ausencia de envidia. Mostramos analíticamente y a través de simulaciones que a pesar de ser altamente descentralizado, dicho sistema converge rápidamente a un equilibrio y, a diferencia del óptimo social que logra una alta eficiencia pero una baja equidad, el esquema de asignación propuesto logra un buen equilibrio entre altos niveles de eficiencia y equidad en el equilibrio. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos; C.4 [Rendimiento de Sistemas]; F.2.2 [Análisis de Algoritmos y Complejidad de Problemas]: Algoritmos y Problemas No Numéricos; J.4 [Ciencias Sociales y del Comportamiento]: Economía Términos Generales Algoritmos, Rendimiento, Diseño, Economía 1. La principal ventaja de los clústeres compartidos distribuidos como Grid [7] y PlanetLab [1] es su capacidad para agrupar recursos computacionales compartidos. Esto permite un mayor rendimiento debido a la multiplexación estadística y al patrón de utilización intermitente de los usuarios típicos. Compartir nodos dispersos en la red permite reducir el retraso porque las aplicaciones pueden almacenar datos cerca de los usuarios. Finalmente, compartir permite una mayor confiabilidad debido a la redundancia en los hosts y conexiones de red. Sin embargo, la asignación de recursos en estos sistemas sigue siendo el principal desafío. El problema es cómo asignar un recurso compartido de manera justa y eficiente (donde la eficiencia es la proporción del bienestar social logrado con respecto al óptimo social) con la presencia de usuarios estratégicos que actúan en su propio interés. Se han propuesto varios algoritmos de asignación no económica, pero típicamente asumen que los valores de las tareas (es decir, su importancia) son iguales, o son inversamente proporcionales a los recursos requeridos, o son establecidos por un administrador omnisciente. Sin embargo, en muchos casos, los valores de las tareas varían significativamente, no están correlacionados con los requisitos de recursos y son difíciles y consumen mucho tiempo para que un administrador los establezca. En cambio, examinamos un sistema de asignación de recursos basado en el mercado (otros se describen en [2, 4, 6, 21, 26, 27]) que permite a los usuarios expresar sus preferencias por los recursos a través de un mecanismo de subasta. En particular, consideramos un esquema de anticipación de precios [12] en el que un usuario ofrece un precio por un recurso y recibe la proporción de su oferta con respecto a la suma de ofertas por ese recurso. Este esquema proporcional es más simple, escalable y receptivo [15] que los esquemas basados en subastas [6, 21, 26]. Trabajos anteriores han analizado esquemas de anticipación de precios en el contexto de asignar capacidad de red para flujos de usuarios con presupuestos ilimitados. En este trabajo, examinamos un esquema de anticipación de precios en el contexto de asignar capacidad computacional para usuarios con preferencias privadas y presupuestos limitados, lo que resulta en un juego cualitativamente diferente (como se discute en la Sección 6). En este artículo, formulamos el juego de asignación de recursos con presupuesto fijo y estudiamos la existencia y el rendimiento de los equilibrios de Nash de este juego. Para evaluar los equilibrios de Nash, consideramos tanto su eficiencia, midiendo qué tan cerca está el bienestar social en equilibrio del óptimo social, como la equidad, midiendo qué tan diferentes son las utilidades de los usuarios. Aunque rara vez se haya considerado en estudios teóricos de juegos anteriores, creemos que la equidad es una métrica crítica para los esquemas de asignación de recursos, ya que la percepción de injusticia hará que algunos usuarios rechacen un sistema con una asignación de recursos más eficiente pero menos justa a favor de uno con una asignación de recursos menos eficiente pero más justa. Utilizamos tanto la uniformidad de utilidad como la ausencia de envidia para medir la equidad. La uniformidad de utilidad, común en el trabajo de Ciencias de la Computación, mide la cercanía de las utilidades de diferentes usuarios. La envidia, que se enfoca más desde la perspectiva económica, mide la felicidad de los usuarios con sus propios recursos en comparación con los recursos de los demás. Nuestras contribuciones son las siguientes: • Analizamos la existencia y el rendimiento de 127 equilibrios de Nash. Mediante análisis, demostramos que siempre hay un equilibrio de Nash en el juego de presupuesto fijo si las funciones de utilidad cumplen una condición de competitividad fuerte y natural bastante débil. También mostramos los límites de rendimiento en el peor de los casos: para m jugadores, la eficiencia en equilibrio es Ω(1/ √ m), la uniformidad de la utilidad es ≥ 1/m y la ausencia de envidia es ≥ 2 √ 2−2 ≈ 0.83. Aunque estos límites son bastante bajos, las simulaciones descritas a continuación indican que estos límites son excesivamente pesimistas. • Describimos algoritmos que permiten a los usuarios estratégicos optimizar su utilidad. Como parte del análisis del juego de presupuesto fijo, demostramos que los usuarios estratégicos con funciones de utilidad lineales pueden calcular sus ofertas utilizando un algoritmo de mejor respuesta que rápidamente resulta en una asignación con alta eficiencia con poco costo computacional y de comunicación. Presentamos variaciones del algoritmo de mejor respuesta para tareas con paralelismo finito e infinito. Además, presentamos un algoritmo de ajuste local codicioso que converge más lentamente que la mejor respuesta, pero permite funciones de utilidad no lineales o no formulables. • Mostramos que el mecanismo de asignación de recursos anticipando el precio logra un alto grado de eficiencia y equidad. Mediante simulación, encontramos que aunque la asignación socialmente óptima resulta en una eficiencia perfecta, también resulta en una equidad muy pobre. Asimismo, asignar según solo los pesos de preferencia de los usuarios resulta en una alta equidad, pero una eficiencia mediocre. La intuición sugeriría que la eficiencia y la equidad son excluyentes. Sorprendentemente, el equilibrio de Nash, alcanzado por cada usuario aplicando iterativamente el algoritmo de mejor respuesta para adaptar sus ofertas, logra casi la eficiencia del óptimo social y casi la equidad de la asignación ponderada proporcional: la eficiencia es ≥ 0.90, la uniformidad de la utilidad es ≥ 0.65 y la ausencia de envidia es ≥ 0.97, independientemente del número de usuarios en el sistema. Además, el tiempo para converger al equilibrio es ≤ 5 iteraciones cuando todos los usuarios utilizan la estrategia de mejor respuesta. El algoritmo de ajuste local se comporta de manera similar cuando hay suficiente competitividad, pero tarda de 25 a 90 iteraciones en estabilizarse. Como resultado, creemos que los sistemas distribuidos compartidos basados en el juego de presupuesto fijo pueden ser altamente descentralizados, pero lograr un alto grado de eficiencia y equidad. El resto del documento está organizado de la siguiente manera. Describimos el modelo en la Sección 2 y derivamos el rendimiento en los equilibrios de Nash para el modelo de paralelismo infinito en la Sección 3. En la Sección 4, describimos algoritmos para que los usuarios optimicen su propia utilidad en el juego de presupuesto fijo. En la Sección 5, describimos nuestro simulador y los resultados de la simulación. Describimos el trabajo relacionado en la Sección 6. Concluimos discutiendo algunos límites de nuestro modelo y trabajos futuros en la Sección 7.2. La asignación de recursos anticipando el precio del modelo. Estudiamos el problema de asignar un conjunto de recursos (o máquinas) divisibles. Supongamos que hay m usuarios y n máquinas. Cada máquina puede dividirse continuamente para asignarse a múltiples usuarios. Un esquema de asignación ω = (r1, . . . , rm), donde ri = (ri1, · · · , rin) con rij representando la parte de la máquina j asignada al usuario i, satisface que para cualquier 1 ≤ i ≤ m y 1 ≤ j ≤ n, rij ≥ 0 y Pm i=1 rij ≤ 1. Que Ω denote el conjunto de todos los esquemas de asignación. Consideramos el mecanismo de anticipación de precios en el que cada usuario coloca una oferta en cada máquina, y el precio de la máquina se determina por las ofertas totales realizadas. Formalmente, suponga que el usuario i envía una oferta no negativa xij a la máquina j. El precio de la máquina j se establece entonces en Yj = Pn i=1 xij, las ofertas totales realizadas en la máquina j. En consecuencia, el usuario i recibe una fracción de rij = xij Yj de j. Cuando Yj = 0, es decir, cuando no hay ninguna oferta por una máquina, la máquina no se asigna a nadie. Llamamos xi = (xi1, . . . , xin) al vector de oferta del usuario i. La consideración adicional que tenemos es que cada usuario i tiene una restricción presupuestaria Xi. Por lo tanto, las ofertas totales del usuario deben sumar su presupuesto, es decir, Pn j=1 xij = Xi. 

La suma desde j=1 hasta n de xij es igual a Xi. Las restricciones presupuestarias provienen del hecho de que los usuarios no tienen un presupuesto infinito. Funciones de utilidad. Cada utilidad de usuario está representada por una función Ui de la fracción (ri1, . . . , rin) que el usuario recibe de cada máquina. Dado el dominio del problema que consideramos, asumimos que cada usuario tiene preferencias diferentes y relativamente independientes para diferentes máquinas. Por lo tanto, la función de utilidad básica que consideramos es la función de utilidad lineal: Ui(ri1, · · · , rin) = wi1ri1 +· · ·+winrin, donde wij ≥ 0 es la preferencia privada del usuario, también llamada su peso, en la máquina j. Por ejemplo, supongamos que la máquina 1 tiene una CPU más rápida pero menos memoria que la máquina 2, y el usuario 1 ejecuta aplicaciones limitadas por la CPU, mientras que el usuario 2 ejecuta aplicaciones limitadas por la memoria. Como resultado, w11 > w12 y w21 < w22. Nuestra definición de funciones de utilidad corresponde a que el usuario tenga suficientes trabajos o suficiente paralelismo dentro de los trabajos para utilizar todas las máquinas. Por consiguiente, el objetivo de los usuarios es obtener la mayor cantidad posible de un recurso. Llamamos a esto el modelo de paralelismo infinito. En la práctica, la aplicación de un usuario puede tener un límite inherente en la paralelización (por ejemplo, algunas computaciones deben realizarse de forma secuencial) o puede haber un límite del sistema (por ejemplo, los datos de la aplicación se están sirviendo desde un servidor de archivos con capacidad limitada). Para modelar esto, también consideramos el modelo de paralelismo finito más realista, donde el paralelismo de los usuarios está limitado por ki, y la utilidad de los usuarios Ui es la suma de los ki mayores wijrij. En este modelo, el usuario solo presenta ofertas para hasta ki máquinas. Nuestra abstracción es capturar la esencia del problema y facilitar nuestro análisis. En la Sección 7, discutimos el límite de la definición anterior de funciones de utilidad. Mejor respuesta. Como es típico, asumimos que los usuarios son egoístas y estratégicos: todos actúan para maximizar su propia utilidad, definida por sus funciones de utilidad. Desde la perspectiva del usuario i, si las ofertas totales de los otros usuarios colocadas en cada máquina j es yj, entonces la mejor respuesta del usuario i al sistema es la solución del siguiente problema de optimización: maximizar Ui( xij xij +yj ) sujeto a Pn j=1 xij = Xi, y xij ≥ 0. La dificultad del problema de optimización anterior depende de la formulación de Ui. Mostraremos más adelante cómo resolverlo para el modelo de paralelismo infinito y proporcionaremos una heurística para el modelo de paralelismo finito. Equilibrio de Nash. Por la suposición de que el usuario es egoísta, el vector de oferta de cada usuario es la mejor respuesta para el sistema. La pregunta que nos interesa más es si existe una colección de vectores de oferta, uno para cada usuario, de tal manera que el vector de oferta de cada usuario sea la mejor respuesta a los de los otros usuarios. Un estado así se conoce como el equilibrio de Nash, un concepto central en la Teoría de Juegos. Formalmente, los vectores de oferta x1, . . . , xm son un equilibrio de Nash si para cualquier 1 ≤ i ≤ m, xi es la mejor respuesta al sistema, o, para cualquier otro vector de oferta xi, Ui(x1, . . . , xi, . . . , xm) ≥ Ui(x1, . . . , xi, . . . , xm). El equilibrio de Nash es deseable porque es un estado estable en el cual nadie tiene incentivos para cambiar su estrategia. Pero un juego puede no tener un equilibrio. De hecho, un equilibrio de Nash puede no existir en el esquema de anticipación de precios que definimos anteriormente. Esto se puede demostrar con un simple ejemplo de dos jugadores y dos máquinas. Por ejemplo, sea U1(r1, r2) = r1 y U2(r1, r2) = r1 + r2. Entonces, el jugador 1 nunca debería apostar por la máquina 2 porque no tiene valor para él. Ahora, el jugador 2 tiene que hacer una oferta positiva en la máquina 2 para reclamar la máquina, pero no hay un límite inferior, lo que resulta en la inexistencia del equilibrio de Nash. Debemos tener en cuenta que ni siquiera el equilibrio de estrategia mixta existe en este ejemplo. Claramente, esto sucede cada vez que hay un recurso que es deseado por un solo jugador. Para descartar este caso, consideramos aquellos juegos altamente competitivos. Bajo el modelo de paralelismo infinito, un juego se llama altamente competitivo si para cualquier 1 ≤ j ≤ n, existe un i = k tal que wij, wkj > 0. Bajo tal condición, tenemos que (ver [5] para una demostración), Teorema 1. Siempre existe un equilibrio de Nash de estrategia pura en un juego altamente competitivo. Dada la existencia del equilibrio de Nash, la siguiente pregunta importante es el rendimiento en el equilibrio de Nash, que suele medirse por su eficiencia y equidad. Eficiencia (Precio del Anarquía). Para un esquema de asignación ω ∈ Ω, denotamos por U(ω) = Σi Ui(ri) el bienestar social bajo ω. Sea U∗ = maxω∈Ω U(ω) el bienestar social óptimo, es decir, la máxima utilidad agregada posible de los usuarios. La eficiencia en un esquema de asignación ω se define como π(ω) = U(ω) U∗. Que Ω0 denote el conjunto de la asignación en el equilibrio de Nash. Cuando existe un equilibrio de Nash, es decir, Ω0 = ∅, define the efficiency of a game Q to be π(Q) = minω∈Ω0 π(ω). 

Ω0 = ∅, define la eficiencia de un juego Q como π(Q) = minω∈Ω0 π(ω). Por lo general, sucede que π < 1, es decir, hay una pérdida de eficiencia en un equilibrio de Nash. Este es el precio del caos [18] pagado por no tener una aplicación central de cumplimiento del buen comportamiento de los usuarios. Este precio es interesante porque el control central resulta en el mejor resultado posible, pero no es posible en la mayoría de los casos. Equidad. Si bien la definición de eficiencia es estándar, hay múltiples formas de definir la equidad. Consideramos dos métricas. Una forma es comparando las utilidades de los usuarios. La uniformidad de utilidad τ(ω) de un esquema de asignación ω se define como el mínimo de Ui(ω) dividido por el máximo de Ui(ω), la proporción entre la utilidad mínima y la utilidad máxima entre los usuarios. Dicha definición (o discrepancia de utilidad definida de manera similar como maxi Ui(ω) mini Ui(ω)) se utiliza ampliamente en la literatura de Ciencias de la Computación. Bajo esta definición, la uniformidad de utilidad τ(Q) de un juego Q se define como τ(Q) = minω∈Ω0 τ(ω). La otra métrica ampliamente estudiada en Economía es el concepto de equidad envidia [25]. A diferencia de la métrica de uniformidad de utilidad, la envidia se refiere a cómo el usuario percibe el valor de la participación asignada a él, en comparación con las participaciones que reciben otros usuarios. Dentro de dicho marco, define la ausencia de envidia de un esquema de asignación ω por ρ(ω) = mini,j Ui(ri) Ui(rj ) . 1Las alternativas incluyen agregar un precio de reserva o limitar la oferta mínima permitida para cada máquina. Estas alternativas, sin embargo, introducen el problema de encontrar el precio o límite correcto. Cuando ρ(ω) ≥ 1, el esquema se conoce como un esquema de asignación libre de envidia. Asimismo, la envidia-libertad ρ(Q) de un juego Q se define como ρ(Q) = minω∈Ω0 ρ(ω). 3. EQUILIBRIO DE NASH En esta sección, presentamos algunos resultados teóricos sobre el rendimiento en el equilibrio de Nash bajo el modelo de paralelismo infinito. Suponemos que el juego es altamente competitivo para garantizar la existencia de equilibrios. Para una discusión significativa sobre eficiencia y equidad, asumimos que los usuarios son simétricos al requerir que Xi = 1 y Σ j=1n wij = 1 para todos los 1 ≤ i ≤ m. O de manera informal, requerimos que todos los usuarios tengan el mismo presupuesto y la misma utilidad cuando poseen todos los recursos. Esto excluye el caso en el que un usuario tiene un presupuesto extremadamente alto, lo que resulta en una eficiencia muy baja o una equidad baja en el equilibrio. Primero proporcionamos una caracterización de los equilibrios. Por definición, los vectores de oferta x1, . . . , xm son un equilibrio de Nash si y solo si la estrategia de cada jugador es la mejor respuesta a las ofertas del grupo. Dado que Ui es una función lineal y el dominio de las ofertas de cada usuario {(xi1, . . . , xin)| P j xij = Xi , y xij ≥ 0} es un conjunto convexo, la condición de optimalidad es que exista un λi > 0 tal que ∂Ui ∂xij = wij Yj − xij Y 2 j  = λi si xij > 0, y < λi si xij = 0. (1) O intuitivamente, en un equilibrio, cada usuario tiene el mismo valor marginal en las máquinas donde realizan ofertas positivas y tiene valores marginales más bajos en aquellas máquinas donde no hacen ofertas. Bajo el modelo de paralelismo infinito, es fácil calcular el óptimo social U∗, ya que se logra cuando asignamos cada máquina por completo a la persona que tiene el peso máximo en la máquina, es decir, Primero mostramos que incluso en el caso no trivial más simple cuando hay dos usuarios y dos máquinas, el juego tiene propiedades interesantes. Comenzamos con dos casos especiales para brindar algo de intuición sobre el juego. Las matrices de peso se muestran en la figura 1(a) y (b), que corresponden respectivamente a los juegos de peso igual y peso opuesto. Que x e y denoten las respectivas ofertas de los usuarios 1 y 2 en la máquina 1. Denotemos por s = x + y y δ = (2 − s)/s. Juego de igual peso. En la Figura 1, ambos usuarios tienen valoraciones iguales para las dos máquinas. Por la condición de optimalidad, para que los vectores de oferta estén en equilibrio, necesitan satisfacer las siguientes ecuaciones de acuerdo a (1): α y (x + y)2 = (1 − α) 1 − y (2 − x − y)2 y α x (x + y)2 = (1 − α) 1 − x (2 − x − y)2. Al simplificar las ecuaciones anteriores, obtenemos que δ = 1 − 1/α y x = y = α. Por lo tanto, existe un equilibrio de Nash único en el juego donde los dos usuarios tienen el mismo vector de oferta. En el equilibrio, la utilidad de cada usuario es de 1/2, y el bienestar social es de 1. Por otro lado, el óptimo social es claramente 1. Por lo tanto, el juego de peso igual es ideal ya que la eficiencia, la uniformidad de la utilidad y la ausencia de envidia son todas 1. 129 m1 m2 u1 α 1 − α u2 α 1 − α m1 m2 u1 α 1 − α u2 1 − α α (a) juego de peso igual (b) juego de peso opuesto Figura 1: Dos casos especiales de juegos de dos jugadores. Juego de pesos opuestos. La situación es diferente para el juego opuesto en el que los dos usuarios colocan pesos exactamente opuestos en las dos máquinas. Suponga que α ≥ 1/2. De manera similar, para que los vectores de oferta estén en equilibrio, necesitan satisfacer α y (x + y)2 = (1 − α) 1 − y (2 − x − y)2 (1 − α) x (x + y)2 = α 1 − x (2 − x − y)2 Al simplificar las ecuaciones anteriores, tenemos que cada equilibrio de Nash corresponde a una raíz no negativa de la ecuación cúbica f(δ) = δ3 − cδ2 + cδ − 1 = 0, donde c = 1 2α(1−α) − 1. Claramente, δ = 1 es una raíz de f(δ). Cuando δ = 1, tenemos que x = α, y = 1 − α, que es el equilibrio simétrico que es consistente con nuestra intuición: cada usuario hace una oferta proporcional a su preferencia por la máquina. En este equilibrio, U = 2 − 4α(1 − α), U∗ = 2α, y U/U∗ = (2α + 1 α ) − 2, que se minimiza cuando α = √ 2 2 con un valor mínimo de 2 √ 2 − 2 ≈ 0.828. Sin embargo, cuando α es lo suficientemente grande, existen otras dos raíces, correspondientes a equilibrios asimétricos menos intuitivos. Intuitivamente, el equilibrio asimétrico surge cuando el usuario 1 valora mucho la máquina 1, pero al colocar incluso una oferta relativamente pequeña en la máquina 1, puede obtener la mayor parte de la máquina porque el usuario 2 valora muy poco la máquina 1 y, por lo tanto, coloca una oferta aún más pequeña. En este caso, el usuario 1 recibe la mayor parte de la máquina 1 y casi la mitad de la máquina 2. El umbral es cuando f(1) = 0, es decir, cuando c = 1 2α(1−α) = 4. Esto se resuelve a α0 = 2+ √ 2 4 ≈ 0.854. Esos equilibrios asimétricos en δ = 1 son malos ya que producen una eficiencia más baja que el equilibrio simétrico. Que δ0 sea la raíz mínima. Cuando α → 0, c → +∞, y δ0 = 1/c + o(1/c) → 0. Entonces, x, y → 1. Por lo tanto, U → 3/2, U∗ → 2 y U/U∗ → 0.75. Del juego simple anterior, ya observamos que el equilibrio de Nash puede no ser único, lo cual es diferente de muchos juegos de congestión en los que el equilibrio de Nash es único. Para el juego general de dos jugadores, podemos demostrar que 0.75 es en realidad el límite de eficiencia más bajo con una prueba en [5]. Además, en el equilibrio asimétrico, la uniformidad de la utilidad se acerca a 1/2 cuando α → 1. Esta es la peor opción posible para juegos de dos jugadores porque, como mostramos en la Sección 3.2, la utilidad de un usuario en cualquier equilibrio de Nash es al menos 1/m en el juego de m jugadores. Otra consecuencia es que el juego de dos jugadores siempre es libre de envidia. Supongamos que las dos acciones de los usuarios son r1 = (r11, . . . , r1n) y r2 = (r21, . . . , r2n) respectivamente. Entonces U1(r1) + U1(r2) = U1(r1 + r2) = U1(1, . . . , 1) = 1 porque ri1 + ri2 = 1 para todo 1 ≤ i ≤ n. Nuevamente, dado que U1(r1) ≥ 1/2, tenemos que U1(r1) ≥ U1(r2), es decir, cualquier asignación de equilibrio es libre de envidia. Teorema 2. Para un juego de dos jugadores, π(Q) ≥ 3/4, τ(Q) ≥ 0.5, y ρ(Q) = 1. Todos los límites son estrictos en el peor de los casos. 3.2 Juego multijugador Para un gran número de jugadores, la pérdida en el bienestar social puede ser lamentablemente grande. El siguiente ejemplo muestra el límite del peor caso. Considera un sistema con m = n2 + n jugadores y n máquinas. De los jugadores, hay n2 que tienen los mismos pesos en todas las máquinas, es decir, 1/n en cada máquina. Los otros n jugadores tienen peso 1, cada uno en una máquina diferente y 0 (o un valor suficientemente pequeño) en todas las demás máquinas. Claramente, U∗ = n. La siguiente asignación es un equilibrio: los primeros n2 jugadores distribuyen equitativamente su dinero entre todas las máquinas, los otros n jugadores invierten todo su dinero en su máquina favorita respectiva. Por lo tanto, el dinero total en cada máquina es n + 1. En este equilibrio, cada uno de los primeros n2 jugadores recibe 1 n 1/n n+1 = 1 n2(n+1) en cada máquina, lo que resulta en una utilidad total de n3 · 1 n2(n+1) < 1. Los otros n jugadores reciben cada uno 1 n+1 en su máquina favorita, lo que resulta en una utilidad total de n · 1 n+1 < 1. Por lo tanto, la utilidad total del equilibrio es < 2, mientras que el óptimo social es n = Θ( √ m). Este límite es el peor posible. ¿Qué hay acerca de la uniformidad de la utilidad en el juego de asignación multijugador? A continuación mostramos que la uniformidad de utilidad del juego de asignación de m jugadores no puede exceder m. Sea (S1, . . . , Sn) la suma actual de las ofertas totales en las n máquinas, excluyendo al usuario i. El usuario puede garantizar una utilidad de 1/m distribuyendo su presupuesto de manera proporcional a las ofertas actuales. Es decir, el usuario i, al ofertar sij = Xi/ Pn i=1 Si en la máquina j, obtiene un nivel de recurso de: rij = sij sij + Sj = Sj/ Pn i=1 Si Sj/ Pn i=1 Si + Sj = 1 1 + Pn i=1 Si , donde Pn j=1 Sj = Pm j=1 Xj − Xi = m − 1. Por lo tanto, rij = 1 1+m−1 = 1 m. La utilidad total del usuario i es nX j=1 rijwij = (1/m) nX j=1 wij = 1/m. Dado que la utilidad de cada usuario no puede exceder 1, la uniformidad mínima posible es 1/m. Si bien la uniformidad de la utilidad puede ser pequeña, la ausencia de envidia, por otro lado, está limitada por una constante de 2 √ 2 − 2 ≈ 0.828, como se muestra en [29]. Para resumir, tenemos que el Teorema 3. Para el juego Q de m jugadores, π(Q) = Ω(1/ √ m), τ(Q) ≥ 1/m, y ρ(Q) ≥ 2 √ 2 − 2. Todos estos límites son ajustados en el peor caso. 4. En la sección anterior, presentamos los límites de rendimiento del juego bajo el modelo de paralelismo infinito. Sin embargo, las preguntas más interesantes en la práctica son cómo se puede alcanzar el equilibrio y cuál es el rendimiento en el equilibrio de Nash para la distribución típica de funciones de utilidad. En particular, nos gustaría saber si la estrategia intuitiva de cada jugador de ajustar constantemente sus ofertas según el algoritmo de mejor respuesta conduce al equilibrio. Para responder a estas preguntas, recurrimos a simulaciones. En esta sección, presentamos los algoritmos que utilizamos para calcular o aproximar la mejor respuesta y el óptimo social en nuestros experimentos. Consideramos tanto el modelo de paralelismo infinito como el modelo de paralelismo finito. 130 4.1 Modelo de Paralelismo Infinito Como mencionamos anteriormente, es fácil calcular el óptimo social bajo el modelo de paralelismo infinito: simplemente asignamos cada máquina al usuario que más le gusta. Ahora presentamos el algoritmo para calcular la mejor respuesta. Recuerde que para los pesos w1, . . . , wn, las ofertas totales y1, . . . , yn, y el presupuesto X, la mejor respuesta es resolver el siguiente problema de optimización: maximizar U = Σ j=1n wj xj xj + yj sujeto a Σ j=1n xj = X, y xj ≥ 0. Para calcular la mejor respuesta, primero ordenamos wj yj en orden decreciente. Sin pérdida de generalidad, supongamos que w1 y1 ≥ w2 y2 ≥ . . . wn yn. Supongamos que x∗ = (x∗ 1, . . . , x∗ n) es la solución óptima. Mostramos que si x∗ i = 0, entonces para cualquier j > i, x∗ j = 0 también. Supongamos que esto no fuera cierto. Entonces ∂U ∂xj (x∗ ) = wj yj (x∗ j + yj)2 < wj yj y2 j = wj yj ≤ wi yi = ∂U ∂xi (x∗ ) . Por lo tanto, contradice la condición de optimalidad (1). Supongamos que k = max{i|x∗ i > 0}. Nuevamente, por la condición de optimalidad, existe un λ tal que wi yi (x∗ i +yi)2 = λ para 1 ≤ i ≤ k, y x∗ i = 0 para i > k. De manera equivalente, tenemos que: x∗ i = r wiyi λ − yi, para 1 ≤ i ≤ k, y x∗ i = 0 para i > k. Sustituyéndolos en la ecuación Pn i=1 x∗ i = X, podemos resolver para λ = ( Pk i=1 √ wiyi)2 (X+ Pk i=1 yi)2. Por lo tanto, x∗ i = √ wiyi Pk i=1 √ wiyi (X + kX i=1 yi) − yi. La pregunta restante es cómo determinar k. Es el valor más grande tal que x∗ k > 0. Por lo tanto, obtenemos el siguiente algoritmo para calcular la mejor respuesta de un usuario: 1. Ordena las máquinas según wi yi en orden decreciente. Calcular el valor más grande de k tal que √ wkyk Pk i=1 √ wiyi (X + kX i=1 yi) − yk ≥ 0.3. Establezca xj = 0 para j > k, y para 1 ≤ j ≤ k, establezca: xj = √ wjyj Pk i=1 √ wiyi (X + kX i=1 yi) − yj. La complejidad computacional de este algoritmo es O(n log n), dominada por la ordenación. En la práctica, la mejor respuesta se puede calcular raramente (por ejemplo, una vez al minuto), por lo que para un anfitrión moderno típicamente potente, este costo es insignificante. El mejor algoritmo de respuesta debe enviar y recibir O(n) mensajes porque cada usuario debe obtener las ofertas totales de cada anfitrión. En la práctica, esto es más significativo que el costo computacional. Ten en cuenta que los anfitriones solo revelan a los usuarios la suma de las ofertas que han recibido. Como resultado, los anfitriones no revelan las preferencias privadas e incluso las ofertas individuales de un usuario a otro. 4.2 Modelo de Paralelismo Finito Recuerde que en el modelo de paralelismo finito, cada usuario i solo realiza ofertas en un máximo de ki máquinas. Por supuesto, el modelo de paralelismo infinito es solo un caso especial del modelo de paralelismo finito en el que ki = n para todos los i. En el modelo de paralelismo finito, calcular el óptimo social ya no es trivial debido al paralelismo limitado. En su lugar, se puede calcular utilizando el algoritmo de coincidencia máxima. Considera el grafo bipartito completo ponderado G = U × V, donde U = {ui | 1 ≤ i ≤ m, y 1 ≤ j ≤ ki}, V = {1, 2, . . . , n} con peso de arista wij asignado a la arista (ui, vj). Un emparejamiento de G es un conjunto de aristas con nodos disjuntos, y el peso de un emparejamiento es la suma de los pesos de las aristas en el emparejamiento. Como resultado, se cumple el siguiente lema. Lema 1. El óptimo social es igual que el emparejamiento de peso máximo de G. Por lo tanto, podemos utilizar el algoritmo de emparejamiento de peso máximo para calcular el óptimo social. El emparejamiento de peso máximo es un problema clásico de redes y puede resolverse en tiempo polinómico [8, 9, 14]. Elegimos implementar el algoritmo húngaro [14, 19] debido a su simplicidad. Puede existir un algoritmo más eficiente para calcular el emparejamiento máximo aprovechando la estructura especial de G. Esta sigue siendo una pregunta abierta e interesante. Sin embargo, no conocemos un algoritmo eficiente para calcular la mejor respuesta bajo el modelo de paralelismo finito. En cambio, proporcionamos la siguiente heurística de búsqueda local. Supongamos que nuevamente tenemos n máquinas con pesos w1, . . . , wn y ofertas totales y1, . . . , yn. Que el presupuesto de los usuarios sea X y el límite de paralelismo sea k. Nuestro objetivo es calcular una asignación de X a hasta k máquinas para maximizar la utilidad de los usuarios. Para un subconjunto de máquinas A, denota por x(A) la mejor respuesta en A sin límite de paralelismo y por U(A) la utilidad obtenida por el algoritmo de mejor respuesta. La búsqueda local funciona de la siguiente manera: 1. Establezca el conjunto A como las k máquinas con el mayor wi/yi. 2. Calcula U(A) mediante el algoritmo de mejor respuesta en paralelo infinito (Sección 4.1) en A. 3. Para cada i ∈ A y cada j /∈ A, repetir 4. Sea B = A − {i} + {j}, calcula U(B). 5. Si (U(B) > U(A)), entonces A ← B, y ve a 2. 6. Salida x(A). Intuitivamente, mediante la heurística de búsqueda local, probamos si podemos intercambiar una máquina en A por una que no esté en A para mejorar la utilidad de la mejor respuesta. Si es así, intercambiamos las máquinas y repetimos el proceso. De lo contrario, hemos alcanzado un máximo local y devolvemos ese valor. Sospechamos que los máximos locales que este algoritmo encuentra también son el máximo global (con respecto a un usuario individual) y que este proceso se detiene después de un número reducido de iteraciones, pero no podemos establecerlo. Sin embargo, en nuestras simulaciones, este algoritmo converge rápidamente a una eficiencia alta (≥ .7). 131 4.3 Ajuste Local Avaro Los algoritmos de mejor respuesta anteriores solo funcionan para las funciones de utilidad lineales descritas anteriormente. En la práctica, las funciones de utilidad pueden tener una forma más complicada, o incluso peor, un usuario puede no tener una formulación de su función de utilidad. Suponemos que el usuario todavía tiene una forma de medir su utilidad, lo cual es la suposición mínima necesaria para cualquier mecanismo de asignación de recursos basado en el mercado. En estas situaciones, los usuarios pueden utilizar una estrategia más general, el método de ajuste local voraz, que funciona de la siguiente manera. Un usuario encuentra las dos máquinas que le proporcionan la utilidad marginal más alta y más baja. Luego traslada una cantidad fija de dinero de la máquina con baja utilidad marginal a la máquina con una utilidad mayor. Esta estrategia tiene como objetivo ajustar las ofertas para que los valores marginales en cada máquina por la que se está pujando sean iguales. Esta condición garantiza que la asignación sea óptima cuando la función de utilidad es cóncava. El compromiso por el ajuste local codicioso es que tarda más en estabilizarse que la mejor respuesta. 5. RESULTADOS DE LA SIMULACIÓN Mientras que los resultados analíticos nos proporcionan un análisis del peor caso para el modelo de paralelismo infinito, en esta sección empleamos simulaciones para estudiar las propiedades de los equilibrios de Nash en escenarios más realistas y para el modelo de paralelismo finito. Primero, determinamos si el proceso de subasta del usuario converge, y en caso afirmativo, cuál es la tasa de convergencia. Segundo, en casos de convergencia, analizamos el rendimiento en equilibrio, utilizando las métricas de eficiencia y equidad definidas anteriormente. Método iterativo. En nuestras simulaciones, cada usuario comienza con un vector de oferta inicial y luego actualiza iterativamente sus ofertas hasta que se cumpla un criterio de convergencia (descrito a continuación). La oferta inicial se establece proporcional a los pesos de los usuarios en las máquinas. Experimentamos con dos métodos de actualización, los métodos de mejor respuesta, como se describen en las Secciones 4.1 y 4.2, y el método de ajuste local codicioso, como se describe en la Sección 4.3. Criterios de convergencia. El tiempo de convergencia mide qué tan rápido el sistema alcanza el equilibrio. Es particularmente importante en el entorno altamente dinámico de los clústeres compartidos distribuidos, en el que las condiciones de los sistemas pueden cambiar antes de alcanzar el equilibrio. Por lo tanto, una tasa de convergencia alta puede ser más significativa que la eficiencia en el equilibrio. Hay varios criterios diferentes para la convergencia. El criterio más fuerte es exigir que solo haya un cambio insignificante en las ofertas de cada usuario. El problema con este criterio es que es demasiado estricto: los usuarios pueden ver un cambio insignificante en sus utilidades, pero según esta definición el sistema no ha convergido. El criterio de brecha de utilidad menos estricto requiere que solo haya un cambio insignificante en la utilidad de los usuarios. Dada la preocupación de los usuarios por la utilidad, esta es una definición más natural. De hecho, en la práctica, es probable que el usuario no esté dispuesto a reasignar sus ofertas de manera drástica por una pequeña ganancia de utilidad. Por lo tanto, utilizamos el criterio de brecha de utilidad para medir el tiempo de convergencia del método de actualización de mejor respuesta, es decir, consideramos que el sistema ha convergido si la brecha de utilidad de cada usuario es menor que (0.001 en nuestros experimentos). Sin embargo, este criterio no funciona para el método de ajuste local codicioso porque los usuarios de ese método experimentarán fluctuaciones constantes en la utilidad a medida que mueven el dinero. Para este método, utilizamos el criterio de la brecha de utilidad marginal. Comparamos los márgenes de utilidad más altos y más bajos en las máquinas. Si la diferencia es insignificante, entonces consideramos que el sistema ha convergido. Además de la convergencia al equilibrio, también consideramos el criterio desde la perspectiva de los proveedores del sistema, el criterio de estabilización del bienestar social. Bajo este criterio, un sistema se ha estabilizado si el cambio en el bienestar social es ≤ . La utilidad de los usuarios individuales puede no haber convergido. Este criterio es útil para evaluar qué tan rápido el sistema en su conjunto alcanza un nivel de eficiencia particular. Preferencias del usuario. Experimentamos con dos modelos de preferencias de usuario, distribución aleatoria y distribución correlacionada. Con una distribución aleatoria, los pesos de los usuarios en las diferentes máquinas están distribuidos de manera independiente e idéntica, de acuerdo con la distribución uniforme. En la práctica, las preferencias de los usuarios probablemente están correlacionadas en función de factores como la ubicación de los anfitriones y los tipos de aplicaciones que utilizan los usuarios. Para capturar estas correlaciones, asociamos a cada usuario y máquina un vector de perfil de recursos donde cada dimensión del vector representa un recurso (por ejemplo, CPU, memoria y ancho de banda de red). Para un usuario i con un perfil pi = (pi1, . . . , pi ), pik representa la necesidad del usuario para el recurso k. Para la máquina j con perfil qj = (qj1, . . . , qj ), qjk representa la fortaleza de la máquina j con respecto al recurso k. Entonces, wij es el producto punto de los perfiles de recursos de usuario y máquina, es decir, wij = pi · qj = Σ k=1 pikqjk. Al utilizar estos perfiles, comprimimos el espacio de parámetros e introducimos correlaciones entre usuarios y máquinas. En las siguientes simulaciones, fijamos el número de máquinas en 100 y variamos el número de usuarios de 5 a 250 (pero solo reportamos los resultados para el rango de 5 a 150 usuarios, ya que los resultados siguen siendo similares para un número mayor de usuarios). Las secciones 5.1 y 5.2 presentan los resultados de la simulación cuando aplicamos los modelos de paralelismo infinito y paralelismo finito, respectivamente. Si el sistema converge, informamos el número de iteraciones hasta la convergencia. Un tiempo de convergencia de 200 iteraciones indica no convergencia, en cuyo caso reportamos los valores de eficiencia y equidad en el punto en que terminamos la simulación. 5.1 Paralelismo infinito En esta sección, aplicamos el modelo de paralelismo infinito, que asume que los usuarios pueden utilizar un número ilimitado de máquinas. Presentamos la eficiencia y equidad en el equilibrio, en comparación con dos métodos de asignación de referencia: el óptimo social y el proporcional al peso, en el cual los usuarios distribuyen sus ofertas proporcionalmente a sus pesos en las máquinas (lo cual puede parecer un método de distribución razonable intuitivamente). Presentamos los resultados de los dos modelos de preferencia de usuario. Con preferencias uniformes, los pesos de los usuarios para las diferentes máquinas se distribuyen de forma independiente e idénticamente según la distribución uniforme, U ∼ (0, 1) (y se normalizan posteriormente). En preferencias correlacionadas, el vector de perfil de recursos de cada usuario y de cada máquina tiene tres dimensiones, y sus valores también se toman de la distribución uniforme, U ∼ (0, 1). Tiempo de convergencia. La Figura 2 muestra el tiempo de convergencia, eficiencia y equidad del modelo de paralelismo infinito bajo preferencias uniformes (izquierda) y correlacionadas (derecha). Los gráficos (a) y (b) muestran el tiempo de convergencia y estabilización de los métodos de mejor respuesta y ajuste local codicioso.  El algoritmo de mejor respuesta converge en un número reducido de iteraciones para cualquier cantidad de usuarios. Por el contrario, el algoritmo de ajuste local codicioso no converge ni siquiera en 500 iteraciones cuando el número de usuarios es menor a 60, pero sí converge para un número mayor de usuarios. Creemos que para pequeños números de usuarios, existen ciclos de dependencia entre los usuarios que impiden que el sistema converja, ya que las decisiones de un usuario afectan a otro usuario, cuyas decisiones afectan a otro usuario, etcétera. De todas formas, el método de ajuste local codicioso se estabiliza dentro de 100 iteraciones. La Figura 3 presenta la eficiencia a lo largo del tiempo para un sistema con 40 usuarios. Demuestra que aunque ambos métodos de ajuste alcanzan el mismo bienestar social, el algoritmo de mejor respuesta es más rápido. En el resto de este documento, nos referiremos al equilibrio (Nash), independientemente del método de ajuste utilizado para alcanzarlo. Eficiencia. La figura 2 (c) y (d) presentan la eficiencia en función del número de usuarios. Presentamos la eficiencia en equilibrio, y utilizamos los métodos de óptimo social y de asignación estática proporcional al peso para la comparación. El óptimo social proporciona una asignación eficiente por definición. Para ambos modelos de preferencia de usuario, la eficiencia en el equilibrio es aproximadamente 0.9, independientemente del número de usuarios, lo cual es solo ligeramente peor que el óptimo social. La eficiencia en el equilibrio es aproximadamente un 50% mejor que el método de asignación proporcional al peso para preferencias uniformes, y aproximadamente un 30% mejor para preferencias correlacionadas. Equidad. Las figuras 2(e) y (f) presentan la uniformidad de la utilidad en función del número de usuarios, y las figuras (g) y (h) presentan la ausencia de envidia. Si bien el óptimo social produce una eficiencia perfecta, tiene una baja equidad. El método proporcional al peso logra la mayor equidad entre los tres métodos de asignación, pero la equidad en el equilibrio es cercana. La uniformidad de la utilidad es ligeramente mejor en el equilibrio bajo preferencias uniformes (> 0.7) que bajo preferencias correlacionadas (> 0.6), ya que cuando las preferencias de los usuarios están más alineadas, la felicidad de los usuarios es más probable que se produzca a expensas de los demás. Aunque la uniformidad de la utilidad disminuye con el número de usuarios, sigue siendo razonable incluso para un gran número de usuarios y se estabiliza en algún momento. En el óptimo social, la uniformidad de la utilidad puede ser infinitamente pobre, ya que algunos usuarios pueden no recibir recursos en absoluto. Lo mismo es cierto con respecto a la ausencia de envidia. La diferencia entre las preferencias uniformes y correlacionadas se demuestra mejor en los resultados del óptimo social. Cuando el número de usuarios es pequeño, puede ser posible satisfacer a todos los usuarios en cierta medida si sus preferencias no están alineadas, pero si están alineadas, incluso con un número muy pequeño de usuarios, algunos usuarios no reciben recursos, por lo tanto, tanto la uniformidad de utilidad como la ausencia de envidia se reducen a cero. A medida que aumenta el número de usuarios, se vuelve casi imposible satisfacer a todos los usuarios independientemente de la existencia de correlación. Estos resultados demuestran el equilibrio entre los diferentes métodos de asignación. La eficiencia en el equilibrio es menor que el óptimo social, pero se desempeña mucho mejor en términos de equidad. La asignación de equilibrio es completamente libre de envidia bajo preferencias uniformes y casi libre de envidia bajo preferencias correlacionadas. 5.2 Paralelismo finito 0 50 100 150 200 0 10 20 30 40 50 60 70 80 90 Tiempo de convergencia (#iteraciones) Número de usuarios 5 máquinas/usuario 20 máquinas/usuario Figura 4: Tiempo de convergencia bajo el modelo de paralelismo finito. n = 100. 0.6 0.7 0.8 0.9 1 0 20 40 60 80 100 Eficiencia Número de iteración 5 máquinas/usuario (40 usuarios) 20 máquinas/usuario (10 usuarios) Figura 5: Nivel de eficiencia a lo largo del tiempo bajo el modelo de paralelismo finito con algoritmo de búsqueda local. n = 100. También consideramos el modelo de paralelismo finito y utilizamos el algoritmo de búsqueda local, como se describe en la Sección 4.2, para ajustar las ofertas de los usuarios. Nuevamente experimentamos con las distribuciones de preferencias uniforme y correlacionada y no encontramos diferencias significativas en los resultados, por lo que presentamos los resultados de la simulación solo para la distribución uniforme. En nuestros experimentos, el algoritmo de búsqueda local se detiene rápidamente, generalmente descubre un máximo local dentro de dos iteraciones. Como se mencionó anteriormente, no podemos demostrar que un máximo local sea el máximo global, pero nuestros experimentos indican que la heurística de búsqueda local conduce a una alta eficiencia. 134 Tiempo de convergencia. Que ∆ denote el límite de paralelismo que limita el número máximo de máquinas en las que cada usuario puede ofertar. Experimentamos con ∆ = 5 y ∆ = 20. En ambos casos, utilizamos 100 máquinas y variamos el número de usuarios. La Figura 4 muestra que el sistema no siempre converge, pero si lo hace, la convergencia ocurre rápidamente. La no convergencia ocurre cuando el número de usuarios está entre 20 y 40 para ∆ = 5, entre 5 y 10 para ∆ = 20. Creemos que la falta de convergencia se debe a una competencia moderada. La ausencia de competencia permite que el sistema se equilibre rápidamente, ya que los usuarios no tienen que cambiar sus ofertas en reacción a cambios en las ofertas de otros. La alta competencia también permite la convergencia porque la decisión de cada usuario tiene solo un pequeño impacto en los demás usuarios, por lo que el sistema es más estable y puede alcanzar gradualmente la convergencia. Sin embargo, cuando hay una competencia moderada, las decisiones de un usuario pueden causar cambios drásticos en las decisiones de otro y provocar grandes fluctuaciones en las ofertas. En ambos casos de no convergencia, la proporción de competidores por máquina, δ = m×∆/n para m usuarios y n máquinas, se encuentra en el intervalo [1, 2]. Aunque el sistema no converge en estos rangos malos, sin embargo logra y mantiene un alto nivel de eficiencia general después de unas pocas iteraciones (como se muestra en la Figura 5). Rendimiento. En la Figura 6, presentamos la eficiencia, uniformidad de utilidad y ausencia de envidia en el equilibrio de Nash para el modelo de paralelismo finito. Cuando el sistema no converge, medimos el rendimiento tomando el valor mínimo que observamos después de ejecutar muchas iteraciones. Cuando ∆ = 5, hay una disminución en el rendimiento, en particular en relación con las métricas de equidad, en el rango entre 20 y 40 usuarios (donde no converge). Para un mayor número de usuarios, el sistema converge y logra un nivel más bajo de uniformidad de utilidad, pero un alto grado de eficiencia y ausencia de envidia, similar al que se encuentra bajo el modelo de paralelismo infinito. Como se describe arriba, esto se debe a que la proporción de competencia cae dentro del rango de uno a uno. Cuando el límite de paralelismo es grande (∆ = 20), el rendimiento se acerca al modelo de paralelismo infinito, y no observamos esta disminución en el rendimiento. 6. TRABAJO RELACIONADO Hay dos grupos principales de trabajos relacionados en asignación de recursos: aquellos que incorporan un mecanismo económico y aquellos que no lo hacen. Un enfoque no económico es la programación (estudiada por Pinedo [20]). Ejemplos de este enfoque son la formación de colas en orden de llegada (FCFS), la formación de colas utilizando el consumo de recursos de las tareas (por ejemplo, [28]), y la programación utilizando optimización combinatoria [19]. Estos supuestos parten de que los valores y el consumo de recursos de las tareas se informan con precisión, lo cual no se aplica en presencia de usuarios estratégicos. Consideramos la programación y la asignación de recursos como dos funciones separadas. La asignación de recursos divide un recurso entre diferentes usuarios, mientras que la programación toma una asignación dada y ordena los trabajos de los usuarios. Ejemplos del enfoque económico son Spawn [26], el trabajo de Stoica, et al. [24], el asignador de recursos del Milenio [4], el trabajo de Wellman, et al. [27], Bellagio [2] y Tycoon [15]. Spawn y el trabajo de Wellman, et al. utilizan una abstracción de reserva similar a la forma en que se asignan los asientos de avión. Desafortunadamente, las reservas tienen una alta latencia para adquirir recursos, a diferencia del esquema de anticipación de precios que consideramos. El inconveniente de los esquemas de anticipación de precios es que los usuarios tienen incertidumbre sobre cuántos recursos recibirán exactamente. Bellagio utiliza el asignador centralizado SHARE. SHARE asigna recursos utilizando una subasta combinatoria centralizada que permite a los usuarios expresar preferencias con complementariedades. Resolver el problema de subasta combinatoria NP-completo proporciona una asignación óptimamente eficiente. El esquema de fijación de precios que consideramos no opera explícitamente en complementariedades, pudiendo perder eficiencia, pero también evita la complejidad y los costos adicionales de las subastas combinatorias. Se han realizado varios análisis [10, 11, 12, 13, 23] de variaciones de esquemas de asignación anticipada de precios en el contexto de la asignación de capacidad de red para flujos. Su metodología sigue el estudio de los juegos de congestión (potencial) [17, 22] al relacionar el equilibrio de Nash con la solución de un problema de optimización global (generalmente convexo). Pero esas técnicas ya no se aplican a nuestro juego porque modelamos a los usuarios como teniendo presupuestos fijos y preferencias privadas por las máquinas. Por ejemplo, a diferencia de esos juegos, puede haber múltiples equilibrios de Nash en nuestro juego. Milchtaich [16] estudió juegos de congestión con preferencias privadas, pero la técnica en [16] es específica para el juego de congestión. 7. CONCLUSIONES Este trabajo estudia el rendimiento de un mecanismo basado en el mercado para clústeres compartidos distribuidos utilizando métodos analíticos y de simulación. Mostramos que a pesar de los límites en el peor de los casos, el sistema puede alcanzar un alto nivel de rendimiento en el equilibrio de Nash en términos de métricas de eficiencia y equidad. Además, con algunas excepciones bajo el modelo de paralelismo finito, el sistema alcanza rápidamente el equilibrio utilizando el algoritmo de mejor respuesta y, cuando el número de usuarios no es demasiado pequeño, mediante el método de ajuste local codicioso. Si bien nuestro trabajo indica que el esquema de anticipación de precios puede funcionar bien para la asignación de recursos en clústeres compartidos, hay muchas direcciones interesantes para trabajos futuros. Una dirección es considerar funciones de utilidad más realistas. Por ejemplo, asumimos que no hay costo de paralelización y que no hay degradación del rendimiento cuando varios usuarios comparten la misma máquina. En la práctica, ambas suposiciones pueden no ser correctas. Por ejemplo, el usuario debe copiar código y datos a una máquina antes de ejecutar su aplicación allí, y hay un sobrecosto por la multiplexación de recursos en una sola máquina. Cuando el tamaño del trabajo es lo suficientemente grande y el grado de multiplexado es lo suficientemente bajo, probablemente podamos ignorar esos efectos, pero esos costos deberían tenerse en cuenta para un modelado más realista. Otra suposición es que los usuarios tienen trabajo infinito, por lo que cuantos más recursos puedan adquirir, mejor. En la práctica, los usuarios tienen un trabajo finito. Un enfoque para abordar esto es modelar la utilidad de los usuarios según el tiempo que tardan en completar una tarea en lugar de la cantidad de recursos que reciben. Otra dirección es estudiar las propiedades dinámicas del sistema cuando las necesidades de los usuarios cambian con el tiempo, de acuerdo con algún modelo estadístico. Además de las preguntas habituales sobre los juegos repetidos, también sería importante entender cómo los usuarios deben asignar sabiamente sus presupuestos con el tiempo para satisfacer las necesidades futuras. 135 0 0.2 0.4 0.6 0.8 1 0 20 40 60 80 100 120 140 160 Número de Usuarios (a) Límite: 5 máquinas/usuario Eficiencia Uniformidad de utilidad Libre de envidia 0 0.2 0.4 0.6 0.8 1 0 10 20 30 40 50 60 70 80 90 Número de Usuarios (b) Límite: 20 máquinas/usuario Eficiencia Uniformidad de utilidad Libre de envidia Figura 6: Eficiencia, uniformidad de utilidad y libertad de envidia bajo el modelo de paralelismo finito. n = 100. 8. AGRADECIMIENTOS Agradecemos a Bernardo Huberman, Lars Rasmusson, Eytan Adar y Moshe Babaioff por las fructíferas discusiones. También agradecemos a los revisores anónimos por sus comentarios útiles. 9. REFERENCIAS [1] http://planet-lab.org. [2] A. AuYoung, B. N. Chun, A. C. Snoeren y A. Vahdat. Asignación de recursos en infraestructuras informáticas distribuidas federadas. En Actas del 1er Taller sobre Soporte de Sistema Operativo y Arquitectura para la Infraestructura de TI a Demanda, 2004. [3] B. Chun, C. Ng, J. Albrecht, D. C. Parkes y A. Vahdat. Intercambios de Recursos Computacionales para la Asignación de Recursos Distribuidos. 2004. [4] B. N. Chun y D. E. Culler. Compartición de recursos proporcional basada en el mercado para clústeres. Informe técnico CSD-1092, Universidad de California en Berkeley, División de Ciencias de la Computación, enero de 2000. [5] M. Feldman, K. Lai y L. Zhang. Un mecanismo de asignación de recursos que anticipa precios para clústeres compartidos distribuidos. Informe técnico, arXiv, 2005. http://arxiv.org/abs/cs.DC/0502019. [6] D. Ferguson, Y. Yemimi y C. Nikolaou. Algoritmos microeconómicos para el equilibrio de carga en sistemas informáticos distribuidos. En la Conferencia Internacional sobre Sistemas Informáticos Distribuidos, páginas 491-499, 1988. [7] I. Foster y C. Kesselman. Globus: Un conjunto de herramientas de infraestructura de metacomputación. La Revista Internacional de Aplicaciones de Supercomputadoras y Computación de Alto Rendimiento, 11(2):115-128, Verano 1997. [8] M. L. Fredman y R. E. Tarjan. Montículos de Fibonacci y sus usos en algoritmos mejorados de optimización de redes. Revista de la ACM, 34(3):596-615, 1987. [9] H. N. Gabow. Estructuras de datos para emparejamiento ponderado y ancestros comunes más cercanos con enlaces. En Actas del 1er Simposio Anual ACM-SIAM sobre Algoritmos Discretos, páginas 434-443, 1990. [10] B. Hajek y S. Yang. Compradores estratégicos en una subasta por redes planas. Manuscrito, http://tesla.csl.uiuc.edu/~hajek/Papers/HajekYang.pdf, 2004. [11] R. Johari y J. N. Tsitsiklis. Pérdida de eficiencia en un juego de asignación de recursos en red. Matemáticas de la Investigación de Operaciones, 2004. [12] F. P. Kelly. Carga y Control de Tasa para Tráfico Elástico. Transacciones Europeas sobre Telecomunicaciones, 8:33-37, 1997. [13] F. P. Kelly y A. K. Maulloo. Control de tasa en redes de comunicación: precios sombra, equidad proporcional y estabilidad. Sociedad de Investigación Operativa, 49:237-252, 1998. [14] H. W. Kuhn. El Método Húngaro para el Problema de Asignación. Investigación naval. This is not a complete sentence in English. Could you please provide more context or clarify the sentence so I can translate it accurately to Spanish? Quart., 2:83-97, 1955. [15] K. Lai, L. Rasmusson, S. Sorkin, L. Zhang, y B. A. Huberman. Tycoon: una implementación de un sistema distribuido de asignación de recursos basado en el mercado. Manuscrito, http://www.hpl.hp.com/research/tycoon/papers_and_presentations, 2004. [16] I. Milchtaich. Juegos de congestión con funciones de pago específicas para cada jugador. Juegos y Comportamiento Económico, 13:111-124, 1996. [17] D. Monderer y L. S. Sharpley. Juegos potenciales. Juegos y Comportamiento Económico, 14:124-143, 1996. [18] C. Papadimitriou. Algoritmos, Juegos y el Internet. En Actas de la 33ª Conferencia Anual sobre Teoría de la Computación (STOC), 2001. [19] C. H. Papadimitriou y K. Steiglitz. Optimización combinatoria. Dover Publications, Inc., 1982. [20] M. Pinedo. 

Dover Publications, Inc., 1982. [20] M. Pinedo. Programación. Prentice Hall, 2002. [21] O. Regev y N. Nisan. El Mercado de Palomitas: Mercados en línea para Recursos Computacionales. En Actas de la 1ra Conferencia Internacional sobre Economías de Información y Computación, páginas 148-157, 1998. [22] R. W. Rosenthal. Una clase de juegos que poseen equilibrios de Nash de estrategia pura. Revista Internacional de Teoría de Juegos, 2:65-67, 1973. [23] S. Sanghavi y B. Hajek. Asignación óptima de un bien divisible a compradores estratégicos. Manuscrito, http://tesla.csl.uiuc.edu/~hajek/Papers/OptDivisible.pdf, 2004. [24] I. Stoica, H. Abdel-Wahab y A. Pothen. Un planificador microeconómico para computadoras en paralelo. En Actas del Taller sobre Estrategias de Planificación de Trabajos para Procesamiento Paralelo, páginas 122-135, abril de 1995. [25] H. R. Varian. Equidad, Envidia y Eficiencia. Revista de Teoría Económica, 9:63-91, 1974. [26] C. A. Waldspurger, T. Hogg, B. A. Huberman, J. O. Kephart y S. Stornetta. Spawn: Una Economía Computacional Distribuida. IEEE Transactions on Software Engineering, 18(2):103-117, febrero de 1992. [27] M. P. Wellman, W. E. Walsh, P. R. Wurman y J. K. MacKie-Mason. Protocolos de subasta para programación descentralizada. Juegos y Comportamiento Económico, 35:271-303, 2001. [28] A. Wierman y M. Harchol-Balter. Clasificación de políticas de programación con respecto a la injusticia en un M/GI/1. En Actas de la Conferencia ACM SIGMETRICS 2003 sobre Medición y Modelado de Sistemas Informáticos, 2003. [29] L. Zhang. Sobre la eficiencia y equidad de un juego de asignación de recursos con presupuesto fijo. Manuscrito, 2004. 136