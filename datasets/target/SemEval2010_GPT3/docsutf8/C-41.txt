Evaluando la Gestión de Recursos Adaptativa para Sistemas Empotrados Distribuidos en Tiempo Real de Nishanth Shankaran, Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale, Dept. de EECS, Universidad de Vanderbilt, Nashville RESUMEN Un problema desafiante enfrentado por investigadores y desarrolladores de sistemas distribuidos en tiempo real y embebidos (DRE) es idear e implementar estrategias efectivas de gestión adaptativa de recursos que puedan cumplir con los requisitos de calidad de servicio (QoS) de extremo a extremo en condiciones operativas variables. Este artículo presenta dos contribuciones a la investigación en gestión de recursos adaptativa para sistemas DRE. Primero, describimos la estructura y funcionalidad del Middleware de Gestión de Recursos Adaptativos Híbridos (HyARM), que proporciona gestión de recursos adaptativa utilizando técnicas de control híbridas para adaptarse a las fluctuaciones de carga de trabajo y disponibilidad de recursos. Segundo, evaluamos el comportamiento adaptativo de HyARM a través de experimentos en un sistema multimedia DRE que distribuye video en tiempo real. Nuestros resultados indican que HyARM produce un rendimiento del sistema predecible, estable y alto, incluso ante cargas de trabajo y disponibilidad de recursos fluctuantes. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones Distribuidas; D.4.7 [Organización y Diseño]: Sistemas en Tiempo Real y Sistemas Embebidos 1. INTRODUCCIÓN Lograr la calidad de servicio (QoS) en tiempo real de extremo a extremo es particularmente importante para sistemas distribuidos en tiempo real y embebidos (DRE) abiertos que enfrentan limitaciones de recursos, como potencia de cómputo limitada y ancho de banda de red. La sobreutilización de estos recursos del sistema puede generar un comportamiento impredecible e inestable, mientras que la subutilización puede resultar en un costo excesivo del sistema. Un enfoque prometedor para cumplir de manera efectiva con estos requisitos de calidad de servicio de extremo a extremo, por lo tanto, es desarrollar y aplicar middleware adaptativo [10, 15], que es un software cuyas propiedades funcionales y relacionadas con la calidad de servicio pueden ser modificadas estática o dinámicamente. Las modificaciones estáticas se realizan para reducir la huella, aprovechar las capacidades existentes en plataformas específicas, habilitar la selección funcional y/o minimizar las dependencias de infraestructura de hardware/software. Los objetivos de las modificaciones dinámicas incluyen optimizar las respuestas del sistema a entornos o requisitos cambiantes, como la modificación de interconexiones de componentes, niveles de potencia, disponibilidad de ancho de banda de CPU y red, latencia/jitter y carga de trabajo. En los sistemas DRE abiertos, el middleware adaptativo debe realizar modificaciones de manera confiable, es decir, cumpliendo con los estrictos requisitos de calidad de servicio de extremo a extremo, lo que requiere la especificación y aplicación de límites superiores e inferiores en la utilización de recursos del sistema para garantizar un uso efectivo de los recursos del sistema. Para cumplir con estos requisitos, hemos desarrollado el Middleware de Gestión de Recursos Híbrido Adaptativo (HyARM), que es un middleware de gestión de recursos distribuido de código abierto. HyARM se basa en técnicas híbridas de control teórico, las cuales proporcionan un marco teórico para diseñar el control de sistemas complejos con dinámicas tanto continuas como discretas. En nuestro estudio de caso, que implica un sistema distribuido de distribución de video en tiempo real, la tarea de gestión de recursos adaptativa consiste en controlar la utilización de los diferentes recursos, cuyas utilizaciones están descritas por variables continuas. Logramos esto adaptando la resolución del video transmitido, que se modela como una variable continua, y cambiando la velocidad de cuadros y la compresión, que se modelan mediante acciones discretas. Hemos implementado HyARM sobre el ORB ACE (TAO) [13], que es una implementación de la especificación CORBA en tiempo real [12]. Nuestros resultados muestran que (1) HyARM garantiza una utilización efectiva de los recursos del sistema y (2) se cumplen los requisitos de calidad de servicio de extremo a extremo de las aplicaciones de mayor prioridad, incluso ante fluctuaciones en la carga de trabajo. El resto del documento está organizado de la siguiente manera: la Sección 2 describe la arquitectura, funcionalidad y modelo de utilización de recursos de nuestro estudio de caso del sistema multimedia DRE; la Sección 3 explica la estructura y funcionalidad de HyARM; la Sección 4 evalúa el comportamiento adaptativo de HyARM a través de experimentos en nuestro estudio de caso del sistema multimedia; la Sección 5 compara nuestra investigación sobre HyARM con trabajos relacionados; y la Sección 6 presenta observaciones finales. El código y ejemplos de HyARM están disponibles en www.dre.vanderbilt.edu/∼nshankar/HyARM/. Artículo 7 2. ESTUDIO DE CASO: SISTEMA MULTIMEDIA DRE Esta sección describe la arquitectura y los requisitos de QoS de nuestro sistema multimedia DRE. 2.1 Arquitectura del Sistema Multimedia Enlace Inalámbrico Enlace Inalámbrico Enlace Inalámbrico ` ` ` Enlace Físico Enlace Físico Enlace Físico Estación Base Extremo Receptor Extremo Receptor Extremo Receptor` Enlace Físico Extremo Receptor Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Cámara UAV Codificador de Video Cámara Codificador de Video Cámara Codificador de Video Figura 1: Arquitectura del Sistema Multimedia DRE La arquitectura de nuestro sistema multimedia DRE se muestra en la Figura 1 y consta de las siguientes entidades: (1) Fuente de datos (captura de video por UAV), donde el video es capturado (relacionado con el tema de interés) por la(s) cámara(s) en cada UAV, seguido por la codificación del video crudo utilizando un esquema de codificación específico y transmitiendo el video a la siguiente etapa en la cadena de procesamiento. (2) Distribuidor de datos (estación base), donde el video es procesado para eliminar ruido, seguido por la retransmisión del video procesado a la siguiente etapa en la cadena de procesamiento. (3) Destinos (centro de comando y control), donde el video recibido es nuevamente procesado para eliminar ruido, luego decodificado y finalmente renderizado al usuario final a través de pantallas gráficas. Se han logrado mejoras significativas en las técnicas de codificación/decodificación y compresión (des) de video como resultado de los avances recientes en las técnicas de codificación y compresión de video [14]. Los esquemas comunes de compresión de video son MPEG1, MPEG-2, Real Video y MPEG-4. Cada esquema de compresión se caracteriza por sus requisitos de recursos, por ejemplo, la potencia computacional para (des)comprimir la señal de video y el ancho de banda de red necesario para transmitir la señal de video comprimida. Las propiedades del video comprimido, como la resolución y la velocidad de fotogramas, determinan tanto la calidad como los requisitos de recursos del video. Nuestro estudio de caso del sistema multimedia tiene los siguientes requisitos de calidad de servicio (QoS) en tiempo real de extremo a extremo: (1) latencia, (2) retardo entre cuadros (también conocido como jitter), (3) frecuencia de cuadros y (4) resolución de imagen. Estos requisitos de calidad de servicio (QoS) pueden clasificarse como duros o blandos. Los requisitos de QoS estrictos deben ser cumplidos por el sistema subyacente en todo momento, mientras que los requisitos de QoS flexibles pueden ser ocasionalmente incumplidos. Para nuestro estudio de caso, tratamos los requisitos de QoS como la latencia y la variabilidad de retardo como requisitos de QoS más estrictos y nos esforzamos por cumplir con estos requisitos en todo momento. Por el contrario, tratamos los requisitos de QoS como la tasa de cuadros de video y la resolución de imagen como requisitos de QoS más flexibles y modificamos estas propiedades de video de manera adaptativa para manejar los cambios dinámicos en la disponibilidad de recursos de manera efectiva. Aunque a menudo se presentan como dos conjuntos de requisitos discretos, en la práctica suelen ser dos extremos de un continuo que va desde más suave a más duro en lugar de dos puntos disjuntos. La potencia informática requerida por las tareas de captura y codificación de video depende de factores dinámicos, como la velocidad del UAV, la velocidad del sujeto (si el sujeto es móvil) y la distancia entre el UAV y el sujeto. La cantidad de ancho de banda de la red inalámbrica disponible para transmitir video capturado por UAVs a estaciones base también depende de la conectividad inalámbrica entre los UAVs y la estación base, que a su vez depende de factores dinámicos como la velocidad de los UAVs y la distancia relativa entre los UAVs y las estaciones base. El ancho de banda del enlace entre la estación base y el receptor final está limitado, pero es más estable que el ancho de banda de la red inalámbrica. Los requisitos de recursos y la disponibilidad de recursos están sujetos a cambios dinámicos. Dos clases de aplicaciones - habilitadas para QoS y de mejor esfuerzo - utilizan la infraestructura del sistema multimedia descrita anteriormente para transmitir video a sus respectivos receptores. Las aplicaciones de clase habilitada para QoS tienen mayor prioridad sobre las aplicaciones de clase de mejor esfuerzo. En nuestro estudio, las aplicaciones de respuesta de emergencia pertenecen a la clase habilitada para la calidad de servicio (QoS), y las aplicaciones de vigilancia pertenecen a la clase de mejor esfuerzo. Por ejemplo, dado que un flujo de datos de una aplicación de respuesta de emergencia es de mayor importancia que un flujo de video de una aplicación de vigilancia, recibe más recursos de extremo a extremo. Dado que la disponibilidad de recursos afecta significativamente la calidad de servicio, utilizamos la utilización actual de recursos como indicador principal del rendimiento del sistema. Nos referimos al nivel actual de utilización de recursos del sistema como la condición del sistema. Basándonos en esta definición, podemos clasificar las condiciones del sistema como estando subutilizadas, sobreutilizadas o utilizadas de manera efectiva. La subutilización de los recursos del sistema ocurre cuando la utilización actual de los recursos es menor que el límite inferior deseado de utilización de recursos. En este sistema, los recursos residuales del sistema (es decir, ancho de banda de red y potencia computacional) están disponibles en grandes cantidades después de cumplir con los requisitos de calidad de servicio de extremo a extremo de las aplicaciones. Estos recursos residuales se pueden utilizar para aumentar la calidad de servicio de las aplicaciones. Por ejemplo, la CPU residual y el ancho de banda de red pueden ser utilizados para entregar videos de mejor calidad (por ejemplo, con mayor resolución y mayor velocidad de cuadros) a los receptores finales. La sobreutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es mayor que el límite superior deseado de utilización de recursos. Esta condición puede surgir por la pérdida de recursos - ancho de banda de red y/o potencia de cómputo en la estación base, receptor final o en el UAV - o puede ser debido a un aumento en las demandas de recursos por parte de las aplicaciones. La sobreutilización es generalmente indeseable ya que la calidad del video recibido (como la resolución y la velocidad de cuadros) y las propiedades de puntualidad (como la latencia y la fluctuación) se degradan y pueden resultar en un sistema inestable (y por lo tanto ineficaz). La utilización efectiva de recursos es la condición deseada del sistema, ya que garantiza que se cumplan los requisitos de calidad de servicio de extremo a extremo del sistema multimedia basado en UAV y que la utilización de los recursos del sistema, es decir, el ancho de banda de la red y la potencia computacional, se encuentren dentro de sus límites de utilización deseados. El artículo 7, sección 3 describe las técnicas que aplicamos para lograr una utilización efectiva, incluso ante la disponibilidad y/o demanda fluctuante de recursos. DESCRIPCIÓN DE HYARM Esta sección describe la arquitectura del Middleware de Gestión de Recursos Adaptativos Híbrido (HyARM). HyARM garantiza un rendimiento eficiente y predecible del sistema al proporcionar gestión adaptativa de recursos, que incluye la monitorización de los recursos del sistema y la imposición de límites en la utilización de recursos de las aplicaciones. 3.1 Estructura y Funcionalidad de HyARM Leyenda de Utilización de Recursos Asignación de Recursos Parámetros de Aplicación Figura 2: Arquitectura de HyARM HyARM está compuesto por tres tipos de entidades mostradas en la Figura 2 y descritas a continuación: Los monitores de recursos observan la utilización general de recursos para cada tipo de recurso y la utilización de recursos por aplicación. En nuestro sistema multimedia, hay monitores de recursos para la utilización de la CPU y el ancho de banda de la red. Los monitores de la CPU observan la utilización de recursos de la CPU de los UAV, la estación base y los receptores finales. Los monitores de ancho de banda de red observan la utilización de recursos de red de (1) el enlace de red inalámbrica entre los UAV y la estación base y (2) el enlace de red cableada entre la estación base y los receptores finales. El controlador central mantiene la utilización de recursos del sistema por debajo de un límite deseado mediante (1) el procesamiento de actualizaciones periódicas que recibe de los monitores de recursos y (2) modificando la ejecución de las aplicaciones en consecuencia, por ejemplo, utilizando diferentes algoritmos de ejecución u operando la aplicación con mayor/menor calidad de servicio (QoS). Este proceso de adaptación garantiza que los recursos del sistema se utilicen de manera eficiente y se cumplan los requisitos de calidad de servicio de la aplicación de extremo a extremo. En nuestro sistema multimedia, el controlador HyARM determina el valor de parámetros de la aplicación como (1) esquemas de compresión de video, como Real Video y MPEG-4, y/o (2) velocidad de cuadros, y (3) resolución de imagen. Desde la perspectiva de las técnicas híbridas de control teórico [8], los diferentes esquemas de compresión de video y la velocidad de cuadros forman las variables discretas de la ejecución de la aplicación, mientras que la resolución de imagen forma las variables continuas. Los adaptadores de aplicación modifican la ejecución de la aplicación de acuerdo con los parámetros recomendados por el controlador y garantizan que el funcionamiento de la aplicación esté de acuerdo con los parámetros recomendados. En la implementación actual de HyARM, el adaptador de la aplicación modifica los parámetros de entrada a la aplicación que afectan la calidad de servicio (QoS) de la aplicación y la utilización de recursos, como el esquema de compresión, la velocidad de fotogramas y la resolución de la imagen. En nuestras futuras implementaciones, planeamos utilizar mecanismos de reserva de recursos como Differentiated Service [7, 3] y Class-based Kernel Resource Management [4] para aprovisionar/reservar recursos de red y CPU. En nuestro sistema multimedia, el adaptador de la aplicación se asegura de que el video se codifique a la velocidad de cuadros y resolución recomendadas utilizando el esquema de compresión especificado. 3.2 Aplicando HyARM al Estudio de Caso del Sistema Multimedia. HyARM se construye sobre TAO [13], una implementación de código abierto ampliamente utilizada de CORBA en tiempo real [12]. HyARM se puede aplicar para garantizar una gestión eficiente, predecible y adaptable de recursos en cualquier sistema DRE donde la disponibilidad y los requisitos de recursos están sujetos a cambios dinámicos. La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con HyARM, TAO y el Servicio de Streaming de Audio y Video de TAOs. El servicio de transmisión de audio/vídeo de TAO es una implementación de la especificación del Servicio de Transmisión de Audio/Vídeo de CORBA. El servicio de transmisión de audio y video de TAOs es un servicio de distribución de video habilitado para QoS que puede transferir video en tiempo real a uno o más receptores. Utilizamos el Servicio de Transmisión de Audio y Video para enviar el video desde los VANTs a los receptores finales a través de la estación base. Tres entidades del sistema multimedia DRE con HyARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones, están construidos como servidores CORBA, por lo que pueden distribuirse en todo el sistema DRE. Los monitores de recursos son objetos CORBA remotos que actualizan periódicamente al controlador central con la utilización actual de recursos. Los adaptadores de aplicaciones se ubican junto a las aplicaciones ya que ambas interactúan estrechamente. Como se muestra en la Figura 3, los UAV comprimen los datos utilizando varios esquemas de compresión, como MPEG1, MPEG4 y Real Video, y utilizan el servicio de transmisión de audio/vídeo de TAOs para enviar el video a los receptores finales. Los monitores de recursos de HyARMs observan continuamente la utilización de recursos del sistema y notifican al controlador central con la utilización actual. La interacción entre el controlador y los monitores de recursos utiliza el patrón Observer. Cuando el controlador recibe actualizaciones de utilización de recursos de los monitores, calcula las modificaciones necesarias a los parámetros de la(s) aplicación(es) y notifica al adaptador de la aplicación mediante una llamada de operación remota. Los adaptadores de aplicación, que están ubicados junto a la aplicación, modifican los parámetros de entrada de la aplicación, en nuestro caso el codificador de video, para modificar la utilización de recursos de la aplicación y la calidad de servicio. La estación base no está incluida en la figura ya que solo retransmite el video recibido de los UAV a los receptores finales. Artículo 7 4. RESULTADOS DE RENDIMIENTO Y ANÁLISIS Esta sección describe primero el banco de pruebas que proporciona la infraestructura para nuestro sistema multimedia DRE, que se utilizó para evaluar el rendimiento de HyARM. Luego describimos nuestros experimentos y analizamos los resultados obtenidos para evaluar empíricamente cómo se comporta HyARM durante la subutilización y sobreutilización de los recursos del sistema. 4.1 Descripción general del banco de pruebas de hardware y software Nuestros experimentos se realizaron en el banco de pruebas Emulab en la Universidad de Utah. La configuración de hardware consiste en dos nodos actuando como UAVs, uno actuando como estación base y otro como receptor final. El video de los dos UAV fue transmitido a una estación base a través de una LAN configurada con las siguientes propiedades: una relación promedio de pérdida de paquetes de 0.3 y un ancho de banda de 1 Mbps. El ancho de banda de la red se eligió para ser de 1 Mbps ya que a cada UAV en el sistema multimedia DRE se le asignan 250 Kbps. Estos parámetros fueron elegidos para emular una red inalámbrica poco confiable con ancho de banda limitado entre los UAVs y la estación base. Desde la estación base, el video fue retransmitido al receptor final a través de un enlace por cable confiable de 10 Mbps de ancho de banda sin pérdida de paquetes. La configuración de hardware de todos los nodos fue elegida de la siguiente manera: procesador Intel Pentium III de 600 MHz, 256 MB de memoria física, 4 puertos Ethernet Intel EtherExpress Pro de 10/100 Mbps y disco duro de 13 GB. Se utilizó una versión en tiempo real de Linux - TimeSys Linux/NET 3.1.214 basada en RedHat Linux 9 como sistema operativo para todos los nodos. Los siguientes paquetes de software también fueron utilizados para nuestros experimentos: (1) Ffmpeg 0.4.9-pre1, que es una biblioteca de código abierto (http://www.ffmpeg.sourceforge.net/download.php) que comprime video en formatos MPEG-2, MPEG-4, Real Video, y muchos otros formatos de video. (2) Iftop 0.16, que es una biblioteca de código abierto (http://www.ex-parrot.com/∼pdw/iftop/) que utilizamos para monitorear la actividad de red y la utilización del ancho de banda. (3) ACE 5.4.3 + TAO 1.4.3, que es una implementación de código abierto (http://www.dre.vanderbilt.edu/TAO) de la especificación CORBA en tiempo real [12] sobre la cual se construye HyARM. TAO proporciona el Servicio de Transmisión de Audio/Video (A/V) CORBA que utilizamos para transmitir el video desde los UAVs a los receptores finales a través de la estación base. Configuración del experimento Nuestro experimento consistió en dos UAVs (emulados) que enviaron video simultáneamente a la estación base utilizando la configuración experimental descrita en la Sección 4.1. En la estación base, el video fue retransmitido a los receptores finales (sin ninguna modificación), donde fue almacenado en un archivo. Cada UAV alojaba dos aplicaciones, una aplicación habilitada para QoS (respuesta de emergencia) y una aplicación de mejor esfuerzo (vigilancia). Dentro de cada UAV, el poder computacional se comparte entre las aplicaciones, mientras que el ancho de banda de la red se comparte entre todas las aplicaciones. Para evaluar la calidad de servicio proporcionada por HyARM, monitoreamos la utilización de la CPU en los dos UAV y la utilización del ancho de banda de la red entre el UAV y la estación base. La utilización de recursos de la CPU no se monitoreó en la estación base y en el receptor final, ya que no realizaron operaciones computacionalmente intensivas. La utilización de recursos del enlace físico de 10 Mbps entre la estación base y el receptor final no afecta la calidad de servicio de las aplicaciones y no es monitoreada por HyARM, ya que es casi 10 veces el ancho de banda de 1 MB de la LAN entre los UAV y la estación base. El experimento también monitorea propiedades del video que afectan la calidad de servicio de las aplicaciones, como la latencia, la variabilidad de retardo, la tasa de cuadros y la resolución. El punto de ajuste en la utilización de recursos para cada recurso se especificó en 0.69, que es el límite superior típicamente recomendado por técnicas de programación, como el algoritmo monótono de tasa [9]. Dado que los estudios [6] han demostrado que los ojos humanos pueden percibir retrasos de más de 200 ms, utilizamos esto como límite superior de la variabilidad en el video recibido. Los requisitos de QoS para cada clase de aplicación se especifican durante la inicialización del sistema y se muestran en la Tabla 1. 4.3 Resultados empíricos y análisis Esta sección presenta los resultados obtenidos al ejecutar el experimento descrito en la Sección 4.2 en nuestro banco de pruebas del sistema multimedia DRE. Utilizamos la utilización de recursos del sistema como métrica para evaluar las capacidades de gestión de recursos adaptativos de HyARM bajo cargas de trabajo de entrada variables. También utilizamos la calidad de servicio de la aplicación como métrica para evaluar las capacidades de HyARMs para satisfacer los requisitos de calidad de servicio de extremo a extremo de las diferentes clases de aplicaciones en el sistema multimedia DRE. Analizamos estos resultados para explicar las diferencias significativas en el rendimiento del sistema y la calidad de servicio de la aplicación. La comparación del rendimiento del sistema se descompone en la comparación de la utilización de recursos y la calidad de servicio de la aplicación. Para la utilización de recursos del sistema, comparamos (1) la utilización del ancho de banda de la red de área local y (2) la utilización de la CPU en los dos nodos UAV. Para la aplicación de QoS, comparamos los valores medios de los parámetros de video, incluyendo (1) resolución de imagen, (2) velocidad de cuadros, (3) latencia y (4) jitter. Comparación de la utilización de recursos. La sobreutilización de recursos del sistema en sistemas DRE puede generar un sistema inestable. Por el contrario, la subutilización de los recursos del sistema aumenta el costo del sistema. La Figura 4 y la Figura 5 comparan la utilización de recursos del sistema con y sin HyARM. La Figura 4 muestra que HyARM mantiene la utilización del sistema cerca del punto de ajuste de utilización deseado durante la fluctuación en la carga de trabajo de entrada al transmitir video de mayor (o menor) calidad de servicio para la clase de aplicaciones con calidad de servicio habilitada (o de mejor esfuerzo) durante la sobre (o sub) utilización de los recursos del sistema. La Figura 5 muestra que sin HyARM, la utilización de la red alcanzó hasta 0.9 durante el aumento de las condiciones de carga de trabajo, lo cual es mayor que el punto de ajuste de utilización de 0.7 en 0.2. Como resultado de la sobreutilización de recursos, la calidad de servicio (QoS) del video recibido, como la latencia promedio y el jitter, se vio afectada significativamente. Sin HyARM, los recursos del sistema estaban subutilizados o sobreutilizados, ambos de los cuales son indeseables. En contraste, con HyARM, la utilización de recursos del sistema siempre está cerca del punto de ajuste deseado, incluso durante las fluctuaciones en la carga de trabajo de la aplicación. Durante fluctuaciones repentinas en la carga de trabajo de la aplicación, las condiciones del sistema pueden ser temporalmente indeseables, pero se restauran a la condición deseada dentro de varios períodos de muestreo. La sobreutilización temporal de recursos es permisible en nuestro sistema multimedia, ya que la calidad del video puede degradarse por un corto período de tiempo, aunque la calidad del servicio de la aplicación se verá significativamente degradada si se transmite un video de baja calidad durante un período de tiempo más largo. Comparación de la calidad de servicio de la aplicación. Las Figuras 6, 7 y la Tabla 2 comparan la latencia, la variabilidad, la resolución y la velocidad de cuadro del video recibido, respectivamente. La Tabla 2 muestra que HyARM aumenta la resolución y la velocidad de cuadro de video de las aplicaciones habilitadas para QoS, pero disminuye la resolución y la velocidad de cuadro de las aplicaciones de mejor esfuerzo. Durante la sobreutilización de los recursos del sistema, la resolución y la velocidad de cuadros de las aplicaciones de menor prioridad se reducen para adaptarse a las fluctuaciones en la carga de trabajo de la aplicación y mantener la utilización de los recursos en el punto establecido especificado. Se puede observar en la Figura 6 y la Figura 7 que HyARM reduce significativamente la latencia y la variabilidad del video recibido. Estas cifras muestran que la calidad de servicio de las aplicaciones habilitadas para QoS se mejora considerablemente con HyARM. Aunque los parámetros de la aplicación, como la velocidad de cuadros y las resoluciones, que afectan los requisitos de QoS suave de las aplicaciones de mejor esfuerzo pueden verse comprometidos, se cumplen los requisitos de QoS estrictos, como la latencia y la variabilidad, de todas las aplicaciones. HyARM responde a las fluctuaciones en la disponibilidad de recursos y/o la demanda mediante el monitoreo constante de la utilización de recursos. Como se muestra en la Figura 4, cuando la utilización de recursos aumenta por encima del punto de ajuste deseado, HyARM reduce la utilización disminuyendo la calidad de servicio de las aplicaciones de mejor esfuerzo. Esta adaptación garantiza que haya suficientes recursos disponibles para que las aplicaciones habilitadas para QoS cumplan con sus necesidades de QoS. Las figuras 6 y 7 muestran que los valores de latencia y jitter del video recibido del sistema con HyARM son casi la mitad de los valores correspondientes del sistema sin HyARM. Con HyARM, los valores de estos parámetros están muy por debajo de los límites especificados, mientras que sin HyARM, estos valores están significativamente por encima de los límites especificados debido a la sobreutilización del ancho de banda de la red, lo que conduce a la congestión de la red y resulta en la pérdida de paquetes. HyARM evita esto reduciendo parámetros de video como la resolución, la velocidad de cuadros y/o modificando el esquema de compresión utilizado para comprimir el video. Nuestras conclusiones al analizar los resultados descritos anteriormente son que la aplicación de middleware adaptativo a través de control híbrido en sistemas DRE ayuda a (1) mejorar la calidad de servicio de la aplicación, (2) aumentar la utilización de recursos del sistema y (3) proporcionar una mejor previsibilidad (menor latencia y retraso entre fotogramas) a las aplicaciones habilitadas para calidad de servicio. Estas mejoras se logran en gran medida gracias al monitoreo de la utilización de recursos del sistema, la gestión eficiente de la carga de trabajo del sistema y la provisión adaptativa de recursos mediante los monitores de recursos de red/CPU de HyARMs, el adaptador de aplicaciones y el controlador central, respectivamente. TRABAJO RELACIONADO Recientemente se han aplicado varios enfoques teóricos de control a los sistemas DRE. Estas técnicas ayudan a superar las limitaciones de los enfoques de programación tradicionales que manejan mal los cambios dinámicos en la disponibilidad de recursos y resultan en un sistema programado rígidamente que se adapta mal a los cambios. Se presenta una encuesta de estas técnicas en [1]. Un enfoque de este tipo es la programación de control de retroalimentación (FCS) [2, 11]. Los algoritmos de FCS ajustan dinámicamente la asignación de recursos mediante bucles de control de retroalimentación de software. Los algoritmos de FCS se modelan y diseñan utilizando metodologías rigurosas de teoría de control. Estos algoritmos ofrecen garantías de rendimiento robusto y analítico a pesar de las incertidumbres en la disponibilidad de recursos y/o demanda. Aunque los algoritmos de FCS existentes han mostrado promesa, a menudo estos algoritmos asumen que el sistema tiene variable(s) de control continuas que pueden ajustarse continuamente. Si bien esta suposición es válida para ciertas clases de sistemas, existen muchas clases de sistemas DRE, como la aviónica y los entornos informáticos de barcos completos, que solo admiten un conjunto finito a priori de configuraciones discretas. Por lo tanto, las variables de control en tales sistemas son intrínsecamente discretas. HyARM maneja tanto variables de control continuas, como la resolución de la imagen, como variables de control discretas, como un conjunto discreto de velocidades de cuadro. HyARM puede aplicarse a sistemas que admiten un conjunto continuo y/o discreto de variables de control. El sistema multimedia DRE descrito en la Sección 2 es un ejemplo de sistema DRE que ofrece tanto variables de control continuas (resolución de imagen) como un conjunto discreto (velocidad de cuadros). Estas variables son modificadas por HyARM para lograr una utilización eficiente de recursos y una mejora en la calidad de servicio de la aplicación. CONCLUSIONES Artículo 7 Figura 6: Comparación de la latencia del video Figura 7: Comparación de la fluctuación del video Fuente Tamaño de imagen / Velocidad de cuadro Con HyARM Sin HyARM UAV1 Aplicación habilitada para QoS 1122 X 1496 / 25 960 X 720 / 20 UAV1 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 UAV2 Aplicación habilitada para QoS 1126 X 1496 / 25 960 X 720 / 20 UAV2 Aplicación de mejor esfuerzo 288 X 384 / 15 640 X 480 / 20 Tabla 2: Comparación de la calidad del video Muchos sistemas distribuidos en tiempo real y embebidos (DRE) demandan la aplicación correcta de la calidad de servicio (QoS) de extremo a extremo desde sus plataformas subyacentes para operar correctamente. Estos sistemas cada vez se ejecutan en entornos abiertos, donde la disponibilidad de recursos está sujeta a cambios dinámicos. Para cumplir con la calidad de servicio de extremo a extremo en entornos dinámicos, los sistemas DRE pueden beneficiarse de un middleware adaptativo que monitorea los recursos del sistema, realiza una gestión eficiente de la carga de trabajo de la aplicación y permite una provisión eficiente de recursos para la ejecución de aplicaciones. Este artículo describe HyARM, un middleware adaptativo que proporciona una gestión efectiva de recursos a los sistemas DRE. HyARM emplea técnicas de control híbrido para proporcionar las capacidades de middleware adaptativo, como el monitoreo de recursos y la adaptación de aplicaciones, que son clave para ofrecer las capacidades de gestión de recursos dinámicos para sistemas DRE abiertos. Empleamos HyARM en un sistema multimedia DRE representativo que está implementado utilizando CORBA en tiempo real y el Servicio de Transmisión de Audio/Vídeo de CORBA. Evaluamos el rendimiento de HyARM en un sistema compuesto por tres recursos distribuidos y dos clases de aplicaciones con dos aplicaciones cada una. Nuestros resultados empíricos indican que HyARM garantiza (1) la utilización eficiente de recursos al mantener la utilización de recursos del sistema dentro de los límites de utilización especificados, (2) los requisitos de calidad de servicio de las aplicaciones habilitadas para QoS se cumplen en todo momento. En general, HyARM garantiza una gestión eficiente, predecible y adaptable de recursos para sistemas DRE. REFERENCIAS [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang y Y. Lu. Control de rendimiento de retroalimentación en servicios de software. IEEE: Sistemas de Control, 23(3), junio de 2003. [2] L. Abeni, L. Palopoli, G. Lipari y J. Walpole. Análisis de un planificador de retroalimentación basado en reservas. En el Simposio de Sistemas en Tiempo Real de IEEE, Diciembre de 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang y W. Weiss. Una arquitectura para servicios diferenciados. Centro de Información de la Red RFC 2475, Dic. 1998. [4] H. Franke, S. Nagar, C. Seetharaman y V. Kashyap. Habilitando la Gestión Autonómica de la Carga de Trabajo en Linux. En Actas de la Conferencia Internacional sobre Computación Autónoma (ICAC), Nueva York, Nueva York, mayo de 2004. IEEE. [5] E. Gamma, R. Helm, R. Johnson, y J. Vlissides. Patrones de diseño: Elementos de software orientado a objetos reutilizable. Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea y J. P. Thomas. Impacto de QoS en la percepción y comprensión del usuario de videoclips multimedia. En MULTIMEDIA 98: Actas de la sexta conferencia internacional de ACM sobre Multimedia, páginas 49-54, Bristol, Reino Unido, 1998. ACM Press. [7] Grupo de Trabajo de Ingeniería de Internet. Grupo de Trabajo de Servicios Diferenciados (diffserv) Carta. www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan y C. Lu. Control híbrido supervisado de sistemas en tiempo real. En el 11º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados de IEEE, San Francisco, California, Mar. 2005. [9] J. Lehoczky, L. Sha y Y. Ding. El algoritmo de programación Rate Monotonic: Caracterización exacta y comportamiento en casos promedio. En Actas del 10º Simposio de Sistemas en Tiempo Real de IEEE (RTSS 1989), páginas 166-171. IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi, and D. Karr.

IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi y D. Karr. Comparando y contrastando el soporte de middleware adaptativo en aplicaciones de objetos distribuidos de área amplia y embebidos. En Actas de la 21ª Conferencia Internacional sobre Sistemas de Computación Distribuida (ICDCS-21), páginas 625-634. IEEE, Abr. 2001. [11] C. Lu, J. A. Stankovic, G. Tao y S. H. Son. Programación en tiempo real con control de retroalimentación: Marco, modelado y algoritmos. Revista de Sistemas en Tiempo Real, 23(1/2):85-126, julio de 2002. [12] Object Management Group. Especificación CORBA en tiempo real, documento formal/02-08-02 de OMG, edición de agosto de 2002. [13] D. C. Schmidt, D. L. Levine y S. Mungee. El diseño y rendimiento de los corredores de solicitudes de objetos en tiempo real. Comunicaciones de Computadoras, 21(4):294-324, Abr. 1998. [14] Thomas Sikora. Tendencias y perspectivas en codificación de imágenes y videos. En Actas del IEEE, enero de 2005. [15] X. Wang, H.-M. Huang, V. Subramonian, C. Lu y C. Gill. CAMRIT: Middleware Adaptativo Basado en Control para la Transmisión de Imágenes en Tiempo Real. En Actas del 10º Simposio de Tecnología y Aplicaciones en Tiempo Real y Sistemas Empotrados del IEEE (RTAS), Toronto, Canadá, mayo de 2004. Artículo 7