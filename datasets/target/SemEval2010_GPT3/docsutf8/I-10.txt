SMILE: Aprendizaje Incremental Multiagente de Sonido ;-)∗ Gauvain Bourgne LAMSADE, UMR 7024 CNRS, Universidad Paris-Dauphine, 75775 París Cedex 16 Amal El Fallah Segrouchni LIP6, UMR 7606 CNRS, Universidad Paris 6, 104, Av. del presidente Kennedy, 75116 París Henry Soldano LIPN, UMR 7030 CNRS, Universidad Paris-Norte, 99 Av. J-B Clement, 93430, Villetaneuse RESUMEN Este artículo trata sobre el problema del aprendizaje colaborativo en un sistema multiagente. Aquí cada agente puede actualizar de forma incremental sus creencias B (la representación del concepto) para que se mantenga consistente con el conjunto completo de información K (los ejemplos) que ha recibido del entorno u otros agentes. Extendemos esta noción de consistencia (o solidez) a todo el MAS y discutimos cómo lograr que, en cualquier momento, una misma representación conceptual consistente esté presente en cada agente. El protocolo correspondiente se aplica al aprendizaje supervisado de conceptos. El método resultante SMILE (que significa Sound Multiagent Incremental LEarning) se describe y experimenta aquí. Sorprendentemente, algunas fórmulas booleanas difíciles se aprenden mejor, dado el mismo conjunto de aprendizaje, por un sistema de múltiples agentes que por un solo agente. Categorías y Descriptores de Asignaturas I.2.6 [Inteligencia Artificial]: Aprendizaje-Aprendizaje de conceptos; I.2.11 [Inteligencia Artificial]: Inteligencia Artificial Distribuida-Sistema multiagente Términos Generales Experimentación, Algoritmos, Medición, Rendimiento 1. INTRODUCCIÓN Este artículo trata sobre el problema del aprendizaje colaborativo de conceptos en un sistema multiagente. [6] introduce una caracterización del aprendizaje en un sistema multiagente según el nivel de conciencia de los agentes. En el nivel 1, los agentes aprenden ∗El autor principal de este artículo es un estudiante. en el sistema sin tener en cuenta la presencia de otros agentes, excepto a través de la modificación que traen al entorno con sus acciones. El nivel 2 implica una interacción directa entre los agentes, ya que pueden intercambiar mensajes para mejorar su aprendizaje. El nivel 3 requeriría que los agentes tengan en cuenta las competencias de otros agentes y sean capaces de aprender observando el comportamiento de los otros agentes (considerándolos como entidades independientes y no como parte indeterminada del entorno como en el nivel 1). En este artículo nos enfocamos en el nivel 2, estudiando la interacción directa entre los agentes involucrados en un proceso de aprendizaje. Cada agente se asume capaz de aprender de forma incremental a partir de los datos que recibe, lo que significa que cada agente puede actualizar su conjunto de creencias B para mantenerlo consistente con el conjunto completo de información K que ha recibido del entorno o de otros agentes. En tal caso, diremos que es a-inconsistente. Aquí, el conjunto de creencias B representa conocimiento hipotético que por lo tanto puede ser revisado, mientras que el conjunto de información K representa conocimiento cierto, compuesto por observaciones y hechos no revisables. Además, suponemos que al menos una parte Bc de las creencias de cada agente es común a todos los agentes y debe mantenerse de esa manera. Por lo tanto, una actualización de este conjunto común Bc por parte del agente r debe provocar una actualización de Bc para toda la comunidad de agentes. Nos lleva a definir cuál es la mas-consistencia de un agente con respecto a la comunidad. El proceso de actualización de las creencias de la comunidad cuando uno de sus miembros recibe nueva información puede entonces definirse como el proceso de mantenimiento de la consistencia que garantiza que cada agente en la comunidad permanecerá más consistente. Este proceso de mantenimiento de la mas-consistencia de un agente al recibir nueva información le otorga el rol de aprendiz e implica la comunicación con otros agentes que actúan como críticos. Sin embargo, los agentes no están especializados y a su vez pueden ser aprendices o críticos, ninguno de ellos está limitado a un rol específico. Las piezas de información se distribuyen entre los agentes, pero pueden ser redundantes. No hay memoria central. El trabajo descrito aquí tiene su origen en un trabajo anterior sobre el aprendizaje en un sistema multiagente intencional utilizando un formalismo BDI [6]. En ese trabajo, los agentes tenían planes, cada uno de ellos asociado con un contexto que define en qué condiciones puede ser activado. Los planes (cada uno con su propio contexto) eran comunes a todo el conjunto de agentes en la comunidad. Los agentes tuvieron que adaptar su plan en función del contexto, dependiendo del fracaso o éxito de los planes ejecutados, utilizando un mecanismo de aprendizaje y pidiendo a otros agentes ejemplos (éxitos o fracasos de planes). Sin embargo, este trabajo carecía de un protocolo de aprendizaje colectivo que permitiera una verdadera autonomía del sistema multiagente. El estudio de dicho protocolo es el objeto del presente artículo. En la sección 2 definimos formalmente la mas-consistencia de un mecanismo de actualización para todo el MAS y proponemos un mecanismo de actualización genérico demostrado que es mas consistente. En la sección 3 describimos SMILE, un aprendiz de conceptos multiagente incremental que aplica nuestro mecanismo de actualización mas consistente para el aprendizaje colaborativo de conceptos. La sección 4 describe varios experimentos sobre SMILE y discute varios problemas, incluyendo cómo varían la precisión y la simplicidad de la hipótesis actual al comparar el aprendizaje de un solo agente y el aprendizaje de múltiples agentes. En la sección 5 presentamos brevemente algunos trabajos relacionados y luego concluimos en la sección 6 discutiendo investigaciones adicionales sobre el aprendizaje más consistente. MODELO FORMAL 2.1 Definiciones y marco En esta sección, presentamos una formulación general del aprendizaje incremental colectivo en un sistema cognitivo de múltiples agentes. Representamos un MAS como un conjunto de agentes r1, ..., rn. Cada agente ri tiene un conjunto de creencias Bi que consiste en todo el conocimiento revisable que posee. Parte de estos conocimientos deben ser compartidos con otros agentes. La parte de Bi que es común a todos los agentes se denota como BC. Esta parte común provoca una dependencia entre los agentes. Si un agente ri actualiza su conjunto de creencias Bi a Bi, cambiando en el proceso BC en BC, entonces todos los demás agentes rk deben actualizar su conjunto de creencias Bk a Bk para que BC ⊆ Bk. Además, cada agente ri ha almacenado cierta información Ki. Suponemos que alguna propiedad de consistencia Cons(Bi, Ki) puede ser verificada por el agente mismo entre sus creencias Bi y su información Ki. Como se dijo antes, Bi representa el conocimiento que podría ser revisado, mientras que Ki representa hechos observados, considerados verdaderos, y que posiblemente puedan contradecir a Bi. Definición 1. a-consistencia de un agente Un agente ri es a-consistente si Cons(Bi, Ki) es verdadero. Ejemplo 1. El agente r1 tiene un conjunto de planes que se encuentran en la parte común BC de B1. Cada plan P tiene un contexto desencadenante d(P) (que actúa como una precondición) y un cuerpo. Alguna pieza de información k podría ser el plan P, desencadenado en la situación s, ha fallado a pesar de que s es una instancia de d(P). Si esta pieza de información se agrega a K1, entonces el agente r1 ya no es a-consistente: Cons(B1, K1 ∪ k) es falso. También queremos definir alguna noción de consistencia para todo el MAS dependiendo de los conjuntos de creencias e información de sus elementos constituyentes. Primero definiremos la consistencia de un agente ri con respecto a su conjunto de creencias Bi y su propio conjunto de información Ki junto con todos los conjuntos de información K1...Kn de los otros agentes del MAS. Simplemente lo haremos considerando cuál sería la a-consistencia del agente si tuviera la información de todos los demás agentes. Llamamos a esta noción la mas-consistencia: Definición 2. Un agente ri es mas-consistente si Cons(Bi, Ki ∪ K) es verdadero, donde K = ∪j∈{1,..,n}−{i}Kj 1 es el conjunto de toda la información de los otros agentes del MAS. 1 Lo notaremos como ∪ Kj cuando el contexto sea similar. Ejemplo 2. Usando el ejemplo anterior, supongamos que la pieza de información k está incluida en la información K2 del agente r2. Si la pieza de información no se transmite a r1, y por lo tanto no se agrega a K1, r1 permanece a-consistente. Sin embargo, r1 no es tan consistente como k en el conjunto K de toda la información del MAS. La consistencia global del MAS es simplemente la mas-consistencia de todos sus agentes. Definición 3. La consistencia de un MAS A MAS r1,...,rn es consistente si todos sus agentes ri son masconsistentes. Ahora definimos las propiedades requeridas para un mecanismo de revisión M que actualiza a un agente ri cuando recibe una pieza de información k. En lo siguiente, supondremos que: • La actualización siempre es posible, es decir, un agente siempre puede modificar su conjunto de creencias Bi para recuperar su a-consistencia. Diremos que cada agente es localmente eficiente. • Considerando dos conjuntos de información Cons(Bi, K1) y Cons(Bi, K2), también tenemos Cons(Bi, K1 ∪ K2). Es decir, la a-consistencia de los agentes es aditiva. • Si una pieza de información k relacionada con el conjunto común BC es consistente con un agente, es consistente con todos los agentes: para todos los pares de agentes (ri, rj) tales que Cons(Bi, Ki) y Cons(Bj, Kj) son verdaderos, tenemos, para toda pieza de información k: Cons(Bi, Ki ∪ k) si y solo si Cons(Bj, Kj ∪ k). En tal caso, diremos que el MAS es coherente. Esta última condición simplemente significa que el conjunto de creencias común BC es independiente de las posibles diferencias entre los conjuntos de creencias Bi de cada agente ri. En el caso más simple, B1 = ... = Bn = BC. M también será visto como un mecanismo de aprendizaje incremental y representado como una aplicación que cambia Bi en Bi. En lo siguiente, anotaremos ri(Bi, Ki) para ri cuando sea útil. Definición 4. a-consistencia de una revisión Un mecanismo de actualización M es a-consistente si, para cualquier agente ri y cualquier pieza de información k que llegue a ri, la a-consistencia de este agente se conserva. En otras palabras, si: ri(Bi, Ki) a-consistente ⇒ ri(Bi, Ki) a-consistente, donde Bi = M(Bi) y Ki = Ki ∪ k es el conjunto de toda la información de otros agentes del MAS. De la misma manera, definimos la mas-consistencia de un mecanismo de revisión como la a-consistencia de este mecanismo si los agentes disponen de toda la información en el MAS. En lo siguiente, anotaremos, si es necesario, ri(Bi, Ki, K) para el agente ri en el MAS r1 . . . rn. Definición 5. mas-consistencia de una revisión Un mecanismo de actualización Ms es mas-consistente si para todo agente ri y toda pieza de información k que llega a ri, la mas-consistencia de este agente se conserva. En otras palabras, si: ri(Bi, Ki, K) más-consistente ⇒ ri(Bi, Ki, K) más-consistente, donde Bi = Ms(Bi), Ki = Ki ∪ k, y K = ∪Kj es el conjunto de toda la información del MAS. El Sexto Internacional. En última instancia, cuando un agente aplica un mecanismo mas-consistente al recibir una nueva pieza de información, un efecto secundario deseable del mecanismo debería ser que todos los demás agentes permanezcan mas-consistentes después de cualquier modificación de la parte común BC, es decir, el MAS en sí mismo debería volver a ser consistente. Esta propiedad se define de la siguiente manera: Definición 6. La fuerte mas-consistencia de un mecanismo de actualización. Un mecanismo de actualización Ms es fuertemente mas-consistente si - Ms es mas-consistente, y - la aplicación de Ms por un agente preserva la consistencia del MAS. 2.2 Un mecanismo de actualización fuertemente mas-consistente. La idea general es que, dado que la información está distribuida entre todos los agentes del MAS, debe haber alguna interacción entre el agente aprendiz y los demás agentes en un mecanismo de actualización fuertemente mas-consistente Ms. Para garantizar su mas-consistencia, Ms estará constituido por aplicaciones reiteradas por parte del agente aprendiz ri de un mecanismo interno a-consistente M, seguido por algunas interacciones entre ri y los otros agentes, hasta que ri recupere su mas-consistencia. Describimos a continuación un mecanismo, primero con una descripción de una interacción, luego una iteración y finalmente una declaración de la condición de terminación del mecanismo. El mecanismo es activado por un agente ri al recibir una pieza de información k que interrumpe la mas-consistencia. Tomaremos M(Bi) como el conjunto de creencias del agente aprendiz ri después de una actualización, BC la parte común modificada por ri, y Bj el conjunto de creencias de otro agente rj inducido por la modificación de su parte común BC en BC. Una interacción I(ri, rj) entre el agente aprendiz ri y otro agente rj, actuando como crítico, está constituida por los siguientes pasos: • el agente ri envía la actualización BC de la parte común de sus creencias. Habiendo aplicado su mecanismo de actualización, ri es a-consistente. • El agente rj verifica la modificación Bj de sus creencias inducida por la actualización BC. Si esta modificación conserva su a-consistencia, rj adopta esta modificación. El agente rj envía ya sea una aceptación de BC o una negación junto con una (o más) pieza(s) de información k tal que Cons(Bj, k) es falso. Una iteración de Ms estará compuesta por: • la recepción por parte del agente aprendiz ri de una pieza de información y la actualización M(Bi) restaurando su consistencia • un conjunto de interacciones I(ri, rj) (en las cuales varios agentes críticos posiblemente puedan participar). Si al menos una pieza de información k es transmitida a ri, la adición de k necesariamente hará que ri sea inconsistente y entonces ocurrirá una nueva iteración. Este mecanismo termina cuando ningún agente puede proporcionar tal pieza de información k. Cuando es el caso, se restaura la masconsistencia del agente aprendiz ri. Proposición 1. Dejen que r1,...,rn sea un MAS consistente en el que el agente ri recibe una pieza de información k que rompe su consistencia, y M sea un mecanismo interno de actualización a-consistente. El mecanismo de actualización descrito anteriormente por Ms es altamente mas-consistente. Prueba. La prueba se deriva directamente de la descripción del mecanismo. Este mecanismo asegura que cada vez que un agente recibe un evento, su mas-consistencia será restaurada. Como los otros agentes adoptan la actualización final BC, todos son mas-coherentes y el MAS es coherente. Por lo tanto, Ms es un mecanismo de actualización fuertemente consistente. En el mecanismo descrito anteriormente, el agente aprendiz es el único que recibe y memoriza información durante la ejecución del mecanismo. Se asegura de que Ms termine. Las piezas de información transmitidas por otros agentes y memorizadas por el agente aprendiz son redundantes, ya que ya están presentes en el MAS, más precisamente en la memoria de los agentes críticos que las transmitieron. Se debe tener en cuenta que el mecanismo propuesto por la Sra. aquí no indica explícitamente el orden ni el alcance de las interacciones. Consideraremos en lo siguiente que la propuesta de modificación BC se envía secuencialmente a los diferentes agentes (mecanismo síncrono). Además, la respuesta de un agente crítico solo contendrá una pieza de información inconsistente con la modificación propuesta. Diremos que la respuesta del agente es mínima. Este mecanismo, siendo sincrónico con una respuesta mínima, minimiza la cantidad de información transmitida por los agentes. Ahora lo ilustraremos en el caso del aprendizaje de conceptos multiagente. 3. APRENDIZAJE INCREMENTAL DE MÚLTIPLES AGENTES 3.1 La tarea de aprendizaje Experimentamos el mecanismo propuesto anteriormente en el caso del aprendizaje conceptual MAS incremental. Aquí consideramos un lenguaje de hipótesis en el cual una hipótesis es una disyunción de términos. Cada término es una conjunción de átomos de un conjunto A. Un ejemplo está representado por una etiqueta + o − y una descripción 2 compuesta por un subconjunto de átomos e ⊆ A. Un término abarca un ejemplo si sus átomos constituyentes están incluidos en el ejemplo. Una hipótesis abarca un ejemplo si uno de sus términos lo abarca. Esta representación se utilizará a continuación para aprender fórmulas booleanas. Los literales negativos se representan aquí mediante átomos adicionales, como not − a. La fórmula booleana f = (a ∧ b) ∨ (b ∧ ¬c) se escribirá entonces como (a ∧ b) ∨ (b ∧ no − c). Un ejemplo positivo de f, como {no − a, b, no − c}, representa un modelo para f. 3.2 Proceso de aprendizaje incremental El proceso de aprendizaje es un mecanismo de actualización que, dado una hipótesis actual H, una memoria E = E+ ∪ E− llenada con los ejemplos recibidos previamente, y un nuevo ejemplo positivo o negativo e, produce una nueva hipótesis actualizada. Antes de esta actualización, la hipótesis dada es completa, lo que significa que cubre todos los ejemplos positivos de E+, y 2 Cuando no haya posibilidad de confusión, la palabra ejemplo se utilizará para referirse al par (etiqueta, descripción) así como a la descripción sola. 166 La Sexta Conferencia Internacional. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) es coherente, lo que significa que no cubre ningún ejemplo negativo de E−. Después de la actualización, la nueva hipótesis debe ser completa y coherente con el nuevo estado de memoria E ∪ {e}. Describimos a continuación nuestro mecanismo de actualización de agente único, inspirado en un trabajo previo sobre aprendizaje incremental[7]. En lo siguiente, una hipótesis H para la fórmula objetivo f es una lista de términos h, cada uno de ellos siendo una conjunción de átomos. H es coherente si todos los términos h son coherentes, y H es completo si cada elemento de E+ está cubierto por al menos un término h de H. Cada término es, por construcción, la lgg (generalización general menos general) de un subconjunto de instancias positivas {e1, ..., en}, es decir, el término más específico que cubre {e1, ..., en}. El operador lgg se define considerando ejemplos como términos, por lo que denotamos como lgg(e) al término más específico que cubre e, y como lgg(h, e) al término más específico que es más general que h y que cubre e. Restringir el término a lgg es la base de muchos algoritmos de aprendizaje de abajo hacia arriba (por ejemplo [5]). En la tipología propuesta por [9], nuestro mecanismo de actualización es un aprendiz incremental con memoria completa de instancias: el aprendizaje se realiza mediante actualizaciones sucesivas y se almacenan todos los ejemplos. El mecanismo de actualización depende de la hipótesis en curso H, los ejemplos en curso E+ y E−, y el nuevo ejemplo e. Hay tres casos posibles: • e es positivo y H cubre e, o e es negativo y H no cubre e. No se necesita actualización, H ya es completo y coherente con E ∪ {e}. • e es positivo y H no cubre e: e se denota como un contraejemplo positivo de H. Luego buscamos generalizar a su vez los términos h de H. Tan pronto como se encuentre una generalización correcta h = lgg(h, e), h reemplaza a h en H. Si hay un término que es menos general que h, se descarta. Si ninguna generalización es correcta (es decir, coherente), H ∪ lgg(e) reemplaza a H. • e es negativo y H cubre e: e se denota como un contraejemplo negativo de H. Cada término h que cubre e es entonces descartado de H y reemplazado por un conjunto de términos {h1, ...., hn} que, en su totalidad, es coherente con E− ∪ {e} y que cubre los ejemplos de E+ no cubiertos por H − {h}. Los términos de la hipótesis final H que son menos generales que otros son descartados de H. Ahora describiremos el caso en el que e = e− es un ejemplo negativo cubierto. Las siguientes funciones se utilizan aquí: • coveredOnlyBy(h, E+) da el subconjunto de E+ cubierto por h y ningún otro término de H. • bestCover(h1, h2) da h1 si h1 cubre más ejemplos de uncoveredPos que h2, de lo contrario da h2. • covered(h) da los elementos de uncoveredPos cubiertos por h. // Especialización de cada h cubriendo e− para cada h de H cubriendo e− hacer H = H − {h} uncoveredPos = coveredOnlyBy(h, E+ ) Ar= átomos que no están ni en e− ni en h mientras (uncoveredPos = ∅) hacer // buscando la mejor especialización de h hc=h best=⊥ // ⊥ no cubre ningún ejemplo para cada a de Ar hacer hc= h ∧ a best = bestCover(hc, best) finpara Ar=Ar−{best} hi=lgg(covered(best)) H = H ∪ {hi} uncoveredPos=uncoveredPos - covered(best) finmientras finpara Los términos de H que son menos generales que otros son descartados. Ten en cuenta que este mecanismo tiende tanto a hacer una actualización mínima de la hipótesis actual como a minimizar el número de términos en la hipótesis, en particular descartando términos menos generales que otros después de actualizar una hipótesis. 3.3 Aprendizaje colectivo Si H es la hipótesis actual, Ei es la memoria actual de ejemplos del agente ri y E es el conjunto de todos los ejemplos recibidos por el sistema, la notación de la sección 2 se convierte en Bi = BC = H, Ki = Ei y K = E. Cons(H, Ei) establece que H es completo y coherente con Ei. En tal caso, ri es a-consistente. La pieza de información k recibida por el agente ri es aquí simplemente un ejemplo e junto con su etiqueta. Si e es tal que la hipótesis actual H no es completa ni coherente con Ei ∪ {e}, e contradice a H: ri se vuelve a-inconsistente, y por lo tanto el MAS ya no es consistente. La actualización de una hipótesis cuando llega un nuevo ejemplo es un mecanismo a-consistente. Siguiendo la proposición 1, este mecanismo puede ser utilizado para producir un mecanismo fuerte mas-consistente: al recibir un nuevo ejemplo en el MAS por un agente r, posiblemente se necesite una actualización y, después de un conjunto de interacciones entre r y los otros agentes, resulta en una nueva hipótesis compartida por todos los agentes y que restaura la consistencia del MAS, es decir, que es completa y coherente con el conjunto ES de todos los ejemplos presentes en el MAS. Es claro que al minimizar el número de modificaciones de hipótesis, este mecanismo sincrónico y minimalista reduce el número de ejemplos recibidos por el aprendiz de otros agentes, y por ende, el número total de ejemplos almacenados en el sistema. 4. EXPERIMENTOS En lo siguiente, aprenderemos una fórmula booleana que es una prueba difícil para el método de aprendizaje: el 11-multiplexor (ver [4]). Se refiere a 3 atributos booleanos de dirección a0, a1, a2 y 8 atributos booleanos de datos d0, ..., d7. La fórmula f11 se cumple si el número codificado por los 3 atributos de dirección es el número de un atributo de datos cuyo valor es 1. Su fórmula es la siguiente: f11 = (a0 ∧a1 ∧a2 ∧d7)∨(a0 ∧a1 ∧¬a2 ∧d6)∨(a0 ∧¬a1 ∧ a2 ∧d5)∨(a0 ∧¬a1 ∧¬a2 ∧d4)∨(¬a0 ∧a1 ∧a2 ∧d3)∨(¬a0 ∧ a1 ∧¬a2 ∧d2)∨(¬a0 ∧¬a1 ∧a2 ∧d1)∨(¬a0 ∧¬a1 ∧¬a2 ∧d0). Hay 2048 = 211 posibles ejemplos, la mitad de los cuales son positivos (lo que significa que satisfacen f11) mientras que la otra mitad es negativa. Un experimento suele estar compuesto por 50 pruebas. Cada ejecución corresponde a una secuencia de 600 ejemplos que son aprendidos de forma incremental por un Sistema Multiagente con n agentes. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 167 (n-MAS). Un número de variables como la precisión (es decir, la frecuencia de clasificación correcta de un conjunto de ejemplos no vistos), el tamaño de la hipótesis (es decir, el número de términos en la fórmula actual) o el número de ejemplos almacenados, se registra cada vez que el sistema recibe 25 ejemplos durante esas ejecuciones. En el protocolo que se utiliza aquí, un nuevo ejemplo se envía a un agente aleatorio cuando el MAS es consistente. El siguiente ejemplo será enviado a su vez a otro agente cuando la consistencia del MAS haya sido restaurada. De esta manera simulamos una especie de aprendizaje lento: la frecuencia de llegada de ejemplos es lenta en comparación con el tiempo que lleva una actualización. 4.1 Eficiencia del aprendizaje conceptual en MAS 4.1.1 Tiempo de ejecución Discutimos brevemente aquí el tiempo de ejecución del aprendizaje en el MAS. Se debe tener en cuenta que todo el conjunto de acciones e interacciones en el MAS se simula en un solo procesador. La Figura 1 muestra que el tiempo depende linealmente del número de agentes. Al final de la parte más activa del aprendizaje (200 ejemplos), un 16MAS ha tomado 4 veces más tiempo de aprendizaje que un 4-MAS. Este tiempo de ejecución representa el conjunto completo de aprendizaje y la Figura 1: Tiempo de ejecución de un n-MAS (desde n = 2 en la parte inferior hasta n = 20 en la parte superior). actividad de comunicación y sugiere el costo de mantener una hipótesis de aprendizaje consistente en un MAS compuesto por agentes autónomos. 4.1.2 Redundancia en la memoria del MAS Estudiamos ahora la distribución de los ejemplos en la memoria del MAS. La redundancia se escribe RS = nS/ne, donde nS es el número total de ejemplos almacenados en el MAS, que es la suma de los tamaños de las memorias de ejemplos de los agentes Ei, y ne es el número total de ejemplos recibidos del entorno en el MAS. En la figura 2, comparamos las redundancias en MAS de 2 a 20 agentes. Hay un pico que se mueve lentamente de 80 a 100 ejemplos, que representa la cantidad de ejemplos para los cuales el aprendizaje es más activo. Para 20 agentes, la redundancia máxima no es más de 6, lo cual es mucho menor que el valor teórico máximo de 20. Ten en cuenta que cuando el aprendizaje se vuelve menos activo, la redundancia tiende hacia su valor mínimo 1: cuando ya no hay más actualizaciones, los ejemplos son solo la Figura 2: Redundancia de ejemplos almacenados en un nMAS (de n = 2 en la parte inferior a n = 20 en la parte superior) almacenados por el agente que los recibe. Un n-MAS selecciona una solución más simple que un solo agente. El mecanismo propuesto tiende a minimizar el número de términos en la hipótesis seleccionada. Durante el aprendizaje, el tamaño de la hipótesis actual crece más allá del óptimo, y luego disminuye cuando el MAS converge. En el banco de pruebas Multiplexer 11, el número óptimo de términos es 8, pero también existen fórmulas equivalentes con más términos. Es interesante notar que en este caso el 10-MAS converge hacia una solución exacta más cercana al número óptimo de términos (en este caso 8) (ver Figura 3). Después de haber presentado 1450 ejemplos, tanto el 1-MAS como el 10-MAS han aprendido exactamente el concepto (las precisiones respectivas son 0.9999 y 1), pero el agente individual expresa en promedio el resultado como una DNF de 11.0 términos, mientras que el 10-MAS lo expresa como una DNF de 8.8 términos. Sin embargo, para algunas otras funciones booleanas encontramos que durante el aprendizaje, 1-MAS siempre produce hipótesis más grandes que 10-MAS, pero que ambos MAS convergen a hipótesis con resultados de tamaño similar. 4.1.4 Un n-MAS es más preciso que un agente único. La Figura 4 muestra la mejora proporcionada por un MAS con n agentes en comparación con un agente único. Esta mejora no era especialmente esperada, porque ya sea que tengamos uno o n agentes, cuando se le dan N ejemplos al MAS, tiene acceso a la misma cantidad de información, mantiene solo una hipótesis en curso y utiliza el mismo algoritmo básico de revisión cada vez que un agente tiene que modificar la hipótesis actual. Ten en cuenta que si la precisión de los MAS de 1, 2, 4 y 10 es significativamente diferente, mejorando a medida que aumenta el número de agentes, no hay una diferencia clara más allá de este punto: la curva de precisión de los MAS de 100 agentes es muy similar a la de los MAS de 10 agentes. 4.1.4.1 Fórmulas booleanas. Para evaluar esta mejora de precisión, hemos experimentado nuestro protocolo en otros problemas de aprendizaje de funciones booleanas. Como en el caso del Multiplexor-11, estas funciones 168 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Figura 3: Tamaño de la hipótesis construida por 1 y 10MAS: el caso M11. Figura 4: Precisión de un n-MAS: el caso M11 (de abajo hacia arriba, n = 1, 2, 4, 10, 100). Se aprenden en forma de DNF3 más o menos sintácticamente complejos (es decir, con más o menos términos conjuntivos en la DNF), pero también son más o menos difíciles de aprender, ya que puede ser difícil encontrar su camino en el espacio de hipótesis para alcanzarlos. Además, la presencia en la descripción de atributos irrelevantes (es decir, atributos que no pertenecen al DNF objetivo) hace que el problema sea más difícil. Los siguientes problemas han sido seleccionados para experimentar con nuestro protocolo: (i) el multiplexor-11 con 9 atributos irrelevantes: M11 9, (ii) el multiplexor-20 M20 (con 4 bits de dirección y 16 bits de datos), (iii) un problema de paridad difícil (ver [4]) el Xorp m: debe haber un número impar de bits con valor 1 en los primeros p atributos para que la instancia sea positiva, los p bits restantes son irrelevantes, y (iv) una fórmula DNF simple (a ∧ b ∧ c) ∨ (c ∧ d ∧ e) ∨ (e ∧ f ∧ g) ∧ (g ∧ h ∧ i) con 19 atributos irrelevantes. La siguiente tabla resume alguna información sobre estos problemas, proporcionando el número total de atributos, incluidos los irrelevantes, el número de atributos irrelevantes en Forma Normal Disyuntiva 3, el número mínimo de términos de la DNF correspondiente, y el número de ejemplos de aprendizaje utilizados. Pb att. irre. att. términos ex. A continuación se presentan los resultados de precisión de nuestro mecanismo de aprendizaje con un solo agente y un MAS de 10 agentes, junto con los resultados de dos algoritmos estándar implementados con el entorno de aprendizaje WEKA[16]: JRip (una implementación de RIPPER[2]) e Id3[12]. Para los experimentos con JRip e Id3, medimos la precisión media en 50 pruebas, separando aleatoriamente los ejemplos en un conjunto de aprendizaje y un conjunto de prueba cada vez. Los parámetros de JRip e Id3 son los predeterminados, excepto que JRip se utiliza sin poda. La siguiente tabla muestra los resultados: Pb JRip Id3 Sm 1 Sm 10 M11 88.3 80.7 88.7 95.5 M11 9 73.4 67.9 66.8 83.5 M20 67.7 62.7 64.6 78.2 Xor3 25 54.4 55.2 71.4 98.5 Xor5 5 52.6 60.8 71.1 78.3 Xor5 15 50.9 51.93 62.4 96.1 Simple4-9 19 99.9 92.3 87.89 98.21 Es claro que los problemas difíciles se resuelven mejor con más agentes (ver por ejemplo xor5 15). Creemos que estos beneficios, que pueden ser importantes con un número creciente de agentes, se deben al hecho de que cada agente realmente memoriza solo parte del número total de ejemplos, y esta parte es seleccionada en parte por otros agentes como contraejemplos, lo que provoca un mayor número de actualizaciones de hipótesis actuales y, por lo tanto, una mejor exploración del espacio de hipótesis. 4.1.4.2 Problemas de base de datos de ML. También realizamos experimentos con algunos problemas no booleanos. Consideramos solo problemas de dos clases (positivo/negativo), tomados de la base de datos de problemas de aprendizaje de UCIs. En todos estos problemas, los ejemplos se describen como un vector de pares (atributo, valor). Los dominios de valor pueden ser booleanos, numéricos (conjunto totalmente ordenado) o nominales (conjunto no ordenado). Un conjunto adecuado de átomos A debe ser constituido para cada problema. Por ejemplo, si a es un atributo numérico, definimos como máximo k umbrales si, dando k+1 intervalos de densidad uniforme. Por lo tanto, cada umbral distintivo si da dos átomos, uno ≤ si y otro > si. En nuestros experimentos, tomamos un número máximo de umbral k = 8. Por ejemplo, en el caso del problema de iono, había 34 atributos numéricos, y una instancia se describe con 506 átomos. A continuación se presentan los resultados de precisión de nuestro sistema junto con los resultados anteriores. La columna Nb ex. se refiere al 4. La probabilidad de que el valor de a esté en cualquier intervalo es constante. El Sexto Congreso Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 169 número de ejemplos utilizados para el aprendizaje5. La columna (1) representa los valores de precisión mínima y máxima para los treinta y tres clasificadores probados en [8]. La columna (2) representa los resultados de [13], donde se comparan varios métodos de aprendizaje con métodos de aprendizaje en conjunto utilizando conjuntos de clasificadores ponderados. La columna S-1 y S-10 dan la precisión de SMILE con 1 y 10 agentes, respectivamente. Esta tabla muestra que el algoritmo incremental correspondiente al caso de un solo agente, proporciona resultados honorables en relación a los métodos clásicos no incrementales que utilizan hipótesis más grandes y complejas. En algunos casos, hay una mejora en la precisión con un MAS de 10 agentes. Sin embargo, con datos de referencia de este tipo, que suelen ser ruidosos, la dificultad no radica realmente en la forma en que se explora el espacio de búsqueda, por lo que la mejora observada no siempre es significativa. El mismo tipo de fenómeno se ha observado con métodos dedicados a problemas booleanos difíciles [4]. 4.2 Sincronización de MAS En este caso consideramos que n agentes individuales aprenden sin interacciones y en un momento dado comienzan a interactuar, formando así un MAS. El propósito es observar cómo los agentes aprovechan la colaboración cuando parten de diferentes estados de creencias y memorias. En esta sección comparamos un 1-MAS, un 10-MAS (ref) y un 10-MAS (100sync) cuyos agentes no se comunicaron durante la llegada de los primeros 100 ejemplos (10 por agentes). Las tres curvas de precisión se muestran en la figura 5. Al comparar la curva del agente individual con la del 10-MAS sincronizado, podemos observar que después del inicio de la sincronización, es decir, en 125 ejemplos, las precisiones son idénticas. Esto era esperado ya que tan pronto como un ejemplo e recibido por el MAS contradice la hipótesis actual del agente ra que lo recibe, este agente realiza una actualización y su nueva hipótesis es propuesta a los otros agentes para su crítica. Por lo tanto, este primer ejemplo contradictorio lleva al MAS a alcanzar coherencia en relación con todo el conjunto de ejemplos presentes en la memoria de los agentes. Una mayor precisión, correspondiente a un 10-MAS, se obtiene más tarde, a partir del ejemplo 175. En otras palabras, el beneficio de una mejor exploración del espacio de investigación se obtiene ligeramente más tarde en el proceso de aprendizaje. Ten en cuenta que esta sincronización ocurre de forma natural en todas las situaciones en las que los agentes tienen, por alguna razón, una divergencia entre su hipótesis y la memoria del sistema. Esto incluye la fusión de dos MAS en una sola o la llegada de nuevos agentes en un MAS existente. 4.3 Experimentos sobre el aprendizaje asincrónico: el efecto de un gran flujo de datos. Para ttt y kr-vs-kp, nuestro protocolo no utilizó más de 574 y 958 ejemplos de aprendizaje respectivamente, por lo que colocamos otro número en la columna. Figura 5: Precisión de un 1-MAS, un 10-MAS y un 10-MAS sincronizado después de 100 ejemplos. En este experimento relajamos nuestro modo de aprendizaje lento: los ejemplos se envían a una velocidad determinada al MAS. El flujo de ejemplos resultante se mide en ms−1, y representa la cantidad de ejemplos enviados al MAS cada milisegundo. Cuando el flujo es demasiado grande, el MAS no puede alcanzar la consistencia del MAS al recibir un ejemplo del entorno antes de que llegue un nuevo ejemplo. Esto significa que el proceso de actualización, iniciado por el agente r0 al recibir un ejemplo, puede estar incompleto cuando un nuevo ejemplo es recibido por r0 u otro agente r1. Como resultado, un agente crítico puede tener que enviar contraejemplos de hipótesis enviadas por varios agentes en el instante t. Sin embargo, en nuestro entorno, a medida que los agentes memorizan todos los ejemplos que reciben cuando finaliza el flujo, el MAS alcanza necesariamente consistencia MAS con respecto a todos los ejemplos recibidos hasta el momento. En nuestros experimentos, aunque la curva de aprendizaje se ralentiza durante la fase intensa de aprendizaje (correspondiente a una baja precisión de las hipótesis actuales), el MAS aún logra alcanzar una hipótesis satisfactoria más adelante, ya que hay menos contraejemplos en el flujo de ejemplos. En la Figura 6 comparamos las precisiones de dos 11-MAS respectivamente sometidos a flujos de ejemplos de diferentes tasas al aprender la fórmula M11. La curva de aprendizaje del MAS al recibir un ejemplo a una velocidad de 1/33 ms−1 casi no se ve alterada (ver Figura 4), mientras que el MAS a 1/16 ms−1 primero se ralentiza severamente antes de alcanzar al primero. 5. TRABAJOS RELACIONADOS Desde el 96 [15], se han realizado varios trabajos sobre el aprendizaje en Sistemas Multiagente, pero muy pocos sobre el aprendizaje de conceptos. En [11] el MAS realiza una forma de aprendizaje en conjunto en la que los agentes son aprendices perezosos (no se mantiene una representación explícita) y venden ejemplos inútiles a otros agentes. En [10] cada agente observa todos los ejemplos pero solo percibe una parte de su representación. En el aprendizaje de conceptos en línea mutuo, los agentes convergen hacia una hipótesis única, pero cada agente produce ejemplos desde su propia representación del concepto, lo que resulta en una especie de sincronización en lugar de un aprendizaje de conceptos puro. 170 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Figura 6: Precisión de dos sistemas multiagente asincrónicos de 11 agentes (tasas de ejemplo de 1/33ms−1 y 1/16ms−1). 6. CONCLUSIÓN Hemos presentado y experimentado un protocolo para el aprendizaje de conceptos en línea de MAS. La característica principal de este mecanismo de aprendizaje colaborativo es que mantiene una propiedad de consistencia: aunque durante el proceso de aprendizaje cada agente solo recibe y almacena, con cierta redundancia limitada, parte de los ejemplos recibidos por el MAS, en cualquier momento la hipótesis actual es consistente con todo el conjunto de ejemplos. Las hipótesis de nuestros experimentos no abordan los problemas de los MAS distribuidos, como fallos (por ejemplo, mensajes perdidos o corruptos) u otras fallas en general (crash, fallos bizantinos, etc.). Sin embargo, nuestro marco de trabajo es abierto, es decir, los agentes pueden salir del sistema o ingresar a él mientras se preserva el mecanismo de consistencia. Por ejemplo, si introducimos un mecanismo de tiempo de espera, incluso cuando un agente crítico se bloquea o no responde, se garantiza la consistencia con los otros críticos (dentro de los agentes restantes). En [1], se ha aplicado un enfoque similar a los problemas de abducción en MAS: las hipótesis a mantener, dada una información incompleta, son entonces hechos o afirmaciones. El trabajo adicional se refiere en primer lugar a acoplar la inducción y la abducción para realizar un aprendizaje colaborativo de conceptos cuando los ejemplos son solo parcialmente observados por cada agente, y en segundo lugar, a investigar el aprendizaje de memoria parcial: cómo se preserva el aprendizaje cuando un agente o todo el MAS olvida algunos ejemplos seleccionados. Agradecimientos Estamos muy agradecidos a Dominique Bouthinon por implementar las modificaciones tardías en SMILE, facilitando mucho nuestros experimentos. Parte de este trabajo se realizó durante la visita del primer autor al Atelier De BioInformatique de la Universidad Paris VI, Francia. 7. REFERENCIAS [1] G. Bourgne, N. Maudet y S. Pinson. Cuando los agentes comunican hipótesis en situaciones críticas. En DALT-2006, mayo de 2006. [2] W. W. Cohen. Inducción de reglas rápida y efectiva. En ICML, páginas 115-123, 1995. [3] C. B. D.J. Newman, S. Hettich y C. Merz. Repositorio de bases de datos de aprendizaje automático de UCI, 1998. [4] S. Esmeir y S. Markovitch. Algoritmos basados en anticipación para la inducción en cualquier momento de árboles de decisión. En ICMLO4, páginas 257-264. Morgan Kaufmann, 2004. [5] J. F¨urnkranz. 

Morgan Kaufmann, 2004. [5] J. F¨urnkranz. Una patología de la escalada de colina de abajo hacia arriba en el aprendizaje inductivo de reglas. En ALT, volumen 2533 de LNCS, páginas 263-277. Springer, 2002. [6] A. Guerra-Hernández, A. ElFallah-Seghrouchni y H. Soldano. Aprendizaje en sistemas multiagente BDI. En CLIMA IV, volumen 3259, páginas 218-233. Springer Verlag, 2004. [7] M. Henniche. 

Springer Verlag, 2004. [7] M. Henniche. Mgi: un algoritmo incremental de abajo hacia arriba. En la Conferencia IEEE de Australia y Nueva Zelanda sobre Sistemas de Información Inteligente, páginas 347-351, 1994. [8] T.-S. Lim, W.-Y. Loh, y Y.-S. Shih. Una comparación de la precisión de predicción, complejidad y tiempo de entrenamiento de treinta y tres algoritmos de clasificación antiguos y nuevos. Aprendizaje automático, 40(3):203-228, 2000. [9] M. A. Maloof y R. S. Michalski. Aprendizaje incremental con memoria parcial de instancias. I'm sorry, but the sentence "Artif." is not a complete sentence. Can you provide more context or a complete sentence for me to translate to Spanish? Intell., 154(1-2):95-126, 2004. [10] P. J. Modi y W.-M. Shen. Aprendizaje colaborativo multiagente para tareas de clasificación. En AGENTS 01, páginas 37-38. ACM Press, 2001. [11] S. Onta˜non y E. Plaza. Reciclaje de datos para el aprendizaje multiagente. En ICML 05, páginas 633-640. ACM Press, 2005. [12] J. R. Quinlan. 

ACM Press, 2005. [12] J. R. Quinlan. Inducción de árboles de decisión. Aprendizaje automático, 1(1):81-106, 1986. [13] U. R¨uckert y S. Kramer. Hacia límites ajustados para el aprendizaje de reglas. En ICML 04 (Conferencia Internacional sobre Aprendizaje Automático), página 90, Nueva York, NY, EE. UU., 2004. ACM Press. [14] J. Wang y L. Gasser. Aprendizaje de conceptos en línea mutuo para múltiples agentes. En AAMAS, páginas 362-369. ACM Press, 2002. [15] G. Weiß y S. Sen, editores. Adaptación y Aprendizaje en Sistemas Multiagente, volumen 1042 de las Notas de Conferencia en Ciencias de la Computación. Springer, 1996. [16] I. H. Witten y E. Frank. Minería de datos: Herramientas y técnicas prácticas de aprendizaje automático con implementaciones en Java. Morgan Kaufmann, octubre de 1999. La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 171