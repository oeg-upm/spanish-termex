CenWits: Un sistema de búsqueda y rescate basado en sensores y testigos con acoplamiento débil. Jyh-How Huang Departamento de Ciencias de la Computación Universidad de Colorado, Campus Box 0430 Boulder, CO 80309-0430 huangjh@cs.colorado.edu Saqib Amjad Departamento de Ciencias de la Computación Universidad de Colorado, Campus Box 0430 Boulder, CO 80309-0430 Saqib.Amjad@colorado.edu Shivakant Mishra Departamento de Ciencias de la Computación Universidad de Colorado, Campus Box 0430 Boulder, CO 80309-0430 mishras@cs.colorado.edu RESUMEN Este artículo describe el diseño, implementación y evaluación de un sistema de búsqueda y rescate llamado CenWits. CenWits utiliza varios sensores pequeños basados en RF comúnmente disponibles, y un pequeño número de dispositivos de almacenamiento y procesamiento. Está diseñado para la búsqueda y rescate de personas en situaciones de emergencia en áreas silvestres. Una característica clave de CenWits es que no requiere una red de sensores conectada continuamente para su funcionamiento. Está diseñado para una red intermitente que proporciona solo conectividad ocasional. Hace un uso juicioso de la capacidad de almacenamiento combinada de los sensores para filtrar, organizar y almacenar información importante, la potencia de la batería combinada de los sensores para garantizar que el sistema permanezca operativo durante períodos de tiempo más largos, y la conectividad intermitente de la red para propagar información a un centro de procesamiento. Se ha implementado un prototipo de CenWits utilizando nodos Berkeley Mica2. El artículo describe esta implementación e informa sobre el rendimiento medido a partir de ella. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos Términos Generales Algoritmos, Diseño, Experimentación 1. INTRODUCCIÓN La búsqueda y rescate de personas en situaciones de emergencia de manera oportuna es un servicio extremadamente importante. Ha sido difícil proporcionar dicho servicio debido a la falta de información oportuna necesaria para determinar la ubicación actual de una persona que pueda estar en una situación de emergencia. Con la aparición de la computación ubicua, se han desarrollado varios sistemas [12, 19, 1, 5, 6, 4, 11] en los últimos años que hacen uso de dispositivos pequeños como teléfonos celulares, sensores, etc. Todos estos sistemas requieren una red conectada a través de satélites, estaciones base de GSM o dispositivos móviles. Este requisito limita severamente su aplicabilidad, especialmente en áreas silvestres remotas donde es muy difícil mantener una red conectada. Por ejemplo, un transmisor GSM tiene que estar dentro del alcance de una estación base para transmitir. Como resultado, no puede operar en la mayoría de las áreas silvestres. Si bien un transmisor satelital es la única solución viable en áreas silvestres, suele ser costoso y engorroso. Además, se requiere una línea de visión para transmitir a un satélite, lo que hace que sea imposible mantener la conexión en cañones estrechos, grandes ciudades con rascacielos, selvas tropicales o incluso cuando hay un techo u otra obstrucción sobre el transmisor, por ejemplo, en un automóvil. Un transmisor de RF tiene un rango de transmisión relativamente más pequeño. Por lo tanto, si bien un sensor in situ es económico como unidad individual, resulta costoso construir una extensa red que pueda proporcionar conectividad en una amplia área salvaje. En un entorno móvil donde los sensores son llevados por personas en movimiento, es difícil implementar y mantener un enrutamiento eficiente en energía en una extensa área silvestre. De hecho, construir una red de sensores ad hoc utilizando solo los sensores llevados por los excursionistas es casi imposible debido a un número relativamente pequeño de sensores distribuidos en una extensa área salvaje. En este artículo, describimos el diseño, implementación y evaluación de un sistema de búsqueda y rescate llamado CenWits (Sistema de Seguimiento Basado en Sensores sin Conexión Utilizando Testigos). CenWits está compuesto por sensores móviles in situ que son llevados por sujetos (personas, animales salvajes u objetos inanimados), puntos de acceso (AP) que recopilan información de estos sensores, y receptores GPS y puntos de ubicación (LP) que proporcionan información de ubicación a los sensores. Un sujeto utiliza receptores GPS (cuando puede conectarse a un satélite) y puntos de referencia para determinar su ubicación actual. La idea clave de CenWits es que utiliza un concepto de testigos para transmitir la información de movimiento y ubicación de un sujeto al mundo exterior. Esto evita la necesidad de mantener una red conectada para transmitir información de ubicación al mundo exterior. En particular, no es necesario utilizar transmisores GSM o satelitales costosos, ni mantener una red ad hoc de sensores in situ en CenWits. 180 CenWits emplea varios mecanismos importantes para abordar el problema clave de las limitaciones de recursos (baja intensidad de señal, bajo consumo de energía y memoria limitada) en los sensores. En particular, hace un uso juicioso de la capacidad de almacenamiento combinada de los sensores para filtrar, organizar y almacenar información importante, la potencia de la batería combinada de los sensores para garantizar que el sistema permanezca operativo durante períodos de tiempo más largos, y la conectividad intermitente a la red para propagar información a un centro de procesamiento. El problema de las señales débiles (comunicación de RF de corto alcance) se aborda evitando la necesidad de mantener una red conectada. En cambio, CenWits propaga la información de ubicación de los sensores utilizando el concepto de testigos a través de una red intermitentemente conectada. Como resultado, este sistema puede ser desplegado en áreas remotas de la naturaleza, así como en grandes áreas urbanas con rascacielos y otras estructuras altas. Además, esto hace que CenWits sea rentable. Un sujeto solo necesita llevar sensores livianos y económicos que tengan receptores GPS pero no transmisores GSM o satelitales costosos. Además, dado que no se necesita una red de sensores conectados, no es necesario desplegar sensores en cantidades muy grandes. El problema de la vida limitada de la batería y la memoria limitada de un sensor se aborda mediante la incorporación de los conceptos de grupos y particiones. Los grupos y particiones permiten que los sensores permanezcan en modos de sueño o recepción la mayor parte del tiempo. Mediante grupos y particiones, la información de ubicación recopilada por un sensor puede distribuirse entre varios sensores, reduciendo así la cantidad de memoria necesaria en un sensor para almacenar esa información. De hecho, CenWits proporciona un equilibrio adaptable entre la memoria y el consumo de energía de los sensores. Cada sensor puede ajustar dinámicamente su consumo de energía y memoria en función de su energía restante o memoria disponible. Se ha notado ampliamente que la fortaleza de las redes de sensores radica en el hecho de que varios nodos sensores pueden distribuirse en una zona relativamente grande para construir una red de múltiples saltos. Este documento demuestra que se pueden construir aplicaciones a gran escala importantes utilizando sensores al integrar de manera prudente las capacidades de almacenamiento, comunicación y computación de los sensores. El artículo describe técnicas importantes para combinar la memoria, la transmisión y la energía de la batería de muchos sensores para abordar las limitaciones de recursos en el contexto de una aplicación de búsqueda y rescate. Sin embargo, estas técnicas son bastante generales. Discutimos varias otras aplicaciones basadas en sensores que pueden emplear estas técnicas. Si bien CenWits aborda el problema general de seguimiento y reporte de ubicación en una red de área amplia, existen dos diferencias importantes con respecto al trabajo anterior realizado en esta área. Primero, a diferencia de las soluciones anteriores de seguimiento de ubicación, CenWits no requiere una red conectada. Segundo, a diferencia de soluciones anteriores de seguimiento de ubicación, CenWits no busca una precisión muy alta en la localización. En cambio, el objetivo principal es proporcionar un área pequeña y aproximada donde se puedan concentrar los esfuerzos de búsqueda y rescate. El resto de este documento está organizado de la siguiente manera. En la Sección 2, revisamos algunos de los proyectos y tecnologías recientes relacionados con el seguimiento de movimiento y ubicación, y sistemas de búsqueda y rescate. En la Sección 3, describimos la arquitectura general de CenWits y proporcionamos una descripción a alto nivel de su funcionalidad. En la siguiente sección, Sección 4, discutimos el manejo de energía y memoria en CenWits. Para simplificar nuestra presentación, nos enfocaremos en una aplicación específica de rastreo de excursionistas perdidos/heridos en todas estas secciones. En la Sección 6, describimos una implementación prototipo de CenWits y presentamos el rendimiento medido de esta implementación. Discutimos cómo las ideas de CenWits pueden ser utilizadas para construir varias otras aplicaciones en la Sección 7. Finalmente, en la Sección 8, discutimos algunos temas relacionados y concluimos el artículo. 2. Se proporciona una encuesta de sistemas de ubicación para la informática ubicua en [11]. Se propone un sistema de seguimiento de ubicación para redes de sensores ad hoc que utilizan sensores ancla como referencia para obtener información de ubicación y difundirla a nodos externos en [17]. La mayoría de los sistemas de seguimiento de ubicación en redes de sensores ad hoc son para beneficiar el enrutamiento consciente de la geografía. No se ajustan bien a nuestros propósitos. El conocido sistema de insignias activas [19] permite a un usuario llevar consigo una insignia. Un sensor infrarrojo en la habitación puede detectar la presencia de una placa e identificar la ubicación y la identidad de la persona. Este es un sistema útil para el entorno interior, donde el GPS no funciona. La localización utilizando dispositivos 802.11 es probablemente la solución más económica para el seguimiento de la posición en interiores [8]. Debido a la popularidad y bajo costo de los dispositivos 802.11, se han desarrollado varias soluciones empresariales basadas en esta tecnología[1]. Un sistema que combina dos tecnologías maduras y es viable en áreas suburbanas donde un usuario puede ver el cielo despejado y tener recepción celular GSM al mismo tiempo está actualmente disponible. Este sistema recibe la señal GPS de un satélite y se localiza a sí mismo, dibuja la ubicación en un mapa y envía la información de ubicación a través de la red GSM a aquellos interesados en la ubicación del usuario. Un sistema muy simple para monitorear a los niños consiste en un transmisor de radiofrecuencia y un receptor. El sistema alerta al portador del receptor cuando el transmisor está a punto de quedar fuera de alcance [6]. Los Radiobalizas de Localización Personal (PLB) se han utilizado durante años para el rescate en avalanchas. Un esquiador lleva un transmisor de RF que emite balizas periódicamente, para que un equipo de rescate pueda encontrar su ubicación basándose en la intensidad de la señal de RF. La versión de lujo del PLB combina un receptor GPS y un transmisor satelital COSPASSARSAT que puede enviar la ubicación de los usuarios en latitud y longitud al equipo de rescate cada vez que ocurre un accidente [4]. Sin embargo, el dispositivo o bien está encendido todo el tiempo, lo que resulta en un rápido agotamiento de la batería, o debe encenderse después del accidente para funcionar. Otra tecnología relacionada de uso generalizado hoy en día es el sistema ONSTAR [3], que suele utilizarse en varios coches de lujo. En este sistema, una unidad de GPS proporciona información de posición, y un potente transmisor retransmite esa información a través de un satélite a un centro de servicio al cliente. Diseñado para emergencias, el sistema puede ser activado tanto por el usuario con solo presionar un botón, como por un accidente catastrófico. Una vez que el sistema ha sido activado, un representante humano intenta establecer comunicación con el usuario a través de un teléfono celular incorporado como un dispositivo en el automóvil. Si no se puede establecer contacto, los servicios de emergencia son enviados a la ubicación proporcionada por GPS. Al igual que los radiobalizas de localización de emergencia (PLBs), este sistema tiene varias limitaciones. Primero, es pesado y caro. Requiere un transmisor satelital y una red conectada. Si no se puede mantener la conectividad con la red GPS o un satélite de comunicación, el sistema falla. Desafortunadamente, estos son obstáculos comunes encontrados en cañones profundos, calles estrechas en grandes ciudades, estacionamientos subterráneos y en varios otros lugares. El sistema Lifetch utiliza una placa receptora de GPS combinada con un transmisor GSM/GPRS y un transmisor RF en un nodo sensor inalámbrico llamado Unidad de Comunicación Inteligente (ICU). Una UCI primero intenta transmitir su ubicación a un centro de control a través de la red GSM/GPRS. Si eso falla, se conecta con otras UCIs (red ad hoc) para reenviar su información de ubicación hasta que la información llegue a una UCI que tenga recepción GSM/GPRS. Esta UCI luego transmite la información de ubicación de la UCI original a través de la red GSM/GPRS. ZebraNet es un sistema diseñado para estudiar los patrones de movimiento de las cebras [13]. Utiliza dos protocolos: protocolo basado en historial y protocolo de inundación. El protocolo basado en la historia se utiliza cuando las cebras están pastando y no se mueven demasiado. Si bien esto podría ser útil para rastrear cebras, no es adecuado para rastrear excursionistas porque es muy probable que dos excursionistas se encuentren solo una vez en un sendero. En el protocolo de inundación, un nodo transfiere sus datos a un vecino siempre que encuentre uno y no elimina su propia copia hasta que encuentra una estación base. Sin considerar bucles de enrutamiento, filtrado de paquetes y agrupación, el tamaño de los datos en un nodo crecerá de forma exponencial y agotará la energía y la memoria de un nodo sensor en poco tiempo. En cambio, Cenwits utiliza un protocolo de saludo de cuatro fases para asegurar que un nodo transmita solo la cantidad de información que el otro nodo está dispuesto a recibir. Mientras que ZebraNet está diseñado para un gran grupo de sensores que se mueven juntos en la misma dirección con la misma velocidad, Cenwits está diseñado para ser utilizado en el escenario donde los sensores se mueven en direcciones diferentes a velocidades diferentes. La arquitectura de redes tolerantes a retrasos aborda algunos problemas importantes en redes desafiadas (con recursos limitados) [9]. Si bien este trabajo se centra principalmente en la interoperabilidad de redes desafiadas, algunos problemas relacionados con las redes ocasionalmente conectadas son similares a los que hemos abordado en CenWits. Entre todos estos sistemas, el PLB de lujo y Lifetch están diseñados para el seguimiento de ubicación en áreas silvestres. Sin embargo, ambos sistemas requieren una red conectada. Luxury PLB requiere que el usuario transmita una señal a un satélite, mientras que Lifetch requiere conexión a la red GSM/GPRS. El PLB de lujo transmite información de ubicación solo cuando ocurre un accidente. Sin embargo, si el usuario está enterrado en la nieve o cae en un profundo cañón, hay casi ninguna posibilidad de que la señal pase y sea transmitida al equipo de rescate. Esto se debe a que la transmisión por satélite necesita línea de visión. Además, dado que no hay un historial conocido de la ubicación de los usuarios, no es posible para el equipo de rescate inferir la ubicación actual del usuario. Otra desventaja de los PLB de lujo es que un transmisor satelital es muy costoso, con un precio que oscila alrededor de los $750. Lifetch intenta transmitir la información de ubicación a través de GSM/GPRS y una red de sensores ad hoc que utiliza AODV como protocolo de enrutamiento. Sin embargo, tener recepción celular en áreas remotas en zonas silvestres, por ejemplo. Los parques nacionales estadounidenses son poco probables. Además, es sumamente improbable que los dispositivos de comunicación individual (ICUs) utilizados por excursionistas puedan formar una red ad hoc en una extensa área silvestre. Esto se debe a que los excursionistas son móviles y es muy poco probable tener varias UCIs colocadas lo suficientemente densas como para reenviar paquetes incluso en una ruta de senderismo muy popular. CenWits está diseñado para abordar las limitaciones de sistemas como luxury PLB y Lifetch. Está diseñado para proporcionar a excursionistas, esquiadores y escaladores que realizan sus actividades principalmente en áreas silvestres una mayor probabilidad de transmitir su información de ubicación a un centro de control. No depende de una conectividad constante con ningún medio de comunicación. Más bien, transmite información de usuario a usuario, llegando finalmente a un centro de control. A diferencia de varios de los sistemas discutidos hasta ahora, no requiere que la unidad de los usuarios esté constantemente encendida. De hecho, puede descubrir la ubicación de una víctima, incluso si el sensor de la víctima estaba apagado en el momento del accidente y ha permanecido apagado desde entonces. CenWits resuelve uno de los mayores problemas que aquejan a los sistemas modernos de búsqueda y rescate: tiene una capacidad de almacenamiento in situ inherente. Esto significa que alguien dentro de la red tendrá acceso a la información de la última ubicación conocida de la víctima, y posiblemente también a su dirección y velocidad. Figura 1: El excursionista A y el excursionista B no están dentro del alcance uno del otro 3. CENWITS Describimos CenWits en el contexto de localizar excursionistas perdidos/heridos en áreas silvestres. Cada excursionista lleva un sensor (motes MICA2 en nuestro prototipo) equipado con un receptor GPS y un transmisor RF. Cada sensor se le asigna un ID único y mantiene su ubicación actual basada en la señal recibida por su receptor GPS. También emite balizas periódicamente. Cuando dos sensores están dentro del alcance uno del otro, registran la presencia mutua (información de testigo) y también intercambian la información de testigo que registraron anteriormente. La idea clave aquí es que si dos sensores entran en el rango el uno del otro en cualquier momento, se convierten en testigos mutuos. Más tarde, si el excursionista que lleva uno de estos sensores se pierde, el otro sensor puede transmitir la última ubicación conocida (presenciada) del excursionista perdido. Además, al intercambiar la información de testigos que cada sensor registró previamente, la información de testigos se propaga más allá de un contacto directo entre dos sensores. Para transmitir la información de testigos a un centro de procesamiento o a un equipo de rescate, se establecen puntos de acceso en ubicaciones conocidas por las que se espera que pasen los excursionistas, por ejemplo, en los comienzos de senderos, finales de senderos, intersecciones de diferentes senderos, miradores panorámicos, áreas de descanso, y así sucesivamente. Cuando un nodo sensor está en las cercanías de un punto de acceso, toda la información de testigos almacenada en ese sensor se transfiere automáticamente al punto de acceso. Los puntos de acceso están conectados a un centro de procesamiento a través de un satélite u otra red. La información de los testigos se descarga al centro de procesamiento desde varios puntos de acceso a intervalos regulares. En caso de que se pierda la conexión a un punto de acceso, la información de esa conexión de 1 A solo es necesaria entre los puntos de acceso y un centro de procesamiento. No es necesario ninguna conexión entre diferentes puntos de acceso. 182 puntos de acceso pueden ser descargados manualmente, por ejemplo, por UAVs. Para estimar la velocidad, ubicación y dirección de un excursionista en cualquier momento, se procesa toda la información de testigos de ese excursionista que ha sido recopilada desde varios puntos de acceso. Figura 2: El excursionista A y el excursionista B están dentro del alcance uno del otro. A registra la presencia de B y B registra la presencia de A. A y B se convierten en testigos el uno del otro. Figura 3: El excursionista A se encuentra en el rango de un punto de acceso. Sube su información de testigo grabada y borra su memoria. Un ejemplo de cómo opera CenWits se ilustra en las Figuras 1, 2 y 3. Primero, los excursionistas A y B están en dos senderos cercanos, pero fuera del alcance el uno del otro (Figura 1). Este es un escenario muy común durante una caminata. Por ejemplo, en una caminata popular de cuatro horas, un excursionista podría encontrarse con hasta 20 otros excursionistas. Esto equivale a un encuentro cada 12 minutos en promedio. Un excursionista lento puede recorrer 1 milla (5,280 pies) por hora. Por lo tanto, en 12 minutos un excursionista lento puede recorrer hasta 1056 pies. Esto implica que si pusiéramos a 20 excursionistas en una caminata de ida de 4 horas de duración de manera equitativa, el alcance de cada nodo sensor debería ser de al menos 1056 pies para que puedan comunicarse continuamente entre sí. La intensidad de la señal comienza a disminuir rápidamente para que dos nodos Mica2 se comuniquen entre sí cuando están a 180 pies de distancia, y se pierde por completo cuando están a 230 pies de distancia entre sí[7]. Por lo tanto, para que los sensores formen una red de sensores en un sendero de 4 horas de caminata, debería haber al menos 120 excursionistas dispersos de manera uniforme. Claramente, esto es sumamente improbable. De hecho, en un sendero menos popular de 4 horas, es posible que solo te encuentres con unos cinco excursionistas más. CenWits aprovecha el hecho de que los sensores pueden comunicarse entre sí y registrar su presencia. Dada una velocidad de caminata de una milla por hora (88 pies por minuto) y un rango de Mica2 de aproximadamente 150 pies para la transmisión de radio fuera de la línea de visión, dos excursionistas tienen alrededor de 150/88 = 1.7 minutos para descubrir la presencia del otro e intercambiar su información de testigo. Por lo tanto, diseñamos nuestro sistema para que cada sensor emita una baliza cada minuto y medio. En la Figura 2, el sensor del excursionista B emite una baliza cuando A está dentro del alcance, lo que activa a A para intercambiar datos con B. A comunica la siguiente información a B: Mi identificación es A; vi a C a la 1:23 PM en (39° 49.3277655, 105° 39.1126776), vi a E a las 3:09 PM en (40° 49.2234879, 105° 20.3290168). B luego responde: Mi identificación es B; vi a K a las 11:20 AM en (39° 51.4531655, 105° 41.6776223). Además, el registro A indica que vi a B a las 4:17 PM en (41° 29.3177354, 105° 04.9106211) y el registro B indica que vi a A a las 4:17 PM en (41° 29.3177354, 105° 04.9106211). B se dirige hacia su campamento nocturno mientras que A regresa al punto de inicio del sendero donde hay un punto de acceso (AP), que emite una baliza cada 5 segundos para evitar perder de vista a cualquier excursionista. A vierte toda la información de los testigos que ha recopilado en el punto de acceso. Esto se muestra en la Figura 3. 3.1 Información del testigo: Almacenamiento Una preocupación crítica es que hay una cantidad limitada de memoria disponible en los motes (4 KB de memoria SDRAM, 128 KB de memoria flash y 4-512 KB de memoria EEPROM). Por lo tanto, es importante organizar la información de los testigos de manera eficiente. CenWits almacena la información de los testigos en cada nodo como un conjunto de registros de testigos (el formato se muestra en la Figura 4. 1 B ID de Nodo Tiempo de Registro Ubicación X, Y Tiempo de Salto 1 B 3 B 8 B 3 B Figura 4: Formato de un registro de testigo. Cuando dos nodos i y j se encuentran, cada nodo genera un nuevo registro de testigo. En el registro de testigos generado por i, el ID del nodo es j, el Tiempo del Registro es el tiempo actual en el reloj de i, (X,Y) son las coordenadas de la ubicación de i que i registró más recientemente (ya sea desde un satélite o un LP), el Tiempo de la Ubicación es el momento en que esta ubicación fue registrada, y el Conteo de Saltos es 0. Cada nodo recibe un identificador único de nodo cuando entra en un sendero. En nuestro prototipo actual, hemos asignado un byte para el Id de Nodo, aunque esto puede aumentarse a dos o más bytes si se espera la presencia de un gran número de excursionistas al mismo tiempo. Podemos representar el tiempo en 17 bits con una precisión de un segundo. Por lo tanto, hemos asignado 3 bytes cada uno para el Tiempo de Registro y el Tiempo de Ubicación. La circunferencia de la Tierra es aproximadamente de 40,075 kilómetros. Si usamos un número de 32 bits para representar tanto la longitud como la latitud, la precisión que obtenemos es de 40,075,000/232 = 0.0093 metros = 0.37 pulgadas, lo cual es bastante preciso para nuestras necesidades. Por lo tanto, hemos asignado 4 bytes cada uno para las coordenadas X e Y de la ubicación de un nodo. De hecho, se puede lograr una precisión de un pie utilizando solo 27 bits. 3.2 Punto de Ubicación e Inferencia de Ubicación Aunque un receptor GPS proporciona información de ubicación precisa, tiene sus limitaciones. En cañones y bosques lluviosos, un receptor GPS no funciona. Cuando hay una densa cobertura de nubes, los usuarios de GPS han experimentado inexactitudes en la ubicación reportada también. Desafortunadamente, muchas rutas de senderismo se encuentran en bosques densos y cañones, y no es raro que llueva después de que los excursionistas comiencen a caminar. Para abordar esto, CenWits incorpora la idea de puntos de ubicación (PU). Un punto de ubicación puede actualizar un nodo sensor con su ubicación actual siempre que el nodo esté cerca de ese PU. Los LPs se colocan en diferentes ubicaciones en un área salvaje donde los receptores GPS no funcionan. Un LP es un dispositivo muy simple que emite información de ubicación pregrabada en intervalos de tiempo regulares. Se pueden colocar en lugares de difícil acceso como cañones profundos y densas selvas tropicales simplemente dejándolos caer desde un avión. Los LPs permiten a un nodo sensor determinar su ubicación actual con mayor precisión. Sin embargo, no son un requisito esencial de CenWits. Si un LP se queda sin energía, los CenWits seguirán funcionando correctamente. Figura 5: receptor GPS no funciona correctamente. Los sensores tienen que depender de la posición local para proporcionar coordinación. En la Figura 5, B no puede recibir la señal de GPS debido al mal tiempo. Luego se encuentra con A en el sendero, quien tampoco tiene recepción de GPS. Sus sensores registran la presencia del otro. Después de 10 minutos, A está dentro del alcance de un LP que proporciona información de ubicación precisa a A. Cuando A regresa al punto de inicio del sendero y carga sus datos (Figura 6), el sistema puede dibujar un círculo centrado en el LP desde el cual A obtuvo información de ubicación para el rango de ubicación de encuentro de A y B. Al superponer este círculo con el mapa de senderos, se pueden inferir dos o tres posibles ubicaciones de encuentro. Por lo tanto, cuando se requiere un rescate, la posible ubicación de B se puede inferir mejor (Ver Figuras 7 y 8). Figura 6: A ha regresado al punto de inicio del sendero, informa la hora del encuentro con B a AP, pero no proporciona información de ubicación a AP. Figura 7: B sigue desaparecido después del atardecer. CenWits infiere el último punto de contacto y dibuja el círculo de posibles ubicaciones actuales basado en la velocidad promedio de senderismo. CenWits requiere que los relojes de los diferentes nodos de sensores estén ligeramente sincronizados entre sí. Una sincronización así es trivial cuando hay cobertura de GPS disponible. Además, los nodos sensores en CenWits sincronizan sus relojes siempre que estén dentro del alcance de un AP o un LP. La Figura 8: Basado en un paisaje superpuesto, B podría haber caminado por el camino equivocado y caído por un acantilado. Las áreas de rescate calientes pueden determinar la precisión de sincronización necesaria de Cenwits en el orden de un segundo aproximadamente. Si los relojes están sincronizados dentro de un rango de un segundo, no importa si A se encontró con B a las 12:3745 o a las 12:3746 en el ordenamiento de los eventos de testigos e inferir el camino. 4. CenWits emplea varios mecanismos importantes para conservar energía y memoria. Es importante tener en cuenta que, si bien los nodos de sensores actuales tienen una cantidad limitada de memoria, se espera que los futuros nodos de sensores tengan mucha más memoria. Con esto en mente, el enfoque principal en nuestro diseño es proporcionar un equilibrio entre la cantidad de memoria disponible y la cantidad de consumo de energía. 4.1 Gestión de memoria El tamaño de la información de testigo almacenada en un nodo puede ser muy grande. Esto se debe a que el nodo puede encontrarse con varios otros nodos durante una caminata, y puede terminar acumulando una gran cantidad de información de testigos con el tiempo. Para abordar este problema, CenWits permite que un nodo libere proactivamente algunas partes de su memoria periódicamente. Esto plantea una pregunta interesante sobre cuándo y cuál registro de testigo debería ser eliminado de la memoria de un nodo. CenWits utiliza tres criterios para determinar esto: cantidad de registros, cantidad de saltos y brecha de registros. El recuento de registros se refiere al número de registros de testigos con el mismo ID de nodo que un nodo ha almacenado en su memoria. Un nodo mantiene un parámetro entero MAX RECORD COUNT. Almacena como máximo MAX RECORD COUNT registros de testigo de cualquier nodo. Cada registro de testigo tiene un campo de recuento de saltos que almacena el número de veces (saltos) que este registro ha sido transferido desde su creación. Inicialmente, este campo se establece en 0. Cuando un nodo recibe un registro de testigo de otro nodo, incrementa en 1 el contador de saltos de ese registro. Un nodo mantiene un parámetro entero llamado CONTADOR MÁXIMO DE SALTOS. Mantiene en su memoria solo aquellos registros de testigos cuyo recuento de saltos es menor que el RECUNTO MÁXIMO DE SALTOS. El parámetro MAX HOP COUNT proporciona un equilibrio entre dos objetivos conflictivos: (1) Asegurar que un registro de testigo se haya propagado y almacenado en tantos nodos como sea posible, para que tenga una alta probabilidad de ser descargado en algún punto de acceso lo más rápido posible; y (2) Asegurar que un registro de testigo se almacene solo en unos pocos nodos, para que no obstruya demasiado la memoria combinada de todos los nodos sensores. Decidimos utilizar el conteo de saltos en lugar del tiempo de vida para decidir cuándo descartar un paquete. La razón principal de esto es que la probabilidad de que un paquete llegue a un AP aumenta a medida que se suman los saltos. Por ejemplo, cuando el recuento de saltos es de 5 para un registro específico, el registro está en al menos 5 nodos sensores. Por otro lado, si descartamos registros antiguos, sin tener en cuenta el recuento de saltos, no hay garantía de que el registro esté presente en algún otro nodo sensor. La brecha de registro se refiere a la diferencia de tiempo entre los tiempos de registro de dos registros de testigos con el mismo identificador de nodo. Para ahorrar memoria, un nodo n garantiza que la brecha de registro entre dos registros testigo con el mismo ID de nodo sea al menos MIN RECORD GAP. Para cada identificador de nodo i, n almacena el registro de testigo con el tiempo de registro más reciente rti, el testigo con el tiempo de registro más reciente que sea al menos MIN RECORD GAP unidades de tiempo antes de rti, y así sucesivamente hasta alcanzar el límite de cantidad de registros (MAX RECORD COUNT). Cuando un nodo tiene poco espacio en memoria, ajusta los tres parámetros, CANTIDAD MÁXIMA DE REGISTROS, CANTIDAD MÁXIMA DE SALTOS y BRECHA MÍNIMA DE REGISTROS para liberar algo de memoria. Decrementa el recuento máximo de registros y el recuento máximo de saltos, e incrementa el espacio mínimo entre registros. Luego borra primero todos los registros de testigos cuyo recuento de saltos excede el valor reducido de REC. DE SALTO MÁXIMO, y luego borra los registros de testigos para satisfacer los criterios de brecha de registros. Además, cuando un nodo tiene espacio de memoria adicional disponible, por ejemplo, después de descargar su información de testigo en un punto de acceso, restablece MAX RECORD COUNT, MAX HOP COUNT y MIN RECORD GAP a algunos valores predefinidos. 4.2 Gestión de energía Una ventaja importante de utilizar sensores para fines de seguimiento es que podemos regular el comportamiento de un nodo sensor basándonos en las condiciones actuales. Por ejemplo, mencionamos anteriormente que un sensor debería emitir una baliza cada 1.7 minutos, considerando una velocidad de senderismo de 1 milla por hora. Sin embargo, si un usuario se está moviendo a 10 pies por segundo, un faro debería ser emitido cada 10 segundos. Si un usuario no se está moviendo en absoluto, se puede emitir una baliza cada 10 minutos. Durante la noche, un sensor puede ponerse en modo de reposo para ahorrar energía, cuando es poco probable que un usuario se mueva en un período de tiempo relativamente largo. Si un usuario está activo solo durante ocho horas al día, podemos poner el sensor en modo de suspensión durante las otras 16 horas y así ahorrar 2/3 de la energía. Además, un nodo sensor puede optar por no enviar ningún beacon durante ciertos intervalos de tiempo. Por ejemplo, supongamos que el excursionista A ha comunicado su información de testigo a otros tres excursionistas en los últimos cinco minutos. Si tiene poca energía, puede pasar al modo de recepción o al modo de suspensión durante los próximos diez minutos. Entrará en modo de recepción si aún está dispuesto a recibir información adicional de testigos que encuentre en los próximos diez minutos. Entra en modo de suspensión si tiene una cantidad extremadamente baja de energía. Las limitaciones de ancho de banda y energía de los nodos sensores requieren que la cantidad de datos transferidos entre los nodos se reduzca al mínimo. Se ha observado que en algunos escenarios se podrían ejecutar 3000 instrucciones por el mismo costo energético de enviar un bit a 100m por radio [15]. Para reducir la cantidad de transferencia de datos, CenWits emplea un protocolo de saludo que dos nodos ejecutan cuando se encuentran. El objetivo de este protocolo es asegurar que un nodo transmita solo la cantidad de información de testigo que el otro nodo esté dispuesto a recibir. Este protocolo se inicia cuando un nodo i recibe una baliza que contiene el ID del nodo emisor j y i no ha intercambiado información de testigos con j en las últimas δ unidades de tiempo. Supongamos que i < j. El protocolo consta de cuatro fases (Ver Figura 9): 1. Fase I: El nodo i envía sus restricciones de recepción y la cantidad de registros de testigos que tiene en su memoria. 2. Fase II: Al recibir este mensaje de i, j envía sus restricciones de recepción y la cantidad de registros de testigos que tiene en su memoria. 3. Fase III: Al recibir el mensaje anterior de j, i envía su información de testigo (filtrada en base a las restricciones de recepción recibidas en la fase II). 4. Fase IV: Después de recibir los registros de testigos de i, j envía su información de testigos (filtrada en base a las restricciones de recepción recibidas en la fase I). j <Restricciones, tamaño de información de testigos> <Restricciones, tamaño de información de testigos> <Información de testigos filtrada> <Información de testigos filtrada> i j j j i i i Figura 9: Protocolo de Saludo de Cuatro Fases (i < j) Las restricciones de recepción son una función de la memoria y la potencia. En el caso más general, están compuestos por los tres parámetros (cantidad de registros, cantidad de saltos y brecha de registros) utilizados para la gestión de memoria. Si i tiene poca memoria, especifica el número máximo de registros que está dispuesto a aceptar de j. Del mismo modo, puedo pedirle a J que envíe solo aquellos registros que tengan un valor de recuento de saltos menor que el RECUNTO MÁXIMO DE SALTOS − 1. Finalmente, puedo incluir el valor de su brecha mínima de registros en sus restricciones de recepción. Ten en cuenta que el protocolo de saludo es beneficioso tanto para i como para j. Ahorran memoria al recibir solo la cantidad de información que están dispuestos a aceptar y conservan energía al enviar solo tantos registros de testigos como sea necesario. Resulta que filtrar registros de testigos basándose en el ESPACIO MÍNIMO DE REGISTROS es complejo. Se requiere que los registros de testigos de cualquier nodo dado estén organizados en un orden clasificado por sus valores de tiempo de registro. Mantener este orden ordenado es complejo en memoria, ya que nuevos registros de testigos con el mismo identificador de nodo pueden llegar más tarde y tener que ser insertados entre ellos para preservar el orden ordenado. Por esta razón, las restricciones de recepción en el prototipo actual de CenWits no incluyen brechas de registros. Supongamos que i especifica un valor de conteo de saltos de 3. En este caso, j verifica el campo de conteo de saltos de cada registro de testigo antes de enviarlos. Si el valor de saltos es mayor que 3, el registro no se transmite. 4.3 Grupos y Particiones Para reducir aún más la comunicación y aumentar la vida útil de nuestro sistema, introducimos el concepto de grupos. La idea se basa en el concepto de regiones abstractas presentado en [20]. Un grupo es un conjunto de n nodos que puede ser definido en términos de conectividad por radio, ubicación geográfica u otras propiedades de los nodos. Todos los nodos dentro de un grupo pueden comunicarse directamente entre sí y comparten información para mantener su visión del mundo externo. En cualquier momento, un grupo tiene exactamente un líder que se comunica con 185 nodos externos en nombre de todo el grupo. Un grupo puede ser estático, lo que significa que la membresía del grupo no cambia a lo largo del tiempo, o puede ser dinámico, en cuyo caso los nodos pueden abandonar o unirse al grupo. Para simplificar nuestro análisis y explicar las ventajas del grupo, primero discutimos los grupos estáticos. Un grupo estático se forma al inicio de un sendero de senderismo o pista de esquí. Supongamos que hay cinco miembros de la familia que quieren ir de excursión al Parque Nacional de las Montañas Rocosas. Antes de que estos miembros comiencen su caminata, a cada uno de ellos se le entrega un nodo sensor y la información se ingresa en el sistema de que los cinco nodos forman un grupo. A cada miembro del grupo se le asigna un identificador único y cada miembro del grupo conoce a los demás miembros del grupo. El grupo, en su totalidad, también se le asigna un identificador para distinguirlo de otros grupos en el sistema. Figura 10: Un grupo de cinco personas. El nodo 2 es el líder del grupo y está comunicándose en nombre del grupo con un nodo externo 17. Todos los demás (mostrados en un tono más claro) están en modo de suspensión. A medida que el grupo avanza por el sendero, intercambia información con otros nodos o grupos que se encuentran en su camino. En cualquier momento, solo un miembro del grupo, llamado el líder, envía y recibe información en nombre del grupo y todos los otros n − 1 miembros del grupo se ponen en modo de suspensión (Ver Figura 10). Es esta propiedad de los grupos la que nos ahorra energía. El liderazgo del grupo se multiplexa en el tiempo entre los miembros del grupo. Esto se hace para asegurarse de que un solo nodo no se quede sin batería debido al intercambio continuo de información. Por lo tanto, después de cada t segundos, el liderazgo se transfiere a otro nodo, llamado sucesor, y el líder (ahora un miembro ordinario) se pone a dormir. Dado que la energía es costosa, no implementamos un algoritmo extenso de elección para seleccionar al sucesor. En cambio, elegimos al sucesor en base al identificador del nodo. El nodo con el siguiente identificador más alto en el grupo es elegido como el sucesor. El último nodo, por supuesto, elige el nodo con el id más bajo como su sucesor. Ahora discutimos los esquemas de almacenamiento de datos para grupos. La memoria es un recurso escaso en los nodos sensores y, por lo tanto, es importante que la información de testigos se almacene de manera eficiente entre los miembros del grupo. El almacenamiento eficiente de datos no es una tarea trivial cuando se trata de grupos. El compromiso está entre la simplicidad del esquema y el ahorro de memoria. Un esquema más simple incurre en un menor costo energético en comparación con un esquema más sofisticado, pero también ofrece menores ahorros de memoria. Esto se debe a que en un esquema más complicado, los miembros del grupo tienen que coordinarse para actualizar y almacenar información. Después de considerar varios esquemas diferentes, hemos llegado a la conclusión de que no hay un esquema de almacenamiento óptimo para grupos. El sistema debería ser capaz de adaptarse según sus requisitos. Si los miembros del grupo tienen poca batería, entonces el grupo puede adaptar un esquema que sea más eficiente en términos de energía. Del mismo modo, si los miembros del grupo se están quedando sin memoria, pueden adaptar un esquema que sea más eficiente en términos de memoria. Primero presentamos un esquema simple que es muy eficiente en energía pero no ofrece ahorros significativos en memoria. Luego presentamos un esquema alternativo que es mucho más eficiente en términos de memoria. Como ya se mencionó, un grupo solo puede recibir información a través del líder del grupo. Cuando el líder se encuentra con un nodo externo e, recibe información de ese nodo y la guarda. En nuestro primer esquema, cuando el intervalo de tiempo para el líder expira, el líder pasa esta nueva información que recibió de e a su sucesor. Esto es importante porque durante el próximo intervalo de tiempo, si el nuevo líder se encuentra con otro nodo externo, debería poder transmitir información sobre todos los nodos externos que este grupo ha presenciado hasta ahora. Por lo tanto, la información se replica completamente en todos los nodos para mantener la vista correcta del mundo. Nuestro primer esquema no ofrece ahorro de memoria, pero es altamente eficiente en energía y puede ser una buena elección cuando los miembros del grupo tienen poca batería. Excepto por el momento en que se cambia el liderazgo, todos los n − 1 miembros están dormidos en cualquier momento dado. Esto significa que un único miembro está activo durante t segundos una vez cada n∗t segundos y, por lo tanto, solo tiene que gastar aproximadamente 1/n de su energía. Por lo tanto, si hay 5 miembros en un grupo, ahorramos un 80% de energía, lo cual es enorme. Se puede ahorrar más energía aumentando el tamaño del grupo. Ahora presentamos un esquema alternativo de almacenamiento de datos que tiene como objetivo ahorrar memoria a costa de energía. En este esquema dividimos el grupo en lo que llamamos particiones. Las particiones pueden ser consideradas como subgrupos dentro de un grupo. Cada partición debe tener al menos dos nodos en ella. Los nodos dentro de una partición se llaman pares. Cada partición tiene un par designado como líder de la partición. El líder de la partición permanece en modo de recepción en todo momento, mientras que todos los demás pares de una partición permanecen en modo de suspensión. El liderazgo de la partición se multiplexa en el tiempo entre los pares para asegurarse de que un solo nodo no se quede sin batería. Como antes, un grupo tiene exactamente un líder y el liderazgo se multiplexa en el tiempo entre particiones. El líder del grupo también actúa como líder de la partición a la que pertenece (Ver Figura 11). En este esquema, todos los líderes de partición participan en el intercambio de información. Cuando un grupo se encuentra con un nodo externo e, cada líder de partición recibe toda la información de testigo, pero solo almacena un subconjunto de esa información después de filtrar. La información se filtra de tal manera que cada líder de partición solo tiene que almacenar B/K bytes de datos, donde K es el número de particiones y B es el número total de bytes recibidos de e. De manera similar, cuando un grupo desea enviar información de testigo a e, cada líder de partición envía solo B/K bytes que se almacenan en la partición a la que pertenece. Sin embargo, antes de que un líder de partición pueda enviar información, debe cambiar de modo de recepción a modo de envío. Además, los líderes de las particiones deben coordinarse entre sí para asegurarse de que no envíen su información de testigo al mismo tiempo, es decir, que sus mensajes no colisionen. Todo esto se logra haciendo que el líder del grupo envíe una señal a cada líder de partición a su vez. Figura 11: La figura muestra un grupo de ocho nodos divididos en cuatro particiones de 2 nodos cada una. El nodo 1 es el líder del grupo, mientras que los nodos 2, 9 y 7 son líderes de partición. Todos los demás nodos están en modo de suspensión. Dado que el liderazgo de la partición está multiplexado en el tiempo, es importante que cualquier información recibida por el líder de la partición, p1, se transmita al siguiente líder, p2. Esto debe hacerse para asegurarse de que p2 tenga toda la información que pueda necesitar para enviar cuando se encuentre con otro nodo externo durante su intervalo de tiempo. Una forma de lograr esto es despertar a p2 justo antes de que expire el intervalo de tiempo de p1 y luego hacer que p1 transfiera información solo a p2. Una alternativa es despertar a todos los pares en el momento del cambio de liderazgo, y luego hacer que p1 transmita la información a todos los pares. Cada par ahorra la información enviada por p1 y luego vuelve a dormir. En ambos casos, los pares envían un acuse de recibo al líder de la partición después de recibir la información. En el método anterior, solo un nodo necesita despertar en el momento del cambio de liderazgo, pero la cantidad de información que debe ser transmitida entre los nodos aumenta a medida que pasa el tiempo. En el último caso, todos los nodos deben ser despertados en el momento del cambio de liderazgo, pero se debe transmitir una pequeña cantidad de información cada vez entre los pares. Dado que la comunicación es mucho más costosa que poner en marcha los nodos, preferimos el segundo método sobre el primero. Un grupo puede dividirse en particiones de más de una manera. Por ejemplo, supongamos que tenemos un grupo de seis miembros. Podemos dividir este grupo en tres particiones de dos compañeros cada una, o en dos particiones con tres compañeros cada una. La elección una vez más depende de los requisitos del sistema. Unas pocas particiones grandes harán que el sistema sea más eficiente en términos de energía. Esto se debe a que en esta configuración, un mayor número de nodos permanecerá en modo de reposo en cualquier momento dado. Por otro lado, varias particiones pequeñas harán que la memoria del sistema sea eficiente, ya que cada nodo tendrá que almacenar menos información (Ver Figura 12). Un grupo que está dividido en particiones debe ser capaz de readaptarse cuando un nodo se va o se queda sin batería. Esto es crucial porque una partición debe tener al menos dos nodos en cualquier momento para tolerar el fallo de un nodo. Por ejemplo, en la figura 3 (a), si el nodo 2 o el nodo 5 mueren, la partición queda con solo un nodo. Más adelante, si ese único nodo en la partición muere, toda la información de testigo almacenada en esa partición se perderá. Hemos ideado un protocolo muy simple para resolver este problema. Primero explicamos cómo se particiona un grupo de seis nodos. En (a), un grupo se divide en tres particiones de dos nodos. El nodo 1 es el líder del grupo, los nodos 9 y 5 son líderes de partición, y los nodos 2, 3 y 6 están en modo de suspensión. En (b) el grupo se divide en dos particiones de tres nodos. El nodo 1 es el líder del grupo, el nodo 9 es el líder de la partición y los nodos 2, 3, 5 y 6 están en modo de suspensión. Las particiones se ajustan cuando un par muere, y luego explique qué sucede si muere el líder de la partición. Supongamos que el nodo 2 en la figura 3 (a) muere. Cuando el nodo 5, el líder de la partición, envía información al nodo 2, no recibe un acuse de recibo de este y concluye que el nodo 2 ha muerto. En este punto, el nodo 5 contacta a otros líderes de partición (nodos 1 ... 9) utilizando un mensaje de difusión e informa que uno de sus pares ha fallecido. Al escuchar esto, cada líder de partición informa al nodo 5 (i) el número de nodos en su partición, (ii) un nodo candidato que el nodo 5 puede tomar si el número de nodos en su partición es mayor que 2, y (iii) la cantidad de información de testigo almacenada en su partición. Al escuchar a cada líder, el nodo 5 elige el nodo candidato de la partición con el mayor número (debe ser mayor que 2) de pares, y envía un mensaje de regreso a todos los líderes. El nodo 5 luego envía datos a su nuevo par para asegurarse de que la información se replique dentro de la partición. Sin embargo, si todas las particiones tienen exactamente dos nodos, entonces el nodo 5 debe unirse a otra partición. Elige la partición que tenga la menor cantidad de información de testigo para unirse. Envía su información de testigo al nuevo líder de partición. La información de los testigos y la actualización de la membresía se propagan a todos los pares durante el próximo cambio de liderazgo de la partición. Ahora consideramos el caso en el que el líder de la partición muere. Si esto sucede, entonces esperamos a que cambie el liderazgo de la partición y que el nuevo líder de la partición finalmente descubra que un par ha fallecido. Una vez que el nuevo líder de la partición descubre que necesita más pares, continúa con el protocolo explicado anteriormente. Sin embargo, en este caso, perdemos información que el líder de partición anterior podría haber recibido justo antes de morir. Este problema se puede resolver implementando un protocolo más riguroso, pero hemos decidido renunciar a la precisión para ahorrar energía. Nuestro diseño actual utiliza multiplexación por división de tiempo para programar los modos de activación y suspensión en los nodos del sensor. Sin embargo, el trabajo reciente sobre sensores de activación por radio [10] puede utilizarse para programar de manera más eficiente. Planeamos incorporar sensores de activación por radio en CenWits cuando el hardware esté maduro. El algoritmo para concluir que un nodo ha muerto puede hacerse más riguroso al hacer que el líder de la partición consulte al nodo sospechoso varias veces. 187 5. EVALUACIÓN DEL SISTEMA Un sensor está limitado en la cantidad de memoria y energía. En general, la cantidad de memoria necesaria y el consumo de energía dependen de una variedad de factores como la densidad de nodos, el número de encuentros con excursionistas y el número de puntos de acceso. En esta sección, proporcionamos una estimación de cuánto tiempo durará la energía de un mote MICA2 bajo ciertas suposiciones. Primero, asumimos que cada nodo sensor lleva alrededor de 100 registros de testigos. Al encontrarse con otro excursionista, un nodo sensorial transmite 50 registros de testigos y recibe 50 nuevos registros de testigos. Dado que cada registro tiene una longitud de 16 bytes, tomará 0.34 segundos transmitir 50 registros y otros 0.34 segundos recibir 50 registros a través de un enlace de 19200 bps. El consumo de energía de MICA2 debido al procesamiento de la CPU, la transmisión y la recepción son aproximadamente de 8.0 mA, 7.0 mA y 8.5 mA por hora respectivamente [18], y la capacidad de una batería alcalina es de 2500mAh. Dado que el módulo de radio de Mica2 es semidúplex y asumiendo que la CPU está siempre activa cuando un nodo está despierto, el consumo de energía debido a la transmisión es de 8 + 8.5 = 16.5 mA por hora y debido a la recepción es de 8 + 7 = 15 mA por hora. Por lo tanto, el consumo de energía promedio debido a la transmisión y recepción es (16.5 + 15)/2 = 15.75 mA por hora. Dado que la capacidad de una batería alcalina es de 2500 mAh, una batería debería durar 2500/15.75 = 159 horas de transmisión y recepción. Un encuentro entre dos excursionistas resulta en el intercambio de alrededor de 50 registros de testigos que toma aproximadamente 0.68 segundos según se calculó anteriormente. Por lo tanto, una sola batería alcalina puede durar para (159 ∗ 60 ∗ 60)/0.68 = 841764 encuentros de excursionistas. Suponiendo que un nodo emite una baliza cada 90 segundos y que se produce un encuentro con un excursionista cada vez que se emite una baliza (escenario más desfavorable), una sola batería alcalina durará (841764 ∗ 90)/(30 ∗ 24 ∗ 60 ∗ 60) = 29 días. Dado que un Mica2 está equipado con dos baterías, un sensor Mica2 puede permanecer en funcionamiento durante aproximadamente dos meses. Ten en cuenta que este cálculo es preliminar, ya que asume que los excursionistas están activos las 24 horas del día y que un encuentro con un excursionista ocurre cada 90 segundos. En un escenario más realista, se espera que el suministro de energía dure por un período de tiempo mucho más largo. Además, este período de tiempo aumentará significativamente cuando grupos de excursionistas se muevan juntos. Finalmente, la vida útil de un sensor que funciona con dos baterías puede aumentarse significativamente mediante el uso de técnicas de recolección de energía y técnicas de cosecha de energía [16, 14]. 6. IMPLEMENTACIÓN DEL PROTOTIPO Hemos implementado un prototipo de CenWits en el sensor MICA2 de 900MHz ejecutando Mantis OS 0.9.1b. Uno de los sensores está equipado con el módulo GPS MTS420CA, que es capaz de medir la presión barométrica y la aceleración en dos ejes, además de rastrear la ubicación GPS. Utilizamos SiRF, el protocolo de comunicación serie, para controlar el módulo GPS. SiRF tiene un conjunto de comandos extenso, pero solo registramos las coordenadas X e Y. Un registro de testigo tiene una longitud de 16 bytes. Cuando un nodo se inicia, almacena su ubicación actual y emite periódicamente una baliza; en el prototipo, un nodo emite una baliza cada minuto. Hemos realizado una serie de experimentos con este prototipo. Un informe detallado sobre estos experimentos con los datos recopilados y fotografías de excursionistas, puntos de acceso, etc. está disponible en http://csel.cs.colorado.edu/∼huangjh/ Cenwits.index.htm. Aquí informamos los resultados de tres de ellos. En todos estos experimentos, hay tres puntos de acceso (A, B y C) donde los nodos depositan su información de testigo. Estos puntos de acceso también proporcionan información de ubicación a los nodos que se encuentran dentro de su alcance. Primero mostramos cómo CenWits puede ser utilizado para determinar la ruta de senderismo en la que un excursionista probablemente se encuentra y la velocidad a la que está caminando, e identificar áreas de búsqueda prioritarias en caso de que sea reportado como desaparecido. A continuación, mostramos los resultados de las técnicas de gestión de energía y memoria de CenWits en la conservación de la energía y la memoria de un nodo sensor en uno de nuestros experimentos. 6.1 Localización de excursionistas perdidos. El primer experimento se llama Contacto Directo. Es un experimento muy simple en el que un único excursionista parte de A, va a B y luego a C, para finalmente regresar a A (Ver Figura 13). El objetivo de este experimento es ilustrar que CenWits puede deducir la ruta que toma un excursionista procesando la información de los testigos. Figura 13: Registro de nodos de experimento de contacto directo (X,Y) Ubicación Salto Tiempo Conteo de Tiempo 1 15 (12,7) 15 0 1 33 (31,17) 33 0 1 46 (12,23) 46 0 1 10 (12,7) 10 0 1 48 (12,23) 48 0 1 16 (12,7) 16 0 1 34 (31,17) 34 0 Tabla 1: Información de testigos recopilada en el experimento de contacto directo. La información de los testigos arrojada en los tres puntos de acceso fue luego recopilada y procesada en un centro de control. Parte de la información de los testigos recopilada en el centro de control se muestra en la Tabla 1. Las ubicaciones X,Y en esta tabla corresponden a la información de ubicación proporcionada por los puntos de acceso A, B y C. A está ubicado en (12,7), B está ubicado en (31,17) y C está ubicado en (12,23). Tres puntos de encuentro (entre el excursionista 1 y los tres puntos de acceso) extraídos de esta información de testigo 188 se muestran en la Figura 13 (mostrados en cajas rectangulares). Por ejemplo, A,1 en 16 significa que 1 entró en contacto con A en el tiempo 16. Usando esta información, podemos inferir la dirección en la que el excursionista 1 se estaba moviendo y la velocidad a la que se estaba moviendo. Además, dado un mapa de senderos de esta área, es claramente posible identificar el sendero que tomó el excursionista 1. El segundo experimento se llama Inferencia Indirecta. Este experimento está diseñado para ilustrar que la ubicación, dirección y velocidad de un excursionista pueden ser inferidas por CenWits, incluso si el excursionista nunca se encuentra dentro del alcance de ningún punto de acceso. Ilustra la importancia de la información de testigos en aplicaciones de búsqueda y rescate. En este experimento, hay tres excursionistas, 1, 2 y 3. El excursionista 1 toma un sendero que pasa por los puntos de acceso A y B, mientras que el excursionista 3 toma un sendero que pasa por los puntos de acceso C y B. El excursionista 2 toma un sendero que no se encuentra en el rango de ningún punto de acceso. Sin embargo, este excursionista se encuentra con el excursionista 1 y 3 durante su caminata. Esto se ilustra en la Figura 14. Figura 14: Registro de nodos de experimento de inferencia indirecta (X,Y) Ubicación Salto Tiempo Tiempo Conteo 2 16 (12,7) 6 0 2 15 (12,7) 6 0 1 4 (12,7) 4 0 1 6 (12,7) 6 0 1 29 (31,17) 29 0 1 31 (31,17) 31 0 Tabla 2: Información de testigo recopilada del excursionista 1 en el experimento de inferencia indirecta. Parte de la información de testigos recopilada en el centro de control de los puntos de acceso A, B y C se muestra en las Tablas 2 y 3. Hay algunos datos interesantes en estas tablas. Por ejemplo, la hora y ubicación en algunos registros de testigos no es la misma que la hora del registro. Esto significa que el nodo que generó ese registro no tenía su ubicación más actualizada en el momento del encuentro. Por ejemplo, cuando los excursionistas 1 y 2 se encuentran en el tiempo 16, la última ubicación registrada en el tiempo del Nodo Id Record (X,Y) Ubicación Salto Tiempo Conteo de Tiempo 3 78 (12,23) 78 0 3 107 (31,17) 107 0 3 106 (31,17) 106 0 3 76 (12,23) 76 0 3 79 (12,23) 79 0 2 94 (12,23) 79 0 1 16 (?,?) ? 1 1 15 (?,?) ? 1 Tabla 3: Información de testigos recopilada del excursionista 3 en el experimento de inferencia indirecta. El excursionista 1 está en (12,7) registrado en el tiempo 6. Entonces, el nodo 1 genera un registro de testigo con tiempo de registro 16, ubicación (12,7) y tiempo de ubicación 6. De hecho, los dos últimos registros en la Tabla 3 tienen (?,?) como su ubicación. Esto ha ocurrido porque estos registros de testigos fueron generados por el excursionista 2 durante su encuentro con el 1 en los momentos 15 y 16. Hasta este momento, el excursionista 2 no había entrado en contacto con ningún punto de ubicación. Curiosamente, una información de ubicación más precisa del encuentro entre 1 y 2 o entre 2 y 3 puede ser calculada procesando la información de los testigos en el centro de control. A hiker 1 le tomó 25 unidades de tiempo ir de A (12,7) a B (31,17). Suponiendo una velocidad de senderismo constante y una caminata relativamente recta, se puede calcular que en el tiempo 16, el excursionista 1 debe haber estado en la ubicación (18,10). Por lo tanto, (18,10) es una ubicación más precisa del encuentro entre 1 y 2. Finalmente, nuestro tercer experimento llamado Identificación de Áreas de Búsqueda Calientes está diseñado para determinar el camino que ha tomado un excursionista e identificar áreas de búsqueda prioritarias para el rescate después de que se reporte su desaparición. Hay seis excursionistas (1, 2, 3, 4, 5 y 6) en este experimento. La Figura 15 muestra los senderos que tomaron los excursionistas 1, 2, 3, 4 y 5, junto con los puntos de encuentro obtenidos a partir de los registros de testigos recopilados en el centro de control. Por brevedad, no hemos mostrado toda la información de los testigos recopilada en el centro de control. Esta información está disponible en http://csel.cs.colorado.edu/∼huangjh/Cenwits/index.htm. Figura 15: Experimento de Identificación de Área de Búsqueda Caliente (sin excursionista 6) 189 Ahora supongamos que el excursionista 6 es reportado como desaparecido en el tiempo 260. Para determinar las áreas de búsqueda prioritarias, se procesan los registros del testigo del excursionista 6 para determinar el sendero en el que es más probable que se encuentre, la velocidad a la que se estaba moviendo, la dirección en la que se estaba moviendo y su última ubicación conocida. Basándose en esta información y en el mapa de senderos, se identifican las áreas de búsqueda caliente. El sendero de senderismo tomado por el excursionista 6 según lo inferido por CenWits se muestra con una línea punteada y las áreas de búsqueda caliente identificadas por CenWits se muestran con líneas oscuras dentro del círculo punteado en la Figura 16. Figura 16: Experimento de Identificación de Área de Búsqueda Caliente (con excursionista 6) 6.2 Resultados de Gestión de Energía y Memoria La información de testigo mostrada en las Tablas 1, 2 y 3 no ha sido filtrada utilizando los tres criterios descritos en la Sección 4.1. Por ejemplo, los registros de testigo generados por 3 en los tiempos de registro 76, 78 y 79 (ver Tabla 3) han sido generados debido a un único contacto entre el punto de acceso C y el nodo 3. Aplicando los criterios de brecha de récords, dos de estos tres récords serán borrados. De manera similar, los registros de testigo generados por 1 en los tiempos de registro 10, 15 y 16 (ver Tabla 1) han sido generados debido a un único contacto entre el punto de acceso A y el nodo 1. Nuevamente, al aplicar los criterios de brecha de récords, dos de estos tres récords serán borrados. Nuestros experimentos no generaron suficientes datos para probar el impacto de los criterios de cantidad de registros o cantidad de saltos. Para evaluar el impacto de estos criterios, simulamos CenWits para generar un número significativamente grande de registros para un número dado de excursionistas y puntos de acceso. Generamos registros de testigos haciendo que los excursionistas caminaran al azar. Aplicamos los tres criterios para medir la cantidad de ahorro de memoria en un nodo sensor. Los resultados se muestran en la Tabla 4. El número de excursionistas en esta simulación era de 10 y el número de puntos de acceso era de 5. El número de registros de testigos reportados en esta tabla es un promedio del número de registros de testigos que un nodo sensor almacenó en el momento de la descarga en un punto de acceso. Estos resultados muestran que los tres criterios de gestión de memoria reducen significativamente el consumo de memoria de los nodos sensores en CenWits. Por ejemplo, pueden reducir el consumo de memoria hasta en un 75%. Sin embargo, estos resultados son prematuros en la actualidad por dos razones: (1) Son generados mediante la simulación de excursionistas caminando al azar; y (2) No está claro cuál es el impacto que tiene el borrado de registros de testigos en la precisión de la ubicación inferida/áreas de búsqueda caliente de excursionistas perdidos. En nuestro trabajo futuro, planeamos llevar a cabo un estudio importante para abordar estas dos preocupaciones. OTRAS APLICACIONES Además de hacer senderismo en áreas silvestres, CenWits se puede utilizar en varias otras aplicaciones, como esquí, escalada, monitoreo de vida silvestre y seguimiento de personas. Dado que CenWits depende únicamente de la conectividad intermitente, puede aprovechar las tecnologías económicas y maduras existentes, y así hacer que el seguimiento sea más barato y bastante preciso. Dado que CenWits no depende de llevar un registro de un soporte de sensor todo el tiempo, sino que se basa en mantener testigos, el sistema es relativamente más económico y ampliamente aplicable. Por ejemplo, hay acantilados peligrosos en la mayoría de estaciones de esquí. Pero es demasiado caro para un centro de esquí desplegar una red de sensores inalámbricos conectados en toda la montaña. Usando CenWits, podemos desplegar algunos sensores en los límites del acantilado. Estos sensores de límite emiten balizas con bastante frecuencia, por ejemplo, cada segundo, y por lo tanto pueden registrar la presencia de esquiadores que cruzan el límite y caen por el acantilado. Los patrullas de esquí pueden recorrer las montañas cada hora y consultar automáticamente el sensor de límites cuando estén dentro del alcance utilizando PDAs. Si una PDA muestra que un esquiador ha estado cerca del sensor de límite, el equipo de patrulla de esquí puede usar un walkie-talkie de largo alcance para consultar al centro de control en la base del resort y verificar el registro de testigos del esquiador. Si no hay registro de testigos después del tiempo registrado en el sensor de límite, hay una alta probabilidad de que se necesite un rescate. En el monitoreo de vida silvestre, un método muy popular es colocar un receptor GPS en los animales. Para recopilar datos, se utiliza un transmisor satelital o el recolector de datos tiene que esperar a que la pulsera del receptor GPS se caiga (después de aproximadamente un año) y luego buscar el receptor GPS. Los transmisores GPS son muy costosos, por ejemplo, el utilizado en el rastreo de gansos cuesta $3,000 cada uno [2]. Además, todavía no se sabe si la señal de radio continua es perjudicial para las aves. Además, un transmisor GPS es bastante voluminoso e incómodo, y como resultado, las aves siempre intentan deshacerse de él. Usando CenWits, no solo podemos registrar la presencia de vida silvestre, sino que también podemos registrar el comportamiento de animales salvajes, por ejemplo, los leones podrían seguir la migración de los ciervos. CenWits no requiere transmisores satelitales voluminosos y costosos, ni es necesario esperar un año y buscar los soportes. CenWits proporciona una solución muy simple y rentable en este caso. Además, los puntos de acceso 190 pueden ubicarse estratégicamente, por ejemplo, cerca de una fuente de agua, para aumentar las posibilidades de recopilar datos actualizados. De hecho, los puntos de acceso no necesitan estar ubicados estáticamente. Pueden ser colocados en un avión de baja altitud (por ejemplo, un UAV) y ser volados sobre un área silvestre para recopilar datos de la vida silvestre. En las grandes ciudades, CenWits se puede utilizar para complementar el GPS, ya que el GPS no funciona en interiores y cerca de rascacielos. Si se reporta la desaparición de una persona A, y de los registros de testigos descubrimos que sus últimos contactos fueron C y D, podemos rastrear una ubicación aproximada de manera rápida y bastante eficiente. DISCUSIÓN Y TRABAJOS FUTUROS Este artículo presenta un nuevo sistema de búsqueda y rescate llamado CenWits que tiene varias ventajas sobre los sistemas actuales de búsqueda y rescate. Estas ventajas incluyen un sistema de acoplamiento flexible que depende solo de la conectividad intermitente de la red, eficiencia energética y de almacenamiento, y bajo costo. Resuelve uno de los mayores problemas que afectan a los sistemas modernos de búsqueda y rescate: tiene una capacidad de almacenamiento in situ inherente. Esto significa que alguien dentro de la red tendrá acceso a la información de la última ubicación conocida de la víctima, y posiblemente también a su dirección y velocidad. Utiliza el concepto de testigos para propagar información, inferir la posible ubicación y velocidad actual de un sujeto, e identificar áreas calientes de búsqueda y rescate en caso de emergencias. Una gran parte del diseño de CenWits se centra en abordar las limitaciones de energía y memoria de los nodos sensores actuales. De hecho, las restricciones de energía y memoria dependen de cuánto peso (del nodo sensorial) está dispuesto a llevar un excursionista y del costo de estos sensores. Un objetivo importante de CenWits es construir pequeños chips que puedan ser implantados en botas de senderismo o chaquetas de esquí. Este objetivo es similar a los dispositivos de localización de avalanchas que actualmente están integrados en las chaquetas de esquí. Anticipamos que la potencia y la memoria seguirán estando limitadas en un entorno así. Si bien el artículo se centra en el desarrollo de un sistema de búsqueda y rescate, también proporciona algunas ideas innovadoras a nivel de sistema para el procesamiento de información en un sistema de redes de sensores. Hemos desarrollado y experimentado con un prototipo básico de CenWits en la actualidad. El trabajo futuro incluye el desarrollo de un prototipo más maduro que aborde temas importantes como la seguridad, la privacidad y la alta disponibilidad. Existen varias preocupaciones urgentes sobre seguridad, privacidad y alta disponibilidad en CenWits. Por ejemplo, un adversario puede husmear la información de los testigos para localizar animales en peligro de extinción, hembras, niños, etc. Él podría inyectar información falsa en el sistema. Un individuo puede no sentirse cómodo/a al proporcionar su ubicación e información de movimiento, aunque definitivamente esté interesado/a en ser localizado/a de manera oportuna en caso de emergencia. En general, las personas en la comunidad de senderismo son amigables y generalmente dignas de confianza. Por lo tanto, no es realmente necesario tener una seguridad a prueba de balas. Sin embargo, cuando CenWits se utiliza en el contexto de otras aplicaciones, los requisitos de seguridad pueden cambiar. Dado que los nodos sensores utilizados en CenWits son frágiles, pueden fallar. De hecho, la naturaleza y el nivel de seguridad, privacidad y soporte de alta disponibilidad necesarios en CenWits dependen en gran medida de la aplicación para la que se está utilizando y de los sujetos individuales involucrados. En consecuencia, planeamos diseñar un soporte multinivel para seguridad, privacidad y alta disponibilidad en CenWits. Hasta ahora, hemos experimentado con CenWits en un entorno muy restringido con un pequeño número de sensores. Nuestro próximo objetivo es implementar este sistema en un entorno mucho más grande y realista. En particular, actualmente se están llevando a cabo discusiones para implementar CenWits en los Parques Nacionales de las Montañas Rocosas y Yosemite. 9. REFERENCIAS [1] Sistema de seguimiento basado en 802.11. http://www.pangonetworks.com/locator.htm. [2] Gansos brent 2002. http://www.wwt.org.uk/brent/. [3] El sistema OnStar. http://www.onstar.com. [4] Balizas de localización personal con receptor GPS y transmisor satelital. http://www.aeromedix.com/. [5] Seguimiento personal utilizando sistema GPS y GSM. http://www.ulocate.com/trimtrac.html. [6] Sistema de seguimiento de niños basado en RF. http://www.ion-kids.com/. [7] F. Alessio. Mediciones de rendimiento con tecnología de motas. MSWiM04, 2004. [8] P. Bahl y V. N. Padmanabhan. RADAR: Un sistema de localización y seguimiento de usuarios en interiores basado en RF. IEEE Infocom, 2000. [9] K. Fall. Una arquitectura de red tolerante a retrasos para internet con limitaciones. En SIGCOMM, 2003. [10] L. Gu y J. Stankovic. Capacidad de despertar por radio para redes de sensores. En el Simposio de Aplicaciones en Tiempo Real, 2004. [11] J. Hightower y G. Borriello. Sistemas de localización para la informática ubicua. IEEE Computer, 2001. [12] W. Jaskowski, K. Jedrzejek, B. Nyczkowski y S. Skowronek. Sistema de salvamento Lifetch. CSIDC, 2004. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh y D. Rubenstein. Computación eficiente en energía para el seguimiento de la vida silvestre: compensaciones de diseño y primeras experiencias con ZebraNet. En ASPLOS, 2002. [14] K. Kansal y M. Srivastava. Gestión de energía consciente de la recolección de energía. En Redes de Sensores Inalámbricos: Una Perspectiva de Sistemas, 2005. [15] G. J. Pottie y W. J. Kaiser. Incrustación de internet: sensores de red integrada inalámbrica. Comunicaciones de la ACM, 43(5), mayo de 2000. [16] S. Roundy, P. K. Wright y J. Rabaey. Un estudio de vibraciones de bajo nivel como fuente de energía para redes de sensores inalámbricos. Comunicaciones de Computadoras, 26(11), 2003. [17] C. Savarese, J. M. Rabaey y J. Beutel. Localización en redes de sensores inalámbricos ad-hoc distribuidos. ICASSP, 2001. [18] V. Shnayder, M. Hempstead, B. Chen, G. Allen y M. Welsh. Simulando el consumo de energía de aplicaciones de redes de sensores a gran escala. En Sensys, 2004. [19] R. Want y A. Hopper. Insignias activas y objetos personales de computación interactiva. IEEE Transactions of Consumer Electronics, 1992. [20] M. Welsh y G. Mainland. Programación de redes de sensores utilizando regiones abstractas. Primer Simposio USENIX/ACM sobre Diseño e Implementación de Sistemas en Red (NSDI 04), 2004. 191