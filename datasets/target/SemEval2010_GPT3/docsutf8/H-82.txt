Descargando contenido textual de la Web Oculta a través de consultas de palabras clave. Estas páginas son a menudo referidas como la Web Oculta o la Web Profunda. Dado que no hay enlaces estáticos a las páginas de la Web Oculta, los motores de búsqueda no pueden descubrir e indexar dichas páginas y, por lo tanto, no las devuelven en los resultados. Sin embargo, según estudios recientes, el contenido proporcionado por muchos sitios de la Web Oculta suele ser de muy alta calidad y puede ser extremadamente valioso para muchos usuarios. En este artículo, estudiamos cómo podemos construir un rastreador de la Hidden Web efectivo que pueda descubrir y descargar páginas de la Hidden Web de forma autónoma. Dado que el único punto de entrada a un sitio web oculto es una interfaz de consulta, el principal desafío al que se enfrenta un rastreador de la Hidden Web es cómo generar automáticamente consultas significativas para enviar al sitio. Aquí proporcionamos un marco teórico para investigar el problema de generación de consultas para la Web Oculta y proponemos políticas efectivas para generar consultas automáticamente. Nuestras políticas avanzan de forma iterativa, emitiendo una consulta diferente en cada iteración. Evaluamos experimentalmente la efectividad de estas políticas en 4 sitios reales de la Web Oculta y nuestros resultados son muy prometedores. Por ejemplo, en un experimento, una de nuestras políticas descargó más del 90% de un sitio web oculto (que contiene 14 millones de documentos) después de emitir menos de 100 consultas. Categorías y Descriptores de Asignaturas: H.3.7 [Sistemas de Información]: Bibliotecas Digitales; H.3.1 [Sistemas de Información]: Análisis de Contenido e Indexación; H.3.3 [Sistemas de Información]: Búsqueda y Recuperación de Información. Términos generales: Algoritmos, Rendimiento, Diseño. 1. INTRODUCCIÓN Estudios recientes muestran que una fracción significativa del contenido web no se puede alcanzar siguiendo enlaces [7, 12]. En particular, una gran parte de la Web está oculta detrás de formularios de búsqueda y solo es accesible cuando los usuarios ingresan un conjunto de palabras clave, o consultas, en los formularios. Estas páginas son a menudo referidas como la Web Oculta o la Web Profunda, porque los motores de búsqueda típicamente no pueden indexar las páginas y no las devuelven en sus resultados (por lo tanto, las páginas están esencialmente ocultas para un usuario típico de la Web). Según muchos estudios, el tamaño de la Web Oculta aumenta rápidamente a medida que más organizaciones ponen su contenido valioso en línea a través de una interfaz web fácil de usar [7]. En [12], Chang et al. estiman que actualmente existen en la Web más de 100,000 sitios de la Web Oculta. Además, el contenido proporcionado por muchos sitios de la Hidden Web suele ser de muy alta calidad y puede ser extremadamente valioso para muchos usuarios [7]. Por ejemplo, PubMed alberga muchos artículos de alta calidad sobre investigación médica que fueron seleccionados a través de cuidadosos procesos de revisión por pares, mientras que el sitio de la Oficina de Patentes y Marcas de los Estados Unidos pone a disposición documentos de patentes existentes, ayudando a posibles inventores a examinar el estado de la técnica. En este artículo, estudiamos cómo podemos construir un rastreador de la Hidden Web que pueda descargar automáticamente páginas de la Hidden Web, para que los motores de búsqueda puedan indexarlas. Los rastreadores convencionales dependen de los hipervínculos en la Web para descubrir páginas, por lo que los motores de búsqueda actuales no pueden indexar las páginas de la Web Oculta (debido a la falta de enlaces). Creemos que un rastreador de la Hidden Web efectivo puede tener un impacto tremendo en cómo los usuarios buscan información en la Web: • Acceder a información inexplorada: El rastreador de la Hidden Web permitirá a un usuario promedio de la Web explorar fácilmente la gran cantidad de información que en su mayoría está oculta en la actualidad. Dado que la mayoría de los usuarios de la Web dependen de los motores de búsqueda para descubrir páginas, cuando las páginas no están indexadas por los motores de búsqueda, es poco probable que sean vistas por muchos usuarios de la Web. A menos que los usuarios vayan directamente a los sitios de la Hidden Web y emitan consultas allí, no pueden acceder a las páginas en los sitios. • Mejorar la experiencia del usuario: incluso si un usuario es consciente de varios sitios de la Hidden Web, el usuario aún tiene que perder una cantidad significativa de tiempo y esfuerzo visitando todos los sitios potencialmente relevantes, consultando cada uno de ellos y explorando los resultados. Al hacer que las páginas de la Web Oculta sean buscables en un lugar central, podemos reducir significativamente el tiempo y esfuerzo desperdiciados por los usuarios al buscar en la Web Oculta. • Reducción del sesgo potencial: Debido a la gran dependencia de muchos usuarios de la Web en los motores de búsqueda para localizar información, los motores de búsqueda influyen en cómo los usuarios perciben la Web [28]. Los usuarios no perciben necesariamente lo que realmente existe en la web, sino lo que está indexado por los motores de búsqueda [28]. Según un artículo reciente [5], varias organizaciones han reconocido la importancia de llevar la información de sus sitios de la Web Oculta a la superficie, y han comprometido recursos considerables para este esfuerzo. Nuestra Oficina de Patentes de EE. UU.: http://www.uspto.gov. Los rastreadores son los programas que recorren la Web automáticamente y descargan páginas para los motores de búsqueda. Figura 1: Una interfaz de búsqueda de un solo atributo. El rastreador de la Web oculta intenta automatizar este proceso para los sitios de la Web oculta con contenido textual, minimizando así los costos asociados y el esfuerzo requerido. Dado que la única forma de acceder a las páginas de la Web Oculta es a través de la consulta de un formulario de búsqueda, existen dos desafíos fundamentales para implementar un rastreador efectivo de la Web Oculta: (a) El rastreador debe ser capaz de entender y modelar una interfaz de consulta, y (b) El rastreador debe generar consultas significativas para enviar a la interfaz de consulta. El primer desafío fue abordado por Raghavan y Garcia-Molina en [29], donde se presentó un método para aprender interfaces de búsqueda. Aquí presentamos una solución al segundo desafío, es decir, cómo un rastreador puede generar automáticamente consultas para descubrir y descargar las páginas de la Web Oculta. Claramente, cuando los formularios de búsqueda enumeran todos los valores posibles para una consulta (por ejemplo, a través de una lista desplegable), la solución es sencilla. Expedimos exhaustivamente todas las consultas posibles, una consulta a la vez. Cuando los formularios de consulta tienen un campo de texto libre, sin embargo, es posible realizar un número infinito de consultas, por lo que no podemos emitir exhaustivamente todas las consultas posibles. En este caso, ¿qué consultas deberíamos seleccionar? ¿Puede el rastreador generar automáticamente consultas significativas sin entender la semántica del formulario de búsqueda? En este artículo, proporcionamos un marco teórico para investigar el problema del rastreo de la Hidden-Web y proponemos formas efectivas de generar consultas automáticamente. También evaluamos nuestras soluciones propuestas a través de experimentos realizados en sitios reales de la Hidden Web. En resumen, este artículo realiza las siguientes contribuciones: • Presentamos un marco formal para estudiar el problema del rastreo de la Hidden Web (Sección 2). • Investigamos una serie de políticas de rastreo para la Hidden Web, incluida la política óptima que potencialmente puede descargar el máximo número de páginas a través del mínimo número de interacciones. Desafortunadamente, demostramos que la política óptima es NP-difícil y no se puede implementar en la práctica (Sección 2.2). • Proponemos una nueva política adaptativa que aproxima la política óptima. Nuestra política adaptativa examina las páginas devueltas de consultas anteriores y adapta automáticamente su política de selección de consultas basándose en ellas (Sección 3). • Evaluamos diversas políticas de rastreo a través de experimentos en sitios web reales. Nuestros experimentos mostrarán las ventajas relativas de diversas políticas de rastreo y demostrarán su potencial. Los resultados de nuestros experimentos son muy prometedores. En un experimento, por ejemplo, nuestra política adaptativa descargó más del 90% de las páginas dentro de PubMed (que contiene 14 millones de documentos) después de emitir menos de 100 consultas. En esta sección, presentamos un marco formal para el estudio del problema de rastreo de la Hidden-Web. En la Sección 2.1, describimos nuestras suposiciones sobre los sitios de la Web Oculta y explicamos cómo los usuarios interactúan con los sitios. Basándonos en este modelo de interacción, presentamos un algoritmo de alto nivel para un rastreador de la Web Oculta en la Sección 2.2. Finalmente, en la Sección 2.3, formalizamos el problema del rastreo de la Hidden Web. 2.1 Modelo de base de datos de la Hidden Web Existe una variedad de fuentes de la Hidden Web que proporcionan información sobre una multitud de temas. Dependiendo del tipo de información, podemos categorizar un sitio de la Web Oculta como una base de datos textual o una base de datos estructurada. Una base de datos textual es un sitio que contiene principalmente documentos de texto plano, como PubMed y LexisNexis (una base de datos en línea de documentos legales [1]). Dado que los documentos de texto sin formato no suelen tener una estructura bien definida, la mayoría de las bases de datos textuales ofrecen una interfaz de búsqueda sencilla donde los usuarios escriben una lista de palabras clave en un solo cuadro de búsqueda (Figura 1). Por el contrario, una base de datos estructurada a menudo contiene datos relacionales de múltiples atributos (por ejemplo, un libro en el sitio web de Amazon puede tener los campos título=Harry Potter, autor=J.K. Rowling y isbn=0590353403) y admite interfaces de búsqueda multiatributo (Figura 2). En este documento, nos centraremos principalmente en bases de datos textuales que admiten consultas de palabras clave de un solo atributo. Discutimos cómo podemos extender nuestras ideas para las bases de datos textuales a bases de datos estructuradas de múltiples atributos en la Sección 6.1. Por lo general, los usuarios necesitan seguir los siguientes pasos para acceder a las páginas en una base de datos de la Web Oculta: 1. Paso 1. Primero, el usuario emite una consulta, digamos hígado, a través de la interfaz de búsqueda proporcionada por el sitio web (como la que se muestra en la Figura 1). 2. Paso 2. Poco después de que el usuario emita la consulta, se le presenta una página de índice de resultados. Es decir, el sitio web devuelve una lista de enlaces a páginas web potencialmente relevantes, como se muestra en la Figura 3(a). Paso 3. Desde la lista en la página de índice de resultados, el usuario identifica las páginas que parecen interesantes y sigue los enlaces. Hacer clic en un enlace lleva al usuario a la página web real, como la que se muestra en la Figura 3(b), que el usuario desea ver. 2.2 Un algoritmo genérico de rastreo de la Hidden Web Dado que la única entrada a las páginas en un sitio de Hidden Web es su formulario de búsqueda, un rastreador de Hidden Web debe seguir los tres pasos descritos en la sección anterior. Es decir, el rastreador tiene que generar una consulta, enviarla al sitio web, descargar la página de índice de resultados y seguir los enlaces para descargar las páginas reales. En la mayoría de los casos, un rastreador tiene un tiempo y recursos de red limitados, por lo que repite estos pasos hasta que agota sus recursos. En la Figura 4 mostramos el algoritmo genérico para un rastreador de la Hidden-Web. Para simplificar, asumimos que el rastreador de la Web oculta emite solo consultas de un solo término. El rastreador primero decide qué término de consulta va a utilizar (Paso 2), emite la consulta y recupera la página de índice de resultados (Paso 3). Finalmente, basándose en los enlaces encontrados en la página de índice de resultados, descarga las páginas de la Web Oculta del sitio (Paso 4). Este mismo proceso se repite hasta que se agoten todos los recursos disponibles (Paso (1)). Dado este algoritmo, podemos ver que la decisión más crítica que un rastreador debe tomar es qué consulta emitir a continuación. Si el rastreador puede emitir consultas exitosas que devolverán muchas páginas coincidentes, el rastreador puede finalizar su rastreo temprano utilizando recursos mínimos. Por el contrario, si el rastreador emite consultas completamente irrelevantes que no devuelven ninguna página coincidente, puede desperdiciar todos sus recursos simplemente emitiendo consultas sin nunca recuperar páginas reales. Por lo tanto, la forma en que el rastreador selecciona la siguiente consulta puede afectar enormemente su efectividad. En la siguiente sección, formalizamos este problema de selección de consultas. Para la mayoría de los sitios web que asumen el operador Y (AND) para consultas de múltiples palabras clave, las consultas de un solo término devuelven el máximo número de resultados. Extender nuestro trabajo a consultas de múltiples palabras clave es sencillo. 101 (a) Lista de páginas coincidentes para la consulta hígado. (b) La primera página coincidente para hígado. Figura 3: Páginas del sitio web de PubMed. ALGORITMO 2.1. Procedimiento para rastrear un sitio web oculto (1) mientras (hay recursos disponibles) hacer // seleccionar un término para enviar al sitio (2) qi = SeleccionarTérmino() // enviar la consulta y adquirir la página de índice de resultados (3) R(qi) = ConsultarSitioWeb( qi ) // descargar las páginas de interés (4) Descargar( R(qi) ) (5) hecho Figura 4: Algoritmo para rastrear un sitio web oculto. Figura 5: Una formalización en conjunto del problema de selección óptima de consultas. 2.3 Formalización del problema Teóricamente, el problema de selección de consultas puede ser formalizado de la siguiente manera: Suponemos que el rastreador descarga páginas de un sitio web que tiene un conjunto de páginas S (el rectángulo en la Figura 5). Representamos cada página web en S como un punto (puntos en la Figura 5). Cada posible consulta qi que podamos emitir puede ser vista como un subconjunto de S, que contiene todos los puntos (páginas) que se devuelven cuando emitimos qi en el sitio. Cada subconjunto está asociado con un peso que representa el costo de emitir la consulta. Bajo esta formalización, nuestro objetivo es encontrar qué subconjuntos (consultas) cubren el máximo número de puntos (páginas web) con el peso total mínimo (costo). Este problema es equivalente al problema de cobertura de conjuntos en teoría de grafos [16]. Hay dos dificultades principales que necesitamos abordar en esta formalización. Primero, en una situación práctica, el rastreador no sabe qué páginas web serán devueltas por qué consultas, por lo que los subconjuntos de S no se conocen de antemano. Sin conocer estos subconjuntos, el rastreador no puede decidir qué consultas elegir para maximizar la cobertura. Segundo, se sabe que el problema de la cobertura de conjuntos es NP-Difícil [16], por lo que aún no se ha encontrado un algoritmo eficiente para resolver este problema de manera óptima en tiempo polinómico. En este documento, presentaremos un algoritmo de aproximación que puede encontrar una solución casi óptima a un costo computacional razonable. Nuestro algoritmo aprovecha la observación de que, aunque no sabemos qué páginas serán devueltas por cada consulta qi que emitimos, podemos predecir cuántas páginas serán devueltas. Basándose en esta información, nuestro algoritmo de selección de consultas puede seleccionar las mejores consultas que cubran el contenido del sitio web. Presentamos nuestro método de predicción y nuestro algoritmo de selección de consultas en la Sección 3. 2.3.1 Métrica de rendimiento Antes de presentar nuestras ideas para el problema de selección de consultas, discutimos brevemente algunas de nuestras notaciones y las métricas de costo/rendimiento. Dada una consulta qi, usamos P(qi) para denotar la fracción de páginas que obtendremos si emitimos la consulta qi en el sitio. Por ejemplo, si un sitio web tiene un total de 10,000 páginas, y si 3,000 páginas son devueltas para la consulta qi = medicina, entonces P(qi) = 0.3. Usamos P(q1 ∧ q2) para representar la fracción de páginas que son devueltas tanto por q1 como por q2 (es decir, la intersección de P(q1) y P(q2)). De manera similar, usamos P(q1 ∨ q2) para representar la fracción de páginas que se devuelven de q1 o q2 (es decir, la unión de P(q1) y P(q2)). También usamos Cost(qi) para representar el costo de emitir la consulta qi. Dependiendo del escenario, el costo puede medirse ya sea en tiempo, ancho de banda de red, el número de interacciones con el sitio, o puede ser una función de todos estos. Como veremos más adelante, nuestros algoritmos propuestos son independientes de la función de costo exacta. En el caso más común, el costo de la consulta consiste en una serie de factores, incluyendo el costo de enviar la consulta al sitio, recuperar la página de índice de resultados (Figura 3(a)) y descargar las páginas reales (Figura 3(b)). Suponemos que enviar una consulta conlleva un costo fijo de cq. El costo de descargar la página de índice de resultados es proporcional al número de documentos coincidentes con la consulta, mientras que el costo cd de descargar un documento coincidente también es fijo. Entonces, el costo total de la consulta qi es Costo(qi) = cq + crP(qi) + cdP(qi). (1) En ciertos casos, algunos de los documentos de qi pueden haber sido descargados previamente en consultas anteriores. En este caso, el rastreador puede omitir la descarga de estos documentos y el costo de qi puede ser Costo(qi) = cq + crP(qi) + cdPnew(qi). Aquí, usamos Pnew(qi) para representar la fracción de los nuevos documentos de qi que no han sido recuperados de consultas anteriores. Más adelante en la Sección 3.1 estudiaremos cómo podemos estimar P(qi) y Pnew(qi) para estimar el costo de qi. Dado que nuestros algoritmos son independientes de la función de costo exacta, asumiremos una función de costo genérica Cost(qi) en este artículo. Cuando necesitemos una función de costo concreta, sin embargo, utilizaremos la Ecuación 2. Dada la notación, podemos formalizar el objetivo de un rastreador de la Web oculta de la siguiente manera: PROBLEMA 1. Encuentra el conjunto de consultas q1, . . . , qn que maximice P(q1 ∨ · · · ∨ qn) bajo la restricción n i=1 Cost(qi) ≤ t. Aquí, t es el recurso máximo de descarga que tiene el rastreador. SELECCIÓN DE PALABRAS CLAVE ¿Cómo debería un rastreador seleccionar las consultas a emitir? Dado que el objetivo es descargar el máximo número de documentos únicos de una base de datos textual, podemos considerar una de las siguientes opciones: • Aleatorio: Seleccionamos palabras al azar, por ejemplo, de un diccionario en inglés, y las enviamos a la base de datos. La esperanza es que una consulta aleatoria devuelva un número razonable de documentos coincidentes. • Frecuencia genérica: Analizamos un corpus de documentos genéricos recopilados en otro lugar (por ejemplo, de la Web) y obtenemos la distribución de frecuencia genérica de cada palabra clave. Basándonos en esta distribución genérica, comenzamos con la palabra clave más frecuente, la introducimos en la base de datos de la Web Oculta y recuperamos el resultado. Luego continuamos con la segunda palabra clave más frecuente y repetimos este proceso hasta agotar todos los recursos de descarga. La esperanza es que las palabras clave frecuentes en un corpus genérico también sean frecuentes en la base de datos de la Web Oculta, devolviendo muchos documentos coincidentes. • Adaptativo: Analizamos los documentos devueltos de las consultas anteriores emitidas a la base de datos de la Web Oculta y estimamos cuál palabra clave es la más probable de devolver la mayor cantidad de documentos. Basándonos en este análisis, emitimos la consulta más prometedora y repetimos el proceso. Entre estas tres políticas generales, podemos considerar la política aleatoria como el punto de comparación base ya que se espera que tenga el peor rendimiento. Entre las políticas de frecuencia genérica y adaptativa, ambas políticas pueden mostrar un rendimiento similar si la base de datos rastreada tiene una colección de documentos genéricos sin un tema especializado. La política adaptativa, sin embargo, puede tener un rendimiento significativamente mejor que la política de frecuencia genérica si la base de datos tiene una colección muy especializada que es diferente al corpus genérico. Experimentalmente compararemos estas tres políticas en la Sección 4. Si bien las dos primeras políticas (políticas aleatorias y de frecuencia genérica) son fáciles de implementar, necesitamos entender cómo podemos analizar las páginas descargadas para identificar la consulta más prometedora con el fin de implementar la política adaptativa. Abordamos este problema en el resto de esta sección. 3.1 Estimación del número de páginas coincidentes. Para identificar la consulta más prometedora, necesitamos estimar cuántos documentos nuevos descargaremos si emitimos la consulta qi como la próxima consulta. Es decir, suponiendo que hemos emitido las consultas q1, . . . , qi−1, necesitamos estimar P(q1∨· · ·∨qi−1∨qi), para cada posible próxima consulta qi y comparar este valor. Al estimar este número, observamos que podemos reescribir P(q1 ∨ · · · ∨ qi−1 ∨ qi) como: P((q1 ∨ · · · ∨ qi−1) ∨ qi) = P(q1 ∨ · · · ∨ qi−1) + P(qi) − P((q1 ∨ · · · ∨ qi−1) ∧ qi) = P(q1 ∨ · · · ∨ qi−1) + P(qi) − P(q1 ∨ · · · ∨ qi−1)P(qi|q1 ∨ · · · ∨ qi−1) (3) En la fórmula anterior, observamos que podemos medir con precisión P(q1 ∨ · · · ∨ qi−1) y P(qi | q1 ∨ · · · ∨ qi−1) analizando páginas previamente descargadas: Sabemos P(q1 ∨ · · · ∨ qi−1), la unión de todas las páginas descargadas de q1, . . . , qi−1, ya que ya hemos emitido q1, . . . , qi−1 y descargado las páginas coincidentes. También podemos medir P(qi | q1 ∨ · · · ∨ qi−1), la probabilidad de que qi aparezca en las páginas de q1, . . . , qi−1, contando cuántas veces qi aparece en las páginas de q1, . . . , qi−1. Por lo tanto, solo necesitamos estimar P(qi) para evaluar P(q1 ∨ · · · ∨ qi). Podemos considerar varias formas diferentes de estimar P(qi), incluyendo las siguientes: 1. Estimador de independencia: Suponemos que la aparición del término qi es independiente de los términos q1, . . . , qi−1. Es decir, asumimos que P(qi) = P(qi|q1 ∨ · · · ∨ qi−1). 2. Estimador de Zipf: En [19], Ipeirotis et al. propusieron un método para estimar cuántas veces ocurre un término particular en todo el corpus basándose en un subconjunto de documentos del corpus. Su método explota el hecho de que la frecuencia de términos dentro de colecciones de texto sigue una distribución de ley de potencias [30, 25]. Es decir, si clasificamos todos los términos según su frecuencia de ocurrencia (siendo el término más frecuente el de rango 1, el segundo más frecuente el de rango 2, etc.), entonces la frecuencia f de un término dentro de la colección de texto está dada por: f = α(r + β)−γ (4) donde r es el rango del término y α, β y γ son constantes que dependen de la colección de texto. Su idea principal es (1) estimar los tres parámetros, α, β y γ, basados en el subconjunto de documentos que hemos descargado de consultas anteriores, y (2) utilizar los parámetros estimados para predecir f dado el ranking r de un término dentro del subconjunto. Para obtener una descripción más detallada sobre cómo podemos utilizar este método para estimar P(qi), remitimos al lector a la versión extendida de este artículo [27]. Después de estimar los valores de P(qi) y P(qi|q1 ∨ · · · ∨ qi−1), podemos calcular P(q1 ∨ · · · ∨ qi). En la Sección 3.3, explicamos cómo podemos calcular eficientemente P(qi|q1 ∨ · · · ∨ qi−1) manteniendo una tabla de resumen concisa. En la siguiente sección, primero examinamos cómo podemos usar este valor para decidir qué consulta debemos emitir a continuación en el sitio web Hidden Web. 3.2 Algoritmo de selección de consultas El objetivo del rastreador de Hidden-Web es descargar el máximo número de documentos únicos de una base de datos utilizando sus recursos limitados de descarga. Dado este objetivo, el rastreador de la Web oculta debe tener en cuenta dos factores. (1) el número de nuevos documentos que se pueden obtener de la consulta qi y (2) el costo de emitir la consulta qi. Por ejemplo, si dos consultas, qi y qj, incurren en el mismo costo, pero qi devuelve más páginas nuevas que qj, qi es más deseable que qj. Del mismo modo, si qi y qj devuelven la misma cantidad de documentos nuevos, pero qi incurre en menos costos que qj, qi es más deseable. Basándose en esta observación, el rastreador de la Web oculta puede utilizar la siguiente métrica de eficiencia para cuantificar la deseabilidad de la consulta qi: Eficiencia(qi) = Pnuevos(qi) Costo(qi) Aquí, Pnuevos(qi) representa la cantidad de documentos nuevos devueltos para qi (las páginas que no han sido devueltas en consultas anteriores). Cost(qi) representa el costo de emitir la consulta qi. De manera intuitiva, la eficiencia de qi mide cuántos documentos nuevos se recuperan por unidad de costo, y puede utilizarse como indicador de 4. Para una estimación exacta, necesitamos conocer el número total de páginas en el sitio. Sin embargo, para comparar solo los valores relativos entre las consultas, esta información en realidad no es necesaria. 103 ALGORITMO 3.1. SelectTerm() codicioso Parámetros: T: La lista de palabras clave potenciales del query Procedimiento (1) Para cada tk en T hacer (2) Estimar Eficiencia(tk) = Pnew(tk) Costo(tk) (3) hecho (4) devolver tk con la máxima Eficiencia(tk) Figura 6: Algoritmo para seleccionar el siguiente término del query. qué tan bien se gastan nuestros recursos al emitir qi. Por lo tanto, el rastreador de la Web Oculta puede estimar la eficiencia de cada candidato qi y seleccionar el que tenga el valor más alto. Al utilizar sus recursos de manera más eficiente, el rastreador puede eventualmente descargar el número máximo de documentos únicos. En la Figura 6, mostramos la función de selección de consulta que utiliza el concepto de eficiencia. En principio, este algoritmo adopta un enfoque codicioso e intenta maximizar la ganancia potencial en cada paso. Podemos estimar la eficiencia de cada consulta utilizando el método de estimación descrito en la Sección 3.1. Es decir, el tamaño de los nuevos documentos de la consulta qi, Pnew(qi), es Pnew(qi) = P(q1 ∨ · · · ∨ qi−1 ∨ qi) − P(q1 ∨ · · · ∨ qi−1) = P(qi) − P(q1 ∨ · · · ∨ qi−1)P(qi|q1 ∨ · · · ∨ qi−1) de la Ecuación 3, donde P(qi) puede estimarse utilizando uno de los métodos descritos en la sección 3. También podemos estimar Cost(qi) de manera similar. Por ejemplo, si Cost(qi) es Cost(qi) = cq + crP(qi) + cdPnew(qi) (Ecuación 2), podemos estimar Cost(qi) estimando P(qi) y Pnew(qi). 3.3 Cálculo eficiente de estadísticas de consulta. Al estimar la eficiencia de las consultas, encontramos que necesitamos medir P(qi|q1∨· · ·∨qi−1) para cada consulta potencial qi. Este cálculo puede ser muy consumidor de tiempo si lo repetimos desde cero para cada consulta qi en cada iteración de nuestro algoritmo. En esta sección, explicamos cómo podemos calcular P(qi|q1 ∨ · · · ∨ qi−1) de manera eficiente manteniendo una pequeña tabla que llamamos tabla de estadísticas de consulta. La idea principal de la tabla de estadísticas de consulta es que P(qi|q1 ∨· · ·∨ qi−1) se puede medir contando cuántas veces aparece la palabra clave qi dentro de los documentos descargados de q1, . . . , qi−1. Registramos estos conteos en una tabla, como se muestra en la Figura 7(a). La columna izquierda de la tabla contiene todos los posibles términos de consulta y la columna derecha contiene el número de documentos previamente descargados que contienen el término respectivo. Por ejemplo, la tabla en la Figura 7(a) muestra que hasta ahora hemos descargado 50 documentos, y el término "modelo" aparece en 10 de estos documentos. Dado este número, podemos calcular que P(modelo|q1 ∨ · · · ∨ qi−1) = 10 50 = 0.2. Observamos que la tabla de estadísticas de consultas debe actualizarse cada vez que emitimos una nueva consulta qi y descargamos más documentos. Esta actualización se puede realizar de manera eficiente como ilustramos en el siguiente ejemplo. EJEMPLO 1. Después de examinar la tabla de estadísticas de consultas de la Figura 7(a), hemos decidido usar el término computadora como nuestra próxima consulta qi. Desde la nueva consulta qi = computadora, descargamos 20 páginas nuevas adicionales. De estos, 12 contienen la palabra clave modelo Término tk N(tk) modelo 10 computadora 38 digital 50 Término tk N(tk) modelo 12 computadora 20 disco 18 Páginas totales: 50 Nuevas páginas: 20 (a) Después de q1, . . . , qi−1 (b) Nuevas desde qi = computadora Término tk N(tk) modelo 10+12 = 22 computadora 38+20 = 58 disco 0+18 = 18 digital 50+0 = 50 Páginas totales: 50 + 20 = 70 (c) Después de q1, . . . , qi Figura 7: Actualización de la tabla de estadísticas de consulta. q i1 i−1 q\/ ... \/q q i / S Figura 8: Un sitio web que no devuelve todos los resultados. y 18 la palabra clave disco. La tabla en la Figura 7(b) muestra la frecuencia de cada término en las páginas recién descargadas. Podemos actualizar la antigua tabla (Figura 7(a)) para incluir esta nueva información simplemente añadiendo las entradas correspondientes en las Figuras 7(a) y (b). El resultado se muestra en la Figura 7(c). Por ejemplo, el modelo de palabra clave existe en 10 + 12 = 22 páginas dentro de las páginas recuperadas de q1, . . . , qi. Según esta nueva tabla, P(modelo|q1∨· · ·∨qi) es ahora 22 70 = 0.3. 3.4 Rastreo de sitios que limitan el número de resultados. En ciertos casos, cuando una consulta coincide con un gran número de páginas, el sitio de la Web Oculta devuelve solo una parte de esas páginas. Por ejemplo, el Proyecto Directorio Abierto [2] permite a los usuarios ver solo hasta 10,000 resultados después de realizar una consulta. Obviamente, este tipo de limitación tiene un efecto inmediato en nuestro rastreador de la Web Oculta. Primero, dado que solo podemos recuperar hasta un número específico de páginas por consulta, nuestro rastreador necesitará emitir más consultas (y potencialmente utilizará más recursos) para descargar todas las páginas. Segundo, el método de selección de consultas que presentamos en la Sección 3.2 asume que para cada consulta potencial qi, podemos encontrar P(qi|q1 ∨ · · · ∨ qi−1). Es decir, para cada consulta qi podemos encontrar la fracción de documentos en toda la base de datos de texto que contiene qi con al menos uno de q1, . . . , qi−1. Sin embargo, si la base de datos de texto devuelve solo una parte de los resultados para cualquiera de los q1, . . . , qi−1, entonces el valor P(qi|q1 ∨ · · · ∨ qi−1) no es preciso y puede afectar nuestra decisión para la siguiente consulta qi, y potencialmente el rendimiento de nuestro rastreador. Dado que no podemos recuperar más resultados por consulta que el número máximo permitido por el sitio web, nuestro rastreador no tiene otra opción que enviar más consultas. Sin embargo, hay una forma de estimar el valor correcto de P(qi|q1 ∨ · · · ∨ qi−1) en el caso en que el sitio web devuelva solo una parte de los resultados. 104 De nuevo, suponga que el sitio web oculto que estamos rastreando actualmente está representado como el rectángulo en la Figura 8 y sus páginas como puntos en la figura. Supongamos que ya hemos emitido las consultas q1, . . . , qi−1 que devolvieron un número de resultados menor que el número máximo permitido por el sitio, y por lo tanto hemos descargado todas las páginas de estas consultas (círculo grande en la Figura 8). Eso es, en este punto, nuestra estimación para P(qi|q1 ∨· · ·∨qi−1) es precisa. Ahora supongamos que enviamos la consulta qi al sitio web, pero debido a una limitación en el número de resultados que recibimos, recuperamos el conjunto qi (círculo pequeño en la Figura 8) en lugar del conjunto qi (círculo punteado en la Figura 8). Ahora necesitamos actualizar nuestra tabla de estadísticas de consultas para que tenga información precisa para el próximo paso. Es decir, aunque recuperamos el conjunto qi, para cada posible consulta qi+1 necesitamos encontrar P(qi+1|q1 ∨ · · · ∨ qi): P(qi+1|q1 ∨ · · · ∨ qi) = 1 P(q1 ∨ · · · ∨ qi) · [P(qi+1 ∧ (q1 ∨ · · · ∨ qi−1))+ P(qi+1 ∧ qi) − P(qi+1 ∧ qi ∧ (q1 ∨ · · · ∨ qi−1))] (5) En la ecuación anterior, podemos encontrar P(q1 ∨· · ·∨qi) estimando P(qi) con el método mostrado en la Sección 3. Además, podemos calcular P(qi+1 ∧ (q1 ∨ · · · ∨ qi−1)) y P(qi+1 ∧ qi ∧ (q1 ∨ · · · ∨ qi−1)) examinando directamente los documentos que hemos descargado de las consultas q1, . . . , qi−1. El término P(qi+1 ∧ qi) sin embargo es desconocido y necesitamos estimarlo. Suponiendo que qi es una muestra aleatoria de qi, entonces: P(qi+1 ∧ qi) P(qi+1 ∧ qi) = P(qi) P(qi) (6) A partir de la Ecuación 6 podemos calcular P(qi+1 ∧ qi) y después de reemplazar este valor en la Ecuación 5 podemos encontrar P(qi+1|q1 ∨ · · · ∨ qi). 4. EVALUACIÓN EXPERIMENTAL En esta sección evaluamos experimentalmente el rendimiento de los diversos algoritmos para el rastreo de la Web Oculta presentados en este artículo. Nuestro objetivo es validar nuestro análisis teórico a través de experimentos en el mundo real, rastreando sitios populares de la Hidden Web que contienen bases de datos de texto. Dado que el número de documentos que se descubren y descargan de una base de datos textual depende de la selección de las palabras que se emitirán como consultas a la interfaz de búsqueda de cada sitio, comparamos las diversas políticas de selección que se describieron en la sección 3, a saber, los algoritmos aleatorio, de frecuencia genérica y adaptativo. El algoritmo adaptativo aprende nuevas palabras clave y términos de los documentos que descarga, y su proceso de selección está guiado por un modelo de costos como se describe en la Sección 3.2. Para mantener nuestro experimento y su análisis simples en este punto, asumiremos que el costo de cada consulta es constante. Es decir, nuestro objetivo es maximizar el número de páginas descargadas emitiendo el menor número de consultas. Más adelante, en la Sección 4.4 presentaremos una comparación de nuestras políticas basada en un modelo de costos más elaborado. Además, utilizamos el estimador de independencia (Sección 3.1) para estimar P(qi) a partir de las páginas descargadas. Aunque el estimador de independencia es un estimador simple, nuestros experimentos mostrarán que puede funcionar muy bien en la práctica. Para la política de frecuencia genérica, calculamos la distribución de frecuencia de palabras que aparecen en un corpus de 5.5 millones de páginas web. A lo largo de nuestros experimentos, una vez que un algoritmo ha enviado una consulta a una base de datos, excluimos la consulta de envíos posteriores a la misma base de datos por parte del mismo algoritmo. Dejamos la presentación de resultados basados en la estimación de Zipf para un trabajo futuro, descargado de 154 sitios web de diversos temas. Las palabras clave se seleccionan en función de su frecuencia decreciente en la que aparecen en este conjunto de documentos, seleccionando primero la más frecuente, seguida de la segunda palabra clave más frecuente, etc. En cuanto a la política aleatoria, utilizamos el mismo conjunto de palabras recopiladas del corpus web, pero en este caso, en lugar de seleccionar palabras clave en función de su frecuencia relativa, las elegimos al azar (distribución uniforme). Para investigar más a fondo cómo la calidad de la lista de términos de consulta potenciales afecta al algoritmo basado en azar, construimos dos conjuntos: uno con las 16,000 palabras más frecuentes de la colección de términos utilizada en la política de frecuencia genérica (en adelante, la política aleatoria con el conjunto de 16,000 palabras se referirá como aleatorio-16K), y otro conjunto con las 1 millón de palabras más frecuentes de la misma colección mencionada anteriormente (en adelante, referido como aleatorio-1M). El conjunto anterior tiene palabras frecuentes que aparecen en un gran número de documentos (al menos 10,000 en nuestra colección), y por lo tanto pueden considerarse términos de alta calidad. El último conjunto, sin embargo, contiene una colección mucho más grande de palabras, entre las cuales algunas podrían ser falsas y sin sentido. Los experimentos se llevaron a cabo empleando cada uno de los algoritmos mencionados anteriormente (adaptativo, de frecuencia genérica, aleatorio de 16K y aleatorio de 1M) para rastrear y descargar contenidos de tres sitios de la Web Oculta: la Biblioteca Médica PubMed, Amazon y el Proyecto Directorio Abierto. Según la información en el sitio web de PubMed, su colección contiene aproximadamente 14 millones de resúmenes de artículos biomédicos. Consideramos estos resúmenes como los documentos en el sitio, y en cada iteración de la política adaptativa, utilizamos estos resúmenes como entrada para el algoritmo. Por lo tanto, nuestro objetivo es descubrir tantos resúmenes únicos como sea posible mediante consultas repetidas a la interfaz de consulta web proporcionada por PubMed. La exploración de la Hidden Web en el sitio web de PubMed puede considerarse como específica del tema, debido a que todos los resúmenes dentro de PubMed están relacionados con los campos de la medicina y la biología. En el caso del sitio web de Amazon, estamos interesados en descargar todas las páginas ocultas que contienen información sobre libros. La consulta a Amazon se realiza a través del Kit de Desarrolladores de Software que Amazon proporciona para interactuar con su sitio web, y que devuelve resultados en forma de XML. El campo de palabra clave genérica se utiliza para la búsqueda, y como entrada a la política adaptativa extraemos la descripción del producto y el texto de las reseñas de los clientes cuando están presentes en la respuesta XML. Dado que Amazon no proporciona información sobre cuántos libros tiene en su catálogo, utilizamos muestreo aleatorio en el número ISBN de 10 dígitos de los libros para estimar el tamaño de la colección. De los 10,000 números de ISBN aleatorios consultados, se encontraron 46 en el catálogo de Amazon, por lo tanto, se estima que el tamaño de su colección de libros es de 4.6 millones de libros. También vale la pena señalar aquí que Amazon impone un límite superior en el número de resultados (libros en nuestro caso) devueltos por cada consulta, que está establecido en 32,000. En cuanto al tercer sitio web oculto, el Proyecto Directorio Abierto (también conocido como dmoz en adelante), el sitio mantiene los enlaces a 3.8 millones de sitios junto con un breve resumen de cada sitio listado. Los enlaces son buscables a través de una interfaz de búsqueda por palabras clave. Consideramos cada enlace indexado junto con su breve resumen como el documento del sitio dmoz, y proporcionamos los resúmenes cortos al algoritmo adaptativo para impulsar la selección de nuevas palabras clave para la consulta. En el sitio web de dmoz, realizamos dos rastreos de la Web Oculta: el primero es en su colección genérica de 3.8 millones de índices 7. No excluimos manualmente las palabras de parada (por ejemplo, el, es, de, etc.) de la lista de palabras clave. Resulta que todos los sitios web, excepto PubMed, devuelven documentos coincidentes para las palabras de parada, como "the".  El otro rastreo se realiza específicamente en la sección de Artes de dmoz (http:// dmoz.org/Arts), que comprende aproximadamente 429,000 sitios indexados relevantes para las Artes, lo que hace que este rastreo sea específico en temas, al igual que en PubMed. Al igual que Amazon, dmoz también impone un límite superior en el número de resultados devueltos, que son 10,000 enlaces con sus resúmenes. 4.1 Comparación de políticas. La primera pregunta que buscamos responder es la evolución de la métrica de cobertura a medida que enviamos consultas a los sitios. Es decir, ¿qué fracción de la colección de documentos almacenados en el sitio Hidden Web podemos descargar mientras consultamos continuamente nuevas palabras seleccionadas utilizando las políticas descritas anteriormente? Más formalmente, estamos interesados en el valor de P(q1 ∨ · · · ∨ qi−1 ∨ qi), después de enviar las consultas q1, . . . , qi, y a medida que i aumenta. En las Figuras 9, 10, 11 y 12 presentamos la métrica de cobertura para cada política, en función del número de consulta, para los sitios web de PubMed, Amazon, dmoz general y dmoz específico de arte, respectivamente. En el eje y se representa la fracción de los documentos totales descargados del sitio web, mientras que el eje x representa el número de consulta. Una primera observación de estos gráficos es que, en general, las políticas de frecuencia genérica y adaptativa funcionan mucho mejor que los algoritmos basados en azar. En todas las figuras, las gráficas para el random-1M y el random-16K están significativamente por debajo de las de otras políticas. Entre las políticas de frecuencia genérica y adaptativa, podemos ver que esta última supera a la primera cuando el sitio es específico en cuanto al tema. Por ejemplo, para el sitio de PubMed (Figura 9), el algoritmo adaptativo emite solo 83 consultas para descargar casi el 80% de los documentos almacenados en PubMed, pero el algoritmo de frecuencia genérico requiere 106 consultas para la misma cobertura. Para el rastreo de dmoz/Arts (Figura 12), la diferencia es aún más sustancial: la política adaptativa puede descargar el 99.98% de los sitios totales indexados en el Directorio emitiendo 471 consultas, mientras que el algoritmo basado en frecuencia es mucho menos efectivo utilizando el mismo número de consultas, y descubre solo el 72% del número total de sitios indexados. El algoritmo adaptativo, al examinar el contenido de las páginas que descarga en cada iteración, es capaz de identificar el tema del sitio según las palabras que aparecen con mayor frecuencia en el conjunto de resultados. Por consiguiente, es capaz de seleccionar palabras para consultas posteriores que son más relevantes para el sitio que las preferidas por la política de frecuencia genérica, las cuales se extraen de una colección grande y genérica. La Tabla 1 muestra una muestra de 10 palabras clave de las 211 seleccionadas y enviadas al sitio web de PubMed por el algoritmo adaptativo, pero no por las otras políticas. Para cada palabra clave, presentamos el número de la iteración, junto con el número de resultados que devolvió. Como se puede ver en la tabla, estas palabras clave son altamente relevantes para los temas de medicina y biología de la Biblioteca Médica Pública, y coinciden con numerosos artículos almacenados en su sitio web. En ambos casos examinados en las Figuras 9 y 12, las políticas basadas en azar tienen un rendimiento mucho peor que el algoritmo adaptativo y la frecuencia genérica. Sin embargo, vale la pena señalar que la política basada en la aleatoriedad con el pequeño y cuidadosamente seleccionado conjunto de 16,000 palabras de calidad logra descargar una fracción considerable del 42.5% 106 Iteración Palabra clave Número de resultados 23 departamento 2,719,031 34 pacientes 1,934,428 53 clínico 1,198,322 67 tratamiento 4,034,565 69 médico 1,368,200 70 hospital 503,307 146 enfermedad 1,520,908 172 proteína 2,620,938 Tabla 1: Muestra de palabras clave consultadas en PubMed exclusivamente por la política adaptativa del sitio web de PubMed después de 200 consultas, mientras que la cobertura para la sección de Artes de dmoz alcanza el 22.7%, después de 471 palabras clave consultadas. Por otro lado, el enfoque basado en la aleatoriedad que hace uso de la vasta colección de 1 millón de palabras, entre las cuales un gran número son palabras clave falsas, no logra descargar ni siquiera un mísero 1% de la colección total, después de enviar el mismo número de palabras de consulta. Para las colecciones genéricas de Amazon y los sitios dmoz, mostrados en las Figuras 10 y 11 respectivamente, obtenemos resultados mixtos: La política de frecuencia genérica muestra un rendimiento ligeramente mejor que la política adaptativa para el sitio de Amazon (Figura 10), y el método adaptativo claramente supera a la frecuencia genérica para el sitio general de dmoz (Figura 11). Un examen más detallado de los archivos de registro de los dos rastreadores de la Hidden Web revela la razón principal: Amazon estaba funcionando de manera muy inestable cuando el rastreador adaptativo lo visitó, lo que resultó en una gran cantidad de resultados perdidos. Por lo tanto, sospechamos que el rendimiento ligeramente deficiente de la política adaptativa se debe a esta variabilidad experimental. Actualmente estamos llevando a cabo otro experimento para verificar si esto es realmente cierto. Además de esta variabilidad experimental, el resultado del Amazonas indica que si la colección y las palabras que contiene un sitio web oculto son lo suficientemente genéricas, entonces el enfoque de frecuencia genérica puede ser un algoritmo candidato adecuado para un rastreo efectivo. En el caso de los sitios web ocultos específicos de un tema, las políticas basadas en aleatoriedad también muestran un rendimiento deficiente en comparación con los otros dos algoritmos al rastrear sitios genéricos: para el sitio web de Amazon, el aleatorio-16K logra descargar casi un 36.7% después de emitir 775 consultas, lamentablemente para la colección genérica de dmoz, la fracción de la colección de enlaces descargados es del 13.5% después de la 770ª consulta. Finalmente, como se esperaba, random-1M es aún peor que random16K, descargando solo el 14.5% de Amazon y el 0.3% del dmoz genérico. En resumen, el algoritmo adaptativo funciona notablemente bien en todos los casos: es capaz de descubrir y descargar la mayoría de los documentos almacenados en sitios de la Web Oculta emitiendo el menor número de consultas. Cuando la colección se refiere a un tema específico, es capaz de identificar las palabras clave más relevantes para el tema del sitio y, en consecuencia, solicitar términos que es más probable que devuelvan un gran número de resultados. Por otro lado, la política de frecuencia genérica también resulta ser bastante efectiva, aunque menos que la adaptativa: es capaz de recuperar relativamente rápido una gran parte de la colección, y cuando el sitio no es específico de un tema, su efectividad puede alcanzar la de la adaptativa (por ejemplo. Amazon. Finalmente, la política aleatoria tiene un rendimiento deficiente en general y no debería ser preferida. 4.2 Impacto de la consulta inicial. Un tema interesante que merece un examen más detenido es si la elección inicial de la palabra clave utilizada como la primera consulta emitida por el algoritmo adaptativo afecta su efectividad en las iteraciones posteriores. La elección de esta palabra clave no se realiza mediante la selección de la fracción de documentos 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 10 20 30 40 50 60 número de consulta Convergencia de adaptación bajo diferentes consultas iniciales - Sitio web de PubMed datos de información de PubMed devuelve Figura 13: Convergencia del algoritmo adaptativo utilizando diferentes consultas iniciales para rastrear el sitio web de PubMed el algoritmo adaptativo en sí mismo y debe ser configurado manualmente, ya que sus tablas de estadísticas de consulta aún no se han poblado. Por lo tanto, la selección es generalmente arbitraria, por lo que para automatizar completamente todo el proceso, parece necesaria alguna investigación adicional. Por esta razón, iniciamos tres rastreadores adaptativos de la Hidden Web dirigidos al sitio web de PubMed con diferentes palabras clave: la palabra "data", que devuelve 1,344,999 resultados, la palabra "information" que reporta 308,474 documentos, y la palabra "return" que recupera 29,707 páginas, de un total de 14 millones. Estas palabras clave representan diferentes grados de popularidad de términos en PubMed, siendo la primera de alta popularidad, la segunda de mediana y la tercera de baja. También mostramos resultados para la palabra clave pubmed, utilizada en los experimentos para la cobertura de la Sección 4.1, y que devuelve 695 artículos. Como podemos ver en la Figura 13, después de un pequeño número de consultas, los cuatro rastreadores descargan aproximadamente la misma fracción de la colección, independientemente de su punto de inicio: Sus coberturas son aproximadamente equivalentes a partir de la consulta número 25. Finalmente, los cuatro rastreadores utilizan el mismo conjunto de términos para sus consultas, independientemente de la consulta inicial. En el experimento específico, a partir de la 36ª consulta en adelante, los cuatro rastreadores utilizan los mismos términos para sus consultas en cada iteración, o se utilizan los mismos términos con una o dos consultas de diferencia. Nuestro resultado confirma la observación de [11] de que la elección de la consulta inicial tiene un efecto mínimo en el rendimiento final. Podemos explicar esto de manera intuitiva de la siguiente manera: Nuestro algoritmo aproxima el conjunto óptimo de consultas a utilizar para un sitio web en particular. Una vez que el algoritmo ha emitido un número significativo de consultas, tiene una estimación precisa del contenido del sitio web, independientemente de la consulta inicial. Dado que esta estimación es similar para todas las ejecuciones del algoritmo, los rastreadores utilizarán aproximadamente las mismas consultas. 4.3 Impacto del límite en el número de resultados Mientras que los sitios de Amazon y dmoz tienen un límite respectivo de 32,000 y 10,000 en el tamaño de sus resultados, estos límites pueden ser mayores que los impuestos por otros sitios de la Web Oculta. Para investigar cómo un límite más estricto en el tamaño del resultado afecta el rendimiento de nuestros algoritmos, realizamos dos rastreos adicionales en el sitio genérico-dmoz: ejecutamos las políticas genérica-frecuencia y adaptativa, pero solo recuperamos hasta los primeros 1,000 resultados para cada consulta. En la Figura 14 trazamos la cobertura de las dos políticas en función del número de consultas. Como era de esperar, al comparar el nuevo resultado en la Figura 14 con el de la Figura 11 donde el límite de resultado era de 10,000, concluimos que el límite más estricto requiere un mayor número de consultas para lograr la misma cobertura. Por ejemplo, cuando el límite de resultados era de 10,000, el pol107 adaptativo 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 500 1000 1500 2000 2500 3000 3500 Fracción de páginas únicas Número de consulta Fracción acumulada de páginas únicas descargadas por consulta - Sitio web de Dmoz (límite máximo 1000) adaptativo genérico-frecuencia Figura 14: Cobertura de Dmoz general después de limitar el número de resultados a 1,000 icy pudo descargar el 70% del sitio después de emitir 630 consultas, mientras que tuvo que emitir 2,600 consultas para descargar el 70% del sitio cuando el límite era de 1,000. Por otro lado, nuestro nuevo resultado muestra que incluso con un límite de resultados ajustado, todavía es posible descargar la mayor parte de un sitio de la Web Oculta después de emitir un número razonable de consultas. La política adaptativa pudo descargar más del 85% del sitio después de emitir 3,500 consultas cuando el límite era de 1,000. Finalmente, nuestro resultado muestra que nuestra política adaptativa supera consistentemente a la política genérica de frecuencia independientemente del límite de resultados. En tanto en la Figura 14 como en la Figura 11, nuestra política adaptativa muestra una cobertura significativamente mayor que la política genérica de frecuencia para el mismo número de consultas. 4.4 Incorporación del costo de descarga del documento. Para mayor concisión en la presentación, los resultados de la evaluación de rendimiento proporcionados hasta ahora asumieron un modelo de costos simplificado donde cada consulta implicaba un costo constante. En esta sección presentamos resultados sobre el rendimiento de los algoritmos adaptativos y de frecuencia genérica utilizando la Ecuación 2 para guiar nuestro proceso de selección de consultas. Como discutimos en la Sección 2.3.1, este modelo de costos de consulta incluye el costo de enviar la consulta al sitio, recuperar la página de índice de resultados y también descargar las páginas reales. Para estos costos, examinamos el tamaño de cada resultado en la página de índice y los tamaños de los documentos, y elegimos cq = 100, cr = 100 y cd = 10000, como valores para los parámetros de la Ecuación 2, y para el experimento particular que realizamos en el sitio web de PubMed. Los valores que seleccionamos implican que el costo de emitir una consulta y recuperar un resultado de la página de índice de resultados es aproximadamente el mismo, mientras que el costo de descargar una página real es 100 veces mayor. Creemos que estos valores son razonables para el sitio web de PubMed. La Figura 15 muestra la cobertura de los algoritmos de frecuencia adaptativa y genérica en función de las unidades de recurso utilizadas durante el proceso de descarga. El eje horizontal es la cantidad de recursos utilizados, y el eje vertical es la cobertura. Como se evidencia en el gráfico, la política adaptativa hace un uso más eficiente de los recursos disponibles, ya que es capaz de descargar más artículos que la frecuencia genérica, utilizando la misma cantidad de unidades de recurso. Sin embargo, la diferencia en la cobertura es menos dramática en este caso, en comparación con el gráfico de la Figura 9. La diferencia más pequeña se debe al hecho de que, bajo la métrica de costos actual, el costo de descarga de documentos constituye una parte significativa del costo. Por lo tanto, cuando ambas políticas descargaron la misma cantidad de documentos, el ahorro de la política adaptativa no es tan dramático como antes. Esa 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 5000 10000 15000 20000 25000 30000 Fracción de Páginas Únicas Costo Total (cq=100, cr=100, cd=10000) Fracción acumulativa de páginas únicas descargadas por unidad de costo - Frecuencia adaptativa del sitio web de PubMed Figura 15: La cobertura de PubMed después de incorporar el costo de descarga del documento es, el ahorro en el costo de la consulta y el costo de descarga del índice de resultados es solo una parte relativamente pequeña del costo total. Sin embargo, observamos ahorros significativos gracias a la política adaptativa. A un costo total de 8000, por ejemplo, la cobertura de la póliza adaptativa es aproximadamente 0.5, mientras que la cobertura de la póliza de frecuencia es solo 0.3. TRABAJO RELACIONADO En un estudio reciente, Raghavan y Garcia-Molina [29] presentan un modelo arquitectónico para un rastreador de la Web Oculta. El enfoque principal de este trabajo es aprender interfaces de consulta de la Web Oculta, no generar consultas automáticamente. Las consultas potenciales son proporcionadas manualmente por los usuarios o recopiladas de las interfaces de consulta. Por el contrario, nuestro enfoque principal es generar consultas automáticamente sin ninguna intervención humana. La idea de emitir consultas automáticamente a una base de datos y examinar los resultados ha sido utilizada previamente en diferentes contextos. Por ejemplo, en [10, 11], Callan y Connel intentan adquirir un modelo de lenguaje preciso recolectando una muestra aleatoria uniforme de la base de datos. En [22] Lawrence y Giles emiten consultas aleatorias a varios motores de búsqueda web para estimar la fracción de la Web que ha sido indexada por cada uno de ellos. De manera similar, Bharat y Broder [8] emiten consultas aleatorias a un conjunto de motores de búsqueda para estimar el tamaño relativo y la superposición de sus índices. En [6], Barbosa y Freire evalúan experimentalmente métodos para construir consultas de múltiples palabras clave que pueden devolver una gran fracción de una colección de documentos. Nuestro trabajo difiere de los estudios anteriores en dos aspectos. Primero, proporciona un marco teórico para analizar el proceso de generación de consultas para una base de datos y examinar los resultados, lo cual puede ayudarnos a comprender mejor la efectividad de los métodos presentados en el trabajo previo. Segundo, aplicamos nuestro marco de trabajo al problema del rastreo de la Web Oculta y demostramos la eficiencia de nuestros algoritmos. Cope et al. [15] proponen un método para detectar automáticamente si una página web en particular contiene un formulario de búsqueda. Este trabajo es complementario al nuestro; una vez que detectamos interfaces de búsqueda en la web utilizando el método en [15], podemos utilizar nuestros algoritmos propuestos para descargar páginas automáticamente de esos sitios web. La referencia [4] informa sobre métodos para estimar qué fracción de una base de datos de texto se puede adquirir eventualmente emitiendo consultas a la base de datos. En [3] los autores estudian técnicas basadas en consultas que pueden extraer datos relacionales de bases de datos de texto grandes. Nuevamente, estos trabajos estudian temas ortogonales y son complementarios a nuestro trabajo. Para hacer que los documentos en múltiples bases de datos textuales sean buscables en un lugar central, se han propuesto varios enfoques de recolección (por ejemplo, OAI [21], DP9 [24]). Estos enfoques asumen fundamentalmente bases de datos de documentos cooperativas que comparten voluntariamente parte de sus metadatos y/o documentos para ayudar a un motor de búsqueda de terceros a indexar los documentos. Nuestro enfoque asume bases de datos no cooperativas que no comparten sus datos públicamente y cuyos documentos solo son accesibles a través de interfaces de búsqueda. Existe un extenso cuerpo de trabajo que estudia cómo identificar la base de datos más relevante dada una consulta del usuario [20, 19, 14, 23, 18]. Este conjunto de trabajos se conoce comúnmente como meta-búsqueda o problema de selección de bases de datos en la Web Oculta. Por ejemplo, [19] sugiere el uso de preguntas específicas para clasificar bases de datos en una categoría temática, de modo que, dada una consulta, se pueda seleccionar una base de datos relevante en función de su categoría temática. Nuestra visión es diferente de este cuerpo de trabajo en el sentido de que pretendemos descargar e indexar las páginas ocultas en un lugar central con antelación, para que los usuarios puedan acceder a toda la información a su conveniencia desde un único lugar. 6. CONCLUSIÓN Y TRABAJO FUTURO Los rastreadores tradicionales normalmente siguen enlaces en la web para descubrir y descargar páginas. Por lo tanto, no pueden acceder a las páginas de la Web Oculta que solo son accesibles a través de interfaces de consulta. En este artículo, estudiamos cómo podemos construir un rastreador de la Web Oculta que pueda consultar automáticamente un sitio de la Web Oculta y descargar páginas de él. Propusimos tres políticas diferentes de generación de consultas para la Web Oculta: una política que elige consultas al azar de una lista de palabras clave, una política que elige consultas basadas en su frecuencia en una colección de texto genérico, y una política que elige de forma adaptativa una buena consulta basada en el contenido de las páginas descargadas del sitio de la Web Oculta. La evaluación experimental en 4 sitios reales de la Web Oculta muestra que nuestras políticas tienen un gran potencial. En particular, en ciertos casos la política adaptativa puede descargar más del 90% de un sitio web oculto después de emitir aproximadamente 100 consultas. Dado estos resultados, creemos que nuestro trabajo proporciona un mecanismo potencial para mejorar la cobertura del motor de búsqueda en la web y la experiencia del usuario en la búsqueda web. 6.1 Trabajo Futuro Discutimos brevemente algunas posibles líneas de investigación futuras. Bases de datos multiatributo Actualmente estamos investigando cómo extender nuestras ideas a bases de datos estructuradas multiatributo. Si bien generar consultas para bases de datos de múltiples atributos es claramente un problema más difícil, podemos aprovechar la siguiente observación para abordar este problema: Cuando un sitio admite consultas de múltiples atributos, el sitio a menudo devuelve páginas que contienen valores para cada uno de los atributos de la consulta. Por ejemplo, cuando una librería en línea admite consultas por título, autor e ISBN, las páginas devueltas por una consulta típicamente contienen el título, autor e ISBN de los libros correspondientes. Por lo tanto, si podemos analizar las páginas devueltas y extraer los valores de cada campo (por ejemplo, título = Harry Potter, autor = J.K. Rowling, etc.), podemos aplicar la misma idea que utilizamos para la base de datos textual: estimar la frecuencia de cada valor de atributo y seleccionar el más prometedor. El principal desafío es segmentar automáticamente las páginas devueltas para poder identificar las secciones de las páginas que presentan los valores correspondientes a cada atributo. Dado que muchos sitios web siguen estilos de formato limitados al presentar múltiples atributos, por ejemplo, la mayoría de los títulos de libros van precedidos por la etiqueta Título:, creemos que podemos aprender reglas de segmentación de páginas automáticamente a partir de un pequeño conjunto de ejemplos de entrenamiento. Otros problemas prácticos Además del problema de generación automática de consultas, hay muchos problemas prácticos que deben abordarse para construir un rastreador de la Hidden-Web completamente automático. Por ejemplo, en este artículo asumimos que el rastreador ya conoce todas las interfaces de consulta para los sitios de la Web Oculta. ¿Pero cómo puede el rastreador descubrir las interfaces de consulta? El método propuesto en [15] puede ser un buen punto de partida. Además, algunos sitios de la Web oculta devuelven sus resultados en lotes de, digamos, 20 páginas, por lo que el usuario tiene que hacer clic en un botón de siguiente para ver más resultados. En este caso, un rastreador de la Hidden-Web completamente automático debería saber que la página de índice del primer resultado contiene solo un resultado parcial y presionar automáticamente el botón de siguiente. Finalmente, algunos sitios de la Web oculta pueden contener un número infinito de páginas de la Web oculta que no aportan contenido significativo (por ejemplo, un calendario con enlaces para cada día). En este caso, el rastreador de la Web Oculta debería ser capaz de detectar que el sitio no tiene mucho más contenido nuevo y detener la descarga de páginas del sitio. Los algoritmos de detección de similitud de páginas pueden ser útiles para este propósito [9, 13]. 7. REFERENCIAS [1] Lexisnexis http://www.lexisnexis.com. [2] The Open Directory Project, http://www.dmoz.org. [3] E. Agichtein y L. Gravano. Consultando bases de datos de texto para una extracción eficiente de información. En ICDE, 2003. [4] E. Agichtein, P. Ipeirotis y L. Gravano. Modelado de acceso basado en consultas a bases de datos de texto. En WebDB, 2003. [5] Artículo en New York Times. El antiguo motor de búsqueda, la biblioteca, intenta encajar en un mundo dominado por Google. Disponible en: http://www.nytimes.com/2004/06/21/technology/21LIBR.html, junio de 2004. [6] L. Barbosa y J. Freire. Sifonando datos de la web oculta a través de interfaces basadas en palabras clave. En SBBD, 2004. [7] M. K. Bergman. La web profunda: Descubriendo valor oculto, http://www.press.umich.edu/jep/07-01/bergman.html. [8] K. Bharat y A. Broder. Una técnica para medir el tamaño relativo y la superposición de los motores de búsqueda web públicos. En WWW, 1998. [9] A. Z. Broder, S. C. Glassman, M. S. Manasse y G. Zweig. Agrupación sintáctica de la web. En WWW, 1997. [10] J. Callan, M. Connell y A. Lo siento, pero necesito una oración completa para poder traducirla. ¿Puedes proporcionar más contexto o una oración completa en inglés para que pueda traducirla al español? Descubrimiento automático de modelos de lenguaje para bases de datos de texto. En SIGMOD, 1999. [11] J. P. Callan y M. E. Connell. Muestreo basado en consultas de bases de datos de texto. Sistemas de Información, 19(2):97-130, 2001. [12] K. C.-C. Chang, B. Él, C. Li y Z. Zhang. Bases de datos estructuradas en la web: Observaciones e implicaciones. Informe técnico, UIUC. [13] J. Cho, N. Shivakumar y H. Garcia-Molina. Encontrando colecciones web replicadas. En SIGMOD, 2000. [14] W. Cohen y Y. Cantante. Aprendiendo a hacer consultas en la web. En el taller de AAAI sobre Sistemas de Información Basados en Internet, 1996. [15] J. Cope, N. Craswell y D. Hawking. Descubrimiento automatizado de interfaces de búsqueda en la web. En la 14ª conferencia australiana sobre tecnologías de bases de datos, 2003. [16] T. H. Cormen, C. E. Leiserson y R. L. Rivest. Introducción a los Algoritmos, 2da Edición. MIT Press/McGraw Hill, 2001. [17] D. Florescu, A. Y.

MIT Press/McGraw Hill, 2001. [17] D. Florescu, A. Y. Levy y A. O. Mendelzon. Técnicas de bases de datos para la web mundial: Una encuesta. SIGMOD Record, 27(3):59-74, 1998. [18] B.
Registro de SIGMOD, 27(3):59-74, 1998. [18] B. Él y K. C.-C. Chang. Emparejamiento de esquemas estadísticos en interfaces de consulta web. En la Conferencia SIGMOD, 2003. [19] P. Ipeirotis y L. Gravano. Búsqueda distribuida en la web oculta: Muestreo y selección jerárquica de bases de datos. En VLDB, 2002. [20] P. G. Ipeirotis, L. Gravano y M. Sahami. Explorar, contar y clasificar: Categorizando bases de datos de la web oculta. En SIGMOD, 2001. [21] C. Lagoze y H. V. Sompel. La Iniciativa de Archivos Abiertos: Construyendo un marco de interoperabilidad de bajo nivel de barreras en JCDL, 2001. [22] S. Lawrence y C. L. Giles. Buscando en la World Wide Web. Ciencia, 280(5360):98-100, 1998. [23] V. Z. Liu, J. C. Richard C. Luo y W. W. Chu. Dpro: Un enfoque probabilístico para la selección de bases de datos web ocultas utilizando sondas dinámicas. En ICDE, 2004. [24] X. Liu, K. Maly, M. Zubair y M. L. Nelson. DP9: Un servicio de puerta de enlace OAI para rastreadores web. En JCDL, 2002. [25] B. B. Mandelbrot. Geometría fractal de la naturaleza. W. H. Freeman & Co. [26] A. Ntoulas, J. Cho y C. Olston. ¿Qué hay de nuevo en la web? La evolución de la web desde la perspectiva de un motor de búsqueda. En WWW, 2004. [27] A. Ntoulas, P. Zerfos y J. Cho. Descargando contenido web oculto. Informe técnico, UCLA, 2004. [28] S. Olsen. ¿El poder de los motores de búsqueda amenaza la independencia de la web? http://news.com.com/2009-1023-963618.html. [29] S. Raghavan y H. Garcia-Molina. Explorando la web oculta. En VLDB, 2001. [30] G. K. Zipf. Comportamiento humano y el principio de menor esfuerzo. Addison-Wesley, Cambridge, MA, 1949. 109

Addison-Wesley, Cambridge, MA, 1949. 109