Aprendiendo las preferencias del consumidor utilizando similitud semántica ∗ Reyhan Aydo˘gan reyhan.aydogan@gmail.com Pınar Yolum pinar.yolum@boun.edu.tr Departamento de Ingeniería Informática Universidad Bo˘gaziçi Bebek, 34342, Estambul, Turquía RESUMEN En entornos en línea y dinámicos, los servicios solicitados por los consumidores pueden no ser atendidos de inmediato por los proveedores. Esto requiere que los consumidores y proveedores de servicios negocien sus necesidades y ofertas de servicio. Los enfoques de negociación multiagente suelen asumir que las partes están de acuerdo en el contenido del servicio y se centran en encontrar un consenso sobre el precio del servicio. Por el contrario, este trabajo desarrolla un enfoque a través del cual las partes pueden negociar el contenido de un servicio. Esto requiere un enfoque de negociación en el que las partes puedan entender la semántica de sus solicitudes y ofertas, y aprender gradualmente las preferencias de los demás con el tiempo. En consecuencia, proponemos una arquitectura en la que tanto los consumidores como los productores utilicen una ontología compartida para negociar un servicio. A través de interacciones repetitivas, el proveedor aprende con precisión las necesidades de los consumidores y puede hacer ofertas más dirigidas. Para permitir un aprendizaje rápido y preciso de las preferencias, desarrollamos una extensión al Espacio de Versiones y lo comparamos con técnicas de aprendizaje existentes. Desarrollamos aún más una métrica para medir la similitud semántica entre servicios y comparamos el rendimiento de nuestro enfoque utilizando diferentes métricas de similitud. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial Distribuida]: Sistemas Multiagente Términos Generales Algoritmos, Experimentación 1. INTRODUCCIÓN Los enfoques actuales del comercio electrónico tratan el precio del servicio como el principal elemento para la negociación al asumir que el contenido del servicio está fijo [9]. Sin embargo, la negociación sobre el precio presupone que otras propiedades del servicio ya han sido acordadas. Sin embargo, muchas veces el proveedor de servicios puede no estar ofreciendo el servicio exactamente solicitado debido a la falta de recursos, limitaciones en su política empresarial, y así sucesivamente [3]. Cuando esto sucede, el productor y el consumidor necesitan negociar el contenido del servicio solicitado [15]. Sin embargo, la mayoría de los enfoques de negociación existentes asumen que todas las características de un servicio son igualmente importantes y se centran en el precio [5, 2]. Sin embargo, en realidad no todas las características pueden ser relevantes y la relevancia de una característica puede variar de un consumidor a otro. Por ejemplo, el tiempo de finalización de un servicio puede ser importante para un consumidor, mientras que la calidad del servicio puede ser más importante para otro consumidor. Sin duda, tener en cuenta las preferencias del consumidor tiene un impacto positivo en el proceso de negociación. Para este propósito, la evaluación de los componentes del servicio con diferentes pesos puede ser útil. Algunos estudios toman estos pesos como a priori y utilizan los pesos fijos [4]. Por otro lado, en su mayoría el productor no conoce las preferencias de los consumidores antes de la negociación. Por lo tanto, es más apropiado que el productor conozca estas preferencias de cada consumidor. Aprendizaje de preferencias: Como alternativa, proponemos una arquitectura en la que los proveedores de servicios aprenden las características relevantes de un servicio para un cliente en particular con el tiempo. Representamos las solicitudes de servicio como un vector de características del servicio. Utilizamos una ontología para capturar las relaciones entre servicios y construir las características para un servicio dado. Al utilizar una ontología común, permitimos a los consumidores y productores compartir un vocabulario común para la negociación. El servicio en particular que hemos utilizado es un servicio de venta de vinos. El vendedor de vinos aprende las preferencias de vino del cliente para vender vinos más dirigidos. El productor modela las solicitudes del consumidor y sus contraofertas para aprender qué características son más importantes para el consumidor. Dado que no hay información presente antes de que comiencen las interacciones, el algoritmo de aprendizaje debe ser incremental para que pueda ser entrenado en tiempo de ejecución y pueda revisarse a sí mismo con cada nueva interacción. Generación de servicios: Incluso después de que el productor aprende las características importantes para un consumidor, necesita un método para generar ofertas que sean las más relevantes para el consumidor entre su conjunto de posibles servicios. En otras palabras, la pregunta es cómo el productor utiliza la información que se obtuvo de los diálogos para hacer la mejor oferta al consumidor. Por ejemplo, supongamos que el productor ha descubierto que el consumidor quiere comprar un vino tinto pero el productor solo puede ofrecer vino rosado o blanco. ¿Qué deberían ofrecer los productores 1301 978-81-904262-7-5 (RPS) c 2007 IFAAMAS; vino blanco o vino rosado? Si el productor tiene cierto conocimiento del dominio sobre la similitud semántica (por ejemplo, sabe que los vinos tinto y rosado son más similares en sabor que el vino blanco), entonces puede generar mejores ofertas. Sin embargo, además del conocimiento del dominio, esta derivación requiere métricas apropiadas para medir la similitud entre los servicios disponibles y las preferencias aprendidas. El resto de este documento está organizado de la siguiente manera: la Sección 2 explica nuestra arquitectura propuesta. La sección 3 explica los algoritmos de aprendizaje que se estudiaron para aprender las preferencias del consumidor. La sección 4 estudia los diferentes mecanismos de oferta de servicios. La sección 5 contiene las métricas de similitud utilizadas en los experimentos. Los detalles del sistema desarrollado se analizan en la Sección 6. La sección 7 proporciona nuestra configuración experimental, casos de prueba y resultados. Finalmente, la Sección 8 discute y compara nuestro trabajo con otros trabajos relacionados. 2. Nuestra arquitectura principal está compuesta por agentes consumidores y productores, los cuales se comunican entre sí para llevar a cabo negociaciones orientadas al contenido. La Figura 1 representa nuestra arquitectura. El agente del consumidor representa al cliente y, por lo tanto, tiene acceso a las preferencias del cliente. El agente del consumidor genera solicitudes de acuerdo con estas preferencias y negocia con el productor basándose en estas preferencias. De igual manera, el agente productor tiene acceso al inventario de los productores y sabe qué vinos están disponibles o no. Una ontología compartida proporciona el vocabulario necesario y, por lo tanto, permite un lenguaje común para los agentes. Esta ontología describe el contenido del servicio. Además, dado que una ontología puede representar conceptos, sus propiedades y sus relaciones semánticamente, los agentes pueden razonar los detalles del servicio que se está negociando. Dado que un servicio puede ser cualquier cosa, como vender un coche, reservar una habitación de hotel, etc., la arquitectura es independiente de la ontología utilizada. Sin embargo, para hacer nuestra discusión concreta, utilizamos la conocida ontología del Vino [19] con algunas modificaciones para ilustrar nuestras ideas y probar nuestro sistema. La ontología del vino describe diferentes tipos de vino e incluye características como color, cuerpo, bodega del vino, entre otros. Con esta ontología, el servicio que se está negociando entre el consumidor y el productor es el de vender vino. El repositorio de datos en la Figura 1 es utilizado únicamente por el agente productor y contiene la información del inventario del productor. El repositorio de datos incluye información sobre los productos que posee el productor, el número de productos y las calificaciones de esos productos. Las calificaciones indican la popularidad de los productos entre los clientes. Esos se utilizan para decidir qué producto se ofrecerá cuando existen más de un producto con la misma similitud a la solicitud del agente del consumidor. La negociación se lleva a cabo de manera secuencial, donde el agente consumidor inicia la negociación con una solicitud de servicio particular. La solicitud está compuesta por características significativas del servicio. En el ejemplo del vino, estas características incluyen el color, la bodega y demás. Este es el vino en particular que el cliente está interesado en comprar. Si el productor tiene el vino solicitado en su inventario, el productor ofrece el vino y la negociación termina. De lo contrario, el productor ofrece un vino alternativo del inventario. Cuando el consumidor recibe una contraoferta del productor, la evaluará. Si es aceptable, entonces la negociación terminará. De lo contrario, el cliente generará una nueva solicitud o se mantendrá en la solicitud anterior. Este proceso continuará hasta que algún servicio sea aceptado por el agente del consumidor o todas las ofertas posibles sean presentadas al consumidor por el productor. Uno de los desafíos cruciales de la negociación orientada al contenido es la generación automática de contraofertas por parte del productor de servicios. Cuando el productor construye su oferta, debe considerar tres cosas importantes: la solicitud actual, las preferencias del consumidor y los servicios disponibles del productor, tal como se muestra en la Figura 1: Arquitectura de Negociación Propuesta. Tanto la solicitud actual del consumidor como los servicios disponibles del productor son accesibles para el productor. Sin embargo, las preferencias de los consumidores en la mayoría de los casos no estarán disponibles. Por lo tanto, el productor tendrá que entender las necesidades del consumidor a partir de sus interacciones y generar una contraoferta que probablemente sea aceptada por el consumidor. Este desafío se puede estudiar en tres etapas: • Aprendizaje de preferencias: ¿Cómo pueden los productores aprender sobre las preferencias de cada cliente basándose en solicitudes y contraofertas? (Sección 3) • Oferta de servicios: ¿Cómo pueden los productores revisar sus ofertas basándose en las preferencias de los consumidores que han aprendido hasta ahora? (Sección 4) • Estimación de similitud: ¿Cómo puede el agente productor estimar la similitud entre la solicitud y los servicios disponibles? (Sección 5) APRENDIZAJE DE PREFERENCIAS Las solicitudes del consumidor y las contraofertas del productor se representan como vectores, donde cada elemento en el vector corresponde al valor de una característica. Las solicitudes de los consumidores representan productos de vino individuales, mientras que sus preferencias son restricciones sobre las características del servicio. Por ejemplo, un consumidor puede tener preferencia por el vino tinto. Esto significa que el consumidor está dispuesto a aceptar cualquier vino ofrecido por los productores siempre y cuando el color sea rojo. Por lo tanto, el consumidor genera una solicitud donde la característica de color se establece en rojo y otras características se establecen en valores arbitrarios, por ejemplo (Medio, Fuerte, Rojo). Al principio de la negociación, el agente del productor no conoce las preferencias del consumidor, pero necesitará aprenderlas utilizando la información obtenida de los diálogos entre el productor y el consumidor. Las preferencias denotan la importancia relativa de las características de los servicios demandados por los agentes consumidores. Por ejemplo, el color del vino puede ser importante, por lo que el consumidor insiste en comprar el vino cuyo color es rojo y rechaza todos los 1302 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Tabla 1: Cómo funciona DCEA Tipo Muestra El conjunto más general El conjunto más específico + (Completo,Fuerte,Blanco) {(?, ?, ?)} {(Completo,Fuerte,Blanco)} {{(?-Completo), ?, ? }, - (Completo,Delicado,Rosa) {?, (?-Delicado), ? }, {(Completo,Fuerte,Blanco)} {?, ?, (?-Rosa)}} {{(?-Completo), ?, ? }, {{(Completo,Fuerte,Blanco)}, + (Medio,Moderado,Rojo) {?,(?-Delicado), ? }, {(Medio,Moderado,Rojo)}} {?, ?, (?-Rosa)}} las ofertas que involucran el vino cuyo color es blanco o rosa. Por el contrario, la bodega puede que no sea tan importante como el color para este cliente, por lo que el consumidor puede tener tendencia a aceptar vinos de cualquier bodega siempre y cuando el color sea rojo. Para abordar este problema, proponemos utilizar algoritmos de aprendizaje incremental [6]. Esto es necesario ya que no hay datos de entrenamiento disponibles antes de que comiencen las interacciones. Investigamos particularmente dos enfoques. El primero es el aprendizaje inductivo. Esta técnica se aplica para aprender las preferencias como conceptos. Desarrollamos el Algoritmo de Eliminación de Candidatos (CEA) para el Espacio de Versiones [10]. Se sabe que CEA tiene un rendimiento deficiente si la información que se va a aprender es disyuntiva. Curiosamente, la mayoría de las veces las preferencias del consumidor son disyuntivas. Estamos considerando un agente que está comprando vino. El consumidor puede preferir vino tinto o vino rosado pero no vino blanco. Para utilizar CEA con tales preferencias, es necesaria una modificación sólida. El segundo enfoque son los árboles de decisión. Los árboles de decisión pueden aprender fácilmente a partir de ejemplos y clasificar nuevas instancias como positivas o negativas. Un árbol de decisión incremental bien conocido es ID5R [18]. Sin embargo, se sabe que ID5R sufre de una alta complejidad computacional. Por esta razón, en su lugar utilizamos el algoritmo ID3 [13] y construimos de forma iterativa árboles de decisión para simular el aprendizaje incremental. CEA [10] es uno de los algoritmos de aprendizaje inductivo que aprende conceptos a partir de ejemplos observados. El algoritmo mantiene dos conjuntos para modelar el concepto que se va a aprender. El primer conjunto es el conjunto más general G. G contiene hipótesis sobre todos los posibles valores que el concepto puede obtener. Como su nombre indica, es una generalización y contiene todos los valores posibles a menos que se haya identificado que los valores no representan el concepto. El segundo conjunto es el conjunto S más específico. S solo contiene hipótesis que se sabe que identifican el concepto que se está aprendiendo. Al comienzo del algoritmo, G se inicializa para cubrir todos los conceptos posibles mientras que S se inicializa como vacío. Durante las interacciones, cada solicitud del consumidor puede considerarse como un ejemplo positivo y cada contraoferta generada por el productor y rechazada por el agente del consumidor puede ser considerada como un ejemplo negativo. En cada interacción entre el productor y el consumidor, tanto G como S son modificados. Las muestras negativas refuerzan la especialización de algunas hipótesis para que G no cubra ninguna hipótesis que acepte las muestras negativas como positivas. Cuando llega una muestra positiva, el conjunto S más específico debe generalizarse para cubrir la nueva instancia de entrenamiento. Como resultado, las hipótesis más generales y las hipótesis más específicas cubren todas las muestras de entrenamiento positivas pero no cubren ninguna negativa. Incrementalmente, G se especializa y S se generaliza hasta que G y S sean iguales entre sí. Cuando estos conjuntos son iguales, el algoritmo converge al alcanzar el concepto objetivo. 3.2 CEA Disyuntivo Desafortunadamente, CEA está principalmente dirigido a conceptos conjuntivos. Por otro lado, necesitamos aprender conceptos disyuntivos en la negociación de un servicio ya que el consumidor puede tener varios deseos alternativos. Hay varios estudios sobre el aprendizaje de conceptos disyuntivos a través del Espacio de Versiones. Algunos de estos enfoques utilizan múltiples espacios de versión. Por ejemplo, Hong et al. mantienen varios espacios de versión mediante operaciones de división y fusión [7]. Para poder aprender conceptos disyuntivos, crean nuevos espacios de versión examinando la consistencia entre G y S. Nos ocupamos del problema de no admitir conceptos disyuntivos de CEA al extender nuestro lenguaje de hipótesis para incluir hipótesis disyuntivas además de las conjunciones y la negación. Cada atributo de la hipótesis tiene dos partes: la lista inclusiva, que contiene la lista de valores válidos para ese atributo, y la lista exclusiva, que es la lista de valores que no pueden ser tomados para esa característica. EJEMPLO 1. Suponga que el conjunto más específico es {(Luz, Delicado, Rojo)} y llega un ejemplo positivo, (Luz, Delicado, Blanco). El CEA original generalizará esto como (Claro, Delicado, ?), lo que significa que el color puede tomar cualquier valor. Sin embargo, de hecho, solo sabemos que el color puede ser rojo o blanco. En el DCEA, lo generalizamos como {(Claro, Delicado, [Blanco, Rojo])}. Solo cuando todos los valores existan en la lista, serán reemplazados por ?. En otras palabras, permitimos que el algoritmo generalice más lentamente que antes. Modificamos el algoritmo CEA para hacer frente a este cambio. El algoritmo modificado, DCEA, se presenta como Algoritmo 1. Nótese que, en comparación con los estudios anteriores de versiones disyuntivas, nuestro enfoque utiliza solo un espacio de versiones en lugar de múltiples espacios de versiones. La fase de inicialización es la misma que el algoritmo original (líneas 1, 2). Si llega alguna muestra positiva, agregamos la muestra al conjunto especial como antes (línea 4). Sin embargo, no eliminamos las hipótesis en G que no cubren esta muestra, ya que G ahora contiene una disyunción de muchas hipótesis, algunas de las cuales entrarán en conflicto entre sí. Eliminar una hipótesis específica de G resultará en la pérdida de información, ya que no se garantiza que otras hipótesis la cubran. Después de algún tiempo, algunas hipótesis en S pueden fusionarse y construir una hipótesis (líneas 6, 7). Cuando llega una muestra negativa, no cambiamos S como antes. Solo modificamos las hipótesis más generales para no cubrir esta muestra negativa (líneas 11-15). A diferencia del CEA original, intentamos especializar el G mínimamente. El algoritmo elimina la hipótesis que cubre la muestra negativa (línea 13). Luego, generamos nuevas hipótesis utilizando el número de todos los atributos posibles mediante el uso de la hipótesis eliminada. Para cada atributo en la muestra negativa, agregamos uno de ellos a la lista exclusiva de hipótesis eliminadas cada vez. Por lo tanto, se generan todas las hipótesis posibles que no cubren la muestra negativa (línea 14). Ten en cuenta que la lista exclusiva contiene los valores que el atributo no puede tomar. Por ejemplo, considera el atributo del color. Si una hipótesis incluye rojo en su lista exclusiva y ? en su lista inclusiva, esto significa que el color puede tomar cualquier valor excepto rojo. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Algoritmo 1: Algoritmo de Eliminación de Candidatos Disyuntivos 1: G ← el conjunto de hipótesis maximalmente generales en H 2: S ← el conjunto de hipótesis maximalmente específicas en H 3: Para cada ejemplo de entrenamiento, d 4: si d es un ejemplo positivo entonces 5: Agregar d a S 6: si s en S puede combinarse con d para formar un solo elemento entonces 7: Combinar s y d en sd {sd es la regla que cubre s y d} 8: fin si 9: fin si 10: si d es un ejemplo negativo entonces 11: Para cada hipótesis g en G que cubre d 12: * Suponer: g = (x1, x2, ..., xn) y d = (d1, d2, ..., dn) 13: - Eliminar g de G 14: - Agregar hipótesis g1, g2, gn donde g1 = (x1-d1, x2,..., xn), g2 = (x1, x2-d2,..., xn),..., y gn = (x1, x2,..., xn-dn) 15: - Eliminar de G cualquier hipótesis que sea menos general que otra hipótesis en G 16: fin si EJEMPLO 2. La Tabla 1 ilustra las primeras tres interacciones y el funcionamiento de DCEA. El conjunto más general y el conjunto más específico muestran los contenidos de G y S después de que llega la muestra. Después de la primera muestra positiva, S se generaliza para cubrir también la instancia. La segunda muestra es negativa. Por lo tanto, reemplazamos (?, ?, ?) por tres hipótesis disyuntivas; cada hipótesis siendo mínimamente especializada. En este proceso, en cada momento se aplica un valor de atributo de muestra negativa a la hipótesis en el conjunto general. La tercera muestra es positiva y generaliza S aún más. Ten en cuenta que en la Tabla 1, no eliminamos {(?-Completo), ?, ?} del conjunto general al tener una muestra positiva como (Completo, Fuerte, Blanco). Esto se deriva de la posibilidad de utilizar esta regla en la generación de otras hipótesis. Por ejemplo, si el ejemplo continúa con una muestra negativa (Lleno, Fuerte, Rojo), podemos especializar la regla anterior como {(?-Lleno), ?, (?-Rojo)}. Por el Algoritmo 1, no perdemos ninguna información. 3.3 ID3 ID3 [13] es un algoritmo que construye árboles de decisión de manera descendente a partir de los ejemplos observados representados en un vector con pares atributo-valor. Aplicar este algoritmo a nuestro sistema con la intención de aprender las preferencias de los consumidores es apropiado, ya que este algoritmo también admite el aprendizaje de conceptos disyuntivos además de conceptos conjuntivos. El algoritmo ID3 se utiliza en el proceso de aprendizaje con el propósito de clasificar ofertas. Hay dos clases: positiva y negativa. Positivo significa que la descripción del servicio posiblemente será aceptada por el agente del consumidor, mientras que el negativo implica que potencialmente será rechazada por el consumidor. Las solicitudes de los consumidores se consideran como ejemplos de entrenamiento positivos y todas las contraofertas rechazadas se consideran como negativas. El árbol de decisión tiene dos tipos de nodos: nodo hoja en el que se almacenan las etiquetas de clase de las instancias y nodos no hoja en los que se almacenan los atributos de prueba. El atributo de prueba en un nodo no hoja es uno de los atributos que conforman la descripción del servicio. Por ejemplo, el cuerpo, sabor, color, entre otros, son atributos potenciales para la degustación de vinos. Cuando queremos determinar si la descripción del servicio proporcionada es aceptable, comenzamos buscando desde el nodo raíz examinando el valor de los atributos de prueba hasta llegar a un nodo hoja. El problema con este algoritmo es que no es un algoritmo incremental, lo que significa que todos los ejemplos de entrenamiento deben existir antes de aprender. Para superar este problema, el sistema mantiene las solicitudes de los consumidores a lo largo de la interacción de negociación como ejemplos positivos y todas las contraofertas rechazadas por el consumidor como ejemplos negativos. Después de cada solicitud entrante, el árbol de decisiones se reconstruye. Sin duda, hay una desventaja de la reconstrucción, como una carga adicional en el proceso. Sin embargo, en la práctica hemos evaluado que el ID3 es rápido y el costo de reconstrucción es insignificante. 4. OFERTA DE SERVICIO Después de conocer las preferencias de los consumidores, el productor necesita hacer una contraoferta que sea compatible con las preferencias de los consumidores. 4.1 Oferta de Servicio a través de CEA y DCEA Para generar la mejor oferta, el agente productor utiliza su ontología de servicios y el algoritmo CEA. El mecanismo de oferta de servicios es el mismo tanto para el CEA original como para el DCEA, pero como se explicó anteriormente, sus métodos para actualizar G y S son diferentes. Cuando el productor recibe una solicitud del consumidor, el conjunto de aprendizaje del productor se entrena con esta solicitud como una muestra positiva. Los componentes de aprendizaje, el conjunto más específico S y el conjunto más general G se utilizan activamente en la prestación de servicios. El conjunto más general, G, es utilizado por el productor para evitar ofrecer los servicios que serán rechazados por el agente consumidor. En otras palabras, filtra el conjunto de servicios de los servicios no deseados, ya que G contiene hipótesis que son consistentes con las solicitudes del consumidor. El conjunto más específico, S, se utiliza para encontrar la mejor oferta, que es similar a las preferencias de los consumidores. Dado que el conjunto más específico S contiene las solicitudes anteriores y la solicitud actual, estimar la similitud entre este conjunto y cada servicio en la lista de servicios es muy conveniente para encontrar la mejor oferta de la lista de servicios. Cuando el consumidor inicia la interacción con el agente productor, el agente productor carga todos los servicios relacionados en el objeto de lista de servicios. Esta lista constituye el inventario de servicios de los proveedores. Al recibir una solicitud, si el productor puede ofrecer un servicio exactamente coincidente, entonces lo hace. Por ejemplo, para un vino esto corresponde a vender un vino que coincida exactamente con las características especificadas en la solicitud del consumidor. Cuando el productor no puede ofrecer el servicio solicitado, intenta encontrar el servicio que sea más similar a los servicios solicitados por el consumidor durante la negociación. Para hacer esto, el productor tiene que calcular la similitud entre los servicios que puede ofrecer y los servicios que han sido solicitados (en S). Calculamos las similitudes de varias maneras, como se explicará en la Sección 5. Después de calcular la similitud de los servicios disponibles con el actual S, puede haber más de un servicio con la máxima similitud. El agente productor puede romper el empate de varias maneras. Aquí, hemos asociado un valor de calificación con cada servicio y el productor prefiere el servicio con la calificación más alta sobre los demás. 4.2 Oferta de Servicio a través de ID3 Si el productor aprende las preferencias de los consumidores con ID3, se aplica un mecanismo similar con dos diferencias. Primero, dado que ID3 no mantiene G, se eliminan de la lista de servicios aquellos no aceptados que se clasifican como negativos. Segundo, las similitudes de los posibles servicios no se miden con respecto a S, sino en cambio a todas las solicitudes previamente realizadas. 4.3 Mecanismos Alternativos de Oferta de Servicios Además de estos tres mecanismos de oferta de servicios (Oferta de Servicio con CEA, Oferta de Servicio con DCEA y Oferta de Servicio con ID3), incluimos otros dos mecanismos. 1304 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) • Oferta de Servicio Aleatoria (RO): El productor genera una contraoferta aleatoriamente de la lista de servicios disponibles, sin considerar las preferencias de los consumidores. • Oferta de Servicio considerando solo la solicitud actual (SCR): El productor selecciona una contraoferta de acuerdo con la similitud de la solicitud actual del consumidor pero no considera solicitudes anteriores. 5. ESTIMACIÓN DE SIMILITUD La similitud puede ser estimada con una métrica de similitud que toma dos entradas y devuelve qué tan similares son. Existen varios métricos de similitud utilizados en sistemas de razonamiento basado en casos, como la suma ponderada de la distancia euclidiana, la distancia de Hamming, entre otros [12]. La métrica de similitud afecta el rendimiento del sistema al decidir qué servicio es el más cercano a la solicitud del consumidor. Primero analizamos algunas métricas existentes y luego proponemos una nueva métrica de similitud semántica llamada Similitud RP. La métrica de similitud de Tversky compara dos vectores en términos del número de características que coinciden exactamente. En la Ecuación (1), común representa la cantidad de atributos coincidentes, mientras que diferente representa la cantidad de atributos diferentes. Nuestra suposición actual es que α y β son iguales entre sí. SMpq = α(común) α(común) + β(diferente) (1) Aquí, al comparar dos características, asignamos cero para la disimilitud y uno para la similitud al omitir la cercanía semántica entre los valores de las características. La métrica de similitud de Tversky está diseñada para comparar dos vectores de características. En nuestro sistema, mientras que la lista de servicios que puede ofrecer el productor son cada uno un vector de características, el conjunto más específico S no es un vector de características. S consiste en hipótesis de vectores de características. Por lo tanto, estimamos la similitud de cada hipótesis dentro del conjunto más específico S y luego calculamos el promedio de las similitudes. EJEMPLO 3. Suponga que S contiene las siguientes dos hipótesis: { {Luz, Moderado, (Rojo, Blanco)} , {Completo, Fuerte, Rosa}}. Toma el servicio s como (Ligero, Resistente, Rosa). Entonces, la similitud del primero es igual a 1/3 y la del segundo es igual a 2/3 de acuerdo con la Ecuación (1). Normalmente, tomamos el promedio de ello y obtenemos (1/3 + 2/3)/2, que es igual a 1/2. Sin embargo, la primera hipótesis implica el efecto de dos solicitudes y la segunda hipótesis implica solo una solicitud. Por lo tanto, esperamos que el efecto de la primera hipótesis sea mayor que el de la segunda. Por lo tanto, calculamos la similitud promedio teniendo en cuenta la cantidad de muestras que las hipótesis cubren. Que ch denote el número de muestras que cubre la hipótesis h y (SM(h,servicio)) denote la similitud de la hipótesis h con el servicio dado. Calculamos la similitud de cada hipótesis con el servicio dado y las ponderamos con el número de muestras que cubren. Encontramos la similitud dividiendo la suma ponderada de las similitudes de todas las hipótesis en S con el servicio por el número de todas las muestras que están cubiertas en S. AV G−SM(servicio, S) = |S| |h| (ch ∗ SM(h, servicio)) |S| |h| ch (2) Figura 2: Taxonomía de muestra para estimación de similitud EJEMPLO 4. Para el ejemplo anterior, la similitud de (Luz, Fuerte, Rosa) con el conjunto específico es (2 ∗ 1/3 + 2/3)/3, igual a 4/9. El número posible de muestras que abarca una hipótesis se puede estimar multiplicando las cardinalidades de cada atributo. Por ejemplo, la cardinalidad del primer atributo es dos y la de los demás es igual a uno para la hipótesis dada, como {Luz, Moderado, (Rojo, Blanco)}. Cuando los multiplicamos, obtenemos dos (2 ∗ 1 ∗ 1 = 2). 5.2 La métrica de similitud de Lins Un taxonomía puede ser utilizada al estimar la similitud semántica entre dos conceptos. Estimar la similitud semántica en una taxonomía de tipo Es-Un se puede hacer calculando la distancia entre los nodos relacionados con los conceptos comparados. Los enlaces entre los nodos pueden considerarse como distancias. Entonces, la longitud del camino entre los nodos indica qué tan similares son los conceptos. Una estimación alternativa para utilizar el contenido de información en la estimación de la similitud semántica en lugar del método de conteo de aristas, fue propuesta por Lin [8]. La ecuación (3) [8] muestra la similitud de Lin donde c1 y c2 son los conceptos comparados y c0 es el concepto más específico que subsume a ambos. Además, P(C) representa la probabilidad de que un objeto seleccionado arbitrariamente pertenezca al concepto C. La similitud(c1, c2) = 2 × log P(c0) log P(c1) + log P(c2) (3) 5.3 Métrica de similitud de Wu y Palmers Diferente de Lin, Wu y Palmer utilizan la distancia entre los nodos en la taxonomía ES-UN [20]. La similitud semántica se representa con la Ecuación (4) [20]. Aquí, se estima la similitud entre c1 y c2 y c0 es el concepto más específico que subsume estas clases. N1 es el número de aristas entre c1 y c0. N2 es el número de aristas entre c2 y c0. N0 es el número de enlaces IS-A de c0 desde la raíz de la taxonomía. Proponemos estimar la distancia relativa en una taxonomía entre dos conceptos utilizando las siguientes intuiciones. Utilizamos la Figura 2 para ilustrar estas intuiciones. • Padre versus abuelo: El padre de un nodo es más similar al nodo que los abuelos de ese. Generalización del Sexto Internacional. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1305 es un concepto que razonablemente resulta en alejarse más de ese concepto. Cuanto más generales son los conceptos, menos similares son. Por ejemplo, AnyWineColor es el padre de ReddishColor y ReddishColor es el padre de Red. Entonces, esperamos que la similitud entre ReddishColor y Red sea mayor que la similitud entre AnyWineColor y Red. • Padre versus hermano: Un nodo tendría una similitud mayor con su padre que con su hermano. Por ejemplo, Rojo y Rosa son hijos de ColorRojo. En este caso, esperamos que la similitud entre Rojo y ColorRojizo sea mayor que la de Rojo y Rosa. • Hermano versus abuelo: Un nodo es más similar a su hermano que a su abuelo. Para ilustrar, AnyWineColor es el abuelo de Red, y Red y Rose son hermanos. Por lo tanto, posiblemente anticipamos que Rojo y Rosa son más similares que CualquierColorDeVino y Rojo. Como una taxonomía está representada en un árbol, ese árbol puede ser recorrido desde el primer concepto que se está comparando hasta el segundo concepto. En el nodo inicial relacionado con el primer concepto, el valor de similitud es constante y igual a uno. Este valor se reduce por una constante en cada nodo visitado a lo largo del camino que llegará al nodo que incluye el segundo concepto. Cuanto más corto sea el camino entre los conceptos, mayor será la similitud entre los nodos. Algoritmo 2 Estimar-Similitud-RP(c1,c2) Requerido: Las constantes deben ser m > n > m2 donde m, n ∈ R[0, 1] 1: Similitud ← 1 2: si c1 es igual a c2 entonces 3: Devolver Similitud 4: fin si 5: padreComun ← encontrarPadreComun(c1, c2) {padreComun es el concepto más específico que cubre tanto c1 como c2} 6: N1 ← encontrarDistancia(padreComun, c1) 7: N2 ← encontrarDistancia(padreComun, c2) {N1 y N2 son el número de enlaces entre el concepto y el concepto padre} 8: si (padreComun == c1) o (padreComun == c2) entonces 9: Similitud ← Similitud ∗ m(N1+N2) 10: sino 11: Similitud ← Similitud ∗ n ∗ m(N1+N2−2) 12: fin si 13: Devolver Similitud La distancia relativa entre los nodos c1 y c2 se estima de la siguiente manera. Comenzando desde c1, se recorre el árbol para llegar a c2. En cada salto, la similitud disminuye ya que los conceptos se están alejando cada vez más entre sí. Sin embargo, según nuestras intuiciones, no todos los saltos disminuyen la similitud de igual manera. Que m represente el factor para saltar de un hijo a un padre y que n represente el factor para saltar de un hermano a otro hermano. Dado que saltar de un nodo a su abuelo cuenta como dos saltos de padre, el factor de descuento al moverse de un nodo a su abuelo es m2. De acuerdo con las intuiciones anteriores, nuestras constantes deben estar en la forma m > n > m2 donde el valor de m y n debe estar entre cero y uno. El algoritmo 2 muestra el cálculo de la distancia. Según el algoritmo, en primer lugar la similitud se inicializa con el valor de uno (línea 1). Si los conceptos son iguales entre sí, entonces la similitud será uno (líneas 2-4). De lo contrario, calculamos el ancestro común de los dos nodos y la distancia de cada concepto al ancestro común sin considerar al hermano (líneas 5-7). Si uno de los conceptos es igual al padre común, entonces no hay relación de hermanos entre los conceptos. Para cada nivel, multiplicamos la similitud por m y no consideramos el factor de hermanos en la estimación de la similitud. Como resultado, disminuimos la similitud en cada nivel con la tasa de m (línea 9). De lo contrario, tiene que existir una relación de hermanos. Esto significa que debemos considerar el efecto de n al medir la similitud. Recuerde que hemos contado N1+N2 aristas entre los conceptos. Dado que existe una relación de hermanos, dos de estos bordes constituyen la relación de hermanos. Por lo tanto, al calcular el efecto de la relación parental, utilizamos N1+N2 −2 aristas (línea 11). Algunas estimaciones de similitud relacionadas con la taxonomía en la Figura 2 se presentan en la Tabla 2. En este ejemplo, se toma m como 2/3 y n como 4/7. Tabla 2: Estimación de similitud de muestra sobre la taxonomía de muestra. Similitud(ColorRojo, Rosa) = 1 ∗ (2/3) = 0.6666667 Similitud(Rojo, Rosa) = 1 ∗ (4/7) = 0.5714286 Similitud(CualquierColorVino, Rosa) = 1 ∗ (2/3)2 = 0.44444445 Similitud(Blanco, Rosa) = 1 ∗ (2/3) ∗ (4/7) = 0.3809524 Para todas las métricas de similitud semántica en nuestra arquitectura, la taxonomía de características se mantiene en la ontología compartida. Para evaluar la similitud del vector de características, primero estimamos la similitud para cada característica individualmente y luego calculamos la suma promedio de estas similitudes. Entonces, el resultado es igual a la similitud semántica promedio de todo el vector de características. 6. SISTEMA DESARROLLADO Hemos implementado nuestra arquitectura en Java. Para facilitar las pruebas del sistema, el agente del consumidor tiene una interfaz de usuario que nos permite ingresar varias solicitudes. El agente productor está completamente automatizado y las operaciones de aprendizaje y oferta de servicios funcionan como se explicó anteriormente. En esta sección, explicamos los detalles de implementación del sistema desarrollado. Utilizamos OWL [11] como nuestro lenguaje de ontología y JENA como nuestro razonador de ontología. La ontología compartida es la versión modificada de la Ontología del Vino [19]. Incluye la descripción del vino como concepto y diferentes tipos de vino. Todos los participantes de la negociación utilizan esta ontología para entenderse mutuamente. Según la ontología, siete propiedades conforman el concepto de vino. El agente consumidor y el agente productor obtienen los valores posibles para estas propiedades consultando la ontología. Por lo tanto, todos los valores posibles para los componentes del concepto del vino, como el color, cuerpo, azúcar, etc., pueden ser alcanzados por ambos agentes. También se describen en esta ontología una variedad de tipos de vino como Borgoña, Chardonnay, Chenin Blanc, entre otros. Intuitivamente, cualquier tipo de vino descrito en la ontología también representa un concepto de vino. Esto nos permite considerar las instancias de vino Chardonnay como instancias de la clase Vino. Además de la descripción del vino, la información jerárquica de algunas características se puede inferir de la ontología. Por ejemplo, podemos representar la información de que el continente europeo abarca países occidentales. El país occidental abarca la región francesa, que incluye algunos territorios como el Loira, Burdeos, entre otros. Esta información jerárquica se utiliza en la estimación de similitud semántica. En esta parte, se pueden hacer algunos razonamientos como si un concepto X abarca Y y Y abarca Z, entonces el concepto X abarca Z. Por ejemplo, el Continente Europeo abarca Burdeos. 1306 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Para algunas características como cuerpo, sabor y azúcar, no hay información jerárquica, pero sus valores están nivelados semánticamente. Cuando eso sucede, proporcionamos los valores de similitud razonables para estas características. Por ejemplo, el cuerpo puede ser ligero, medio o fuerte. En este caso, asumimos que la luz es 0.66 similar a media pero solo 0.33 a fuerte. La ontología de WineStock es el inventario de los productores y describe una clase de producto como WineProduct. Esta clase es necesaria para que el productor registre los vinos que vende. La ontología implica a los individuos de esta clase. Los individuos representan los servicios disponibles que posee el productor. Hemos preparado dos ontologías de WineStock separadas para realizar pruebas. En la primera ontología, hay 19 productos de vino disponibles y en la segunda ontología, hay 50 productos. EVALUACIÓN DEL RENDIMIENTO Evaluamos el rendimiento de los sistemas propuestos en relación con la técnica de aprendizaje que utilizaron, DCEA e ID3, comparándolos con CEA, RO (para oferta aleatoria) y SCR (oferta basada solo en la solicitud actual). Aplicamos una variedad de escenarios en este conjunto de datos para ver las diferencias de rendimiento. Cada escenario de prueba contiene una lista de preferencias para el usuario y el número de coincidencias de la lista de productos. La Tabla 3 muestra estas preferencias y la disponibilidad de esos productos en el inventario para los primeros cinco escenarios. Ten en cuenta que estas preferencias son internas al consumidor y el productor intenta aprenderlas durante la negociación. Tabla 3: Disponibilidad de vinos en diferentes escenarios de prueba ID Preferencia del consumidor Disponibilidad (de 19) 1 Vino seco 15 2 Vino tinto y seco 8 3 Vino tinto, seco y moderado 4 4 Vino tinto y fuerte 2 5 Vino tinto o rosado, y fuerte 3 7.1 Comparación de Algoritmos de Aprendizaje En la comparación de algoritmos de aprendizaje, utilizamos los cinco escenarios de la Tabla 3. Aquí, primero usamos la medida de similitud de Tversky. Con estos casos de prueba, estamos interesados en encontrar el número de iteraciones que se requieren para que el productor genere una oferta aceptable para el consumidor. Dado que el rendimiento también depende de la solicitud inicial, repetimos nuestros experimentos con diferentes solicitudes iniciales. Por consiguiente, para cada caso, ejecutamos los algoritmos cinco veces con varias variaciones de las solicitudes iniciales. En cada experimento, contamos el número de iteraciones necesarias para llegar a un acuerdo. Tomamos el promedio de estos números para evaluar estos sistemas de manera justa. Como es costumbre, probamos cada algoritmo con las mismas solicitudes iniciales. La Tabla 4 compara los enfoques utilizando diferentes algoritmos de aprendizaje. Cuando las partes grandes del inventario son compatibles con las preferencias de los clientes, como en el primer caso de prueba, el rendimiento de todas las técnicas es casi el mismo (por ejemplo, Escenario 1). A medida que el número de servicios compatibles disminuye, RO funciona mal como se esperaba. El segundo peor método es SCR ya que solo considera la solicitud más reciente de los clientes y no aprende de las solicitudes anteriores. CEA da los mejores resultados cuando puede generar una respuesta pero no puede manejar los casos que contienen preferencias disyuntivas, como el que se presenta en el Escenario 5. ID3 y DCEA logran los mejores resultados. Su rendimiento es comparable y pueden manejar todos los casos, incluido el Escenario 5. Tabla 4: Comparación de algoritmos de aprendizaje en términos del número promedio de interacciones. Ejecutar DCEA SCR RO CEA ID3 Escenario 1: 1.2 1.4 1.2 1.2 1.2 Escenario 2: 1.4 1.4 2.6 1.4 1.4 Escenario 3: 1.4 1.8 4.4 1.4 1.4 Escenario 4: 2.2 2.8 9.6 1.8 2 Escenario 5: 2 2.6 7.6 1.75+ Sin oferta 1.8 Promedio de todos los casos: 1.64 2 5.08 1.51+Sin oferta 1.56 7.2 Comparación de Métricas de Similitud Para comparar las métricas de similitud que se explicaron en la Sección 5, fijamos el algoritmo de aprendizaje en DCEA. Además de los escenarios mostrados en la Tabla 3, agregamos los siguientes cinco nuevos escenarios considerando la información jerárquica. • El cliente desea comprar vino cuya bodega esté ubicada en California y cuya uva sea de tipo blanco. Además, la bodega del vino no debería ser costosa. Solo hay cuatro productos que cumplen con estas condiciones. • El cliente quiere comprar vino de color rojo o rosado y de tipo de uva tinta. Además, la ubicación del vino debe ser en Europa. Se desea que el grado de dulzura sea seco o semiseco. El sabor debe ser delicado o moderado, mientras que el cuerpo debe ser medio o ligero. Además, la bodega del vino debería ser una bodega cara. Hay dos productos que cumplen con todos estos requisitos. El cliente quiere comprar vino rosado moderado, que se encuentra alrededor de la región francesa. La categoría de bodega debería ser Bodega Moderada. Solo hay un producto que cumple con estos requisitos. • El cliente quiere comprar vino tinto caro, que se encuentra alrededor de la Región de California o vino blanco barato, que se encuentra alrededor de la Región de Texas. Hay cinco productos disponibles. • El cliente quiere comprar un vino blanco delicado cuyo productor esté en la categoría de Bodega Costosa. Hay dos productos disponibles. Los primeros siete escenarios se prueban con el primer conjunto de datos que contiene un total de 19 servicios y los últimos tres escenarios se prueban con el segundo conjunto de datos que contiene 50 servicios. La Tabla 5 muestra la evaluación del rendimiento en términos del número de interacciones necesarias para llegar a un consenso. La métrica de Tversky da los peores resultados ya que no considera la similitud semántica. El rendimiento de Lins es mejor que el de Tversky pero peor que el de otros. La métrica de Wu-Palmer y la medida de similitud de RP casi ofrecen el mismo rendimiento y son mejores que otras. Cuando se examinan los resultados, considerar la cercanía semántica aumenta el rendimiento. 8. DISCUSIÓN Revisamos la literatura reciente en comparación con nuestro trabajo. Tama et al. [16] proponen un nuevo enfoque basado en ontología para la negociación. Según su enfoque, los protocolos de negociación utilizados en el comercio electrónico pueden ser modelados como ontologías. Por lo tanto, los agentes pueden llevar a cabo un protocolo de negociación utilizando esta ontología compartida sin necesidad de estar codificados con los detalles del protocolo de negociación. Mientras tanto, la Sexta Conferencia Internacional. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1307 Tabla 5: Comparación de métricas de similitud en términos de número de interacciones. Ejecutar Tversky Lin Wu Palmer RP Escenario 1: 1.2 1.2 1 1 Escenario 2: 1.4 1.4 1.6 1.6 Escenario 3: 1.4 1.8 2 2 Escenario 4: 2.2 1 1.2 1.2 Escenario 5: 2 1.6 1.6 1.6 Escenario 6: 5 3.8 2.4 2.6 Escenario 7: 3.2 1.2 1 1 Escenario 8: 5.6 2 2 2.2 Escenario 9: 2.6 2.2 2.2 2.6 Escenario 10: 4.4 2 2 1.8 Promedio de todos los casos: 2.9 1.82 1.7 1.76 Tama et al. modelan el protocolo de negociación utilizando ontologías, en cambio, nosotros hemos modelado el servicio a ser negociado. Además, hemos construido un sistema con el cual se pueden aprender las preferencias de negociación. El estudio de Sadri et al. analiza la negociación en el contexto de la asignación de recursos [14]. Los agentes tienen recursos limitados y necesitan solicitar recursos faltantes a otros agentes. Se propone un mecanismo basado en secuencias de diálogo entre agentes como solución. El mecanismo se basa en el ciclo de agente de observar-pensar-actuar. Estos diálogos incluyen ofrecer recursos, intercambios de recursos y ofrecer recursos alternativos. Cada agente en el sistema planea sus acciones para alcanzar un estado objetivo. A diferencia de nuestro enfoque, el estudio de Sadri et al. no se preocupa por las preferencias de aprendizaje mutuas. Brzostowski y Kowalczyk proponen un enfoque para seleccionar un socio de negociación adecuado investigando negociaciones previas de múltiples atributos [1]. Para lograr esto, utilizan el razonamiento basado en casos. Su enfoque es probabilístico ya que el comportamiento de los socios puede cambiar en cada iteración. En nuestro enfoque, estamos interesados en negociar el contenido del servicio. Después de que el consumidor y el productor acuerden el servicio, se pueden utilizar mecanismos de negociación orientados al precio para acordar el precio. Fatima et al. estudian los factores que afectan la negociación, como las preferencias, el plazo, el precio, entre otros, ya que el agente que desarrolla una estrategia contra su oponente debe considerar todos ellos [5]. En su enfoque, el objetivo del agente vendedor es vender el servicio al precio más alto posible, mientras que el objetivo del agente comprador es comprar el bien al precio más bajo posible. El intervalo de tiempo afecta a estos agentes de manera diferente. En comparación con Fatima et al., nuestro enfoque es diferente. Mientras ellos estudian el efecto del tiempo en la negociación, nuestro enfoque está en aprender las preferencias para una negociación exitosa. Faratin et al. proponen un mecanismo de negociación multi-tema, donde las variables de servicio para la negociación, como el precio, la calidad del servicio, entre otros, se consideran intercambios entre sí (es decir, un precio más alto por una entrega más temprana) [4]. Generan un modelo heurístico para compensaciones que incluye la estimación de similitud difusa y una exploración de escalada de colina para ofertas posiblemente aceptables. Aunque abordamos un problema similar, aprendemos las preferencias del cliente con la ayuda del aprendizaje inductivo y generamos contraofertas de acuerdo con estas preferencias aprendidas. Faratin et al. solo utilizan la última oferta realizada por el consumidor al calcular la similitud para elegir la contraoferta. A diferencia de ellos, también tenemos en cuenta las solicitudes previas del consumidor. En sus experimentos, Faratin et al. asumen que los pesos de las variables de servicio están fijos a priori. Por el contrario, aprendemos estas preferencias con el tiempo. En nuestro trabajo futuro, planeamos integrar el razonamiento ontológico en el algoritmo de aprendizaje para que la información jerárquica pueda ser aprendida a partir de la jerarquía de subsumpción de relaciones. Además, al utilizar las relaciones entre las características, el productor puede descubrir nuevos conocimientos a partir de los conocimientos existentes. Estas son direcciones interesantes que seguiremos en nuestro trabajo futuro. 9. REFERENCIAS [1] J. Brzostowski y R. Kowalczyk. En el razonamiento basado en casos posibilístico para la selección de socios para la negociación de agentes de múltiples atributos. En Actas del 4to Congreso Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS), páginas 273-278, 2005. [2] L. Busch e I. Horstman. Un comentario sobre negociaciones tema por tema. Juegos y Comportamiento Económico, 19:144-148, 1997. [3] J. K. Debenham. Gestión de la negociación en el mercado electrónico en el contexto de un sistema multiagente. En Actas de la 21ª Conferencia Internacional sobre Sistemas Basados en el Conocimiento e Inteligencia Artificial Aplicada, ES2002:, 2002. [4] P. Faratin, C. Sierra y N. R. Jennings. Utilizando criterios de similitud para hacer compensaciones de problemas en negociaciones automatizadas. Inteligencia Artificial, 142:205-237, 2002. [5] S. Fatima, M. Wooldridge y N. Jennings. Agentes óptimos para negociaciones de múltiples temas. En Actas del 2do Congreso Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS), páginas 129-136, 2003. [6] C. Giraud-Carrier. Una nota sobre la utilidad del aprendizaje incremental. Comunicaciones de IA, 13(4):215-223, 2000. [7] T.-P. Hong y S.-S. Tseng. Dividiendo y fusionando espacios de versiones para aprender conceptos disyuntivos. IEEE Transactions on Knowledge and Data Engineering, 11(5):813-815, 1999. [8] D. Lin.

Traducción al español:
IEEE Transactions on Knowledge and Data Engineering, 11(5):813-815, 1999. [8] D. Lin. Una definición de similitud basada en teoría de la información. En Actas de la 15ª Conferencia Internacional sobre Aprendizaje Automático, páginas 296-304. Morgan Kaufmann, San Francisco, CA, 1998. [9] P. Maes, R. H. Guttman, y A. G. Moukas. Agentes que compran y venden. Comunicaciones de la ACM, 42(3):81-91, 1999. [10] T. M. Mitchell. Aprendizaje automático. McGraw Hill, NY, 1997. [11] Búho. OWL: Guía del lenguaje de ontologías web, 2003. http://www.w3.org/TR/2003/CR-owl-guide-20030818/. [12] S. K. Pal y S. C. K. Shiu. Fundamentos del Razonamiento Basado en Casos Blandos. John Wiley & Sons, Nueva Jersey, 2004. [13] J. R. Quinlan. Inducción de árboles de decisión. Aprendizaje automático, 1(1):81-106, 1986. [14] F. Sadri, F. Toni y P. Torroni. Diálogos para negociación: Variedades de agentes y secuencias de diálogo. En ATAL 2001, Artículos Revisados, volumen 2333 de LNAI, páginas 405-421. Springer-Verlag, 2002. [15] M. P. Singh. 

Springer-Verlag, 2002. [15] M. P. Singh. Comercio electrónico orientado al valor. IEEE Internet Computing, 3(3):6-7, 1999. [16] V. Tamma, S. Phelps, I. Dickinson, y M. Wooldridge. Ontologías para apoyar la negociación en el comercio electrónico. Aplicaciones de la Inteligencia Artificial en Ingeniería, 18:223-236, 2005. [17] A. Tversky. Características de similitud. Revisión Psicológica, 84(4):327-352, 1977. [18] P. E. Utgoff. Inducción incremental de árboles de decisión. Aprendizaje automático, 4:161-186, 1989. [19] Vino, 2003. http://www.w3.org/TR/2003/CR-owl-guide20030818/wine.rdf. [20] Z. Wu y M. Palmer. Semántica de verbos y selección léxica. En el 32. Reunión anual de la Asociación de Lingüística Computacional, páginas 133-138, 1994. 1308 La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07)