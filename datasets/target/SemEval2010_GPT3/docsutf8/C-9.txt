EDAS: Proporcionando un Entorno para Servicios Adaptativos Descentralizados Rüdiger Kapitza Dept. de la computadora. A medida que la idea de virtualización de la potencia de cálculo, almacenamiento y ancho de banda se vuelve cada vez más importante, la computación en malla evoluciona y se aplica a un número creciente de aplicaciones. El entorno para servicios adaptativos descentralizados (EDAS) proporciona una infraestructura tipo red para servicios a largo plazo accesibles por el usuario (por ejemplo, servidor web, repositorio de código fuente, etc.). Su objetivo es apoyar la ejecución autónoma y evolución de servicios en términos de escalabilidad y distribución consciente de los recursos. EDAS ofrece modelos de servicio flexibles basados en objetos móviles distribuidos que van desde un escenario cliente-servidor tradicional hasta un enfoque completamente peer-to-peer. La gestión automática y dinámica de recursos permite el uso optimizado de los recursos disponibles al tiempo que se minimiza la complejidad administrativa. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Comunicación de Computadoras]: Sistemas Distribuidos-Aplicaciones Distribuidas; D.2.12b [Software]: Ingeniería de Software Interoperabilidad[Objetos Distribuidos] Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Las infraestructuras para la computación en malla tienen como objetivo virtualizar un grupo de computadoras, servidores y almacenamiento como un único sistema informático grande. La gestión de recursos es un tema clave en tales sistemas, necesaria para una distribución eficiente y automatizada de tareas en la red. Tales infraestructuras de red suelen implementarse a nivel empresarial, pero proyectos como SETI@home han demostrado la viabilidad de redes más descentralizadas también. Las infraestructuras actuales de computación en red no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, de larga duración y accesibles por el usuario, ya que están diseñadas para resolver tareas intensivas en cálculos o datos con un conjunto más o menos fijo de parámetros. El enfoque común de tres fases de descubrimiento de recursos, selección de sistema y ejecución de tareas falla para servicios que cambian su demanda de recursos con el tiempo debido al acceso interactivo de los usuarios y se ejecutan durante un largo período de tiempo. En lugar de establecer una infraestructura para servicios a largo plazo, se deben ubicar los servicios en función de su demanda actual y sus requerimientos estimados futuros. Si la distribución resulta ser incorrecta (por ejemplo, un nodo se sobrecarga), el servicio debe ser migrado dentro de la red (por ejemplo, a un nodo más potente y menos cargado). La migración, sin embargo, es costosa ya que todo el estado de un servicio debe ser transferido. Además, un servicio no replicado no es accesible durante la migración. Por lo tanto, la gestión de recursos debe evitar la migración si es posible. Además, se debe proporcionar un concepto de servicio que evite la sobrecarga en primer lugar y, en segundo lugar, evite la indisponibilidad del servicio si la migración no se puede evitar. EDAS [2] tiene como objetivo proporcionar una infraestructura tipo rejilla para servicios de largo plazo accesibles por el usuario que permita la adaptación dinámica en tiempo de ejecución, proporcione una infraestructura de gestión y ofrezca soporte a nivel de sistema para escalabilidad y tolerancia a fallos. Los nodos pueden unirse y abandonar dinámicamente la infraestructura, y todas las tareas de gestión, especialmente la gestión de recursos, son descentralizadas. El entorno se construye sobre nuestra infraestructura middleware AspectIX [3], que soporta directamente la reconfiguración dinámica de servicios basada en la calidad de servicio (QoS). La gestión de recursos se centra en la ejecución de servicios que tienen un tiempo de funcionamiento largo, potencialmente infinito. Estos servicios están organizados en proyectos. Cada proyecto tiene un alcance de ejecución distribuido llamado entorno de servicio. Un ambiente así posiblemente abarca múltiples instituciones. Cada institución representa un dominio administrativo que puede respaldar un proyecto con un conjunto fijo de recursos. Nuestro enfoque respalda la gestión adaptativa de recursos de todos los proyectos en el alcance de una institución basada en un algoritmo inspirado en los algoritmos difusivos para el equilibrio de carga descentralizado [4]. No se sabe cómo subdividir óptimamente estos recursos para los servicios, ya que la demanda de recursos de los servicios puede cambiar con el tiempo o incluso fluctuar con frecuencia. Para proporcionar recursos según sea necesario, nuestro enfoque redirige automáticamente de manera equitativa los recursos libres o no necesarios entre las instancias de servicio en todos los proyectos y nodos. El proceso completo del artículo 5 de rededicación es escalable ya que es descentralizado y respeta ciertos límites como los recursos físicamente disponibles de un nodo y la cantidad de recursos dedicados a un proyecto. En los casos en los que no sea posible la rededicación, se inicia la migración del servicio exigente. EDAS apoya además modelos de servicio flexibles, incluyendo una estructura cliente/servidor completamente centralizada, sistemas basados completamente en pares, y varias configuraciones intermedias que permiten un uso controlado de los recursos de los pares basado en el modelo de objetos fragmentados [5]. El objetivo general es proporcionar una arquitectura de servicio genérica que permita implementar la funcionalidad del servicio una vez, y luego, idealmente, ejecutar este servicio con diferentes modelos de servicio y adaptarlo en tiempo de ejecución, escalando así desde una instancia local de un solo usuario hasta un servicio escalable que abarque múltiples dominios. Para reducir el esfuerzo de implementación de dichos servicios, se ha desarrollado un marco que respalda la evolución en tiempo de ejecución desde un escenario tradicional de cliente/servidor a un servidor replicado activo con clientes interactuando en una arquitectura híbrida de pares a pares como la conocida en Napster. En una infraestructura de red de servicio a largo plazo, la replicación activa tiene varios beneficios: las réplicas pueden unirse y abandonar el grupo de objetos y, por lo tanto, las réplicas pueden ser migradas sin que el servicio esté no disponible. La carga de solicitudes no modificadoras se puede distribuir de manera uniforme entre las réplicas, lo que hace que las situaciones de sobrecarga sean menos probables. Finalmente se puede tolerar cierta cantidad de caídas de nodos. La siguiente sección describe las características utilizadas de AspectIX seguida de una breve descripción de los componentes principales y conceptos de EDAS. La sección 4 explica los conceptos de autoadministración y rededicación en la gestión de recursos adaptativos distribuidos. La sección 5 describe el marco para servicios adaptativos descentralizados. La sección 6 describe el trabajo relacionado y finalmente la Sección 7 concluye el artículo. MIDDLEWARE BÁSICO El entorno de EDAS se basa en el middleware AspectIX. En su núcleo, proporciona un ORB compatible con CORBA y, como tal, soporta sistemas distribuidos heterogéneos. Además, AspectIX soporta el modelo de objetos fragmentado [5] que se utiliza para implementar y proporcionar servicios adaptativos descentralizados. En el modelo de objeto fragmentado, la distinción entre los stubs del cliente y el objeto del servidor ya no está presente (Fig. 1). Desde un punto de vista abstracto, un objeto fragmentado es una unidad con identidad, interfaz, comportamiento y estado únicos, al igual que en el diseño orientado a objetos clásico. La implementación de estas propiedades, sin embargo, no está limitada a una ubicación específica, sino que puede distribuirse arbitrariamente en varios fragmentos. Cualquier cliente que desee acceder al objeto fragmentado necesita un fragmento local, que proporciona una interfaz idéntica a la de un stub tradicional. Sin embargo, la distribución interna y la interacción no solo son transparentes en la interfaz externa del objeto distribuido, sino que incluso pueden cambiar dinámicamente en tiempo de ejecución. Esto permite que el modelo de objeto fragmentado se adapte a las condiciones cambiantes del entorno o a los requisitos de calidad del servicio. Ofrece cambiar el modelo de servicio a pedido, desde el tradicional cliente-servidor a un enfoque basado en pares, y todo tipo de etapas intermedias mediante la migración e intercambio de fragmentos. Componentes principales de EDAS Figura 1: Objeto fragmentado en tres nodos EDAS tiene tres componentes principales: Cada nodo que apoya activamente los servicios adaptativos descentralizados proporciona un entorno local. El entorno del hogar básicamente gestiona los recursos de uno o más nodos pertenecientes al mismo dominio administrativo o institución. El entorno de servicio se extiende sobre un conjunto de dominios que respaldan un proyecto específico y depende de servicios básicos de los entornos domésticos correspondientes. El entorno de servicio apoya la ejecución de servicios pertenecientes al mismo proyecto. Finalmente, el servicio adaptativo descentralizado se distribuye dinámicamente dentro del alcance de un entorno de servicio asociado. El entorno del hogar tiene el papel de mediador entre los nodos de una institución y uno o más entornos de servicio, cada uno ejecutando un conjunto de servicios. La Fig. 2 muestra tres dominios, cada uno ejecutando un entorno doméstico que abarca todos los nodos de los respectivos dominios. Cada nodo proporciona un conjunto de recursos. Cada dominio tiene un administrador que puede utilizar ese entorno doméstico para asignar recursos a los entornos de servicio y revocarlos. Además de proporcionar la carga del sistema y todo tipo de información sobre el uso de recursos al entorno de servicio, el entorno doméstico también notifica sobre todos los eventos importantes del sistema, como un apagado o fallo de un nodo. Un entorno de servicio representa un alcance de distribución para uno o más servicios. Por lo general, un entorno de servicio es propiedad de una organización o comunidad y está dedicado a un proyecto. Un gerente de servicios puede iniciar, detener y configurar servicios a través de la interfaz del entorno de servicios y decide qué recursos proporcionados por los entornos domésticos son aceptados. En la mayoría de los casos, un entorno de servicio se extiende sobre más de un dominio administrativo, como se muestra en la Figura 2. Una de las principales tareas del entorno de servicio es apoyar la migración de servicios o componentes de servicio, especialmente entre diferentes entornos de origen. El entorno de servicio toma en cuenta los recursos disponibles, los requisitos de los servicios y las políticas proporcionadas por el gerente de servicio. La migración de componentes de servicio puede ser necesaria por diversas razones, como el apagado de nodos, limitaciones de recursos y el crecimiento o reducción del entorno de servicio. 4. La gestión de recursos descentralizada. La gestión de recursos para servicios a largo plazo tiene otros requisitos que la gestión de recursos en entornos comunes de computación en red. Por ejemplo, incluso en el contexto de los sistemas de red tradicionales, es muy difícil determinar o siquiera estimar los requisitos de recursos de una tarea [6]. Para servicios a largo plazo esto es aún más difícil, y es probable que la demanda de recursos cambie con frecuencia. Esto convierte el Artículo 5 Anfitrión F Anfitrión D Anfitrión E Anfitrión A Anfitrión C Servicio Entorno Servicio B Servicio A Entorno Hogar. Entorno del hogar Límite del objeto fragmentado Gerente de servicio Gerente de dominio Gerente de dominio Figura 2: Escenario de EDAS la distribución óptima de servicios sobre un conjunto de nodos en un problema difícil. En general, la migración de servicios es un requisito previo de EDAS, ya que ofrece una solución si la decisión de distribución inicial fue incorrecta (por ejemplo, inicio inicial de un servicio previamente desconocido) o si la demanda de servicios ha cambiado sustancialmente. Pero la migración es costosa, ya que se debe transferir todo el estado de un servicio, posiblemente incluyendo el código del programa. Si el servicio no se replica, estará no disponible durante la migración. Teniendo esto en cuenta, un sistema de gestión de recursos debería ubicar servicios y redistribuir recursos de manera adaptativa entre servicios y nodos según sea necesario para evitar migraciones. Dado que EDAS tiene como objetivo proporcionar una infraestructura tipo rejilla para un gran conjunto de nodos que pueden unirse y abandonar el sistema, todas las tareas de gestión de recursos deben descentralizarse para ser escalables y no deben requerir conocimiento global. La gestión de recursos se puede estructurar en las siguientes tareas diferentes: • Agregar y cambiar los recursos asignados de un entorno de servicio • Colocación automática de servicios al inicio y durante la migración debido a sobrecarga • Mantener todo tipo de límites de recursos, especialmente los límites de entornos de servicio • Compensar la salida y los nodos que se han bloqueado En las siguientes secciones describiremos qué tipo de límites de recursos existen y cómo gestionar los recursos basándonos en estas condiciones básicas. 4.1 Límites de Recursos Nuestro enfoque gestiona los recursos en dos etapas, a nivel de nodo y a nivel de entorno de servicio. A nivel de nodo monitoreamos el uso de todo tipo de recursos físicos como espacio en disco, memoria, CPU y ancho de banda de red, pero también recursos lógicos como archivos abiertos, sockets y hilos. La entidad de monitoreo es un servicio o un componente de servicio en caso de un servicio adaptativo descentralizado. Cada servicio tiene límites locales llamados así que restringen el uso de recursos en el contexto del nodo actual. Si un servicio corre el riesgo de exceder dicho límite local, el entorno doméstico intenta ampliar los límites o notifica al entorno de servicio responsable si la reasignación no es posible. Alcanzar un límite local puede ser causado por dos razones: un nodo sobrecargado o un entorno de servicio sobrecargado. En el primer caso, la migración del servicio podría ser útil, en el segundo caso, la migración a otro dominio administrativo podría ser una opción, o simplemente reducir la demanda de recursos deteniendo el servicio. Por supuesto, podría haber más de un servicio del mismo entorno de servicio en un nodo. Por lo tanto, los recursos asignados de un entorno de servicio en un nodo pueden ser fácilmente calculados sumando todos los límites locales de sus servicios. Además, cada nodo tiene límites que restringen el uso general de ciertos recursos. Un límite de nodo nunca debe exceder los recursos físicos (por ejemplo, espacio en disco) de un nodo y podría ser mucho más pequeño, por ejemplo, para soportar usuarios locales. La suma de todos los límites locales en un nodo nunca debe exceder el límite del nodo de un recurso. Por lo tanto, observar y controlar los límites locales mantendrá los límites del nodo y evitará la sobrecarga. En el nivel institucional, el uso de recursos de un entorno de servicio y sus servicios asociados también está restringido por los llamados límites globales. Estos límites determinan el uso máximo de recursos de un proyecto en el ámbito de un entorno doméstico. La suma de todos los límites locales en todos los nodos de la institución para un proyecto determinado nunca excede su límite global. GlobaleLimitSE ≥ numberOfLocalLimitsSEX i=1 LocalLimiti 4.2 Reasignación de Recursos Adaptativa Comenzamos con una implementación directa para describir el flujo de trabajo principal. Luego proponemos un enfoque para una solución más eficiente y discutimos sus problemas. Si un nuevo proyecto debe ser respaldado por un entorno doméstico, primero es necesario identificar los nodos que ofrecen recursos suficientes no asignados para iniciar un servicio. Esto se puede lograr en una implementación ingenua utilizando un enfoque de inundación como se hace en el protocolo Gnutella, asumiendo que los nodos están conectados en un grafo aleatorio. Estos recursos pueden ser asignados al entorno de servicio del nuevo proyecto, el cual posteriormente puede comenzar a ofrecer servicios en estos nodos. Por supuesto, un entorno hogareño suele apoyar numerosos proyectos. Cada uno de estos proyectos tiene asignaciones de recursos en varios nodos, algunos de ellos ocupados por servicios, otros libres y sin usar. A medida que la demanda de recursos de un servicio cambia, podría ser posible que un servicio alcance su límite local si está bajo una alta demanda. Lo que sucede a continuación depende del uso general de recursos del entorno de servicio y del consumo de recursos en el nodo local. Si el entorno de servicio no ha alcanzado su límite global y el nodo no está sobrecargado, el límite local dependiente del servicio debería extenderse simplemente reduciendo un límite local en otro nodo del mismo entorno de servicio. Cuando todos los recursos del nodo se asignan a otros entornos de servicio, existen dos posibilidades. Todos los recursos son utilizados por los servicios, por lo que debemos migrar un servicio, o los recursos están asignados pero no utilizados. En el último caso reasignaremos recursos y los destinaremos al exigente entorno de servicio. Finalmente, es posible que el entorno de servicio haya alcanzado su límite global. En este caso, el consumo de recursos debe reducirse ya sea migrando el servicio a otro dominio y su entorno de origen dependiente o simplemente limitando el uso de recursos y, si esto no es posible, deteniendo el servicio. A diferencia de la configuración de un nuevo entorno de servicio que no es crítico en cuanto al tiempo y es una tarea menos frecuente, la adaptación de los límites locales ocurre con frecuencia y debe realizarse en el Artículo 5 casi de inmediato. Por lo tanto, no es una opción utilizar búsquedas de difusión para la reafirmación. En cambio, se necesita un enfoque más eficiente con una complejidad limitada. Lo mismo se aplica para detectar si se alcanza un límite global en un entorno de servicio. Actualmente investigamos si esto se puede lograr utilizando un algoritmo difusivo[4] como se utiliza para el equilibrio de carga descentralizado. De esta manera, todos los nodos de un sistema se dividen en grupos que se superponen parcialmente. La unión de todos los grupos logra una cobertura completa. Los miembros del grupo intercambian frecuentemente información de carga y equilibran la carga mediante migración. En nuestro caso, nuestro objetivo no es equilibrar la carga, sino la cantidad de recursos libres disponibles en un entorno de servicio. Cada nodo que respalda un determinado entorno de servicio está conectado al menos a otro nodo que respalda el mismo proyecto. De esta manera siempre se debería saber si un entorno de servicio todavía tiene suficientes recursos y, por lo tanto, si un servicio puede crecer. Todavía quedan cuestiones abiertas, como si los recursos libres equilibrados difusivamente deben estar estrechamente conectados a los recursos reales, comparables a las reservas. En este caso podría haber problemas si un nodo admite varios entornos de servicio que tienen servicios en ejecución en el nodo y se excede un límite de nodo que requeriría la migración del servicio. De hecho, puede ser innecesario ya que los servicios podrían no utilizar todos los recursos asignados, pero el algoritmo difusivo causó la sobrecarga del límite al equilibrar de manera equitativa los recursos libres de todos los entornos de servicio admitidos. Si eliminamos el mapeo entre los recursos gratuitos y los recursos reales de un nodo, podemos evitar estas situaciones. Sin embargo, se vuelve más complicado determinar los recursos libres y no asignados de un entorno doméstico. 4.3 Colocación de Servicios Independientemente del mapeo de recursos libres, la colocación de un servicio es, como ya se ha mencionado, un problema difícil. Distribuir los servicios de manera equitativa en todos los nodos seguramente evitaría la migración en el caso promedio incluso si la demanda de recursos de los servicios cambia. Sin embargo, si la demanda de recursos de los servicios varía considerablemente y la red está congestionada por muchos proyectos, podría suceder que un servicio no pueda ser ubicado porque los recursos disponibles están muy dispersos. Un enfoque diferente sería considerarlo como una variante del problema de empaquetamiento de contenedores que tiene como objetivo empacar elementos en contenedores optimizando el número de contenedores utilizados. En nuestro caso, necesitamos un enfoque en línea ya que los elementos no son conocidos de antemano y tenemos un problema multidimensional debido a que un servicio tiene varios requisitos de recursos. El número de contenedores está limitado ya que tenemos un número finito de nodos en nuestra cuadrícula. Un algoritmo para este problema ha sido propuesto recientemente por Epstein y van Stee en [7]. En el lado negativo, este algoritmo necesita conocer todos los nodos y su uso actual. Dado que la ubicación de un servicio no es un problema crítico en términos de tiempo, nuevamente un enfoque basado en inundaciones podría ofrecer una solución. Para reducir el número de respuestas, solo los nodos que proporcionen recursos suficientes deben responder. También se debe considerar transformar el algoritmo en uno distribuido. Otro problema podría ser que el algoritmo optimiza la ocupación de manera demasiado intensa. Por lo tanto, los cambios en la demanda de servicio pueden provocar nodos sobrecargados y causar migraciones. Creemos que esto se puede prevenir no solo considerando el consumo real de recursos para determinar la demanda de recursos de un servicio, sino teniendo en cuenta la demanda previa. 5. En EDAS, un modelo de servicio descentralizado y adaptable normalmente se corresponde con un servicio tradicional al que acceden los usuarios, como un servidor web, un servidor de mensajería instantánea o un repositorio de código fuente. Un servicio así está representado por un objeto fragmentado. Este objeto se expande o contrae en el alcance abarcado por el entorno de servicio asociado dependiendo de las demandas del servicio y por razones de tolerancia a fallos. Por lo general, cada parte del objeto es móvil y puede ser trasladada si es necesario. Cada servicio tiene al menos dos interfaces: una para tareas de gestión y otro servicio específico para el usuario final. La interfaz de gestión ofrece métodos para iniciar, detener y configurar instancias de servicio. Dado que este conjunto de características requiere un enorme esfuerzo de implementación para hacerlo de nuevo para cada implementación de servicio que apoyamos, respaldamos el desarrollo de servicios adaptativos descentralizados a través de un marco y una versión extendida de IDL en combinación con un compilador especial de IDL [8]. La idea principal es desarrollar un servicio de la manera tradicional cliente/servidor, tal como se hace en CORBA básico. Este servicio puede ser iniciado y ejecutado en la red como un servidor común. Además, debería ser posible migrar el servicio. Esto se puede lograr utilizando un enfoque basado en tipos de valor para describir el estado del servicio como se hace en [9] o utilizando los mecanismos de serialización suministrados por el lenguaje. Como nos gustaría tolerar fallos de nodos y el servicio debería estar disponible durante la migración, apoyamos la replicación activa del servicio. Esto se logra generando stubs especiales del lado del cliente que se comunican con una de las réplicas. Para mantener la conexión entre los clientes y el objeto replicado, utilizamos referencias limitadas en el tiempo [10] que restringen la migración pero hacen que el uso de servicios de ubicación (para hacer frente a referencias obsoletas) sea innecesario. Las réplicas están sincronizadas a través de un marco de comunicación de grupo. La extensión IDL consiste en modificadores adicionales que afectan la generación de código para el lado del cliente y del servidor. Estos se retienen para marcar operaciones no modificativas que permiten respuestas más rápidas y equilibrio de carga de esas solicitudes. Además, se puede marcar los métodos como locales, lo que indica que pueden ser procesados localmente. En este caso, el compilador IDL crea un marcador de posición para la ejecución local. Además de los métodos habituales estáticos, es útil implementar la contribución e interacción del lado del cliente. Por ejemplo, si un cliente falso ofrece un método que resulta en una transferencia de archivos, es posible integrar un protocolo personalizado que reenvíe una solicitud modificada al objeto replicado, el cual no devuelve el archivo como en el caso común, sino URLs que apuntan a clientes que solicitaron previamente el archivo. Ahora el cliente ficticio obtiene los datos de la ubicación ofrecida y responde como si hubieran sido suministrados por el objeto del servidor. Este comportamiento basado en pares, como se conoce en Napster, es transparente para el cliente y puede activarse y desactivarse según las condiciones del entorno, como la carga y la comunidad, según sea necesario. Finalmente proporcionamos otro modificador para marcar operaciones administrativas. Si un método está marcado como administrador, se requiere autenticación. El método de autenticación es adaptable y puede ser mediante una frase de paso, una dirección de internet o cualquier otro esquema de autenticación. Este modificador facilita la creación de métodos de gestión de servicios. Artículo 5 6. Las infraestructuras de cuadrícula como el Globus-Toolkit [11] proporcionan servicios y mecanismos para entornos heterogéneos distribuidos que combinan recursos bajo demanda para resolver tareas que consumen recursos y computacionalmente intensivas. Debido a esta orientación, se centran en diferentes modelos de servicio, no proporcionan soporte para la movilidad de objetos, ni siquiera si apoyan un enfoque de objetos distribuidos en absoluto. Pero lo más importante es que siguen un enfoque diferente de gestión de recursos, ya que se centran en la ejecución paralela de una gran cantidad de tareas cortas y a medio plazo. JavaSymphony [12] y Ibis [13] proporcionan movilidad de objetos pero están limitados al lenguaje de programación Java y se centran en la computación de alto rendimiento orientada a objetos. Los objetos replicados activamente son proporcionados por Jgroup [14] basados en RMI. Encima de este middleware básico se ha implementado una capa de gestión de replicación llamada ARM [15]. JGroup se enfoca en la replicación activa de objetos pero carece de soporte para servicios más flexibles como lo hace EDAS. ARM se puede comparar con EDAS pero no admite la distribución consciente de recursos. Fog [16] y Globe [17] son entornos middleware básicos que admiten el enfoque de objetos fragmentados. Globe considera la replicación y el almacenamiento en caché. Ambos sistemas carecen de soporte para la distribución consciente de los recursos. 7. CONCLUSIÓN Y TRABAJO EN CURSO Basándose en el modelo de objeto fragmentado y la arquitectura del entorno de EDAS, los servicios adaptativos descentralizados pueden ser fácilmente diseñados, implementados y ejecutados. Como se describe, la gestión de recursos se puede descomponer en dos problemas principales que deben resolverse. Controlar y gestionar los límites de recursos, incluido garantizar que los recursos asignados estén disponibles (incluso en el contexto de fallas de nodos) y la colocación autónoma de servicios. Para ambos problemas ofrecemos una solución, un entorno de simulación actualmente implementado verificará su viabilidad. En un próximo paso, la gestión de recursos se integrará en un prototipo de la arquitectura EDAS que ya ha sido implementado. Como se describe, ya tenemos una implementación inicial del marco de trabajo para los servicios adaptativos descentralizados. Este marco debe ser ampliado para interactuar de manera fluida con la gestión de recursos y la arquitectura de EDAS. En un paso final, necesitamos implementar algunos servicios que verifiquen la usabilidad de todo el proyecto EDAS. 8. REFERENCIAS [1] D. Werthimer, S. Bowyer, J. Cobb, D. Gedye, D. Anderson, W. T. Sullivan, III. Un nuevo proyecto SETI importante basado en los datos del proyecto Serendip y 100,000 computadoras personales. En Actas del Quinto Congreso Internacional. Conferencia sobre Bioastronomía, 1997. [2] Hans Reiser, Rüdiger Kapitza, Franz J. Hauck. Servicios Descentralizados y Adaptativos: El Enfoque AspectIX para un Entorno de Red Flexible y Seguro. En Grid Services Engineering and Management (GSEM 2004), Erfurt, Alemania, 2004. Springer. [3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza, y Andreas I. Schmied. Integrando objetos fragmentados en un entorno CORBA. En Proc. de los Net.ObjectDays, 2003. [4] Tiberiu Rotaru y Hans-Heinrich N¨ageli. Equilibrado dinámico de carga mediante difusión en sistemas heterogéneos. I'm sorry, but the sentence "J." does not provide enough context for an accurate translation. Could you please provide more information or a complete sentence for me to translate? Distribución Paralela. Comput., 64(4):481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P. Narzul, y M. Shapiro. Objetos fragmentados para abstracciones distribuidas. [6] Jennifer M. Schopf. Diez acciones cuando se programa en una cuadrícula: el usuario como programador de cuadrícula. páginas 15-23, 2004. [7] Leah Epstein y Rob van Stee. Empaquetado multidimensional en línea óptimo con espacio limitado. En SODA 04: Actas del decimoquinto simposio anual de algoritmos discretos de ACM-SIAM, páginas 214-223, Filadelfia, PA, EE. UU., 2004. Sociedad de Matemáticas Industriales y Aplicadas. [8] Hans P. Reiser, Martin Steckermeier y Franz J. Hauck. IDLflex: un compilador flexible y genérico para IDL de CORBA. En Proc. de los Net.ObjectDays (Erfurt, Alemania, 10-13 de septiembre de 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt y Franz J. Hauck. Migración de objetos independiente de la plataforma en CORBA. En Actas de las Conferencias OTM05 (DOA, Agia Napa, Chipre, 31 de octubre - 04 de noviembre de 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser y Franz J. Hauck. Referencias estables y limitadas en el tiempo en el contexto de entornos que cambian dinámicamente. En MDC05: Actas de la 25ª Conferencia Internacional de IEEE. Conferencia sobre Sistemas de Computación Distribuida - Talleres (Talleres ICDCS 2005), 2005. [11] Ian Foster, Carl Kesselman y Steven Tuecke. La anatomía de la red: Permitiendo organizaciones virtuales escalables. Notas de conferencia en Ciencias de la Computación, 2150, 2001. [12] Thomas Fahringer y Alexandru Jugravu. Javasymphony: nuevas directivas para controlar y sincronizar la localidad, el paralelismo y el equilibrio de carga para la computación en clúster y en grid. En JGI 02: Actas de la conferencia conjunta ACM-ISCOPE de 2002 sobre Java Grande, páginas 8-17, Nueva York, NY, EE. UU., 2002. ACM Press. [13] Rob V. van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann y Henri E. Bal. Ibis: un entorno de programación en malla eficiente basado en Java. En JGI 02: Actas de la conferencia conjunta ACM-ISCOPE de 2002 sobre Java Grande, páginas 18-27, Nueva York, NY, EE. UU., 2002. ACM Press. [14] Alberto Montresor, Renzo Davoli y Ozalp Babaoglu. Middleware para servicios de red confiables en sistemas distribuidos particionables. SIGOPS Oper. would be translated to "Operaciones de SIGOPS" in Spanish. This is not a complete sentence. Please provide more context or the full sentence you would like me to translate. Rev., 35(1):73-96, 2001. [15] H. Meling y B. Helvik. Arm: Gestión autónoma de replicación en jgroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul y Marc Shapiro. Objetos fragmentados para abstracciones distribuidas. En Lecturas en Sistemas de Computación Distribuida. [17] Philip Homburg, Leendert van Doorn, Maarten van Steen, Andrew S. Tanenbaum y Wiebren de Jonge. Un modelo de objetos para sistemas distribuidos flexibles. En Actas de la 1ra Conferencia Anual de ASCI, páginas 69-78, 1995. Artículo 5