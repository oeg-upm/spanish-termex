Un algoritmo de búsqueda distribuida basado en aprendizaje por refuerzo para sistemas jerárquicos de recuperación de información entre pares. En estos enfoques, los agentes dependen de la similitud de contenido entre las consultas entrantes y sus agentes vecinos directos para dirigir las sesiones de búsqueda distribuida. Sin embargo, tal heurística es miope en el sentido de que los agentes vecinos pueden no estar conectados con agentes más relevantes. En este documento, se desarrolla un enfoque basado en aprendizaje por refuerzo en línea para aprovechar las características dinámicas en tiempo de ejecución de los sistemas de recuperación de información P2P, representadas por información sobre sesiones de búsqueda pasadas. Específicamente, los agentes mantienen estimaciones sobre las habilidades de los agentes aguas abajo para proporcionar documentos relevantes para las consultas entrantes. Estas estimaciones se actualizan gradualmente al aprender de la información de retroalimentación devuelta de sesiones de búsqueda anteriores. Basándose en esta información, los agentes derivan políticas de enrutamiento correspondientes. Posteriormente, estos agentes dirigen las consultas basándose en las políticas aprendidas y actualizan las estimaciones según las nuevas políticas de enrutamiento. Los resultados experimentales demuestran que el algoritmo de aprendizaje mejora considerablemente el rendimiento del enrutamiento en dos conjuntos de colecciones de pruebas que han sido utilizados en una variedad de estudios de recuperación de información distribuida. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial Distribuida]: Sistemas Multiagente Términos Generales Algoritmos, Rendimiento, Experimentación 1. En los últimos años ha habido un creciente interés en estudiar cómo controlar los procesos de búsqueda en sistemas de recuperación de información (IR) basados en pares (P2P) [6, 13, 14, 15]. En esta línea de investigación, uno de los problemas centrales que preocupa a los investigadores es dirigir de manera eficiente las consultas de los usuarios en la red a los agentes que poseen los documentos apropiados. En ausencia de información global, las estrategias dominantes para abordar este problema son enfoques basados en la similitud de contenido [6, 13, 14, 15]. Si bien la similitud de contenido entre consultas y nodos locales parece ser un indicador creíble para la cantidad de documentos relevantes que residen en cada nodo, estos enfoques están limitados por una serie de factores. En primer lugar, las métricas basadas en similitud pueden ser miope ya que los nodos localmente relevantes pueden no estar conectados a otros nodos relevantes. Segundo, los enfoques basados en la similitud no tienen en cuenta las características de tiempo de ejecución de los sistemas de IR P2P, incluidos los parámetros ambientales, el uso del ancho de banda y la información histórica de las sesiones de búsqueda pasadas, que proporcionan información valiosa para los algoritmos de enrutamiento de consultas. En este artículo, desarrollamos un enfoque de IR basado en aprendizaje por refuerzo para mejorar el rendimiento de los algoritmos de búsqueda de IR distribuidos. Los agentes pueden adquirir mejores estrategias de búsqueda al recopilar y analizar información de retroalimentación de sesiones de búsqueda anteriores. En particular, los agentes mantienen estimaciones, es decir, utilidad esperada, sobre las capacidades de los agentes aguas abajo de proporcionar documentos relevantes para tipos específicos de consultas entrantes. Estas estimaciones se actualizan gradualmente al aprender de la información de retroalimentación devuelta de sesiones de búsqueda anteriores. Basándose en la información actualizada de utilidad esperada, los agentes derivan políticas de enrutamiento correspondientes. Posteriormente, estos agentes dirigen las consultas basándose en las políticas aprendidas y actualizan las estimaciones sobre la utilidad esperada en función de las nuevas políticas de enrutamiento. Este proceso se lleva a cabo de manera iterativa. El objetivo del algoritmo de aprendizaje, aunque consume ancho de banda de red, es reducir el tiempo de enrutamiento para procesar más consultas por unidad de tiempo y al mismo tiempo encontrar más documentos relevantes. Esto contrasta con los enfoques basados en la similitud de contenido, donde se repiten operaciones similares para cada consulta entrante y el tiempo de procesamiento se mantiene en gran medida constante con el tiempo. Otra forma de ver este documento es que nuestro enfoque básico para la búsqueda de IR distribuida es construir una red de superposición jerárquica (organización de agentes) basada en la medida de similitud de contenido entre las colecciones de documentos de los agentes de manera ascendente. En trabajos anteriores, hemos demostrado que esta organización mejora significativamente el rendimiento de búsqueda. Sin embargo, esta estructura organizativa no tiene en cuenta los patrones de llegada de las consultas, incluyendo su frecuencia, tipos y dónde entran en el sistema, ni el ancho de banda de comunicación disponible en la red y las capacidades de procesamiento de los agentes individuales. La intención del aprendizaje por refuerzo es adaptar las decisiones de enrutamiento de los agentes a las situaciones dinámicas de la red y aprender de sesiones de búsqueda pasadas. Específicamente, las contribuciones de este artículo incluyen: (1) un enfoque basado en aprendizaje por refuerzo para que los agentes adquieran políticas de enrutamiento satisfactorias basadas en estimaciones de la contribución potencial de sus agentes vecinos; (2) dos estrategias para acelerar el proceso de aprendizaje. Según nuestro mejor conocimiento, esta es una de las primeras aplicaciones de aprendizaje por refuerzo para abordar problemas de compartición de contenido distribuido, lo cual indica algunos de los problemas al aplicar el refuerzo en una aplicación compleja. El resto de este documento está organizado de la siguiente manera: la Sección 2 revisa los sistemas jerárquicos de intercambio de contenido y el algoritmo de búsqueda de dos fases basado en dicha topología. La Sección 3 describe un enfoque basado en aprendizaje por refuerzo para dirigir el proceso de enrutamiento; la Sección 4 detalla la configuración experimental y analiza los resultados. La sección 5 discute estudios relacionados y la sección 6 concluye el artículo. BÚSQUEDA EN SISTEMAS JERÁRQUICOS DE IR P2P Esta sección revisa brevemente nuestros enfoques básicos para los sistemas jerárquicos de IR P2P. En un sistema jerárquico de recuperación de información P2P ilustrado en la Fig.1, los agentes están conectados entre sí a través de tres tipos de enlaces: enlaces ascendentes, enlaces descendentes y enlaces laterales. En las siguientes secciones, denotamos el conjunto de agentes que están directamente conectados al agente Ai como DirectConn(Ai), el cual se define como DirectConn(Ai) = NEI(Ai) ∪ PAR(Ai) ∪ CHL(Ai), donde NEI(Ai) es el conjunto de agentes vecinos conectados a Ai a través de enlaces laterales; PAR(Ai) es el conjunto de agentes a los que el agente Ai está conectado a través de enlaces ascendentes y CHL(Ai) es el conjunto de agentes a los que el agente Ai se conecta a través de enlaces descendentes. Estos enlaces se establecen a través de un proceso de agrupamiento distribuido basado en la similitud de contenido de abajo hacia arriba[15]. Estos enlaces son luego utilizados por agentes para localizar otros agentes que contienen documentos relevantes a las consultas dadas. Un agente típico Ai en nuestro sistema utiliza dos colas: una cola de búsqueda local, LSi, y una cola de reenvío de mensajes MFi. Los estados de las dos colas constituyen los estados internos de un agente. La cola de búsqueda local LSi almacena sesiones de búsqueda programadas para procesamiento local. Es una cola de prioridad y el agente Ai siempre selecciona las consultas más prometedoras para procesarlas con el fin de maximizar la utilidad global. MFi consiste en un conjunto de consultas para reenviar y se procesa de manera FIFO (primero en entrar, primero en salir). Para la primera consulta en MFi, el agente Ai determina a qué subconjunto de sus agentes vecinos reenviarla basándose en la política de enrutamiento de los agentes πi. Estas decisiones de enrutamiento determinan cómo se lleva a cabo el proceso de búsqueda en la red. En este documento, llamamos a Ai como el agente aguas arriba de Ajs y a Aj como el agente aguas abajo de Ais si A4 A5 A6 A7 A2 A3 A9 NEI(A2)={A3} PAR(A2)={A1} CHL(A2)={A4,A5} A1 A8 Figura 1: Una fracción de un sistema jerárquico P2PIR en el que un agente Ai dirige una consulta al agente Aj. El protocolo de búsqueda distribuida de nuestra organización de agentes jerárquicos está compuesto por dos pasos. En el primer paso, al recibir una consulta qk en el tiempo tl de un usuario, el agente Ai inicia una sesión de búsqueda si al sondear a sus agentes vecinos Aj ∈ NEI(Ai) con el mensaje PROBE para el valor de similitud Sim(qk, Aj) entre qk y Aj. Aquí, Ai se define como el iniciador de la consulta de la sesión de búsqueda si. En el segundo paso, Ai selecciona un grupo de agentes más prometedores para iniciar el proceso de búsqueda real con el mensaje BUSCAR. Estos mensajes de BÚSQUEDA contienen un parámetro TTL (Tiempo de Vida) además de la consulta. El valor TTL disminuye en 1 después de cada salto. En el proceso de búsqueda, los agentes descartan aquellas consultas que han sido procesadas previamente o cuyo TTL disminuye a 0, lo que evita que las consultas se repitan infinitamente en el sistema. La sesión de búsqueda termina cuando todos los agentes que reciben la consulta la descartan o el TTL disminuye a 0. Tras recibir mensajes de BÚSQUEDA para qk, los agentes programan actividades locales que incluyen búsqueda local, reenvío de qk a sus vecinos y devolución de resultados de búsqueda al iniciador de la consulta. Este proceso y los algoritmos relacionados se detallan en [15, 14]. 3. En el enfoque de búsqueda basado en aprendizaje por refuerzo, mencionado anteriormente, las decisiones de enrutamiento de un agente Ai dependen de la comparación de similitud entre las consultas entrantes y los agentes vecinos de Ai para reenviar esas consultas a agentes relevantes sin inundar la red con mensajes de consulta innecesarios. Sin embargo, esta heurística es miope porque un vecino directo relevante no necesariamente está conectado con otros agentes relevantes. En esta sección, proponemos un enfoque más general al plantear este problema como una tarea de aprendizaje por refuerzo. En busca de una mayor flexibilidad, los agentes pueden alternar entre dos modos: modo de aprendizaje y modo sin aprendizaje. En el modo de no aprendizaje, los agentes operan de la misma manera que lo hacen en los procesos de búsqueda distribuida normales descritos en [14, 15]. Por otro lado, en el modo de aprendizaje, en paralelo con las sesiones de búsqueda distribuida, los agentes también participan en un proceso de aprendizaje que se detallará en esta sección. Ten en cuenta que en el protocolo de aprendizaje, el proceso de aprendizaje no interfiere con el proceso de búsqueda distribuida. Los agentes pueden elegir iniciar y detener procesos de aprendizaje sin afectar el rendimiento del sistema. En particular, dado que el proceso de aprendizaje consume recursos de red (especialmente ancho de banda), los agentes pueden optar por iniciar el aprendizaje solo cuando la carga de la red es relativamente baja, minimizando así los costos adicionales de comunicación incurridos por el algoritmo de aprendizaje. La sección está estructurada de la siguiente manera, la Sección 3.1 describe 232 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) un modelo basado en aprendizaje por refuerzo. La sección 3.2 describe un protocolo para implementar el algoritmo de aprendizaje en la red. La sección 3.3 discute la convergencia del algoritmo de aprendizaje. 3.1 El Modelo La política de enrutamiento de un agente toma el estado de una sesión de búsqueda como entrada y produce las acciones de enrutamiento para esa consulta. En nuestro trabajo, el estado de una sesión de búsqueda sj se estipula como: QSj = (qk, ttlj) donde ttlj es el número de saltos que quedan para la sesión de búsqueda sj, qk es la consulta específica. QL es un atributo de qk que indica a qué tipo de consultas qk probablemente pertenecen. El conjunto de QL puede ser generado ejecutando un algoritmo de clasificación en línea simple en todas las consultas que han sido procesadas por los agentes, o un algoritmo fuera de línea en un conjunto de entrenamiento pre-designado. La suposición aquí es que el conjunto de tipos de consultas se aprende de antemano y pertenece al conocimiento común de los agentes en la red. El trabajo futuro incluye explorar cómo se puede lograr el aprendizaje cuando esta suposición no se cumple. Dado el conjunto de tipos de consultas establecido, una consulta entrante qi puede ser clasificada en una clase de consulta Q(qi) mediante la fórmula: Q(qi) = arg max Qj P(qi|Qj) (1) donde P(qi|Qj) indica la probabilidad de que la consulta qi sea generada por la clase de consulta Qj [8]. El conjunto de acciones de enrutamiento atómico de un agente Ai se denota como {αi}, donde {αi} se define como αi = {αi0 , αi1 , ..., αin }. Un elemento αij representa una acción para dirigir una consulta dada al agente vecino Aij ∈ DirectConn(Ai). La política de enrutamiento πi del agente Ai es estocástica y su resultado para una sesión de búsqueda con estado QSj se define como: πi(QSj) = {(αi0 , πi(QSi, αi0 )), (αi1 , πi(QSi, αi1 )), ...} (2) Nótese que el operador πi está sobrecargado para representar tanto la política probabilística para una sesión de búsqueda con estado QSj, denotada como πi(QSj); como la probabilidad de enviar la consulta a un agente vecino específico Aik ∈ DirectConn(Ai) bajo la política πi(QSj), denotada como πi(QSj, αik). Por lo tanto, la ecuación (2) significa que la probabilidad de reenviar la sesión de búsqueda al agente Ai0 es πi(QSi, αi0) y así sucesivamente. Bajo esta política estocástica, la acción de enrutamiento es no determinística. La ventaja de esta estrategia es que los mejores agentes vecinos no serán seleccionados repetidamente, mitigando así las posibles situaciones de puntos calientes. La utilidad esperada, Un i (QSj), se utiliza para estimar la ganancia potencial de utilidad al dirigir el tipo de consulta QSj al agente Ai bajo la política πn i. El superíndice n indica el valor en la n-ésima iteración en un proceso de aprendizaje iterativo. La utilidad esperada proporciona orientación de enrutamiento para futuras sesiones de búsqueda. En el proceso de búsqueda, cada agente Ai mantiene observaciones parciales de los estados de sus vecinos, como se muestra en la Figura 2. La observación parcial incluye información no local como la estimación de la utilidad potencial de su vecino Am para el estado de consulta QSj, denotado como Um(QSj), así como la información de carga, Lm. Estas observaciones son actualizadas periódicamente por los vecinos. La información de utilidad estimada se utilizará para actualizar la utilidad esperada de A en su política de enrutamiento. Cargar información de utilidad esperada para diferentes tipos de consultas de agentes vecinos... A0 A1 A3 A2 Un 0 (QS0) ... ... ... ... ...... Un 0 (QS1) Un 1 (QS1) Un 2 (QS1) Un 3 (QS1) Un 1 (QS0) Un 2 (QS0) Un 3 (QS0) Ln 0 Ln 1 Ln 2 Ln 3 ... QS0 QS1 ... Figura 2: La Observación Parcial del Agente Ais sobre sus vecinos (A0, A1...) La información de carga de Am, Lm, se define como Lm = |MFm| Cm, donde |MFm| es la longitud de la cola de mensajes en espera y Cm es la tasa de servicio de la cola de mensajes en espera del agente Am. Por lo tanto, Lm caracteriza la utilización de un canal de comunicación de agentes, y así proporciona información no local a los vecinos de Ams para ajustar los parámetros de su política de enrutamiento y evitar inundar a sus agentes aguas abajo. Ten en cuenta que, basado en las características de las consultas que ingresan al sistema y las capacidades de los agentes, la carga de trabajo de los agentes puede no ser uniforme. Después de recopilar la información de la tasa de utilización de todos sus vecinos, el agente Ai calcula Li como una medida única para evaluar la condición de carga promedio de su vecindario: Li = P k Lk |DirectConn(Ai)| Los agentes explotan el valor de Li para determinar la probabilidad de enrutamiento en su política de enrutamiento. Se debe tener en cuenta que, como se describe en la Sección 3.2, la información sobre agentes vecinos se transmite junto con el mensaje de consulta propagado entre los agentes siempre que sea posible para reducir la sobrecarga de tráfico. 3.1.1 Actualización de la Política Se introduce un proceso de actualización iterativo para que los agentes aprendan una política de enrutamiento estocástica satisfactoria. En este proceso iterativo, los agentes actualizan sus estimaciones sobre la utilidad potencial de sus políticas de enrutamiento actuales y luego propagan las estimaciones actualizadas a sus vecinos. Sus vecinos luego generan una nueva política de enrutamiento basada en la observación actualizada y a su vez calculan la utilidad esperada basada en las nuevas políticas y continúan este proceso iterativo. En particular, en el tiempo n, dado un conjunto de utilidad esperada, un agente Ai, cuyo conjunto de agentes directamente conectados es DirectConn(Ai) = {Ai0, ..., Aim}, determina su política de enrutamiento estocástico correspondiente para una sesión de búsqueda del estado QSj basada en los siguientes pasos: (1) Ai primero selecciona un subconjunto de agentes como los agentes potenciales aguas abajo del conjunto DirectConn(Ai), denotado como PDn(Ai, QSj). El tamaño del agente potencial aguas abajo se especifica como |PDn(Ai, QSj)| = min(|NEI(Ai), dn i + k)| donde k es una constante y se establece en 3 en este documento; dn i, el ancho hacia adelante, se define como el número esperado de The Sixth Intl. La fórmula especifica que el conjunto potencial de agentes aguas abajo PDn(Ai, QSj) es o bien el subconjunto de agentes vecinos con los k valores de utilidad esperada más altos para el estado QSj entre todos los agentes en DirectConn(Ai), o todos sus agentes vecinos. La k se introduce basada en la idea de una política de enrutamiento estocástica y hace que la probabilidad de reenvío del agente dn i + k más alto sea inferior al 100%. Ten en cuenta que si queremos limitar el número de agentes secundarios para la sesión de búsqueda sj a 5, la probabilidad de reenviar la consulta a todos los agentes vecinos debe sumar 5. Configurar adecuadamente el valor de dn i puede mejorar la tasa de utilización del ancho de banda de la red cuando gran parte de la red está inactiva, al mismo tiempo que mitiga la carga de tráfico cuando la red está altamente cargada. El valor de dn+1 i se actualiza en función de dn i, las observaciones anteriores y actuales sobre la situación del tráfico en el vecindario. Específicamente, la fórmula de actualización para dn+1 i es dn+1 i = dn i ∗ (1 + 1 − Li |DirectConn(Ai)| ) En esta fórmula, el ancho de avance se actualiza en función de las condiciones de tráfico del vecindario del agente Ai, es decir, Li, y su valor anterior. (2) Para cada agente Aik en el PDn(Ai, QSj), la probabilidad de reenviar la consulta a Aik se determina de la siguiente manera para asignar una mayor probabilidad de reenvío a los agentes vecinos con un valor de utilidad esperado más alto: πn+1 i (QSj, αik ) = dn+1 i |PDn(Ai, QSj)| + β ∗ ` Uik (QSj) − PDU(Ai, QSj) |PDn(Ai, QSj)| ´ (3) donde PDUn(Ai, QSj) = X o∈P Dn(Ai,QSj ) Uo(QSj) y QSj es el estado subsiguiente del agente Aik después de que el agente Ai reenvía la sesión de búsqueda con estado QSj a su agente vecino Aik; Si QSj = (qk, ttl0), entonces QSj = (qk, ttl0 − 1). En la fórmula 3, el primer término a la derecha de la ecuación, dn+1 i |P Dn(Ai,QSj )|, se utiliza para determinar la probabilidad de reenvío distribuyendo equitativamente el ancho de avance, dn+1 i, a los agentes en el conjunto PDn(Ai, QSj). El segundo término se utiliza para ajustar la probabilidad de ser elegido de manera que se favorezca a los agentes con valores de utilidad esperada más altos. β se determina de acuerdo a: β = min ` m − dn+1 i m ∗ umax − PDUn(Ai, QSj) , dn+1 i PDUn(Ai, QSj) − m ∗ umin ´ (4) donde m = |PDn(Ai, QSj)|, umax = max o∈P Dn(Ao,QSj ) Uo(QSj) y umin = min o∈P Dn(Ao,QSj ) Uo(QSj) Esta fórmula garantiza que el valor final de πn+1 i (QSj, αik ) esté bien definido, es decir, 0 ≤ πn+1 i (QSj, αik ) ≤ 1 y X i πn+1 i (QSj, αik ) = dn+1 i Sin embargo, esta solución no explora todas las posibilidades. Para equilibrar entre la explotación y la exploración, se adopta un enfoque λ-Greedy. En el enfoque λ-Greedy, además de asignar una probabilidad más alta a aquellos agentes con un valor de utilidad esperado más alto, como en la ecuación (3). Los agentes que parecen no ser buenas opciones también recibirán consultas basadas en una tasa de exploración dinámica. En particular, para agentes en el conjunto PDn(Ai, QSj), πn+1 i1 (QSj) se determina de la misma manera que arriba, con la única diferencia de que dn+1 i es reemplazado por dn+1 i ∗ (1 − λn). El ancho de banda de búsqueda restante se utiliza para el aprendizaje asignando la probabilidad λn de manera uniforme a los agentes Ai2 en el conjunto DirectConn(Ai) - PDn(Ai, QSj). πn+1 i2 (QSj, αik ) = dn+1 i ∗ λn |DirectConn(Ai) - PDn(Ai, QSj)| (5) donde PDn(Ai, QSj) ⊂ DirectConn(Ai). Se debe tener en cuenta que la tasa de exploración λ no es constante y disminuye con el tiempo. El λ se determina de acuerdo con la siguiente ecuación: λn+1 = λ0 ∗ e−c1n (6) donde λ0 es la tasa de exploración inicial, que es una constante; c1 también es una constante para ajustar la tasa de disminución de la tasa de exploración; n es la unidad de tiempo actual. 3.1.2 Actualización de la Utilidad Esperada Una vez que la política de enrutamiento en el paso n+1, πn+1 i, se determina según la fórmula anterior, el agente Ai puede actualizar su propia utilidad esperada, Un+1 i (QSi), basándose en la política de enrutamiento actualizada resultante de la fórmula 5 y los valores U actualizados de sus agentes vecinos. Bajo el supuesto de que después de que una consulta se envía a los vecinos de Ai, las sesiones de búsqueda subsiguientes son independientes, la fórmula de actualización es similar a la fórmula de actualización de Bellman en Q-Learning: Un+1 i (QSj) = (1 − θi) ∗ Un i (QSj) + θi ∗ (Rn+1 i (QSj) + X k πn+1 i (QSj, αik )Un k (QSj)) (7) donde QSj = (Qj, ttl − 1) es el siguiente estado de QSj = (Qj, ttl); Rn+1 i (QSj) es la recompensa local esperada para la clase de consulta Qk en el agente Ai bajo la política de enrutamiento πn+1 i; θi es el coeficiente para decidir cuánto peso se le da al valor antiguo durante el proceso de actualización: cuanto menor sea el valor de θi, se espera que el agente aprenda más rápido el valor real, mientras que mayor sea la volatilidad del algoritmo, y viceversa. Rn+1 (s) se actualiza de acuerdo con la siguiente ecuación: 234 The Sixth Intl. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Rn+1 i (QSj) = Rn i (QSj) +γi ∗ (r(QSj) − Rn i (QSj)) ∗ P(qj|Qj ) (8) donde r(QSj) es la recompensa local asociada con la sesión de búsqueda. P(qj|Qj) indica qué tan relevante es la consulta qj para el tipo de consulta Qj, y γi es la tasa de aprendizaje para el agente Ai. Dependiendo de la similitud entre una consulta específica qi y su tipo de consulta correspondiente Qi, la recompensa local asociada con la sesión de búsqueda tiene un impacto diferente en la estimación de Rn i (QSj). En la fórmula anterior, este impacto se refleja en el coeficiente, el valor P(qj|Qj). Función de recompensa Después de que una sesión de búsqueda se detiene cuando sus valores TTL expiran, todos los resultados de búsqueda se devuelven al usuario y se comparan con la evaluación de relevancia. Suponiendo que el conjunto de resultados de búsqueda es SR, la recompensa Rew(SR) se define como: Rew(SR) = j 1 si |Rel(SR)| > c |Rel(SR)| c en caso contrario, donde SR es el conjunto de resultados de búsqueda devueltos, Rel(SR) es el conjunto de documentos relevantes en los resultados de búsqueda. Esta ecuación especifica que los usuarios otorgan una recompensa de 1.0 si el número de documentos relevantes devueltos alcanza un número predefinido c. De lo contrario, la recompensa es proporcional al número de documentos relevantes devueltos. La razón para establecer un valor de corte de este tipo es que la importancia de la proporción de recuperación disminuye con la abundancia de documentos relevantes en el mundo real, por lo tanto, los usuarios tienden a enfocarse solo en un número limitado de resultados buscados. Los detalles del protocolo de enrutamiento actual se introducirán en la Sección 3.2 cuando presentemos cómo se implementa el algoritmo de aprendizaje en sistemas reales. 3.2 Implementación del algoritmo de aprendizaje. Esta sección describe cómo se puede utilizar el algoritmo de aprendizaje en un proceso de búsqueda de una o dos fases. En el algoritmo de búsqueda de una sola fase, las sesiones de búsqueda comienzan desde los iniciadores de las consultas. Por el contrario, en el algoritmo de búsqueda de dos pasos, el iniciador de la consulta primero intenta buscar un punto de inicio más apropiado para la consulta introduciendo un paso exploratorio como se describe en la Sección 2. A pesar de la diferencia en la calidad de los puntos de partida, la mayor parte del proceso de aprendizaje para los dos algoritmos es en gran medida el mismo como se describe en los párrafos siguientes. Antes de que comience el aprendizaje, cada agente inicializa el valor de utilidad esperado para todos los posibles estados como 0. Posteriormente, al recibir una consulta, además de las operaciones normales descritas en la sección anterior, un agente Ai también configura un temporizador para esperar los resultados de búsqueda devueltos por sus agentes subordinados. Una vez que el temporizador expire o haya recibido respuesta de todos sus agentes aguas abajo, Ai fusiona y reenvía los resultados de búsqueda acumulados de sus agentes aguas abajo a su agente aguas arriba. Configurar el temporizador acelera el aprendizaje porque los agentes pueden evitar esperar demasiado tiempo a que los agentes aguas abajo devuelvan los resultados de búsqueda. Ten en cuenta que estos resultados detallados y la información correspondiente del agente seguirán almacenados en Ai hasta que la información de retroalimentación sea transmitida desde su agente aguas arriba y se pueda evaluar el rendimiento de sus agentes aguas abajo. La duración del temporizador está relacionada con el valor TTL. En este documento, configuramos el temporizador a ttimer = ttli ∗ 2 + tf, donde ttli ∗ 2 es la suma del tiempo de viaje de las consultas en la red, y tf es el período de tiempo esperado que los usuarios desearían esperar. Los resultados de la búsqueda serán finalmente devueltos al iniciador de la sesión de búsqueda A0. Serán comparados con la evaluación de relevancia proporcionada por los usuarios finales (como se describe en la sección del experimento, la evaluación de relevancia para el conjunto de consultas se proporciona junto con las colecciones de datos). La recompensa será calculada y propagada hacia atrás a los agentes a lo largo del camino por el que se pasaron los resultados de la búsqueda. Este es un proceso inverso de la propagación de los resultados de búsqueda. En el proceso de propagar la recompensa hacia atrás, los agentes actualizan las estimaciones de su propio valor potencial de utilidad, generan una política actualizada y transmiten sus resultados actualizados a los agentes vecinos basándose en el algoritmo descrito en la Sección 3. Tras el cambio del valor de utilidad esperado, el agente Ai envía su estimación de utilidad actualizada a sus vecinos para que puedan actuar según la utilidad esperada modificada y el estado correspondiente. Este mensaje de actualización incluye la recompensa potencial, así como el estado correspondiente QSi = (qk, ttll) del agente Ai. Cada agente vecino, Aj, reacciona a este tipo de mensaje de actualización actualizando el valor de utilidad esperado para el estado QSj(qk, ttll + 1) de acuerdo con el valor de utilidad esperado cambiado recién anunciado. Una vez que completen la actualización, los agentes informarían nuevamente a los vecinos relacionados para que actualicen sus valores. Este proceso continúa hasta que el valor TTL en el mensaje de actualización aumenta al límite de TTL. Para acelerar el proceso de aprendizaje, al actualizar los valores de utilidad esperada de un agente Ai con agentes vecinos, especificamos que Um(Qk, ttl0) >= Um(Qk, ttl1) si ttl0 > ttl1. Por lo tanto, cuando el agente Ai recibe un valor de utilidad esperada actualizado con ttl1, también actualiza los valores de utilidad esperada con cualquier ttl0 > ttl1 si Um(Qk, ttl0) < Um(Qk, ttl1) para acelerar la convergencia. Esta heurística se basa en el hecho de que la utilidad de una sesión de búsqueda es una función no decreciente del tiempo t. 3.3 Discusión Al formalizar el sistema de enrutamiento de contenido como una tarea de aprendizaje, se hacen muchas suposiciones. En sistemas reales, estas suposiciones pueden no cumplirse, por lo que el algoritmo de aprendizaje puede no converger. Dos problemas son de particular importancia, (1) Este problema de enrutamiento de contenido no tiene propiedades de Markov. A diferencia del enrutamiento de paquetes basado en el nivel de IP, la decisión de enrutamiento de cada agente para una sesión de búsqueda particular sj depende del historial de enrutamiento de sj. Por lo tanto, la suposición de que todas las sesiones de búsqueda posteriores son independientes no se cumple en la realidad. Esto puede llevar a un problema de doble conteo en el que los documentos relevantes de algunos agentes se contarán más de una vez para el estado donde el valor TTL es mayor que 1. Sin embargo, en el contexto de las organizaciones de agentes jerárquicos, dos factores mitigan estos problemas: primero, los agentes en cada grupo de contenido forman una estructura similar a un árbol. Con la ausencia de los ciclos, las estimaciones dentro del árbol estarían cerca del valor preciso. En segundo lugar, la naturaleza estocástica de la política de enrutamiento remedia parcialmente este problema. El Sexto Internacional. Otro desafío para este algoritmo de aprendizaje es que en un entorno de red real, las observaciones sobre agentes vecinos pueden no poder actualizarse a tiempo debido al retraso en la comunicación u otras situaciones. Además, cuando los agentes vecinos actualizan sus estimaciones al mismo tiempo, puede surgir oscilación durante el proceso de aprendizaje[1]. Este documento explora varios enfoques para acelerar el proceso de aprendizaje. Además de la estrategia mencionada de actualizar los valores de utilidad esperada, también empleamos una estrategia de actualización activa donde los agentes notifican a sus vecinos cada vez que se actualiza su utilidad esperada. Por lo tanto, se puede lograr una velocidad de convergencia más rápida. Esta estrategia contrasta con la actualización perezosa, donde los agentes solo repiten a sus agentes vecinos con el cambio en la utilidad esperada cuando intercambian información. El compromiso entre los dos enfoques es la carga de red versus la velocidad de aprendizaje. La ventaja de este algoritmo de aprendizaje es que una vez que se aprende una política de enrutamiento, los agentes no tienen que comparar repetidamente la similitud de las consultas siempre y cuando la topología de la red permanezca sin cambios. En cambio, el agente solo tiene que determinar adecuadamente la clasificación de la consulta y seguir las políticas aprendidas. La desventaja de este enfoque basado en el aprendizaje es que el proceso de aprendizaje debe llevarse a cabo cada vez que la estructura de la red cambia. Hay muchas posibles extensiones para este modelo de aprendizaje. Por ejemplo, actualmente se utiliza una sola medida para indicar la carga de tráfico en un vecindario de agentes. Una extensión sencilla sería llevar un registro de la carga individual de cada vecino del agente. 4. CONFIGURACIÓN DE EXPERIMENTOS Y RESULTADOS Los experimentos se llevan a cabo en el kit de simulación TRANO con dos conjuntos de datos, TREC-VLC-921 y TREC123-100. Las siguientes subsecciones presentan el banco de pruebas TRANO, los conjuntos de datos y los resultados experimentales. 4.1 Banco de pruebas TRANO TRANO (Task Routing on Agent Network Organization) es un banco de pruebas de recuperación de información basado en red de agentes múltiples. TRANO se construye sobre el Farm [4], un simulador distribuido basado en el tiempo que proporciona un marco de diseminación de datos para organizaciones de redes de agentes distribuidos a gran escala. TRANO apoya la importación y exportación de perfiles de organizaciones de agentes, incluyendo conexiones topológicas y otras características. Cada agente de TRANO está compuesto por una estructura de vista de agente y una unidad de control. En la simulación, cada agente es pulsado regularmente y el agente verifica las colas de mensajes entrantes, realiza operaciones locales y luego reenvía mensajes a otros agentes. 4.2 Configuración Experimental En nuestro experimento, utilizamos dos conjuntos de datos estándar, los conjuntos de datos TRECVLC-921 y TREC-123-100, para simular las colecciones alojadas en los agentes. Los conjuntos de datos TREC-VLC-921 y TREC123-100 fueron creados por el Instituto Nacional de Tecnología Estándar de los Estados Unidos (NIST) para sus conferencias TREC. En el ámbito de la recuperación de información distribuida, las dos colecciones de datos se dividen en 921 y 100 subcolecciones. Se observa que el conjunto de datos TREC-VLC-921 es más heterogéneo que TREC-123-100 en términos de origen, longitud de documento y distribución de documentos relevantes a partir de las estadísticas de las dos colecciones de datos enumeradas en [13]. Por lo tanto, TREC-VLC-921 está mucho más cerca de las distribuciones reales de documentos en entornos P2P. Además, TREC-123-100 se divide en dos conjuntos de 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0 500 1000 1500 2000 2500 3000 Número de consulta de ARSS frente al número de consultas entrantes para TREC-VLC-921 SSLA-921 SSNA-921 Figura 3: ARSS (Recompensa promedio por sesión de búsqueda) frente al número de sesiones de búsqueda para la búsqueda de 1 fase en TREC-VLC-921 0 0.1 0.2 0.3 0.4 0.5 0.6 0 500 1000 1500 2000 2500 3000 Número de consulta de ARSS frente al número de consultas para TREC-VLC-921 TSLA-921 TSNA-921 Figura 4: ARSS (Recompensa promedio por sesión de búsqueda) frente al número de sesiones de búsqueda para la búsqueda de 2 fases en TREC-VLC-921 subcolecciones de dos formas: aleatoriamente y por fuente. Las dos particiones se denominan TREC-123-100-Random y TREC-123-100-Source respectivamente. Los documentos en cada subcolección en el conjunto de datos TREC-123-100-Source son más coherentes que los de TREC-123-100-Random. Los dos conjuntos diferentes de particiones nos permiten observar cómo el algoritmo de aprendizaje distribuido se ve afectado por la homogeneidad de las colecciones. La organización jerárquica de agentes es generada por el algoritmo descrito en nuestro algoritmo anterior [15]. Durante el proceso de generación de la topología, la información de grado de cada agente es estimada por el algoritmo introducido por Palmer et al. [9] con parámetros α = 0.5 y β = 0.6. En nuestros experimentos, estimamos el límite superior y el límite de grado descendente utilizando factores de descuento lineales de 0.5, 0.8 y 1.0. Una vez que se construye la topología, las consultas seleccionadas al azar del conjunto de consultas 301-350 en TREC-VLC-921 y del conjunto de consultas 1-50 en TREC-123-100-Random y TREC-123-100-Source se inyectan en el sistema basado en una distribución de Poisson P(N(t) = n) = (λt)n n! e−λ 236 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 0 50 100 150 200 250 300 350 400 0 500 1000 1500 2000 2500 3000 Utilidad acumulada Número de consulta Utilidad acumulada sobre el número de consultas entrantes TSLA-921 SSNA-921 SSLA-921 TSNA-921 Figura 5: La utilidad acumulada versus el número de sesiones de búsqueda TREC-VLC-921 Además, asumimos que todos los agentes tienen la misma probabilidad de recibir consultas del entorno, es decir, λ es el mismo para cada agente. En nuestros experimentos, λ se establece en 0.0543 para que la media de las consultas entrantes del entorno a la red de agentes sea de 50 por unidad de tiempo. El tiempo de servicio para la cola de comunicación y la cola de búsqueda local, es decir, tQij y trs, se establece en 0.01 unidades de tiempo y 0.05 unidades de tiempo respectivamente. En nuestros experimentos, hay diez tipos de consultas adquiridas mediante la agrupación del conjunto de consultas 301-350 y 1-50. 4.3 Análisis y evaluación de resultados. La Figura 3 muestra el ARSS (Recompensa Promedio por Sesión de Búsqueda) versus el número de consultas entrantes a lo largo del tiempo para el Algoritmo No Aprendido de un Solo Paso (SSNA) y el Algoritmo de Aprendizaje de un Solo Paso (SSLA) para la recolección de datos TREC-VLC-921. Se muestra que la recompensa promedio para el algoritmo SSNA oscila entre 0.02 y 0.06 y su rendimiento cambia poco con el tiempo. El promedio de recompensa para el enfoque SSLA comienza en el mismo nivel que el algoritmo SSNA. Pero el rendimiento aumenta con el tiempo y la ganancia promedio de rendimiento se estabiliza en aproximadamente un 25% después del rango de consulta de 2000 a 3000. La Figura 4 muestra el ARSS (Recompensa Promedio por Sesión de Búsqueda) versus el número de consultas entrantes a lo largo del tiempo para el Algoritmo No Aprendido de Dos Pasos (TSNA) y el Algoritmo de Aprendizaje de Dos Pasos (TSLA) para la recolección de datos TREC-VLC-921. El enfoque TSNA tiene un rendimiento relativamente consistente con una recompensa promedio que oscila entre 0.05 y 0.15. El promedio de recompensa para el enfoque de TSLA, donde se explota el algoritmo de aprendizaje, comienza en el mismo nivel que el algoritmo TSNA y mejora la recompensa promedio con el tiempo hasta que se unen al sistema entre 2000 y 2500 consultas. Los resultados muestran que la ganancia promedio de rendimiento para el enfoque TSLA sobre el enfoque TNLA es del 35% después de la estabilización. La Figura 5 muestra la utilidad acumulada versus el número de consultas entrantes a lo largo del tiempo para SSNA, SSLA, TSNA y TSLA respectivamente. Se ilustra que la utilidad acumulativa de los algoritmos no basados en aprendizaje aumenta principalmente de forma lineal con el tiempo, mientras que las ganancias de los algoritmos basados en aprendizaje se aceleran cuando más consultas ingresan al sistema. Estos resultados experimentales demuestran que los enfoques basados en el aprendizaje tienen un rendimiento consistentemente mejor que los algoritmos de enrutamiento no basados en el aprendizaje. Además, el algoritmo basado en aprendizaje de dos fases es mejor que el algoritmo basado en aprendizaje de una sola fase porque la recompensa máxima que un agente puede recibir al buscar en su vecindario dentro de TTL saltos está relacionada con el número total de documentos relevantes en esa área. Por lo tanto, incluso la política de enrutamiento óptima puede hacer poco más allá de alcanzar estos documentos relevantes más rápido. Por el contrario, el algoritmo de aprendizaje basado en dos pasos puede reubicar la sesión de búsqueda en un vecindario con documentos más relevantes. El TSLA combina los méritos de ambos enfoques y los supera. La Tabla 1 enumera la utilidad acumulativa para los conjuntos de datos TREC123-100-Random y TREC-123-100-Source con organizaciones jerárquicas. Las cinco columnas muestran los resultados de cuatro enfoques diferentes. En particular, la columna TSNA-Random muestra los resultados para el conjunto de datos TREC-123-100-Random con el enfoque TSNA. La columna TSLA-Random muestra los resultados para el conjunto de datos TREC-123-100-Random con el enfoque TSLA. Hay dos números en cada celda de la columna TSLA-Random. El primer número es la utilidad acumulada real, mientras que el segundo número es el porcentaje de ganancia en términos de utilidad sobre el enfoque TSNA. Las columnas TSNA-Source y TSLA-Source muestran los resultados para el conjunto de datos TREC-123-100-Source con los enfoques TSNA y TSLA respectivamente. La Tabla 1 muestra que la mejora en el rendimiento para TREC-123-100-Random no es tan significativa como en los otros conjuntos de datos. Esto se debe a que los documentos en la subcolección de TREC-123-100-Random son seleccionados al azar, lo que hace que el modelo de colección, la firma de la colección, sea menos significativo. Dado que ambos algoritmos están diseñados basados en la suposición de que las colecciones de documentos pueden ser bien representadas por su modelo de colección, este resultado no es sorprendente. En general, las Figuras 4, 5 y la Tabla 1 demuestran que el enfoque basado en aprendizaje por refuerzo puede mejorar considerablemente el rendimiento del sistema para ambas colecciones de datos. Sin embargo, queda como trabajo futuro descubrir la correlación entre la magnitud de las mejoras en el rendimiento y el tamaño de la colección de datos y/o la extensión de la heterogeneidad entre las subcolecciones. TRABAJO RELACIONADO El problema de enrutamiento de contenido difiere del enrutamiento a nivel de red en redes de comunicación conmutadas por paquetes en que el enrutamiento basado en contenido ocurre en redes a nivel de aplicación. Además, los agentes de destino en nuestros algoritmos de enrutamiento de contenido son múltiples y las direcciones no son conocidas en el proceso de enrutamiento. Los problemas de enrutamiento a nivel de IP han sido abordados desde la perspectiva del aprendizaje por refuerzo[2, 5, 11, 12]. Estos estudios han explorado algoritmos distribuidos completamente que son capaces, sin coordinación central, de difundir conocimiento sobre la red, encontrar de manera robusta y eficiente los caminos más cortos frente a cambios en las topologías de red y costos de enlace cambiantes. Hay dos clases principales de algoritmos de enrutamiento de paquetes adaptativos y distribuidos en la literatura: algoritmos de vector de distancia y algoritmos de estado de enlace. Si bien esta línea de estudios tiene cierta similitud con nuestro trabajo, se ha centrado principalmente en redes de comunicación conmutadas por paquetes. En este dominio, el destino de un paquete es determinístico y único. Cada agente mantiene estimaciones, probabilísticamente o determinísticamente, sobre la distancia a un destino específico a través de sus vecinos. Una variante de las técnicas de Q-Learning se implementa en The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Tabla 1: Utilidad Acumulativa para los Conjuntos de Datos TREC-123-100-Random y TREC-123-100-Source con Organización Jerárquica; Los números porcentuales en las columnas TSLA-Random y TSLA-Source demuestran la ganancia de rendimiento sobre el algoritmo sin aprendizaje Número de consulta TSNA-Random TSLA-Random TSNA-Source TSLA-Source 500 25.15 28.45 13% 24.00 21.05 -13% 1000 104.99 126.74 20% 93.95 96.44 2.6% 1250 149.79 168.40 12% 122.64 134.05 9.3% 1500 188.94 211.05 12% 155.30 189.60 22% 1750 235.49 261.60 11% 189.14 243.90 28% 2000 275.09 319.25 16% 219.0 278.80 26% para actualizar las estimaciones y converger a las distancias reales. Se ha descubierto que la propiedad de localidad es una característica importante de los sistemas de recuperación de información en estudios de modelado de usuarios[3]. En los sistemas de intercambio de contenido basados en P2P, esta propiedad se ejemplifica por el fenómeno de que los usuarios tienden a enviar consultas que representan solo un número limitado de temas y, por el contrario, los usuarios en el mismo vecindario probablemente compartan intereses comunes y envíen consultas similares [10]. El enfoque basado en el aprendizaje se percibe como más beneficioso para los sistemas reales de recuperación de información distribuida que exhiben la propiedad de localidad. Esto se debe a que los patrones de tráfico y consultas de los usuarios pueden reducir el espacio de estados y acelerar el proceso de aprendizaje. El trabajo relacionado en aprovechar esta propiedad incluye [7], donde los autores intentaron abordar este problema mediante técnicas de modelado de usuario. 6. CONCLUSIONES En este artículo, se desarrolla un enfoque basado en aprendizaje por refuerzo para mejorar el rendimiento de algoritmos de búsqueda de IR distribuidos. En particular, los agentes mantienen estimaciones, es decir, utilidad esperada, sobre la capacidad de los agentes aguas abajo para proporcionar documentos relevantes para las consultas entrantes. Estas estimaciones se actualizan gradualmente al aprender de la información de retroalimentación devuelta de sesiones de búsqueda anteriores. Basándose en la información actualizada de utilidad esperada, los agentes modifican sus políticas de enrutamiento. Posteriormente, estos agentes dirigen las consultas basándose en las políticas aprendidas y actualizan las estimaciones sobre la utilidad esperada en función de las nuevas políticas de enrutamiento. Los experimentos en dos conjuntos de datos IR distribuidos diferentes ilustran que el enfoque de aprendizaje por refuerzo mejora considerablemente la utilidad acumulativa con el tiempo. 7. REFERENCIAS [1] S. Abdallah y V. Lesser. Aprendiendo el juego de asignación de tareas. En AAMAS 06: Actas de la quinta conferencia internacional conjunta sobre agentes autónomos y sistemas multiagente, páginas 850-857, Nueva York, NY, EE. UU., 2006. ACM Press. [2] J. 

ACM Press. [2] J. A. Boyan y M. L. Littman. Enrutamiento de paquetes en redes de cambio dinámico: Un enfoque de aprendizaje por refuerzo. En Avances en Sistemas de Procesamiento de Información Neural, volumen 6, páginas 671-678. Morgan Kaufmann Publishers, Inc., 1994. [3] J. C. French, A. L. Powell, J. P. Callan, C. L. Viles, T. Emmitt, K. J. Prey, y Y. Mou. Comparando el rendimiento de los algoritmos de selección de bases de datos. En Investigación y Desarrollo en Recuperación de Información, páginas 238-245, 1999. [4] B. Horling, R. Mailler y V. Lesser. Granja: Un entorno escalable para el desarrollo y evaluación de múltiples agentes. En Avances en Ingeniería de Software para Sistemas Multiagente, páginas 220-237, Berlín, 2004. Springer-Verlag. [5] M. Littman y J. Boyan. Un esquema distribuido de aprendizaje por refuerzo para enrutamiento de redes. En Actas del Taller Internacional sobre Aplicaciones de Redes Neuronales a las Telecomunicaciones, 1993. [6] J. Lu y J. Callan. Búsqueda federada de bibliotecas digitales basadas en texto en redes jerárquicas de pares. En ECIR05, 2005. [7] J. Lu y J. Callan. Modelado de usuario para búsqueda federada de texto completo en redes peer-to-peer. En ACM SIGIR 2006. ACM Press, 2006. [8] C. D. Manning y H. Schütze. Fundamentos del Procesamiento del Lenguaje Natural Estadístico. El MIT Press, Cambridge, Massachusetts, 1999. [9] C. R. Palmer y J. G. Steffan. Generando topologías de red que obedezcan leyes de potencia. En Actas de GLOBECOM 2000, noviembre de 2000. [10] K. Sripanidkulchai, B. Maggs y H. Zhang. Localización eficiente de contenido utilizando la localidad basada en intereses en sistemas peer-to-peer. En INFOCOM, 2003. [11] D. Subramanian, P. Druschel y J. Chen. Hormigas y aprendizaje por refuerzo: Un estudio de caso en enrutamiento en redes dinámicas. En Actas de la Decimoquinta Conferencia Internacional Conjunta sobre Inteligencia Artificial, páginas 832-839, 1997. [12] J. N. Tao y L. Weaver. Un enfoque de múltiples agentes y gradiente de políticas para el enrutamiento de redes. En Actas de la Decimoctava Conferencia Internacional sobre Aprendizaje Automático, 2001. [13] H. Zhang, W. B. Croft, B. Levine y V. Lesser. Un enfoque multiagente para la recuperación de información entre pares. En Actas de la Tercera Conferencia Internacional Conjunta sobre Agentes Autónomos y Sistemas Multiagente, julio de 2004. [14] H. Zhang y V. Lesser. Sistemas de recuperación de información peer-to-peer basados en múltiples agentes con sesiones de búsqueda concurrentes. En Actas de la Quinta Conferencia Internacional Conjunta sobre Agentes Autónomos y Sistemas Multiagente, mayo de 2006. [15] H. Zhang y V. R. Lesser. Una organización de agentes jerárquica formada dinámicamente para un sistema distribuido de intercambio de contenido. En la Conferencia Internacional IEEE/WIC/ACM sobre Tecnología de Agentes Inteligentes (IAT 2004) del 20 al 24 de septiembre de 2004 en Beijing, China, páginas 169-175. IEEE Computer Society, 2004. 238 La Sexta Conferencia Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07)