Negociación por Abducción y Relajación Chiaki Sakama Dept. Este artículo estudia un marco lógico para la negociación automatizada entre dos agentes. Suponemos un agente que tiene una base de conocimiento representada por un programa lógico. Luego, introducimos métodos para construir contraofertas en respuesta a propuestas hechas por un agente. Con este fin, combinamos las técnicas de abducción extendida en inteligencia artificial y relajación en la respuesta cooperativa a consultas para bases de datos. Estas técnicas se utilizan respectivamente para producir propuestas condicionales y propuestas de vecindario en el proceso de negociación. Proporcionamos un protocolo de negociación basado en el intercambio de estas propuestas y desarrollamos procedimientos para calcular nuevas propuestas. Categorías y Descriptores de Asignaturas F.4.1 [Lógica Matemática]: Lógica y programación de restricciones;; I.2.11 [Inteligencia Artificial Distribuida]: Sistemas multiagente Términos Generales Teoría 1. INTRODUCCIÓN La negociación automatizada ha recibido una atención creciente en los sistemas multiagente, y se han propuesto varios marcos en diferentes contextos ([1, 2, 3, 5, 10, 11, 13, 14], por ejemplo). La negociación suele avanzar en una serie de rondas y cada agente hace una propuesta en cada ronda. Un agente que recibió una propuesta responde de dos maneras. Una crítica es un comentario sobre si (partes de) la propuesta es aceptada o no. La otra es una contraoferta que es una propuesta alternativa hecha en respuesta a una propuesta previa [13]. Para ver estas propuestas en una negociación uno a uno, supongamos el siguiente diálogo de negociación entre un agente comprador B y un agente vendedor S. (Bi (o Si) representa una declaración de B (o S) en la i-ésima ronda). Quiero comprar una computadora personal de la marca b1, con las especificaciones de CPU: 1GHz, Memoria: 512MB, HDD: 80GB y una unidad de DVD-RW. Quiero conseguirlo a un precio por debajo de 1200 USD. Podemos proporcionar una PC con la especificación solicitada si la pagas en efectivo. En este caso, sin embargo, no se suman puntos de servicio para este descuento especial. B2: No puedo pagarlo en efectivo. En un precio normal, la PC solicitada cuesta 1300 USD. B3: No puedo aceptar el precio. Mi presupuesto es inferior a 1200 USD. S3: Podemos proporcionar otra computadora con la especificación solicitada, excepto que está hecha por la marca b2. El precio es exactamente de 1200 USD. B4: No quiero una PC de la marca b2. En cambio, puedo cambiar un controlador de DVD-RW a CD-RW en mi propuesta inicial. S4: Ok, acepto tu oferta. En este diálogo, en respuesta a la propuesta inicial B1, se devuelve la contraoferta S1. En el resto del diálogo, B2, B3, S4 son críticas, mientras que S2, S3, B4 son contrapropuestas. Las críticas se producen al evaluar una propuesta en una base de conocimiento de un agente. Por el contrario, hacer contraofertas implica generar una propuesta alternativa que sea más favorable para el agente que responde que la original. Se sabe que hay dos formas de producir contraofertas: ampliando la propuesta inicial o modificando parte de la propuesta inicial. Según [13], el primer tipo aparece en el diálogo: A: Te propongo que me proporciones el servicio X. B: Propongo que te proporcione el servicio X si tú me proporcionas el servicio Z. El segundo tipo está en el diálogo: A: Propongo que te proporcione el servicio Y si tú me proporcionas el servicio X. Te propongo que te ofrezca el servicio X si tú me proporcionas el servicio Z. Una negociación avanza mediante la iteración de diálogos de dar y recibir hasta llegar a un acuerdo o desacuerdo. En esos diálogos, los agentes generan (contra)propuestas razonando sobre sus propios objetivos. El objetivo del agente A en los diálogos anteriores es obtener el servicio X. El agente B propone condiciones para proporcionar el servicio. En el proceso de negociación, sin embargo, puede suceder que los agentes se vean obligados a debilitar o cambiar sus objetivos iniciales para llegar a un compromiso negociado. En el diálogo de 1022 978-81-904262-7-5 (RPS) c 2007 IFAAMAS presentado arriba, un agente comprador cambia su objetivo inicial al reducir un controlador de DVD-RW a CD-RW. Dicho comportamiento suele representarse como metaconocimiento específico de un agente o especificarse como protocolos de negociación en problemas particulares. Actualmente, no existe una lógica computacional para la negociación automatizada que tenga reglas de inferencia generales para producir propuestas (contra)propuestas. El propósito de este documento es mecanizar un proceso de construcción de (contra)propuestas en diálogos de negociación uno a uno. Suponemos un agente que tiene una base de conocimiento representada por un programa lógico. Luego introducimos métodos para generar tres tipos diferentes de propuestas. Primero, utilizamos la técnica de abducción extendida en inteligencia artificial [8, 15] para construir una propuesta condicional como una extensión de la original. Segundo, utilizamos la técnica de relajación en la respuesta cooperativa de consultas para bases de datos [4, 6] para construir una propuesta de vecindario como enmienda de la original. Tercero, combinando la abducción extendida y la relajación, se construyen propuestas de vecindario condicionales como extensiones modificadas de la propuesta original. Desarrollamos un protocolo de negociación entre dos agentes basado en el intercambio de estas contraofertas y críticas. También ofrecemos procedimientos para calcular propuestas en programación lógica. Este documento está organizado de la siguiente manera. La sección 2 introduce un marco lógico utilizado en este artículo. La sección 3 presenta métodos para construir propuestas y proporciona un protocolo de negociación. La sección 4 proporciona métodos para calcular propuestas en programación lógica. La sección 5 discute trabajos relacionados, y la sección 6 concluye el artículo. PRELIMINARES Los programas lógicos considerados en este documento son programas disyuntivos extendidos (EDP) [7]. Un EDP (o simplemente un programa) es un conjunto de reglas de la forma: L1 ; · · · ; Ll ← Ll+1 , . . . , Lm, not Lm+1 , . . . , not Ln (n ≥ m ≥ l ≥ 0) donde cada Li es un literal positivo/negativo, es decir, A o ¬A para un átomo A, y not es la negación como fallo (NAF). not L se llama un literal NAF. El símbolo ; representa la disyunción. El lado izquierdo de la regla es la cabeza, y el lado derecho es el cuerpo. Para cada regla r de la forma anterior, head(r), body+ (r) y body− (r) denotan los conjuntos de literales {L1, . . . , Ll}, {Ll+1, . . . , Lm}, y {Lm+1, . . . , Ln}, respectivamente. Además, not body− (r) denota el conjunto de literales NAF {not Lm+1, . . . , not Ln}. Una disyunción de literales y una conjunción de literales (NAF-) en una regla se identifican con sus respectivos conjuntos de literales. Una regla r se escribe a menudo como head(r) ← body+ (r), no body− (r) o head(r) ← body(r) donde body(r) = body+ (r)∪not body− (r). Una regla r es disyuntiva si head(r) contiene más de un literal. Una regla r es una restricción de integridad si head(r) = ∅; y r es un hecho si body(r) = ∅. Un programa es libre de NAF si ninguna regla contiene literales NAF. Se identifican dos reglas/literales con respecto al cambio de nombre de variables. Una sustitución es un mapeo de variables a términos θ = {x1/t1, . . . , xn/tn}, donde x1, . . . , xn son variables distintas y cada ti es un término distinto de xi. Dada una conjunción G de literales (NAF-), Gθ denota la conjunción obtenida al aplicar θ a G. Un programa, regla o literal es ground si no contiene variables. Un programa P con variables es una abreviatura de su instancia concreta Ground(P), el conjunto de reglas concretas obtenidas de P al sustituir las variables en P por elementos de su universo de Herbrand de todas las formas posibles. La semántica de un EDP está definida por la semántica de conjuntos de respuestas [7]. Sea Lit el conjunto de todas las literales fundamentales en el lenguaje de un programa. Supongamos un programa P y un conjunto de literales S(⊆ Lit). Entonces, el reducto P S es el programa que contiene la regla de cabeza ground head(r) ← body+ (r) si y solo si hay una regla r en Ground(P) tal que body− (r)∩S = ∅. Dado un EDP P libre de NAF, Cn(P) denota el conjunto más pequeño de literales en tierra que (i) es cerrado bajo P, es decir, para cada regla en tierra r en Ground(P), body(r) ⊆ Cn(P) implica que head(r) ∩ Cn(P) = ∅; y (ii) es lógicamente cerrado, es decir, es consistente o igual a Lit. Dado un EDP P y un conjunto S de literales, S es un conjunto respuesta de P si S = Cn(P ∪ S). Un programa generalmente tiene cero, uno o varios conjuntos de respuestas. Un conjunto de respuestas es consistente si no es Lit. Un programa P es consistente si tiene un conjunto de respuestas consistente; de lo contrario, P es inconsistente. La programación lógica abductiva [9] introduce un mecanismo de razonamiento hipotético a la programación lógica. Un marco abductivo utilizado en este artículo es la abducción extendida introducida por Inoue y Sakama [8, 15]. Un programa abductivo es un par P, H donde P es un EDP y H es un conjunto de literales llamados abducibles. Cuando una literal L ∈ H contiene variables, cualquier instancia de L también es un abducible. Un programa abductivo P, H es consistente si P es consistente. A lo largo del documento, se asume que los programas abductivos son consistentes a menos que se indique lo contrario. Sea G = L1, . . . , Lm, no Lm+1, . . . , no Ln una conjunción, donde todas las variables en G están cuantificadas existencialmente al principio y restringidas en su rango, es decir, cada variable en Lm+1, . . . , Ln aparece en L1, . . . , Lm. Un conjunto S de literales de base satisface la conjunción G si { L1θ, . . . , Lmθ } ⊆ S y { Lm+1θ, . . . , Lnθ }∩ S = ∅ para alguna instancia de base Gθ con una sustitución θ. Que P, H sean un programa abductivo y G una conjunción como se mencionó anteriormente. Un par (E, F) es una explicación de una observación G en P, H si 1. (P \ F) ∪ E tiene un conjunto de respuestas que satisface G, 2. (P \ F) ∪ E es consistente, 3. E y F son conjuntos de literales fundamentales tales que E ⊆ H\P y F ⊆ H ∩ P. Cuando (P \ F) ∪ E tiene un conjunto de respuestas S que satisface las tres condiciones anteriores, S se llama un conjunto de creencias de un programa abductivo P, H que satisface G (con respecto a (E, F)). Ten en cuenta que si P tiene un conjunto de respuestas coherente S que satisface G, S también es un conjunto de creencias de P, H que satisface G con respecto a (E, F) = (∅, ∅). La abducción extendida introduce/elimina hipótesis en/de un programa para explicar una observación. Ten en cuenta que la abducción normal (como en [9]) solo considera la introducción de hipótesis para explicar una observación. Una explicación (E, F) de una observación G se llama mínima si para cualquier explicación (E, F) de G, E ⊆ E y F ⊆ F implican E = E y F = F. Ejemplo 2.1. Considera el programa abductivo P, H : P : vuela(x) ← pájaro(x), no ab(x) , ab(x) ← ala-rota(x) , pájaro(tweety) ← , pájaro(opus) ← , ala-rota(tweety) ← . H : ala-rota(x) . La observación G = flies(tweety) tiene la explicación mínima (E, F) = (∅, {broken-wing(tweety)}). Esto define explicaciones crédulas [15]. Las explicaciones escépticas se utilizan en [8]. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1023 3. NEGOCIACIÓN 3.1 Propuestas Condicionales por Abducción Suponemos un agente que tiene una base de conocimiento representada por un programa abductivo P, H. Un programa P consta de dos tipos de conocimiento, creencia B y deseo D, donde B representa el conocimiento objetivo de un agente, mientras que D representa el conocimiento subjetivo en general. Definimos P = B ∪ D, pero no distinguimos entre B y D si dicha distinción no es importante en el contexto. Por el contrario, los abducibles H se utilizan para representar condiciones permisibles para llegar a un compromiso en el proceso de negociación. Definición 3.1. Una propuesta G es una conjunción de literales y literales NAF: L1, . . . , Lm, not Lm+1, . . . , not Ln donde cada variable en G está cuantificada existencialmente al principio y restringida al rango. En particular, G se llama una crítica si G = aceptar o G = rechazar donde aceptar y rechazar son las proposiciones reservadas. Una contraoferta es una propuesta hecha en respuesta a una propuesta. Definición 3.2. Una propuesta G es aceptada en un programa abductivo P, H si P tiene un conjunto de respuestas que satisfacen G. Cuando una propuesta no es aceptada, la abducción se utiliza para buscar condiciones que la hagan aceptable. Definición 3.3. Sean P, H un programa abductivo y G una propuesta. Si (E, F) es una explicación mínima de Gθ para alguna sustitución θ en P, H, la conjunción G: Gθ, E, no F se llama una propuesta condicional (para G), donde E, no F representa la conjunción: A1, . . . , Ak, no Ak+1, . . . , no Al para E = {A1, . . . , Ak} y F = {Ak+1, . . . , Al}. Proposición 3.1. Sean P, H un programa abductivo y G una propuesta. Si G es una propuesta condicional, existe un conjunto de creencias S de P, H que satisface G. Prueba. Cuando G = Gθ, E, no F, (P \ F) ∪ E tiene un conjunto de respuestas coherente S que satisface Gθ y E ∩ F = ∅. En este caso, S satisface Gθ, E, no F. Una propuesta condicional G proporciona un requisito mínimo para aceptar la propuesta G. Si Gθ tiene múltiples explicaciones mínimas, existen varias propuestas condicionales en consecuencia. Cuando (E, F) = (∅, ∅), se utiliza una propuesta condicional como una nueva propuesta hecha en respuesta a la propuesta G. Ejemplo 3.1. Un agente busca un puesto de asistente de investigación en el departamento de informática de una universidad con la condición de que el salario sea de al menos 50,000 USD al año. El agente hace su solicitud como propuesta: 2 G = asistir (depto de contabilidad), salario(x), x ≥ 50,000. La universidad tiene el programa abductivo P, H: P: salario(40,000) ← asistente(dpto de informática), no tiene PhD, salario(60,000) ← asistente(dpto de informática), tiene PhD, salario(50,000) ← asistente(dpto de matemáticas), salario(55,000) ← administrador de sistemas(dpto de informática). Para mayor comodidad notacional, a menudo incluimos ecuaciones matemáticas en propuestas/programas. Están escritas por literales, por ejemplo, x ≥ y por geq(x, y) con una definición adecuada del predicado geq. empleado(x) ← asistir(x), empleado(x) ← administrador de sistema(x), asistir(depto de computación); asistir(depto de matemáticas); administrador de sistema(depto de computación) ←, H: tiene un doctorado, donde las posiciones disponibles están representadas por disyunción. Según P, el salario base de un asistente de investigación en el departamento de informática es de 40,000 USD, pero si tiene un doctorado, es de 60,000 USD. En este caso, (E, F) = ({tiene doctorado}, ∅) se convierte en la explicación mínima de Gθ = asistir(dpto de informática), salario(60,000) con θ = { x/60,000 }. Entonces, la propuesta condicional hecha por la universidad se convierte en asistente (depto de contabilidad), salario (60,000), tiene un doctorado. 3.2 Propuestas de Vecindario por Relajación Cuando una propuesta es inaceptable, un agente intenta construir una nueva contra-propuesta debilitando las restricciones en la propuesta inicial. Utilizamos técnicas de relajación para este propósito. La relajación se utiliza como técnica de respuesta cooperativa a consultas en bases de datos [4, 6]. Cuando una consulta original falla en una base de datos, la relajación amplía el alcance de la consulta al relajar las restricciones en la misma. Esto permite que la base de datos devuelva respuestas de vecindario que están relacionadas con la consulta original. Utilizamos la técnica para elaborar propuestas en el proceso de negociación. Definición 3.4. Sean P, H un programa abductivo y G una propuesta. Entonces, G se relaja a G de las siguientes tres maneras: Anti-instantiación: Construir G de tal manera que G θ = G para alguna sustitución θ. Condiciones de eliminación: Construir G de tal manera que G ⊂ G. Reemplazo de objetivo: Si G es una conjunción G1, G2, donde G1 y G2 son conjunciones, y hay una regla L ← G1 en P tal que G1θ = G1 para alguna sustitución θ, entonces construir G como Lθ, G2. Aquí, Lθ se llama un literal reemplazado. En cada caso, todas las variables en G están cuantificadas existencialmente al principio y restringidas al rango. La anti-instantiación reemplaza constantes (o términos) con variables nuevas. La eliminación de condiciones elimina algunas condiciones en una propuesta. La sustitución de objetivo reemplaza la condición G1 en G con un literal Lθ en presencia de una regla L ← G1 en P bajo la condición G1θ = G1. Todas estas operaciones generalizan propuestas de diferentes maneras. Cada G obtenido por estas operaciones se llama una relajación de G. Cabe destacar que estas operaciones también se utilizan en el contexto de generalización inductiva [12]. La propuesta relajada puede generar nuevas ofertas que estén cerca de la propuesta original. Definición 3.5. Sean P, H un programa abductivo y G una propuesta. 1. Sea G una propuesta obtenida por anti-instantiación. Si P tiene un conjunto de respuestas S que satisface G θ para alguna sustitución θ y G θ = G, G θ se llama una propuesta de vecindario por anti-instantiación. 2. Sea G una propuesta obtenida al eliminar condiciones. Si P tiene un conjunto de respuestas S que satisface G θ para alguna sustitución θ, G θ se llama una propuesta de vecindario al eliminar condiciones. 1024 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 3. Sea G una propuesta obtenida mediante la sustitución de objetivos. Para un literal reemplazado L ∈ G y una regla H ← B en P tal que L = Hσ y (G \ {L}) ∪ Bσ = G para alguna sustitución σ, poner G = (G \ {L}) ∪ Bσ. Si P tiene un conjunto de respuestas S que satisface G θ para alguna sustitución θ, G θ se llama una propuesta de vecindario por reemplazo de objetivo. Ejemplo 3.2. (continuación) Ejemplo 3.1) Dada la propuesta G = asistir(dpto. de contabilidad), salario(x), x ≥ 50,000, • G1 = asistir(w), salario(x), x ≥ 50,000 se produce al sustituir dpto. de contabilidad por una variable w. Dado que G1θ1 = asistir(dpto. de matemáticas), salario(50,000) con θ1 = { w/dpto. de matemáticas } es satisfecho por un conjunto de respuestas de P, G1θ1 se convierte en una propuesta de vecindario por anti-instantiación. • G2 = asistir(dpto. de contabilidad), salario(x) se produce al eliminar la condición salarial x ≥ 50,000. Dado que G2θ2 = assist(compt dept), salario(40,000) con θ2 = { x/40,000 } es satisfecho por un conjunto de respuestas de P, G2θ2 se convierte en una propuesta de vecindario al eliminar condiciones. • G3 = empleado(compt dept), salario(x), x ≥ 50,000 se produce reemplazando assist(compt dept) con empleado(compt dept) usando la regla empleado(x) ← assist(x) en P. Con G3 y la regla empleado(x) ← administrador de sistemas(x) en P, se produce G3 = admin. de sistemas(compt dept), salario(x), x ≥ 50,000. Como G3 θ3 = sys admin(compt dept), salario(55, 000) con θ3 = { x/55, 000 } es satisfecho por un conjunto de respuestas de P, G3 θ3 se convierte en una propuesta de vecindario mediante la sustitución de objetivos. Finalmente, la abducción extendida y la relajación se combinan para producir propuestas de vecindario condicionales. Definición 3.6. Sean P, H un programa abductivo y G una propuesta. 1. Sea G una propuesta obtenida ya sea por anti-instantiación o eliminación de condiciones. Si (E, F) es una explicación mínima de G θ(= G) para alguna sustitución θ, la conjunción G θ, E, no F se llama una propuesta de vecindario condicional por anti-instantiación/eliminación de condiciones. 2. Sea G una propuesta obtenida mediante la sustitución de objetivos. Supongamos que G como en la Definición 3.5(3). Si (E, F) es una explicación mínima de G θ para alguna sustitución θ, la conjunción G θ, E, no F se llama una propuesta de vecindario condicional por reemplazo de objetivo. Una propuesta de vecindario condicional se reduce a una propuesta de vecindario cuando (E, F) = (∅, ∅). 3.3 Protocolo de Negociación Un protocolo de negociación define cómo intercambiar propuestas en el proceso de negociación. Esta sección presenta un protocolo de negociación en nuestro marco de trabajo. Suponemos una negociación uno a uno entre dos agentes que comparten una ontología común y el mismo idioma para una comunicación exitosa. Definición 3.7. Una propuesta L1, ..., Lm, no Lm+1, ..., no Ln viola una restricción de integridad ← cuerpo+ (r), no cuerpo- (r) si para cualquier sustitución θ, existe una sustitución σ tal que cuerpo+ (r)σ ⊆ { L1θ, . . . , Lmθ }, cuerpo- (r)σ∩{ L1θ, . . . , Lmθ } = ∅, y cuerpo- (r)σ ⊆ { Lm+1θ, . . . , Lnθ }. Las restricciones de integridad son condiciones que un agente debe cumplir, de modo que se utilizan para explicar por qué un agente no acepta una propuesta. Una negociación avanza en una serie de rondas. Cada ronda i-ésima (i ≥ 1) consiste en una propuesta Gi 1 hecha por un agente Ag1 y otra propuesta Gi 2 hecha por el otro agente Ag2. Definición 3.8. Que P1, H1 sea un programa abductivo de un agente Ag1 y Gi 2 una propuesta hecha por Ag2 en la i-ésima ronda. Un conjunto de críticas Ag1 (en la ronda i-ésima) es un conjunto CSi 1(P1, Gj 2) = CSi−1 1 (P1, Gj−1 2 ) ∪ { r | r es una restricción de integridad en P1 y Gj 2 viola r } donde j = i − 1 o i, y CS0 1 (P1, G0 2) = CS1 1 (P1, G0 2) = ∅. Un conjunto de críticas de un agente Ag1 acumula restricciones de integridad que son violadas por propuestas hechas por otro agente Ag2. CSi 2(P2, Gj 1) se define de la misma manera. Definición 3.9. Sean Pk, Hk un programa abductivo de un agente Agk y Gj una propuesta, que no es una crítica, hecha por cualquier agente en la j(≤ i)-ésima ronda. Un conjunto de negociación de Agk (en la ronda i-ésima) es un triple NSi k = (Si c, Si n, Si cn), donde Si c es el conjunto de propuestas condicionales, Si n es el conjunto de propuestas de vecindario, y Si cn es el conjunto de propuestas de vecindario condicionales, producidas por Gj y Pk, Hk. Un conjunto de negociación representa el espacio de posibles propuestas realizadas por un agente. Si x (x ∈ {c, n, cn}) acumula propuestas producidas por Gj (1 ≤ j ≤ i) de acuerdo con las Definiciones 3.3, 3.5 y 3.6. Ten en cuenta que un agente puede elaborar contraofertas modificando sus propias propuestas anteriores o las propuestas de otros agentes. Un agente Agk acumula propuestas que son hechas por Agk pero son rechazadas por otro agente, en el conjunto de propuestas fallidas FP i k (en la i-ésima ronda), donde FP 0 k = ∅. Supongamos que dos agentes Ag1 y Ag2 que tienen programas abductivos P1, H1 y P2, H2, respectivamente. Dado un propuesta G1 que es satisfecha por un conjunto de respuestas de P1, comienza una negociación. En respuesta a la propuesta Gi 1 hecha por Ag1 en la i-ésima ronda, Ag2 se comporta de la siguiente manera. 1. Si Gi 1 = aceptar, se llega a un acuerdo y la negociación termina con éxito. 2. De lo contrario, si Gi 1 = rechazar, poner FP i 2 = FPi−1 2 ∪{Gi−1 2 } donde {G0 2} = ∅. Continúa con el paso 4(b). 3. Si P2 tiene un conjunto de respuestas que satisface Gi 1, Ag2 devuelve Gi 2 = aceptar a Ag1. La negociación termina con éxito. 4. De lo contrario, Ag2 se comporta de la siguiente manera. Coloca FP i 2 = FPi−1 2 . (a) Si Gi 1 viola una restricción de integridad en P2, devuelve la crítica Gi 2 = rechazar a Ag1, junto con el conjunto de críticas CSi 2(P2, Gi 1). (b) De lo contrario, construye NSi 2 de la siguiente manera. (i) Produce Si c. Sea μ(Si c) = { p | p ∈ Si c \ FPi 2 y p cumple con las restricciones en CSi 1(P1, Gi−1 2 )}. Si μ(Si c) = ∅, selecciona uno de μ(Si c) y propónlo como Gi 2 a Ag1; de lo contrario, ve a (ii). (ii) Produce Si n. Si μ(Si n) = ∅, selecciona uno de μ(Si n) y propónlo como Gi 2 a Ag1; de lo contrario, ve a (iii). (iii) Produce Si cn. Si μ(Si cn) = ∅, selecciona uno de μ(Si cn) y propónlo como Gi 2 a Ag1; de lo contrario, la negociación termina en fracaso. Esto significa que Ag2 no puede hacer ninguna contraoferta o que todas las contraofertas hechas por Ag2 son rechazadas por Ag1. En el paso 4(a), Ag2 rechaza la propuesta Gi 1 y devuelve la razón del rechazo como un conjunto de críticas. Esto ayuda para Ag1 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1025 en la preparación de una próxima contraoferta. En el paso 4(b), Ag2 construye una nueva propuesta. En su construcción, Ag2 debe encargarse del conjunto de críticas CSi 1(P1, Gi−1 2), que representa las restricciones de integridad, si las hubiera, acumuladas en rondas anteriores, que Ag1 debe cumplir. Además, FP i 2 se utiliza para eliminar propuestas que han sido rechazadas. La construcción de Si x (x ∈ {c, n, cn}) en NSi 2 se realiza de forma incremental añadiendo nuevas contra-propuestas producidas por Gi 1 o Gi−1 2 a Si−1 x. Por ejemplo, Si n en NSi 2 se calcula como Si n = Si−1 n ∪{ p | p es una propuesta de vecindario hecha por Gi 1 } ∪ { p | p es una propuesta de vecindario hecha por Gi−1 2 }, donde S0 n = ∅. Es decir, Si n se construye a partir de Si−1 n añadiendo nuevas propuestas que se obtienen modificando la propuesta Gi 1 hecha por Ag1 en la i-ésima ronda o modificando la propuesta Gi−1 2 hecha por Ag2 en la (i − 1)-ésima ronda. Si se obtienen c y Si cn también. En el protocolo anterior, un agente produce Si c en primer lugar, luego Si n, y finalmente Si cn. Esta estrategia busca condiciones que satisfagan la propuesta dada, antes que las propuestas vecinas que cambian la original. Otra estrategia, que prefiere propuestas de vecindario a las condicionales, también es considerada. Las propuestas de vecindario condicional deben considerarse en último lugar, ya que difieren del original en la mayor medida posible. El protocolo anterior produce las propuestas de candidatos en Si x para cada x ∈ {c, n, cn} a la vez. Podemos considerar una variante del protocolo en el que cada propuesta en Si x se construye una por una (ver Ejemplo 3.3). El protocolo anterior se aplica repetidamente a cada uno de los dos agentes negociadores hasta que una negociación termine en éxito o fracaso. Formalmente, el protocolo de negociación anterior tiene las siguientes propiedades. Teorema 3.2. Que Ag1 y Ag2 sean dos agentes con programas abductivos P1, H1 y P2, H2, respectivamente. 1. Si P1, H1 y P2, H2 son libres de funciones (es decir, tanto Pi como Hi no contienen ningún símbolo de función), cualquier negociación terminará. 2. Si una negociación termina con un acuerdo sobre una propuesta G, tanto P1, H1 como P2, H2 tienen conjuntos de creencias que satisfacen G. Prueba. 1. Cuando un programa abductivo es libre de funciones, los abducibles y los conjuntos de negociación son finitos. Además, si una propuesta es rechazada una vez, no es propuesta nuevamente por la función μ. Por lo tanto, la negociación terminará en pasos finitos. 2. Cuando se hace una propuesta G por Ag1, P1, H1 tiene un conjunto de creencias que satisface G. Si el agente Ag2 acepta la propuesta G, esta es satisfecha por un conjunto de respuestas de P2 que también es un conjunto de creencias de P2, H2. Ejemplo 3.3. Suponga una situación de compra-venta en la introducción. Un agente vendedor tiene el programa abductivo Ps, Hs en el que Ps consiste en la creencia Bs y el deseo Ds: Bs: pc(b1, 1G, 512M, 80G); pc(b2, 1G, 512M, 80G) ←, (1) dvd-rw; cd-rw ←, (2) Ds: precio normal(1300) ← pc(b1, 1G, 512M, 80G), dvd-rw, (3) precio normal(1200) ← pc(b1, 1G, 512M, 80G), cd-rw, (4) precio normal(1200) ← pc(b2, 1G, 512M, 80G), dvd-rw, (5) precio(x) ← precio normal(x), agregar punto, (6) precio(x ∗ 0.9) ← precio normal(x), pagar en efectivo, no agregar punto, (7) agregar punto ←, (8) Hs: agregar punto, pagar en efectivo. Aquí, (1) y (2) representan la selección de productos. El átomo pc(b1, 1G, 512M, 80G) representa que el agente vendedor tiene una PC de la marca b1 con un CPU de 1GHz, memoria de 512MB y un disco duro de 80GB. Los precios de los productos se representan como el deseo del vendedor. Las reglas (3) - (5) son los precios normales de los productos. Un precio normal es un precio de venta bajo la condición de que se añadan puntos de servicio (6). Por otro lado, se aplica un precio con descuento si el método de pago es en efectivo y no se agrega ningún punto de servicio (7). El hecho (8) representa la suma de puntos de servicio. Este servicio sería retirado en caso de precios con descuento, por lo que se añade el punto especificado como abducible. Un agente comprador tiene el programa abductivo Pb, Hb en el que Pb consiste en la creencia Bb y el deseo Db: Bb: drive ← dvd-rw, (9) drive ← cd-rw, (10) price(x) ←, (11) Db: pc(b1, 1G, 512M, 80G) ←, (12) dvd-rw ←, (13) cd-rw ← no dvd-rw, (14) ← pagar en efectivo, (15) ← price(x), x > 1200, (16) Hb: dvd-rw. Las reglas (12) - (16) son el deseo de los compradores. Entre ellos, (15) y (16) imponen restricciones para comprar una PC. Un DVD-RW está especificado como un abducible que está sujeto a concesión. (1ª ronda) Primero, el agente comprador presenta la siguiente propuesta: G1 b: pc(b1, 1G, 512M, 80G), dvd-rw, precio(x), x ≤ 1200. Como Ps no tiene un conjunto de respuestas que satisfaga G1 b, el agente vendedor no puede aceptar la propuesta. El vendedor toma una acción de hacer una contraoferta y realiza un secuestro. Como resultado, el vendedor encuentra la explicación mínima (E, F) = ({pagar en efectivo}, {agregar puntos}) que explica G1 b θ1 con θ1 = {x/1170}. El vendedor construye la propuesta condicional: G1 s: pc(b1, 1G, 512M, 80G), dvd-rw, precio(1170), pagar en efectivo, no sumar puntos y la ofrece al comprador. (2da ronda) El comprador no acepta G1 s porque no puede pagarlo en efectivo (15). El comprador luego devuelve la crítica G2 b = rechazar al vendedor, junto con el conjunto de críticas CS2 b (Pb, G1 s) = {(15)}. En respuesta a esto, el vendedor intenta hacer otra propuesta que satisfaga la restricción en este conjunto de críticas. Como G1 s está almacenado en FP 2 s y no existe ninguna otra propuesta condicional que satisfaga los requisitos del comprador, el vendedor produce propuestas de vecindario. Él/ella relaja G1 b al dejar x ≤ 1200 en la condición, y produce pc(b1, 1G, 512M, 80G), dvd-rw, precio(x). Como Ps tiene un conjunto de respuestas que satisface G2 s: pc(b1, 1G, 512M, 80G), dvd-rw, price(1300), 1026 The Sixth Intl. En la Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07), el vendedor ofrece G2 s como una nueva contraoferta. (3ra ronda) El comprador no acepta G2 s porque no puede pagar más de 1200 USD (16). El comprador vuelve a devolver la crítica G3 b = rechazar al vendedor, junto con el conjunto de críticas CS3 b (Pb, G2 s) = CS2 b (Pb, G1 s) ∪ {(16)}. El vendedor luego considera otra propuesta al reemplazar b1 con una variable w, 1G b ahora se convierte en pc(w, 1G, 512M, 80G), dvd-rw, precio(x), x ≤ 1200. Como Ps tiene un conjunto de respuestas que satisface G3 s: pc(b2, 1G, 512M, 80G), dvd-rw, price(1200), el vendedor ofrece G3 s como una nueva contraoferta. (4ta ronda) El comprador no acepta G3 s porque una PC de la marca b2 no está en su interés y Pb no tiene un conjunto de respuestas que satisfaga G3 s. Entonces, el comprador hace una concesión cambiando su objetivo original. El comprador relaja G1 b mediante la sustitución de objetivos utilizando la regla (9) en Pb, y produce pc(b1, 1G, 512M, 80G), drive, price(x), x ≤ 1200. Usando (10), se produce la siguiente propuesta: pc(b1, 1G, 512M, 80G), cd-rw, precio(x), x ≤ 1200. Dado que Pb \ {dvd-rw} tiene un conjunto de respuestas coherente que satisface la propuesta anterior, el comprador propone la propuesta de vecindario condicional G4 b: pc(b1, 1G, 512M, 80G), cd-rw, no dvd-rw, precio(x), x ≤ 1200 al agente vendedor. Dado que Ps también tiene un conjunto de respuestas que satisface G4 b, el vendedor lo acepta y envía el mensaje G4 s = aceptar al comprador. Por lo tanto, la negociación termina con éxito. 4. CÁLCULO En esta sección, proporcionamos métodos para calcular propuestas en términos de conjuntos de respuestas de programas. Primero introducimos algunas definiciones de [15]. Definición 4.1. Dado un programa abductivo P, H, el conjunto UR de reglas de actualización se define como: UR = { L ← not L, L ← not L | L ∈ H } ∪ { +L ← L | L ∈ H \ P } ∪ { −L ← not L | L ∈ H ∩ P }, donde L, +L y −L son nuevos átomos asociados de manera única con cada L ∈ H. Los átomos +L y −L se llaman átomos de actualización. Por definición, el átomo L se vuelve verdadero si y solo si L no es verdadero. El par de reglas L ← no L y L ← no L especifican la situación en la que un abducible L es verdadero o no. Cuando p(x) ∈ H y p(a) ∈ P pero p(t) ∈ P para t = a, la regla +L ← L se convierte precisamente en +p(t) ← p(t) para cualquier t = a. En este caso, la regla se escribe brevemente como +p(x) ← p(x), x = a. Generalmente, la regla se convierte en +p(x) ← p(x), x = t1, . . . , x = tn para n tales instancias. La regla +L ← L deriva el átomo +L si un abducible L que no está en P debe ser verdadero. Por el contrario, la regla −L ← not L deriva el átomo −L si un abducible L que está en P no debe ser verdadero. Por lo tanto, los átomos de actualización representan el cambio de los valores de verdad de los abducibles en un programa. Es decir, +L significa la introducción de L, mientras que −L significa la eliminación de L. Cuando un abducible L contiene variables, se supone que el átomo de actualización asociado +L o −L debe tener exactamente las mismas variables. En este caso, un átomo de actualización se identifica semánticamente con sus instancias fundamentales. El conjunto de todos los átomos de actualización asociados con los abducibles en H se denota por UH, y UH = UH+ ∪ UH− donde UH+ (resp. UH− ) es el conjunto de átomos de actualización de la forma +L (resp. −L). Definición 4.2. Dado un programa abductivo P, H, su programa de actualización UP se define como el programa UP = (P \ H) ∪ UR. Un conjunto de respuestas S de UP se llama U-minimal si no hay ningún conjunto de respuestas T de UP tal que T ∩ UH ⊂ S ∩ UH. Según la definición, los conjuntos de respuestas U-minimales existen siempre que UP tenga conjuntos de respuestas. Los programas de actualización se utilizan para calcular explicaciones (mínimas) de una observación. Dada una observación G como una conjunción de literales y NAF-literals posiblemente conteniendo variables, introducimos un nuevo literal en tierra O junto con la regla O ← G. En este caso, O tiene una explicación (E, F) si y solo si G tiene la misma explicación. Con esta sustitución, se asume que una observación es un literal de base sin pérdida de generalidad. En lo que sigue, E+ = { +L | L ∈ E } y F- = { -L | L ∈ F } para E ⊆ H y F ⊆ H. Proposición 4.1. ([15]) Sean P, H un programa abductivo, UP su programa de actualización, y G un literal concreto que representa una observación. Entonces, un par (E, F) es una explicación de G si y solo si UP ∪ { ← no G } tiene un conjunto de respuestas coherente S tal que E+ = S ∩ UH+ y F− = S ∩ UH−. En particular, (E, F) es una explicación mínima si y solo si S es un conjunto de respuestas U-mínimo. Ejemplo 4.1. Para explicar la observación G = flies(t) en el programa P del Ejemplo 2.1, primero construya el programa de actualización UP de P:3 UP : flies(x) ← bird(x), not ab(x), ab(x) ← broken-wing(x) , bird(t) ← , bird(o) ← , broken-wing(x) ← not broken-wing(x), broken-wing(x) ← not broken-wing(x), +broken-wing(x) ← broken-wing(x), x = t , −broken-wing(t) ← not broken-wing(t) . A continuación, considera el programa UP ∪ { ← no vuela(t) }. Tiene el único conjunto de respuestas U-minimal: S = { pájaro(t), pájaro(o), vuela(t), vuela(o), ala-rota(t), ala-rota(o), -ala-rota(t) }. La explicación mínima única (E, F) = (∅, {broken-wing(t)}) de G se expresa mediante el átomo de actualización −broken-wing(t) en S ∩ UH−. Proposición 4.2. Sean P, H un programa abductivo y G un literal concreto representando una observación. Si P ∪ { ← not G } tiene un conjunto de respuestas coherente S, G tiene la explicación mínima (E, F) = (∅, ∅) y S satisface G. Ahora proporcionamos métodos para calcular (contra-)propuestas. Primero, las propuestas condicionales se calculan de la siguiente manera. entrada: un programa abductivo P, H, una propuesta G; salida: un conjunto Sc de propuestas. Si G es un literal de base, calcula su explicación mínima (E, F) en P, H utilizando el programa de actualización. Coloca G, E, no F en Sc. Si G es una conjunción posiblemente conteniendo variables, considera el programa abductivo 3 t representa a Tweety y o representa a Opus. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1027 P ∪{ O ← G }, H con un literal concreto O. Calcular una explicación mínima de O en P ∪ { O ← G }, H utilizando su programa de actualización. Si O tiene una explicación mínima (E, F) con una sustitución θ para variables en G, coloque Gθ, E, no F en Sc. A continuación, las propuestas de vecindario se calculan de la siguiente manera. entrada: un programa abductivo P, H, una propuesta G; salida: un conjunto Sn de propuestas. % propuestas de vecindario por anti-instantiación; Construir G por anti-instantiación. Para un literal de base O, si P ∪ { O ← G } ∪ { ← not O } tiene un conjunto de respuestas consistente que satisface G θ con una sustitución θ y G θ = G, coloque G θ en Sn. % propuestas de vecindario eliminando condiciones; Construya G eliminando condiciones. Si G es un literal de base y el programa P ∪ { ← not G } tiene un conjunto de respuestas consistente, coloque G en Sn. Si G es una conjunción que posiblemente contiene variables, haz lo siguiente. Para un literal de base O, si P ∪{ O ← G }∪{ ← not O } tiene un conjunto de respuestas consistente que satisface G θ con una sustitución θ, coloque G θ en Sn. % propuestas de vecindario por reemplazo de objetivo; Construya G por reemplazo de objetivo. Si G es un literal de base y hay una regla H ← B en P tal que G = Hσ y Bσ = G para alguna sustitución σ, entonces se tiene que G = Bσ. Si P ∪ { ← not G } tiene un conjunto de respuestas coherente que satisface G θ con una sustitución θ, coloca G θ en Sn. Si G es una conjunción posiblemente conteniendo variables, haz lo siguiente. Para un literal reemplazado L ∈ G, si hay una regla H ← B en P tal que L = Hσ y (G \ {L}) ∪ Bσ = G para alguna sustitución σ, entonces se coloca G = (G \ {L}) ∪ Bσ. Para un literal de base O, si P ∪ { O ← G } ∪ { ← not O } tiene un conjunto de respuestas consistente que satisface G θ con una sustitución θ, coloque G θ en Sn. Teorema 4.3. El conjunto Sc (resp. La Sn) calculada arriba coincide con el conjunto de propuestas condicionales (respectivamente, propuestas de vecindario). Prueba. El resultado para Sc se sigue de la Definición 3.3 y la Proposición 4.1. El resultado para Sn se sigue de la Definición 3.5 y la Proposición 4.2. Las propuestas de vecindario condicionales se calculan combinando los dos procedimientos anteriores. Esas propuestas se calculan en cada ronda. Ten en cuenta que el procedimiento para calcular Sn contiene algunas elecciones no determinísticas. Por ejemplo, generalmente hay varios candidatos de literales para relajar en una propuesta. Además, puede haber varias reglas en un programa para el uso de la sustitución de objetivos. En la práctica, un agente puede preespecificar literales en una propuesta para posibles relajaciones o reglas en un programa para el uso de la sustitución de metas. 5. TRABAJOS RELACIONADOS Dado que existe una cantidad considerable de literatura sobre negociación automatizada, esta sección se centra en la comparación con marcos de negociación basados en lógica y argumentación. Sadri et al. [14] utilizan la programación lógica abductiva como lenguaje de representación de agentes negociadores. Los agentes negocian utilizando primitivas de diálogo comunes, llamadas movimientos de diálogo. Cada agente tiene un programa lógico abductivo en el que una secuencia de diálogos está especificada por un programa, un protocolo de diálogo está especificado como restricciones, y los movimientos de diálogo están especificados como abducibles. El comportamiento de los agentes está regulado por un ciclo de observar-pensar-actuar. Una vez que un agente emite un movimiento de diálogo, otro agente que observó la emisión piensa y actúa utilizando un procedimiento de prueba. Su enfoque y el nuestro emplean ambos la programación lógica abductiva como plataforma de razonamiento de agentes, pero su uso es bastante diferente. Primero, ellos utilizan abducibles para especificar primitivas de diálogo de la forma decir(emisor, receptor, sujeto, identificador, tiempo), mientras que nosotros utilizamos abducibles para especificar hipótesis arbitrarias permitidas para construir propuestas condicionales. Segundo, un programa preespecifica un plan a llevar a cabo para lograr un objetivo, junto con los recursos disponibles/faltantes en el contexto de problemas de intercambio de recursos. Esto contrasta con nuestro método en el cual posibles contra-propuestas son construidas nuevamente en respuesta a una propuesta hecha por un agente. Tercero, ellos especifican una política de negociación dentro de un programa (como restricciones de integridad), mientras que nosotros proporcionamos un protocolo independiente de agentes individuales. Proporcionan un modelo operativo que especifica completamente el comportamiento de los agentes en términos del ciclo del agente. No proporcionamos una especificación tan completa del comportamiento de los agentes. Nuestro interés principal es mecanizar la construcción de propuestas. Bracciali y Torroni [2] formulan agentes abductivos que poseen conocimiento en programas lógicos abductivos. Para explicar una observación, dos agentes se comunican intercambiando restricciones de integridad. En el proceso de comunicación, un agente puede revisar sus propias restricciones de integridad de acuerdo con la información proporcionada por el otro agente. Un conjunto IC de restricciones de integridad relaja un conjunto IC (o IC aprieta IC) si cualquier observación que pueda ser demostrada con respecto a IC también puede ser demostrada con respecto a IC. Por ejemplo, IC : ← a, b, c relaja IC : ← a, b. Por lo tanto, utilizan la relajación para debilitar las restricciones en un programa lógico abductivo. Por el contrario, utilizamos la relajación para debilitar propuestas y se consideran tres métodos diferentes de relajación: la anti-instantiación, la eliminación de condiciones y la sustitución de objetivos. Su objetivo es explicar una observación revisando las restricciones de integridad de un agente a través de la comunicación, mientras que nosotros utilizamos restricciones de integridad para comunicarnos y explicar críticas, ayudando a otros agentes a hacer contra-propuestas. Meyer et al. [11] presentan un marco lógico para agentes negociadores. Introducen dos modos diferentes de negociación: concesión y adaptación. Proporcionan postulados racionales para caracterizar los resultados negociados entre dos agentes, y describen métodos para construir los resultados. Proporcionan condiciones lógicas para que se cumplan los resultados negociados, pero no describen un proceso de negociación ni protocolos de negociación. Además, representan agentes mediante teorías proposicionales clásicas, lo cual es diferente de nuestro marco de programación lógica abductiva. Foo et al. [5] modelan la negociación uno a uno como un encuentro único entre dos programas lógicos extendidos. Un agente ofrece un conjunto de respuestas de su programa, y su acuerdo mutuo se considera como un intercambio en sus conjuntos de respuestas. Partiendo del conjunto de acuerdos inicial S∩T para un conjunto de respuestas S de un agente y un conjunto de respuestas T de otro agente, cada agente extiende este conjunto para reflejar su propia demanda manteniendo consistencia con la demanda del otro agente. Su algoritmo devuelve nuevos programas con conjuntos de respuestas que son consistentes entre sí y mantienen el conjunto de acuerdos. El trabajo se extiende a encuentros repetidos en [3]. En su marco de trabajo, dos agentes intercambian conjuntos de respuestas para producir un conjunto de creencias común, lo cual es diferente de nuestro marco de trabajo de intercambiar propuestas. Hay una serie de propuestas para negociación basadas en 1028 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) sobre argumentación. Una ventaja de la negociación basada en argumentos es que construye una propuesta con argumentos que respaldan la propuesta [1]. La existencia de argumentos es útil para convencer a otros agentes de las razones por las cuales un agente ofrece (contra)propuestas o devuelve críticas. Parsons et al. [13] desarrollan una lógica de negociación basada en argumentación entre agentes BDI. En una negociación uno a uno, un agente A genera una propuesta junto con sus argumentos y se la pasa a otro agente B. La propuesta es evaluada por B, quien intenta construir argumentos en su contra. Si entra en conflicto con el interés de B, B informa a A de su objeción enviando de vuelta su argumento de ataque. En respuesta a esto, A intenta encontrar una forma alternativa de lograr su objetivo original, o una forma de persuadir a B para que retire su objeción. Si se encuentra alguno de los dos tipos de argumento, A lo presentará a B. Si B no encuentra ninguna razón para rechazar la nueva propuesta, será aceptada y la negociación terminará con éxito. De lo contrario, el proceso se repite. En este proceso de negociación, el agente A nunca cambia su objetivo original, por lo que la negociación termina en fracaso si A no logra encontrar una forma alternativa de alcanzar el objetivo original. En nuestro marco de trabajo, cuando una propuesta es rechazada por otro agente, un agente puede debilitar o cambiar su objetivo mediante abducción y relajación. Nuestro marco no tiene un mecanismo de argumentación, pero las razones de las críticas pueden ser informadas por conjuntos de críticas de respuesta. Kakas y Moraitis proponen un protocolo de negociación que integra la abducción dentro de un marco de argumentación. Una propuesta contiene una oferta correspondiente al objeto de negociación, junto con información de respaldo que representa las condiciones bajo las cuales se realiza esta oferta. La información de apoyo se calcula por abducción y se utiliza para construir argumentos condicionales durante el proceso de negociación. En su protocolo de negociación, cuando un agente no puede satisfacer su propio objetivo, el agente considera el objetivo de los otros agentes y busca condiciones bajo las cuales el objetivo sea aceptable. Nuestro enfoque actual difiere del de ellos en los siguientes puntos. Primero, ellos utilizan la abducción para buscar condiciones que respalden argumentos, mientras que nosotros utilizamos la abducción para buscar condiciones para propuestas que aceptar. En segundo lugar, en su protocolo de negociación, las contraofertas se eligen entre candidatos basados en el conocimiento de preferencias de un agente a nivel meta, que representa la política bajo la cual un agente utiliza sus reglas de decisión a nivel de objeto de acuerdo a las situaciones. En nuestro marco de trabajo, las contra-propuestas son construidas de nuevo utilizando la abducción y la relajación. El método de construcción es independiente de protocolos de negociación particulares. Como [2, 10, 14], la abducción o programación lógica abductiva utilizada en la negociación se basa principalmente en la abducción normal. Por el contrario, nuestro enfoque se basa en la abducción extendida que no solo puede introducir hipótesis, sino también eliminarlas de un programa. Esta es otra diferencia importante. La relajación y la respuesta a consultas de vecindario están diseñadas para hacer que las bases de datos sean cooperativas con sus usuarios [4, 6]. En este sentido, esas técnicas tienen un espíritu similar a la resolución cooperativa de problemas en sistemas multiagente. Hasta donde los autores saben, sin embargo, no hay ningún estudio que aplique esas técnicas a la negociación entre agentes. 6. CONCLUSIÓN En este documento propusimos un marco lógico para agentes negociadores. Para construir propuestas en el proceso de negociación, combinamos las técnicas de abducción extendida y relajación. Se demostró que estas dos operaciones se utilizan para reglas de inferencia generales en la elaboración de propuestas. Desarrollamos un protocolo de negociación entre dos agentes basado en el intercambio de propuestas y críticas, y proporcionamos procedimientos para calcular propuestas en programación lógica abductiva. Esto nos permite realizar negociaciones automatizadas sobre los solucionadores de conjuntos de respuestas existentes. El marco actual no tiene un mecanismo para seleccionar una propuesta óptima (contraria) entre diferentes alternativas. Para comparar y evaluar propuestas, un agente debe tener conocimiento de preferencias sobre las propuestas candidatas. La elaboración adicional para maximizar la utilidad de los agentes queda pendiente para estudios futuros. REFERENCIAS [1] L. Amgoud, S. Parsons y N. Maudet. Argumentos, diálogo y negociación. En: Proc. ECAI-00, pp. 338-342, IOS Press, 2000. [2] A. Bracciali y P. Torroni. Un nuevo marco para la revisión del conocimiento de agentes abductivos a través de su interacción. En: Proc. CLIMA-IV, Lógica Computacional en Sistemas Multiagente, LNAI 3259, pp. 159-177, 2004. [3] W. Chen, M. Zhang y N. Foo. Negociación repetida de programas lógicos. En: Actas del 7º Taller sobre Razonamiento No Monótono, Acción y Cambio, 2006. [4] W. W. Chu, Q. Chen y R.-C. Lee. Respuesta cooperativa a consultas a través de una jerarquía de abstracción de tipos. En: Sistemas basados en el conocimiento cooperativo, editado por S. M. Deen, pp. 271-290, Springer, 1990. [5] N. Foo, T. Meyer, Y. Zhang y D. Zhang. Negociando programas lógicos. En: Actas del 6º Taller sobre Razonamiento No Monótono, Acción y Cambio, 2005. [6] T. Gaasterland, P. Godfrey y J. Minker. Relajación como plataforma para responder de manera cooperativa. Revista de Sistemas de Información de Inteligencia 1(3/4):293-321, 1992. [7] M. Gelfond y V. Lifschitz. Negación clásica en programas lógicos y bases de datos disyuntivas. Computación de Nueva Generación 9:365-385, 1991. [8] K. Inoue y C. Sakama. Marco abductivo para el cambio de teoría no monótona. En: Proc. IJCAI-95, pp. 204-210, Morgan Kaufmann. [9] A. C. Kakas, R. A. Kowalski, y F. Toni, El papel de la abducción en la programación lógica. En: Manual de Lógica en Inteligencia Artificial y Programación Lógica, D. M. Gabbay, et al. (eds), vol. 5, pp. 235-324, Oxford University Press, 1998. [10] A. C. Kakas y P. Moraitis. Negociación de agentes adaptativos a través de argumentación. En: Proc. AAMAS-06, pp. 384-391, ACM Press. [11] T. Meyer, N. Foo, R. Kwok, y D. Zhang. Fundamento lógico de la negociación: resultado, concesión y adaptación. En: Proc. AAAI-04, pp. 293-298, MIT Press. [12] R. S. Michalski. 

AAAI-04, pp. 293-298, MIT Press. [12] R. S. Michalski. Una teoría y metodología de aprendizaje inductivo. En: Machine Learning: An Artificial Intelligence Approach, R. S. Michalski, et al. (eds), pp. 83-134, Morgan Kaufmann, 1983. [13] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian mediante argumentos. Revista de Lógica y Computación, 8(3):261-292, 1988. [14] F. Sadri, F. Toni y P. Torroni, Una arquitectura de programación lógica abductiva para agentes negociadores. En: Actas de la 8ª Conferencia Europea sobre Lógica en Inteligencia Artificial, LNAI 2424, pp. 419-431, Springer, 2002. [15] C. Sakama y K. Inoue. Un marco abductivo para calcular actualizaciones de la base de conocimientos. Teoría y Práctica de la Programación Lógica 3(6):671-715, 2003. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 1029