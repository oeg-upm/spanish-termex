Estimando el PageRank Global de Comunidades Web Jason V. Davis Dept. Departamento de Ciencias de la Computación Universidad de Texas en Austin Austin, TX 78712 jdavis@cs.utexas.edu Inderjit S. Dhillon Departamento de Ciencias de la Computación Universidad de Texas en Austin Austin, TX 78712 inderjit@cs.utexas.edu RESUMEN Los motores de búsqueda localizados son sistemas a pequeña escala que indexan una comunidad particular en la web. Ofrecen varios beneficios en comparación con sus contrapartes a gran escala, ya que son relativamente económicos de construir y pueden proporcionar una capacidad de búsqueda más precisa y completa en sus dominios relevantes. Una desventaja que tienen estos sistemas en comparación con los motores de búsqueda a gran escala es la falta de valores globales de PageRank. Se necesita esa información para evaluar el valor de las páginas en el dominio de búsqueda localizada dentro del contexto de la web en su totalidad. En este artículo, presentamos algoritmos bien fundamentados para estimar los valores globales de PageRank de un dominio local. Los algoritmos son altamente escalables en el sentido de que, dado un dominio local de tamaño n, utilizan recursos de O(n) que incluyen tiempo de computación, ancho de banda y almacenamiento. Probamos nuestros métodos en una variedad de dominios localizados, incluyendo dominios específicos del sitio y dominios específicos del tema. Demostramos que al rastrear tan solo n o 2n páginas adicionales, nuestros métodos pueden proporcionar excelentes estimaciones globales de PageRank. Categorías y Descriptores de Asignaturas H.3.3 [Almacenamiento y Recuperación de Información]: Búsqueda y Recuperación de Información; G.1.3 [Análisis Numérico]: Álgebra Lineal Numérica; G.3 [Probabilidad y Estadística]: Procesos de Markov Términos Generales PageRank, Cadena de Markov, Complementación Estocástica. Los motores de búsqueda localizados son motores de búsqueda a pequeña escala que indexan solo una comunidad específica de la web. Tales comunidades pueden ser dominios específicos del sitio, como páginas dentro del dominio cs.utexas.edu, o comunidades relacionadas con un tema, por ejemplo, sitios web políticos. En comparación con el grafo web rastreado e indexado por los motores de búsqueda a gran escala, el tamaño de estas comunidades locales suele ser típicamente órdenes de magnitud más pequeño. Por consiguiente, los recursos computacionales necesarios para construir un motor de búsqueda de este tipo también son igualmente más ligeros. Al restringirse a secciones más pequeñas y manejables de la web, los motores de búsqueda localizados también pueden ofrecer capacidades de búsqueda más precisas y completas dentro de sus respectivos dominios. Una desventaja de los índices localizados es la falta de información global necesaria para calcular clasificaciones basadas en enlaces. El algoritmo PageRank [3] ha demostrado ser una medida efectiva de este tipo. En general, el PageRank de una página dada depende de las páginas en todo el grafo web. En el contexto de un motor de búsqueda localizado, si los PageRanks se calculan utilizando solo el subgrafo local, entonces esperaríamos que los PageRanks resultantes reflejen la popularidad percibida dentro de la comunidad local y no de la web en su totalidad. Por ejemplo, consideremos un motor de búsqueda localizado que indexa páginas políticas con puntos de vista conservadores. Una persona que desee investigar las opiniones sobre el calentamiento global dentro de la comunidad política conservadora puede encontrarse con numerosas opiniones de este tipo en varios sitios web. Si solo se dispone de valores de PageRank locales, entonces los resultados de búsqueda reflejarán solo creencias fuertemente arraigadas dentro de la comunidad. Sin embargo, si los PageRanks globales también están disponibles, entonces los resultados pueden reflejar adicionalmente las opiniones de los externos sobre la comunidad conservadora (es decir, aquellos documentos a los que los liberales acceden con mayor frecuencia dentro de la comunidad conservadora). Por lo tanto, para muchos motores de búsqueda localizados, la incorporación de PageRanks globales puede mejorar la calidad de los resultados de búsqueda. Sin embargo, el número de páginas que indexa un motor de búsqueda local suele ser órdenes de magnitud más pequeño que el número de páginas indexadas por sus contrapartes a gran escala. Los motores de búsqueda localizados no tienen el ancho de banda, la capacidad de almacenamiento o la potencia computacional para rastrear, descargar y calcular los PageRanks globales de toda la web. En este trabajo, presentamos un método para aproximar los PageRanks globales de un dominio local utilizando recursos del mismo orden que los necesarios para calcular los PageRanks del subgrafo local. Nuestro método propuesto busca un supergrafo de nuestro subgrafo local de manera que los PageRanks locales dentro de este supergrafo estén cerca de los verdaderos PageRanks globales. Construimos este supergrafo mediante el rastreo iterativo de páginas globales en la frontera web actual, es decir, páginas globales con enlaces entrantes de páginas que ya han sido rastreadas. Para proporcionar a 116 Research Track Paper una buena aproximación a los PageRanks globales, es necesario tener cuidado al elegir qué páginas rastrear a continuación; en este documento, presentamos un algoritmo de selección de páginas bien fundamentado que también tiene un buen rendimiento empírico. Este algoritmo se deriva de un objetivo de problema bien definido y tiene un tiempo de ejecución lineal en el número de nodos locales. Experimentamos en varios tipos de subgrafos locales, incluidas cuatro comunidades relacionadas con el tema y varios dominios específicos del sitio. Para evaluar el rendimiento, medimos la diferencia entre la estimación actual del PageRank global y el PageRank global, en función del número de páginas rastreadas. Comparamos nuestro algoritmo con varios heurísticos y también con un algoritmo base que elige páginas al azar, y demostramos que nuestro método supera a estos otros métodos. Finalmente, demostramos empíricamente que, dado un dominio local de tamaño n, podemos proporcionar buenas aproximaciones a los valores globales de PageRank rastreando como máximo n o 2n páginas adicionales. El documento está organizado de la siguiente manera. La sección 2 ofrece una visión general de los motores de búsqueda localizados y destaca sus ventajas sobre los motores de búsqueda globales. La sección 3 proporciona antecedentes sobre el algoritmo PageRank. La sección 4 define formalmente nuestro problema, y la sección 5 presenta nuestros criterios de selección de páginas y deriva nuestros algoritmos. La sección 6 presenta los resultados experimentales, la sección 7 ofrece una visión general del trabajo relacionado y, finalmente, las conclusiones se presentan en la sección 8. MOTORES DE BÚSQUEDA LOCALIZADOS Los motores de búsqueda localizados indexan una sola comunidad de la web, típicamente una comunidad específica del sitio o una comunidad específica del tema. Los motores de búsqueda localizados disfrutan de tres ventajas principales sobre sus contrapartes a gran escala: son relativamente económicos de construir, pueden ofrecer una capacidad de búsqueda más precisa dentro de su dominio local y pueden proporcionar un índice más completo. Los recursos necesarios para construir un motor de búsqueda global son enormes. Un estudio de 2003 realizado por Lyman et al. [13] encontró que la web superficial (sitios estáticos de acceso público) consta de 8.9 mil millones de páginas, y que el tamaño promedio de estas páginas es de aproximadamente 18.7 kilobytes. Para descargar un rastreo de este tamaño, se necesita aproximadamente 167 terabytes de espacio. Para un investigador que desee construir un motor de búsqueda con acceso a un par de estaciones de trabajo o un servidor pequeño, un almacenamiento de esta magnitud simplemente no está disponible. Sin embargo, construir un motor de búsqueda localizado sobre una comunidad web de cien mil páginas solo requeriría unos pocos gigabytes de almacenamiento. La carga computacional necesaria para soportar consultas de búsqueda sobre una base de datos de este tamaño es más manejable también. Observamos que, para los motores de búsqueda específicos de un tema, la comunidad relevante puede ser identificada y descargada de manera eficiente utilizando un rastreador enfocado [21, 4]. Para dominios específicos del sitio, el dominio local está fácilmente disponible en su propio servidor web. Esto evita la necesidad de rastreo o indexación, y por lo tanto se puede garantizar un índice completo y actualizado del dominio. Esto contrasta con sus contrapartes a gran escala, las cuales sufren de varias deficiencias. Primero, el rastreo de páginas generadas dinámicamente en la web oculta ha sido objeto de investigación [20] y es una tarea no trivial para un rastreador externo. En segundo lugar, los dominios específicos del sitio pueden habilitar la política de exclusión de robots. Esto prohíbe a los rastreadores de motores de búsqueda externos descargar contenido del dominio, y en su lugar un motor de búsqueda externo debe depender de enlaces externos y texto ancla para indexar estas páginas restringidas. Al restringirse a un dominio específico de internet, un motor de búsqueda localizado puede proporcionar resultados de búsqueda más precisos. Considera la consulta de búsqueda ambigua canónica, jaguar, que puede referirse tanto al fabricante de automóviles como al animal. Un científico que intenta investigar el hábitat y la historia evolutiva de un jaguar puede tener más éxito utilizando un motor de búsqueda específico de zoología bien ajustado que consultando Google con múltiples búsquedas de palabras clave y navegando a través de resultados irrelevantes. Recientemente se propuso un método para aprender funciones de clasificación mejores para la recuperación por Radlinski y Joachims [19] y se ha aplicado a varios dominios locales, incluido el sitio web de la Universidad de Cornell [8]. 3. PAGERANK RESUMEN El algoritmo PageRank define la importancia de las páginas web analizando la estructura de hipervínculos subyacente de un grafo web. El algoritmo funciona construyendo una cadena de Markov a partir de la estructura de enlaces del grafo web y calculando su distribución estacionaria. Una forma de calcular la distribución estacionaria de una cadena de Markov es encontrar la distribución límite de un paseo aleatorio sobre la cadena. Por lo tanto, el algoritmo PageRank utiliza lo que a veces se conoce como el modelo del surfista aleatorio. En cada paso de la caminata aleatoria, el surfista sigue un enlace de salida de la página actual (es decir, el nodo actual en la cadena), o salta a una página aleatoria en la web. Ahora definimos con precisión el problema de PageRank. Sea U una matriz de adyacencia m × m para un grafo web dado tal que Uji = 1 si la página i enlaza a la página j y Uji = 0 en caso contrario. Definimos la matriz de PageRank PU como: PU = αUD−1 U + (1 − α)veT , (1) donde DU es la matriz diagonal (única) tal que UD−1 U es estocástica por columnas, α es un escalar dado tal que 0 ≤ α ≤ 1, e es el vector de todos unos, y v es un vector no negativo, L1-normalizado, a veces llamado vector de navegante aleatorio. Ten en cuenta que la matriz D−1 U está bien definida solo si cada columna de U tiene al menos una entrada distinta de cero, es decir, cada página en el grafo web tiene al menos un enlace de salida. En presencia de nodos colgantes que no tienen enlaces de salida, una solución comúnmente utilizada, propuesta por Brin et al. [3], es reemplazar cada columna de ceros de U por un vector no negativo, normalizado en L1. El vector PageRank r es el eigenvector dominante de la matriz PageRank, r = PU r. Supondremos, sin pérdida de generalidad, que r tiene una norma L1 de uno. Computacionalmente, r se puede calcular utilizando el método de la potencia. Este método primero elige un vector inicial aleatorio r(0) y, de forma iterativa, multiplica el vector actual por la matriz de PageRank PU; ver Algoritmo 1. En general, cada iteración del método de la potencia puede requerir O(m2) operaciones cuando PU es una matriz densa. Sin embargo, en la práctica, el número de enlaces en un grafo web será del orden del número de páginas. Al explotar la dispersión de la matriz de PageRank, el trabajo por iteración se puede reducir a O(km), donde k es el número promedio de enlaces por página web. También se ha demostrado que el número total de iteraciones necesarias para la convergencia es proporcional a α y no depende del tamaño del grafo web [11, 7]. Finalmente, el espacio total necesario también es O(km), principalmente para almacenar la matriz U. 117 Research Track Paper Algorithm 1: Un algoritmo de tiempo lineal (por iteración) para calcular PageRank. CalcularPR(U) Entrada: U: Matriz de adyacencia. Salida: vector de PageRank. Elige (aleatoriamente) un vector inicial no negativo r(0) tal que r(0) 1 = 1. i ← 0 repetir i ← i + 1 ν ← αUD−1 U r(i−1) {α es la probabilidad de navegación aleatoria} r(i) ← ν + (1 − α)v {v es el vector del navegante aleatorio.} hasta que r(i) − r(i−1) < δ {δ es el umbral de convergencia.} r ← r(i) 4. Dada un dominio local L, sea G una matriz de adyacencia N × N para el componente conectado completo de la web que contiene L, tal que Gji = 1 si la página i enlaza a la página j y Gji = 0 en caso contrario. Sin pérdida de generalidad, vamos a dividir G de la siguiente manera: G = L Gout Lout Gwithin, donde L es el subgrafo local de n × n correspondiente a los enlaces dentro del dominio local, Lout es el subgrafo que corresponde a los enlaces desde el dominio local apuntando hacia el dominio global, Gout es el subgrafo que contiene los enlaces desde el dominio global hacia el dominio local, y Gwithin contiene los enlaces dentro del dominio global. Suponemos que al construir un motor de búsqueda localizado, solo se rastrean las páginas dentro del dominio local, y los enlaces entre estas páginas están representados por el subgrafo L. También se conocen los enlaces en Lout, ya que estos apuntan desde las páginas rastreadas en el dominio local a las páginas no rastreadas en el dominio global. Como se define en la ecuación (1), PG es la matriz de PageRank formada a partir del grafo global G, y definimos el vector de PageRank global de este grafo como g. Sea el vector de longitud n p∗ el vector L1-normalizado que corresponde al PageRank global de las páginas en el dominio local L: p∗ = EL g ELg 1 , donde EL = [ I | 0 ] es la matriz de restricción que selecciona los componentes de g correspondientes a los nodos en L. Sea p el vector de PageRank construido a partir del subgrafo del dominio local L. En la práctica, el PageRank local observado p y el PageRank global p∗ serán bastante diferentes. Se esperaría que a medida que el tamaño de la matriz local L se acerque al tamaño de la matriz global G, el PageRank global y el PageRank local observado se vuelvan más similares. Por lo tanto, un enfoque para estimar el PageRank global es rastrear todo el dominio global, calcular su PageRank y extraer los PageRanks del dominio local. Por lo general, sin embargo, n N, es decir, el número de páginas globales es mucho mayor que el número de páginas locales. Por lo tanto, rastrear todas las páginas globales agotará rápidamente todos los recursos locales (computacionales, de almacenamiento y de ancho de banda) disponibles para crear el motor de búsqueda local. En cambio, buscamos un supergrafo ˆF de nuestro subgrafo local L con tamaño O(n). Nuestro objetivo es el Algoritmo 2: El algoritmo FindGlobalPR. EncuentraGlobalPR(L, Lout, T, k) Entrada: L: matriz de adyacencia de ceros y unos para el dominio local, Lout: matriz de enlaces de ceros y unos desde L al subgrafo global como en (2), T: número de iteraciones, k: número de páginas a rastrear por iteración. Salida: ˆp: una estimación mejorada del PageRank global de L. F ← L Fout ← Lout f ← CalcularPR(F) para (i = 1 a T) {Determinar qué páginas rastrear a continuación} páginas ← SeleccionarNodos(F, Fout, f, k) Rastrear páginas, aumentar F y modificar Fout {Actualizar PageRanks para el nuevo dominio local} f ← CalcularPR(F) fin {Extraer PageRanks del dominio local original y normalizar} ˆp ← ELf ELf 1 es encontrar un supergrafo ˆF con PageRank ˆf, de modo que ˆf cuando se restringe a L esté cerca de p∗. Formalmente, buscamos minimizar GlobalDiff( ˆf) = EL ˆf EL ˆf 1 − p∗ 1 . (3) Elegimos la norma L1 para medir el error ya que no otorga un peso excesivo a los valores atípicos (como lo hace la norma L2, por ejemplo), y también porque es la medida de distancia más comúnmente utilizada en la literatura para comparar vectores de PageRank, así como para detectar la convergencia del algoritmo [3]. Proponemos un marco codicioso, presentado en el Algoritmo 2, para construir ˆF. Inicialmente, F se establece en el subgrafo local L, y se calcula el PageRank f de este grafo. El algoritmo luego procede de la siguiente manera. Primero, se llama al algoritmo SelectNodes (que discutimos en la siguiente sección) y devuelve un conjunto de k nodos para rastrear a continuación del conjunto de nodos en la frontera de rastreo actual, Fout. Estos nodos seleccionados son luego rastreados para expandir el subgrafo local, F, y los PageRanks de este grafo expandido son luego recalculados. Estos pasos se repiten para cada una de las T iteraciones. Finalmente, se devuelve el vector PageRank ˆp, el cual está restringido a las páginas dentro del dominio local original. Dadas nuestras restricciones de computación, ancho de banda y memoria, asumiremos que el algoritmo rastreará como máximo O(n) páginas. Dado que los PageRanks se calculan en cada iteración del algoritmo, lo cual es una operación O(n), también asumiremos que el número de iteraciones T es una constante. Por supuesto, el principal desafío aquí radica en seleccionar qué conjunto de k nodos rastrear a continuación. En la siguiente sección, definimos formalmente el problema y presentamos algoritmos eficientes. 5. SELECCIÓN DE NODO En esta sección, presentamos algoritmos de selección de nodo que operan dentro del marco codicioso presentado en la sección anterior. Primero damos un criterio bien definido para el problema de selección de páginas y proporcionamos evidencia experimental de que este criterio puede identificar de manera efectiva las páginas que optimizan nuestro objetivo del problema (3). A continuación, presentamos nuestra principal contribución algorítmica del artículo de investigación al118, un método con tiempo de ejecución lineal que se deriva de los criterios de selección de esta página. Finalmente, ofrecemos un análisis intuitivo de nuestro algoritmo en términos de fugas y flujos. Mostramos que si solo se considera el flujo, entonces el método resultante es muy similar a una heurística de selección de páginas ampliamente utilizada [6]. 5.1 Formulación Para una página dada j en el dominio global, definimos el grafo local expandido Fj: Fj = F s uT j 0, (4) donde uj es el vector de ceros y unos que contiene los enlaces de salida de F hacia la página j, y s contiene los enlaces de entrada de la página j en el dominio local. Ten en cuenta que no permitimos enlaces a uno mismo en este marco de trabajo. En la práctica, los enlaces internos suelen ser eliminados, ya que solo sirven para inflar el PageRank de una página determinada. Observa que los enlaces entrantes a F desde el nodo j no se conocen hasta después de que el nodo j sea rastreado. Por lo tanto, estimamos este vector de inlink como la expectativa sobre el recuento de inlinks entre el conjunto de páginas ya rastreadas, s = F T e F T e 1. En la práctica, para cualquier página dada, esta estimación puede no reflejar los verdaderos inlinks de esa página. Además, esta expectativa se extrae del conjunto de enlaces dentro del dominio rastreado, mientras que una estimación más precisa también utilizaría enlaces del dominio global. Sin embargo, la distribución mencionada no es conocida por un motor de búsqueda localizado, y sostenemos que la estimación anterior, en promedio, será una estimación mejor que la distribución uniforme, por ejemplo. Dejemos que el PageRank de F sea f. Expresamos el PageRank f+ j del grafo local expandido Fj como f+ j = (1 − xj)fj xj , donde xj es el PageRank del nodo global candidato j, y fj es el vector de PageRank L1-normalizado restringido a las páginas en F. Dado que optimizar directamente nuestro objetivo requiere conocer el PageRank global p∗, proponemos en su lugar rastrear aquellos nodos que tendrán la mayor influencia en los PageRanks de las páginas en el dominio local original L: influencia(j) = k∈L |fj[k] − f[k]| (7) = EL (fj − f) 1. Experimentalmente, el puntaje de influencia es un predictor muy bueno de nuestro objetivo del problema (3). Para cada nodo global candidato j, la figura 1(a) muestra el valor de la función objetivo Global Diff(fj) en función de la influencia de la página j. El dominio local utilizado aquí es un rastreo de páginas políticas conservadoras (proporcionaremos más detalles sobre este conjunto de datos en la sección 6); observamos resultados similares en otros dominios. La correlación es bastante fuerte, lo que implica que los criterios de influencia pueden identificar de manera efectiva las páginas que mejoran la estimación global del PageRank. Como referencia, la figura 1(b) compara nuestro objetivo con un criterio alternativo, el recuento de enlaces de salida. El recuento de enlaces de salida se define como el número de enlaces de salida desde el dominio local a la página j. La correlación aquí es mucho más débil. .00001 .0001 .001 .01 0.26 0.262 0.264 0.266 Influencia Objetivo 1 10 100 1000 0.266 0.264 0.262 0.26 Recuento de Enlaces Salientes Objetivo (a) (b) Figura 1: (a) La correlación entre nuestros criterios de selección de página de influencia (7) y el valor real de la función objetivo (3) es bastante fuerte. (b) Esto contrasta con otros criterios, como el recuento de enlaces salientes, que muestran una correlación mucho más débil. 5.2 Cálculo Como se describe, para cada página global candidata j, se debe calcular el puntaje de influencia (7). Si fj se calcula exactamente para cada página global j, entonces el algoritmo de PageRank tendría que ejecutarse para cada una de las O(n) páginas globales j que consideramos, lo que resultaría en un costo computacional de O(n2) para el método de selección de nodos. Por lo tanto, calcular el valor exacto de fj conducirá a un algoritmo cuadrático, y en su lugar debemos recurrir a métodos de aproximación de este vector. El algoritmo que presentamos funciona realizando una iteración del método de potencia utilizado por el algoritmo PageRank (Algoritmo 1). La tasa de convergencia para el algoritmo PageRank se ha demostrado que es igual a la probabilidad del surfista aleatorio α [7, 11]. Dado un vector inicial x(0), si se realizan k iteraciones de PageRank, la solución actual de PageRank x(k) satisface: x(k) − x∗ 1 = O(αk x(0) − x∗ 1), (8), donde x∗ es el vector de PageRank deseado. Por lo tanto, si solo se realiza una iteración, es necesario elegir un buen vector inicial para lograr una aproximación precisa. Particionamos la matriz de PageRank PFj, correspondiente al subgrafo Fj, como: PFj = ˜F ˜s ˜uT j w, (9) donde ˜F = αF (DF + diag(uj))−1 + (1 − α) e + 1 eT, ˜s = αs + (1 − α) e + 1, ˜uj = α(DF + diag(uj))−1 uj + (1 − α) e + 1, w = 1 − α + 1, y diag(uj) es la matriz diagonal con la entrada (i, i) igual a uno si el i-ésimo elemento de uj es uno, y cero en caso contrario. Hemos asumido aquí que el vector del surfista aleatorio es el vector uniforme, y que L no tiene enlaces colgantes. Estas suposiciones no son necesarias y solo sirven para simplificar la discusión y el análisis. Un enfoque sencillo para estimar fj es el siguiente. Primero, estima el PageRank f+ j de Fj calculando una iteración de PageRank sobre la matriz PFj, utilizando el vector inicial ν = f 0. Luego, estima fj eliminando el último componente de 119 Research Track Paper de nuestra estimación de f+ j (es decir, el componente correspondiente al nodo j añadido), y renormalizando. El problema con este enfoque está en el vector inicial. Recuerde que xj es el PageRank del nodo j añadido. La diferencia entre el PageRank actual f+ j de PFj y el vector inicial ν es ν − f+ j 1 = xj + f − (1 − xj)fj 1 ≥ xj + | f 1 − (1 − xj) fj 1| = xj + |xj| = 2xj. Por lo tanto, según (8), después de una iteración de PageRank, esperamos que nuestra estimación de f+ j todavía tenga un error de aproximadamente 2αxj. En particular, para los nodos candidatos j con un PageRank xj relativamente alto, este método producirá resultados más inexactos. A continuación, presentaremos un método que elimina este sesgo y se ejecuta en tiempo O(n). 5.2.1 Complementación Estocástica Dado que f+ j, como se muestra en (6), es el PageRank de la matriz PFj, tenemos: fj(1 − xj) xj = ˜F ˜s ˜uT j w fj(1 − xj) xj = ˜F fj(1 − xj) + ˜sxj ˜uT j fj(1 − xj) + wxj. Resolver el sistema anterior para fj puede demostrarse que produce fj = ( ˜F + (1 − w)−1 ˜s˜uT j )fj. (10) La matriz S = ˜F +(1−w)−1 ˜s˜uT j se conoce como el complemento estocástico de la matriz estocástica de columna PFj con respecto a la submatriz ˜F. La teoría de complementación estocástica está bien estudiada, y se puede demostrar que el complemento estocástico de una matriz irreducible (como la matriz de PageRank) es único. Además, el complemento estocástico también es irreducible y, por lo tanto, tiene una distribución estacionaria única. Para un estudio extenso, ver [15]. Se puede demostrar fácilmente que el autovalor subdominante de S es a lo sumo +1 α, donde α es el tamaño de F. Para valores suficientemente grandes, este valor estará muy cerca de α. Esto es importante, ya que otras propiedades del algoritmo PageRank, especialmente la sensibilidad del algoritmo, dependen de este valor [11]. En este método, estimamos el vector de longitud fj calculando una iteración de PageRank sobre el complemento estocástico × S, comenzando en el vector f: fj ≈ Sf. (11) Esto contrasta con el método simple descrito en la sección anterior, que primero itera sobre la matriz ( + 1) × ( + 1) PFj para estimar f+ j, y luego elimina el último componente de la estimación y renormaliza para aproximar fj. El problema con el último método radica en la elección del vector inicial de longitud ( + 1), ν. En consecuencia, la estimación de PageRank dada por el método simple difiere del verdadero PageRank en al menos 2αxj, donde xj es el PageRank de la página j. Al utilizar el complemento estocástico, podemos establecer un límite inferior estricto de cero para esta diferencia. Para ver esto, considera el caso en el que se agrega un nodo k a F para formar el subgrafo local aumentado Fk, y que el PageRank de este nuevo grafo es (1 − xk)f xk. Específicamente, la adición de la página k no cambia los PageRanks de las páginas en F, y por lo tanto fk = f. Por la construcción del complemento estocástico, fk = Sfk, por lo que la aproximación dada en la ecuación (11) producirá la solución exacta. A continuación, presentamos los detalles computacionales necesarios para calcular eficientemente la cantidad fj − f 1 sobre todas las páginas globales conocidas j. Comenzamos expandiendo la diferencia fj − f, donde el vector fj se estima como en (11), fj − f ≈ Sf − f = αF (DF + diag(uj))−1 f + (1 − α) e + 1 eT f +(1 − w)−1 (˜uT j f)˜s − f. (12) Tenga en cuenta que la matriz (DF + diag(uj))−1 es diagonal. Dejando que o[k] sea el recuento de enlaces de salida para la página k en F, podemos expresar el elemento diagonal k-ésimo como: (DF + diag(uj))−1 [k, k] = 1 o[k]+1 si uj[k] = 1 1 o[k] si uj[k] = 0 Notando que (o[k] + 1)−1 = o[k]−1 − (o[k](o[k] + 1))−1 y reescribiendo esto en forma matricial obtenemos (DF +diag(uj))−1 = D−1 F −D−1 F (DF +diag(uj))−1 diag(uj). (13) Usamos la misma identidad para expresar e + 1 = e − e ( + 1) . (14) Recordemos que, por definición, tenemos PF = αF D−1 F +(1−α)e. Sustituyendo (13) y (14) en (12) se obtiene que fj − f ≈ (PF f − f) −αF D−1 F (DF + diag(uj))−1 diag(uj)f −(1 − α) e ( + 1) + (1 − w)−1 (˜uT j f)˜s = x + y + (˜uT j f)z, (15), notando que por definición, f = PF f, y definiendo los vectores x, y, y z como x = −αF D−1 F (DF + diag(uj))−1 diag(uj)f (16) y = −(1 − α) e ( + 1) (17) z = (1 − w)−1 ˜s. (18) El primer término x es un vector disperso, y toma valores no nulos solo para las páginas locales k que son hermanas de la página global j. Definimos (i, j) ∈ F si y solo si F [j, i] = 1 (equivalentemente, la página i enlaza a la página j) y expresamos el valor del componente x[k] como: x[k] = −α k:(k,k)∈F, uj[k]=1 f[k] o[k](o[k] + 1), (19) donde o[k], como antes, es el número de enlaces salientes de la página k en el dominio local. Ten en cuenta que los dos últimos términos, y y z, no dependen del nodo global actual j. Dada la función hj(f) = y + (˜uT j f)z 1, la cantidad fj − f 1 120 Research Track Paper puede expresarse como fj − f 1 = k x[k] + y[k] + (˜uT j f)z[k] = k:x[k]=0 y[k] + (˜uT j f)z[k] + k:x[k]=0 x[k] + y[k] + (˜uT j f)z[k] = hj(f) − k:x[k]=0 y[k] + (˜uT j f)z[k] + k:x[k]=0 x[k] + y[k] + (˜uT j f)z[k]. (20) Si podemos calcular la función hj en tiempo lineal, entonces podemos calcular cada valor de fj − f 1 usando una cantidad adicional de tiempo proporcional al número de componentes no nulas en x. Estas optimizaciones se llevan a cabo en el Algoritmo 3. Nótese que la ecuación (20) calcula la diferencia entre todos los componentes de f y fj, mientras que nuestros criterios de selección de nodos, dados en la ecuación (7), se restringen a los componentes correspondientes a los nodos en el dominio local original L. Examinemos el Algoritmo 3 con más detalle. Primero, el algoritmo calcula el número de enlaces de salida para cada página en el dominio local. El algoritmo luego calcula la cantidad ˜uT j f para cada página global j conocida. Este producto interno se puede escribir como (1 − α) 1 + 1 + α k:(k,j)∈Fout f[k] o[k] + 1, donde el segundo término suma sobre el conjunto de páginas locales que enlazan a la página j. Dado que se asumió que el número total de aristas en Fout tenía un tamaño O( ) (recordemos que es el número de páginas en F), el tiempo de ejecución de este paso también es O( ). El algoritmo luego calcula los vectores y y z, como se indican en (17) y (18), respectivamente. El método L1NormDiff se llama en los componentes de estos vectores que corresponden a las páginas en L, y estima el valor de EL(y + (˜uT j f)z) 1 para cada página j. La estimación funciona de la siguiente manera. Primero, los valores de ˜uT j f se discretizan de forma uniforme en c valores {a1, ..., ac}. La cantidad EL(y + aiz) 1 se calcula entonces para cada valor discretizado de ai y se almacena en una tabla. Para evaluar EL (y + az) 1 para algún a ∈ [a1, ac], se determina el valor discretizado más cercano ai, y se utiliza la entrada correspondiente en la tabla. El tiempo total de ejecución de este método es lineal en y el parámetro de discretización c (que consideramos constante). Observamos que si se desean valores exactos, también hemos desarrollado un algoritmo que se ejecuta en tiempo O(log) que no se describe aquí. En el bucle principal, calculamos el vector x, tal como se define en la ecuación (16). Los bucles anidados iteran sobre el conjunto de páginas en F que son hermanas de la página j. Normalmente, el tamaño de este conjunto está limitado por una constante. Finalmente, para cada página j, el vector de puntuaciones se actualiza sobre el conjunto de componentes no nulos k del vector x con k ∈ L. Este conjunto tiene un tamaño igual al número de hermanos locales de la página j, y es un subconjunto del número total de hermanos de la página j. Por lo tanto, cada iteración del bucle principal toma tiempo constante, y el tiempo de ejecución total del bucle principal es O( ). Dado que hemos asumido que el tamaño de F no crecerá más allá de O(n), el tiempo de ejecución total del algoritmo es O(n). Algoritmo 3: Selección de nodos a través de la complementación estocástica. SC-Select(F , Fout, f, k) Entrada: F : matriz de adyacencia de ceros y unos del tamaño correspondiente al subgrafo local actual, Fout: matriz de enlaces de ceros y unos de F al subgrafo global, f: PageRank de F , k: número de páginas a devolver Salida: páginas: conjunto de k páginas para rastrear a continuación {Calcular sumas de enlaces de salida para el subgrafo local} para cada (página j ∈ F ) o[j] ← k:(j,k)∈F F[j, k] fin {Calcular escalar ˜uT j f para cada nodo global j } para cada (página j ∈ Fout) g[j] ← (1 − α) 1 +1 para cada (página k : (k, j) ∈ Fout) g[j] ← g[j] + α f[k] o[k]+1 fin fin {Calcular vectores y z como en (17) y (18) } y ← −(1 − α) e ( +1) z ← (1 − w)−1 ˜s {Aproximar y + g[j] ∗ z 1 para todos los valores g[j]} norm diffs ←L1NormDiffs(g, ELy, ELz) para cada (página j ∈ Fout) {Calcular vector disperso x como en (19)} x ← 0 para cada (página k : (k, j) ∈ Fout) para cada (página k : (k, k ) ∈ F )) x[k ] ← x[k ] − f[k] o[k](o[k]+1) fin fin x ← αx scores[j] ← norm diffs[j] para cada (k : x[k] > 0 y página k ∈ L) scores[j] ← scores[j] − |y[k] + g[j] ∗ z[k]| +|x[k]+y[k]+g[j]∗z[k])| fin fin Devolver k páginas con los puntajes más altos 5.2.2 Flujos de PageRank Ahora presentamos un análisis intuitivo del método de complementación estocástica descomponiendo el cambio en PageRank en términos de fugas y flujos. Este análisis está motivado por la descomposición dada en (15). El flujo de PageRank es el aumento en los PageRanks locales que se originan desde la página global j. Los flujos están representados por el vector no negativo (˜uT j f)z (ecuaciones (15) y (18)). El escalar ˜uT j f se puede pensar como la cantidad total de flujo de PageRank que la página j tiene disponible para distribuir. El vector z dicta cómo se asigna el flujo al dominio local; el flujo que recibe la página local k es proporcional (con un factor constante debido al vector de navegante aleatorio) al número esperado de sus enlaces entrantes. Las filtraciones de PageRank representan la disminución en el PageRank resultante de la adición de la página j. La fuga puede ser cuantificada en términos de los vectores no positivos x e y (ecuaciones (16) y (17)). Para el vector x, podemos ver a partir de la ecuación (19) que la cantidad de PageRank filtrado por una página local es proporcional a la suma ponderada de los Page121 Research Track Paper Ranks de sus páginas hermanas. Por lo tanto, las páginas que tienen hermanos con PageRanks más altos (y un bajo número de enlaces salientes) experimentarán más pérdida de valor. La fuga causada por y es un artefacto del vector del surfista aleatorio. A continuación demostraremos que si solo se considera el término de flujo, (˜uT j f)z, entonces el método resultante es muy similar a una heurística propuesta por Cho et al. [6] que ha sido ampliamente utilizada para el problema de Ordenación de URL en el Rastreo. Esta heurística es computacionalmente más económica, pero como veremos más adelante, no es tan efectiva como el método de Complementación Estocástica. Nuestra estrategia de selección de nodos elige nodos globales que tienen la mayor influencia (ecuación (7)). Si esta influencia se aproxima utilizando solo flujos, el nodo óptimo j∗ es: j∗ = argmaxj EL ˜uT j fz 1 = argmaxj ˜uT j f EL z 1 = argmaxj ˜uT j f = argmaxj α(DF + diag(uj))−1 uj + (1 − α) e + 1 , f = argmaxjfT (DF + diag(uj))−1 uj. La puntuación de selección de página resultante se puede expresar como la suma de los PageRanks de cada página local k que enlaza con j, donde cada valor de PageRank se normaliza por o[k]+1. Curiosamente, la normalización que surge en nuestro método difiere de la heurística dada en [6], la cual normaliza por o[k]. El algoritmo PF-Select, que se omite por falta de espacio, primero calcula la cantidad fT (DF +diag(uj))−1 uj para cada página global j, y luego devuelve las páginas con los k puntajes más altos. Para ver que el tiempo de ejecución de este algoritmo es O(n), observe que la computación involucrada en este método es un subconjunto de la necesaria para el método SC-Select (Algoritmo 3), el cual se demostró que tiene un tiempo de ejecución de O(n). 6. EXPERIMENTOS En esta sección, proporcionamos evidencia experimental para verificar la efectividad de nuestros algoritmos. Primero describimos nuestra metodología experimental y luego presentamos resultados en una variedad de dominios locales. 6.1 Metodología Dado los recursos limitados disponibles en una institución académica, rastrear una sección de la web que sea de la misma magnitud que la indexada por Google o Yahoo! claramente es inviable. Por lo tanto, para un dominio local dado, aproximamos el grafo global rastreando un vecindario local alrededor del dominio que es varias órdenes de magnitud más grande que el subgrafo local. A pesar de que dicho gráfico sigue siendo órdenes de magnitud más pequeño que el verdadero gráfico global, sostenemos que, incluso si existen algunas páginas altamente influyentes que están muy lejos de nuestro dominio local, es poco realista que cualquier algoritmo de selección de nodos locales las encuentre. Tales páginas suelen ser muy poco relacionadas con las páginas dentro del dominio local. Al explicar nuestras estrategias de selección de nodos en la sección 5, hicimos la suposición simplificadora de que nuestro grafo local no contenía nodos colgantes. Esta suposición se hizo solo para facilitar nuestro análisis. Nuestra implementación maneja de manera eficiente los enlaces colgantes al reemplazar cada columna de ceros de nuestra matriz de adyacencia con el vector uniforme. Evaluamos el algoritmo utilizando las dos estrategias de selección de nodos dadas en la Sección 5.2, y también comparándolo con los siguientes métodos de referencia: • Aleatorio: Los nodos se eligen de forma uniforme al azar entre los nodos globales conocidos. • Conteo de enlaces de salida: Se eligen los nodos globales con el mayor número de enlaces de salida desde el dominio local. En cada iteración del algoritmo FindGlobalPR, evaluamos el rendimiento calculando la diferencia entre la estimación actual de PageRank del dominio local, ELf ELf 1, y el PageRank global del dominio local, ELg ELg 1. Todas las calculaciones de PageRank se realizaron utilizando el vector de surfista aleatorio uniforme. En todos los experimentos, establecimos el parámetro del surfista aleatorio α en .85 y utilizamos un umbral de convergencia de 10−6. Evaluamos la diferencia entre los vectores de PageRank local y global utilizando tres métricas diferentes: las normas L1 y L∞, y el tau de Kendall. La norma L1 mide la suma del valor absoluto de las diferencias entre los dos vectores, y la norma L∞ mide el valor absoluto de la mayor diferencia. La métrica de tau de Kendall es una medida de correlación de rangos popular utilizada para comparar PageRanks [2, 11]. Esta métrica se puede calcular contando el número de pares de pares que coinciden en la clasificación, y restando de eso el número de pares de pares que no coinciden en la clasificación. El valor final se normaliza luego por el número total de n pares de este tipo, resultando en un rango de [−1, 1], donde una puntuación negativa indica una anticorrelación entre las clasificaciones, y valores cercanos a uno corresponden a una fuerte correlación de rangos. 6.2 Resultados Nuestros experimentos se basan en dos grandes rastreos web y se descargaron utilizando el rastreador web que forma parte del proyecto de motor de búsqueda de código abierto Nutch [18]. Todas las exploraciones se limitaron únicamente a páginas http, y para limitar el número de páginas generadas dinámicamente que exploramos, ignoramos todas las páginas con URLs que contengan alguno de los caracteres ?, *, @ o =. El primer rastreo, al que nos referiremos como el conjunto de datos edu, fue iniciado por las páginas de inicio de los 100 principales departamentos de posgrado en informática en los Estados Unidos, según la clasificación de US News and World Report [16], y también por las páginas de inicio de sus respectivas instituciones. Se realizó un rastreo de profundidad 5, restringido a páginas dentro del dominio .edu, lo que resultó en un grafo con aproximadamente 4.7 millones de páginas y 22.9 millones de enlaces. El segundo rastreo fue alimentado por el conjunto de páginas bajo la jerarquía de política en el proyecto de directorio abierto dmoz[17]. Rastreamos todas las páginas hasta cuatro enlaces de distancia, lo que resultó en un grafo con 4.4 millones de páginas y 17.3 millones de enlaces. Dentro del rastreo educativo, identificamos los cinco dominios específicos del sitio correspondientes a los sitios web de los cinco principales departamentos de posgrado en ciencias de la computación, según la clasificación de US News and World Report. Esto produjo dominios locales de varios tamaños, desde 10,626 (UIUC) hasta 59,895 (Berkeley). Para cada uno de estos dominios específicos del sitio con tamaño n, realizamos 50 iteraciones del algoritmo FindGlobalPR para rastrear un total de 2n nodos adicionales. La Figura 2(a) muestra la diferencia (L1) entre la estimación de PageRank en cada iteración y el PageRank global, para el dominio local de Berkeley. El rendimiento de este conjunto de datos fue representativo del rendimiento típico en los cinco dominios locales específicos de informática. Inicialmente, la diferencia de L1 entre los PageRanks globales y locales variaba desde .0469 (Stanford) hasta .149 (MIT). Para las primeras varias iteraciones, el Artículo de Investigación 122 0 5 10 15 20 25 30 35 40 45 50 0.015 0.02 0.025 0.03 0.035 0.04 0.045 0.05 0.055 Número de Iteraciones Diferencia de PageRank Global y Local (L1) Complemento Estocástico PageRank Flujo de Enlaces de Conteo Aleatorio 0 10 20 30 40 50 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 Número de Iteraciones Diferencia de PageRank Global y Local (L1) Complemento Estocástico PageRank Flujo de Enlaces de Conteo Aleatorio 0 5 10 15 20 25 0.16 0.18 0.2 0.22 0.24 0.26 0.28 0.3 0.32 0.34 Número de Iteraciones Diferencia de PageRank Global y Local (L1) Complemento Estocástico PageRank Flujo de Enlaces de Conteo Aleatorio (a) www.cs.berkeley.edu (b) www.enterstageright.com (c) Política Figura 2: Diferencia L1 entre los PageRanks globales estimados y verdaderos para (a) el sitio web de ciencias de la computación de Berkeley, (b) el dominio específico del sitio, www.enterstageright.com, y (c) el dominio específico del tema de política. El método de complemento estocástico supera a todos los demás métodos en diferentes dominios. Tres métodos basados en enlaces superan a la heurística de selección aleatoria. Después de estas iteraciones iniciales, la heurística aleatoria tendió a ser más competitiva con (o incluso superar, como en el dominio local de Berkeley) las heurísticas de conteo de enlaces de salida y flujo de PageRank. En todos los ensayos, el método de complementación estocástica superó a los otros métodos o compitió con ellos. La Tabla 1 muestra la diferencia promedio entre los PageRanks globales estimados finales y los PageRanks globales reales para varias medidas de distancia. Algoritmo L1 L∞ Kendall Estocástico. Tabla 1: Rendimiento final promedio de varias estrategias de selección de nodos para los cinco dominios locales de informática específicos del sitio. Ten en cuenta que el Tau de Kendall mide similitud, mientras que las otras métricas son medidas de disimilitud. La Complementación Estocástica claramente supera a los otros métodos en todas las métricas. Dentro del conjunto de datos de política, también realizamos dos pruebas específicas para los sitios web más grandes en el rastreo: www.adamsmith.org, el sitio web del Instituto Adam Smith con sede en Londres, y www.enterstageright.com, una revista en línea conservadora. Al igual que con los dominios locales de edu, ejecutamos nuestro algoritmo durante 50 iteraciones, rastreando un total de 2n nodos. La figura 2 (b) muestra los resultados para el dominio www.enterstageright.com. A diferencia de los dominios locales de edu, los métodos Random y OutlinkCount no fueron competitivos ni con los métodos SC-Select ni con los métodos PF-Select. Entre todos los conjuntos de datos y todos los métodos de selección de nodos, el método de complementación estocástica fue el más impresionante en este conjunto de datos, logrando una estimación final que difería solo .0279 del PageRank global, una mejora de diez veces sobre la diferencia inicial del PageRank local de .299. Para el dominio local de Adam Smith, la diferencia inicial entre los PageRanks locales y globales fue de .148, y las estimaciones finales proporcionadas por los métodos SC-Select, PF-Select, OutlinkCount y Random fueron de .0208, .0193, .0222 y .0356, respectivamente. Dentro del conjunto de datos de política, construimos cuatro dominios locales específicos de temas. El primer dominio consistía en todas las páginas de la categoría de política de dmoz, y también todas las páginas dentro de cada uno de estos sitios hasta dos enlaces de distancia. Esto produjo un dominio local de 90,811 páginas, y los resultados se muestran en la figura 2 (c). Debido al mayor tamaño de los dominios específicos del tema, ejecutamos nuestro algoritmo solo durante 25 iteraciones para rastrear un total de n nodos. También creamos dominios específicos de temas a partir de tres subtemas políticos: liberalismo, conservadurismo y socialismo. Las páginas en estos dominios fueron identificadas por sus categorías correspondientes de dmoz. Para cada subtema, establecemos el dominio local como todas las páginas dentro de tres enlaces de las páginas de categoría dmoz correspondientes. La Tabla 2 resume el rendimiento de estos tres dominios específicos del tema, así como también del dominio político más amplio. Para cuantificar el efecto global de una página js en los valores globales de PageRank de las páginas en el dominio local, definimos el impacto de la página js como su valor de PageRank, g[j], normalizado por la fracción de sus enlaces salientes que apuntan al dominio local: impacto(j) = oL[j] o[j] · g[j], donde oL[j] es el número de enlaces salientes de la página j a páginas en el dominio local L, y o[j] es el número total de enlaces salientes de js. En términos del modelo del surfista aleatorio, el impacto de la página j es la probabilidad de que el surfista aleatorio (1) se encuentre actualmente en la página global j en su caminata aleatoria y (2) tome un enlace de salida a una página local, dado que ya ha decidido no saltar a una página aleatoria. Para el dominio político local, encontramos que muchas de las páginas con alto impacto eran de hecho páginas políticas que deberían haber sido incluidas en el tema de política de dmoz, pero no lo estaban. Por ejemplo, las dos páginas globales más influyentes fueron el motor de búsqueda político www.askhenry.com y la página de inicio de la revista política en línea www.policyreview.com. Entre las páginas no políticas, la página de inicio de la revista Education Next fue la más influyente. El diario está disponible de forma gratuita en línea y contiene artículos sobre varios aspectos de la educación K-12 en América. Para proporcionar algunas pruebas anecdóticas de la efectividad de nuestros métodos de selección de páginas, observamos que el método SC-Select eligió 11 páginas dentro del dominio www.educationnext.org, el método PF-Select descubrió 7 páginas, mientras que los métodos OutlinkCount y Random encontraron solo 6 páginas cada uno. Para el ámbito político local conservador, el sitio web socialista www.ornery.org tuvo una puntuación de impacto muy alta. Este documento de investigación de la pista 123 titulado "Toda la política: Algoritmo L1 L2 Kendall Stoch". Comp. .1253 .000700 .8671 Flujo PR .1446 .000710 .8518 Enlace saliente .1470 .00225 .8642 Aleatorio .2055 .00203 .8271 Conservadurismo: Algoritmo L1 L2 Kendall Estoc. Comp. .0496 .000990 .9158 Flujo PR .0554 .000939 .9028 Enlace saliente .0602 .00527 .9144 Aleatorio .1197 .00102 .8843 Liberalismo: Algoritmo L1 L2 Kendall Estoc. Comp. .0622 .001360 .8848 Flujo PR .0799 .001378 .8669 Enlace saliente .0763 .001379 .8844 Aleatorio .1127 .001899 .8372 Socialismo: Algoritmo L1 L∞ Kendall Estoc. Tabla 2: Rendimiento final entre estrategias de selección de nodos para las cuatro exploraciones específicas de temas políticos. Ten en cuenta que el coeficiente de correlación de Kendall mide la similitud, mientras que las otras métricas son medidas de disimilitud. Como era de esperar, el PageRank global de este artículo (que resulta estar en la página de inicio de la NCCPR, www.nationalresearch.com) era aproximadamente de .002, mientras que el PageRank local de esta página era solo de .00158. El método SC-Select produjo una estimación global de PageRank de aproximadamente .00182, el método PFSelect estimó un valor de .00167, y los métodos Random y OutlinkCount produjeron valores de .01522 y .00171, respectivamente. TRABAJO RELACIONADO El marco de selección de nodos que hemos propuesto es similar al problema de ordenación de URL para el rastreo propuesto por Cho et al. en [6]. Mientras que nuestro marco busca minimizar la diferencia entre el PageRank global y local, el objetivo utilizado en [6] es rastrear primero las páginas más altamente clasificadas (globalmente). Proponen varios algoritmos de selección de nodos, incluyendo la heurística del recuento de enlaces de salida, así como una variante de nuestro algoritmo PF-Select al que se refieren como la métrica de ordenación de PageRank. Encontraron que este método era el más efectivo para optimizar su objetivo, al igual que lo demostró una encuesta reciente de estos métodos realizada por Baeza-Yates et al. [1]. Boldi et al. también experimentan dentro de un marco de rastreo similar en [2], pero cuantifican sus resultados al comparar la correlación de rangos de Kendall entre los PageRanks del conjunto actual de páginas rastreadas y los del grafo global completo. Encontraron que las estrategias de selección de nodos que rastreaban páginas con el PageRank global más alto primero en realidad tenían un peor rendimiento (con respecto a la correlación de Kendalls Tau entre los PageRanks locales y globales) que las estrategias básicas de búsqueda en profundidad o en amplitud. Sin embargo, sus experimentos difieren de nuestro trabajo en que nuestros algoritmos de selección de nodos no utilizan (ni tienen acceso a) valores globales de PageRank. Se han propuesto muchas mejoras algorítmicas para calcular los valores exactos de PageRank [9, 10, 14]. Si se utilizan tales algoritmos para calcular los PageRanks globales de nuestro dominio local, todos requerirían una computación, almacenamiento y ancho de banda de O(N), donde N es el tamaño del dominio global. Esto contrasta con nuestro método, que aproxima el PageRank global y escala linealmente con el tamaño del dominio local. Wang y Dewitt [22] proponen un sistema en el que el conjunto de servidores web que conforman el dominio global se comunican entre sí para calcular sus respectivos PageRanks globales. Para un servidor web dado que aloja n páginas, los requisitos computacionales, de ancho de banda y almacenamiento también son lineales en n. Una desventaja de este sistema es que el número de servidores web distintos que conforman el dominio global puede ser muy grande. Por ejemplo, nuestro conjunto de datos edu contiene sitios web de más de 3,200 universidades diferentes; coordinar un sistema así entre un gran número de sitios puede ser muy difícil. Gan, Chen y Suel proponen un método para estimar el PageRank de una sola página [5] que utiliza solo ancho de banda, computación y espacio constantes. Su enfoque se basa en la disponibilidad de un servidor de conectividad remota que puede suministrar el conjunto de enlaces entrantes a una página dada, una suposición que no se utiliza en nuestro marco de trabajo. Experimentalmente demuestran que se puede obtener una estimación razonable del PageRank de los nodos visitando como máximo unos pocos cientos de nodos. El uso de su algoritmo para nuestro problema requeriría que primero se descargue todo el dominio global o se utilice un servidor de conectividad, lo que resultaría en grafos web muy grandes. 8. CONCLUSIONES Y TRABAJOS FUTUROS Internet está creciendo de forma exponencial, y para poder navegar por un repositorio tan grande como la web, los motores de búsqueda globales se han establecido como una necesidad. Junto con la omnipresencia de estos motores de búsqueda a gran escala, surge un aumento en las expectativas de los usuarios de búsqueda. Al proporcionar una cobertura completa y aislada de un dominio web específico, los motores de búsqueda localizados son un medio efectivo para localizar rápidamente contenido que de otra manera podría ser difícil de encontrar. En este trabajo, sostenemos que el uso de PageRank global en un motor de búsqueda localizado puede mejorar el rendimiento. Para estimar el PageRank global, hemos propuesto un marco de selección de nodos iterativo en el que seleccionamos qué páginas de la frontera global rastrear a continuación. Nuestra principal contribución es nuestro algoritmo de selección de páginas de complementación estocástica. Este método recorre los nodos que tendrán un impacto significativo en el dominio local y tiene un tiempo de ejecución lineal en el número de nodos en el dominio local. Experimentalmente, validamos estos métodos en un conjunto diverso de dominios locales, que incluyen siete dominios específicos del sitio y cuatro dominios específicos del tema. Concluimos que al rastrear n o 2n páginas adicionales, nuestros métodos encuentran una estimación de los PageRanks globales que es hasta diez veces mejor que simplemente usar los PageRanks locales. Además, demostramos que nuestro algoritmo supera consistentemente a otras heurísticas existentes. En muchas ocasiones, los dominios específicos de un tema se descubren utilizando un rastreador web enfocado que considera el contenido de las páginas junto con el texto del ancla del enlace para decidir qué páginas rastrear a continuación [4]. Aunque estos rastreadores han demostrado ser bastante efectivos en descubrir contenido relacionado con el tema, también se rastrean muchas páginas irrelevantes en el proceso. Por lo general, estas páginas son eliminadas y no son indexadas por el motor de búsqueda localizado. Estas páginas pueden, por supuesto, proporcionar información valiosa sobre el PageRank global del dominio local. Una forma de integrar estas páginas en nuestro marco de trabajo es comenzar el algoritmo FindGlobalPR con el subgrafo actual F igual al conjunto de páginas que fueron rastreadas por el rastreador enfocado. El marco de estimación global de PageRank, junto con los algoritmos de selección de nodos presentados, requieren todos una computación de O(n) por iteración y un ancho de banda proporcional al número de páginas rastreadas, Tk. Si el número de iteraciones T es relativamente pequeño en comparación con el número de páginas rastreadas por iteración, k, entonces el cuello de botella del algoritmo será la fase de rastreo. Sin embargo, a medida que el número de iteraciones aumenta (en relación con k), el cuello de botella residirá en el cálculo de la selección de nodos. En este caso, nuestros algoritmos se beneficiarían de optimizaciones en el factor constante. Recuerde que el algoritmo FindGlobalPR (Algoritmo 2) requiere que los PageRanks del dominio local expandido actual se vuelvan a calcular en cada iteración. El trabajo reciente de Langville y Meyer [12] proporciona un algoritmo para recalcular rápidamente los PageRanks de un grafo web dado si se agregan un pequeño número de nodos. Este algoritmo demostró proporcionar una aceleración de cinco a diez veces en algunos conjuntos de datos. Planeamos investigar esto y otras optimizaciones similares como trabajo futuro. En este artículo, hemos evaluado objetivamente nuestros métodos midiendo qué tan cercanas son nuestras estimaciones globales de PageRank a los verdaderos PageRanks globales. Para determinar el beneficio de utilizar PageRanks globales en un motor de búsqueda localizado, sugerimos un estudio de usuarios en el que se les pida a los usuarios que califiquen la calidad de los resultados de búsqueda para varias consultas de búsqueda. Para algunas consultas, solo se utilizan los PageRanks locales en la clasificación, y para las consultas restantes, se utilizan los PageRanks locales y los PageRanks globales aproximados, según lo calculado por nuestros algoritmos. Los resultados de dicho estudio pueden ser analizados para determinar el beneficio adicional de utilizar los PageRanks globales calculados por nuestros métodos, en lugar de solo utilizar los PageRanks locales. Agradecimientos. Esta investigación fue apoyada por la subvención de la NSF CCF-0431257, el Premio de Carrera de la NSF ACI-0093404 y una subvención de Sabre, Inc. 9. REFERENCIAS [1] R. Baeza-Yates, M. Marín, C. Castillo y A. Rodríguez. Rastreando un país: estrategias mejores que el recorrido en anchura para ordenar páginas web. Conferencia de la World-Wide Web, 2005. [2] P. Boldi, M. Santini y S. Vigna. Haz lo peor para lograr lo mejor: efectos paradójicos en los cálculos incrementales de PageRank. Taller sobre Grafos Web, 3243:168-180, 2004. [3] S. Brin y L. Page. La anatomía de un motor de búsqueda web hipertextual a gran escala. Redes de Computadoras y Sistemas ISDN, 33(1-7):107-117, 1998. [4] S. Chakrabarti, M. van den Berg y B. Dom. Rastreo enfocado: un nuevo enfoque para el descubrimiento de recursos web específicos de un tema. Conferencia de la World-Wide Web, 1999. [5] Y. Chen, Q. Gan y T. Suel. Métodos locales para estimar los valores de pagerank. Conferencia sobre Gestión de Información y Conocimiento, 2004. [6] J. Cho, H. Garcia-Molina y L. Page. Rastreo eficiente a través de la ordenación de URL. Conferencia de la World-Wide Web, 1998. [7] T. H. Haveliwala y S. D. Kamvar. El segundo valor propio de la matriz de Google. Informe técnico, Universidad de Stanford, 2003. [8] T. Joachims, F. Radlinski, L. Granka, A. Cheng, C. Tillekeratne y A. Patel. Aprendizaje de funciones de recuperación a partir de retroalimentación implícita. http://www.cs.cornell.edu/People/tj/career. [9] S. D. Kamvar, T. H. Haveliwala, C. D. Manning y G. H. Golub. Explotando la estructura de bloques de la web para calcular el pagerank. Conferencia de la World-Wide Web, 2003. [10] S. D. Kamvar, T. H. Haveliwala, C. D. Manning y G. H. Golub. Métodos de extrapolación para acelerar el cálculo de PageRank. Conferencia de la World-Wide Web, 2003. [11] A. N. Langville y C. D. Meyer. Más profundo dentro de PageRank. Matemáticas en Internet, 2004. [12] A. N. Langville y C. D. Meyer. Actualizando el vector estacionario de una cadena de Markov irreducible con miras al PageRank de Google. Revista SIAM sobre Análisis de Matrices, 2005. [13] P. Lyman, H. R. Varian, K. Swearingen, P. Charles, N. Good, L. L. Jordan y J. Pal. ¿Cuánta información en 2003? Escuela de Gestión de la Información y Sistemas, Universidad de California en Berkeley, 2003. [14] F. McSherry. Un enfoque uniforme para el cálculo acelerado de PageRank. Conferencia de la World-Wide Web, 2005. [15] C. D. Meyer. Complementación estocástica, desacoplamiento de cadenas de Markov y la teoría de sistemas casi reducibles. SIAM Review, 31:240-272, 1989. [16] US News and World Report. http://www.usnews.com. [17] Proyecto de directorio abierto Dmoz. http://www.dmoz.org. [18] Motor de búsqueda de código abierto Nutch. http://www.nutch.org. [19] F. Radlinski y T. Joachims. Cadenas de consulta: aprendizaje para clasificar a partir de retroalimentación implícita. Conferencia Internacional ACM SIGKDD sobre Descubrimiento de Conocimiento y Minería de Datos, 2005. [20] S. Raghavan y H. Garcia-Molina. Explorando la web oculta. En Actas de la Vigésimo séptima Conferencia Internacional sobre Bases de Datos Muy Grandes, 2001. [21] T. Tin Tang, D. Hawking, N. Craswell y K. Griffiths. Rastreo enfocado para relevancia temática y calidad de la información médica. Conferencia sobre Gestión de Información y Conocimiento, 2005. [22] Y. Wang y D. J. DeWitt. Calculando el pagerank en un sistema distribuido de búsqueda en internet. Actas de la 30ª Conferencia VLDB, 2004. 125 Artículos de Investigación.