Liberando una ARAÑA en una red de POMDPs: Generando políticas de calidad garantizada. Pradeep Varakantham, Janusz Marecki, Yuichi Yabu∗, Milind Tambe, Makoto Yokoo∗ Universidad del Sur de California, Los Ángeles, CA 90089, {varakant, marecki, tambe}@usc.edu ∗ Dept. Los Problemas de Decisión de Markov Parcialmente Observables Distribuidos (Distributed POMDPs) son un enfoque popular para modelar sistemas multiagente que actúan en dominios inciertos. Dada la complejidad significativa de resolver POMDP distribuidos, especialmente a medida que aumentamos el número de agentes, un enfoque popular se ha centrado en soluciones aproximadas. Aunque este enfoque es eficiente, los algoritmos dentro de este enfoque no ofrecen garantías sobre la calidad de la solución. Un segundo enfoque menos popular se centra en la optimalidad global, pero los resultados típicos solo están disponibles para dos agentes y también con un considerable costo computacional. Este documento supera las limitaciones de ambos enfoques al proporcionar SPIDER, una novedosa combinación de tres características clave para la generación de políticas en POMDP distribuidos: (i) explota la estructura de interacción de agentes dada una red de agentes (es decir, permitiendo una escalabilidad más fácil a un mayor número de agentes); (ii) utiliza una combinación de heurísticas para acelerar la búsqueda de políticas; y (iii) permite aproximaciones garantizadas de calidad, permitiendo un intercambio sistemático de calidad de solución por tiempo. Los resultados experimentales muestran mejoras de órdenes de magnitud en el rendimiento en comparación con algoritmos óptimos globales anteriores. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial]: Inteligencia Artificial DistribuidaSistemas Multiagente Términos Generales Algoritmos, Teoría 1. Los Problemas de Decisión de Markov Parcialmente Observables Distribuidos (Distributed POMDPs) están emergiendo como un enfoque popular para modelar la toma de decisiones secuenciales en equipos que operan bajo incertidumbre [9, 4, 1, 2, 13]. La incertidumbre surge debido al no determinismo en los resultados de las acciones y porque el estado del mundo puede ser solo parcialmente (o incorrectamente) observable. Desafortunadamente, como lo muestra Bernstein et al. [3], el problema de encontrar la política conjunta óptima para POMDP distribuidos generales es NEXP-Completo. Los investigadores han intentado dos tipos diferentes de enfoques para resolver estos modelos. La primera categoría consiste en técnicas aproximadas altamente eficientes, que pueden no alcanzar soluciones óptimas a nivel global [2, 9, 11]. El problema clave con estas técnicas ha sido su incapacidad para proporcionar garantías sobre la calidad de la solución. Por el contrario, la segunda categoría menos popular de enfoques se ha centrado en un resultado óptimo global [13, 5, 10]. Aunque estos enfoques obtienen soluciones óptimas, típicamente solo consideran dos agentes. Además, no logran aprovechar la estructura en las interacciones de los agentes y, por lo tanto, se ven severamente limitados en cuanto a escalabilidad al considerar más de dos agentes. Para abordar estos problemas con los enfoques existentes, proponemos técnicas aproximadas que brinden garantías sobre la calidad de la solución al centrarse en una red de más de dos agentes. Primero proponemos el algoritmo básico SPIDER (Búsqueda de Políticas en Entornos Distribuidos). Hay dos características novedosas clave en SPIDER: (i) es una técnica de búsqueda heurística de ramificación y acotación que utiliza una función heurística basada en MDP para buscar una política conjunta óptima; (ii) explota la estructura de red de agentes organizando agentes en un pseudoárbol de Búsqueda en Profundidad (DFS) y aprovecha la independencia en las diferentes ramas del árbol DFS. Luego proporcionamos tres mejoras para mejorar la eficiencia del algoritmo SPIDER básico al tiempo que garantizamos la calidad de la solución. La primera mejora utiliza abstracciones para acelerar el proceso, pero no sacrifica la calidad de la solución. En particular, primero realiza una búsqueda de ramificación y acotación en políticas abstractas y luego se extiende a políticas completas. La segunda mejora obtiene aceleraciones sacrificando la calidad de la solución, pero dentro de un parámetro de entrada que proporciona la diferencia de valor esperada tolerable de la solución óptima. La tercera mejora se basa nuevamente en limitar la búsqueda para lograr eficiencia, sin embargo con un parámetro de tolerancia que se proporciona como un porcentaje del óptimo. Experimentamos con el dominio de redes de sensores presentado en Nair et al. [10], un dominio representativo de una clase importante de problemas con redes de agentes que trabajan en entornos inciertos. En nuestros experimentos, ilustramos que SPIDER domina un enfoque óptimo global existente llamado GOA [10], el único algoritmo óptimo global conocido con resultados experimentales demostrados para más de dos agentes. Además, demostramos que la abstracción mejora significativamente el rendimiento de SPIDER (proporcionando soluciones óptimas). Finalmente demostramos una característica clave de SPIDER: al utilizar las mejoras de aproximación, permite realizar compensaciones fundamentadas entre el tiempo de ejecución y la calidad de la solución. 822 978-81-904262-7-5 (RPS) c 2007 IFAAMAS 2. DOMINIO: REDES DE SENSORES DISTRIBUIDOS Las redes de sensores distribuidos son una clase grande e importante de dominios que motivan nuestro trabajo. Este documento se centra en un conjunto de problemas de seguimiento de objetivos que surgen en ciertos tipos de redes de sensores [6] introducidos por primera vez en [10]. La Figura 1 muestra una instancia específica de un problema dentro de este tipo que consta de tres sensores. Aquí, cada nodo sensor puede escanear en una de las cuatro direcciones: Norte, Sur, Este u Oeste (ver Figura 1). Para rastrear un objetivo y obtener la recompensa asociada, dos sensores con áreas de escaneo superpuestas deben coordinarse escaneando la misma área simultáneamente. En la Figura 1, para rastrear un objetivo en Loc11, el sensor1 necesita escanear hacia el Este y el sensor2 necesita escanear hacia el Oeste simultáneamente. Por lo tanto, los sensores deben actuar de manera coordinada. Suponemos que hay dos objetivos independientes y que el movimiento de cada objetivo es incierto y no se ve afectado por los agentes del sensor. Basándose en el área que está escaneando, cada sensor recibe observaciones que pueden tener falsos positivos y falsos negativos. Las observaciones y transiciones de los sensores son independientes entre sí, por ejemplo, las observaciones que recibe el sensor 1 son independientes de las acciones del sensor 2. Cada agente incurre en un costo por escanear si el objetivo está presente o no, pero no incurre en ningún costo si se apaga. Dada la incertidumbre observacional de los sensores, las transiciones inciertas de los objetivos y la naturaleza distribuida de los nodos sensores, estas redes de sensores proporcionan un dominio útil para aplicar modelos distribuidos de POMDP. Figura 1: Una configuración de sensor de 3 cadenas 3. ANTECEDENTES 3.1 Modelo: POMDP Distribuido en Red El modelo ND-POMDP fue introducido en [10], motivado por dominios como las redes de sensores presentadas en la Sección 2. Se define como la tupla S, A, P, Ω, O, R, b, donde S = ×1≤i≤nSi × Su es el conjunto de estados del mundo. Si se refiere al conjunto de estados locales del agente i y Su es el conjunto de estados inafectables. El estado inafectable se refiere a esa parte del estado del mundo que no puede ser afectada por las acciones de los agentes, por ejemplo, factores ambientales como las ubicaciones de destino que ningún agente puede controlar. A = ×1≤i≤nAi es el conjunto de acciones conjuntas, donde Ai es el conjunto de acciones para el agente i. ND-POMDP asume independencia de transición, donde la función de transición se define como P(s, a, s ) = Pu(su, su) · 1≤i≤n Pi(si, su, ai, si), donde a = a1, . . . , an es la acción conjunta realizada en el estado s = s1, . . . , sn, su y s = s1, . . . , sn, su es el estado resultante. Ω = ×1≤i≤nΩi es el conjunto de observaciones conjuntas donde Ωi es el conjunto de observaciones para los agentes i. En los ND-POMDPs se asume independencia observacional, es decir, la función de observación conjunta se define como O(s, a, ω) = 1≤i≤n Oi(si, su, ai, ωi), donde s = s1, . . . , sn, su es el estado del mundo que resulta de que los agentes realicen a = a1, . . . , an en el estado anterior, y ω = ω1, . . . , ωn ∈ Ω es la observación recibida en el estado s. Esto implica que la observación de cada agente depende solo del estado inafectable, su acción local y su estado local resultante. La función de recompensa, R, se define como R(s, a) = l Rl(sl1, . . . , slr, su, al1, . . . , alr ), donde cada l podría referirse a cualquier subgrupo de agentes y r = |l|. Basándose en la función de recompensa, se construye un hipercubo de interacción. Existe un hiperenlace, l, entre un subconjunto de agentes para todos los Rl que conforman R. El hipergrafo de interacción se define como G = (Ag, E), donde los agentes, Ag, son los vértices y E = {l|l ⊆ Ag ∧ Rl es un componente de R} son las aristas. El estado de creencia inicial (distribución sobre el estado inicial), b, se define como b(s) = bu(su) · 1≤i≤n bi(si), donde bu y bi se refieren a la distribución sobre el estado inicial inafectable y el agente es el estado de creencia inicial, respectivamente. El objetivo en ND-POMDP es calcular la política conjunta π = π1, . . . , πn que maximiza la recompensa esperada del equipo durante un horizonte finito T a partir del estado de creencia b. Un ND-POMDP es similar a un Problema de Optimización de Restricciones Distribuidas (DCOP) n-ario donde la variable en cada nodo representa la política seleccionada por un agente individual, πi, con el dominio de la variable siendo el conjunto de todas las políticas locales, Πi. El componente de recompensa Rl donde |l| = 1 se puede considerar como una restricción local, mientras que el componente de recompensa Rl donde l > 1 corresponde a una restricción no local en el grafo de restricciones. 3.2 Algoritmo: Algoritmo Óptimo Global (GOA) En trabajos anteriores, GOA ha sido definido como un algoritmo óptimo global para ND-POMDPs [10]. Utilizaremos GOA en nuestras comparaciones experimentales, ya que GOA es un algoritmo global óptimo de vanguardia, y de hecho el único con resultados experimentales disponibles para redes de más de dos agentes. GOA se basa en un algoritmo DCOP óptimo global llamado DPOP[12]. El paso de mensajes de GOA sigue el de DPOP. La primera fase es la propagación de UTIL, donde los mensajes de utilidad, en este caso los valores de las políticas, se transmiten desde las hojas hasta la raíz. El valor de una política en un agente se define como la suma de los valores de mejor respuesta de sus hijos y la recompensa de política conjunta asociada con la política principal. Por lo tanto, dado un política para un nodo padre, GOA requiere que un agente itere a través de todas sus políticas, encontrando la mejor política de respuesta y devolviendo el valor al padre - mientras que en el nodo padre, para encontrar la mejor política, un agente requiere que sus hijos devuelvan sus mejores respuestas a cada una de sus políticas. Este proceso de propagación de UTIL se repite en cada nivel del árbol, hasta que la raíz agote todas sus políticas. En la segunda fase de propagación de VALOR, donde las políticas óptimas se transmiten desde la raíz hasta las hojas. GOA aprovecha las interacciones locales en el grafo de interacción, eliminando las evaluaciones conjuntas de políticas innecesarias (asociadas con nodos que no están conectados directamente en el árbol). Dado que el grafo de interacción captura todas las interacciones de recompensa entre agentes y, a medida que este algoritmo itera a través de todas las evaluaciones de políticas conjuntas relevantes, este algoritmo produce una solución globalmente óptima. 4. Como se menciona en la Sección 3.1, un ND-POMDP puede ser tratado como un DCOP, donde el objetivo es calcular una política conjunta que maximice la recompensa conjunta general. La técnica de fuerza bruta para calcular una política óptima sería examinar los valores esperados de todas las posibles políticas conjuntas. La idea clave en SPIDER es evitar el cálculo de los valores esperados para todo el espacio de políticas conjuntas, utilizando límites superiores en los valores esperados de las políticas y la estructura de interacción de los agentes. A semejanza de algunos de los algoritmos para DCOP [8, 12], SPIDER tiene un paso de preprocesamiento que construye un árbol DFS correspondiente a la estructura de interacción dada. Ten en cuenta que estos árboles DFS son árboles pseudo [12] que permiten enlaces entre ancestros e hijos. Empleamos la heurística de Nodo Máximo Restringido (MCN) utilizada en el algoritmo DCOP, ADOPT [8], sin embargo, también se pueden emplear otras heurísticas (como la heurística MLSP de [7]). La heurística MCN intenta colocar agentes con un mayor número de restricciones en la parte superior del árbol. Este árbol controla cómo se busca el polinomio conjunto óptimo. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 823 procedimientos helados en SPIDER. Los algoritmos presentados en este documento son fácilmente adaptables a hiper-árboles, sin embargo, para propósitos expositivos, asumimos árboles binarios. SPIDER es un algoritmo para la planificación centralizada y la ejecución distribuida en POMDP distribuidos. En este documento, empleamos la siguiente notación para denotar políticas y valores esperados: Ancestros(i) ⇒ agentes desde i hasta la raíz (sin incluir i). Árbol(i) ⇒ agentes en el sub-árbol (sin incluir i) para los cuales i es la raíz. πroot+ ⇒ política conjunta de todos los agentes. πi+ ⇒ política conjunta de todos los agentes en Árbol(i) ∪ i. πi− ⇒ política conjunta de agentes que están en Antecesores(i). πi ⇒ política del agente i. ˆv[πi, πi− ] ⇒ límite superior en el valor esperado para πi+ dado πi y políticas de agentes ancestros, es decir, πi− . ˆvj[πi, πi− ] ⇒ límite superior en el valor esperado para πi+ del j-ésimo hijo. v[πi, πi− ] ⇒ valor esperado para πi dado las políticas de agentes ancestros, πi− . v[πi+ , πi− ] ⇒ valor esperado para πi+ dado las políticas de agentes ancestros, πi− . vj[πi+ , πi− ] ⇒ valor esperado para πi+ del j-ésimo hijo. Figura 2: Ejecución de SPIDER, un ejemplo 4.1 Esquema de SPIDER. SPIDER se basa en la idea de búsqueda de ramificación y acotación, donde los nodos en el árbol de búsqueda representan políticas conjuntas parciales/completas. La Figura 2 muestra un ejemplo de árbol de búsqueda para el algoritmo SPIDER, utilizando un ejemplo de una cadena de tres agentes. Antes de que SPIDER comience su búsqueda, creamos un árbol DFS (es decir, árbol pseudo) a partir de la cadena de tres agentes, con el agente del medio como la raíz de este árbol. SPIDER explota la estructura de este árbol DFS mientras realiza su búsqueda. Ten en cuenta que en nuestra figura de ejemplo, a cada agente se le asigna una política con T=2. Por lo tanto, cada rectángulo redondeado (nodo del árbol de búsqueda) indica una política conjunta parcial/completa, un rectángulo indica un agente y las elipses internas a un agente muestran su política. El valor esperado heurístico o real para una política conjunta se indica en la esquina superior derecha del rectángulo redondeado. Si el número está en cursiva y subrayado, implica que se proporciona el valor esperado real de la política conjunta. SPIDER comienza sin ninguna política asignada a ninguno de los agentes (mostrado en el nivel 1 del árbol de búsqueda). El nivel 2 del árbol de búsqueda indica que las políticas conjuntas están ordenadas según los límites superiores calculados para las políticas de los agentes raíz. El nivel 3 muestra un nodo de búsqueda SPIDER con una política conjunta completa (una política asignada a cada uno de los agentes). El valor esperado para esta política conjunta se utiliza para podar los nodos en el nivel 2 (los que tienen límites superiores < 234) al crear políticas para cada agente no hoja i, SPIDER potencialmente realiza dos pasos: 1. Obtención de límites superiores y ordenación: En este paso, el agente i calcula los límites superiores de los valores esperados, ˆv[πi, πi− ] de las políticas conjuntas πi+ correspondientes a cada una de sus políticas πi y políticas ancestrales fijas. Se utiliza una heurística basada en MDP para calcular estos límites superiores en los valores esperados. Una descripción detallada sobre esta heurística MDP se proporciona en la Sección 4.2. Todas las políticas del agente i, Πi, se ordenan luego según estos límites superiores (también conocidos como valores heurísticos en adelante) en orden descendente. La exploración de estas políticas (en el paso 2 a continuación) se realiza en este orden descendente. Como se indica en el nivel 2 del árbol de búsqueda (de la Figura 2), todas las políticas conjuntas están ordenadas según los valores heurísticos, indicados en la esquina superior derecha de cada política conjunta. La intuición detrás de ordenar y luego explorar las políticas en orden descendente de límites superiores, es que las políticas con límites superiores más altos podrían producir políticas conjuntas con valores esperados más altos. Exploración y Poda: La exploración implica calcular la mejor política conjunta de respuesta πi+,∗ correspondiente a las políticas ancestrales fijas del agente i, πi−. Esto se realiza iterando a través de todas las políticas del agente i, es decir, Πi y sumando dos cantidades para cada política: (i) la mejor respuesta para todos sus hijos (obtenida realizando los pasos 1 y 2 en cada uno de los nodos hijos); (ii) el valor esperado obtenido por i para las políticas fijas de los ancestros. Por lo tanto, la exploración de una política πi produce el valor esperado real de una política conjunta, πi+, representada como v[πi+ , πi−]. La política con el valor esperado más alto es la mejor política de respuesta. La poda se refiere a evitar explorar todas las políticas (o calcular valores esperados) en el agente i mediante el uso del mejor valor esperado actual, vmax [πi+ , πi− ]. De ahora en adelante, este vmax [πi+ , πi− ] se referirá como umbral. Una política, πi, no necesita ser explorada si el límite superior para esa política, ˆv[πi, πi−], es menor que el umbral. Esto se debe a que el valor esperado para la mejor política conjunta alcanzable para esa política será menor que el umbral. Por otro lado, al considerar un agente de hoja, SPIDER calcula la política de mejor respuesta (y consecuentemente su valor esperado) correspondiente a las políticas fijas de sus ancestros, πi−. Esto se logra calculando los valores esperados para cada una de las políticas (correspondientes a las políticas fijas de los ancestros) y seleccionando la política con el valor esperado más alto. En la Figura 2, SPIDER asigna políticas de mejor respuesta a los agentes hoja en el nivel 3. La política para el agente de la hoja izquierda es realizar la acción Este en cada paso de tiempo en la política, mientras que la política para el agente de la hoja derecha es realizar la acción Apagado en cada paso de tiempo. Estas políticas de mejor respuesta de los agentes de hojas generan un valor esperado real de 234 para la política conjunta completa. El Algoritmo 1 proporciona el pseudocódigo para SPIDER. Este algoritmo produce la mejor política conjunta, πi+,∗ (con un valor esperado mayor que el umbral) para los agentes en el árbol(i). Las líneas 3-8 calculan la política de mejor respuesta de un agente hoja i, mientras que las líneas 9-23 calculan la mejor política de respuesta conjunta para los agentes en el árbol(i). El cálculo de la mejor respuesta para un agente no hoja i incluye: (a) Ordenar las políticas (en orden descendente) basadas en valores heurísticos en la línea 11; (b) Calcular las políticas de mejor respuesta en cada uno de los hijos para las políticas fijas del agente i en las líneas 16-20; y (c) Mantener 824 La Sexta Conferencia Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Algoritmo 1 ARAÑA(i, πi−, umbral) 1: πi+,∗ ← nulo 2: Πi ← OBTENER-TODAS-LAS-POLÍTICAS (horizonte, Ai, Ωi) 3: si ES-HOJA(i) entonces 4: para todo πi ∈ Πi hacer 5: v[πi, πi−] ← RECOMPENSA-CONJUNTA (πi, πi−) 6: si v[πi, πi−] > umbral entonces 7: πi+,∗ ← πi 8: umbral ← v[πi, πi−] 9: sino 10: hijos ← HIJOS(i) 11: ˆΠi ← ORDENAR-LÍMITE-SUPERIOR(i, Πi, πi−) 12: para todo πi ∈ ˆΠi hacer 13: ˜πi+ ← πi 14: si ˆv[πi, πi−] < umbral entonces 15: Ir a la línea 12 16: para todo j ∈ hijos hacer 17: jUmbral ← umbral − v[πi, πi−]− Σk∈hijos,k=j ˆvk[πi, πi−] 18: πj+,∗ ← ARAÑA(j, πi πi−, jUmbral) 19: ˜πi+ ← ˜πi+ πj+,∗ 20: ˆvj[πi, πi−] ← v[πj+,∗, πi πi−] 21: si v[˜πi+, πi−] > umbral entonces 22: umbral ← v[˜πi+, πi−] 23: πi+,∗ ← ˜πi+ 24: regresar πi+,∗ Algoritmo 2 ORDENAR-LÍMITE-SUPERIOR(i, Πi, πi−) 1: hijos ← HIJOS(i) 2: ˆΠi ← nulo /* Almacena la lista ordenada */ 3: para todo πi ∈ Πi hacer 4: ˆv[πi, πi−] ← RECOMPENSA-CONJUNTA (πi, πi−) 5: para todo j ∈ hijos hacer 6: ˆvj[πi, πi−] ← LÍMITE-SUPERIOR(i, j, πi πi−) 7: ˆv[πi, πi−] + ← ˆvj[πi, πi−] 8: ˆΠi ← INSERTAR-EN-ORDEN (πi, ˆΠi) 9: regresar ˆΠi mejor valor esperado, política conjunta en líneas 21-23. El Algoritmo 2 proporciona el pseudocódigo para ordenar políticas basadas en los límites superiores de los valores esperados de políticas conjuntas. El valor esperado para un agente i consta de dos partes: el valor obtenido de sus ancestros y el valor obtenido de sus hijos. La línea 4 calcula el valor esperado obtenido de los ancestros del agente (usando la función RECOMPENSA-CONJUNTA), mientras que las líneas 5-7 calculan el valor heurístico de los hijos. La suma de estas dos partes proporciona un límite superior en el valor esperado para el agente i, y la línea 8 del algoritmo ordena las políticas basadas en estos límites superiores. 4.2 Función heurística basada en MDP La función heurística proporciona rápidamente un límite superior en el valor esperado obtenible de los agentes en Tree(i). El subárbol de agentes es un POMDP distribuido en sí mismo y la idea aquí es construir un MDP centralizado correspondiente al POMDP distribuido del subárbol y obtener el valor esperado de la política óptima para este MDP centralizado. Para reiterar esto en términos de los agentes en la estructura de interacción del árbol DFS, asumimos plena observabilidad para los agentes en Árbol(i) y para las políticas fijas de los agentes en {Antecesores(i) ∪ i}, calculamos el valor conjunto ˆv[πi+ , πi−]. Utilizamos la siguiente notación para presentar las ecuaciones para calcular límites superiores/valores heurísticos (para los agentes i y k): Sea Ei− el conjunto de enlaces entre agentes en {Ancestros(i)∪ i} y Árbol(i), y Ei+ el conjunto de enlaces entre agentes en Árbol(i). Además, si l ∈ Ei−, entonces l1 es el agente en {Ancestros(i) ∪ i} y l2 es el agente en Árbol(i) que l conecta juntos. Primero compactamos la notación estándar: ot k =Ok(st+1 k , st+1 u , πk(ωt k), ωt+1 k ) (1) pt k =Pk(st k, st u, πk(ωt k), st+1 k ) · ot k pt u =P(st u, st+1 u ) st l = st l1 , st l2 , st u ; ωt l = ωt l1 , ωt l2 rt l =Rl(st l , πl1 (ωt l1 ), πl2 (ωt l2 )) vt l =V t πl (st l , st u, ωt l1 , ωt l2 ) Dependiendo de la ubicación del agente k en el árbol de agentes, tenemos los siguientes casos: SI k ∈ {Ancestros(i) ∪ i}, ˆpt k = pt k, (2) SI k ∈ Árbol(i), ˆpt k = Pk(st k, st u, πk(ωt k), st+1 k ) SI l ∈ Ei− , ˆrt l = max {al2 } Rl(st l , πl1 (ωt l1 ), al2 ) SI l ∈ Ei+ , ˆrt l = max {al1 ,al2 } Rl(st l , al1 , al2 ) La función de valor para un agente i ejecutando la política conjunta πi+ en el tiempo η − 1 está dada por la ecuación: V η−1 πi+ (sη−1 , ωη−1 ) = l∈Ei− vη−1 l + l∈Ei+ vη−1 l (3) donde vη−1 l = rη−1 l + ω η l ,sη pη−1 l1 pη−1 l2 pη−1 u vη l Algoritmo 3 LÍMITE SUPERIOR (i, j, πj− ) 1: val ← 0 2: para todo l ∈ Ej− ∪ Ej+ hacer 3: si l ∈ Ej− entonces πl1 ← φ 4: para todo s0 l hacer 5: val + ← startBel[s0 l ]· LÍMITE SUPERIOR-TIEMPO (i, s0 l , j, πl1 , ) 6: retornar val Algoritmo 4 LÍMITE SUPERIOR-TIEMPO (i, st l , j, πl1 , ωt l1 ) 1: maxV al ← −∞ 2: para todo al1 , al2 hacer 3: si l ∈ Ei− y l ∈ Ej− entonces al1 ← πl1 (ωt l1 ) 4: val ← OBTENER-RECOMPENSA(st l , al1 , al2 ) 5: si t < πi.horizonte − 1 entonces 6: para todo st+1 l , ωt+1 l1 hacer 7: futV al←pt u ˆpt l1 ˆpt l2 8: futV al ∗ ← LÍMITE-SUPERIOR-TIEMPO(st+1 l , j, πl1 , ωt l1 ωt+1 l1 ) 9: val + ← futV al 10: si val > maxV al entonces maxV al ← val 11: retornar maxV al El límite superior en el valor esperado para un enlace se calcula modificando la ecuación 3 para reflejar la suposición de plena observabilidad. Esto implica eliminar el término de probabilidad observacional para los agentes en Árbol(i) y maximizar el valor futuro ˆvη l sobre las acciones de esos agentes (en Árbol(i)). Por lo tanto, la ecuación para el Sexto Congreso Internacional. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 825 cálculo del límite superior en un enlace l, es el siguiente: SI l ∈ Ei− , ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l SI l ∈ Ei+ , ˆvη−1 l =ˆrη−1 l + max al1 ,al2 s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Los Algoritmos 3 y 4 proporcionan el algoritmo para calcular el límite superior para el hijo j del agente i, utilizando las ecuaciones descritas anteriormente. Mientras que el Algoritmo 4 calcula el límite superior en un enlace dado el estado inicial, el Algoritmo 3 suma los valores de límite superior calculados sobre cada uno de los enlaces en Ei− ∪ Ei+. En SPIDER, la fase de exploración/poda solo puede comenzar después de que haya terminado el cálculo de la heurística (o límite superior) y la clasificación de las políticas. Proporcionamos un enfoque para posiblemente eludir la exploración de un grupo de políticas basadas en computación heurística para una política abstracta, lo que conduce a una mejora en el rendimiento en tiempo de ejecución (sin pérdida en la calidad de la solución). Los pasos importantes en esta técnica son definir la política abstracta y cómo se calculan los valores heurísticos para las políticas abstractas. En este documento, proponemos dos tipos de abstracción: 1. Abstracción basada en el horizonte (HBA): Aquí, la política abstracta se define como una política de horizonte más corto. Representa un grupo de políticas de horizonte más largo que tienen las mismas acciones que la política abstracta para momentos menores o iguales al horizonte de la política abstracta. En la Figura 3(a), una política abstracta T=1 que realiza la acción Este, representa un grupo de políticas T=2 que realizan la acción Este en el primer paso de tiempo. Para HBA, hay dos partes en la computación heurística: (a) Calcular el límite superior para el horizonte de la política abstracta. Esto es igual que la computación heurística definida por el algoritmo GETHEURISTIC() para SPIDER, sin embargo con un horizonte temporal más corto (horizonte de la política abstracta). (b) Calculando la recompensa máxima posible que se puede acumular en un paso de tiempo (usando GET-ABS-HEURISTIC()) y multiplicándola por el número de pasos de tiempo hasta el horizonte temporal. La recompensa máxima posible (para un paso de tiempo) se obtiene iterando a través de todas las acciones de todos los agentes en el árbol(i) y calculando la recompensa conjunta máxima para cualquier acción conjunta. La suma de (a) y (b) es el valor heurístico para una política abstracta de HBA. 2. Abstracción basada en nodos (NBA): Aquí se obtiene una política abstracta al no asociar acciones a ciertos nodos del árbol de políticas. A diferencia de en HBA, esto implica múltiples niveles de abstracción. Esto se ilustra en la Figura 3(b), donde hay T=2 políticas que no tienen una acción para la observación TP. Estas políticas incompletas de T=2 son abstracciones de políticas completas de T=2. Niveles más altos de abstracción conducen a una computación más rápida de una política conjunta completa, πroot+, y también a una computación heurística más corta y a fases de exploración y poda. Para la NBA, la computación heurística es similar a la de una política normal, excepto en los casos en los que no hay una acción asociada con los nodos de la política. En tales casos, la recompensa inmediata se toma como Rmax (recompensa máxima para cualquier acción). Combinamos ambas técnicas de abstracción mencionadas anteriormente en una técnica, SPIDER-ABS. El algoritmo 5 proporciona el algoritmo para esta técnica de abstracción. Para calcular la política conjunta óptima con SPIDER-ABS, un agente no hoja i examina inicialmente todas las políticas abstractas T=1 (línea 2) y las ordena según cálculos heurísticos de políticas abstractas (línea 17). El horizonte de abstracción se incrementa gradualmente y luego se exploran estas políticas abstractas en orden descendente de valores heurísticos, eliminando aquellas que tienen valores heurísticos inferiores al umbral (líneas 23-24). La exploración en SPIDER-ABS tiene la misma definición que en SPIDER si la política que se está explorando tiene un horizonte de cálculo de política que es igual al horizonte temporal real y si todos los nodos de la política tienen una acción asociada a ellos (líneas 25-30). Sin embargo, si esas condiciones no se cumplen, entonces se sustituye por un grupo de políticas que representa (usando la función EXTEND-POLICY ()) (líneas 31-32). La función EXTEND-POLICY() también es responsable de inicializar el horizonte y absNodes de una política. absNodes representa el número de nodos en el último nivel del árbol de políticas que no tienen una acción asignada. Si πi.absNodes = |Ωi|πi.horizon−1 (es decir, el número total de nodos de política posibles en πi.horizon), entonces πi.absNodes se establece en cero y πi.horizon se incrementa en 1. De lo contrario, πi.absNodes se incrementa en 1. Por lo tanto, esta función combina tanto HBA como NBA utilizando las variables de política, horizonte y absNodes. Antes de sustituir la política abstracta con un grupo de políticas, esas políticas se ordenan según los valores heurísticos (línea 33). Se adopta un tipo similar de abstracción basada en la computación de la mejor respuesta en los agentes hoja (líneas 3-14). 4.4 Aproximación del Valor (VAX) En esta sección, presentamos una mejora aproximada a SPIDER llamada VAX. La entrada a esta técnica es un parámetro de aproximación, que determina la diferencia de calidad de la solución óptima. Este parámetro de aproximación se utiliza en cada agente para podar políticas conjuntas. El mecanismo de poda en SPIDER y SPIDER-Abs dicta que una política conjunta solo se podará si el umbral es exactamente mayor que el valor heurístico. Sin embargo, el 826 La Sexta Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Figura 3: Ejemplo de abstracción para (a) HBA (Abstracción Basada en Horizonte) y (b) NBA (Abstracción Basada en Nodos) la idea en esta técnica es podar una política conjunta si se cumple la siguiente condición: umbral + > ˆv[πi , πi− ]. Aparte de la condición de poda, VAX es igual que SPIDER/SPIDER-ABS. En el ejemplo de la Figura 2, si el valor heurístico para la segunda política conjunta (o segundo nodo del árbol de búsqueda) en el nivel 2 fuera 238 en lugar de 232, entonces esa política no podría ser podada utilizando SPIDER o SPIDER-Abs. Sin embargo, en VAX con un parámetro de aproximación de 5, la política conjunta en consideración también sería podada. Esto se debe a que el umbral (234) en ese momento más el parámetro de aproximación (5), es decir, 239, habría sido mayor que el valor heurístico para esa política conjunta (238). Se puede observar a partir del ejemplo (recién discutido) que este tipo de poda puede llevar a menos exploraciones y, por lo tanto, a una mejora en el rendimiento general del tiempo de ejecución. Sin embargo, esto puede implicar un sacrificio en la calidad de la solución porque esta técnica puede podar una solución óptima candidata. Una cota del error introducido por este algoritmo aproximado en función de , es proporcionada por la Proposición 3. 4.5 Aproximación porcentual (PAX) En esta sección, presentamos la segunda mejora de aproximación sobre SPIDER llamada PAX. El parámetro de entrada de esta técnica es δ, que representa el porcentaje mínimo de la calidad de la solución óptima deseada. El resultado de esta técnica es una política con un valor esperado que es al menos δ% de la calidad de la solución óptima. Una política se poda si se cumple la siguiente condición: umbral > δ 100 ˆv[πi , πi− ]. Al igual que en VAX, la única diferencia entre PAX y SPIDER/SPIDER-ABS es esta condición de poda. Nuevamente en la Figura 2, si el valor heurístico para el segundo nodo del árbol de búsqueda en el nivel 2 fuera 238 en lugar de 232, entonces PAX con un parámetro de entrada del 98% podría podar ese nodo del árbol de búsqueda (ya que 98 100 ∗238 < 234). Este tipo de poda conduce a menos exploraciones y, por lo tanto, a una mejora en el rendimiento en tiempo de ejecución, aunque potencialmente puede resultar en una pérdida de calidad de la solución. La Proposición 4 establece el límite de pérdida de calidad. 4.6 Resultados Teóricos PROPOSICIÓN 1. La heurística proporcionada utilizando la heurística MDP centralizada es admisible. Prueba. Para que el valor proporcionado por la heurística sea admisible, debe ser una sobreestimación del valor esperado para una política conjunta. Por lo tanto, necesitamos demostrar que: Para l ∈ Ei+ ∪ Ei− : ˆvt l ≥ vt l (consulte la notación en la Sección 4.2). Utilizamos inducción matemática en t para probar esto. Caso base: t = T − 1. Independientemente de si l ∈ Ei− o l ∈ Ei+ , ˆrt l se calcula maximizando sobre todas las acciones de los agentes en el Árbol(i), mientras que rt l se calcula para políticas fijas de los mismos agentes. Por lo tanto, ˆrt l ≥ rt l y también ˆvt l ≥ vt l. Suposición: La proposición se cumple para t = η, donde 1 ≤ η < T − 1. Ahora tenemos que demostrar que la proposición se cumple para t = η - 1. Mostramos la prueba para l ∈ Ei− y un razonamiento similar puede ser adoptado para probar para l ∈ Ei+ . La función de valor heurístico para l ∈ Ei− se proporciona mediante la siguiente ecuación: ˆvη−1 l =ˆrη−1 l + max al2 ω η l1 ,s η l ˆpη−1 l1 ˆpη−1 l2 pη−1 u ˆvη l Reescribiendo el RHS y usando la Ecuación 2 (en la Sección 4.2) =ˆrη−1 l + max al2 ω η l1 ,s η l pη−1 u pη−1 l1 ˆpη−1 l2 ˆvη l =ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 max al2 ˆpη−1 l2 ˆvη l Dado que maxal2 ˆpη−1 l2 ˆvη l ≥ ωl2 oη−1 l2 ˆpη−1 l2 ˆvη l y pη−1 l2 = oη−1 l2 ˆpη−1 l2 ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 ˆvη l Dado que ˆvη l ≥ vη l (por la suposición) ≥ˆrη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l Dado que ˆrη−1 l ≥ rη−1 l (por definición) ≥rη−1 l + ω η l1 ,s η l pη−1 u pη−1 l1 ωl2 pη−1 l2 vη l =rη−1 l + (ω η l ,s η l ) pη−1 u pη−1 l1 pη−1 l2 vη l = vη−1 l Así se demuestra. PROPOSICIÓN 2. SPIDER proporciona una solución óptima. Prueba. SPIDER examina todas las posibles políticas conjuntas dadas la estructura de interacción de los agentes. La única excepción es cuando una política conjunta es podada basándose en el valor heurístico. Por lo tanto, mientras una política óptima de candidato no sea podada, SPIDER devolverá una política óptima. Como se demostró en la Proposición 1, el valor esperado para una política conjunta siempre es un límite superior. Por lo tanto, cuando se poda una política conjunta, no puede ser una solución óptima. PROPOSICIÓN 3. El límite de error en la calidad de la solución para VAX (implementado sobre SPIDER-ABS) con un parámetro de aproximación es ρ, donde ρ es el número de nodos hoja en el árbol DFS. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 827 Prueba. Demostramos esta proposición utilizando inducción matemática en la profundidad del árbol DFS. Caso base: profundidad = 1 (es decir, un nodo). La mejor respuesta se calcula iterando a través de todas las políticas, Πk. Una política, πk, se poda si ˆv[πk, πk− ] < umbral + . Por lo tanto, la política de respuesta óptima calculada por VAX estaría como máximo alejada de la mejor respuesta óptima. Por lo tanto, la proposición se cumple para el caso base. Suposición: La proposición se cumple para d, donde 1 ≤ profundidad ≤ d. Ahora debemos demostrar que la proposición se cumple para d + 1. Sin pérdida de generalidad, asumamos que el nodo raíz de este árbol tiene k hijos. Cada uno de estos niños tiene una profundidad ≤ d, y por lo tanto, a partir de la suposición, el error introducido en el k-ésimo niño es ρk, donde ρk es el número de nodos hoja en el k-ésimo hijo de la raíz. Por lo tanto, ρ = k ρk, donde ρ es el número de nodos hoja en el árbol. En SPIDER-ABS, umbral en el agente raíz, thresspider = k v[πk+ , πk− ]. Sin embargo, con VAX el umbral en el agente raíz será (en el peor de los casos), threshvax = k v[πk+ , πk− ]− k ρk. Por lo tanto, con VAX, una política conjunta se poda en el agente raíz si ˆv[πroot, πroot− ] < threshvax + ⇒ ˆv[πroot, πroot− ] < threshspider − (( k ρk) − 1) ≤ threshspider − ( k ρk) ≤ threshspider − ρ. Por lo tanto, queda demostrado. PROPOSICIÓN 4. Para PAX (implementado sobre SPIDER-ABS) con un parámetro de entrada de δ, la calidad de la solución es al menos δ 100 v[πroot+,∗], donde v[πroot+,∗] denota la calidad óptima de la solución. Prueba. Demostramos esta proposición utilizando inducción matemática en la profundidad del árbol DFS. Caso base: profundidad = 1 (es decir, un nodo). La mejor respuesta se calcula iterando a través de todas las políticas, Πk. Una política, πk, se poda si δ 100 ˆv[πk, πk− ] < umbral. Por lo tanto, la política de respuesta óptima calculada por PAX sería al menos δ 100 veces la mejor respuesta óptima. Por lo tanto, la proposición se cumple para el caso base. Suposición: La proposición se cumple para d, donde 1 ≤ profundidad ≤ d. Ahora debemos demostrar que la proposición se cumple para d + 1. Sin pérdida de generalidad, asumamos que el nodo raíz de este árbol tiene k hijos. Cada uno de estos niños tiene una profundidad ≤ d, y por lo tanto, a partir de la suposición, la calidad de la solución en el k-ésimo niño es al menos δ 100 v[πk+,∗ , πk− ] para PAX. Con SPIDER-ABS, una política conjunta se poda en el agente raíz si ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ]. Sin embargo, con PAX, una política conjunta se poda si δ 100 ˆv[πroot, πroot− ] < k δ 100 v[πk+,∗ , πk− ] ⇒ ˆv[πroot, πroot− ] < k v[πk+,∗ , πk− ]. Dado que la condición de poda en el agente raíz en PAX es la misma que en SPIDER-ABS, no se introduce ningún error en el agente raíz y todo el error se introduce en los hijos. Por lo tanto, la calidad de la solución global es al menos δ 100 de la solución óptima. Por lo tanto, demostrado. 5. RESULTADOS EXPERIMENTALES Todos nuestros experimentos se llevaron a cabo en el dominio de redes de sensores de la Sección 2. Las cinco configuraciones de red empleadas se muestran en la Figura 4. Los algoritmos con los que experimentamos son GOA, SPIDER, SPIDER-ABS, PAX y VAX. Comparamos con GOA porque es el único algoritmo óptimo global que considera más de dos agentes. Realizamos dos conjuntos de experimentos: (i) en primer lugar, comparamos el rendimiento en tiempo de ejecución de los algoritmos mencionados anteriormente y (ii) en segundo lugar, experimentamos con PAX y VAX para estudiar el equilibrio entre el tiempo de ejecución y la calidad de la solución. Los experimentos fueron terminados después de 10000 segundos. La Figura 5(a) proporciona comparaciones de tiempo de ejecución entre los algoritmos óptimos GOA, SPIDER, SPIDER-Abs y los algoritmos aproximados, PAX (con un δ de 30) y VAX (con un δ de 80). El eje X denota las especificaciones de la máquina 1 para todos los experimentos: procesador Intel Xeon de 3.6 GHz, 2GB de RAM y configuración de red de sensores utilizada, mientras que el eje Y indica el tiempo de ejecución (en una escala logarítmica). El horizonte temporal de cálculo de políticas fue de 3. Para cada configuración (cadena de 3, cadena de 4, estrella de 4 y estrella de 5), hay cinco barras que indican el tiempo tomado por GOA, SPIDER, SPIDERAbs, PAX y VAX. GOA no se terminó dentro del límite de tiempo para las configuraciones de 4 estrellas y 5 estrellas. SPIDER-Abs dominó al SPIDER y al GOA en todas las configuraciones. Por ejemplo, en la configuración de 3 cadenas, SPIDER-ABS proporciona una aceleración de 230 veces sobre GOA y una aceleración de 2 veces sobre SPIDER, y para la configuración de 4 cadenas proporciona una aceleración de 58 veces sobre GOA y una aceleración de 2 veces sobre SPIDER. Los dos enfoques de aproximación, VAX y PAX, proporcionaron una mejora adicional en el rendimiento sobre SPIDER-Abs. Por ejemplo, en la configuración de 5 estrellas, VAX proporciona una aceleración de 15 veces y PAX proporciona una aceleración de 8 veces sobre SPIDER-Abs. La figura 5(b) proporciona una comparación de la calidad de la solución obtenida utilizando los diferentes algoritmos para los problemas probados en la figura 5(a). El eje X denota la configuración de la red de sensores, mientras que el eje Y indica la calidad de la solución. Dado que GOA, SPIDER y SPIDER-Abs son todos algoritmos óptimos globales, la calidad de la solución es la misma para todos esos algoritmos. Para la configuración 5-P, los algoritmos óptimos globales no terminaron dentro del límite de 10000 segundos, por lo que la barra de calidad óptima indica un límite superior en la calidad de la solución óptima. Con ambas aproximaciones, obtuvimos una calidad de solución que estuvo cerca de la calidad de la solución óptima. En las configuraciones de 3-cadena y 4-estrella, es notable que tanto PAX como VAX obtuvieron casi la misma calidad real que los algoritmos óptimos globales, a pesar del parámetro de aproximación y δ. Para otras configuraciones también, la pérdida de calidad fue menor al 20% de la calidad de la solución óptima. La Figura 5(c) muestra el tiempo de solución con PAX (para diferentes valores de épsilon). El eje X denota el parámetro de aproximación, δ (porcentaje respecto al óptimo) utilizado, mientras que el eje Y denota el tiempo tomado para calcular la solución (en una escala logarítmica). El horizonte temporal para todas las configuraciones fue de 4. A medida que δ disminuyó de 70 a 30, el tiempo de solución disminuyó drásticamente. Por ejemplo, en el caso de la cadena de 3, hubo un aumento total de velocidad de 170 veces cuando el δ se cambió de 70 a 30. Curiosamente, incluso con un δ bajo del 30%, la calidad de la solución real se mantuvo igual a la obtenida al 70%. La Figura 5(d) proporciona el tiempo de solución para todas las configuraciones con VAX (para diferentes valores de épsilon). El eje X denota el parámetro de aproximación utilizado, mientras que el eje Y denota el tiempo tomado para calcular la solución (en una escala logarítmica). El horizonte temporal para todas las configuraciones fue de 4. A medida que se aumentó, el tiempo de solución disminuyó drásticamente. Por ejemplo, en el caso de las 4 estrellas hubo un aumento total de velocidad de 73 veces cuando se cambió de 60 a 140. Nuevamente, la calidad de la solución real no cambió al variar epsilon. Figura 4: Configuraciones de redes de sensores 828 El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Figura 5: Comparación de GOA, SPIDER, SPIDER-Abs y VAX para T = 3 en (a) Tiempo de ejecución y (b) Calidad de la solución; (c) Tiempo de solución para PAX con porcentaje variable a lo óptimo para T=4 (d) Tiempo de solución para VAX con epsilon variable para T=4 6. RESUMEN Y TRABAJO RELACIONADO Este artículo presenta cuatro algoritmos SPIDER, SPIDER-ABS, PAX y VAX que ofrecen una combinación novedosa de características para la búsqueda de políticas en POMDP distribuidos: (i) explotando la estructura de interacción de agentes dada una red de agentes (es decir, una escalabilidad más fácil a un mayor número de agentes); (ii) utilizando búsqueda de ramificación y acotación con una función heurística basada en MDP; (iii) utilizando abstracción para mejorar el rendimiento en tiempo de ejecución sin sacrificar la calidad de la solución; (iv) proporcionando límites de porcentaje a priori sobre la calidad de las soluciones utilizando PAX; y (v) proporcionando límites de valor esperado sobre la calidad de las soluciones utilizando VAX. Estas características permiten el intercambio sistemático de la calidad de la solución por el tiempo de ejecución en redes de agentes que operan bajo incertidumbre. Los resultados experimentales muestran una mejora de órdenes de magnitud en el rendimiento respecto a los algoritmos óptimos globales anteriores. Los investigadores suelen emplear dos tipos de técnicas para resolver POMDP distribuidos. El primer conjunto de técnicas calcula soluciones óptimas globales. Hansen et al. [5] presentan un algoritmo basado en programación dinámica y eliminación iterada de políticas dominantes, que proporciona soluciones óptimas para POMDP distribuidos. Szer et al. [13] proporcionan un método de búsqueda heurística óptimo para resolver POMDP descentralizados. Este algoritmo se basa en la combinación de un algoritmo clásico de búsqueda heurística, A∗ y la teoría de control descentralizado. Las principales diferencias entre SPIDER y MAA* son: (a) Las mejoras en SPIDER (VAX y PAX) permiten aproximaciones de calidad garantizada, mientras que MAA* es un algoritmo óptimo global y, por lo tanto, implica una complejidad computacional significativa; (b) Debido a la incapacidad de MAA* para explotar la estructura de interacción, solo se ilustró con dos agentes. Sin embargo, SPIDER ha sido diseñado para redes de agentes; y (c) SPIDER explora la política conjunta de un agente a la vez, mientras que MAA* la expande un paso a la vez (de manera simultánea para todos los agentes). El segundo conjunto de técnicas busca políticas aproximadas. Emery Montemerlo et al. [4] aproximan los POSGs como una serie de juegos bayesianos de un paso utilizando heurísticas para aproximar el valor futuro, intercambiando una mirada limitada por eficiencia computacional, lo que resulta en políticas localmente óptimas (con respecto a la heurística seleccionada). El algoritmo JESP de Nair et al. [9] utiliza programación dinámica para alcanzar una solución óptima local para POMDP descentralizados de horizonte finito. Peshkin et al. [11] y Bernstein et al. [2] son ejemplos de técnicas de búsqueda de políticas que buscan políticas óptimas localmente. Aunque todas las técnicas anteriores mejoran considerablemente la eficiencia del cálculo de políticas, no pueden proporcionar límites de error sobre la calidad de la solución. Este aspecto de los límites de calidad diferencia a SPIDER de todas las técnicas anteriores. Agradecimientos. Este material se basa en el trabajo respaldado por la Agencia de Proyectos de Investigación Avanzada de Defensa (DARPA), a través del Departamento del Interior, NBC, División de Servicios de Adquisición bajo el Contrato No. NBCHD030010. Las opiniones y conclusiones contenidas en este documento son las de los autores y no deben interpretarse como representativas de las políticas oficiales, ya sea expresadas o implícitas, de la Agencia de Proyectos de Investigación Avanzada de Defensa o del Gobierno de los Estados Unidos. REFERENCIAS [1] R. Becker, S. Zilberstein, V. Lesser y C.V. Goldman. Resolviendo procesos de decisión de Markov descentralizados independientes de la transición. JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A. 

JAIR, 22:423-455, 2004. [2] D. S. Bernstein, E.A. Hansen y S. Zilberstein. Iteración de política acotada para POMDP descentralizados. En IJCAI, 2005. [3] D. S. Bernstein, S. Zilberstein y N. Immerman. La complejidad del control descentralizado de MDPs. En UAI, 2000. [4] R. Emery-Montemerlo, G. Gordon, J. Schneider y S. Thrun. Soluciones aproximadas para juegos estocásticos parcialmente observables con pagos comunes. En AAMAS, 2004. [5] E. Hansen, D. Bernstein y S. Zilberstein. Programación dinámica para juegos estocásticos parcialmente observables. En AAAI, 2004. [6] V. Lesser, C. Ortiz y M. Tambe. Redes de sensores distribuidos: Una perspectiva multiagente. Kluwer, 2003. [7] R. Maheswaran, M. Tambe, E. Bowring, J. Pearce y P. Varakantham. Llevando dcop al mundo real: Soluciones completas eficientes para la programación distribuida de eventos. En AAMAS, 2004. [8] P. J. Modi, W. Shen, M. Tambe y M. Yokoo. Un método completo asíncrono para la optimización de restricciones distribuidas. En AAMAS, 2003. [9] R. Nair, D. Pynadath, M. Yokoo, M. Tambe y S. Marsella. Domando POMDP descentralizados: Hacia el cálculo eficiente de políticas para entornos multiagentes. En IJCAI, 2003. [10] R. Nair, P. Varakantham, M. Tambe y M. Yokoo. POMDPs distribuidos en red: Una síntesis de optimización de restricciones distribuidas y POMDPs. En AAAI, 2005. [11] L. Peshkin, N. Meuleau, K.-E. Kim y L. Kaelbling. Aprendiendo a cooperar a través de la búsqueda de políticas. En UAI, 2000. [12] A. Petcu y B. Faltings. Un método escalable para la optimización de restricciones multiagente. En IJCAI, 2005. [13] D. Szer, F. Charpillet y S. Zilberstein. MAA*: Un algoritmo de búsqueda heurística para resolver POMDP descentralizados. En IJCAI, 2005. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 829