Un enfoque de capa cruzada para el descubrimiento y distribución de recursos en redes móviles ad-hoc Chaiporn Jaikaeo Ingeniería Informática Universidad de Kasetsart, Tailandia (+662) 942-8555 Ext 1424 cpj@cpe.ku.ac.th Xiang Cao Ciencias de la Computación e Información Universidad de Delaware, EE. UU. (+1) 302-831-1131 cao@cis.udel.edu Chien-Chung Shen Ciencias de la Computación e Información Universidad de Delaware, EE. UU. (+1) 302-831-1951 cshen@cis.udel.edu RESUMEN Este artículo describe un enfoque de capa cruzada para diseñar un sistema P2P robusto sobre redes móviles ad-hoc. El diseño se basa en primitivas funcionales simples que permiten integrar el enrutamiento en las capas P2P y de red para reducir la sobrecarga. Con estos primitivos, el artículo aborda diversas técnicas de equilibrio de carga. También se presentan los resultados preliminares de la simulación. Categorías y Descriptores de Asignaturas C.2.4 [Sistemas Distribuidos]: Aplicaciones Distribuidas Términos Generales Algoritmos y diseño 1. Las redes móviles ad-hoc (MANETs) consisten en nodos móviles que establecen autonomamente conectividad a través de comunicaciones inalámbricas de múltiples saltos. Sin depender de ninguna infraestructura de red existente preconfigurada o control centralizado, las MANET son útiles en situaciones donde se requieren instalaciones de comunicación improvisadas, como comunicaciones en el campo de batalla y misiones de ayuda en casos de desastre. Dado que las aplicaciones de MANET requieren procesamiento colaborativo y intercambio de información entre nodos móviles, el descubrimiento y distribución de recursos (servicios) se han convertido en capacidades indispensables. Un enfoque para diseñar esquemas de descubrimiento y distribución de recursos sobre MANETs es construir un sistema peer-to-peer (P2P) (o una superposición) que organiza a los pares del sistema en una estructura lógica, sobre la topología de red real. Sin embargo, implementar sistemas P2P en MANETs puede resultar en un gran número de operaciones de inundación desencadenadas por el proceso de enrutamiento reactivo, o ineficiencia en cuanto a la utilización del ancho de banda en esquemas de enrutamiento proactivo. De cualquier manera, construir una superposición potencialmente creará un problema de escalabilidad para MANETs a gran escala. Debido a la naturaleza dinámica de las MANETs, los sistemas P2P deben ser robustos al ser escalables y adaptables a los cambios de topología. Estos sistemas también deben proporcionar formas eficientes y efectivas para que los compañeros interactúen, así como otras características específicas de la aplicación deseables. Este documento describe un paradigma de diseño que utiliza los siguientes dos primitivos funcionales para diseñar esquemas robustos de descubrimiento y distribución de recursos sobre MANETs. 1. Retroalimentación positiva/negativa. Los paquetes de consulta se utilizan para explorar una ruta hacia otros pares que poseen recursos de interés. Opcionalmente, se envían paquetes de publicidad para anunciar rutas de otros pares sobre recursos disponibles. Al recorrer una ruta, estos paquetes de control miden la calidad de la ruta y dejan información de retroalimentación en cada nodo a lo largo del camino para guiar a los siguientes paquetes de control en direcciones apropiadas. Caminata aleatoria esporádica. A medida que la topología de la red y/o la disponibilidad de recursos cambian, las rutas existentes pueden volverse obsoletas mientras que rutas mejores están disponibles. La caminata aleatoria esporádica permite que un paquete de control explore diferentes rutas y descubra oportunísticamente nuevas y/o mejores rutas. Adoptando este paradigma, todo el sistema MANET P2P opera como una colección de entidades autónomas que consisten en diferentes tipos de paquetes de control, como paquetes de consulta y de anuncio. Estos paquetes trabajan colaborativamente, pero de forma indirecta, para lograr tareas comunes, como el descubrimiento de recursos, enrutamiento y equilibrio de carga. Con la colaboración entre estas entidades, un sistema MANET P2P es capaz de aprender la dinámica de la red por sí mismo y ajustar su comportamiento en consecuencia, sin la sobrecarga de organizar a los pares en una superposición. El resto de este documento está organizado de la siguiente manera. El trabajo relacionado se describe en la siguiente sección. La sección 3 describe el esquema de descubrimiento de recursos. La sección 4 describe el esquema de distribución de recursos. El esquema de invalidación de réplicas se describe en la Sección 5, seguido de su evaluación de rendimiento en la Sección 6. La sección 7 concluye el artículo. 2. TRABAJO RELACIONADO Para MANETs, los sistemas P2P pueden clasificarse según el principio de diseño, en enfoques por capas y enfoques de capa cruzada. Un enfoque en capas adopta una solución similar a P2P, donde el descubrimiento de recursos se facilita como un protocolo de capa de aplicación y los mensajes de consulta y respuesta son entregados por los protocolos de enrutamiento MANET subyacentes. Por ejemplo, Konark utiliza un protocolo de multidifusión subyacente de manera que los proveedores de servicios y los solicitantes publican y buscan servicios a través de un grupo de multidifusión predefinido, respectivamente. Proem [3] es una plataforma de computación móvil de alto nivel para sistemas P2P sobre MANETs. Define un protocolo de transporte que se sitúa encima del stack TCP/IP existente, por lo tanto, depende de un protocolo de enrutamiento existente para operar. Con un control limitado sobre cómo se enrutan los paquetes de control y datos en la red, es difícil evitar la ineficiencia de los protocolos de enrutamiento de propósito general que suelen ser reactivos y basados en inundaciones. Por el contrario, los enfoques de capas cruzadas se basan en su propio mecanismo de enrutamiento o mejoran los algoritmos de enrutamiento MANET existentes para admitir el descubrimiento de recursos. 7DS [4], que es el trabajo pionero en implementar un sistema P2P en dispositivos móviles, explota la localidad de los datos y la movilidad de los nodos para diseminar datos de manera de un solo salto. Por lo tanto, una larga latencia de búsqueda puede resultar en que un nodo 7DS solo pueda obtener datos de interés si el nodo que tiene los datos está dentro de su cobertura de radio. Mohan et al. [5] proponen un algoritmo adaptativo de descubrimiento de servicios que combina tanto modelos de empuje como de extracción. Específicamente, un proveedor de servicios/consultas transmite anuncios/consultas solo cuando el número de nodos que anuncian o consultan, estimado por los paquetes de control recibidos, está por debajo de un umbral durante un período de tiempo. De esta manera, se limita el número de paquetes de control en la red, lo que proporciona una buena escalabilidad. A pesar del mecanismo para reducir los paquetes de control, es posible que todavía exista un alto sobrecargo, especialmente cuando hay muchos clientes intentando localizar diferentes servicios, debido a que el algoritmo se basa en la inundación. Para la replicación de recursos, Yin y Cao [6] diseñan y evalúan técnicas de almacenamiento en caché cooperativo para MANETs. Sin embargo, el almacenamiento en caché se realiza de forma reactiva por nodos intermedios cuando un solicitante solicita datos a un servidor. Los elementos de datos o recursos nunca se envían a otros nodos de forma proactiva. Thanedar et al. [7] proponen un esquema de replicación de contenido ligero utilizando una técnica de anillo expansivo. Si un servidor detecta que el número de solicitudes excede un umbral dentro de un período de tiempo, comienza a replicar sus datos en nodos capaces de almacenar réplicas, cuyos recuentos de saltos desde el servidor son de ciertos valores. Dado que la replicación de datos se activa únicamente por la frecuencia de las solicitudes, es posible que se creen réplicas innecesarias en un amplio alcance, aunque solo los nodos dentro de un rango pequeño soliciten estos datos. Nuestro mecanismo propuesto de replicación de recursos, en contraste, intenta replicar un elemento de datos en áreas apropiadas, en lugar de en una gran área alrededor del servidor, donde el elemento es solicitado con frecuencia. 3. DESCUBRIMIENTO DE RECURSOS Proponemos un esquema de descubrimiento de recursos híbrido de capa cruzada que se basa en las múltiples interacciones de paquetes de consulta, respuesta y publicidad. Suponemos que cada recurso está asociado con un ID único. Inicialmente, cuando un nodo quiere descubrir un recurso, despliega paquetes de consulta, que llevan el ID del recurso correspondiente, y exploran aleatoriamente la red en busca del recurso solicitado. Al recibir un paquete de consulta de este tipo, el nodo que proporciona el recurso solicitado genera un paquete de respuesta. Los paquetes de publicidad también se pueden utilizar para informar de manera proactiva a otros nodos sobre los recursos disponibles en cada nodo. Además de descubrir la identidad del nodo que proporciona el recurso solicitado, también puede ser necesario descubrir una ruta que conduzca a este nodo para una interacción adicional. Para permitir que los nodos intermedios tomen una decisión sobre dónde reenviar los paquetes de consulta, cada nodo mantiene dos tablas: la tabla de vecinos y la tabla de feromonas. Se hace la suposición de un ID único para mayor brevedad en la exposición, y los recursos podrían especificarse a través de afirmaciones de atributo-valor. La tabla de vecinos mantiene una lista de todos los vecinos actuales obtenidos a través de un protocolo de descubrimiento de vecinos. La tabla de feromonas mantiene el mapeo de un ID de recurso y un ID de vecino a un valor de feromona. Esta tabla está inicialmente vacía y se actualiza con un paquete de respuesta generado por una consulta exitosa. La Figura 1 ilustra un ejemplo de una tabla de vecinos y una tabla de feromonas mantenidas por el nodo A que tiene cuatro vecinos. Cuando el nodo A recibe un paquete de consulta buscando un recurso, toma la decisión de a qué vecino debe reenviar el paquete de consulta calculando la deseabilidad de cada uno de los vecinos que no han sido visitados antes por el mismo paquete de consulta. Para un ID de recurso r, la deseabilidad de elegir un vecino n, δ(r,n), se obtiene del valor de feromona de la entrada cuyos campos de vecino e ID de recurso son n y r, respectivamente. Si no existe tal entrada en la tabla de feromonas, δ(r,n) se establece en cero. Una vez que se han calculado las deseabilidades de todos los próximos saltos válidos, se normalizan para obtener la probabilidad de elegir a cada vecino. Además, también se asigna una pequeña probabilidad a aquellos vecinos con cero deseabilidad para realizar el paseo aleatorio esporádico primitivo. Basándose en estas probabilidades, se selecciona un próximo salto para reenviar el paquete de consulta. Cuando un paquete de consulta encuentra un nodo con un recurso satisfactorio, se devuelve un paquete de respuesta al nodo que realiza la consulta. El paquete de respuesta que regresa también actualiza la tabla de feromonas en cada nodo en su viaje de regreso al aumentar el valor de feromona en la entrada cuyos campos de ID de recurso e ID de vecino coinciden con el ID del recurso descubierto y el salto anterior, respectivamente. Si no existe tal entrada, se añade una nueva entrada a la tabla. Por lo tanto, los paquetes de consulta subsecuentes que buscan el mismo recurso, al encontrar esta información de feromona, son luego guiados hacia el mismo destino con una pequeña probabilidad de tomar un camino alternativo. Dado que el esquema de descubrimiento híbrido no se basa ni en un protocolo de enrutamiento MANET ni organiza los nodos en una superposición lógica, los paquetes de consulta deben atravesar la topología de red real. En redes densas, los grados nodales relativamente grandes pueden tener impactos potenciales en este mecanismo de exploración aleatoria. Para abordar este problema, el esquema híbrido también incorpora publicidad proactiva además de la consulta reactiva. Para realizar publicidad proactiva, cada nodo despliega periódicamente un paquete publicitario que contiene una lista de los IDs de sus recursos disponibles. Estos paquetes se desplazarán lejos del nodo de publicidad de manera aleatoria hasta un número limitado de saltos y anunciarán información de recursos a los nodos circundantes de la misma manera que los paquetes de respuesta. En el esquema híbrido, un aumento de feromona actúa como un retroalimentación positiva que guía indirectamente los paquetes de consulta en busca de recursos similares. De manera intuitiva, la cantidad de feromona aumentada es inversamente proporcional a la distancia que ha recorrido el paquete de respuesta de regreso, y otros factores, como la calidad del recurso, también podrían contribuir a esta cantidad. Cada nodo también realiza una retroalimentación negativa implícita para los recursos que no han recibido una retroalimentación positiva durante algún tiempo al disminuir regularmente la feromona en todas las entradas de su tabla de feromonas con el tiempo. Además, la feromona puede ser reducida por una respuesta negativa explícita, por ejemplo, un paquete de respuesta que regresa de un nodo que no está dispuesto a proporcionar un recurso debido a una carga de trabajo excesiva. Como resultado, el equilibrio de carga puede lograrse a través de retroalimentación positiva y negativa. Un nodo que sirve a demasiados nodos puede devolver menos respuestas a los paquetes de consulta o generar respuestas negativas. 2 La 3ª Conferencia Internacional sobre Tecnología Móvil, Aplicaciones y Sistemas - Movilidad 2006 Figura 1: Ejemplo que ilustra las tablas de vecinos y feromonas mantenidas por el nodo A: (a) conectividad inalámbrica alrededor de A mostrando que actualmente tiene cuatro vecinos, (b) tabla de vecinos de A, y (c) una posible tabla de feromonas de A Figura 2: Escenarios de muestra que ilustran los tres mecanismos que respaldan el equilibrio de carga: (a) replicación de recursos, (b) reubicación de recursos y (c) división de recursos 4. DISTRIBUCIÓN DE RECURSOS Además del descubrimiento de recursos, un nodo de consulta generalmente intenta acceder y recuperar el contenido de un recurso después de un descubrimiento exitoso. En ciertas situaciones, también es beneficioso tener un recurso disponible fácilmente en múltiples nodos cuando el recurso puede ser reubicado y/o replicado, como en el caso de archivos de datos. Además, en las MANETs, debemos considerar no solo la cantidad de carga manejada por un proveedor de recursos, sino también la carga en esos nodos intermedios que se encuentran en los caminos de comunicación entre el proveedor y otros nodos también. Por lo tanto, describimos un esquema de distribución de recursos híbrido de capa cruzada para lograr el equilibrio de carga mediante la incorporación de las funcionalidades de reubicación de recursos, replicación de recursos y división de recursos. 4.1 Replicación de Recursos Múltiples réplicas de un recurso en la red ayudan a prevenir que un único nodo, así como los nodos que lo rodean, se sobrecarguen con un gran número de solicitudes y transferencias de datos. Un ejemplo es cuando un nodo ha obtenido un archivo de datos de otro nodo, el nodo solicitante y los nodos intermedios pueden almacenar en caché el archivo y comenzar a compartir ese archivo con otros nodos cercanos de inmediato. Además, los recursos replicables también pueden ser replicados de manera proactiva en otros nodos ubicados en ciertas áreas estratégicas. Por ejemplo, para ayudar a los nodos a encontrar un recurso rápidamente, podríamos replicar el recurso para que sea accesible mediante un recorrido aleatorio durante un número específico de saltos desde cualquier nodo con cierta probabilidad, como se muestra en la Figura 2(a). Para llevar a cabo esta característica, el esquema de distribución de recursos híbrido emplea un tipo diferente de paquete de control, llamado paquete de replicación de recursos, que es responsable de encontrar un lugar adecuado para crear una réplica de un recurso. Un paquete de replicación de recursos de tipo R es desplegado por un nodo que está proporcionando el recurso R en sí mismo. A diferencia de un paquete de consulta que sigue la feromona más alta aguas arriba hacia un recurso que busca, un paquete de replicación de recurso tiende a ser impulsado lejos de recursos similares al moverse aguas abajo hacia feromonas más débiles. Cuando un paquete de replicación de recursos se encuentra en un área con suficientemente baja concentración de feromonas, toma una decisión sobre si debe seguir explorando o regresar. La decisión depende de condiciones como la carga de trabajo actual y/o la energía restante del nodo visitado, así como la popularidad del recurso en sí mismo. 4.2 Reubicación de Recursos En ciertas situaciones, puede ser necesario transferir un recurso de un nodo a otro. Por ejemplo, un nodo puede ya no querer poseer un archivo debido a la escasez de espacio de almacenamiento, pero no puede simplemente eliminar el archivo ya que otros nodos aún pueden necesitarlo en el futuro. En este caso, el nodo puede optar por crear réplicas del archivo mediante el mecanismo de replicación de recursos mencionado anteriormente y luego eliminar su propia copia. Consideremos una situación en la que la mayoría de los nodos que solicitan un recurso se encuentran lejos del proveedor de recursos, como se muestra en la parte superior de la Figura 2(b). Si el recurso R es reubicable, se prefiere que sea trasladado a otra área que esté más cerca de esos nodos, similar a la parte inferior de la misma figura. Por lo tanto, el ancho de banda de la red se utiliza de manera más eficiente. La tercera Conferencia sobre Tecnología Móvil, Aplicaciones y Sistemas - Movilidad 2006. El esquema híbrido de distribución de recursos incorpora algoritmos de reubicación de recursos que son adaptables a las solicitudes de los usuarios y tienen como objetivo reducir la sobrecarga de comunicación. Específicamente, siguiendo el mismo concepto de mantenimiento de feromonas, el esquema híbrido de distribución de recursos introduce otro tipo de feromona que corresponde a las solicitudes de los usuarios, en lugar de los recursos. Este tipo de feromona, llamada feromona de solicitud, es establecida por paquetes de consulta que se encuentran en sus fases de exploración (no de retorno) para guiar un recurso a una nueva ubicación. 4.3 División de Recursos Ciertos tipos de recursos pueden dividirse en subrecursos más pequeños (por ejemplo, un archivo grande dividido en archivos más pequeños) y distribuirse en múltiples ubicaciones para evitar sobrecargar un único nodo, como se muestra en la Figura 2(c). El esquema de distribución de recursos híbrido incorpora un mecanismo de división de recursos que opera en una capa delgada justo por encima de todos los otros mecanismos descritos anteriormente. El mecanismo de división de recursos es responsable de descomponer recursos divisibles en subrecursos, y luego agrega una palabra clave adicional para distinguir cada subrecurso entre sí. Por lo tanto, cada uno de estos subrecursos será visto por los otros mecanismos como un único recurso que puede ser descubierto, replicado y reubicado de forma independiente. El mecanismo de división de recursos también es responsable de combinar datos de estos subrecursos juntos (por ejemplo, fusionar partes de un archivo) y entregar el resultado final a la aplicación. INVALIDACIÓN DE REPLICA Aunque las réplicas mejoran la accesibilidad y equilibran la carga, la invalidación de réplicas se convierte en un problema crítico cuando los nodos que almacenan recursos actualizables pueden actualizar simultáneamente sus propias réplicas, lo que hace que las réplicas mantenidas por otros nodos queden obsoletas. La mayoría de las soluciones existentes al problema de invalidación de réplicas imponen restricciones que solo la fuente de datos podría realizar actualizaciones e invalidar otras réplicas, o recurren a inundaciones en toda la red que resultan en un tráfico de red pesado y conducen a problemas de escalabilidad, o ambas cosas. La falta de soporte de infraestructura y los frecuentes cambios de topología en MANETs complican aún más el problema. Aplicamos el mismo paradigma de capas cruzadas para invalidar réplicas en MANETs, lo que permite actualizaciones concurrentes realizadas por múltiples réplicas. Para coordinar actualizaciones concurrentes y diseminar invalidaciones de réplicas, se mantiene de forma adaptativa una infraestructura especial, llamada malla de validación o simplemente malla, entre los nodos que poseen réplicas válidas de un recurso. Una vez que un nodo ha actualizado su réplica, un paquete de invalidación solo se difundirá a través de la malla de validación para informar a otros nodos que poseen réplicas que sus réplicas se han vuelto inválidas y deben ser eliminadas. La estructura (topología) de la malla de validación sigue evolucionando (1) cuando los nodos solicitan y almacenan en caché un recurso, (2) cuando los nodos actualizan sus réplicas respectivas e invalidan otras réplicas, y (3) cuando los nodos se mueven. Para adaptarse a la dinámica, nuestro esquema integra los componentes de la inteligencia de enjambre para mantener de forma adaptativa la malla de validación sin depender de ningún protocolo de enrutamiento MANET subyacente. En particular, el esquema tiene en cuenta las actualizaciones concurrentes iniciadas por múltiples nodos para garantizar la consistencia entre réplicas. Además, el número de versión se utiliza para distinguir las réplicas nuevas de las antiguas al invalidar cualquier réplica obsoleta. Los resultados de la simulación muestran que el esquema propuesto facilita de manera efectiva las actualizaciones de réplicas concurrentes y realiza de manera eficiente la invalidación de réplicas sin incurrir en inundaciones en toda la red. La Figura 3 representa la idea de una malla de validación que mantiene la conectividad entre los nodos que contienen réplicas válidas de un recurso para evitar la inundación en toda la red al invalidar las réplicas. Figura 3: Ejemplos que muestran el mantenimiento de la malla de validación. Hay ocho nodos en la red de muestra, y comenzamos con solo el nodo A que tiene el archivo válido, como se muestra en la Figura 3(a). Más tarde, el nodo G emite un paquete de consulta para el archivo y finalmente obtiene el archivo de A a través de los nodos B y D. Dado que se permite a los nodos intermedios almacenar en caché los datos reenviados, los nodos B, D y G ahora tendrán réplicas válidas del archivo. Como resultado, se establece una malla de validación entre los nodos A, B, D y G, como se muestra en la Figura 3(b). En la Figura 3(c), otro nodo, H, ha emitido un paquete de consulta para el mismo archivo y lo ha obtenido del caché del nodo B a través del nodo E. En este punto, seis nodos tienen réplicas válidas y están conectados a través de la malla de validación. Ahora asumimos que el nodo G actualiza su réplica del archivo e informa a los otros nodos enviando un paquete de invalidación a través de la malla de validación. En consecuencia, todos los demás nodos excepto G eliminan sus réplicas del archivo de su almacenamiento y la malla de validación se desmonta. Sin embargo, el feromona de reenvío de consultas, como se indica por las flechas punteadas en la Figura 3(d), se configura en estos nodos a través de los caminos inversos por los cuales han transitado los paquetes de invalidación, para que las futuras solicitudes de este archivo sean reenviadas al nodo G. En la Figura 3(e), el nodo H realiza una nueva solicitud del archivo nuevamente. Esta vez, su paquete de consulta sigue la feromona hacia el nodo G, donde se puede obtener el archivo actualizado. Finalmente, se establece una nueva malla de validación sobre los nodos G, B, D, E y H. Para mantener una malla de validación entre los nodos que contienen réplicas válidas, se designa a uno de ellos como nodo focal. Inicialmente, el nodo que originalmente contiene los datos es el nodo focal. A medida que los nodos actualizan réplicas, el nodo que actualiza por última vez (o más recientemente) una réplica correspondiente a la 3ª Conferencia Internacional sobre Tecnología Móvil, Aplicaciones y Sistemas - Movilidad 2006 asume el papel de nodo focal. También nombramos nodos, como G y H, que originan solicitudes para replicar datos como clientes, y nodos B, D y E que almacenan en caché localmente los datos que pasan como nodos de datos. Por ejemplo, en las Figuras 3(a), 3(b) y 3(c), el nodo A es el nodo focal; en las Figuras 3(d), 3(e) y 3(f), el nodo G se convierte en el nodo focal. Además, para dar cabida a los nodos recién participantes y a la movilidad de los nodos, el nodo focal inunda periódicamente la malla de validación con un paquete de mantenimiento de conexión, de modo que los nodos que pueden escuchar este paquete se consideran a sí mismos parte de la malla de validación. Si un nodo que contiene una réplica válida/actualizada no recibe un paquete de keep-alive durante un cierto intervalo de tiempo, desplegará un paquete de búsqueda utilizando el mecanismo de descubrimiento de recursos descrito en la Sección 3 para encontrar otro nodo (llamado punto de conexión) actualmente en la malla de validación al que pueda conectarse. Una vez que se encuentra un punto de conexión, se envía un paquete de respuesta de búsqueda al nodo desconectado que inició la búsqueda. Los nodos intermedios que reenvíen el paquete de respuesta de búsqueda también formarán parte de la malla de validación. Para ilustrar el efecto de la movilidad de los nodos, en la Figura 3(f), el nodo H se ha desplazado a una ubicación donde no está directamente conectado a la malla. A través del mecanismo de descubrimiento de recursos, el nodo H depende de un nodo intermedio F para conectarse a la malla. Aquí, el nodo F, aunque forma parte de la malla de validación, no contiene réplicas de datos y, por lo tanto, se le denomina nodo no de datos. El cliente y el nodo de datos que siguen escuchando los paquetes keep-alive del nodo focal actúan como si tuvieran una réplica válida, de modo que puedan responder a los paquetes de consulta, como el nodo B en la Figura 3(c) respondiendo a una solicitud del nodo H. Mientras un nodo desconectado intenta descubrir un punto de conexión para volver a unirse a la malla, el nodo desconectado no puede responder a un paquete de consulta. Por ejemplo, en la Figura 3(f), el nodo H no responde a ningún paquete de consulta antes de volver a conectarse a la malla. Aunque la malla de validación proporciona una topología conceptual que (1) conecta todas las réplicas entre sí, (2) coordina actualizaciones concurrentes y (3) disemina paquetes de invalidación, el problema técnico es cómo una topología de malla de este tipo podría mantenerse y evolucionar de manera efectiva y eficiente cuando (a) los nodos solicitan y almacenan en caché un recurso, (b) cuando los nodos actualizan sus respectivas réplicas e invalidan otras réplicas, y (c) cuando los nodos se mueven. Sin depender de ningún protocolo de enrutamiento MANET, las dos primitivas trabajan juntas para facilitar una búsqueda eficiente y un mantenimiento adaptativo. 6. EVALUACIÓN DE RENDIMIENTO Hemos realizado experimentos de simulación utilizando el simulador QualNet para evaluar el rendimiento de los esquemas de descubrimiento de recursos, distribución de recursos e invalidación de réplicas descritos. Sin embargo, debido a limitaciones de espacio, solo se informa sobre el rendimiento de la invalidación de réplicas. En nuestros experimentos, ochenta nodos están distribuidos uniformemente sobre un terreno de tamaño 1000×1000 m2. Cada nodo tiene un rango de comunicación de aproximadamente 250 m a través de un canal inalámbrico de 2 Mbps, utilizando IEEE802.11 como capa MAC. Utilizamos el modelo de movilidad de punto de destino aleatorio con un tiempo de pausa de 1 segundo. Los nodos pueden moverse a velocidades mínimas y máximas de 1 m/s y 5 m/s, respectivamente. La Tabla 1 enumera otros ajustes de parámetros utilizados en la simulación. Inicialmente, hay un nodo de servidor de recursos en la red. Dos nodos son seleccionados al azar cada 10 segundos como clientes. Cada β segundos, verificamos el número de nodos, N, que han recibido datos. Luego seleccionamos de forma aleatoria Min(γ,N) nodos de ellos para iniciar la actualización de datos. Cada experimento se ejecuta durante 10 minutos. Tabla 1: Configuración de la simulación HOP_LIMIT 10 ADVERTISE_HOP_LIMIT 1 INTERVALO_KEEPALIVE 3 segundos NUM_SEARCH 1 INTERVALO_ANUNCIO 5 segundos INTERVALO_EXPIRACIÓN 10 segundos Tasa de Generación Promedio de Consultas 2 consultas / 10 seg Número Máximo de Actualizaciones Concurrentes (γ) 2 Frecuencia de Actualización (β) 3s Evaluamos el rendimiento bajo diferentes velocidades de movilidad, densidad, número máximo de nodos de actualización concurrentes y frecuencia de actualización utilizando dos métricas: • La sobrecarga promedio por actualización mide el número promedio de paquetes transmitidos por actualización en la red. • El retraso promedio por actualización mide cuánto tiempo tarda nuestro enfoque en completar una actualización en promedio. Todas las cifras mostradas presentan los resultados con un intervalo de confianza del 70%. Figura 4: Sobrecarga vs. velocidad para 80 nodos Figura 5: Sobrecarga vs. densidad Figura 6: Sobrecarga vs. número máximo de actualizaciones concurrentes Figura 7: Sobrecarga vs. frecuencia. Figura 8: Retraso vs. velocidad Figura 9: Retraso vs. densidad La 3ª Conferencia sobre Tecnología Móvil, Aplicaciones y Sistemas - Movilidad 2006 Figura 10: Retraso vs. máx. #actualizaciones concurrentes Figura 11: Retraso vs. frec. Las figuras 4, 5, 6 y 7 muestran el costo indirecto versus varios valores de parámetros. En la Figura 4, los costos generales aumentan a medida que la velocidad aumenta, lo cual se debe al hecho de que a medida que la velocidad aumenta, los nodos se mueven fuera de la malla con más frecuencia y enviarán más paquetes de búsqueda. Sin embargo, el costo adicional no es alto, e incluso a una velocidad de 10m/seg, el costo adicional está por debajo de 100 paquetes. En contraste, se espera que los paquetes sean más de 200 paquetes a diferentes velocidades cuando se utiliza el enrutamiento por inundación. La Figura 5 muestra que el gasto general casi se mantiene igual bajo diversas densidades. Eso se atribuye solo a la inundación sobre la malla en lugar de toda la red. El tamaño de la malla no varía mucho en diversas densidades, por lo que los costos generales no varían mucho. La Figura 6 muestra que el costo indirecto también permanece casi igual bajo varios números máximos de actualizaciones simultáneas. Eso se debe a que un nodo más significa una inundación más en la malla durante el proceso de actualización, por lo que el impacto es limitado. La Figura 7 muestra que si las actualizaciones ocurren con más frecuencia, el costo adicional es mayor. Esto se debe a que cuanto más rápidamente ocurran las actualizaciones, (1) habrá más mensajes keep_alive sobre la malla entre dos actualizaciones, y (2) los nodos se mueven fuera de la malla con más frecuencia y envían más paquetes de búsqueda. Las figuras 8, 9, 10 y 11 muestran la demora versus varios valores de parámetros. A partir de la Figura 8, sabemos que la demora aumenta a medida que la velocidad aumenta, lo cual se debe al hecho de que con una velocidad creciente, los clientes se moverán fuera de la malla con una probabilidad más alta. Cuando estos clientes quieran actualizar los datos, dedicarán tiempo primero a buscar en la malla. Cuanto mayor sea la velocidad, más tiempo necesitarán los clientes para buscar la malla. La Figura 9 muestra que el retraso no se ve afectado de manera significativa por la densidad. El retraso disminuye ligeramente a medida que aumenta el número de nodos, debido a que cuantos más nodos haya en la red, más nodos reciben los paquetes de publicidad, lo que ayuda a que el paquete de búsqueda encuentre el objetivo y, por lo tanto, el retraso de la actualización disminuye. La Figura 10 muestra que la demora disminuye ligeramente a medida que aumenta el número máximo de actualizaciones concurrentes. Cuanto mayor sea el número máximo de actualizaciones concurrentes, más nodos se seleccionan para realizar la actualización. Entonces, con mayor probabilidad, uno de estos nodos todavía está en la malla y finaliza la actualización inmediatamente (no es necesario buscar primero en la malla), lo que disminuye el retraso. La Figura 11 muestra cómo varía el retraso con la frecuencia de actualización. Cuando las actualizaciones ocurren con más frecuencia, el retraso será mayor. Debido a que cuanto menos frecuentemente se mueven los nodos en la malla, más tiempo necesitan para salir de la malla y buscarla cuando se actualizan, lo que aumenta el retraso. Los resultados de la simulación muestran que el esquema de invalidación de réplicas puede reducir significativamente la sobrecarga con un retraso aceptable. 7. CONCLUSIÓN Para facilitar el descubrimiento y distribución de recursos en MANETs, un enfoque es diseñar sistemas peer-to-peer (P2P) sobre MANETs que construyan una superposición organizando a los pares del sistema en una estructura lógica sobre la topología física de MANETs. Sin embargo, implementar una superposición sobre MANETs puede resultar en un gran número de operaciones de inundación desencadenadas por el proceso de enrutamiento, o ineficiencia en cuanto al uso del ancho de banda. Específicamente, el enrutamiento de superposición se basa en los protocolos de enrutamiento de capa de red. En el caso de un protocolo de enrutamiento reactivo, el enrutamiento en la superposición puede causar un gran número de mensajes de descubrimiento de ruta inundados, ya que la ruta de enrutamiento en cada paso de enrutamiento debe ser descubierta bajo demanda. Por otro lado, si se adopta un protocolo de enrutamiento proactivo, cada par debe transmitir periódicamente mensajes de control, lo que conduce a una baja eficiencia en términos de uso del ancho de banda. De cualquier manera, construir una superposición potencialmente sufrirá del problema de escalabilidad. El artículo describe un paradigma de diseño que utiliza las primitivas funcionales de retroalimentación positiva/negativa y caminata aleatoria esporádica para diseñar esquemas robustos de descubrimiento y distribución de recursos sobre MANETs. En particular, el esquema ofrece las características de (1) diseño de capas cruzadas de sistemas P2P, que permite integrar el proceso de enrutamiento en las capas P2P y de red para reducir la sobrecarga, (2) escalabilidad y soporte de movilidad, que minimiza el uso de operaciones de inundación global y combina de forma adaptativa la publicidad de recursos proactiva y el descubrimiento reactivo de recursos, y (3) equilibrio de carga, que facilita la replicación, reubicación y división de recursos para lograr un equilibrio de carga. REFERENCIAS [1] A. Oram, Peer-to-Peer: Aprovechando el Poder de las Tecnologías Disruptivas. OReilly, marzo de 2000. [2] S. Helal, N. Desai, V. Verma y C. Lee, Konark - Un protocolo de descubrimiento y entrega de servicios para redes ad-hoc, en la Tercera Conferencia IEEE sobre Redes de Comunicación Inalámbrica (WCNC), Nueva Orleans, Luisiana, 2003. [3] G. Krotuem, Proem: Una plataforma de computación peer-to-peer para redes móviles ad-hoc, en el Taller de Temas Avanzados Middleware para Computación Móvil, Alemania, 2001. [4] M. Papadopouli y H. Schulzrinne, Un análisis de rendimiento de 7DS, una herramienta de difusión y precarga de datos peer-to-peer para usuarios móviles, en Avances en comunicaciones cableadas e inalámbricas, Simposio IEEE Sarnoff Digest, Ewing, NJ, 2001 (Mejor premio de papel y póster estudiantil). [5] U. Mohan, K. Almeroth y E. Belding-Royer, Descubrimiento de servicios escalable en redes móviles ad-hoc, en la Conferencia de Redes IFIP, Atenas, Grecia, mayo de 2004. [6] L. Yin y G. Cao, Soporte para almacenamiento en caché cooperativo en redes ad-hoc, en IEEE INFOCOM, 2004. [7] V. Thanedar, K. Almeroth y E. Belding-Royer, Un esquema de replicación de contenido ligero para entornos móviles ad-hoc, en la Conferencia de Redes IFIP, Atenas, Grecia, mayo de 2004. 6 La 3ra Conferencia Internacional sobre Tecnología, Aplicaciones y Sistemas Móviles - Movilidad 2006.