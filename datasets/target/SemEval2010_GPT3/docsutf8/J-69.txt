Técnicas de incentivos robustas para redes de pares a pares Michal Feldman1 mfeldman@sims.berkeley.edu Kevin Lai2 klai@hp.com Ion Stoica3 istoica@cs.berkeley.edu John Chuang1 chuang@sims.berkeley.edu 1 Escuela de Gestión de Información y Sistemas U.C. Berkeley 2 HP Labs 3 División de Ciencias de la Computación U.C. La falta de cooperación (aprovechamiento gratuito) es uno de los problemas clave que enfrentan los sistemas P2P de hoy en día. Lo que hace que este problema sea particularmente difícil es el conjunto único de desafíos que plantean los sistemas P2P: grandes poblaciones, alta rotación, asimetría de intereses, colusión, identidades de costo cero y traidores. Para abordar estos desafíos modelamos el sistema P2P utilizando el Dilema del Prisionero Generalizado (GPD) y proponemos la función de decisión Recíproca como base de una familia de técnicas de incentivos. Estas técnicas son completamente distribuidas e incluyen: selección de servidor discriminatorio, reputación subjetiva basada en flujo máximo y políticas de extraños adaptativas. A través de la simulación, demostramos que estas técnicas pueden llevar a un sistema de usuarios estratégicos a niveles de cooperación casi óptimos. Categorías y Descriptores de Asignaturas C.2.4 [Redes de Computadoras-Comunicación]: Sistemas Distribuidos; J.4 [Ciencias Sociales y del Comportamiento]: Economía Términos Generales Diseño, Economía 1. INTRODUCCIÓN Muchos sistemas peer-to-peer (P2P) dependen de la cooperación entre usuarios con intereses propios. Por ejemplo, en un sistema de intercambio de archivos, la latencia de descarga general y la tasa de fallos aumentan cuando los usuarios no comparten sus recursos [3]. En una red inalámbrica ad-hoc, la latencia y la tasa de pérdida de paquetes aumentan cuando los nodos se niegan a reenviar paquetes en nombre de otros [26]. Otros ejemplos incluyen la preservación de archivos [25], los foros de discusión [17], las subastas en línea [16] y el enrutamiento de superposición [6]. En muchos de estos sistemas, los usuarios tienen desincentivos naturales para cooperar porque la cooperación consume sus propios recursos y puede degradar su propio rendimiento. Como resultado, el intento de cada usuario por maximizar su propia utilidad efectivamente reduce el A BC general. Figura 1: Ejemplo de asimetría de interés. A quiere servicio de B, B quiere servicio de C, y C quiere servicio de A. utilidad del sistema. Evitar esta tragedia de los comunes [18] requiere incentivos para la cooperación. Adoptamos un enfoque de teoría de juegos para abordar este problema. En particular, utilizamos un modelo de dilema del prisionero para capturar la tensión esencial entre la utilidad individual y social, matrices de pagos asimétricas para permitir transacciones asimétricas entre pares, y un modelo dinámico de población basado en el aprendizaje para especificar el comportamiento de los pares individuales, que puede cambiar continuamente. Si bien los dilemas sociales han sido estudiados extensamente, las aplicaciones P2P imponen un conjunto único de desafíos, incluyendo: • Grandes poblaciones y alta rotación: Un sistema de intercambio de archivos como Gnutella y KaZaa puede superar los 100,000 usuarios simultáneos, y los nodos pueden tener una vida útil promedio del orden de minutos [33]. • Asimetría de interés: Las transacciones asimétricas de los sistemas P2P crean la posibilidad de asimetría de interés. En el ejemplo de la Figura 1, A quiere servicio de B, B quiere servicio de C y C quiere servicio de A. • Identidad de costo cero: Muchos sistemas P2P permiten a los pares cambiar continuamente de identidades (es decir, blanquear). Las estrategias que funcionan bien en juegos tradicionales de dilema del prisionero, como Tit-for-Tat, no funcionarán bien en el contexto de P2P. Por lo tanto, proponemos una familia de técnicas de incentivos escalables y robustas, basadas en una novedosa función de decisión Recíproca, para abordar estos desafíos y proporcionar diferentes compensaciones: • Selección Discriminativa de Servidores: la cooperación requiere familiaridad entre entidades ya sea directa o indirectamente. Sin embargo, las grandes poblaciones y la alta rotación de los sistemas P2P hacen menos probable que se produzcan interacciones repetidas con una entidad conocida. Mostramos que al hacer que cada par mantenga un historial privado de 102 acciones de otros pares hacia ella, y utilizando una selección de servidores discriminatoria, la función de decisión Recíproca puede escalar a grandes poblaciones y niveles moderados de rotación. • Historial Compartido: Escalar a una mayor rotación y mitigar la asimetría de intereses requiere un historial compartido. Considera el ejemplo en la Figura 1. Si todos brindan servicio, entonces el sistema opera de manera óptima. Sin embargo, si todos mantienen solo historiales privados, nadie proporcionará servicio porque B no sabe que A ha servido a C, etc. Mostramos que con una historia compartida, B sabe que A sirvió a C y consecuentemente servirá a A. Esto resulta en un mayor nivel de cooperación que con la historia privada. El costo de la historia compartida es una infraestructura distribuida (por ejemplo, almacenamiento basado en tablas hash distribuidas) para almacenar la historia. • Reputación subjetiva basada en flujo máximo: la historia compartida crea la posibilidad de colusión. En el ejemplo de la Figura 1, C puede afirmar falsamente que A le sirvió, engañando así a B para que le proporcione servicio. Demostramos que un algoritmo basado en flujo máximo que calcula la reputación de manera subjetiva promueve la cooperación a pesar de la colusión entre un tercio de la población. La idea básica es que B solo creería en C si C ya hubiera proporcionado un servicio a B. El costo del algoritmo de flujo máximo es su tiempo de ejecución O(V^3), donde V es el número de nodos en el sistema. Para eliminar este costo, hemos desarrollado una variación de tiempo de ejecución constante promedio, que intercambia efectividad por complejidad de cálculo. Mostramos que el algoritmo basado en flujo máximo escala mejor que el historial privado en presencia de coludidores sin la confianza centralizada requerida en trabajos anteriores [9] [20]. • Política de Extraño Adaptativo: Las identidades de costo cero permiten a los pares no cooperativos escapar de las consecuencias de no cooperar y eventualmente destruir la cooperación en el sistema si no se detiene. Mostramos que si los pares recíprocos tratan a los desconocidos (pares sin historial) utilizando una política que se adapta al comportamiento de los desconocidos anteriores, los pares tienen poco incentivo para encubrir y el encubrimiento puede ser casi eliminado del sistema. La política del extraño adaptativo logra esto sin requerir una asignación centralizada de identidades, una tarifa de entrada para los recién llegados o limitación de velocidad. • Historia a corto plazo: La historia también crea la posibilidad de que un par previamente bien comportado con una buena reputación se convierta en traidor y use su buena reputación para explotar a otros pares. El par podría estar tomando una decisión estratégica o alguien podría haber secuestrado su identidad (por ejemplo, comprometiendo su anfitrión). La historia a largo plazo empeora este problema al permitir que los pares con muchas transacciones anteriores exploten esa historia para muchas transacciones nuevas. Mostramos que la historia a corto plazo evita que los traidores interrumpan la cooperación. El resto del documento está organizado de la siguiente manera. Describimos el modelo en la Sección 2 y la función de decisión recíproca en la Sección 3. Luego procedemos a las técnicas de incentivos en la Sección 4. En la Sección 4.1, describimos los desafíos de las grandes poblaciones y la alta rotación, y mostramos la efectividad de la selección discriminada de servidores y el historial compartido. En la Sección 4.2, describimos la colusión y demostramos cómo la reputación subjetiva la mitiga. En la Sección 4.3, presentamos el problema de las identidades de costo cero y mostramos cómo una política de extraños adaptativa promueve identidades persistentes. En la Sección 4.4, mostramos cómo los traidores interrumpen la cooperación y cómo la historia a corto plazo lidia con ellos. Discutimos el trabajo relacionado en la Sección 5 y concluimos en la Sección 6. MODELO Y SUPUESTOS En esta sección, presentamos nuestros supuestos sobre los sistemas P2P y sus usuarios, e introducimos un modelo que tiene como objetivo capturar el comportamiento de los usuarios en un sistema P2P. 2.1 Supuestos Suponemos un sistema P2P en el que los usuarios son estratégicos, es decir, actúan racionalmente para maximizar su beneficio. Sin embargo, para capturar parte de la imprevisibilidad de la vida real en el comportamiento de los usuarios, permitimos que los usuarios cambien aleatoriamente su comportamiento con una baja probabilidad (ver Sección 2.4). Para simplificar, asumimos un sistema homogéneo en el que todos los pares emiten y satisfacen solicitudes a la misma velocidad. Un par puede satisfacer cualquier solicitud, y, a menos que se especifique lo contrario, los pares solicitan el servicio de manera uniformemente aleatoria de la población. Finalmente, asumimos que todas las transacciones incurren en el mismo costo para todos los servidores y proporcionan el mismo beneficio para todos los clientes. Suponemos que los usuarios pueden contaminar la historia compartida con recomendaciones falsas (Sección 4.2), cambiar de identidad sin costo alguno (Sección 4.3) y suplantar a otros usuarios (Sección 4.4). No asumimos ninguna confianza centralizada ni infraestructura centralizada. 2.2 Modelo Para ayudar al desarrollo y estudio de los esquemas de incentivos, en esta sección presentamos un modelo de los comportamientos de los usuarios. En particular, modelamos los beneficios y costos de las interacciones P2P (el juego) y la dinámica de la población causada por mutación, aprendizaje y rotación. Nuestro modelo está diseñado para tener las siguientes propiedades que caracterizan a un gran conjunto de sistemas P2P: • Dilema Social: La cooperación universal debería resultar en una utilidad general óptima, pero los individuos que explotan la cooperación de otros sin cooperar ellos mismos (es decir, desertar) deberían beneficiarse más que los usuarios que sí cooperan. • Transacciones Asimétricas: Un par puede querer un servicio de otro par sin poder proporcionar actualmente el servicio que el segundo par desea. Las transacciones deben poder tener resultados asimétricos. • Deserciones no rastreables: Un par no debería poder determinar la identidad de los pares que han desertado en su contra. Esto modela la dificultad o el costo de determinar que un par podría haber proporcionado un servicio, pero no lo hizo. Por ejemplo, en el sistema de intercambio de archivos Gnutella [21], un par puede simplemente ignorar las consultas a pesar de poseer el archivo deseado, evitando así que el par que realiza la consulta identifique al par que incumple. • Población Dinámica: Los pares deben poder cambiar su comportamiento y entrar o salir del sistema de forma independiente y continua. La excepción se discute en la Sección 4.1.1. Cooperar Defecto Cooperar Defecto Cliente Servidor sc RR / sc ST / sc PP / sc TS / Figura 2: Matriz de pagos para el Dilema del Prisionero Generalizado. T, R, P y S representan tentación, recompensa, castigo y tonto, respectivamente. 2.3 Dilema del Prisionero Generalizado El Dilema del Prisionero, desarrollado por Flood, Dresher y Tucker en 1950, es un juego no cooperativo repetido que cumple con el requisito del dilema social. Cada juego consiste en dos jugadores que pueden optar por traicionar o cooperar. Dependiendo de cómo actúe cada uno, los jugadores reciben un pago. Los jugadores utilizan una estrategia para decidir cómo actuar. Desafortunadamente, el trabajo existente utiliza o bien una matriz de pagos asimétrica específica o solo proporciona la forma general para una simétrica [4]. En cambio, utilizamos el Dilema del Prisionero Generalizado (DPG), que especifica la forma general de una matriz de pagos asimétrica que preserva el dilema social. En el GPD, un jugador es el cliente y otro jugador es el servidor en cada juego, y solo la decisión del servidor es significativa para determinar el resultado de la transacción. Un jugador puede ser un cliente en un juego y un servidor en otro. El cliente y el servidor reciben el pago de una matriz de pagos generalizada (Figura 2). Rc, Sc, Tc y Pc son las ganancias de los clientes, y Rs, Ss, Ts y Ps son las ganancias de los servidores. Una matriz de pagos de GPD debe tener las siguientes propiedades para crear un dilema social: 1. La cooperación mutua conduce a mayores ganancias que la defección mutua (Rs + Rc > Ps + Pc). 2. La cooperación mutua conlleva a mayores ganancias que un jugador engañando al otro (Rs + Rc > Sc + Ts y Rs + Rc > Ss + Tc). 3. La deserción domina la cooperación (al menos débilmente) a nivel individual para la entidad que decide si cooperar o desertar: (Ts ≥ Rs y Ps ≥ Ss y (Ts > Rs o Ps > Ss)) El último conjunto de desigualdades asume que los clientes no incurren en un costo independientemente de si cooperan o desertan, por lo tanto, los clientes siempre cooperan. Estas propiedades corresponden a propiedades similares del clásico Dilema del Prisionero y permiten cualquier forma de transacción asimétrica mientras aún se crea un dilema social. Además, una o más de las cuatro posibles acciones (cliente cooperar y traicionar, y servidor cooperar y traicionar) pueden ser inrastreables. Si un jugador realiza una acción no rastreable, el otro jugador no conoce la identidad del primer jugador. Por ejemplo, para modelar una aplicación P2P como el intercambio de archivos o enrutamiento de superposición, utilizamos los valores específicos de la matriz de pagos mostrados en la Figura 3. Esto satisface las desigualdades especificadas anteriormente, donde solo el servidor puede elegir entre cooperar y desertar. Además, para esta matriz de pagos particular, los clientes no pueden rastrear las deserciones del servidor. Esta es la matriz de pagos que utilizamos en los resultados de nuestra simulación. Solicitar servicio No solicitar 7 / -1 0 / 0 0 / 0 0 / 0 Proporcionar servicio Ignorar solicitud Cliente Servidor Figura 3: La matriz de pagos para una aplicación como el intercambio de archivos P2P o enrutamiento de superposición. 2.4 Dinámica de poblaciones Una característica de los sistemas P2P es que los pares cambian su comportamiento y entran o salen del sistema de forma independiente y continua. Varios estudios [4] [28] de juegos repetidos del Dilema del Prisionero utilizan un modelo evolutivo [19] [34] de dinámica de poblaciones. Un modelo evolutivo no es adecuado para sistemas P2P porque solo especifica el comportamiento global y todos los cambios ocurren en momentos discretos. Por ejemplo, puede especificar que una población de 5 jugadores 100% Cooperadores y 5 jugadores 100% Defectores evoluciona en una población con 3 y 7 jugadores, respectivamente. No especifica qué jugadores específicos cambiaron. Además, todos los cambios se producen al final de una generación en lugar de ser continuos, como en un sistema P2P real. Como resultado, la dinámica evolutiva de la población no modela con precisión el recambio, los traidores y los extraños. En nuestro modelo, las entidades toman acciones independientes y continuas que cambian la composición de la población. El tiempo consiste en rondas. En cada ronda, cada jugador juega un juego como cliente y otro juego como servidor. Al final de una ronda, un jugador puede: 1) mutar, 2) aprender, 3) cambiar de bando o 4) mantenerse igual. Si un jugador muta, cambia a una estrategia elegida al azar. Si ella aprende, cambia a una estrategia que cree que producirá una puntuación más alta (descrita con más detalle a continuación). Si ella mantiene su identidad después de cambiar de estrategias, entonces se le llama traidora. Si un jugador sufre una pérdida, abandona el sistema y es reemplazado por un recién llegado que utiliza la misma estrategia que el jugador que se retira. Para aprender, un jugador recopila información local sobre el rendimiento de diferentes estrategias. Esta información consiste tanto en sus observaciones personales del rendimiento de la estrategia como en las observaciones de los jugadores con los que interactúa. Este modelo representa a los usuarios comunicándose fuera de banda sobre cómo funcionan las estrategias. Sea s el promedio móvil del rendimiento de la estrategia actual de un jugador por ronda y edad el número de rondas que ha estado utilizando la estrategia. La calificación de una estrategia es RunningAverage(s ∗ edad) RunningAverage(edad). Utilizamos la edad y calculamos el promedio móvil antes de la proporción para evitar que las muestras jóvenes (que tienen más probabilidades de ser valores atípicos) sesguen la calificación. Al final de una ronda, un jugador cambia a la estrategia mejor valorada con una probabilidad proporcional a la diferencia de puntuación entre su estrategia actual y la estrategia mejor valorada. 104 3. FUNCION DE DECISIÓN RECIPROCATIVA En esta sección, presentamos la nueva función de decisión, Reciprocative, que es la base de nuestras técnicas de incentivo. Una función de decisión mapea desde la historia de las acciones de un jugador hasta una decisión de cooperar o traicionar a ese jugador. Una estrategia consiste en una función de decisión, historial privado o compartido, un mecanismo de selección de servidor y una política de desconocidos. Nuestro enfoque en incentivos es diseñar estrategias que maximicen tanto el beneficio individual como el social. Los usuarios estratégicos elegirán utilizar tales estrategias y, de esta manera, impulsarán el sistema hacia altos niveles de cooperación. Dos ejemplos de funciones de decisión simples son 100% Cooperar y 100% Defecto. 100% Cooperar modela a un usuario ingenuo que aún no se da cuenta de que está siendo explotado. 100% Defecto modela a un usuario codicioso que tiene la intención de explotar el sistema. En ausencia de técnicas de incentivo, los usuarios con 100% de Defectores dominarán rápidamente a los usuarios con 100% de Cooperadores y destruirán la cooperación en el sistema. Nuestros requisitos para una función de decisión son que (1) pueda utilizar historias compartidas y subjetivas, (2) pueda manejar defecciones no rastreables y (3) sea robusta contra diferentes patrones de defección. Las funciones de decisión anteriores como Tit-for-Tat y Image (ver Sección 5) no cumplen con estos criterios. Por ejemplo, Tit-for-Tat e Image basan sus decisiones tanto en cooperaciones como en defecciones, por lo tanto no pueden lidiar con defecciones no rastreables. En esta sección y en las secciones restantes demostramos cómo las estrategias basadas en el Reciprocative cumplen con todos los requisitos mencionados anteriormente. La probabilidad de que un jugador Recíproco coopere con un par es una función de su generosidad normalizada. La generosidad mide el beneficio que una entidad ha proporcionado en relación con el beneficio que ha consumido. Esto es importante porque las entidades que consumen más servicios de los que proporcionan, incluso si proporcionan muchos servicios, harán que la cooperación colapse. Para alguna entidad i, dejemos que pi y ci sean los servicios que i ha proporcionado y consumido, respectivamente. La generosidad de una entidad es simplemente la proporción del servicio que proporciona al servicio que consume: g(i) = pi/ci. Una posibilidad es cooperar con una probabilidad igual a la generosidad. Aunque esto es efectivo en algunos casos, en otros casos, un jugador Recíproco puede consumir más de lo que proporciona (por ejemplo, al usar inicialmente la política de Defecto del Extraño en 4.3). Esto hará que los jugadores recíprocos se traicionen mutuamente. Para prevenir esta situación, un jugador Recíproco utiliza su propia generosidad como una vara de medir para juzgar la generosidad de sus pares. La medida de generosidad normalizada mide la generosidad de una entidad en relación con la generosidad de la entidad js. Más concretamente, la entidad es la generosidad normalizada tal como la percibe la entidad j, que es gj(i) = g(i)/g(j). En el resto de esta sección, describimos nuestro marco de simulación y lo utilizamos para demostrar los beneficios de la función de decisión Recíproca base. Valor nominal del parámetro Tamaño de la población 100 2.4 Tiempo de ejecución 1000 rondas 2.4 Matriz de recompensa Compartir archivos 2.3 Proporción utilizando 100% Cooperar 1/3 3 Proporción utilizando 100% Defecto 1/3 3 Proporción utilizando Recíproco 1/3 3 Probabilidad de mutación 0.0 2.4 Probabilidad de aprendizaje 0.05 2.4 Probabilidad de rotación 0.0001 2.4 Tasa de acierto 1.0 4.1.1 Tabla 1: Parámetros de simulación predeterminados. 3.1 Marco de simulación Nuestro simulador implementa el modelo descrito en la Sección 2. Utilizamos la matriz de pagos asimétrica para el intercambio de archivos (Figura 3) con defecciones no rastreables porque modela transacciones en muchos sistemas P2P como el intercambio de archivos y el reenvío de paquetes en redes ad-hoc y de superposición. Nuestro estudio de simulación está compuesto por diferentes escenarios que reflejan los desafíos de varios comportamientos no cooperativos. La Tabla 1 presenta los valores de los parámetros nominales utilizados en nuestra simulación. La proporción utilizando filas se refiere a la proporción inicial de la población total que utiliza una estrategia particular. En cada escenario variamos el rango de valores de un parámetro específico para reflejar una situación o ataque particular. Luego variamos las propiedades exactas de la estrategia Recíproca para defendernos contra esa situación o ataque. 3.2 Resultados de referencia 0 20 40 60 80 100 120 0 200 400 600 800 1000 Población Tiempo (a) Población total: 60 0 20 40 60 80 100 120 0 200 400 600 800 1000 Tiempo (b) Población total: 120 Defector Cooperador Recip. Figura 4: La evolución de las poblaciones de estrategias con el tiempo. Cronometra el número de rondas transcurridas. La población es el número de jugadores que utilizan una estrategia. En esta sección, presentamos la dinámica del juego para el escenario básico presentado en la Tabla 1 para familiarizar al lector y establecer una línea base para escenarios más complicados. Las figuras 4(a) (60 jugadores) y (b) (120 jugadores) muestran cómo los jugadores cambian a estrategias de puntuación más altas con el tiempo en dos ejecuciones separadas del simulador. Cada punto en el gráfico representa el número de jugadores que utilizan una estrategia particular en un momento dado. Las figuras 5(a) y (b) muestran la puntuación media general correspondiente por ronda. Esto mide el grado de cooperación en el sistema: 6 es el máximo posible (alcanzado cuando todos cooperan) y 0 es el mínimo (alcanzado cuando todos se desentienden). A partir de la matriz de beneficios compartidos de archivos, una red de 6 significa que todos pueden descargar un archivo y un 0 significa que nadie puede hacerlo. Utilizamos esta métrica en todos los resultados posteriores para evaluar nuestras técnicas de incentivos. La Figura 5(a) muestra que la estrategia Recíproca utilizando historial privado hace que un sistema de 60 jugadores converja a un nivel de cooperación de 3.7, pero disminuye a 0.5 para 120 jugadores. Se esperaría que el sistema de 60 jugadores alcance el nivel óptimo de cooperación (6) porque todos los desertores son eliminados del sistema. No lo hace debido a la asimetría de intereses. Por ejemplo, supongamos que el jugador B está utilizando Recíproco con historial privado. El jugador A puede llegar a pedir servicio al jugador B dos veces seguidas sin proporcionar servicio al jugador B en el ínterin. El jugador B no sabe del servicio que el jugador A ha brindado a otros, por lo que el jugador B rechazará el servicio al jugador A, a pesar de que el jugador A es cooperativo. Discutimos soluciones a la asimetría de intereses y al fracaso del Reciprocative en el sistema de 120 jugadores en la Sección 4.1. 4. TÉCNICAS DE INCENTIVOS BASADAS EN LA RECIPROCIDAD En esta sección presentamos nuestras técnicas de incentivos y evaluamos su comportamiento mediante simulación. Para hacer clara la exposición, agrupamos nuestras técnicas según los desafíos que abordan: poblaciones grandes y alta rotación (Sección 4.1), colusiones (Sección 4.2), identidades de costo cero (Sección 4.3) y traidores (Sección 4.4). 4.1 Poblaciones Grandes y Alta Rotación Las poblaciones grandes y la alta rotación de los sistemas P2P hacen menos probable que ocurran interacciones repetidas con una entidad familiar. Bajo estas condiciones, basar decisiones únicamente en la historia privada (registros sobre interacciones en las que el par ha estado directamente involucrado) no es efectivo. Además, la historia privada no lidia bien con la asimetría de intereses. Por ejemplo, si el jugador B ha cooperado con otros pero no con el jugador A en el pasado, el jugador A no tiene indicación de la generosidad del jugador B, por lo tanto, puede defectar injustamente en él. Proponemos dos mecanismos para aliviar el problema de pocas transacciones repetidas: selección de servidor e historial compartido. 4.1.1 Selección de servidor Una forma natural de aumentar la probabilidad de interactuar con pares familiares es discriminando la selección de servidor. Sin embargo, la asimetría de las transacciones desafía los mecanismos de selección. A diferencia de la matriz de pagos del dilema del prisionero, donde los jugadores pueden beneficiarse mutuamente dentro de una sola transacción, las transacciones en GPD son asimétricas. Como resultado, un jugador que elige a su donante por segunda vez sin contribuir a ella en el ínterin puede enfrentar una deserción. Además, debido a la imposibilidad de rastrear las deserciones, es imposible mantener listas negras para evitar interacciones con desertores conocidos. Para hacer frente a transacciones asimétricas, cada jugador mantiene listas (de tamaño fijo) de donantes y receptores pasados, y selecciona un servidor de una de estas listas al azar con igual probabilidad. De esta manera, los usuarios se acercan a sus destinatarios pasados y les dan la oportunidad de corresponder. En escenarios con usuarios selectivos omitimos la suposición de disponibilidad completa para evitar que los jugadores se agrupen en muchos grupos muy pequeños; por lo tanto, asumimos que cada jugador puede realizar el servicio solicitado con una probabilidad p (para los resultados presentados en esta sección, p = .3). Además, para evitar el sesgo a favor de los jugadores selectivos, todos los jugadores (incluidos los no discriminatorios) eligen servidores para los juegos. La Figura 6 demuestra la efectividad del mecanismo de selección propuesto en escenarios con tamaños de población grandes. Fijamos la proporción inicial de Reciprocative en la población (33%) mientras variamos el tamaño de la población (entre 24 y 1000) (Nótese que, mientras en las Figuras 4(a) y (b), los puntos de datos muestran la evolución del sistema con el tiempo, cada punto de datos en esta figura es el resultado de una simulación completa para un escenario específico). La figura muestra que la función de decisión recíproca utilizando historial privado en conjunto con comportamiento selectivo puede escalar a grandes poblaciones. En la Figura 7 fijamos el tamaño de la población y variamos la tasa de rotación. Demuestra que si bien el comportamiento selectivo es efectivo para tasas de rotación bajas, a medida que la rotación aumenta, el comportamiento selectivo no es escalable. Esto ocurre porque la selección solo es efectiva mientras los jugadores del pasado permanezcan vivos el tiempo suficiente para poder ser seleccionados en futuros juegos. 4.1.2 Historia compartida Para mitigar la asimetría de interés y escalar a una tasa de rotación más alta, se necesita una historia compartida. La historia compartida significa que cada par mantiene registros de todas las interacciones que ocurren en el sistema, independientemente de si estuvo directamente involucrado en ellas o no. Permite a los jugadores aprovechar las experiencias de otros en casos de pocas transacciones repetidas. Solo se requiere que alguien haya interactuado con un jugador en particular para que toda la población lo observe, por lo tanto, es más escalable para poblaciones grandes y altas rotaciones, y también tolera la asimetría de intereses. Algunos ejemplos de esquemas de historia compartida son [20] [23] [28]. La Figura 7 muestra la efectividad de la historia compartida bajo altas tasas de rotación. En esta figura, fijamos el tamaño de la población y variamos la tasa de rotación. Mientras que los jugadores selectivos con historial privado solo pueden tolerar un volumen de rotación moderado, el historial compartido se extiende a rotaciones de hasta aproximadamente 0.1. Esto significa que el 10% de los jugadores abandonan el sistema al final de cada ronda. En la Figura 6 fijamos la rotación y variamos el tamaño de la población. Se muestra que la historia compartida hace que el sistema converja hacia la cooperación y el rendimiento óptimos, independientemente del tamaño de la población. Estos resultados muestran que la historia compartida aborda los tres desafíos de poblaciones grandes, alta rotación y asimetría de transacciones. Sin embargo, la historia compartida tiene dos desventajas. Primero, 106 0 1 2 3 4 5 6 0 50 100 150 200 250 300 350 400 PuntajePromedio/Ronda NumJugadores Compartido No-Seleccionado Privado No-Seleccionado Privado Selectivo Figura 6: Privado vs. Historia compartida como función del tamaño de la población. 0 1 2 3 4 5 6 0.0001 0.001 0.01 0.1 PuntuaciónMediaGlobal/Ronda Rotación Compartida No-Seleccionada Privada No-Seleccionada Privada Selectiva Figura 7: Rendimiento del mecanismo de selección bajo rotación. El eje x es la tasa de rotación. El eje y es la puntuación media general por ronda. Mientras que una implementación descentralizada de historial privado es sencilla, la implementación de historial compartido requiere sobrecarga de comunicación o centralización. Una historia compartida descentralizada puede implementarse, por ejemplo, sobre un DHT, utilizando un sistema de almacenamiento peer-to-peer [36] o mediante la difusión de información a otras entidades de manera similar a los protocolos de enrutamiento. Segundo, y más fundamental, la historia compartida es vulnerable a la colusión. En la siguiente sección proponemos un mecanismo que aborda este problema. 4.2 Colusión y Otros Ataques de Historial Compartido 4.2.1 Colusión Aunque el historial compartido es escalable, es vulnerable a la colusión. La colusión puede ser tanto positiva (por ejemplo, entidades que se desvían afirman que otras entidades que se desvían cooperaron con ellas) como negativa (por ejemplo, entidades afirman que otras entidades cooperativas se desviaron de ellas). La colusión socava cualquier estrategia en la que todos en el sistema estén de acuerdo en la reputación de un jugador (reputación objetiva). Un ejemplo de reputación objetiva es utilizar la función de decisión Recíproca con historial compartido para contar el número total de cooperaciones que un jugador ha dado y recibido de todas las entidades en el sistema; otro ejemplo es la estrategia de Imagen [28]. El efecto de la colusión se magnifica en sistemas con identidades de costo cero, donde los usuarios pueden crear identidades falsas que informan declaraciones falsas. En cambio, para lidiar con la colusión, las entidades pueden calcular la reputación de forma subjetiva, donde el jugador A pondera las opiniones del jugador B en función de cuánto confía el jugador A en el jugador B. Nuestro algoritmo subjetivo se basa en maxflow [24] [32]. El flujo máximo es un problema teórico de grafos, que dado un grafo dirigido con aristas ponderadas pregunta cuál es la mayor tasa a la que se puede enviar material desde la fuente al destino sin violar ninguna restricción de capacidad. Por ejemplo, en la figura 8 cada borde está etiquetado con la cantidad de tráfico que puede transitar por él. El algoritmo de flujo máximo calcula la cantidad máxima de tráfico que puede ir desde la fuente (s) hasta el objetivo (t) sin violar las restricciones. En este ejemplo, aunque hay un bucle de aristas de alta capacidad, el flujo máximo entre la fuente y el destino es solo de 2 (los números entre paréntesis representan el flujo real en cada arista en la solución). 100(0) 1(1) 5(1) s t 10(1) 100(1) 1(1) 100(1) 20(0) Figura 8: Cada arista en el grafo está etiquetada con su capacidad y el flujo real que lleva entre paréntesis. El flujo máximo entre la fuente y el destino en el grafo es 2. Figura 9: Este gráfico ilustra la robustez del flujo máximo en presencia de cómplices que informan valores de reputación alta falsos. Aplicamos el algoritmo de flujo máximo construyendo un grafo cuyos vértices son entidades y las aristas son los servicios que las entidades han recibido entre sí. Esta información se puede almacenar utilizando los mismos métodos que la historia compartida. Un maxflow es el mayor nivel de reputación que la fuente puede dar al sumidero sin violar las restricciones de capacidad de reputación. Como resultado, los nodos que informen de manera deshonesta valores de reputación altos no podrán subvertir el sistema de reputación. La Figura 9 ilustra un escenario en el que todos los coludidores (etiquetados con C) reportan altos valores de reputación para los demás. Cuando el nodo A calcula la reputación subjetiva de B utilizando el algoritmo de flujo máximo, no se verá afectado por los valores de reputación falsos locales, sino que en este caso el flujo máximo será 0. Esto se debe a que no se ha recibido ningún servicio de ninguno de los coludidores. En nuestro algoritmo, el beneficio que la entidad i ha recibido (indirectamente) de la entidad j es el flujo máximo de j a i. Por el contrario, el beneficio que la entidad i ha proporcionado indirectamente a j es el flujo máximo de i a j. La reputación subjetiva de la entidad j tal como es percibida por i es: flujo máximo (j a i) flujo máximo (i a j), 1 (3) 0 1 2 3 4 5 6 0 100 200 300 400 500 600 700 800 900 1000 Puntuación Media General/Ronda Población Compartida Privada Subjetiva Figura 10: Historia compartida subjetiva comparada con la historia compartida objetiva y la historia privada en presencia de coludidores. Algoritmo 1 FLUJO MÁXIMO EN TIEMPO CONSTANTE Limita el tiempo de ejecución promedio de Maxflow a una constante. método CTMaxflow(self, src, dst) 1: self.surplus ← self.surplus + self.increment {Usa la media de ejecución como predicción.} 2: si random() > (0.5∗self.surplus/self.mean iteraciones) entonces 3: return None {No hay suficiente excedente para ejecutar.} 4: fin si {Obtener el flujo y el número de iteraciones utilizadas del algoritmo de flujo máximo.} 5: flujo, iteraciones ← Maxflow(self.G, src, dst) 6: self.surplus ← self.surplus − iteraciones {Mantener una media de las iteraciones utilizadas.} 7: self.mean iteraciones ← self.α ∗ self.mean iteraciones + (1 − self.α) ∗ iteraciones 8: return flujo El costo de maxflow es su largo tiempo de ejecución. El algoritmo de preflujo-pulso de flujo máximo estándar tiene un tiempo de ejecución en el peor de los casos de O(V^3). En cambio, utilizamos el Algoritmo 1 que tiene un tiempo de ejecución medio constante, pero a veces no devuelve ningún flujo aunque exista uno. La idea esencial es limitar el número medio de nodos examinados durante el cálculo del flujo máximo. Esto limita los costos adicionales, pero también limita la efectividad. A pesar de esto, los resultados a continuación muestran que una función de decisión Reciprocative basada en flujo máximo escala a poblaciones más grandes que una que utiliza historial privado. La Figura 10 compara la efectividad de la reputación subjetiva con la reputación objetiva en presencia de coludidores. En estos escenarios, los desertores coluden al afirmar que otros coludidores que encuentran les dieron 100 cooperaciones para ese encuentro. Además, los parámetros para el Algoritmo 1 se establecen de la siguiente manera: incremento = 100, α = 0.9. Como en secciones anteriores, la reciprocidad con historial privado resulta en cooperación hasta cierto punto, más allá del cual falla. La diferencia aquí es que la historia objetiva compartida falla para todos los tamaños de población. Esto se debe a que los jugadores recíprocos cooperan con los coludidores debido a sus altas reputaciones. Sin embargo, la historia subjetiva puede alcanzar altos niveles de cooperación independientemente de los coludidores. Esto se debe a que no hay caminos de alto peso en el grafo de cooperación desde los coludidores hacia cualquier no coludidor, por lo que el flujo máximo desde un coludidor hacia cualquier no coludidor es 0. Por lo tanto, un jugador Recíproco subjetivo concluirá que el tramposo no le ha proporcionado ningún servicio y rechazará prestarle servicio al tramposo. Por lo tanto, el algoritmo de flujo máximo permite a Reciprocative mantener la escalabilidad de la historia compartida sin ser vulnerable a la colusión o requerir confianza centralizada (por ejemplo, pares de confianza). Dado que hemos acotado el tiempo de ejecución del algoritmo de flujo máximo, la cooperación disminuye a medida que aumenta el tamaño de la población, pero el punto clave es que la función de decisión Recíproca subjetiva se adapta a poblaciones más grandes que aquella que utiliza historial privado. Esta ventaja solo aumenta con el tiempo a medida que la potencia de la CPU aumenta y se pueden dedicar más ciclos a ejecutar el algoritmo de flujo máximo (aumentando el parámetro de incremento). A pesar de la robustez del algoritmo de flujo máximo ante la forma simple de colusión descrita anteriormente, aún presenta vulnerabilidades ante ataques más sofisticados. Una forma es que una entidad (el topo) proporcione servicio y luego mienta positivamente sobre otros cómplices. Los otros conspiradores pueden entonces aprovechar su reputación para recibir servicio. Sin embargo, la efectividad de este ataque depende de la cantidad de servicio que proporcione el infiltrado. Dado que el topo está pagando todos los costos de brindar el servicio y no está recibiendo ninguno de los beneficios, tiene un fuerte incentivo para dejar de coludir e intentar otra estrategia. Esto obliga a los coludidores a utilizar mecanismos para mantener la cooperación dentro de su grupo, lo que puede hacer que el costo de la colusión supere el beneficio. 4.2.2 Informes falsos Otro ataque es que un desertor mienta sobre recibir o proporcionar un servicio a otra entidad. Hay cuatro acciones posibles sobre las que se puede mentir: proporcionar servicio, no proporcionar servicio, recibir servicio y no recibir servicio. Falsamente afirmar recibir un servicio es el simple ataque de colusión descrito anteriormente. Falsamente afirmar que no se ha proporcionado el servicio no proporciona ningún beneficio al atacante. Falsamente afirmar haber proporcionado un servicio o no haberlo recibido permite a un atacante mejorar su propia reputación y/o disminuir la reputación de otra entidad. Una entidad puede querer disminuir la reputación de otra entidad para desalentar a otros de seleccionarla y usar exclusivamente su servicio. Estas afirmaciones falsas son claramente identificables en la historia compartida como inconsistencias donde una entidad afirma que ocurrió una transacción y otra afirma que no lo hizo. Para limitar este ataque, modificamos el algoritmo de flujo máximo para que una entidad siempre crea en la entidad que está más cerca de él en el grafo de flujo. Si ambas entidades están igualmente distantes, entonces el borde en disputa en el flujo no es crítico para la evaluación y se ignora. Esta modificación evita aquellos casos en los que el atacante está haciendo afirmaciones falsas sobre una entidad que está más cerca que ella de la entidad evaluadora, lo que le impide mejorar su propia reputación. Las posibilidades restantes son que el atacante afirme falsamente haber proporcionado un servicio a una entidad víctima que está más lejos del evaluador que ella, o que no lo haya recibido de ella. En estos casos, un atacante solo puede disminuir la reputación de la víctima. La efectividad de hacer esto está limitada por la cantidad de servicios proporcionados y recibidos por el atacante, lo que hace que ejecutar este ataque sea costoso. 108 4.3 La historia de las identidades sin costo asume que las entidades mantienen identidades persistentes. Sin embargo, en la mayoría de los sistemas P2P, las identidades no tienen costo alguno. Esto es deseable para el crecimiento de la red, ya que anima a los recién llegados a unirse al sistema. Sin embargo, esto también permite a los usuarios que se comportan mal escapar de las consecuencias de sus acciones al cambiar a nuevas identidades (es decir, blanquear). Los encubridores pueden hacer que el sistema colapse si no son castigados adecuadamente. Desafortunadamente, un jugador no puede saber si un desconocido es un blanqueador o un recién llegado legítimo. Siempre cooperar con desconocidos anima a los recién llegados a unirse, pero al mismo tiempo fomenta comportamientos de encubrimiento. Siempre desertar de los extraños evita el lavado de cara, pero desanima a los recién llegados a unirse y también puede iniciar ciclos desfavorables de deserción. Esta tensión sugiere que cualquier política de extraños que tenga una probabilidad fija de cooperar con extraños fracasará al ser demasiado tacaña cuando la mayoría de los extraños son recién llegados o demasiado generosa cuando la mayoría de los extraños son encubridores. Nuestra solución es la política de adaptación al extraño. La idea es ser generoso con los desconocidos cuando son generosos y tacaño cuando son tacaños. Sean ps y cs el número de servicios que los extraños han proporcionado y consumido, respectivamente. La probabilidad de que un jugador que usa Stranger Adaptive ayude a un desconocido es ps/cs. Sin embargo, no deseamos mantener estos conteos de forma permanente (por razones descritas en la Sección 4.4). Además, los jugadores pueden no saber cuándo los extraños desertan porque las deserciones son inrastreables (como se describe en la Sección 2). Por lo tanto, en lugar de mantener ps y cs, asumimos que k = ps + cs, donde k es una constante y mantenemos la proporción en ejecución r = ps/cs. Cuando necesitamos incrementar ps o cs, generamos los valores actuales de ps y cs a partir de k y r: cs = k/(1 + r) ps = cs ∗ r Luego calculamos el nuevo r de la siguiente manera: r = (ps + 1)/cs, si el extraño proporcionó servicio r = ps/(cs + 1), si el extraño consumió servicio Este método nos permite mantener una proporción en curso que refleja la generosidad reciente de los extraños sin saber cuándo los extraños han desertado. 0 1 2 3 4 5 6 0.0001 0.001 0.01 0.1 1 PuntuaciónMediaGlobal/Ronda Rotación Extraño Cooperar Extraño Desertar Extraño Adaptativo Figura 11: Diferentes políticas de extraños para Recíproco con historial compartido. El eje x es la tasa de rotación en una escala logarítmica. El eje y es el puntaje promedio general por ronda. Las figuras 11 y 12 comparan la efectividad de la estrategia Recíproca utilizando diferentes políticas hacia los desconocidos. Figura 11 0 1 2 3 4 5 6 0.0001 0.001 0.01 0.1 1 PuntuaciónMediaGlobal/Ronda Rotación Extraño Cooperar Extraño Defecto Extraño Adaptativo Figura 12: Diferentes políticas de extraños para Recíproco con historial privado. El eje x es la tasa de rotación en una escala logarítmica. El eje y es la puntuación media general por ronda. compara diferentes políticas de extraños para Reciprocative con historia compartida, mientras que la Figura 12 es con historia privada. En ambas figuras, los jugadores que utilizan la estrategia de Defecto al 100% cambian su identidad (blanquean) después de cada transacción y son indistinguibles de los recién llegados legítimos. Los jugadores recíprocos que utilizan la política de Cooperar con Extraños fracasan completamente en lograr la cooperación. Esta política de extraños permite a los blanqueadores maximizar sus ganancias y, en consecuencia, proporciona un alto incentivo para que los usuarios cambien al blanqueo. Por el contrario, la Figura 11 muestra que la política de Defecto del Extraño es efectiva con historial compartido. Esto se debe a que los encubridores siempre parecen ser extraños y, por lo tanto, los jugadores Recíprocos siempre los traicionarán. Esto es consistente con trabajos anteriores [13] que muestran que castigar a los extraños lidia con los encubridores. Sin embargo, la Figura 12 muestra que el Defecto del Extraño no es efectivo con historial privado. Esto se debe a que Reciprocative requiere cierta cooperación inicial para arrancar. En el caso de la historia compartida, un jugador Recíproco puede observar que otro jugador ya ha cooperado con otros. Con la historia privada, el jugador Recíproco solo conoce las acciones de los otros jugadores hacia ella. Por lo tanto, la defección inicial dictada por la política del Defecto del Extraño llevará a futuras defecciones, lo que evitará que los jugadores Recíprocos cooperen entre sí. En otras simulaciones no mostradas aquí, la política de extraño Defecto falla incluso con historial compartido cuando no hay jugadores que Cooperen al 100% inicialmente. La Figura 11 muestra que con una historia compartida, la política de Adaptación al Extraño funciona tan bien como la política de Defecto del Extraño hasta que la tasa de rotación es muy alta (10% de la población que cambia después de cada transacción). En estos escenarios, Stranger Adaptive está utilizando k = 10 y cada jugador mantiene un r privado. Más importante aún, es significativamente mejor que la política de Stranger Defect con historial privado porque puede fomentar la cooperación. Aunque la política de Defecto de Extraño es ligeramente más efectiva que la Adaptativa de Extraño a tasas muy altas de rotación, es poco probable que los sistemas P2P operen allí porque otros servicios (por ejemplo, enrutamiento) tampoco pueden tolerar una rotación muy alta. Concluimos que de las políticas de extraños que hemos explorado, la de Adaptación a Extraños es la más efectiva. Al utilizar Stranger Adaptive, los sistemas P2P con identidades de costo cero y una rotación suficientemente baja pueden mantener la cooperación sin una asignación centralizada de identidades. 109 4.4 Traidores Los traidores son jugadores que adquieren altas puntuaciones de reputación cooperando por un tiempo, y luego traicionan al convertirse en desertores antes de abandonar el sistema. Modelan tanto a los usuarios que recurren deliberadamente para obtener una puntuación más alta como a los cooperadores cuyas identidades han sido robadas y explotadas por los desertores. Una estrategia que mantiene un historial a largo plazo sin discriminar entre acciones antiguas y recientes se vuelve altamente vulnerable a la explotación por parte de estos traidores. Los dos gráficos superiores en la Figura 13 demuestran el efecto de los traidores en la cooperación en un sistema donde los jugadores mantienen un historial a largo plazo (nunca borran el historial). En estas simulaciones, corremos durante 2000 rondas y permitimos que los jugadores cooperativos mantengan sus identidades al cambiar a la estrategia de 100% Defector. Utilizamos los valores predeterminados para los otros parámetros. Sin traidores, las estrategias cooperativas prosperan. Con traidores, las estrategias cooperativas prosperan hasta que un cooperador se convierte en traidor después de 600 rondas. A medida que esta cooperadora aprovecha su reputación para lograr una puntuación alta, otros jugadores cooperativos se dan cuenta y hacen lo mismo a través del aprendizaje. La cooperación eventualmente colapsa. Por otro lado, si mantenemos un historial a corto plazo y/o descontamos la historia antigua en comparación con la historia reciente, los traidores pueden ser detectados rápidamente, y el nivel general de cooperación se mantiene alto, como se muestra en los dos gráficos inferiores en la Figura 13. Compartido 0 20 40 60 80 100 1K 2K Historial a corto plazo Tiempo Población 0 20 40 60 80 100 1K 2K Tiempo Figura 13: Manteniendo historial a largo plazo vs. a corto plazo tanto con como sin traidores. 5. TRABAJO RELACIONADO Trabajos anteriores han examinado el problema de incentivos aplicado a sociedades en general y más recientemente a aplicaciones de Internet y sistemas peer-to-peer en particular. Un fenómeno bien conocido en este contexto es la tragedia de los comunes [18], donde los recursos son subprovisionados debido a usuarios egoístas que se aprovechan de los recursos del sistema, y es especialmente común en redes grandes [29] [3]. El problema ha sido estudiado extensamente adoptando un enfoque de teoría de juegos. El modelo del dilema del prisionero proporciona un marco natural para estudiar la efectividad de diferentes estrategias en establecer la cooperación entre los jugadores. En un entorno de simulación con muchos juegos repetidos, identidades persistentes y sin colusión, Axelrod [4] muestra que la estrategia de Tit-for-Tat domina. Nuestro modelo asume que el crecimiento sigue el aprendizaje local en lugar de la dinámica evolutiva [14], y también permite más tipos de ataques. Nowak y Sigmund [28] introducen la estrategia de la Imagen y demuestran su capacidad para establecer la cooperación entre jugadores a pesar de pocas transacciones repetidas mediante el uso de la historia compartida. Los jugadores que utilizan la imagen cooperan con los jugadores cuya cantidad global de cooperaciones menos defecciones excede cierto umbral. Como resultado, un jugador de Imagen es vulnerable a los defraudadores parciales (si el umbral se establece demasiado bajo) o no coopera con otros jugadores de Imagen (si el umbral se establece demasiado alto). En los últimos años, los investigadores han utilizado la teoría del diseño de mecanismos económicos para abordar el problema de la cooperación en las aplicaciones de Internet. El diseño de mecanismos es el inverso de la teoría de juegos. Se pregunta cómo diseñar un juego en el que el comportamiento de los jugadores estratégicos resulte en el resultado socialmente deseado. El Diseño de Mecanismos Algorítmicos Distribuidos busca soluciones dentro de este marco que sean tanto completamente distribuidas como computacionalmente viables [12]. [10] y [11] son ejemplos de la aplicación de DAMD al enrutamiento BGP y el reparto de costos de multicast. Más recientemente, DAMD también ha sido estudiado en entornos dinámicos [38]. En este contexto, demostrar la superioridad de una estrategia cooperativa (como en el caso de nuestro trabajo) es coherente con el objetivo de incentivar el comportamiento deseado entre los jugadores egoístas. Los desafíos únicos impuestos por los sistemas peer-to-peer inspiraron un cuerpo adicional de trabajo [5] [37], principalmente en el contexto del reenvío de paquetes en enrutamiento inalámbrico ad-hoc [8] [27] [30] [35], y compartición de archivos [15] [31]. Friedman y Resnick [13] consideran el problema de las identidades de costo cero en entornos en línea y encuentran que en tales sistemas es inevitable castigar a todos los recién llegados. Utilizando un modelo teórico, demuestran que dicho sistema puede converger hacia la cooperación solo para tasas de rotación suficientemente bajas, lo cual confirman nuestros resultados. [6] y [9] muestran que el lavado de imagen y la colusión pueden tener consecuencias graves para los sistemas peer-to-peer y son difíciles de prevenir en un sistema completamente descentralizado. Algunos clientes comerciales de intercambio de archivos [1] [2] proporcionan mecanismos de incentivos que se hacen efectivos al dificultar que el usuario modifique el código fuente. Estos mecanismos pueden ser eludidos por un usuario experto o por una empresa competidora que lance un cliente compatible sin las restricciones de incentivos. Además, estos mecanismos siguen siendo vulnerables a identidades de costo cero y colusión. BitTorrent utiliza el método de Tit-for-Tat como un mecanismo de asignación de recursos, donde la velocidad de carga de un usuario dicta su velocidad de descarga. 6. CONCLUSIONES En este artículo adoptamos un enfoque de teoría de juegos para abordar el problema de la cooperación en redes peer-to-peer. Abordando los desafíos impuestos por los sistemas P2P, incluyendo grandes poblaciones, alta rotación, asimetría de intereses e identidades de costo cero, proponemos una familia de técnicas de incentivos escalables y robustas, basadas en la función de decisión Recíproca, para apoyar el comportamiento cooperativo y mejorar el rendimiento general del sistema. Encontramos que la adopción de técnicas de historia compartida y selección discriminada de servidores puede mitigar el desafío de pocas transacciones repetidas que surge debido al gran tamaño de la población, alta rotación y asimetría de intereses. Además, la cooperación puede establecerse incluso en presencia de identidades de costo cero mediante el uso de una política adaptativa hacia los desconocidos. Finalmente, los coludidores y traidores pueden ser controlados a través de reputaciones subjetivas y de la historia a corto plazo, respectivamente. 110 7. AGRADECIMIENTOS Agradecemos a Mary Baker, T.J. Giuli, Petros Maniatis, al revisor anónimo y a nuestra editora, Margo Seltzer, por sus útiles comentarios que ayudaron a mejorar el artículo. Este trabajo cuenta con el apoyo parcial de la Fundación Nacional de Ciencias bajo los premios ITR ANI-0085879 y ANI-0331659, y el premio Career ANI-0133811. Las opiniones y conclusiones contenidas en este documento son las de los autores y no deben interpretarse como representativas de las políticas oficiales, ya sea expresadas o implícitas, de la NSF o del gobierno de los Estados Unidos. REFERENCIAS [1] Kazaa. http://www.kazaa.com. [2] Limewire. http://www.limewire.com. [3] ADAR, E., Y HUBERMAN, B. I'm sorry, but you did not provide a sentence to translate. Could you please provide the sentence you would like me to translate to Spanish? Viajando gratis en Gnutella. Primer lunes 5, 10 (octubre de 2000). [4] AXELROD, R. La evolución de la cooperación. BURAGOHAIN, C., AGRAWAL, D., Y SURI, S. Un marco teórico de teoría de juegos para incentivos en sistemas P2P. En Conferencia Internacional sobre Computación entre Pares (Sep 2003). [6] CASTRO, M., DRUSCHEL, P., GANESH, A., ROWSTRON, A., Y WALLACH, D. S. Seguridad para Redes Superpuestas entre Pares Estructuradas. En Actas de Computación Multimedia y Redes 2002 (MMCN 02) (2002). [7] COHEN, B. Los incentivos construyen robustez en BitTorrent. En el 1er Taller sobre Economía de Sistemas Peer-to-Peer (2003). [8] CROWCROFT, J., GIBBENS, R., KELLY, F., Y OSTRING, S. Modelando Incentivos para la Colaboración en Redes Móviles Ad-Hoc. En Modelado y Optimización en Redes Móviles, Ad-hoc e Inalámbricas (2003). [9] DOUCEUR, J. R. El Ataque Sybil. En Actas Electrónicas del Taller Internacional sobre Sistemas Peer-to-Peer (2002). [10] FEIGENBAUM, J., PAPADIMITRIOU, C., SAMI, R., Y SHENKER, S. Un Mecanismo basado en BGP para Enrutamiento de Menor Costo. En Actas del Simposio de la ACM sobre Principios de Computación Distribuida (2002). [11] FEIGENBAUM, J., PAPADIMITRIOU, C., Y SHENKER, S. Compartiendo el Costo de las Transmisiones Multicast. En Journal of Computer and System Sciences (2001), vol. 63, pp. 21-41. [12] FEIGENBAUM, J., Y SHENKER, S. Diseño de Mecanismos Algorítmicos Distribuidos: Resultados Recientes y Direcciones Futuras. En Actas del Taller Internacional sobre Algoritmos Discretos y Métodos para la Computación y Comunicaciones Móviles (2002). [13] FRIEDMAN, E., Y RESNICK, P. El Costo Social de los Seudónimos Baratos. Revista de Estrategia Económica y de Gestión 10, 2 (1998), 173-199. [14] FUDENBERG, D., Y LEVINE, D. K. La Teoría del Aprendizaje en los Juegos. El MIT Press, 1999. [15] GOLLE, P., LEYTON-BROWN, K., MIRONOV, I., Y LILLIBRIDGE, M. Incentivos para compartir en redes peer-to-peer. En Actas de la 3ra conferencia de ACM sobre Comercio Electrónico, octubre de 2001 (2001). [16] GROSS, B., Y ACQUISTI, A. ¿Equilibrios de poder en eBay: ¿Pares o desiguales? En Taller sobre economía de redes peer-to-peer (2003). [17] GU, B., Y JARVENPAA, S. ¿Son las contribuciones a los foros técnicos P2P bienes privados o públicos? - Una investigación empírica. En el 1er Taller sobre Economía de Sistemas Peer-to-Peer (2003). [18] HARDIN, G. La tragedia de los comunes. Ciencia 162 (1968), 1243-1248. [19] JOSEF HOFBAUER Y KARL SIGMUND. Juegos evolutivos y dinámica de poblaciones. Cambridge University Press, 1998. [20] KAMVAR, S. D., SCHLOSSER, M. T., Y GARCIA-MOLINA, H. El algoritmo EigenTrust para la gestión de reputación en redes P2P. En Actas de la Duodécima Conferencia Internacional de la World Wide Web (mayo de 2003). [21] KAN, G. Peer-to-Peer: Aprovechando el Poder de las Tecnologías Disruptivas, 1ra ed. O'Reilly & Associates, Inc., marzo de 2001, cap. Gnutella, pp. 94-122. [22] KUHN, S. Dilema del prisionero. En la Enciclopedia de Filosofía de Stanford, Edward N. Zalta, Ed., edición de verano de 2003. [23] LEE, S., SHERWOOD, R., Y BHATTACHARJEE, B. Grupos de compañeros cooperativos en Niza. En Actas de IEEE INFOCOM (2003). [24] LEVIEN, R., Y AIKEN, A. Métricas de confianza resistentes a ataques para la certificación de clave pública. En Actas del Simposio de Seguridad USENIX (1998), pp. 229-242. [25] MANIATIS, P., ROUSSOPOULOS, M., GIULI, T. J., ROSENTHAL, D. S. H., BAKER, M., Y MULIADI, Y. Preservación de réplicas entre pares mediante votación muestreada con límite de velocidad. En ACM Symposium on Operating Systems Principles (2003). [26] MARTI, S., GIULI, T. J., LAI, K., Y BAKER, M. Mitigating Routing Misbehavior in Mobile ad-hoc Networks. En Actas de MobiCom (2000), pp. 255-265. [27] MICHIARDI, P., Y MOLVA, R. Un Enfoque Teórico del Juego para Evaluar Mecanismos de Aplicación de la Cooperación en Redes Móviles Ad-Hoc. En Modelado y Optimización en Redes Móviles, Ad-hoc e Inalámbricas (2003). [28] NOWAK, M. A., Y SIGMUND, K. Evolución de la Reciprocidad Indirecta mediante Puntuación de Imagen. Naturaleza 393 (1998), 573-577. [29] OLSON, M. La lógica de la acción colectiva: bienes públicos y la teoría de los grupos. Harvard University Press, 1971. [30] RAGHAVAN, B., Y SNOEREN, A. Reenvío prioritario en redes ad hoc con partes auto-interesadas. En Taller sobre Economía de Sistemas Peer-to-Peer (junio de 2003). [31] RANGANATHAN, K., RIPEANU, M., SARIN, A., Y FOSTER, I. Compartir o no compartir: Un análisis de los incentivos para contribuir en entornos de intercambio de archivos colaborativos. En Taller sobre Economía de Sistemas Peer-to-Peer (junio de 2003). [32] REITER, M. K., Y STUBBLEBINE, S. G. Análisis y Diseño de Métricas de Autenticación. ACM Transactions on Information and System Security 2, 2 (1999), 138-158. [33] SAROIU, S., GUMMADI, P. K., Y GRIBBLE, S. D. Un estudio de medición de sistemas de intercambio de archivos peer-to-peer. En Actas de Computación Multimedia y Redes 2002 (MMCN 02) (2002). [34] SMITH, J. M. Evolución y la Teoría de Juegos. Cambridge University Press, 1982. [35] URPI, A., BONUCCELLI, M., Y GIORDANO, S. Modelado de la cooperación en redes móviles ad-hoc: una descripción formal del egoísmo. En Modelado y Optimización en Redes Móviles, Ad-hoc e Inalámbricas (2003). [36] VISHNUMURTHY, V., CHANDRAKUMAR, S., Y SIRER, E. G. KARMA: Un Marco Económico Seguro para el Compartir de Recursos P2P. En Taller sobre Economía de Redes Peer-to-Peer (2003). [37] WANG, W., Y LI, B. Jugar o Controlar: Un Enfoque de Ingeniería de Incentivos Peer-to-Peer basado en Teoría del Control de Juegos. En el Taller Internacional sobre Calidad de Servicio (junio de 2003). [38] WOODARD, C. J., Y PARKES, D. C. Mecanismos a prueba de estrategias para la formación de redes ad-hoc. En Taller sobre Economía de Sistemas Peer-to-Peer (junio de 2003). 111