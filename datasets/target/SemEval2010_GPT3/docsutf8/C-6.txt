Diseño e Implementación de un Sistema de Gestión de Contenido Distribuido por C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ y J.E. La convergencia de avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan y se intercambian rutinariamente entre dispositivos habilitados para redes. El seguimiento (o gestión) de dicho contenido sigue siendo un desafío debido a la gran cantidad de datos. Almacenar medios continuos en vivo (como contenido de televisión o radio) aumenta la complejidad debido a que este contenido no tiene un inicio o fin bien definido y, por lo tanto, resulta engorroso de manejar. El almacenamiento en red permite que el contenido que se ve lógicamente como parte de la misma colección esté distribuido en una red, lo que hace que la gestión de contenido sea casi imposible de manejar sin un sistema de gestión de contenido. En este documento presentamos el diseño e implementación del sistema de gestión de contenido Spectrum, que maneja de manera efectiva el contenido de medios enriquecidos en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto en escenarios independientes como en diferentes entornos de red. Un aspecto único de Spectrum es que requiere que se aplique una (o más) políticas de retención a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido al que ya no se le aplica una política de retención simplemente se elimina del sistema. Diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo, que son bloques de construcción básicos necesarios para manejar el almacenamiento de medios continuos en vivo, al contenido. No solo describimos los detalles de la arquitectura del Spectrum, sino que también proporcionamos casos de uso típicos. Categorías y Descriptores de Asignaturas C.2.4 [Organización de Sistemas Informáticos]: Redes de comunicación informática-sistemas distribuidos; H.3.4 [Sistemas de Información]: Almacenamiento de información y recuperación-sistemas y software Términos Generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar contenido es y siempre ha sido una de las funciones principales de una computadora. Las aplicaciones iniciales de computación incluyen formateadores de texto y compiladores de programas. El contenido era gestionado inicialmente mediante la interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que las personas desean utilizarlo han cambiado considerablemente. Nuevos tipos de contenido, como las transmisiones multimedia continuas, se han vuelto comunes debido a la convergencia de avances en tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de video codificado de calidad televisiva en un solo disco duro. Esto ha llevado a la introducción de sistemas de grabación de video digital independientes o personales, como TiVO y ReplayTV. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas, con la red misma actuando como un gran repositorio de datos. La proliferación de contenido de alta calidad habilitada por estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. El enfoque de nuestro trabajo se centra en el almacenamiento de contenido multimedia y, en particular, en el almacenamiento de contenido multimedia continuo en forma preempaquetada o en vivo. La necesidad de gestión de contenido en esta área es evidente cuando se considera lo siguiente: • Los aumentos en la capacidad y las disminuciones en el costo de almacenamiento significan que incluso los sistemas de escritorio modestos de hoy tienen la capacidad de almacenar grandes cantidades de contenido. La gestión manual de dicho contenido (o más correctamente, la falta de gestión manual de dicho contenido) conduce a grandes ineficiencias donde el contenido no deseado y olvidado se acumula y donde el contenido deseado no se puede encontrar. • Aunque es cierto para todos los tipos de contenido, el almacenamiento de contenido de medios continuos es especialmente problemático. El primer contenido de medios continuos sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque sin política para almacenarlo no funcionará para todos, excepto para los sistemas más pequeños. Segundo, el almacenamiento de contenido en vivo como la televisión o la radio es inherentemente problemático ya que estas señales son flujos continuos sin puntos finales. Esto significa que antes de siquiera pensar en gestionar dicho contenido, es necesario abstraerlo en algo que pueda ser manipulado y gestionado. Al tratar con medios continuos almacenados, es necesario gestionar dicho contenido tanto a un nivel detallado como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar solo los momentos destacados de un evento deportivo en particular no debería estar obligado a tener que almacenar el contenido relacionado con todo el evento. Al mismo tiempo, el usuario podría querer considerar el contenido en su totalidad, por ejemplo, eliminar todo el contenido que no he visto en el último mes, excepto aquel contenido que fue marcado explícitamente para archivar. • Como se indicó anteriormente, tratar de mantener un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenido es muy difícil. Sin embargo, cuando los dispositivos de almacenamiento reales están distribuidos en una red, la tarea de llevar un registro del contenido es casi imposible. Este escenario es cada vez más común en sistemas de distribución de contenido basados en redes y es probable que también cobre importancia en escenarios de redes domésticas. Parecería claro entonces que se necesita un sistema de gestión de contenido que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que aproveche la capacidad de almacenamiento en red de los dispositivos. Este sistema debería permitir el almacenamiento eficiente y el acceso al contenido en dispositivos de almacenamiento de red heterogéneos de acuerdo a las preferencias del usuario. El sistema de gestión de contenido debe traducir las preferencias del usuario en políticas de almacenamiento de bajo nivel apropiadas y permitir que esas preferencias se expresen a un nivel de granularidad fino (sin requerirlo en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar sobre (es decir, cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenido distribuido es difícil debido a la cantidad de requisitos impuestos en el sistema. Por ejemplo: • El sistema de gestión de contenidos debe operar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando contenido almacenado en un sistema de archivos local, mientras que en otros el contenido puede estar almacenado en un dispositivo de almacenamiento de red separado. El administrador de contenido puede ser responsable de implementar las políticas que utiliza para hacer referencia al contenido o ese rol puede ser delegado a un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. El sistema de gestión de contenidos debe ser flexible y capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe ser obtenido, cuándo debe ser recuperado, cuánto tiempo debe ser retenido y en qué circunstancias debe ser descartado. Esto significa que el sistema de gestión de contenido debe permitir que múltiples aplicaciones hagan referencia al contenido con un conjunto amplio de políticas y que todo funcione de manera integrada. • El sistema de gestión de contenido debe ser capaz de monitorear las referencias al contenido y utilizar esa información para ubicar el contenido en la ubicación correcta en la red para un acceso eficiente de las aplicaciones. • El sistema de gestión de contenido debe manejar la interacción entre la población implícita y explícita del contenido en el borde de la red. • El sistema de contenido debe ser capaz de gestionar eficientemente grandes conjuntos de contenido, incluidos flujos continuos. Debe ser capaz de empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas, hemos diseñado e implementado la arquitectura del sistema de gestión de contenido Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan ya sea en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite que múltiples aplicaciones hagan referencia al contenido utilizando políticas diferentes. Se debe tener en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenido (CDN) que puede facilitar la distribución eficiente de contenido (por ejemplo, la arquitectura CDN PRISM [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. El trabajo relacionado se describe en la Sección 4, y la Sección 5 contiene nuestra conclusión y sugerencias para trabajos futuros. 2. La arquitectura del sistema de gestión de contenido distribuido Spectrum consta de tres capas de gestión distintas que pueden o no estar distribuidas en múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todo el contenido de una aplicación según las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de video personal (PVR), el administrador de contenido recibe solicitudes de contenido desde una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y gestionar contenido en el dispositivo. El administrador de políticas implementa y hace cumplir varias políticas de almacenamiento que el administrador de contenido utiliza para hacer referencia al contenido. El gestor de políticas exporta una interfaz al gestor de contenido que le permite al gestor de contenido solicitar que un contenido sea tratado de acuerdo con una política específica. Spectrum permite que se realicen políticas arbitrarias al proporcionar un conjunto fijo de plantillas de políticas base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (de lo contrario, Spectrum se puede extender fácilmente para cargar dinámicamente nuevo código de plantilla de política base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido solo puede existir en el sistema siempre y cuando esté referenciado por al menos una política existente. Los conflictos de políticas se eliminan al hacer que el administrador de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin política asociada se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar de forma natural el intercambio de contenido entre diferentes políticas, lo cual es fundamental para el almacenamiento eficiente de objetos grandes. Ten en cuenta que una diferencia clave entre el gestor de contenido y el gestor de políticas es que el gestor de contenido gestiona referencias a múltiples piezas de contenido, es decir, tiene una vista de aplicación del contenido. Por otro lado, el gerente de políticas solo se preocupa por la política utilizada para gestionar piezas de contenido independientes. Por ejemplo, en una aplicación de PVR, la capa del gestor de contenido conocería los diferentes grupos de contenido gestionado, como mantener indefinidamente, mantener por un día y mantener si hay espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada pieza de contenido tiene su propia política (o políticas) aplicada a ella y es independiente de otro contenido. El gestor de almacenamiento: almacena contenido de manera eficiente mientras facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento guarda el contenido en fragmentos de subobjetos. Este enfoque tiene ventajas para la recuperación eficiente de contenido, pero lo más importante es que permite aplicar políticas a nivel de subobjeto, lo cual es críticamente importante al tratar con objetos muy grandes como partes de medios continuos, por ejemplo, piezas seleccionadas de contenido de televisión almacenadas en un PVR. Ten en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas que están siendo utilizadas por los gestores de contenido y de políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la figura muestra el caso más simple (no distribuido) donde todas las capas están implementadas en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como los PVRs. El siguiente caso corresponde al caso en el que hay un gestor de contenido centralizado que controla dispositivos de almacenamiento distribuido, cada uno de los cuales es responsable de implementar almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, operan de manera mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, típicamente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido según un horario determinado por algún controlador centralizado. Por ejemplo, la CDN podría precargar dispositivos periféricos con contenido que se espera que sea muy popular o distribuir archivos grandes a sucursales durante las horas de menor tráfico en un entorno empresarial con limitaciones de ancho de banda. Permitir que un único administrador de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y al caso más distribuido. La necesidad de este tipo de separación puede surgir por razones de escalabilidad o cuando se requiere controlar diferentes dispositivos de almacenamiento especializados con un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas controlando un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo detallado por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de Contenidos La capa del gestor de contenidos es la interfaz principal a través de la cual las aplicaciones específicas utilizan la arquitectura Spectrum. Por lo tanto, la capa del gestor de contenido proporciona una API para que la aplicación pueda manipular todos los aspectos de la arquitectura de Spectrum en diferentes niveles de granularidad. La API del gestor de contenido tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite agregar dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo el control del gestor de contenido y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos; este es el único lugar en la arquitectura donde la aplicación debe ser consciente de esta distinción. Una vez que un dispositivo es mapeado en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Almacenes: Los almacenes son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (por ejemplo, espacio en disco) a la misma. Las tiendas solo se pueden crear en dispositivos físicos que estén mapeados en el sistema. Grupos de Políticas: Los grupos de políticas son el medio por el cual una aplicación especifica, instancia y modifica las políticas que se aplican al contenido del Espectro. El uso típico de este conjunto de funciones es seleccionar una de un pequeño conjunto de políticas base y parametrizar esta instancia específica de la política. Los grupos de políticas se crean dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento y que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que incluyen una especificación de tiempo sofisticada permiten un almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría expulsar el contenido del sistema en un momento absoluto o relativo específico. Una política basada en el tiempo un poco más compleja habilitada por la arquitectura Spectrum podría permitir que el contenido se almacene en una ventana de tiempo de un número de horas (por ejemplo, las N horas más recientes se mantienen en el sistema). Las políticas basadas en el tiempo son de particular utilidad al tratar con contenido continuo como una transmisión en vivo. 6 Contenido: En el nivel más fino de granularidad, el contenido puede ser añadido o eliminado del sistema. El contenido se especifica al sistema mediante un localizador uniforme de recursos (URL) que indica de manera concisa la ubicación del contenido, así como el protocolo a utilizar para recuperarlo. Opcionalmente se puede asociar una especificación de tiempo con el contenido. Esto permite que el contenido sea recuperado en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Nuevamente, esto es particularmente útil para tratar con el almacenamiento y gestión de contenido en vivo. 2.2 Gestor de Políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones de API. Primero, hay funciones que operan en áreas de almacenamiento gestionadas y referencias basadas en políticas (prefs) al contenido almacenado allí. Segundo, hay conjuntos de funciones utilizadas para implementar cada política de gestión. La primera clase de funciones es utilizada por la capa de gestión de contenido para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar. Estas operaciones son utilizadas por el gestor de contenido para controlar su acceso al almacenamiento. El proceso de creación de políticas de gestión de operaciones se utiliza para establecer contacto con una tienda por primera vez. Una vez que esto se haya hecho, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Ten en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información solo necesita ser transmitida al administrador de políticas una vez al momento de la creación. Para operaciones abiertas, el administrador de políticas utilizará la información en caché para contactar a la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el administrador de contenido consulte al administrador de políticas sobre qué contenido está actualmente presente para una URL dada. Para medios continuos, se devolverán rangos de tiempo de medios presentes. recurso: Las rutinas de recurso se utilizan para consultar al administrador de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su totalidad y otra que se aplica a una referencia de política en particular. La API de recursos es extensible, actualmente admitimos consultas sobre el uso de disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer se utiliza por el gestor de contenido para hacer referencia al contenido en la tienda. Si el contenido no está presente, esta llamada resultará en la obtención del contenido (o en la programación para obtenerlo si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL donde se almacenará, la URL desde la cual se obtendrán los datos si no están presentes, la política para almacenar el contenido y los argumentos utilizados para parametrizar la política. El resultado de una operación de establecimiento de prefijo exitosa es una cadena de identificación de referencia de política. Este identificador se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones del gestor de políticas se utilizan para implementar todas las políticas respaldadas por Spectrum. Visualizamos un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitiva puede ser parametrizada para funcionar diariamente, semanalmente o mensualmente. Ten en cuenta que el gestor de políticas solo se preocupa por ejecutar una política específica. Las razones de nivel superior para elegir una política determinada son manejadas por el gerente de contenido y aplicación. Una política base se implementa utilizando seis funciones: establecer: se llama cuando se establece una preferencia con las URL requeridas y los parámetros de la política base. El rutina establecida hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar acción (por ejemplo, iniciar una descarga) y programa una devolución de llamada para ese momento. También puede registrarse para recibir devoluciones de llamada si se recibe nuevo contenido para una URL específica. actualizar: se llama para cambiar los parámetros de una preferencia, o para descartar la referencia de la política. newclip: se llama cuando se recibe un fragmento de nuevo contenido para una URL de interés. La política base normalmente establece que se llame a newclip para una URL dada cuando se establece la preferencia. Cuando se llama a newclip, la política base verifica sus parámetros para determinar si desea agregar una referencia al clip recién recibido. callback: llamado cuando la preferencia programa una devolución de llamada basada en temporizador. Este es un mecanismo útil de activación para preferencias que necesitan estar inactivas durante un largo período de tiempo (por ejemplo, entre programas). arranque/apagado: se llama cuando el sistema de gestión de contenidos se está iniciando o apagando. La operación de arranque se utiliza típicamente para programar devoluciones de llamada iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para cerrar de forma ordenada los flujos de entrada/salida y guardar el estado. 2.3 Gestor de almacenamiento El rol del gestor de almacenamiento de Spectrum es controlar todas las operaciones de entrada/salida asociadas con una tienda dada. El gestor de almacenamiento de Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo, un dispositivo de almacenamiento). Para los medios continuos, a nivel del gestor de almacenamiento, el contenido se almacena como una colección de fragmentos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un fragmento podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión en continuo, tanto las rutinas de entrada como de salida toman rangos de tiempo que programan cuándo debe ocurrir la operación de E/S, y ambas rutinas devuelven un identificador de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el administrador de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar almacenes. También admite operaciones para consultar los usos de recursos y opciones admitidas por la tienda. Finalmente, el administrador de almacenamiento también tiene un procedimiento de descarte que puede ser utilizado por el administrador de políticas para informar a la tienda que elimine contenido de la tienda. 3. IMPLEMENTACIÓN Y CASOS DE USO En esta sección describimos nuestra implementación de Spectrum y cómo puede ser utilizada. 3.1 Implementación Hemos implementado las tres capas de Spectrum en C como parte de una biblioteca que puede ser enlazada con aplicaciones basadas en Spectrum. Cada capa lleva un registro de su estado a través de un conjunto de archivos de datos locales que persisten a través de reinicios, lo que permite a Spectrum manejar los ciclos de energía de manera fluida. Para las capas que residen en sistemas remotos (por ejemplo, una tienda remota), solo se almacena localmente la meta-información necesaria para contactar al administrador de políticas del gestor de contenido remoto, el gestor de almacenamiento, el recuperador de almacenamiento, los listados de programas, la interfaz de usuario gráfica, el DVR habilitado para red, la información del programa, la aplicación de DVR de contenido en la red habilitada para DVR. Figura 2: Espectro en un nodo de DVR habilitado para red. Nuestra aplicación de prueba utiliza un administrador de políticas y almacenamiento local para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficientemente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas de API de Spectrums admiten tanto modos síncronos como asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada a la API toma un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de la llamada y el estado de retorno. Para las llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamada. Para utilizar una función de la API de Spectrum, el llamante primero elige entre el modo sincrónico o asincrónico y asigna una estructura reqinfo. Para llamadas de sincronización, la reqinfo puede ser asignada en la pila, de lo contrario se asigna con malloc. Para llamadas asíncronas, se debe proporcionar una función de devolución de llamada al asignar el reqinfo. A continuación, el llamante invoca la función API de Spectrum deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas asincrónicas exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada asíncrona se completa o se produce un tiempo de espera, se llama a la función de devolución de llamada asíncrona con la información adecuada necesaria para completar el procesamiento. El diseño modular/capas de la arquitectura Spectrum simplifica el objetivo de distribución de funcionalidad. Además, la comunicación entre funciones suele ser de naturaleza maestro-esclavo(s). Esto significa que son posibles varios enfoques para la operación distribuida que cumplirían con los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un diseño modular simple. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y elegir el método de codificación que se debe utilizar con los datos a transferir. Los protocolos de transporte pueden variar desde protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP simple para la mayoría de nuestro transporte. Las llamadas a funciones a través de las diferentes APIs de Spectrum pueden ser codificadas utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos utilizando la biblioteca XML eXpat [4] para codificar nuestras llamadas. Mientras actualmente estamos transfiriendo nuestros mensajes codificados en XML utilizando una conexión TCP simple, en un entorno del mundo real esto puede ser fácilmente reemplazado con una implementación basada en capa de sockets seguros (SSL) para mejorar la seguridad al agregar SSL como protocolo de transporte. Un aspecto importante de Spectrum es que puede gestionar contenido basado en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la Sección 2.2, imagina un pequeño conjunto de funciones de política de nivel base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben comprender las políticas de nivel base y cómo pueden ser parametrizadas. Para abordar este problema, tratamos cada política de nivel base como si fuera un programa separado. Cada política de nivel base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada utilizando una función similar a getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de los bytes no es un problema en una cadena. Dado que esta parte de Spectrum no se encuentra en la ruta crítica de los datos, este tipo de formato no representa un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos de Spectrum En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos de Spectrum en nuestro entorno. El enfoque de nuestro trabajo anterior ha sido la distribución de contenido para contenido de medios en streaming [2] y la grabación de video digital habilitada para redes [3]. El sistema Spectrum es aplicable a ambos escenarios de la siguiente manera. La Figura 2 muestra la arquitectura del DVR habilitado para red (NED). En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación de DVR obtiene listados de programas de alguna fuente de red, maneja la presentación al usuario a través de una interfaz gráfica de usuario (GUI) e interactúa con el sistema Spectrum a través de las APIs de la capa de gestión de contenido. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento que se aplicarán a dicho contenido. La obtención del contenido (a través de la red o localmente) y su posterior almacenamiento en el sistema local son manejados por los gestores de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenido en streaming (por ejemplo, PRISM [2]) está representado en la Figura 3. En este entorno, el contenido de medios en streaming (tanto en vivo, enlatado en vivo y a la carta) se distribuye a los portales periféricos desde donde se sirven los puntos finales de streaming. En nuestro entorno, la distribución y almacenamiento de contenido se realiza desde una estación centralizada de gestión de contenido que controla varios de los portales periféricos. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenido sin necesidad de una comunicación continua entre el gestor de contenido y los dispositivos periféricos, es decir, una vez que se han dado instrucciones a los dispositivos periféricos, pueden operar de forma independiente hasta que se deban realizar cambios. Ejemplo operativo de Spectrum 3.3 Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación de PVR basada en Spectrum programada para almacenar un día de contenido de transmisión en una ventana móvil. Para configurar la ventana deslizante, la aplicación utilizaría la API del gestor de contenido para crear un grupo de políticas y una referencia de política al contenido deseado. El establecimiento de la política de ventana de un día en movimiento haría que el gerente de políticas le pida al gerente de almacenamiento que comience a recibir el flujo. A medida que llega cada fragmento de datos en streaming, el gestor de políticas ejecuta la función newclip de las referencias de política. La función newclip agrega una referencia a cada fragmento que llega y programa una devolución de llamada para un día después. En ese momento, la política eliminará su referencia actual de un día al contenido y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considera el caso en el que el usuario decide guardar parte del contenido (por ejemplo, un programa específico) en la ventana deslizante durante una semana adicional. Para hacer esto, la aplicación solicita que el gestor de contenido agregue una nueva referencia de política adicional a la parte del contenido que se va a preservar. Por lo tanto, el contenido preservado tiene dos referencias: una del marco de tiempo móvil y otra de la solicitud de preservar el contenido por una semana adicional. Después de un día, la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. datos base url1 url2 (archivos multimedia...) (archivos multimedia...) almacenamiento de metadatos (información general...) url1 fragmentos preferencias rangos fragmentos multimedia, etc. url2 host poli ref1 ref1.archivos ref1.estado Figura 4: Diseño de datos de la tienda de políticas de Spectrum preservado por la segunda referencia. Después de que haya transcurrido la semana adicional, se llamará a la función de devolución de llamada para la segunda referencia. Esta función descartará la referencia restante al contenido y, como no hay referencias restantes, el contenido será liberado. Para poder funcionar en escenarios como los descritos anteriormente, el gestor de políticas de Spectrums debe administrar y mantener todas las referencias a diferentes fragmentos de medios. Estas referencias son persistentes y, por lo tanto, deben poder sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestro implementación del gestor de políticas de Spectrum logra esto utilizando la estructura de archivos y directorios mostrada en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el gestor de almacenamiento para almacenar los fragmentos de medios de cada URL activa. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Ten en cuenta que este directorio se utiliza solo si el gestor de almacenamiento es local. Si el administrador de políticas está utilizando un administrador de almacenamiento externo (por ejemplo, un dispositivo de almacenamiento), entonces los archivos multimedia se almacenan de forma remota y solo son referenciados de forma remota por el administrador de políticas. meta: este directorio contiene información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) y la información sobre los tipos de fragmentos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los fragmentos de datos almacenados. El archivo de fragmentos contiene una lista de fragmentos almacenados actualmente y sus recuentos de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de intervalos de tiempo de los datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato del medio que se está almacenando bajo la URL actual. poly: este directorio contiene un conjunto de subdirectorios de host. Cada subdirectorio de host contiene el conjunto de referencias de políticas creadas por ese host. La información de cada referencia de política está dividida en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files y ref1.state. El archivo ref1 contiene información sobre la referencia de la política que no cambia con frecuencia. Esta información incluye la política base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a fragmentos que posee el prefijo ref1. Finalmente, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Ten en cuenta que otras implementaciones son posibles. Por ejemplo, un administrador de espectro de calidad de operador podría almacenar toda su información de políticas y referencias en un sistema de base de datos de alto rendimiento. 10 4. TRABAJO RELACIONADO Varios autores han abordado el problema de la gestión de contenido en redes distribuidas. Gran parte del trabajo se centra en el aspecto de gestión de políticas. Por ejemplo, en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda del usuario utilizando un Protocolo de Diseminación de Demanda. El rendimiento del esquema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Enrutador Central, una Base de Conocimiento en Caché, Subcachés y un juez de expulsión de Subcaché. La base de conocimientos de caché permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenido en el entorno de red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenido, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de televisión que se utilizan en los PVR para seleccionar automáticamente contenido para los usuarios, por ejemplo [6]. En el caso de que Spectrum se utilice en una configuración de PVR, este tipo de sistema realizaría una función de nivel superior y claramente se beneficiaría de las funcionalidades de la arquitectura de Spectrum. Finalmente, en el entorno comercial de CDN, los proveedores (por ejemplo, Cisco y Netapp han desarrollado e implementado productos y herramientas de gestión de contenido. A diferencia de la arquitectura Spectrum que permite que los dispositivos periféricos operen de manera autónoma en gran medida, las soluciones de los proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. CONCLUSIÓN Y TRABAJOS FUTUROS En este artículo presentamos el diseño e implementación de la arquitectura de gestión de contenido Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que son conscientes del tiempo, lo que permite gestionar de manera efectiva el almacenamiento de contenido multimedia continuo. Finalmente, el diseño modular de la arquitectura Spectrum permite tanto realizaciones independientes como distribuidas para que el sistema pueda ser desplegado en una variedad de aplicaciones. Existen varios problemas abiertos que requerirán trabajo futuro. Algunos de estos problemas incluyen: • Visualizamos que Spectrum pueda gestionar contenido en sistemas que van desde grandes CDNs hasta dispositivos más pequeños como TiVO [8]. Para que estos sistemas más pequeños puedan soportar Spectrum, necesitarán de una red y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo se puede integrar en la arquitectura de Spectrum. • Spectrum nombra el contenido por URL, pero intencionalmente no hemos definido el formato de las URL de Spectrum, cómo se relacionan con el nombre real del contenido, o cómo los nombres y las URL deben presentarse al usuario. Si bien anteriormente abordamos estos temas en otro lugar [2], creemos que hay más trabajo por hacer y que se deben redactar estándares basados en consenso sobre la nomenclatura. En este documento nos hemos centrado en la gestión de contenido para objetos de medios continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero aún no hemos resuelto los detalles necesarios para admitir esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que el contenido multimedia se comparta fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. REFERENCIAS [1] K. . Cheng y Y. Kambayashi. Gestión de contenido basada en multicache para el almacenamiento en caché web. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información en la Web, junio de 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. Arquitectura PRISM: Apoyo a Servicios de Streaming Mejorados en una Red de Distribución de Contenidos. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de video digital habilitado para red. 11º Taller de la IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji y P. Shenoy. Una arquitectura de clúster de servidores de medios en streaming adaptativa a la demanda y consciente de la localidad (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Un recomendador de televisión multiagente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11