La optimización del presupuesto en subastas de publicidad basadas en búsquedas. Si bien ha habido trabajos previos sobre el proceso de subasta y sus aspectos teóricos del juego, la mayoría se centra en la empresa de Internet. En este trabajo, nos enfocamos en los anunciantes, quienes deben resolver un problema de optimización complejo para decidir cómo colocar ofertas en palabras clave para maximizar su retorno (el número de clics de usuarios en sus anuncios) para un presupuesto dado. Modelamos todo el proceso y estudiamos este problema de optimización del presupuesto. Si bien la mayoría de las variantes son NP-duros, demostramos, quizás sorprendentemente, que simplemente al azar entre dos estrategias uniformes que ofertan igualmente en todas las palabras clave funciona bien. Más precisamente, esta estrategia obtiene al menos una fracción de 1 − 1/e del máximo de clics posibles. Como muestran nuestros experimentos preliminares, es probable que estrategias uniformes como estas sean prácticas. También presentamos resultados de inexacibilidad y algoritmos óptimos para variantes del problema de optimización de presupuesto. Categorías y Descriptores de Asignaturas F.2 [Teoría de la Computación]: Análisis de Algoritmos y Complejidad de Problemas; J.4 [Aplicaciones Informáticas]: Ciencias Sociales y del Comportamiento - Economía Términos Generales Algoritmos, Economía, Teoría. 1. La búsqueda en línea es ahora ubicua y las empresas de búsqueda en Internet como Google, Yahoo! y MSN permiten a las empresas y particulares anunciarse en función de las consultas de búsqueda realizadas por los usuarios. Los medios de comunicación convencionales, como las estaciones de televisión o los periódicos, fijan el precio de sus espacios publicitarios de forma individual, y los anunciantes compran los que pueden permitirse. Por el contrario, las empresas de búsqueda en Internet encuentran difícil establecer un precio explícitamente para los anuncios que colocan en respuesta a las consultas de los usuarios. Esta dificultad surge porque la oferta (y la demanda) varía amplia e impredeciblemente en las consultas de los usuarios, y deben fijar precios para miles de millones de dichas consultas en tiempo real. Por lo tanto, confían en el mercado para determinar precios adecuados mediante subastas entre los anunciantes. Es un problema desafiante establecer la subasta para lograr un mercado estable en el que todas las partes (los anunciantes, los usuarios y la empresa de búsqueda en Internet) estén adecuadamente satisfechas. Recientemente ha habido un estudio sistemático de los problemas involucrados en la teoría de juegos de las subastas [5, 1, 2], maximización de ingresos [10], etc. La perspectiva en este documento no es de la empresa de búsqueda en Internet que muestra los anuncios, sino de los anunciantes. El desafío desde el punto de vista de un anunciante es comprender e interactuar con el mecanismo de subasta. El anunciante determina un conjunto de palabras clave de su interés y luego debe crear anuncios, establecer las ofertas para cada palabra clave y proporcionar un presupuesto total (a menudo diario). Cuando un usuario plantea una consulta de búsqueda, la empresa de búsqueda en Internet determina los anunciantes cuyas palabras clave coinciden con la consulta y que aún tienen presupuesto disponible, realiza una subasta entre ellos y presenta el conjunto de anuncios correspondientes a los anunciantes que ganan la subasta. El anunciante cuyo anuncio aparece paga a la empresa de búsqueda en Internet si el usuario hace clic en el anuncio. El enfoque de este documento se centra en cómo los anunciantes hacen ofertas. Para la elección particular de palabras clave de su interés, un anunciante desea optimizar el efecto general de la campaña publicitaria. Si bien el efecto de una campaña publicitaria en cualquier medio es un fenómeno complicado de cuantificar, una noción comúnmente aceptada (y fácilmente cuantificable) en la publicidad basada en búsquedas en Internet es maximizar el número de clics. Las empresas de búsqueda en Internet son de apoyo para. La elección de palabras clave está relacionada con el conocimiento del dominio del anunciante, el comportamiento del usuario y consideraciones estratégicas. Las empresas de búsqueda en internet proporcionan a los anunciantes resúmenes del tráfico de consultas, lo cual les resulta útil para optimizar sus elecciones de palabras clave de forma interactiva. No abordamos directamente la elección de palabras clave en este documento, lo cual se trata en otro lugar [13]. 40 anunciantes y proporcionamos estadísticas sobre la historia de los volúmenes de clics y predicciones sobre el rendimiento futuro de varias palabras clave. Sin embargo, este es un problema complejo por las siguientes razones (entre otras): • Las palabras clave individuales tienen características significativamente diferentes entre sí; por ejemplo, mientras que "fishing" es una palabra clave amplia que coincide con muchas consultas de usuarios y tiene muchos anunciantes competidores, "humane fishing bait" es una palabra clave de nicho que coincide solo con algunas consultas, pero podría tener menos competencia. • Existen interacciones complejas entre las palabras clave porque una consulta de usuario puede coincidir con dos o más palabras clave, ya que el anunciante está tratando de cubrir todas las posibles palabras clave en algún dominio. De hecho, el anunciante termina compitiendo consigo mismo. Como resultado, los anunciantes se enfrentan a un desafiante problema de optimización. El enfoque de este documento es resolver este problema de optimización. 1.1 El Problema de Optimización del Presupuesto Presentamos una breve discusión y formulación del problema de optimización al que se enfrentan los anunciantes; una descripción más detallada se encuentra en la Sección 2. Un anunciante dado ve el estado de las subastas para la publicidad basada en búsquedas de la siguiente manera. Hay un conjunto K de palabras clave de interés; en la práctica, incluso los anunciantes pequeños suelen tener un conjunto K grande. Hay un conjunto Q de consultas realizadas por los usuarios. Para cada consulta q ∈ Q, existen funciones que dan los clicsq(b) y costq(b) que resultan de ofertar una cantidad particular b en la subasta para esa consulta, la cual modelamos de manera más formal en la siguiente sección. Hay un grafo bipartito G en los dos conjuntos de vértices que representan K y Q. Para cualquier consulta q ∈ Q, los vecinos de q en K son las palabras clave que se dice que coinciden con la consulta q. El problema de optimización del presupuesto es el siguiente. Dado el grafo G junto con las funciones clicksq(·) y costq(·) en las consultas, así como un presupuesto U, determine las ofertas bk para cada palabra clave k ∈ K de modo que se maximice P q clicksq(bq) sujeto a P q costq(bq) ≤ U, donde la oferta efectiva bq en una consulta es alguna función de las ofertas de palabras clave en el vecindario de q. Si bien podemos plantear este problema como un problema de optimización tradicional, existen diferentes desafíos en la práctica dependiendo del acceso de los anunciantes a la información de consultas y gráficos, y de hecho, la fiabilidad de esta información (por ejemplo, podría basarse en datos históricos inestables). Por lo tanto, es importante encontrar soluciones a este problema que no solo obtengan muchos clics, sino que también sean simples, robustas y menos dependientes de la información. En este documento definimos la noción de una estrategia uniforme, que es esencialmente una estrategia que ofrece pujas de forma uniforme en todas las palabras clave. Dado que este tipo de estrategia obvia la necesidad de conocer cualquier detalle del gráfico, y efectivamente agrega las funciones de clics y costos en las consultas, es bastante robusta y, por lo tanto, deseable en la práctica. Lo sorprendente es que la estrategia uniforme realmente funciona bien, lo cual demostraremos. Los detalles de la regla de emparejamiento son determinados por la empresa de búsqueda en Internet; aquí tratamos la función como arbitraria. Nuestros Resultados Principales y Resumen Técnico Presentamos resultados positivos y negativos para el problema de optimización del presupuesto. En particular, mostramos que: • Casi todas las formulaciones del problema son NP-Completos. En casos ligeramente más generales que la formulación anterior, donde los clics tienen pesos, el problema es intratable en una aproximación mejor que un factor de 1 − 1 e , a menos que P=NP. • Presentamos un algoritmo de aproximación (1−1/e) para el problema de optimización de presupuesto. La estrategia encontrada por el algoritmo es una estrategia uniforme de dos ofertas, lo que significa que se aleatoriza entre ofertar un valor b1 en todas las palabras clave y ofertar otro valor b2 en todas las palabras clave hasta que se agote el presupuesto. Mostramos que esta proporción de aproximación es ajustada para estrategias uniformes. También ofrecemos un algoritmo de aproximación (1/2) que ofrece una estrategia uniforme de una sola oferta, utilizando solo un valor b1. (Esto es óptimo para estrategias uniformes de una sola oferta). Estas estrategias pueden ser calculadas en un tiempo casi lineal en |Q| + |K|, el tamaño de la entrada. Las estrategias uniformes pueden parecer ingenuas en una primera consideración porque las palabras clave varían significativamente en sus funciones de clics y costos, y puede haber una interacción compleja entre ellas cuando varias palabras clave son relevantes para una consulta. Después de todo, el óptimo puede configurar ofertas arbitrarias en cada una de las palabras clave. Incluso para el caso simple en el que el grafo es un emparejamiento, el algoritmo óptimo implica colocar diferentes ofertas en diferentes palabras clave a través de un empaquetado tipo mochila (Sección 2). Por lo tanto, podría resultar sorprendente que una estrategia uniforme de subasta de dos ofertas simples sea un 63% o más efectiva en comparación con la óptima. De hecho, nuestra prueba es más sólida, demostrando que esta estrategia es 63% efectiva contra un adversario estrictamente más poderoso que puede ofertar de forma independiente en las consultas individuales, es decir, no estar limitado por la interacción impuesta por el grafo G. Nuestra prueba de la proporción de aproximación de 1 − 1/e se basa en un análisis adversarial. Definimos un LP que revela factores (Sección 4) donde las soluciones primales corresponden a posibles instancias, y las soluciones duales corresponden a distribuciones sobre estrategias de oferta. Al derivar la solución óptima de este LP, obtenemos tanto la prueba de la proporción de aproximación como una instancia de peor caso ajustada. Hemos realizado simulaciones utilizando datos reales de subastas de Google. Los resultados de estas simulaciones, que se destacan al final de la Sección 4, sugieren que las estrategias de oferta uniformes podrían ser útiles en la práctica. Sin embargo, quedan preguntas importantes sobre (entre otras cosas) objetivos de licitación alternativos, modelos de licitación en línea o estocásticos [11], y preocupaciones de teoría de juegos [3], que discutimos brevemente en la Sección 8.2. MODELADO DE UNA SUBASTA DE PALABRAS CLAVE Describimos una subasta desde el punto de vista de un anunciante. Un anunciante puja por una palabra clave, que podemos pensar como una palabra o conjunto de palabras. Los usuarios del motor de búsqueda envían consultas. Si la consulta coincide con una palabra clave por la que haya pujado un anunciante, entonces el anunciante participa en una subasta por los espacios publicitarios disponibles en la página de resultados. Lo que constituye una coincidencia varía dependiendo del motor de búsqueda. Este tipo de estrategia también puede interpretarse como ofertar un valor (en todas las palabras clave) durante parte del día, y un valor diferente durante el resto del día. Un anunciante realiza una única oferta por una palabra clave que permanece vigente durante un período de tiempo, digamos un día. La palabra clave podría coincidir con muchas consultas de usuarios diferentes a lo largo del día. Cada consulta de usuario puede tener un conjunto diferente de anunciantes compitiendo por clics. El anunciante también podría ofertar cantidades diferentes en múltiples palabras clave, cada una coincidiendo con un conjunto (posiblemente superpuesto) de consultas de usuarios. El objetivo final de un anunciante es maximizar el tráfico a su sitio web, dado un presupuesto publicitario determinado. Ahora formalizamos un modelo de subasta de palabras clave y definimos un problema de optimización que captura este objetivo. 2.1 Paisajes Comenzamos considerando el caso de una sola palabra clave que coincide con una sola consulta de usuario. En esta sección definimos la noción de un paisaje de consultas que describe la relación entre la oferta del anunciante y lo que sucederá en esta consulta como resultado de esta oferta[9]. Esta definición será central en la discusión a medida que continuamos con casos más generales. 2.1.1 Posiciones, ofertas y tasa de clics La página de resultados de búsqueda para una consulta contiene p posiciones posibles en las que nuestro anuncio puede aparecer. Denotamos la posición más alta (más favorable) con 1 y la más baja con p. Asociado con cada posición i hay un valor α[i] que denota la tasa de clics (ctr) del anuncio en la posición i. El CTR es una medida de qué tan probable es que nuestro anuncio reciba un clic si se coloca en la posición i. El CTR se puede medir empíricamente utilizando el historial pasado. Suponemos a lo largo de este trabajo que α[i] ≤ α[j] si j < i, es decir, las posiciones más altas reciben al menos tantos clics como las posiciones más bajas. Para colocar un anuncio en esta página, debemos participar en la subasta que se lleva a cabo entre todos los anunciantes que han presentado una oferta en una palabra clave que coincide con la consulta del usuario. Nos referiremos a esta subasta como una subasta de consulta, para enfatizar que hay una subasta para cada consulta en lugar de para cada palabra clave. Suponemos que la subasta es una subasta de segundo precio generalizado (GSP) [5, 7]: los anunciantes están clasificados en orden decreciente de oferta, y a cada anunciante se le asigna un precio igual a la cantidad ofertada por el anunciante que está debajo de ellos en la clasificación. En las subastas de búsqueda patrocinada, este anunciante paga solo si el usuario hace clic en el anuncio. Que (b[1], . . . , b[p]) denote las ofertas de los p principales anunciantes en esta subasta de consulta. Para mayor comodidad notacional, asumimos que b[0] = ∞ y b[p] = α[p] = 0. Dado que la subasta es una subasta de segundo precio generalizada, las ofertas más altas ganan posiciones más altas; es decir, b[i] ≥ b[i + 1]. Supongamos que pujamos b por alguna palabra clave que coincida con la consulta de los usuarios, entonces nuestra posición está definida por el mayor b[i] que sea como máximo b, es decir, pos(b) = arg max i (b[i] : b[i] ≤ b). Dado que solo pagamos si el usuario hace clic (lo cual sucede con probabilidad α[i]), nuestro costo esperado por ganar la posición i 4 Google, Yahoo! y MSN utilizan alguna variante de la subasta GSP. En la subasta de Google, las ofertas de los anunciantes se multiplican por una puntuación de calidad antes de ser clasificadas; nuestros resultados se aplican también a este caso, el cual omitimos en este documento por claridad. Además, se han considerado otras subastas además de GSP; por ejemplo, la subasta de Vickrey Clark Groves (VCG) [14, 4, 7]. Cada mecanismo de subasta resultará en un tipo diferente de problema de optimización. En la conclusión señalamos que para la subasta VCG, el problema de optimización de la oferta se vuelve bastante sencillo, siendo coste[i] = α[i] · b[i], donde i = pos(b). Utilizamos costq(b) y clicksq(b) para denotar el costo esperado y los clics que resultan de tener una oferta b que califica para una subasta de consulta q, y así costq(b) = α[i] · b[i] donde i = pos(b), (2) clicksq(b) = α[i] donde i = pos(b). (3) Las siguientes observaciones sobre el costo y los clics siguen inmediatamente de las definiciones y ecuaciones (1), (2) y (3). Usamos R+ para denotar los números reales no negativos. Observación 1. Para b ∈ R+, 1. (costq(b), clicksq(b)) solo puede tomar uno de un conjunto finito de valores Vq = {(cost[1], α[1]), . . . , (cost[p], α[p])}. 2. Tanto costq(b) como clicksq(b) son funciones no decrecientes de b. Además, el costo por clic (cpc) es no decreciente en b. 3. El costo por clic es menor o igual a b. Para las ofertas (b[1], . . . , b[p]) que corresponden a las ofertas de otros anunciantes, tenemos: costq(b[i])/clicksq(b[i]) = b[i], i ∈ [p]. Cuando el contexto es claro, eliminamos el subíndice q. 2.1.2 Paisajes de Consulta Podemos resumir los datos contenidos en las funciones coste(b) y clics(b) como una colección de puntos en un gráfico de coste vs. clics, al que nos referimos como un paisaje. Por ejemplo, para una consulta con cuatro espacios, un paisaje podría verse como en la Tabla 1. rango de oferta costo por clic costo clics [$2.60,∞) $2.60 $1.30 .5 [$2.00,$2.60) $2.00 $0.90 .45 [$1.60,$2.00) $1.60 $0.40 .25 [$0.50,$1.60) $0.50 $0.10 .2 [$0,$0.50) $0 $0 0 Tabla 1: Un paisaje para una consulta Es conveniente representar estos datos gráficamente como en la Figura 1 (ignora la línea punteada por ahora). Aquí graficamos los clics en función del costo. Observe que en este gráfico, el cpc (costo(b)/clics(b)) de cada punto es el recíproco de la pendiente de la línea desde el origen hasta el punto. Dado que el costo(b), clics(b) y costo(b)/clics(b) son no decrecientes, la pendiente de la línea desde el origen a puntos sucesivos en el gráfico disminuye. Esta condición es ligeramente más débil que la concavidad. Supongamos que queremos resolver el problema de optimización del presupuesto para un único paisaje de consultas. A medida que aumentamos nuestra oferta desde cero, nuestro costo aumenta y nuestro número esperado de clics aumenta, por lo que simplemente enviamos la oferta más alta tal que permanezcamos dentro de nuestro presupuesto. Un problema que vemos de inmediato es que dado que solo hay un conjunto finito de puntos en este paisaje, es posible que no podamos dirigirnos a presupuestos arbitrarios de manera eficiente. Supongamos en el ejemplo de la Tabla 1 y la Figura 1 que teníamos un presupuesto de $1.00. La oferta entre $2.00 y $2.60 solo utiliza $0.90, por lo que estamos gastando menos de lo necesario. Pujar más de $2.60 no es una opción, ya que incurriríamos en un costo de $1.30 y excederíamos nuestro presupuesto. 2.1.3 Estrategias aleatorias Para corregir este problema y utilizar mejor nuestro presupuesto disponible, permitimos estrategias de puja aleatorias. Sea B una distribución de ofertas b ∈ R+. Ahora definimos coste(B) = Eb∼B[coste(b)] y clics(B) = Eb∼B[clics(b)]. Gráficamente, los posibles valores de (costo(B), clics(B)) se encuentran en la envolvente convexa de los puntos del paisaje. Esto se representa en la Figura 1 mediante la línea punteada. Para encontrar una distribución de oferta B que maximice los clics sujeto a un presupuesto, simplemente trazamos una línea vertical en el gráfico donde el costo sea igual al presupuesto, y encontramos el punto más alto en esta línea en la envolvente convexa. Este punto siempre será la combinación convexa de como máximo dos puntos originales del paisaje que a su vez se encuentran en la envolvente convexa. Por lo tanto, dado el punto en la envolvente convexa, es fácil calcular una distribución en dos ofertas que llevaron a este punto. Resumiendo, Lema 1. Si un anunciante está pujando por una palabra clave, sujeto a un presupuesto U, entonces la estrategia óptima es elegir una combinación convexa de (como máximo) dos ofertas que se encuentren en los extremos de la línea en la envolvente convexa en el punto más alto para el costo U. Hay una sutileza en esta formulación. Dada cualquier estrategia de oferta, ya sea aleatoria o no, el costo resultante es en sí mismo una variable aleatoria que representa el costo esperado. Por lo tanto, si nuestra restricción presupuestaria es estricta, debemos enfrentar las dificultades que surgen si nuestra estrategia excediera el presupuesto. Por lo tanto, consideramos nuestra restricción presupuestaria como flexible, es decir, solo requerimos que nuestro costo esperado sea menor que el presupuesto. En la práctica, el presupuesto suele ser un presupuesto diario promedio, por lo que no nos preocupa si lo excedemos un día, siempre y cuando estemos cumpliendo con el presupuesto esperado. Además, tanto el anunciante como el motor de búsqueda (posiblemente ambos) monitorean el costo incurrido durante el día; por lo tanto, la oferta de los anunciantes puede cambiarse a cero durante parte del día, para que el presupuesto no se exceda. Por lo tanto, en el resto de este documento, formularemos una restricción presupuestaria que solo necesita ser respetada en promedio. 2.1.4 Consultas Múltiples: un Problema de la Mochila. Como calentamiento, consideraremos a continuación el caso en el que tenemos un conjunto de consultas, cada una con su propio panorama. Queremos ofertar en cada consulta de forma independiente sujeta a nuestro presupuesto: el problema de optimización resultante es una pequeña generalización del problema de la mochila fraccionaria, y fue resuelto en [9]. El primer paso del algoritmo es tomar la envolvente convexa de cada paisaje, como se muestra en la Figura 1, y eliminar cualquier punto del paisaje que no esté en la envolvente convexa. Cada sección lineal por partes de la curva representa el número incremental de clics y costos incurridos al mover una oferta de un valor particular a otro. Consideramos estas piezas como elementos en una instancia de mochila fraccionaria con valor igual al número incremental de clics y tamaño igual al costo incremental. Más precisamente, para cada pieza que conecta dos ofertas consecutivas b y b en la envolvente convexa, creamos un elemento de mochila con valor [clicks(b) − clicks(b)] y tamaño [cost(b) − cost(b)]. Luego emulamos el algoritmo voraz para la mochila, ordenando por valor/tamaño (costo por clic) y eligiendo de forma codiciosa hasta que se agote el presupuesto. En esta reducción al problema de la mochila hemos ignorado el hecho de que algunas de las piezas provienen del mismo paisaje y no pueden ser tratadas de forma independiente. Sin embargo, dado que cada curva es cóncava, las piezas que provienen de una curva de consulta particular están en orden creciente de costo por clic; por lo tanto, de cada paisaje hemos elegido para nuestra mochila un conjunto de piezas que forman un prefijo de la curva. 2.2 Interacción de palabras clave En realidad, los anunciantes de búsqueda pueden ofertar en un gran conjunto de palabras clave, cada una de ellas calificando para un conjunto de consultas diferente (posiblemente superpuesto), pero la mayoría de los motores de búsqueda no permiten que un anunciante aparezca dos veces en la misma página de resultados de búsqueda. Por lo tanto, si un anunciante tiene una oferta en dos palabras clave diferentes que coinciden con la misma consulta, este conflicto debe resolverse de alguna manera. Por ejemplo, si un anunciante tiene una oferta en las palabras clave zapatos y tacones altos, entonces si un usuario emite la consulta tacones altos, se hará coincidencia en dos palabras clave diferentes. El motor de búsqueda especifica, de antemano, una regla de resolución basada en la consulta, la palabra clave y la oferta. Una regla natural es tomar la palabra clave con la oferta más alta, la cual adoptamos aquí, pero nuestros resultados se aplican a otras reglas de resolución. Modelamos el problema de interacción de palabras clave utilizando un grafo bipartito no dirigido G = (K ∪ Q, E) donde K es un conjunto de palabras clave y Q es un conjunto de consultas. Cada q ∈ Q tiene un paisaje asociado, definido por costq(b) y clicksq(b). Un borde (k, q) ∈ E significa que la palabra clave k coincide con la consulta q. El anunciante puede controlar su vector de oferta de palabras clave individual a ∈ R |K| + especificando una oferta ak para cada palabra clave k ∈ K. (Por ahora, no consideramos ofertas aleatorias, pero las introduciremos pronto). Dado un vector de oferta particular a en las palabras clave, utilizamos la regla de resolución de tomar el máximo para definir la oferta efectiva en la consulta q como bq(a) = max k:(k,q)∈E ak. Al enviar un vector de oferta a, el anunciante recibe alrededor de 7 Ver https://adwords.google.com/support/bin/answer.py?answer=14179, por ejemplo. 43 clics y paga un costo en cada palabra clave. Utilizamos el término gasto para denotar el costo total; de manera similar, utilizamos el término tráfico para denotar el número total de clics: gasto(a) = X q∈Q costq(bq(a)); tráfico(a) = X q∈Q clicsq(bq(a)). También permitimos estrategias aleatorias, donde un anunciante proporciona una distribución A sobre vectores de oferta a ∈ R |K| +. El gasto resultante y el tráfico se dan por gasto(A)=Ea∼A[gasto(a)]; tráfico(A)=Ea∼A[tráfico(a)]. Ahora podemos plantear el problema en su total generalidad: Optimización de presupuesto Entrada: un presupuesto U, un grafo de consulta de palabras clave G = (K ∪ Q, E), y paisajes (costoq(·), clicsq(·)) para cada q ∈ Q. Encuentra: una distribución A sobre vectores de oferta a ∈ R |K| + tal que el gasto(A) ≤ U y el tráfico(A) esté maximizado. Concluimos esta sección con un pequeño ejemplo para ilustrar algunas características del problema de optimización del presupuesto. Suponga que tiene dos palabras clave K = {u, v} y dos consultas Q = {x, y} y aristas E = {(u, x), (u, y), (v, y)}. Supongamos que la consulta x tiene una posición con un CTR αx [1] = 1.0, y hay una oferta bx 1 = $1. Para obtener clics de x, un anunciante debe ofertar al menos $1 en u. Sin embargo, debido a la estructura del gráfico, si el anunciante establece bu en $1, entonces su oferta efectiva es de $1 tanto en x como en y. Por lo tanto, debe hacer un intercambio entre obtener los clics de x y obtener la ganga de un clic por $ que sería posible de otra manera. 3. ESTRATEGIAS DE OFERTA UNIFORME Como mostraremos en la Sección 5, resolver el problema de Optimización del Presupuesto en su totalidad es difícil. Además, puede resultar difícil razonar sobre estrategias que involucren distribuciones arbitrarias sobre vectores de oferta arbitrarios. Los anunciantes generalmente prefieren estrategias que sean fáciles de entender, evaluar y utilizar dentro de sus objetivos más amplios. Con esta motivación, examinamos clases restringidas de estrategias que podemos calcular, explicar y analizar fácilmente. Definimos una estrategia de oferta uniforme como una distribución A sobre vectores de oferta a ∈ R |K| + donde cada vector de oferta en la distribución tiene la forma (b, b, . . . , b) para algún valor de oferta b en números reales. En otras palabras, cada vector en la distribución ofrece el mismo valor en cada palabra clave. Las estrategias uniformes tienen varias ventajas. Primero, no dependen de los bordes del grafo de interacción, ya que todas las ofertas efectivas en las consultas son iguales. Por lo tanto, son efectivos ante información limitada o ruidosa sobre el grafo de interacción de palabras clave. Segundo, las estrategias uniformes también son independientes de la regla de prioridad que se esté utilizando. Tercero, cualquier algoritmo que proporcione una garantía de aproximación será válido para cualquier grafo de interacción sobre esas palabras clave y consultas. Ahora demostramos que podemos calcular la mejor estrategia uniforme de manera eficiente. Supongamos que tenemos un conjunto de consultas Q, donde el paisaje Vq para cada consulta q está definido por el conjunto de puntos Vq = {(costq[1], αq[1]), . . . , (costq[p], αq[p])}. Definimos el conjunto de ofertas interesantes Iq = {costq[1]/αq [1], . . . , costq[p]/αq [p]}, sea I = ∪q∈QIq, y sea N = |I|. Podemos indexar los puntos en I como b1, . . . , bN en orden creciente. El punto i-ésimo en nuestro paisaje agregado V se encuentra sumando, sobre las consultas, el costo y los clics asociados con la oferta bi, es decir, V = ∪N i=1( P q∈Q costq(bi), P q∈Q clicksq(bi)). Para cualquier oferta posible b, si utilizamos el paisaje agregado de la misma manera que lo haríamos con un paisaje regular, representamos exactamente el costo y los clics asociados con hacer esa oferta simultáneamente en todas las consultas asociadas con el paisaje agregado. Por lo tanto, todas las definiciones y resultados de la Sección 2 sobre paisajes se pueden extender a paisajes agregados, y podemos aplicar el Lema 1 para calcular la mejor estrategia uniforme (utilizando la envolvente convexa de los puntos en este paisaje agregado). El tiempo de ejecución está dominado por el tiempo para calcular la envolvente convexa, que es O(N log N)[12]. La estrategia resultante es la combinación convexa de dos puntos en el paisaje agregado. Define una estrategia de oferta doble como una estrategia uniforme que asigna un peso distinto de cero a lo sumo a dos vectores de oferta. Hemos demostrado el Lema 2. Dado un caso de Optimización de Presupuesto en el que hay un total de N puntos en todos los paisajes, podemos encontrar la mejor estrategia uniforme en tiempo O(N log N). Además, esta estrategia siempre será una estrategia de dos ofertas. Al juntar estas ideas, obtenemos un algoritmo de complejidad O(N log N) para la Optimización de Presupuesto, donde N es el número total de puntos del paisaje (más adelante demostramos que este es un algoritmo de aproximación (1 − 1 e ): 1. Agrega todos los puntos de los paisajes de consulta individuales en un único paisaje agregado. 2. Encuentra la envolvente convexa de los puntos en el paisaje agregado. 3. Calcular el punto en la envolvente convexa para el presupuesto dado, que es la combinación convexa de dos puntos α y β. 4. Calcular la estrategia que es la combinación convexa apropiada de los vectores de oferta uniforme correspondientes a α y β. También consideraremos un caso especial de estrategias de oferta de dos. Una estrategia de oferta única es una estrategia uniforme que asigna un peso distinto de cero a lo sumo a un vector distinto de cero, es decir, el anunciante se encuentra entre ofertar una cierta cantidad b∗ en todas las palabras clave y no ofertar en absoluto. Una estrategia de una sola oferta es aún más fácil de implementar en la práctica que una estrategia de dos ofertas. Por ejemplo, los motores de búsqueda a menudo permiten a los anunciantes establecer un presupuesto diario máximo. En este caso, el anunciante simplemente pujaría b∗ hasta que su presupuesto se agote, y el sistema de servir anuncios la eliminaría de todas las subastas posteriores hasta el final del día. Uno también podría utilizar una herramienta de programación de anuncios ofrecida por algunas compañías de búsqueda para implementar esta estrategia. La mejor estrategia de una sola oferta también se puede calcular fácilmente a partir del panorama general. La estrategia óptima para un presupuesto U será o bien el punto x tal que el costo(x) sea lo más grande posible sin exceder U, o una combinación convexa de cero y el punto y, donde el costo(y) sea lo más pequeño posible pero mayor que U. Véase https://adwords.google.com/support/bin/answer.py?answer=33227, por ejemplo. 44 B D A C clics costo cpc A 2 $1 $0.50 B 5 $0.50 $0.10 C 3 $2 $0.67 D 4 $1 $0.25 cpc $0.67 $0.50 $0.25 $0.10 Total de clics: 5 9 11 14 Figura 2: Cuatro consultas y su curva de precio por clic. 4. ALGORITMOS DE APROXIMACIÓN En la sección anterior propusimos utilizar estrategias uniformes y presentamos un algoritmo eficiente para calcular la mejor estrategia de este tipo. En esta sección demostramos que siempre hay una buena estrategia uniforme: Teorema 3. Siempre existe una estrategia de oferta uniforme que es óptima en (1 − 1 e ). Además, para cualquier > 0, existe una instancia para la cual todas las estrategias uniformes son a lo sumo óptimas en (1 − 1 e + ). Introducimos la noción de una curva de precio por clic, la cual es central para nuestro análisis. Esta definición facilita demostrar que siempre hay una estrategia de una sola oferta que es una aproximación de 1 2 (y esto es ajustado); luego construimos sobre esto para demostrar el Teorema 3. 4.1 Curvas de precio por clic Considera un conjunto de consultas Q, y para cada consulta q ∈ Q, sea (clicksq(·), costq(·)) el paisaje de oferta correspondiente. Considera a un postor adversario Ω con la capacidad de ofertar de forma independiente en cada consulta. Ten en cuenta que este postor es más poderoso que un postor óptimo, que tiene que pujar por las palabras clave. Supongamos que esta estrategia ofrece una oferta b∗ q para cada consulta q. Por lo tanto, Ω logra un tráfico CΩ = P i clics(b∗ i ), e incurre en un gasto total UΩ = P i costo(b∗ i ). Sin pérdida de generalidad, podemos asumir que Ω ofrece de manera que para cada consulta q, el costo por clic es igual a b∗ q, es decir, costq(b∗ q)/clicksq(b∗ q) = b∗ q. Podemos asumir esto porque para alguna consulta q, si costq(b∗ q)/clicksq(b∗ q) < b∗ q, siempre podemos reducir b∗ q sin cambiar el costo y los clics. Para ayudar en nuestra discusión, introducimos la noción de una curva de precio por clic (un ejemplo de la cual se muestra en la Figura 2), la cual describe la distribución de CPC obtenida por Ω. Formalmente, la curva es una función no decreciente h: [0, CΩ] → R+ definida como h(r) = min{c | P q:b∗ q ≤c clicksq(b∗ q ) ≥ r}. Otra forma de construir esta curva es ordenar las consultas en orden creciente por b∗ q = costq(b∗ q)/clicksq(b∗ q), luego crear una función escalonada donde el q-ésimo escalón tiene altura b∗ q y ancho clicksq(b∗ q) (ver Figura 2). Ten en cuenta que el área de cada escalón es costq(b∗ q ). La siguiente afirmación sigue inmediatamente: Afirmación 1. UΩ = R CΩ 0 h(r)dr.

La traducción al español sería: UΩ = R CΩ 0 h(r)dr. Supongamos que quisiéramos comprar una fracción r /CΩ del tráfico que Ω está recibiendo. La curva de precio por clic dice que si pujamos h(r) en cada palabra clave (y por lo tanto en cada consulta), obtendremos al menos r tráfico, ya que esta oferta garantizaría que para todas las consultas q tales que b∗ q ≤ h(r), ganamos tantos clics como Ω. Ten en cuenta que al ofertar h(r) en cada palabra clave, es posible que obtengamos incluso más tráfico que r, ya que para consultas q donde b∗q es mucho menor que h(r), podemos ganar más clics que Ω. Sin embargo, todos estos clics adicionales aún cuestan como máximo h(r) por clic. Así vemos que para cualquier r ∈ [0, CΩ], si pujamos h(r) en cada palabra clave, recibimos al menos r tráfico con un gasto total de como máximo h(r) por clic. Ten en cuenta que al aleatorizar entre ofertar cero y ofertar h(r), podemos recibir exactamente r tráfico con un gasto total de como máximo r · h(r). Resumimos esta discusión en el siguiente lema: Lema 4. Para cualquier r ∈ [0, CΩ], existe una estrategia de oferta única que se randomiza entre ofertar h(r) y ofertar cero, y esta estrategia recibe exactamente r tráfico con un gasto total de como máximo r · h(r). El lema 4 describe un paisaje como una función continua. Para nuestros límites inferiores, necesitaremos demostrar que dado cualquier función continua, existe un paisaje discreto que la aproxima de manera arbitrariamente buena. Lema 5. Para cualquier C, U > 0 y función no decreciente f : [0, C] → R+ tal que ∫₀ᶜ f(r)dr = U, y cualquier pequeño > 0, existe una instancia de Optimización de Presupuesto con presupuesto U + , donde la solución óptima logra C clics a un costo U + , y todas las estrategias de oferta uniforme son combinaciones convexas de estrategias de oferta única que logran exactamente r clics a un costo exactamente rf(r) al ofertar f(r) en todas las palabras clave. Prueba. Construye una instancia de la siguiente manera. Sea > 0 un número pequeño que definiremos más tarde en términos de . Define r0 = 0, r1, r2, . . . , rm = C de manera que ri−1 < ri ≤ ri−1 + , f(ri−1) ≤ f(ri) ≤ f(ri−1)+ , y m ≤ (C +f(C))/ . (Esto es posible eligiendo ris espaciados por min( , f(ri)−f(ri−1))) Ahora realiza una consulta qi para todos los i ∈ [m] con postores ofertando h(ri), h(ri+1), . . . , h(rm), y ctrs α[1] = α[2] = · · · = α[m− i+1] = ri −ri−1. El gráfico es un emparejamiento con una palabra clave por consulta, por lo que podemos imaginar la solución óptima como ofertar en las consultas. La solución óptima siempre ofrecerá exactamente h(ri) en la consulta qi, y si lo hiciera en todas las consultas, gastaría U := Pm i=1(ri − ri−1)h(ri). Define lo suficientemente pequeño para que U = U + , lo cual siempre es posible ya que U ≤ Z C 0 f(r)dr + mX i=1 (ri − ri−1)(h(ri) − h(ri−1)) ≤ U + 2 m ≤ U + (C + f(C)). Ten en cuenta que las únicas ofertas posibles (es decir, todas las demás tienen los mismos resultados que una de estas) son f(r0), . . . , f(rm), y ofertar de manera uniforme con f(ri) resulta en Pi j=1 ri − ri−1 = ri clics a un costo h(ri)ri. 4.2 Un algoritmo de aproximación de 1 2 Utilizando el Lema 4, ahora podemos demostrar que hay una estrategia de oferta única uniforme que es 1 2 óptima. Además de ser un resultado interesante por sí mismo, también sirve como calentamiento para nuestro resultado principal. Teorema 6. Siempre existe una estrategia uniforme de oferta única que es 1 2-óptima. Además, para cualquier > 0 existe una instancia para la cual todas las estrategias de una sola oferta son a lo sumo (1 2 + )-óptimas. 45 Prueba. Aplicando el Lema 4 con r = CΩ/2, vemos que hay una estrategia que logra un tráfico de CΩ/2 con un gasto de CΩ/2·h(CΩ/2). Ahora, utilizando el hecho de que h es una función no decreciente combinado con la Afirmación 1, tenemos (CΩ/2)h(CΩ/2) ≤ Z CΩ CΩ/2 h(r)dr ≤ Z CΩ 0 h(r)dr = UΩ, (4) lo cual muestra que gastamos como máximo UΩ. Concluimos que hay una estrategia de oferta única 1 2 -óptima que se randomiza entre ofertar CΩ/2 y cero. Para la segunda parte del teorema, construimos un ejemplo ajustado usando dos consultas Q = {x, y}, dos palabras clave K = {u, v}, y aristas E = {(u, x), (v, y)}. Fije un α donde 0 < α ≤ 1, y fije un muy pequeño > 0. La consulta x tiene dos posiciones, con ofertas de bx 1 = 1/α y bx 2 = , y con tasas de clics idénticas αx [1] = αx [2] = α. La consulta y tiene una posición, con una oferta de by 1 = 1/α y una tasa de clics de αy [1] = α. El presupuesto es U = 1 + α. La solución óptima es ofertar en u (y por lo tanto x) y ofertar 1/α en v (y por lo tanto y), ambos con probabilidad 1. Esto logra un total de 2α clics y gasta el presupuesto exactamente. Las únicas ofertas útiles son 0 y 1/α, ya que para ambas consultas todas las demás ofertas son idénticas en términos de costo y clics a una de esas tres. Cualquier solución de una sola oferta que utilice como oferta no nula obtiene como máximo α clics. Pujar 1/α en ambas palabras clave resulta en 2α clics y un costo total de 2. Por lo tanto, dado que el presupuesto es U = 1 + α < 2, una solución de una sola oferta utilizando 1/α puede poner un peso máximo de (1 + α)/2 en la oferta de 1/α. Esto resulta en un máximo de α(1 + α) clics. Esto se puede acercar arbitrariamente a α al disminuir . 4.3 Un algoritmo de aproximación (1 − 1 e ) para la prueba del Teorema 3 es demostrar que hay una distribución sobre estrategias de oferta única del Lema 4 que obtiene al menos (1 − 1 e )CΩ clics. Para determinar la mejor distribución, escribimos un programa lineal que modela el comportamiento de un jugador que intenta maximizar los clics y un adversario que intenta crear una entrada que sea difícil para el jugador. Luego, utilizando la dualidad de la programación lineal, pudimos derivar tanto una estrategia óptima como una instancia ajustada. Después de resolver el LP numéricamente, también pudimos ver que hay una estrategia uniforme para el jugador que siempre obtiene (1 − 1 e )CΩ clics; y luego a partir de la solución pudimos adivinar fácilmente la distribución óptima. Esta metodología es similar a la utilizada en el trabajo sobre LPs que revelan factores [8, 10]. 4.3.1 Un LP para la curva del precio del clic en el peor de los casos. Considera el problema del adversario de encontrar una curva de precio por clic para la cual ninguna estrategia de oferta uniforme pueda lograr αCΩ clics. Recordemos que según el Lema 1 podemos suponer que una estrategia uniforme se aleatoriza entre dos ofertas u y v. También asumimos que la estrategia uniforme utiliza una combinación convexa de estrategias del Lema 4, lo cual podemos suponer según el Lema 5. Por lo tanto, para lograr αCΩ clics, una estrategia uniforme debe aleatorizar entre las ofertas h(u) y h(v) donde u ≤ αCΩ y v ≥ αCΩ. Llama al conjunto de tales estrategias S. Dado un (u, v) ∈ S, las probabilidades necesarias para lograr αCΩ clics se determinan fácilmente, y las denotamos como p1(u, v) y p2(u, v) respectivamente. Cabe destacar que el anunciante está tratando de determinar cuál de estas estrategias utilizar, y en última instancia desea calcular una distribución sobre estrategias uniformes. En el LP, en realidad va a calcular una distribución sobre pares de estrategias en S, que luego interpretaremos como una distribución sobre estrategias. Usando este conjunto de estrategias uniformes como restricciones, podemos caracterizar un conjunto de curvas de precios de clics en el peor de los casos mediante las restricciones Z CΩ 0 h(r)dr ≤ U ∀(u, v) ∈ S p1(u, v)uh(u) + p2(u, v)vh(v) ≥ U Una curva h que cumple con estas restricciones tiene la propiedad de que todas las estrategias uniformes que obtienen αCΩ clics gastan más de U. Al discretizar este conjunto de desigualdades y llevar la primera restricción a la función objetivo, obtenemos el siguiente LP sobre las variables hr que representan la curva: min X r∈{0, ,2 ,...,CΩ} · hr s.t. ∀(u, v) ∈ S, p1(u, v)uhu + p2(u, v)vhv ≥ U En este LP, S está definido en el dominio discreto como S = {(u, v) ∈ {0, , 2 , . . . , CΩ}2 : 0 ≤ u ≤ αCΩ ≤ v ≤ CΩ}. Al resolver este LP para un α particular, si obtenemos un objetivo menor que U, sabemos (hasta cierta discretización) que existe una instancia de Optimización de Presupuesto que no puede aproximarse mejor que α. (La instancia se construye como en la demostración del Lema 5). Una búsqueda binaria arroja el valor más pequeño de α donde el objetivo es exactamente U. Para obtener una estrategia para el anunciante, observamos el dual, restringiendo el objetivo para que sea igual a U con el fin de obtener el politopo de soluciones óptimas: X (u,v)∈S wu,v = 1 ∀(u, v) ∈ S, X v :(u,v )∈S p1(u, v ) · u · wu,v ≤ y X u :(u ,v)∈S p2(u , v) · v · wu ,v ≤ . Es sencillo demostrar que el segundo conjunto de restricciones es equivalente a lo siguiente: ∀h ∈ RCΩ/ : X r hr = U, X (u,v)∈S wu,v(p1(u, v) · u · hu + p2(u, v) · v · hv) ≤ U. Aquí las variables pueden ser interpretadas como pesos en estrategias en S. Un punto en este politopo representa una combinación convexa sobre estrategias en S, con la propiedad de que para cualquier curva de precio de clic h, el costo de la estrategia mixta es a lo sumo U. Dado que todas las estrategias en S obtienen al menos αCΩ clics, tenemos una estrategia que logra una aproximación α. Curiosamente, la equivalencia entre este politopo y el dual de LP anterior muestra que hay una mezcla de valores r ∈ [0, C] que logra una aproximación α para cualquier curva h. Después de buscar el α adecuado (que resultó ser 1 − 1/e), resolvimos estos dos LP y obtuvimos los gráficos en la Figura 3, que revelan no solo la proporción de aproximación correcta, sino también una imagen de la distribución del peor caso y la estrategia que logra la aproximación. A partir de las figuras, pudimos adivinar rápidamente la estrategia óptima y el ejemplo de peor caso. 4.3.2 Prueba del Teorema 3 Por el Lema 4, sabemos que para cada r ≤ UΩ, hay una estrategia que puede obtener tráfico r a un costo r · h(r). Al mezclar estrategias para múltiples valores de r, construimos una estrategia uniforme que garantiza alcanzar al menos una fracción de 1−e−1 = 0.63 del tráfico de Ωs y mantenerse dentro del presupuesto. Ten en cuenta que la distribución final de las ofertas resultantes tendrá cierto peso en la oferta cero, ya que las estrategias de una sola oferta del Lema 4 ponen cierto peso en ofertar cero. Considera la siguiente función de densidad de probabilidad sobre tales estrategias (también representada en la Figura 3): g(r) = 0 para r < CΩ/e, 1/r para r ≥ CΩ/e. Se debe tener en cuenta que R CΩ 0 g(r)dr = R CΩ CΩ/e 1 r dr = 1, es decir, g es una función de densidad de probabilidad. El tráfico logrado por nuestra estrategia es igual a tráfico = Z CΩ 0 g(r)·r dr = Z CΩ CΩ/e 1 r ·r dr = „ 1 − 1 e « CΩ. El gasto total esperado de esta estrategia es a lo sumo gasto = Z CΩ 0 g(r) · rh(r) dr = Z CΩ CΩ/e h(r) dr ≤ Z CΩ 0 h(r) dr = UΩ. Por lo tanto, hemos demostrado que existe una estrategia de oferta uniforme que es óptima en (1 − 1 e ). Ahora demostramos que ninguna estrategia uniforme puede hacerlo mejor. Demostraremos que para todo > 0 existe una instancia para la cual todas las estrategias uniformes son a lo sumo óptimas en (1 − 1 e + ). Primero definimos la siguiente curva de precio por clic sobre el dominio [0, 1]: h(r) = 8 < : 0 para r < e−1 1 e − 2 „ e − 1 r « para r ≥ e−1. Observa que h es no decreciente y no negativa. Dado que la curva está sobre el dominio [0, 1], corresponde a una instancia donde CΩ = 1. También hay que tener en cuenta que R 1 0 h(r) dr = 1 e−2 R 1 1/e e − 1 r dr = 1. Por lo tanto, esta curva corresponde a una instancia donde UΩ = 1. Usando el Lema 5, construimos una instancia real donde las mejores estrategias uniformes son combinaciones convexas de estrategias que ofrecen h(u) y logran u clics y un costo de u · h(u). Supongamos, para llegar a una contradicción, que existe una estrategia de oferta uniforme que logra α > 1−e−1 tráfico en esta instancia. Por el Lema 1 siempre hay una estrategia de oferta uniforme óptima de dos pujas, por lo que podemos asumir que la estrategia que logra α clics se randomiza sobre dos pujas. Para lograr α clics, las dos ofertas deben estar en los valores h(u) y h(v) con probabilidades pu y pv tales que pu + pv = 1, 0 ≤ u ≤ α ≤ v y puu + pvv = α. Para calcular el gasto de esta estrategia, considera dos casos: si u = 0, entonces estamos pujando h(v) con probabilidad pv = α/v. El gasto en este caso es: gasto = pv · v · h(v) = αh(v) = αe − α/v e − 2. Usando v ≥ α y luego α > 1 − 1/e, obtenemos spend ≥ αe − 1/e − 2 > (1 − 1/e)e − 1/e − 2 = 1, lo que contradice la suposición. Nos enfocamos en el caso u > 0. Aquí tenemos pu = v−α v−u y pv = α−u v−u. Ten en cuenta que para r ∈ (0, 1] tenemos h(r) ≥ 1 e−2 (e − 1 r ). Por lo tanto, gaste ≥ pu · uh(u) + pv · vh(v) = (v − α)(ue − 1) + (α − u)(ve − 1) (v − u)(e − 2) = αe − 1 e − 2 > 1. La desigualdad final se deduce de α > 1 − 1 e. Por lo tanto, en ambos casos el gasto de nuestra estrategia supera el presupuesto de 1. 4.4 Resultados Experimentales Realizamos simulaciones utilizando los datos disponibles en Google, los cuales resumimos brevemente aquí. Tomamos una gran campaña publicitaria y, utilizando el conjunto de palabras clave de la campaña, calculamos tres curvas diferentes (ver Figura 4) para tres estrategias de puja diferentes. El eje x es el presupuesto (unidades eliminadas), y el eje y es el número de clics obtenidos (también sin unidades) por la oferta óptima en cada estrategia respectiva. La puja por consulta representa nuestro límite superior (inconseguible) Ω, pujando por cada consulta de forma independiente. Las curvas de oferta uniforme representan los resultados de aplicar nuestro algoritmo: el determinista utiliza un único nivel de oferta, mientras que el aleatorizado utiliza una distribución. Para referencia, incluimos el límite inferior de una fracción (e − 1)/e de la curva superior. Los datos demuestran claramente que la mejor oferta uniforme única obtiene casi todos los clics posibles en la práctica. Por supuesto, en un entorno más realista sin un conocimiento completo, no siempre es posible encontrar la mejor oferta, por lo que se requiere una investigación adicional para que este enfoque sea útil. Sin embargo, solo saber que hay una oferta disponible debería hacer que las versiones en línea del problema sean más simples. RESULTADOS DE DUREZA A través de una reducción de cobertura de vértices podemos demostrar lo siguiente (prueba omitida): Teorema 7. La optimización del presupuesto es fuertemente NP-duro. 47 Oferta de consultas Oferta uniforme (aleatorizada) Oferta uniforme (determinística) Límite inferior 0 0 0.5 0.5 1 1 Presupuesto Clics Figura 4: Un ejemplo con datos reales. Ahora supongamos que introducimos pesos en las consultas que indican el valor relativo de un clic de los diferentes usuarios de búsqueda. Formalmente, tenemos pesos wq para todo q ∈ Q y nuestro objetivo es maximizar el tráfico total ponderado dado un presupuesto. Llame a esto el problema de la oferta de palabras clave ponderada. Con esta generalización adicional podemos demostrar la dificultad de aproximación a través de una reducción simple del problema de Cobertura Máxima, el cual se sabe que es (1−1/e)-difícil [6] (prueba omitida). Teorema 8. El problema de Oferta de Palabras Clave Ponderadas es difícil de aproximar dentro de (1 − 1/e). 6. ALGORITMOS EXACTOS PARA GRÁFICOS LAMINARES Si un gráfico tiene una estructura especial, a veces podemos resolver el problema de optimización del presupuesto de manera exacta. Ten en cuenta que el algoritmo de la mochila en la Sección 2 resuelve el problema para el caso en que el grafo es un emparejamiento simple. Aquí generalizamos esto al caso en que el grafo tiene una estructura laminar, lo que nos permitirá imponer un ordenamiento (parcial) en los posibles valores de oferta, y así dar un algoritmo pseudopolinomial a través de la programación dinámica. Primero demostramos que para resolver el problema de Optimización de Presupuesto (para grafos generales) de manera óptima en tiempo pseudopolinomial, basta con proporcionar un algoritmo que resuelva el caso determinístico. La prueba (omitida) utiliza ideas similares a la Observación 1 y al Lema 1. Lema 9. Sea I un input para el problema de Optimización de Presupuesto y supongamos que encontramos la solución determinística óptima para cada presupuesto posible U ≤ U. Entonces podemos encontrar la solución óptima en tiempo O(U log U). Una colección S de n conjuntos S1, . . . , S2 es laminar si, para cualquier par de conjuntos Si y Sj, si Si ∩ Sj = ∅ entonces Si ⊆ Sj o Sj ⊆ Si. Dado un grafo de interacción de palabras clave G, asociamos un conjunto de consultas vecinas Qk = {q : (k, q) ∈ E} con cada palabra clave k. Si esta colección de conjuntos es laminar, decimos que el grafo tiene la propiedad laminar. Ten en cuenta que un gráfico de interacción laminar surgiría naturalmente como consecuencia de diseñar un conjunto jerárquico de palabras clave (por ejemplo, zapatos, zapatos de tacón alto, zapatos deportivos). Llamamos a una solución determinista si consiste en un vector de oferta, en lugar de una distribución general sobre vectores de oferta. El siguiente lema será útil para dar una estructura a la solución óptima y permitirá la programación dinámica. Lema 10. Para palabras clave i, j ∈ K, si Qi ⊆ Qj entonces existe una solución determinista óptima al problema de Optimización de Presupuesto con ai ≥ aj. Podemos ver el orden laminar como un árbol con la palabra clave j como padre de la palabra clave i si Qj es el conjunto mínimo que contiene a Qi. En este caso decimos que j es un hijo de i. Dado un palabra clave j con c hijos i1, . . . , ic, ahora necesitamos enumerar todas las formas de asignar el presupuesto entre los hijos y también todas las posibles ofertas mínimas para los hijos. Una complicación es que un nodo puede tener muchos hijos y, por lo tanto, un término de Uc ni siquiera sería seudopolinomial. Podemos resolver este problema demostrando que, dado un orden laminar, existe uno equivalente en el que cada palabra clave tiene como máximo 2 hijos. Lema 11. Sea G un grafo con la propiedad laminar. Existe otro grafo G con la misma solución óptima al problema de Optimización del Presupuesto, donde cada nodo tiene como máximo dos hijos en el orden laminar. Además, G tiene como máximo el doble de nodos que G. Dado un grafo con como máximo dos hijos por nodo, definimos F[i, b, U] como el número máximo de clics alcanzable al ofertar al menos b en cada una de las palabras clave j tal que. Qj ⊆ Qi (y exactamente b en la palabra clave i) mientras se gasta como máximo U. Para esta definición, usamos Z(b, U) para denotar el conjunto de ofertas y presupuestos permitidos sobre los hijos: Z(b, U) = {b, b , U , U : b ≥ b, U ≤ U, b ≥ b, U ≤ U, U + U ≤ U} Dado una palabra clave i y una oferta ai, calcular un gasto incremental y tráfico asociado con la oferta ai en la palabra clave i, es decir ˆt(i, ai) = X q∈Qi\Qi−1 clicsq(ai), y ˆs(i, ai) = X q∈Qi\Qi−1 costeq(ai). Ahora definimos F[i, b, U] como max b, b ,U ,U ∈Z(b,U) j F[j , b , U ] + F[j , b , U ] + ˆt(i, b) ff (5) si (ˆs(i, b) ≤ U − U − U y i > 0), y F[i, b, U] = 0 en caso contrario. Lema 12. Si el grafo G tiene la propiedad laminar, entonces, después de aplicar el Lema 11, la recurrencia de programación dinámica en (5) encuentra una solución determinística óptima al problema de Optimización de Presupuesto exactamente en tiempo O(B3 U3 n). Además, podemos aplicar el Lema 9 para calcular la solución óptima (aleatorizada). Observa que en el programa dinámico, ya hemos resuelto la instancia para cada presupuesto U ≤ U, por lo que podemos encontrar la solución aleatorizada sin ningún costo asintótico adicional. Lema 13. Si el grafo G tiene la propiedad laminar, entonces, aplicando el Lema 11, la recurrencia de programación dinámica en (5) y el Lema 9, podemos encontrar una solución óptima al problema de Optimización de Presupuesto en tiempo O(B3 U3 n). Los límites en esta sección hacen suposiciones pesimistas sobre tener que probar cada presupuesto y cada nivel. Para muchos problemas, solo necesitas elegir entre un conjunto discreto de niveles de oferta (por ejemplo, múltiplos de un centavo). Hacerlo produce una mejora evidente en los límites. 7. OPTIMIZACIÓN DE OFERTAS BAJO VCG La subasta GSP no es la única subasta posible que se podría utilizar para la búsqueda patrocinada. De hecho, la subasta VCG y sus variantes [14, 4, 7, 1] ofrecen alternativas con propiedades teóricas de juego convincentes. En esta sección argumentamos que el problema de optimización del presupuesto es fácil bajo la subasta VCG. Para una definición completa de VCG y su aplicación a la búsqueda patrocinada, remitimos al lector a [1, 2, 5]. Para el problema de optimización del presupuesto, podemos definir VCG simplemente redefiniendo costq(b) (reemplazando la Ecuación (2)): costq(b) = p−1 X j=i (α[j] − α[j + 1]) · b[j] donde i = pos(b). La Observación 1 sigue siendo válida, y podemos construir un paisaje como antes, donde cada punto del paisaje corresponde a una oferta particular b[i]. Sostenemos que en la subasta VCG, los paisajes son convexos. Para ver esto, considera dos posiciones consecutivas i, i + 1. La pendiente del segmento de línea entre los puntos correspondientes a esas dos posiciones es cost(b[i]) − cost(b[i + 1]) clicks(b[i]) − clicks(b[i + 1]) = (α[i] − α[i + 1]) · b[i] α[i] − α[i + 1] = b[i]. Dado que b[i] ≥ b[i + 1], las pendientes de las piezas del paisaje disminuyen, y obtenemos que la curva es convexa. Ahora considera ejecutar el algoritmo descrito en la Sección 2.1.4 para encontrar las ofertas óptimas para un conjunto de consultas. En este algoritmo tomamos todas las piezas de las curvas del paisaje, las ordenamos por cpc incremental, luego tomamos un prefijo de esas piezas, lo que nos da ofertas para cada una de las consultas. Pero, la ecuación anterior muestra que cada pieza tiene su cpc incremental igual a la oferta que la logra; por lo tanto, en el caso de VCG las piezas también están ordenadas por oferta. Por lo tanto, podemos obtener cualquier prefijo de las piezas a través de una oferta uniforme en todas las palabras clave. Concluimos que la mejor oferta uniforme es una solución óptima al problema de optimización del presupuesto. CONCLUSIONES Nuestro resultado algorítmico presenta una heurística intrigante en la práctica: ofertar un único valor b en todas las palabras clave; al final del día, si el presupuesto no se ha gastado por completo, ajustar b para que sea mayor; si el presupuesto se ha sobrepasado, ajustar b para que sea menor; de lo contrario, mantener b. Si el escenario no cambia de un día para otro, esta estrategia simple tendrá las mismas propiedades teóricas que nuestra estrategia de una oferta, y en la práctica, es probable que sea mucho mejor. Por supuesto, el escenario cambia, sin embargo, y por lo tanto, desarrollar una estrategia de oferta estocástica sigue siendo una dirección abierta importante, explorada en cierta medida por [11, 13]. Otra generalización interesante es considerar pesos en los clics, que es una forma de modelar conversiones. (Una conversión corresponde a una acción por parte del usuario que hizo clic en el sitio del anunciante; por ejemplo, una venta o un registro de cuenta). Finalmente, hemos analizado este sistema como una caja negra que devuelve clics como función de la oferta, cuando en realidad se trata de un juego complejo repetitivo que implica a múltiples anunciantes. En [3], se demostró que cuando un conjunto de anunciantes utiliza una estrategia similar a la que sugerimos aquí, bajo una subasta de primer precio ligeramente modificada, los precios tienden hacia un equilibrio de mercado bien entendido. Agradecimientos Agradecemos a Rohit Rao, Zoya Svitkina y Adam Wildavsky por las útiles discusiones. 9. REFERENCIAS [1] G. Aggarwal, A. Goel y R. Motwani. Subastas veraces para fijar precios de palabras clave de búsqueda. Conferencia ACM sobre Comercio Electrónico, 1-7, 2006. [2] G. Aggarwal, J. Feldman y S. Muthukrishnan Pujando por el primer lugar: VCG y equilibrios de subastas basadas en la posición Proc. WAOA, 2006. [3] C. Borgs, J. Chayes, O. Etesami, N. Immorlica, K. Jain, y M. Mahdian. Dinámica de la optimización de ofertas en subastas de publicidad en línea. Procesado. WWW 2007. [4] E. Clarke. 

WWW 2007. [4] E. Clarke. Precios escalonados de bienes públicos. Elección Pública, 11(1):17-33, 1971. [5] B. Edelman, M. Ostrovsky y M. Schwarz. Publicidad en Internet y la Subasta de Segundo Precio Generalizada: Vendiendo miles de millones de dólares en palabras clave. Segundo taller sobre subastas de búsqueda patrocinada, 2006. [6] U. Feige. Un umbral de ln n para aproximar la cobertura de conjuntos. 28º Simposio ACM sobre Teoría de la Computación, 1996, pp. 314-318. [7] T. Groves. Incentivos en equipos. Econometrica, 41(4): 617-631, 1973. [8] K. Jain, M. Mahdian, E. Markakis, A. Sabieri y V. Vazirani. Algoritmos de ubicación de instalaciones codiciosos analizados utilizando el ajuste dual con LP que revela factores. J. ACM, 50(6): 795-824, 2003. [9] W. Labio, M. Rose, S. Ramaswamy. 

J. ACM, 50(6): 795-824, 2003. [9] W. Labio, M. Rose, S. Ramaswamy. Documento interno, Google, Inc. Mayo de 2004. [10] A. Mehta, A. Saberi, U. Vazirani y V. Vazirani, Adwords y Emparejamiento en línea generalizado. FOCS 2005. [11] S. Muthukrishnan, M. P´al y Z. Svitkina. Modelos estocásticos para la optimización del presupuesto en publicidad basada en búsquedas. Para aparecer en el 3er Taller sobre Subastas de Búsqueda Patrocinada, WWW 2007. [12] F. Preparata y M. Shamos. Geometría Computacional: Una Introducción. Springer-Verlag, Nueva York, NY, 1985. [13] P. Rusmevichientong y D. Williamson. Un algoritmo adaptativo para seleccionar palabras clave rentables para servicios de publicidad basados en búsquedas. Actas de la 7ª conferencia de la ACM sobre comercio electrónico, 260 - 269, 2006. [14] W. Vickrey. Contrarrestar la especulación, subastas y licitaciones selladas competitivas. Revista de Finanzas, 16(1):8-37, 1961. 49