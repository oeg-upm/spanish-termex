Modelado implícito de usuarios para búsqueda personalizada Xuehua Shen, Bin Tan, ChengXiang Zhai Departamento de Ciencias de la Computación Universidad de Illinois en Urbana-Champaign RESUMEN Los sistemas de recuperación de información (por ejemplo, motores de búsqueda web) son críticos para superar la sobrecarga de información. Una deficiencia importante de los sistemas de recuperación existentes es que generalmente carecen de modelado de usuario y no son adaptables a usuarios individuales, lo que resulta en un rendimiento de recuperación inherentemente no óptimo. Por ejemplo, un turista y un programador pueden usar la misma palabra "java" para buscar información diferente, pero los sistemas de búsqueda actuales devolverían los mismos resultados. En este artículo, estudiamos cómo inferir el interés de un usuario a partir del contexto de búsqueda del usuario y utilizar el modelo de usuario implícito inferido para la búsqueda personalizada. Presentamos un marco teórico de toma de decisiones y desarrollamos técnicas para el modelado implícito del usuario en la recuperación de información. Desarrollamos un agente de búsqueda web inteligente del lado del cliente (UCAIR) que puede realizar retroalimentación implícita ansiosa, por ejemplo, expansión de consultas basada en consultas anteriores y reordenamiento inmediato de resultados basado en información de clics. Los experimentos sobre la búsqueda en la web muestran que nuestro agente de búsqueda puede mejorar la precisión de la búsqueda sobre el popular motor de búsqueda Google. Categorías y Descriptores de Asignaturas H.3.3 [Búsqueda y Recuperación de Información]: Modelos de recuperación, Retroalimentación de relevancia, Proceso de búsqueda Términos Generales Algoritmos 1. Aunque muchos sistemas de recuperación de información (por ejemplo, motores de búsqueda web y sistemas de biblioteca digital) se han implementado con éxito, los sistemas de recuperación actuales están lejos de ser óptimos. Una deficiencia importante de los sistemas de recuperación existentes es que generalmente carecen de modelado de usuario y no son adaptables a usuarios individuales [17]. Esta no optimalidad inherente se ve claramente en los siguientes dos casos: (1) Diferentes usuarios pueden utilizar exactamente la misma consulta (por ejemplo, Java) para buscar información diferente (por ejemplo, la isla de Java en Indonesia o el lenguaje de programación Java), pero los sistemas de IR existentes devuelven los mismos resultados para estos usuarios. Sin considerar al usuario actual, es imposible saber a qué sentido se refiere Java en una consulta. (2) Las necesidades de información de un usuario pueden cambiar con el tiempo. El mismo usuario puede usar Java a veces para referirse a la isla de Java en Indonesia y otras veces para referirse al lenguaje de programación. Sin reconocer el contexto de búsqueda, sería nuevamente imposible reconocer el sentido correcto. Para optimizar la precisión de la recuperación, claramente necesitamos modelar al usuario de manera adecuada y personalizar la búsqueda según cada usuario individual. El objetivo principal del modelado de usuario para la recuperación de información es modelar con precisión la necesidad de información de un usuario, lo cual, desafortunadamente, es una tarea muy difícil. De hecho, incluso resulta difícil para un usuario describir con precisión cuál es su necesidad de información. ¿Qué información está disponible para que un sistema pueda inferir la necesidad de información de un usuario? Obviamente, la consulta de los usuarios proporciona la evidencia más directa. De hecho, la mayoría de los sistemas de recuperación existentes se basan únicamente en la consulta para modelar la necesidad de información de los usuarios. Sin embargo, dado que una consulta suele ser extremadamente corta, el modelo de usuario construido basado en una consulta de palabras clave inevitablemente resulta empobrecido. Una forma efectiva de mejorar la modelización de usuarios en la recuperación de información es pedir al usuario que especifique explícitamente qué documentos son relevantes (es decir, útiles para satisfacer su necesidad de información) y luego mejorar la modelización de usuarios basándose en ejemplos de documentos relevantes. Esto se llama retroalimentación de relevancia, lo cual ha demostrado ser bastante efectivo para mejorar la precisión de recuperación [19, 20]. Desafortunadamente, en aplicaciones del mundo real, los usuarios suelen ser reacios a hacer el esfuerzo adicional de proporcionar ejemplos relevantes para retroalimentación [11]. Por lo tanto, es muy interesante estudiar cómo inferir la necesidad de información de un usuario basándose en cualquier información de retroalimentación implícita, la cual existe naturalmente a través de las interacciones del usuario y no requiere ningún esfuerzo adicional por parte del usuario. De hecho, varios estudios previos han demostrado que el modelado implícito del usuario puede mejorar la precisión de recuperación. En [3], se desarrolla un navegador web (Curious Browser) para registrar las calificaciones explícitas de relevancia de las páginas web por parte de los usuarios (retroalimentación de relevancia) y el comportamiento de navegación al ver una página, como el tiempo de permanencia, clics de ratón, movimiento del ratón y desplazamiento (retroalimentación implícita). Se muestra que el tiempo de permanencia en una página, la cantidad de desplazamiento en una página y la combinación de tiempo y desplazamiento tienen una fuerte correlación con las calificaciones de relevancia explícita, lo que sugiere que la retroalimentación implícita puede ser útil para inferir la necesidad de información del usuario. En [10], se recopilan datos de clics de usuario como datos de entrenamiento para aprender una función de recuperación, que se utiliza para producir un ranking personalizado de resultados de búsqueda que se adapte a las preferencias de un grupo de usuarios. En [25], los datos de clics recopilados durante un largo período de tiempo se utilizan a través de la expansión de consultas para mejorar la precisión de recuperación. Si bien un usuario puede tener intereses y preferencias generales a largo plazo para la información, a menudo está buscando documentos para satisfacer una necesidad de información ad-hoc, que solo dura un corto período de tiempo; una vez que se satisface la necesidad de información, el usuario generalmente ya no estaría interesado en esa información. Por ejemplo, un usuario puede estar buscando información sobre autos usados para comprar uno, pero una vez que el usuario ha comprado un auto, generalmente ya no está interesado en esa información. En tales casos, la información de retroalimentación implícita recopilada durante un largo período de tiempo es poco probable que sea muy útil, pero el contexto de búsqueda inmediato y la información de retroalimentación, como cuáles de los resultados de búsqueda para la necesidad de información actual son vistos, se espera que sean mucho más útiles. Considera la consulta de Java nuevamente. Cualquiera de la siguiente información de retroalimentación inmediata sobre el usuario podría potencialmente ayudar a determinar el significado previsto de Java en la consulta: (1) La consulta anterior enviada por el usuario es hashtable (en lugar de, por ejemplo, viajar a Indonesia). (2) En los resultados de búsqueda, el usuario visualizó una página donde palabras como programación, software y applet ocurren muchas veces. Hasta donde sabemos, cómo aprovechar este contexto de búsqueda inmediato y a corto plazo para mejorar la búsqueda aún no ha sido abordado de manera satisfactoria en trabajos anteriores. En este artículo, estudiamos cómo construir y actualizar un modelo de usuario basado en el contexto de búsqueda inmediato y la información de retroalimentación implícita, y utilizar el modelo para mejorar la precisión de la recuperación ad-hoc. Para beneficiar al máximo al usuario de un sistema de recuperación a través de modelado implícito del usuario, proponemos realizar retroalimentación implícita entusiasta. Es decir, tan pronto como observemos cualquier nueva pieza de evidencia del usuario, actualizaríamos la creencia del sistema sobre la necesidad de información del usuario y responderíamos con resultados de recuperación mejorados basados en el modelo de usuario actualizado. Presentamos un marco de trabajo de teoría de decisiones para optimizar la recuperación interactiva de información basado en la actualización ansiosa del modelo del usuario, en el cual el sistema responde a cada acción del usuario eligiendo una acción del sistema para optimizar una función de utilidad. En un paradigma de recuperación tradicional, el problema de recuperación consiste en emparejar una consulta con documentos y clasificar los documentos según sus valores de relevancia. Como resultado, el proceso de recuperación es un ciclo independiente simple de consulta y visualización de resultados. En el nuevo paradigma de recuperación propuesto, el contexto de búsqueda de los usuarios juega un papel importante y el modelo de usuario implícito inferido se explota inmediatamente para beneficiar al usuario. El nuevo paradigma de recuperación es, por lo tanto, fundamentalmente diferente del paradigma tradicional y es inherentemente más general. Además, proponemos técnicas específicas para capturar y aprovechar dos tipos de información de retroalimentación implícita: (1) identificar consultas inmediatamente anteriores relacionadas y utilizar la consulta y los resultados de búsqueda correspondientes para seleccionar términos apropiados para expandir la consulta actual, y (2) aprovechar los resúmenes de documentos vistos para reordenar inmediatamente cualquier documento que aún no haya sido visto por el usuario. Usando estas técnicas, desarrollamos un agente de búsqueda web del lado del cliente UCAIR (Recuperación de Información Adaptativa Centrada en el Usuario) sobre un motor de búsqueda popular (Google). Los experimentos sobre búsqueda en la web muestran que nuestro agente de búsqueda puede mejorar la precisión de la búsqueda en comparación con Google. Dado que la información implícita que explotamos ya existe de forma natural a través de las interacciones del usuario, este no necesita hacer ningún esfuerzo adicional. Por lo tanto, el agente de búsqueda desarrollado puede mejorar el rendimiento de la búsqueda web existente sin esfuerzo adicional por parte del usuario. Las secciones restantes están organizadas de la siguiente manera. En la Sección 2, discutimos el trabajo relacionado. En la Sección 3, presentamos un marco de recuperación interactiva basado en teoría de decisiones para modelado implícito de usuarios. En la Sección 4, presentamos el diseño e implementación de un agente de búsqueda web inteligente del lado del cliente (UCAIR) que realiza retroalimentación implícita ansiosa. En la Sección 5, informamos nuestros resultados experimentales utilizando el agente de búsqueda. La sección 6 concluye nuestro trabajo. 2. El modelado implícito del usuario para la búsqueda personalizada ha sido estudiado en trabajos anteriores, pero nuestro trabajo difiere de todos los trabajos anteriores en varios aspectos: (1) Enfatizamos la explotación del contexto de búsqueda inmediato, como la consulta inmediatamente anterior relacionada y los documentos vistos en la misma sesión, mientras que la mayoría de los trabajos anteriores se basan en la recopilación a largo plazo de información de retroalimentación implícita [25]. (2) Realizamos una retroalimentación activa y obtenemos el beneficio del modelado implícito del usuario tan pronto como esté disponible cualquier nueva información de retroalimentación implícita, mientras que el trabajo anterior mayormente explota la retroalimentación implícita a largo plazo [10]. (3) Proponemos un marco de recuperación para integrar el modelado implícito del usuario con el proceso interactivo de recuperación, mientras que el trabajo anterior estudia el modelado implícito del usuario por separado de la recuperación [3] o solo estudia modelos de recuperación específicos para explotar la retroalimentación implícita para mejorar la coincidencia de una consulta con documentos [23, 27, 22]. (4) Desarrollamos y evaluamos un agente de búsqueda web personalizado con estudios de usuario en línea, mientras que la mayoría de los trabajos existentes evalúan algoritmos fuera de línea sin interacciones reales de usuarios. Actualmente algunos motores de búsqueda ofrecen personalización rudimentaria, como la búsqueda web personalizada de Google [6], que permite a los usuarios describir explícitamente sus intereses seleccionando entre temas predefinidos, de modo que los resultados que coinciden con sus intereses se muestren en la parte superior, y la búsqueda de My Yahoo! [16], que brinda a los usuarios la opción de guardar los sitios web que les gustan y bloquear aquellos que no les gustan. Por el contrario, UCAIR personaliza la búsqueda web a través de la modelización implícita del usuario sin necesidad de esfuerzos adicionales por parte del usuario. Además, la personalización de UCAIR se proporciona en el lado del cliente. Hay dos ventajas notables en esto. Primero, el usuario no necesita preocuparse por la infracción de privacidad, que es una gran preocupación para la búsqueda personalizada [26]. En segundo lugar, tanto el cálculo de la personalización como el almacenamiento del perfil del usuario se realizan en el lado del cliente para reducir drásticamente la carga del servidor [9]. Ha habido muchos trabajos estudiando los registros de consultas de usuarios [1] o la dinámica de consultas [13]. UCAIR hace uso directo del historial de consultas de un usuario para beneficiar al mismo usuario de inmediato en la misma sesión de búsqueda. UCAIR primero determina si dos consultas vecinas pertenecen a la misma sesión de información y, de ser así, selecciona términos de la consulta anterior para realizar la expansión de la consulta. Nuestro enfoque de expansión de consultas es similar a la expansión automática de consultas [28, 15, 5], pero en lugar de utilizar retroalimentación pseudo para expandir la consulta, utilizamos la información de retroalimentación implícita de los usuarios para expandir la consulta actual. Estas dos técnicas pueden ser combinadas. 3. OPTIMIZACIÓN EN IR INTERACTIVO En IR interactivo, un usuario interactúa con el sistema de recuperación a través de un diálogo de acción, en el cual el sistema responde a cada acción del usuario con alguna acción del sistema. Por ejemplo, la acción de los usuarios puede ser enviar una consulta y la respuesta del sistema puede ser devolver una lista de 10 resúmenes de documentos. En general, el espacio de acciones del usuario y respuestas del sistema y sus granularidades dependerían de la interfaz de un sistema de recuperación particular. En principio, cada acción del usuario puede potencialmente proporcionar nuevas pruebas para ayudar al sistema a inferir mejor la necesidad de información del usuario. Por lo tanto, para responder de manera óptima, el sistema debería utilizar toda la evidencia recopilada hasta ahora sobre el usuario al elegir una respuesta. Cuando se ven de esta manera, la mayoría de los motores de búsqueda existentes son claramente no óptimos. Por ejemplo, si un usuario ha visto algunos documentos en la primera página de resultados de búsqueda, cuando el usuario hace clic en el enlace Siguiente para obtener más resultados, un sistema de recuperación existente seguiría devolviendo la siguiente página de resultados recuperados en función de la consulta original sin considerar la nueva evidencia de que un resultado en particular ha sido visto por el usuario. Proponemos optimizar el rendimiento de la recuperación adaptando las respuestas del sistema en función de cada acción que un usuario haya tomado, y planteamos el problema de optimización como una tarea de decisión. Específicamente, en cualquier momento, el sistema intentaría realizar dos tareas: (1) Actualización del modelo de usuario: Monitorear cualquier evidencia útil del usuario con respecto a su necesidad de información y actualizar el modelo de usuario tan pronto como esta evidencia esté disponible; (2) Mejorar los resultados de búsqueda: Reclasificar inmediatamente todos los documentos que el usuario aún no ha visto, tan pronto como se actualice el modelo de usuario. Enfatizamos la actualización y reordenamiento entusiastas, lo que hace que nuestro trabajo sea bastante diferente a cualquier trabajo existente. A continuación presentamos un marco formal de teoría de decisiones para optimizar el rendimiento de recuperación a través de la modelización implícita del usuario en la recuperación de información interactiva. 3.1 Un marco de teoría de decisiones Sea A el conjunto de todas las acciones del usuario y R(a) el conjunto de todas las posibles respuestas del sistema a una acción del usuario a ∈ A. En cualquier momento, sea At = (a1, ..., at) la secuencia observada de acciones de usuario hasta ahora (hasta el momento t) y Rt−1 = (r1, ..., rt−1) las respuestas que el sistema ha dado en respuesta a las acciones del usuario. El objetivo del sistema es elegir una respuesta óptima rt ∈ R(at) para la acción actual del usuario at. Sea M el espacio de todos los posibles modelos de usuario. Definimos además una función de pérdida L(a, r, m) ∈ , donde a ∈ A es una acción del usuario, r ∈ R(a) es una respuesta del sistema, y m ∈ M es un modelo de usuario. L(a, r, m) codifica nuestras preferencias de decisión y evalúa la optimalidad de responder con r cuando el modelo de usuario actual es m y la acción de usuario actual es a. Según la teoría de decisión bayesiana, la decisión óptima en el tiempo t es elegir una respuesta que minimice el riesgo de Bayes, es decir, r∗ t = argmin r∈R(at) M L(at, r, mt)P(mt|U, D, At, Rt−1)dmt (1) donde P(mt|U, D, At, Rt−1) es la probabilidad posterior del modelo de usuario mt dadas todas las observaciones sobre el usuario U que hemos realizado hasta el tiempo t. Para simplificar el cálculo de la Ecuación 1, asumamos que la masa de probabilidad posterior P(mt|U, D, At, Rt−1) está principalmente concentrada en el modo m∗ t = argmaxmt P(mt|U, D, At, Rt−1). Podemos entonces aproximar la integral con el valor de la función de pérdida en m∗ t. Es decir, r∗ t ≈ argminr∈R(at)L(at, r, m∗ t ) (2) donde m∗ t = argmaxmt P(mt|U, D, At, Rt−1). Dejando de lado cómo definir y estimar estos modelos probabilísticos y la función de pérdida, podemos ver que tal formulación de la teoría de decisiones sugiere que, para elegir la respuesta óptima a at, el sistema debería realizar dos tareas: (1) calcular el modelo de usuario actual y obtener m∗ t basado en toda la información útil. (2) elegir una respuesta rt para minimizar el valor de la función de pérdida L(at, rt, m∗ t). Cuando at no afecta nuestra creencia sobre m∗ t , el primer paso puede omitirse y podemos reutilizar m∗ t−1 para m∗ t . Ten en cuenta que nuestro marco de trabajo es bastante general, ya que potencialmente podemos modelar cualquier tipo de acciones de usuario y respuestas del sistema. En la mayoría de los casos, como podríamos esperar, la respuesta del sistema es algún tipo de clasificación de documentos, es decir, para la mayoría de las acciones a, R(a) consiste en todas las posibles clasificaciones de los documentos no vistos, y el problema de decisión se reduce a elegir la mejor clasificación de los documentos no vistos basándose en el modelo de usuario más actualizado. Cuando a es la acción de enviar una consulta de palabras clave, tal respuesta es exactamente lo que haría un sistema de recuperación actual. Sin embargo, fácilmente podemos imaginar que un motor de búsqueda web más inteligente respondería al clic del usuario en el enlace Siguiente (para obtener más resultados no vistos) con una clasificación más optimizada de documentos basada en cualquier documento visto en la página actual de resultados. De hecho, según nuestra estrategia de actualización entusiasta, incluso podríamos permitir que un sistema responda al clic del botón Atrás del navegador por parte de un usuario después de ver un documento de la misma manera, para que el usuario pueda beneficiarse al máximo de la retroalimentación implícita. Estos son precisamente lo que nuestro sistema UCAIR hace. 3.2 Modelos de usuario Un modelo de usuario m ∈ M representa lo que sabemos sobre el usuario U, por lo que en principio, puede contener cualquier información sobre el usuario que deseemos modelar. Ahora discutimos dos componentes importantes en un modelo de usuario. El primer componente es un modelo de componente de la necesidad de información de los usuarios. Presumiblemente, el factor más importante que afecta la optimalidad de la respuesta del sistema es qué tan bien la respuesta aborda la necesidad de información de los usuarios. De hecho, en cualquier momento, podemos asumir que el sistema tiene alguna creencia sobre lo que le interesa al usuario, la cual modelamos a través de un vector de términos x = (x1, ..., x|V|), donde V = {w1, ..., w|V|} es el conjunto de todos los términos (es decir, vocabulario) y xi es el peso del término wi. Un vector de términos de este tipo se utiliza comúnmente en la recuperación de información para representar tanto consultas como documentos. Por ejemplo, el modelo de espacio vectorial asume que tanto la consulta como los documentos se representan como vectores de términos y que la puntuación de un documento con respecto a una consulta se calcula en función de la similitud entre el vector de la consulta y el vector del documento [21]. En un enfoque de modelado de lenguaje, también podemos considerar el modelo de lenguaje unigrama de consulta [12, 29] o el modelo de relevancia [14] como una representación vectorial de términos de la necesidad de información de los usuarios. Intuitivamente, x asignaría pesos altos a los términos que caracterizan los temas que interesan al usuario. El segundo componente que podemos incluir en nuestro modelo de usuario son los documentos que el usuario ya ha visto. Obviamente, incluso si un documento es relevante, si el usuario ya ha visto el documento, no sería útil presentar el mismo documento de nuevo. Por lo tanto, introducimos otra variable S ⊂ D (D es el conjunto completo de documentos en la colección) para denotar el subconjunto de documentos en los resultados de búsqueda que el usuario ya ha visto. En general, en el tiempo t, podemos representar un modelo de usuario como mt = (S, x, At, Rt−1), donde S son los documentos vistos, x es la comprensión del sistema de la necesidad de información del usuario, y (At, Rt−1) representa el historial de interacción del usuario. Ten en cuenta que un modelo de usuario aún más general también puede incluir otros factores como el nivel de lectura y la ocupación de los usuarios. Si asumimos que la incertidumbre de un modelo de usuario mt se debe únicamente a la incertidumbre de x, el cálculo de nuestra estimación actual del modelo de usuario m∗ t implicará principalmente calcular nuestra mejor estimación de x. Es decir, el sistema elegiría una respuesta de acuerdo a r∗ t = argminr∈R(at)L(at, r, S, x∗ , At, Rt−1) (3) donde x∗ = argmaxx P(x|U, D, At, Rt−1). Este es el mecanismo de decisión implementado en el sistema UCAIR que se describirá más adelante. En este sistema, evitamos especificar el modelo probabilístico P(x|U, D, At, Rt−1) calculando x∗ directamente con algún método de retroalimentación existente. 3.3 Funciones de pérdida La definición exacta de la función de pérdida L depende de las respuestas, por lo que es inevitablemente específica de la aplicación. Ahora discutimos brevemente algunas posibilidades cuando la respuesta es clasificar todos los documentos no vistos y presentar los mejores k de ellos. Sea r = (d1, ..., dk) los k documentos principales, S el conjunto de documentos vistos por el usuario, y x∗ la mejor suposición del sistema sobre la necesidad de información del usuario. Podemos definir simplemente la pérdida asociada con r como la suma negativa de la probabilidad de que cada uno de los di sea relevante, es decir, L(a, r, m) = − k i=1 P(relevante|di, m). Claramente, para minimizar esta función de pérdida, la respuesta óptima r contendría los k documentos con la probabilidad más alta de relevancia, lo cual es intuitivamente razonable. Una deficiencia de esta función de pérdida top-k es que no es sensible al orden interno de los documentos top k seleccionados, por lo que cambiar el orden de clasificación de un documento no relevante y uno relevante no afectaría la pérdida, lo cual es irrazonable. Para modelar el ranking, podemos introducir un factor del modelo de usuario: la probabilidad de que cada uno de los k documentos sea visto por el usuario, P(vista|di), y definir la siguiente función de pérdida de ranking: L(a, r, m) = − k i=1 P(vista|di)P(relevante|di, m). Dado que, en general, si di está clasificado por encima de dj (es decir, i < j), P(vista|di) > P(vista|dj), esta función de pérdida favorecería una decisión de clasificar documentos relevantes por encima de los no relevantes, ya que de lo contrario, siempre podríamos intercambiar di con dj para reducir el valor de pérdida. Por lo tanto, el sistema simplemente debería realizar una recuperación regular y clasificar los documentos según la probabilidad de relevancia [18]. Dependiendo de las preferencias de recuperación de los usuarios, puede haber muchas otras posibilidades. Por ejemplo, si el usuario no desea ver documentos redundantes, la función de pérdida debería incluir alguna medida de redundancia en r basada en los documentos ya vistos S. Por supuesto, cuando la respuesta no es elegir una lista clasificada de documentos, necesitaríamos una función de pérdida diferente. Discutimos un ejemplo relevante para el agente de búsqueda que implementamos. Cuando un usuario ingresa una consulta qt (acción actual), nuestro agente de búsqueda se basa en algún motor de búsqueda existente para llevar a cabo la búsqueda en realidad. En tal caso, aunque el agente de búsqueda no tenga control sobre el algoritmo de recuperación, aún puede intentar optimizar los resultados de la búsqueda refinando la consulta enviada al motor de búsqueda y/o reordenando los resultados obtenidos del motor de búsqueda. Las funciones de pérdida para el reordenamiento ya fueron discutidas anteriormente; ahora echamos un vistazo a las funciones de pérdida para el refinamiento de consultas. Sea f la función de recuperación del motor de búsqueda que nuestro agente utiliza, de modo que f(q) nos daría los resultados de búsqueda utilizando la consulta q. Dado que la acción actual del usuario es ingresar una consulta qt (es decir, at = qt), nuestra respuesta sería f(q) para algún q. Dado que no tenemos elección de f, nuestra decisión es elegir un buen q. Formalmente, r∗ t = argminrt L(a, rt, m) = argminf(q)L(a, f(q), m) = f(argminqL(qt, f(q), m)) lo cual muestra que nuestro objetivo es encontrar q∗ = argminqL(qt, f(q), m), es decir, una consulta óptima que nos daría el mejor f(q). Una elección diferente de la función de pérdida L(qt, f(q), m) llevaría a una estrategia de refinamiento de consulta diferente. En UCAIR, calculamos heurísticamente q∗ expandiendo qt con términos extraídos de rt−1 siempre que qt−1 y qt tengan una alta similitud. Se debe tener en cuenta que rt−1 y qt−1 están contenidos en m como parte del historial de interacción de los usuarios. 3.4 Modelado implícito del usuario El modelado implícito del usuario se captura en nuestro marco a través del cálculo de x∗ = argmaxx P(x|U, D, At, Rt−1), es decir, la creencia actual del sistema sobre cuál es la necesidad de información del usuario. Aquí nuevamente puede haber muchas posibilidades, lo que lleva a diferentes algoritmos para la modelización implícita del usuario. Ahora discutimos algunos de ellos. Primero, cuando dos consultas consecutivas están relacionadas, la consulta anterior puede ser explotada para enriquecer la consulta actual y proporcionar más contexto de búsqueda para ayudar en la desambiguación. Para este propósito, en lugar de realizar una expansión de consulta como lo hicimos en la sección anterior, también podríamos calcular un x∗ actualizado basado en la consulta anterior y los resultados de recuperación. El modelo de usuario nuevo calculado puede luego ser utilizado para clasificar los documentos con un modelo estándar de recuperación de información. Segundo, también podemos inferir los intereses de un usuario basándonos en los resúmenes de los documentos visualizados. Cuando a un usuario se le presenta una lista de resúmenes de documentos mejor clasificados, si el usuario elige saltarse los primeros n documentos y ver el documento (n+1)-ésimo, podemos inferir que el usuario no está interesado en los resúmenes mostrados para los primeros n documentos, pero está atraído por el resumen mostrado del documento (n+1)-ésimo. Por lo tanto, podemos usar estos resúmenes como ejemplos negativos y positivos para aprender un modelo de usuario más preciso x∗. Aquí se pueden explotar muchas técnicas estándar de retroalimentación de relevancia [19, 20]. Ten en cuenta que debemos utilizar los resúmenes mostrados, en lugar de los contenidos reales de esos documentos, ya que es posible que el resumen mostrado del documento visto sea relevante, pero el contenido del documento en realidad no lo sea. Del mismo modo, un resumen mostrado puede llevar a un usuario a omitir un documento relevante. Inferir modelos de usuario basados en dicha información mostrada, en lugar del contenido real de un documento, es una diferencia importante entre UCAIR y algunos otros sistemas similares. En UCAIR, ambas estrategias para inferir un modelo de usuario implícito están implementadas. 4. UCAIR: Un agente de búsqueda personalizado 4.1 Diseño En esta sección, presentamos un agente de búsqueda web del lado del cliente llamado UCAIR, en el cual implementamos algunos de los métodos discutidos en la sección anterior para realizar búsquedas personalizadas a través de modelado implícito del usuario. UCAIR es un complemento del navegador web que actúa como proxy para los motores de búsqueda en la web. Actualmente, solo está implementado para Internet Explorer y Google, pero es cuestión de ingeniería hacer que funcione en otros navegadores web e interactúe con otros motores de búsqueda. El tema de la privacidad es un obstáculo principal para implementar cualquier aplicación del mundo real que involucre modelado de usuarios serio, como la búsqueda personalizada. Por esta razón, UCAIR funciona estrictamente como un agente de búsqueda del lado del cliente, en lugar de ser una aplicación del lado del servidor. De esta manera, la información del usuario capturada siempre permanece en la computadora que está utilizando el usuario, por lo tanto, el usuario no necesita revelar ninguna información al exterior. La personalización del lado del cliente también permite que el sistema observe fácilmente una gran cantidad de información del usuario que puede no estar fácilmente disponible para un servidor. Además, realizar búsquedas personalizadas en el lado del cliente es más escalable que en el lado del servidor, ya que la sobrecarga de cálculo y almacenamiento se distribuye entre los clientes. Como se muestra en la Figura 1, la barra de herramientas UCAIR tiene 3 componentes principales: (1) El módulo de modelado de usuario (implícito) captura el contexto de búsqueda de un usuario e información de historial, incluidas las consultas enviadas y los resultados de búsqueda clicados, e infiere los límites de la sesión de búsqueda. (2) El módulo de modificación de consultas mejora selectivamente la formulación de la consulta de acuerdo con el modelo de usuario actual. (3) El módulo de reordenamiento de resultados reordena inmediatamente cualquier resultado de búsqueda no visto cada vez que se actualiza el modelo de usuario. En UCAIR, consideramos cuatro acciones básicas de usuario: (1) enviar una consulta de palabras clave; (2) ver un documento; (3) hacer clic en el botón Atrás; (4) hacer clic en el enlace Siguiente en una página de resultados. Para cada una de estas cuatro acciones, el sistema responde con, respectivamente, (1) 1 UCAIR está disponible en: http://sifaka.cs.uiuc.edu/ir/ucair/download.html 827 Registro de Historial de Búsqueda del Motor de Búsqueda (por ejemplo, Google) (consultas pasadas, resultados clicados) Modificación de Consulta Resultado de Reclasificación Modelo de Usuario Buffer de Resultados de Consulta de Usuario UCAIR... Figura 1: arquitectura de UCAIR generando una lista clasificada de resultados enviando una consulta posiblemente ampliada a un motor de búsqueda; (2) actualizando el modelo de necesidad de información x; (3) reordenando los resultados no vistos en la página de resultados actual basándose en el modelo actual x; y (4) reordenando las páginas no vistas y generando la siguiente página de resultados basándose en el modelo actual x. Detrás de estas respuestas, hay tres tareas básicas: (1) Decidir si la consulta anterior está relacionada con la consulta actual y, de ser así, ampliar la consulta actual con términos útiles de la consulta anterior o los resultados de la consulta anterior. (2) Actualizar el modelo de necesidad de información x basado en un resumen de documento recién seleccionado. (3) Reordenar un conjunto de documentos no vistos basado en el modelo x actual. A continuación describimos nuestros algoritmos para cada uno de ellos. 4.2 Detección de límites de sesión y expansión de consultas Para explotar eficazmente las consultas anteriores y su información correspondiente de clics, UCAIR necesita determinar si dos consultas adyacentes pertenecen a la misma sesión de búsqueda (es decir, detectar los límites de sesión). El trabajo existente sobre la detección de límites de sesión se encuentra principalmente en el contexto del análisis de registros web (por ejemplo, [8]), y utiliza información estadística en lugar de características textuales. Dado que nuestro agente del lado del cliente no tiene acceso a los registros de consultas del servidor, tomamos decisiones sobre los límites de sesión basadas en la similitud textual entre dos consultas. Debido a que las consultas relacionadas no necesariamente comparten las mismas palabras (por ejemplo, isla de Java y viajar a Indonesia), no es suficiente utilizar solo el texto de la consulta. Por lo tanto, utilizamos los resultados de búsqueda de las dos consultas para ayudar a decidir si están relacionadas temáticamente. Por ejemplo, para las consultas anteriores "java island" y "travel Indonesia", las palabras "java", "bali", "island", "indonesia" y "travel" pueden aparecer con frecuencia en los resultados de búsqueda de ambas consultas, lo que produce un alto puntaje de similitud. Solo utilizamos los títulos y resúmenes de los resultados de búsqueda para calcular la similitud, ya que están disponibles en la página de resultados de búsqueda recuperada y obtener el texto completo de cada página de resultados ralentizaría significativamente el proceso. Para compensar la concisión de los títulos y resúmenes, recuperamos más resultados de los que un usuario normalmente vería con el propósito de detectar los límites de sesión (típicamente 50 resultados). La similitud entre la consulta anterior q y la consulta actual q se calcula de la siguiente manera. Sean {s1, s2, . . . , sn} y {s1, s2, . . . , sn} los conjuntos de resultados de las dos consultas. Utilizamos la fórmula de ponderación TF-IDF normalizada pivotada [24] para calcular un vector de peso de término si para cada resultado si. Definimos el resultado promedio savg como el centroide de todos los vectores de resultado, es decir, (s1 + s2 + . . . + sn)/n. La similitud del coseno entre los dos resultados promedio se calcula como s avg · savg/ s 2 avg · s2 avg. Si el valor de similitud supera un umbral predefinido, se considerará que las dos consultas están en la misma sesión de información. Si se determina que la consulta anterior y la consulta actual pertenecen a la misma sesión de búsqueda, UCAIR intentaría expandir la consulta actual con términos de la consulta anterior y sus resultados de búsqueda. Específicamente, para cada término en la consulta anterior o los resultados de búsqueda correspondientes, si su frecuencia en los resultados de la consulta actual es mayor que un umbral preestablecido (por ejemplo, 5 resultados de 50), el término se agregaría a la consulta actual para formar una consulta ampliada. En este caso, UCAIR enviaría esta consulta ampliada en lugar de la original al motor de búsqueda y devolvería los resultados correspondientes a la consulta ampliada. Actualmente, UCAIR solo utiliza la consulta inmediatamente anterior para la expansión de consultas; en principio, podríamos aprovechar todas las consultas pasadas relacionadas. 4.3 Actualización del modelo de necesidad de información Supongamos que en el tiempo t, hemos observado que el usuario ha visto k documentos cuyos resúmenes son s1, ..., sk. Actualizamos nuestro modelo de usuario calculando un nuevo vector de necesidad de información con un método estándar de retroalimentación en la recuperación de información (es decir, Rocchio [19]). Según el modelo de recuperación de espacio vectorial, cada resumen clicado si puede ser representado por un vector de pesos de términos si, con cada término ponderado por una fórmula de ponderación TF-IDF [21]. Rocchio calcula el vector centroide de todos los resúmenes e interpola este con el vector de consulta original para obtener un vector de términos actualizado. Es decir, x = αq + (1 − α) 1 k k i=1 si donde q es el vector de consulta, k es el número de resúmenes que el usuario hace clic inmediatamente después de la consulta actual y α es un parámetro que controla la influencia de los resúmenes clicados en el modelo de necesidad de información inferida. En nuestros experimentos, α se establece en 0.5. Ten en cuenta que actualizamos el modelo de información necesario cada vez que el usuario ve un documento. 4.4 Reclasificación de resultados En general, queremos volver a clasificar todos los resultados no vistos tan pronto como se actualice el modelo de usuario. Actualmente, UCAIR implementa el reordenamiento en dos casos, correspondientes a cuando el usuario hace clic en el botón Atrás y en el enlace Siguiente en Internet Explorer. En ambos casos, el modelo de usuario actualizado se utilizaría para reordenar los resultados no vistos de manera que el usuario vea resultados de búsqueda mejorados de inmediato. Para volver a clasificar cualquier resumen de documento no visto, UCAIR utiliza el modelo estándar de recuperación de espacio vectorial y puntúa cada resumen en función de la similitud del resultado y el vector de necesidad de información actual del usuario x [21]. Dado que la retroalimentación implícita no es completamente confiable, presentamos solo un pequeño número (por ejemplo, 5) de los resultados reordenados más altos para ser seguidos por cualquier resultado originalmente clasificado alto. 828 resultados de Google (consulta del usuario = mapa de Java) Resultados de UCAIR (consulta del usuario = mapa de Java) consulta anterior = viajar a Indonesia consulta anterior = tabla hash consulta del usuario ampliada = mapa de Java Indonesia consulta del usuario ampliada = clase de mapa de Java 1 Proyecciones de mapas de Java del mundo ... Lonely Planet - Mapa de Indonesia Mapa (Plataforma Java SE v1.4.2) www.btinternet.com/ se16/js/mapproj.htm www.lonelyplanet.com/mapshells/... java.sun.com/j2se/1.4.2/docs/... 2 Proyecciones de mapas de Java del mundo ... TURISMO DE INDONESIA: JAVA CENTRAL - MAPA Plataforma Java SE v1.3.1: Interfaz de Mapa www.btinternet.com/ se16/js/oldmapproj.htm www.indonesia-tourism.com/... java.sun.com/j2se/1.3/docs/api/java/... 3 Mapa de Java TURISMO DE INDONESIA: JAVA OESTE - MAPA Una introducción a las clases de colección de mapas de Java java.sun.com/developer/... www.indonesia-tourism.com/ ... www.oracle.com/technology/... 4 Mapa de Tecnología Java IndoStreets - Mapa de Java Una introducción a las clases de colección de mapas de Java java.sun.com/developer/onlineTraining/... www.indostreets.com/maps/java/ www.theserverside.com/news/... 5 Science@NASA Home Regiones e islas de Indonesia Mapas, Bali, Java, ... Koders - Mappings.java science.nasa.gov/Realtime/... www.maps2anywhere.com/Maps/... www.koders.com/java/ 6 Una introducción a las clases de colección de mapas de Java Mapa de calles de la ciudad de Indonesia,... Hibernate simplifica el mapeo de herencia www.oracle.com/technology/... www.maps2anywhere.com/Maps/... www.ibm.com/developerworks/java/... 7 Lonely Planet - Mapa de Java Mapas de Indonesia jerarquía de clases de tmap 30.map www.lonelyplanet.com/mapshells/ www.embassyworld.com/maps/... tmap.pmel.noaa.gov/... 8 ONJava.com: Mapa de API de Java Mapas de Indonesia por Peter Loud Alcance de clases www.onjava.com/pub/a/onjava/api map/ users.powernet.co.uk/... jalbum.net/api/se/datadosen/util/Scope.html 9 GTA San Andreas: Mapas de Sam de Indonesia por Peter Loud PrintSafeHashMap de la clase www.gtasanandreas.net/sam/ users.powernet.co.uk/mkmarina/indonesia/ jalbum.net/api/se/datadosen/... 10 TURISMO DE INDONESIA: JAVA OESTE - MAPA indonesiaphoto.com Java Pro - Unión y mapeo vertical de clases www.indonesia-tourism.com/... www.indonesiaphoto.com/... www.fawcette.com/javapro/... Tabla 1: Resultados de muestra de la expansión de la consulta EVALUACIÓN DE UCAIR Ahora presentamos algunos resultados sobre la evaluación de las dos principales funciones de UCAIR: la expansión selectiva de consultas y la reordenación de resultados basada en los datos de clics de los usuarios. 5.1 Resultados de muestra La estrategia de expansión de consultas implementada en UCAIR es intencionalmente conservadora para evitar la interpretación errónea de los modelos implícitos de los usuarios. En la práctica, cada vez que decide expandir la consulta, la expansión suele tener sentido. En la Tabla 1, mostramos cómo UCAIR puede distinguir exitosamente dos contextos de búsqueda diferentes para la consulta java map, correspondientes a dos consultas previas distintas (es decir, viajar a Indonesia vs. hashtable). Debido a la modelización implícita del usuario, UCAIR descubre inteligentemente agregar Indonesia y clase, respectivamente, a la consulta de los usuarios sobre el mapa de Java, lo cual de otro modo sería ambiguo, como se muestra en los resultados originales de Google el 21 de marzo de 2005. Los resultados de UCAIR son mucho más precisos que los resultados de Google y reflejan la personalización en la búsqueda. El componente de retroalimentación implícita entusiasta está diseñado para responder inmediatamente a la actividad de un usuario, como por ejemplo, al visualizar un documento. En la Figura 2, mostramos cómo UCAIR puede desambiguar con éxito una consulta ambigua de jaguar al explotar un resumen del documento visualizado. En este caso, los resultados iniciales de recuperación utilizando "jaguar" (mostrados en el lado izquierdo) contienen dos resultados sobre los autos Jaguar seguidos por dos resultados sobre el software Jaguar. Sin embargo, después de que el usuario ve el contenido de la página web del segundo resultado (sobre el automóvil Jaguar) y regresa a la página de resultados de búsqueda haciendo clic en el botón Atrás, UCAIR automáticamente selecciona dos nuevos resultados de búsqueda sobre automóviles Jaguar (mostrados en el lado derecho), mientras que los dos resultados originales sobre software de Jaguar se desplazan hacia abajo en la lista (no se ven en la imagen). 5.2 Evaluación cuantitativa Para evaluar UCAIR de manera cuantitativa, realizamos un estudio de usuario sobre la efectividad del componente de retroalimentación implícita ansiosa. Es un desafío evaluar cuantitativamente la mejora potencial en el rendimiento de nuestro modelo propuesto y UCAIR sobre Google de manera imparcial [7]. Aquí diseñamos un estudio de usuarios, en el cual los participantes realizarían una búsqueda web normal y evaluarían al azar y de forma anónima un conjunto de resultados mezclados de Google y UCAIR al final de la sesión de búsqueda; los participantes no saben si un resultado proviene de Google o de UCAIR. Reclutamos a 6 estudiantes de posgrado para este estudio de usuarios, quienes tienen diferentes antecedentes (3 en informática, 2 en biología y 1 en química). Los documentos que describen leyes para limitar el correo no deseado sin dar detalles de demandas judiciales o juicios penales no son relevantes. Utilizamos los temas de consulta de la pista Terabyte TREC 2 2004 [2] y la tarea de destilación de temas de la pista web TREC 2003 [4] de la manera que se describirá a continuación. Un ejemplo de tema del TREC 2004 Terabyte track aparece en la Figura 3. El título es una frase corta y puede ser utilizada como una consulta al sistema de recuperación. El campo de descripción proporciona una declaración ligeramente más larga del requisito del tema, generalmente expresado como una sola oración completa o pregunta. Finalmente, la narrativa proporciona información adicional necesaria para especificar completamente el requisito, expresado en forma de un breve párrafo. Inicialmente, cada participante exploraría 50 temas ya sea de la categoría Terabyte o de la categoría Web y elegiría los 5 o 7 temas más interesantes. Para cada tema seleccionado, el participante básicamente realizaría la búsqueda web normal utilizando UCAIR para encontrar muchas páginas web relevantes utilizando el título del tema de la consulta como la palabra clave inicial de la consulta. Durante este proceso, el participante puede ver los resultados de la búsqueda y posiblemente hacer clic en algunos interesantes para ver las páginas web, tal como en una búsqueda web normal. No hay ningún requisito o restricción sobre cuántas consultas debe enviar el participante o cuándo debe detener la búsqueda de un tema. Cuando el participante planea cambiar el tema de búsqueda, simplemente presionará un botón 2 de la Conferencia de Recuperación de Texto: http://trec.nist.gov/ 829 Figura 2: Capturas de pantalla para volver a clasificar los resultados y evaluar los resultados de búsqueda antes de cambiar al siguiente tema. En el momento de la evaluación, los 30 resultados mejor clasificados de Google y UCAIR (algunos se superponen) se mezclan aleatoriamente para que el participante no sepa si un resultado proviene de Google o de UCAIR. El participante luego juzgaría la relevancia de estos resultados. Medimos la precisión en los primeros n (n = 5, 10, 20, 30) documentos de Google y UCAIR. También evaluamos precisiones en diferentes niveles de recuperación. En total, 368 documentos fueron considerados relevantes a partir de los resultados de búsqueda de Google y 429 documentos fueron considerados relevantes por los participantes de UCAIR. Los diagramas de dispersión de precisión en los 10 y 20 documentos principales se muestran en la Figura 4 y la Figura 5 respectivamente (El diagrama de dispersión de precisión en los 30 documentos principales es muy similar al de los 20 documentos principales). Cada punto de los gráficos de dispersión representa las precisiones de Google y UCAIR en un tema de consulta. La Tabla 2 muestra la precisión promedio en los primeros n documentos entre 32 temas. A partir de la Figura 4, la Figura 5 y la Tabla 2, vemos que los resultados de búsqueda de UCAIR son consistentemente mejores que los de Google en todas las medidas. Además, la mejora en el rendimiento es más dramática para la precisión en los primeros 20 documentos que para la precisión en los primeros 10 documentos. Una explicación para esto es que cuanto más interacción tenga el usuario con el sistema, más datos de clics se espera que UCAIR pueda recopilar. Por lo tanto, el sistema de recuperación puede construir modelos de usuario implícitos más precisos, lo que conduce a una mayor precisión en la recuperación. El Método de Clasificación prec@5 prec@10 prec@20 prec@30 Google 0.538 0.472 0.377 0.308 UCAIR 0.581 0.556 0.453 0.375 Mejora 8.0% 17.8% 20.2% 21.8% Tabla 2: Tabla de precisión promedio en los primeros n documentos para 32 temas de consulta El gráfico en la Figura 6 muestra las curvas de precisión-recuperación para UCAIR y Google, donde se observa claramente que el rendimiento de UCAIR 0 0.2 0.4 0.6 0.8 1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 UCAIR prec@10 Googleprec@10 Gráfico de dispersión de Precisión en los 10 primeros documentos Figura 4: La precisión en los 10 primeros documentos de UCAIR y Google es consistentemente y considerablemente mejor que la de Google en todos los niveles de recuperación. 6. CONCLUSIONES En este artículo, estudiamos cómo aprovechar la modelización implícita del usuario para personalizar de manera inteligente la recuperación de información y mejorar la precisión de la búsqueda. A diferencia de la mayoría de trabajos anteriores, enfatizamos el uso del contexto de búsqueda inmediata y la información de retroalimentación implícita, así como la actualización rápida de los resultados de búsqueda para beneficiar al máximo a un usuario. Presentamos un marco de trabajo de toma de decisiones para optimizar la recuperación interactiva de información basado en la actualización ansiosa del modelo del usuario, en el cual el sistema responde a cada acción del usuario eligiendo una acción del sistema para optimizar una función de utilidad. Además, proponemos técnicas específicas para capturar y aprovechar dos tipos de información de retroalimentación implícita: (1) identificar consultas inmediatamente anteriores relacionadas y utilizar la consulta y los resultados de búsqueda correspondientes para seleccionar términos adecuados para expandir la consulta actual, y (2) aprovechar los resúmenes de documentos vistos para volver a clasificar inmediatamente cualquier documento que aún no haya sido visto por el usuario. Usando estas técnicas, desarrollamos un agente de búsqueda web del lado del cliente (UCAIR) sobre un motor de búsqueda popular (Google). Los experimentos en la búsqueda web muestran que nuestro agente de búsqueda puede mejorar la precisión de la búsqueda en más de un 830 0 0.2 0.4 0.6 0.8 1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 UCAIR prec@20 Googleprec@20 Gráfico de dispersión de Precisión en los 20 documentos principales Figura 5: Precisión en los 20 documentos principales de UCAIR y Google 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0.4 0.45 0.5 0.55 0.6 0.65 0.7 0.75 0.8 0.85 0.9 precisión recall Curvas de Precisión-Recall Resultado de Google Resultado de UCAIR Figura 6: Precisión en los 20 resultados principales de UCAIR y Google Google. Dado que la información implícita que aprovechamos ya existe de forma natural a través de las interacciones del usuario, este no necesita hacer ningún esfuerzo adicional. El agente de búsqueda desarrollado puede mejorar el rendimiento de la búsqueda web existente sin necesidad de esfuerzo adicional por parte del usuario. AGRADECIMIENTO Agradecemos a los seis participantes de nuestros experimentos de evaluación. Este trabajo fue apoyado en parte por las subvenciones de la Fundación Nacional de Ciencias IIS-0347933 e IIS-0428472. REFERENCIAS [1] S. M. Beitzel, E. C. Jensen, A. Chowdhury, D. Grossman y O. Frieder. Análisis por hora de un registro de consultas web muy grande categorizado por tema. En Actas de SIGIR 2004, páginas 321-328, 2004. [2] C. Clarke, N. Craswell e I. Soboroff. Resumen de la pista de terabyte TREC 2004. En Actas de TREC 2004, 2004. [3] M. Claypool, P. Le, M. Waseda y D. Brown. Indicadores implícitos de interés. En Actas de Interfaces de Usuario Inteligentes 2001, páginas 33-40, 2001. [4] N. Craswell, D. Hawking, R. Wilkinson y M. Wu. Resumen de la pista web TREC 2003. En Actas de TREC 2003, 2003. [5] W. B. Croft, S. Cronen-Townsend y V. Larvrenko. Retroalimentación de relevancia y personalización: Una perspectiva de modelado del lenguaje. En Actas del Segundo Taller DELOS: Personalización y Sistemas de Recomendación en Bibliotecas Digitales, 2001. [6] Google Personalized. http://labs.google.com/personalized. [7] D. Hawking, N. Craswell, P. B. Thistlewaite y D. Harman. Resultados y desafíos en la evaluación de búsqueda en la web. Redes de Computadoras, 31(11-16):1321-1330, 1999. [8] X. Huang, F. Peng, A. An, y D. Schuurmans. Identificación dinámica de sesiones de registro web con modelos de lenguaje estadístico. Revista de la Sociedad Americana de Ciencia de la Información y Tecnología, 55(14):1290-1303, 2004. [9] G. Jeh y J. Widom. Escalando la búsqueda web personalizada. En Actas de WWW 2003, páginas 271-279, 2003. [10] T. Joachims. Optimización de motores de búsqueda utilizando datos de clics. En Actas de SIGKDD 2002, páginas 133-142, 2002. [11] D. Kelly y J. Teevan. Retroalimentación implícita para inferir preferencias de usuario: Una bibliografía. SIGIR Forum, 37(2):18-28, 2003. [12] J. Lafferty y C. Zhai. Documentar modelos de lenguaje, modelos de consulta y minimización de riesgos para la recuperación de información. En Actas de SIGIR01, páginas 111-119, 2001. [13] T. Lau y E. Horvitz. Patrones de búsqueda: Análisis y modelado de la refinación de consultas web. En Actas de la Séptima Conferencia Internacional sobre Modelado de Usuarios (UM), páginas 145-152, 1999. [14] V. Lavrenko y B. Croft. Modelos de lenguaje basados en relevancia. En Actas de SIGIR01, páginas 120-127, 2001. [15] M. Mitra, A. Singhal y C. Buckley. Mejorando la expansión automática de consultas. En Actas de SIGIR 1998, páginas 206-214, 1998. [16] My Yahoo! http://mysearch.yahoo.com. [17] G. Nunberg. Según Google, así va la nación. New York Times, mayo de 2003. [18] S. E. Robertson. El principio de clasificación de probabilidad en ı˚. Revista de Documentación, 33(4):294-304, 1977. [19] J. J. Rocchio. Retroalimentación de relevancia en la recuperación de información. En el Sistema de Recuperación SMART: Experimentos en el Procesamiento Automático de Documentos, páginas 313-323. Prentice-Hall Inc., 1971. [20] G. Salton y C. Buckley. Mejorando el rendimiento de recuperación mediante retroalimentación de recuperación. Revista de la Sociedad Americana de Ciencia de la Información, 41(4):288-297, 1990. [21] G. Salton y M. J. McGill. Introducción a la Recuperación de Información Moderna. McGraw-Hill, 1983. [22] X. Shen, B. Tan y C. Zhai. Recuperación de información sensible al contexto utilizando retroalimentación implícita. En Actas de SIGIR 2005, páginas 43-50, 2005. [23] X. Shen y C. Zhai. Explotando el historial de consultas para la clasificación de documentos en la recuperación de información interactiva (Póster). En Actas de SIGIR 2003, páginas 377-378, 2003. [24] A. Singhal. Recuperación de información moderna: Una breve visión general. Boletín del Comité Técnico de Ingeniería de Datos de la Sociedad de Computación de IEEE, 24(4):35-43, 2001. [25] K. Sugiyama, K. Hatano y M. Yoshikawa. Búsqueda web adaptativa basada en el perfil del usuario construido sin ningún esfuerzo por parte de los usuarios. En Actas de WWW 2004, páginas 675-684, 2004. [26] E. Volokh. Personalización y privacidad. Comunicaciones de la ACM, 43(8):84-88, 2000. [27] R. W. White, J. M. Jose, C. J. van Rijsbergen e I. Ruthven. Un estudio simulado de modelos de retroalimentación implícita. En Actas de ECIR 2004, páginas 311-326, 2004. [28] J. Xu y W. B. Croft. Expansión de consultas utilizando análisis local y global de documentos. En Actas de SIGIR 1996, páginas 4-11, 1996. [29] C. Zhai y J. Lafferty. Modelo de retroalimentación basado en el modelo de recuperación de divergencia de KL. En Actas de la CIKM 2001, páginas 403-410, 2001. 831