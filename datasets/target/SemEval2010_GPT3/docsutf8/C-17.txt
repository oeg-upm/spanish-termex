Problemas de implementación de un sistema de conferencias VoIP en un entorno de conferencias virtuales. R. Venkatesha Prasad y Richard Hurni. Jamadagni iii H.N. Shankar iv i, iii Centro de Diseño y Tecnología Electrónica Instituto Indio de Ciencias, Bangalore, India Teléfono: +91 80 360 0810 i, iii {vprasad, hsjam}@cedt.iisc.ernet.in ii hurni@ieee.org iv hn_shankar@yahoo.com RESUMEN Los servicios en tiempo real han sido principalmente respaldados en redes conmutadas por circuitos. Las tendencias recientes favorecen los servicios trasladados a redes de conmutación de paquetes. Para las conferencias de audio, necesitamos considerar muchos aspectos, como la escalabilidad, la calidad de la aplicación de conferencia, el control de piso y la carga en los clientes/servidores, por nombrar algunos. En este documento, describimos un marco de servicio de audio diseñado para proporcionar un Entorno de Conferencias Virtuales (ECV). El sistema está diseñado para dar cabida a un gran número de usuarios finales hablando al mismo tiempo y distribuidos por Internet. El marco se basa en Servidores de Conferencia [14], que facilitan el manejo del audio, mientras que explotamos las capacidades de SIP para propósitos de señalización. La selección de clientes se basa en un reciente cuantificador llamado Número de Volumen que ayuda a imitar una conferencia física cara a cara. Nos ocupamos de los problemas de implementación de la solución propuesta tanto en términos de escalabilidad como de interactividad, mientras explicamos las técnicas que utilizamos para reducir el tráfico. Hemos implementado una aplicación de Servidor de Conferencias (CS) en una red de campus en nuestro Instituto. Categorías y Descriptores de Temas C.2.4 [Redes de Computadoras y Comunicación]: Sistemas Distribuidos - Cliente/Servidor, aplicaciones distribuidas. Términos generales Algoritmos, Rendimiento, Diseño, Teoría. 1. INTRODUCCIÓN El Internet de hoy utiliza el conjunto de protocolos IP que fue diseñado principalmente para el transporte de datos y proporciona la entrega de datos con el mejor esfuerzo. Las restricciones de retraso y las características diferencian los datos tradicionales por un lado, de las aplicaciones de voz y video por el otro. Por lo tanto, a medida que se implementan aplicaciones de voz y video cada vez más sensibles al tiempo en Internet, se pone de manifiesto la insuficiencia de la red. Además, buscamos trasladar servicios telefónicos a través de Internet. Entre ellos, la instalación de conferencia virtual (teleconferencia) está a la vanguardia. Las videoconferencias y conferencias de audio en Internet son populares por las varias ventajas que poseen. Claramente, el ancho de banda necesario para una videoconferencia a través de Internet aumenta rápidamente con el número de participantes; reducir el ancho de banda sin comprometer la calidad del audio es un desafío en la telefonía por Internet. Los problemas críticos adicionales son: (a) retraso de paquetes, (b) eco, (c) mezcla de audio de clientes seleccionados, (d) selección automática de clientes para participar en la conferencia, (e) reproducción de audio mezclado para cada cliente, (f) manejo de clientes que no son capaces de mezclar flujos de audio (estos clientes se conocen como clientes tontos), y (g) decidir el número de clientes activos simultáneamente en la conferencia sin comprometer la calidad de voz. Si bien todos los requisitos anteriores son desde el punto de vista tecnológico, la perspectiva de los usuarios y las interacciones también son factores esenciales. Hay mucha discusión entre la comunidad de HCI y CSCW sobre el uso de la Etnometodología para el diseño de aplicaciones de CSCW. El enfoque básico es proporcionar un ancho de banda más amplio, más instalaciones y mecanismos de control más avanzados, con miras a una mejor calidad de interacción. Este enfoque ignora la utilidad funcional del entorno que se utiliza para la colaboración. Eckehard Doerry [4] critica este enfoque diciendo que pone la forma antes que la función. Por lo tanto, la necesidad es adoptar un enfoque que considere ambos aspectos: el técnico y el funcional. En cuanto al aspecto funcional, nos referimos a [15] donde se ha tratado en cierto detalle. En este trabajo, no discutimos la videoconferencia; su inclusión no beneficia significativamente la calidad de la conferencia [4]. Nuestro enfoque está en entornos de audio virtuales. Primero describimos los desafíos encontrados en las conferencias de audio virtuales. Luego investigamos las motivaciones seguidas por la literatura relevante. En la Sección 5, explicamos la arquitectura de nuestro sistema. La sección 6 comprende la descripción de los diversos algoritmos utilizados en nuestra configuración. Abordamos problemas de implementación. Una discusión sobre el Instituto Federal Suizo de Tecnología, Lausana. Antiguo visitante en CEDT. PESIT y NIAS, Bangalore, India. El rendimiento sigue. Concluimos teniendo en cuenta algunos problemas de implementación. 2. DESAFÍOS EN LA VIDEOCONFERENCIA VoIP Surgen muchos desafíos al construir una aplicación VoIP. Lo siguiente es de particular preocupación en el proceso: • Facilidad de uso: la conferencia debe ser sencilla; los usuarios no necesitan experiencia en el dominio. La gestión (adición/eliminación) de clientes y servidores debe ser sencilla. El desarrollo de aplicaciones no debe presuponer características específicas del sistema subyacente o de las capas de red. La facilidad de uso puede incluir el aprovechamiento de tecnologías fácilmente disponibles, técnicamente factibles y económicamente viables. • Escalabilidad: Las conferencias deben parecer ininterrumpidas bajo cargas pesadas, es decir, cuando se agregan muchos usuarios adicionales. El tráfico en la WAN no debería aumentar apreciablemente con el número total de clientes; de lo contrario, esto podría provocar congestión. Por lo tanto, se necesita un medio para regular el tráfico al mínimo para este tipo de aplicaciones en tiempo real. • Interactividad: En Entornos de Conferencias Virtuales (ECVs), pretendemos una aplicación de conferencias cara a cara que imite una conferencia real, donde los participantes más vocales invitan la atención. El intercambio de turnos en la ocupación del espacio por parte de los participantes debe adaptarse con gracia para lograr una transición natural. • Estandarización: La solución debe cumplir con los estándares establecidos para lograr interoperabilidad y aceptación entre pares. Los requisitos anteriores se colocan en la perspectiva de las observaciones realizadas en trabajos anteriores (véase Secciones 3 y 4) y guiarán el diseño del VCE. 3. La motivación Ramanathan y Rangan [20] han estudiado en detalle las configuraciones arquitectónicas comparando muchos esquemas de arquitectura de conferencias teniendo en cuenta la demora de red y los requisitos de computación para la mezcla. La división funcional y el diseño de arquitectura orientada a objetos que ayudan en la implementación se presentan en [1]. Un resumen de muchos temas relacionados con el apoyo a una conferencia grande se aborda en [8]. H. P. Dommel [5] y muchos otros destacan el control de piso como otro aspecto fundamental a tener en cuenta en el diseño de una herramienta de conferencias. Los protocolos de control de conferencias fuertemente acoplados en Internet pertenecen a la familia ITU-T H.323 [9]; sin embargo, están principalmente diseñados para conferencias pequeñas. El último borrador del IETF de Rosenberg y Schulzrinne [23] discute modelos de conferencia con SIP [22] en el fondo. Los aspectos de implementación para la conferencia SIP centralizada se informan en [26]. Un nuevo enfoque llamado mezcla parcial por Radenkovic [18] permite que flujos mezclados y no mezclados coexistan. En todas las propuestas anteriores, si bien hay algunas sugerencias muy útiles, comparten una o más de las siguientes limitaciones: • En una conferencia de audio, no es necesario mezclar los flujos de todos los clientes. De hecho, mezclar muchas corrientes arbitrarias [24] de clientes degrada la calidad de la conferencia debido a la reducción en el volumen (aspecto espacial del habla). El número de flujos mezclados varía dinámicamente dependiendo del número de participantes activos. Esto provocaría fluctuaciones en el volumen de cada participante individual, causando una degradación severa en la calidad. La mezcla personalizada de flujos no es posible cuando hay muchos clientes activos. Existe un umbral en el número de oradores simultáneos por encima del cual aumentar el número de oradores se vuelve contraproducente para la calidad de la conferencia. La fijación del número máximo de hablantes simultáneos se aborda en un trabajo reciente [15] utilizando la Etnometodología, y se postula que es tres. Por lo tanto, es recomendable respetar esa restricción. • No puede haber muchos mezcladores intermedios (similarmente, Servidores de Conferencia como en [10]) en etapas como en [20] porque provoca un retraso desmedido al aumentar el número de saltos y no es escalable con la interactividad como enfoque. • El Control de Piso para una conferencia de audio (incluso de video) con instrucciones explícitas de toma de turnos para los participantes convierte la conferencia en esencia en un asunto de un orador a la vez, no en una en vivo y libre de interrupciones. De esta manera, la conferencia se vuelve notablemente artificial y su calidad se degrada. Schulzrinne et al. [24], asumen que solo un participante está hablando en un momento dado. En este caso, si las aplicaciones se implementan con cierto control [5], el servicio se vuelve asfixiante para los usuarios. • La mezcla parcial [18] tiene un problema similar al de la mezcla cuando se mezclan más flujos. Además, en [18], para permitir el discurso improvisado, la mezcla no se realiza cuando la red puede soportar altos requisitos de ancho de banda para enviar/recibir todas las transmisiones, pero es innecesaria [15]. • Para conferencias grandes [23, 10] una conferencia centralizada no puede escalar. Con la multidifusión, los clientes tendrán que analizar muchos flujos y el tráfico en la red de los clientes aumenta innecesariamente. Evidentemente, se abordan diferentes problemas particulares, todos los cuales son un subconjunto de los requisitos (definidos en [14] y [16]) para el soporte de conferencias de VoIP. Por lo tanto, es necesario abordar la conferencia en su totalidad teniendo en cuenta todos sus requisitos de manera simultánea. Con este objetivo, el sistema de conferencias VoIP que proponemos está diseñado para ser escalable e interactivo. Hacemos uso del Número de Sonoridad para implementar el control de volumen. Esto permite a un participante entrar libremente en el modo de hablar para interrumpir al orador actual como en una reunión natural cara a cara. Un límite superior en el número de pisos (es decir, el número de oradores permitidos para hablar al mismo tiempo) se fija utilizando una conjetura propuesta en [15]. El trabajo presentado aquí es una continuación de nuestros estudios sobre conferencias basadas en el Protocolo de Inicio de Sesión en [14] y [16]. SIP, definido en [22], es ahora el estándar más popular para implementación de VoIP y ha sido elegido por su fortaleza, facilidad de uso, extensibilidad y compatibilidad. Esta es la razón por la cual estará en el trasfondo de todos los mensajes de control que surgirán implícitamente entre las entidades en nuestra arquitectura. Los mensajes actuales están descritos en [16] y, como tal, no presentamos una descripción completa de ellos aquí. 4. TRABAJO RELACIONADO El estándar SIP definido en el RFC 3261 [22] y en extensiones posteriores como [21] no ofrece servicios de control de conferencias como control de piso o votación y no prescribe cómo debe ser gestionada una conferencia. Sin embargo, SIP se puede utilizar para iniciar una sesión que utilice algún otro protocolo de control de conferencias. La especificación central de SIP soporta muchos modelos para conferencias [26, 23]. En los modelos basados en servidor, un servidor mezcla flujos de medios, mientras que en una conferencia sin servidor, la mezcla se realiza en los sistemas finales. SDP [7] se puede utilizar para definir las capacidades de los medios y proporcionar otra información sobre la conferencia. Ahora consideraremos algunos modelos de conferencia en SIP que han sido propuestos recientemente [23]. Primero, veamos los modelos sin servidor. En la mezcla de extremos del sistema, solo un cliente (SIP UA) maneja la señalización y la mezcla de medios para todos los demás, lo cual claramente no es escalable y causa problemas cuando ese cliente en particular abandona la conferencia. En el modelo de Usuarios que se unen, un árbol crece, ya que cada parte invitada constituye una nueva rama en el camino de distribución. Esto conduce a un número creciente de saltos para las hojas remotas y no es escalable. Otra opción sería utilizar la multidifusión para las videoconferencias, pero actualmente la multidifusión no está habilitada en Internet y solo es posible en una LAN. Entre los modelos basados en servidor, en una conferencia de marcado, los UAs se conectan a un servidor central que maneja todas las mezclas. Este modelo no es escalable ya que está limitado por la potencia de procesamiento del servidor y el ancho de banda de la red. Las conferencias centralizadas ad hoc y los servidores de conferencias de marcado tienen mecanismos y problemas similares. Los modelos híbridos que involucran señalización centralizada y medios distribuidos, con estos últimos utilizando unicast o multicast, plantean problemas de escalabilidad como antes. Sin embargo, una ventaja es que el control de la conferencia puede ser una solución de terceros. La Mezcla Parcial Distribuida, presentada en [18], propone que en caso de limitación de ancho de banda, algunos flujos se mezclan y otros no, manteniendo la interactividad intacta. La pérdida de espacialidad cuando se mezclan y el aumento del ancho de banda cuando no lo hacen son problemas abiertos. Un estudio relacionado [19] del mismo autor propone una arquitectura de conferencias para Entornos Virtuales Colaborativos (CVEs) pero no proporciona el enfoque de escalabilidad sin la disponibilidad de la multidifusión. Teniendo en cuenta las limitaciones de los sistemas de conferencias propuestos, detallaremos ahora nuestra propuesta. 5. ARQUITECTURA DEL SISTEMA Esta sección está dedicada a la descripción de la arquitectura del sistema propuesto. Sin embargo, dado que este documento constituye la continuación de nuestro trabajo iniciado en [14] y ampliado en [16], no presentaremos aquí todos los detalles sobre las entidades propuestas e invitamos a los lectores a consultar los documentos mencionados anteriormente para obtener una descripción completa y detallada. Primero, no restringimos nuestro sistema de conferencias para funcionar solo en conferencias pequeñas, sino en grandes VCEs de audio que tienen cientos (o incluso miles) de usuarios a través de una Red de Área Amplia (WAN) como Internet. Esta perspectiva se deriva de una evaluación de que los VCEs ganarán importancia en el futuro, ya que las conferencias de audio interactivas serán más populares debido a la difusión de la cultura mediática en todo el mundo. Dos aspectos deben ser atendidos al construir un sistema de conferencias VoIP: (i) el front-end, que consiste en el programa de aplicación que se ejecuta en las computadoras de los usuarios finales y (ii) el back-end que proporciona otros programas de aplicación que facilitan las conferencias y la conferencia. Los usuarios participantes se agrupan en varios dominios. Estos dominios son Redes de Área Local (LAN), como redes corporativas o educativas. Esta suposición distribuida requiere soluciones de control y manejo de medios distribuidos, ya que los sistemas centralizados no serían escalables para conferencias tan grandes (ver Sección 4). Más explícitamente, en cada dominio, podemos identificar varios componentes lógicos relevantes de una instalación de conferencias (Fig. 1): Un número arbitrario de usuarios finales (clientes) que pueden participar en como máximo una conferencia de audio a la vez. Cada usuario es la Fig. 1. Ejemplo de conferencia: 3 dominios que contienen las entidades necesarias para que la conferencia pueda tener lugar. Incluidas en un único dominio en un instante dado, pero pueden moverse de un dominio a otro (nomadismo). En nuestro entorno de conferencias, estos clientes son Agentes de Usuario SIP (SIP UAs) regulares, según se define en [22], para lograr interoperabilidad con otros sistemas compatibles con SIP existentes. Estos clientes no son conscientes del entorno complejo que respalda la conferencia, lo cual se destaca a continuación. Un servidor SIP (SIPS) por dominio, encargándose de todos los aspectos de señalización de la conferencia (clientes que se unen, salen, etc.) [16]. En particular, se considera como una implementación física que abarca diferentes roles lógicos, a saber, un Servidor Proxy SIP, un Servidor Registrador SIP, un Servidor de Redirección SIP y un SIP B2BUA (Agente de Usuario de Vuelta a Vuelta) [22]. Esta implementación física permite el manejo de mensajes SIP entrantes/salientes por una u otra entidad lógica según sea necesario. SIPS está encargado de mantener un servicio total y tiene muchas ventajas, como (a) funciona como una entidad centralizada que puede hacer un seguimiento de las actividades de los UAs en una conferencia; (b) puede realizar todo el cambio para proporcionar funciones de PBX; (c) puede localizar a los UAs e invitarlos a una conferencia; (d) también puede encargarse de la facturación. Los SIPS en diferentes dominios se comunican entre sí utilizando mensajes SIP como se describe en [16]. Si la carga en un SIPS particular es demasiado pesada, puede crear otro SIPS en el mismo dominio para que la carga se comparta. Se crea un Servidor de Conferencias Maestro (M-CS) (simplemente un Servidor de Conferencias (CS)) para cada conferencia por el SIPS local cuando una conferencia comienza. Este servidor se utilizará para manejar paquetes de medios para los clientes del dominio. Su mecanismo será descrito en la siguiente sección. El M-CS podrá crear una jerarquía de CSs dentro de un dominio agregando uno o más CSs esclavos (S-CSs) para dar cabida a todos los clientes activos y prevenir su propia saturación al mismo tiempo. Veremos este mecanismo con cierto detalle en la secuela. Las entidades descritas aquí son exhaustivas y se ajustan a la filosofía del SIP. Por lo tanto, el uso de SIP hace que esta arquitectura sea más útil e interoperable con cualquier otro cliente o servidor SIP. PROBLEMAS ALGORÍTMICOS 6.1 Seleccionar los flujos similares a SipConf en [27], un Servidor de Conferencias (CS) [17] tiene la función de soportar la conferencia; es responsable de manejar los flujos de audio utilizando RTP. También puede duplicarse para convertir formatos de transmisión de audio para un cliente dado si es necesario y puede funcionar como Traductores/Mezcladores de la especificación RTP detrás de cortafuegos. Hemos basado el diseño de nuestro CS en el Procesador Multipunto (MP) H.323 [9]. En resumen, el MP recibe flujos de audio de los puntos finales involucrados en una conferencia multipunto centralizada o híbrida, los procesa y los devuelve a los puntos finales. Un procesador de señales de audio prepara N salidas de audio NMax a partir de M flujos de entrada después de la selección, mezcla o ambas. La mezcla de audio requiere decodificar el audio de entrada a señales lineales (PCM o analógicas), realizar una combinación lineal de las señales y volver a codificar el resultado en un formato de audio apropiado. El procesador de señales puede eliminar o atenuar algunas de las señales de entrada para reducir el ruido y los componentes no deseados. Fig. 2. 

Fig. 2. El diagrama esquemático de un CS. La limitación de H.323 es que no aborda la escalabilidad de una conferencia. La arquitectura propone una topología en cascada o en cadena de margaritas [10], la cual se puede demostrar que no puede escalar para una conferencia grande. Un CS atiende a muchos clientes en la misma conferencia. Por lo tanto, solo maneja una conferencia a la vez. Varios CS pueden coexistir en un dominio, como cuando hay varias conferencias en curso. Los mensajes relacionados con la señalización de los CSs se tratan en [11]. El funcionamiento de un CS se ilustra en la Fig. 2: Para cada intervalo de mezcla, CS 1 elige los mejores NMax paquetes de audio de los M1 (utilizando un criterio denominado Número de Volumen, descrito en la siguiente subsección). Puede posiblemente recibir y enviar estos a CSs 2 a P. El conjunto de paquetes enviados se denota como AotrosCSs. En el mismo intervalo de mezcla, también recibe los mejores paquetes de audio NMax (de un posible M2) de CS 2, de manera similar a los mejores NMax (de un posible MP) de CS P. Para simplificar, ignoramos el retardo de propagación entre los CSs, que de hecho se puede tener en cuenta; está más allá del alcance de esta presentación. El conjunto de paquetes recibidos se denota como FromOtherCSs. Finalmente, selecciona los mejores paquetes NMax del conjunto {ToOtherCSs unión FromOtherCSs} y envía estos paquetes a su propio grupo. Se puede observar que el conjunto {ToOtherCSs unión FromOtherCSs} es el mismo en todos los CSs. Esto garantiza que cualquier cliente en la conferencia finalmente reciba el mismo conjunto de paquetes para mezclar. Por lo tanto, todos los clientes obtienen una vista común de la conferencia. De manera similar, para cada intervalo de tiempo (tiempo de paquete), se selecciona un subconjunto, F, de todos los clientes (utilizando el mismo criterio) del conjunto de paquetes de todos los otros CS más los NMax clientes seleccionados localmente. Sus paquetes se mezclan y se reproducen en los clientes. Según [15], la cardinalidad de F, |F| es NMax y está fijada en tres. En nuestra configuración de conferencias, la selección la realiza el Servidor Maestro de Conferencias (M-CS), que interviene exclusivamente en el manejo de medios. Ten en cuenta que aunque la especificación de SIP permite la comunicación directa de medios de usuario a usuario en una llamada uno a uno, también es posible utilizar el Servidor de Conferencias para llamadas de dos partes, especialmente porque es entonces más funcional crear una conferencia real agregando un tercero y posteriormente más participantes. Existen casos en los que la capacidad de procesamiento de un M-CS se ve superada, ya que puede tener demasiados paquetes, tanto de dominios locales como de dominios remotos, para procesar. En ese caso, el M-CS creará uno o varios S-CS (Fig. 6) y transferirá a sus propios clientes, así como a los nuevos clientes, a ellos. En esta configuración, el algoritmo descrito anteriormente se modificará ligeramente, ya que los paquetes de audio irán de los clientes a su S-CS dedicado, que seleccionará NMax paquetes para enviar al M-CS local, que luego seleccionará NMax paquetes de todos sus S-CS en el dominio antes de enviarlos a los dominios remotos. Los paquetes entrantes de otros dominios serán recibidos por el M-CS, se seleccionarán NMax de ellos y se enviarán directamente a los clientes del dominio, evitando los SCSs. Este cambio implica que existen como máximo tres entidades intermedias para cada paquete de audio, en lugar de dos en la configuración convencional. Dado que el salto adicional ocurre dentro de la LAN que se supone tiene una conectividad de alta velocidad, consideramos que no debería impedirnos usar esta jerarquía de CS cuando sea necesario hacerlo. 6.2 Número de Sonoridad (LN) Una pregunta básica que debe responder el CS es la siguiente. En un intervalo de mezcla, ¿cómo debería elegir NMax paquetes de los M que podría recibir? Una forma es clasificar los paquetes M recibidos según sus energías y elegir los NMax mejores. Sin embargo, esto suele considerarse insuficiente porque las fluctuaciones aleatorias en las energías de los paquetes pueden provocar una mala calidad de audio. Esto indica la necesidad de una métrica diferente de meras energías individuales de paquetes. El medidor debe tener las siguientes características [12]: • Un hablante (ocupante del suelo) no debe ser interrumpido por un pico en la energía del paquete de otro hablante. Esto implica que la historia del discurso de un hablante debería tener cierto peso. Esto se suele llamar Persistencia o Resaca. • Un participante que quiera interrumpir a un orador tendrá que (i) hablar en voz alta y (ii) seguir intentándolo por un tiempo breve. En una conferencia presencial, el lenguaje corporal a menudo indica la intención de interrumpir. Pero en una conferencia a ciegas en discusión, la intención de un participante de interrumpir puede ser transmitida de manera efectiva a través de LN. Se debe garantizar un mecanismo de control de piso habilitado para cortar a un orador de manera contundente. Estos requisitos son cumplidos por el Número de Volumen [12], que cambia suavemente con el tiempo para que la selección (adición y eliminación) de clientes para la conferencia sea elegante. LN (= ) es una función de la amplitud de la corriente de audio actual más la actividad y amplitud en una ventana específica en el pasado. Fig. 3. 

Fig. 3. Las diferentes ventanas utilizadas para el cálculo de LN se actualizan en una base de paquete por paquete. El parámetro básico utilizado aquí es la amplitud del paquete, que se calcula como la raíz cuadrada de la media cuadrática (rms) de las energías en las muestras de audio de un paquete, y se denota como XK. Tres ventanas están definidas como se muestra en la Fig. 3. El nivel de amplitud actual del altavoz se encuentra calculando el promedio móvil de la amplitud del paquete (XK) dentro de una ventana llamada Ventana de Pasado Reciente, que va desde el instante presente hasta algún momento pasado. La actividad pasada del hablante se encuentra calculando el promedio móvil de la amplitud del paquete (XK) dentro de una ventana llamada Ventana de Pasado Lejano, que comienza en el punto donde termina la ventana de Pasado Reciente y se extiende hacia atrás en el pasado por un intervalo predefinido. La actividad del hablante en el pasado se encuentra con una ventana llamada Horizonte de Actividad, que abarca la ventana del pasado reciente, así como la ventana del pasado lejano y más allá si es necesario. Aunque la contribución del horizonte de actividad parece similar a la contribución de las ventanas del pasado reciente y pasado lejano, la actividad pasada se calcula de manera diferente a partir de la ventana del horizonte de actividad. Define las cantidades durante estos tres intervalos como L1, L2 y L3. L1 cuantifica la actividad de habla del Pasado Reciente, L2 la actividad de habla del Pasado Lejano y L3 proporciona un número correspondiente a la actividad de habla en la ventana del Horizonte de Actividad, cuantificando qué tan activo estuvo el hablante en los últimos intervalos. L3 produce una cantidad que es proporcional a la fracción de paquetes que tienen energías por encima de un umbral predefinido (Ec. 3). El umbral es invariable entre clientes. ∑ +− = = 1 1 1 RPP P Wt tK K RP X W L (1) ∑ +−− −= = 1 2 1 DPRPP RPP WWt WtK K DP X W L (2) ∑ +− = ≥= 1 }{3 * 1 AHP P K Wt tK X AH I W L θθ (3) Donde siI KX 1}{ =≥θ θ≥KX = de lo contrario,0 El umbral es una constante. Se establece en el 10-20 por ciento de la amplitud de las muestras de voz de un paquete en nuestra implementación aquí. El número de intensidad λ para el instante de tiempo presente (o el paquete presente) se calcula como, 332211 *L*L*L αααλ ++= (4) Aquí 1, 2 y 3 son elegidos de tal manera que: 0< 1, 2 y 3=1- 1) Aquí, 1 es el peso dado al habla del pasado reciente, 2 es el peso dado al habla del pasado lejano y 3 es el peso dado a la actividad del habla en la ventana de horizonte de actividad considerada. 6.3 Seguridad, Vida y Equidad El parámetro λ tiene un efecto significativo en la evaluación de la ventana. Después de que un conferenciante se queda en silencio, otro puede tomar la palabra. Además, dado que hay más de un canal, la interrupción está habilitada. Un conferenciante ruidoso es más probable que sea escuchado debido a un λ elevado. Esto garantiza equidad para todos los conferenciantes. Después de todo, incluso en una conferencia presencial, un orador más vocal capta una atención especial. Todas estas características deseables están integradas en la LN. Una discusión exhaustiva sobre la selección de los diversos parámetros y la dinámica de LN están fuera del alcance de este documento. 6.4 Algoritmo de selección utilizando LN Siguiendo los desarrollos en las subsecciones 6.1 y 6.2, presentamos el algoritmo simple que se ejecuta en cada Servidor Maestro-Conferencia (Algoritmo 1). Este algoritmo se basa en las discusiones de la sección 6.1. El conjunto F, único a nivel mundial, se encuentra utilizando este procedimiento. Repetir para cada intervalo de tiempo en cada M-CS { 1. Obtener todos los paquetes de los clientes que le pertenecen. 2. Encuentra como máximo NMax clientes que tengan un PD[LPXP RXW RI 0 &OLHQWV LQ LWV GRPDLQ 3. Almacene una copia de los paquetes de esos clientes NMax en la base de datos DB1. Envía estos paquetes NMax a otros M-CSs (en Unicast o Multicast, dependiendo de la configuración). 5. De igual manera, recibir paquetes de todos los demás M-CSs y almacenarlos en la base de datos DB2. 6. Ahora compara los paquetes en DB1 y DB2 en WKH EDVLV RI DQG VHOHFW D PD[LPXP RI NMax entre ellos (para formar el conjunto F) que deberían ser reproducidos en cada Cliente. 7. Enviar los paquetes NMax en el conjunto F a los Clientes en su dominio. 8. Mezcla estos paquetes de audio NMax en el conjunto F después de linearizarlos y envíalos a Clientes sin capacidad en el dominio. Algoritmo 1. Algoritmo de selección El mecanismo propuesto aquí también se muestra en la Fig. 6, donde tiene lugar una única conferencia entre tres dominios. Los clientes sombreados son los seleccionados en sus dominios locales; sus flujos de audio serán enviados a otros CSs. 7. PROBLEMAS DE DESPLIEGUE Ahora analizamos los problemas de despliegue asociados con la gestión de conferencias. ¿Cómo deben organizarse los dominios para maximizar el número de participantes que pueden unirse? Para abordar esto, definimos algunos parámetros útiles.  Sea d el número de dominios diferentes en los que hay clientes activos en una conferencia dada.  Sea Mi el número de clientes activos presentes en el dominio i (di ≤≤1) en una conferencia dada. El número total de clientes activos en la conferencia es por lo tanto ∑= = d i iMM 1. Sea C el número máximo de flujos de audio que un Servidor de Conferencias puede manejar en un tiempo de paquete, también llamado capacidad. C se establece de acuerdo con la potencia de procesamiento del CS más débil en la conferencia, pero como no se puede asumir que lo conocemos de antemano, se puede establecer de acuerdo con algún requisito mínimo del sistema que una máquina debe cumplir para participar en una conferencia. Deje que NMax sea el número de flujos de salida que un CS debe enviar a otros CS en dominios remotos (ver sección 6.1). Estableceremos NMax = 3 (=|F|), según [15]. El problema de optimización consiste en encontrar el valor de d que maximiza el número total de clientes Mi atendidos por un CS en un dominio con capacidad C. Primero consideramos el caso en el que la capacidad no es excedida (el CS existente no está sobrecargado), y luego procedemos al caso en el que es necesario crear más CS cuando un CS único está sobrecargado. Suponemos que los clientes están distribuidos de manera equitativa entre los dominios, ya que no tenemos información para asumir una distribución a priori de los clientes. Podemos especificar únicamente un límite superior en el número de clientes aceptables, dado el número de dominios activos d. 7.1 Conferencias con solo un nivel de CSs En esta subsección, consideramos que tenemos solo un CS, es decir, un único M-CS en cada dominio. Por lo tanto, no se puede sobrecargar. Consideramos que el sistema funciona tal como se describe en la sección 6.1: Los clientes envían sus paquetes de audio a su CS local, que selecciona NMax flujos antes de enviarlos a otros CS. De manera paralela, también recibe NMax transmisiones para cada otro CS antes de tomar una decisión sobre cuáles de las NMax transmisiones serán seleccionadas, enviadas y reproducidas en cada cliente individual. Para la estabilidad del sistema, cualquier servidor de conferencias debería ser capaz de manejar a sus clientes locales además de los paquetes de audio de otros dominios. Claramente entonces, la siguiente desigualdad debe cumplirse para todo dominio: )1( −⋅+≥ dN d M C Max (5) El caso límite de (5) (tomando la igualdad) toma la forma 2 )( dNdNCM MaxMax ⋅−⋅+= (6) Para optimizar d con respecto a M, establecemos 0)(2 =+−⋅⋅= ∂ ∂ MaxMax NCdN d M (7) obteniendo     ⋅ + = Max Max N NC d 2 (8) ([ ]* = Redondeando al entero más cercano) y por lo tanto, M de (6). Tabla 1. Valores de d y M calculados para algunos valores de C con NMax = 3. En la Tabla 1, se presentan los valores de d y M que fueron calculados utilizando (8) y (6) con NMax = 3. Vemos que los valores de d y M, al depender de C, se basan en el CS más débil. Vemos que hay un equilibrio entre M y d. Podríamos admitir más dominios en la conferencia, pero a costa de restringir el número total de clientes M en la conferencia. Durante la implementación y prueba de los Servidores de Conferencia en un Pentium III 1.4 GHz con Windows NT, pudimos establecer C=300. Pero con la llegada de computadoras más rápidas (> 3 GHz), uno puede fácilmente establecer C a valores más altos y determinar d y M en consecuencia. La Fig. 4 muestra un mapa de contorno y la Fig. 5, una malla 3D que muestra soluciones optimizadas para CSs de diferentes capacidades. Estos nos llevan a maximizar el número de dominios, y por lo tanto, a maximizar el número total de clientes basado en la capacidad de varios CSs. En la Fig. 4, las curvas individuales representan el número total de clientes objetivo, y seleccionamos un valor más bajo de d, para la capacidad C, para el objetivo M con el fin de reducir el tráfico en la WAN. La Fig. 5 representa una perspectiva diferente de los mismos datos en 3D. Fig. 4. 

Fig. 4. Diagrama de contorno de la capacidad versus el número óptimo de dominios para varios tamaños de conferencias 7.2 Conferencias con Dos Niveles de CSs. Ahora considerando el caso en el que el número de clientes en un dominio particular es demasiado grande, es decir, d M Mi ≥ (9), se debe evitar la denegación de servicio para nuevos clientes debido a la sobrecarga del Servidor de Conferencias. Este problema se puede resolver introduciendo un segundo nivel de CSs dentro del dominio dado, como se muestra en la Figura 6. El M-CS existente crea un CS esclavo (S-CS) que puede manejar hasta C usuarios finales y al que transfiere todos sus clientes activos. Aquí, el sistema funciona de manera diferente como se describe en la sección 6.1: Los clientes envían sus paquetes de audio a su S-CS local, que selecciona NMax flujos, antes de enviarlos a un M-CS local, que procederá de la misma manera, antes de enviar NMax flujos a los otros dominios. Cada S-CS recién creado debe ejecutarse en una máquina separada. El M-CS tiene que crear más S-CSs si el número de clientes activos supera C durante el transcurso de la conferencia después de la transferencia. Con este mecanismo, el M-CS podrá crear un máximo de     −⋅− = Max Max N dNC U )1( S-CSs, (10) ya que debe manejar 3 (= NMax) paquetes para cada S-CS local y 3 (= NMax) paquetes de cada otro dominio remoto. Podemos entonces calcular el número máximo teórico de clientes activos CUMi ⋅= en cada dominio, así como M, para toda la conferencia como CUdM ⋅⋅= . Fig. 5. Gráfico 3D de Capacidad versus Número óptimo de dominios para varios tamaños de conferencia. Por supuesto, se podría crear un tercer nivel en la jerarquía, lo que daría la posibilidad de alojar aún más clientes. Esto puede ser innecesario ya que el número de posibles clientes es lo suficientemente grande con dos niveles. 8. DISCUSIÓN DE RENDIMIENTO Ahora analizamos el rendimiento del algoritmo presentado en la subsección 6.3, es decir, el que se encarga del intercambio de paquetes de audio entre los diferentes dominios. Ten en cuenta que los paquetes que están en tránsito dentro de la LAN aprovechan la mayor capacidad (generalmente junto con capacidades de multidifusión) y por lo tanto no requieren un análisis de rendimiento. Por lo tanto, debemos examinar solo los paquetes RTP a través de la WAN, es decir, entre los M-CS participantes. Dado que cada M-CS de un dominio solo enviará NMax de los d paquetes M a los otros CS (MaxN d M >>), el ancho de banda utilizado por la aplicación en una WAN está limitado por la siguiente expresión. El número total de paquetes de audio que transitan por la WAN para cada intervalo de tiempo es ∑ ∑= ≠=        d i d ijj MaxN 1 ,1, lo cual es cuadrático en el número de dominios (es decir, O(d2)). Sin embargo, es independiente del número total de clientes activos. Esto no habría sido el caso si todos los paquetes se hubieran enviado por la red en cada intervalo de tiempo. El ahorro es tremendo. Sin embargo, se podría argumentar que enviar tres paquetes hacia y desde todos los dominios es un desperdicio de recursos, ya que la mayoría de estos flujos no serán seleccionados. Si solo hay un cliente activo, seleccionar un subconjunto de clientes en ese dominio es innecesario. Los algoritmos pesimistas y optimistas presentados en la secuela tienen como objetivo reducir aún más el tráfico aprovechando la naturaleza lenta y variable de la LN. 8.1 Algoritmo pesimista Consideremos un escenario en el que el LN más bajo (llamado LNt) de los tres flujos seleccionados globalmente (conjunto F de la Sección 6.1) excede el LN del flujo más dominante de un dominio. Evidentemente, las posibilidades de que los dos próximos flujos dominantes de ese dominio sean seleccionados para F en el próximo período de paquetes son menores. Aquí enviamos este flujo más dominante y retenemos los otros dos. Puede haber un error en la selección única en todos los dominios por un solo período de paquete. Como LN varía lentamente, el error se corregiría automáticamente en un período (ranura) de paquete posterior. En este algoritmo, hay al menos un flujo en cada período. El tráfico de red neto en un período de paquetes en el mejor caso es )1( −⋅ dd, es decir, )( 2 dO utilizando unicast, en lugar de MaxNdd ⋅−⋅ )1(. Se puede ahorrar un ancho de banda considerablemente valioso utilizando esta heurística. La complejidad del tráfico resultante se reduce de O(d2) a O(d) en redes habilitadas para multidifusión. Inicializar LNt = 0 en un M-CS/S-CS A. En el primer intervalo de tiempo (tiempo de paquete), cada CS envía las primeras NMax secuencias (basadas en su LN) a todos los demás CSs. En cada M-CS/S-CS y para cada tiempo de paquete: B. Encuentra el valor del LN más bajo de los flujos NMax seleccionados globalmente (conjunto F) del intervalo de tiempo anterior. Establece LNt con este valor. C. En cada dominio de CS, selecciona los NMax flujos locales que tengan el valor máximo de LN (conjunto ToOtherCSs). D. Seleccionar los flujos que tengan LN > LNt. Si hay >= NMax flujos con LN > LNt, entonces enviar los mejores NMax a otros CSs. EN OTRO CASO, si hay (NMax-1) flujos con LN>LNt, enviar los mejores (NMax-1) más el que esté por debajo de LNt (es decir, los mejores NMax) a otros CSs. EN OTRO CASO, si hay (NMax-2) flujos con LN>LNt, entonces enviar los mejores (NMax-2) más el que esté por debajo de LNt (es decir, los mejores (NMax-1)) a otros CSs. ... EN OTRO CASO, si NO hay flujos con LN>LNt, entonces enviar el mejor flujo a otros CSs. Los paquetes enviados en el paso D forman DB1. Los paquetes recibidos de otros CSs forman DB2. F. Para este intervalo de tiempo, encuentra flujos globales NMax basados en LN de DB1 y DB2 (conjunto F) G. Envía el conjunto F a los clientes en su dominio. Actualiza LNt para el próximo período. Algoritmo 2. Algoritmo pesimista para reducir el número de paquetes enviados por Internet. Fig. 6. 

Fig. 6. Ejemplo de una jerarquía de 2 niveles de Servidores de Conferencias; los Clientes sombreados son los seleccionados por el M-CS y serán enviados a otros CSs de dominios. En este algoritmo, el ahorro en tráfico se logra a expensas de relajar la condición de formación del conjunto F globalmente único. Sin embargo, las discrepancias en los flujos seleccionados en diferentes dominios permanecen por un corto período de tiempo dependiendo del retraso en el transporte entre dos dominios. Incluso para un retraso total de 400 ms, con solo 10 ranuras de tiempo de paquete, se pierde la unicidad. Esta duración en una conversación interactiva en tiempo real no es perceptible por el oyente. En el caso de que haya una broma y todos se rían, entonces habría un aumento repentino en el número de paquetes y estaría limitado por MaxN)d(O 2 durante un corto período. 8.2 Algoritmo Optimista El tráfico puede reducirse aún más. El esquema en el siguiente algoritmo (Algoritmo 3) retiene todos los flujos que tienen un valor de LN menor que el mínimo de los tres en el conjunto F. Podemos encontrar los tres flujos correctos y únicos después de unos cuantos intervalos de tiempo, dependiendo del retraso de transporte entre los dominios. Dado que el período del paquete es del orden de 40 ms, el error en la selección es imperceptible. El número de flujos en la red en este caso siempre está restringido a NMax (=3). Incluso sin Detección de Actividad de Voz (VAD), en el mejor de los casos no habrá más de tres flujos en la red, por lo tanto, el tráfico total es constante. Una repentina oleada de tráfico, como se describe en la sección 8.1, es un caso particular. Estas ventajas se deben a la explotación de las características de LN. Inicializar LNt = 0 en un M-CS/S-CS A. En el primer intervalo de tiempo (tiempo de paquete), cada CS envía las primeras NMax secuencias (basadas en su LN) a todos los demás CS. En cada M-CS/S-CS y para cada tiempo de paquete: B. Encuentra el valor del LN más bajo de los flujos seleccionados globalmente de NMax (conjunto F) del intervalo de tiempo anterior. Establece LNt con este valor. C. En cada dominio de CS, selecciona los NMax flujos locales que tengan el valor máximo de LN (conjunto ToOtherCSs). D. Selecciona los flujos que tengan LN > LNt SI hay >= NMax flujos con LN > LNt, entonces envía los mejores NMax a otros CSs. EN OTRO CASO, si hay (NMax-1) flujos con LN>LNt, entonces enviar los primeros (NMax-1) y ver E. EN OTRO CASO, si hay (NMax-2) flujos con LN>LNt, entonces enviar los primeros (NMax-2) y ver E. ... EN OTRO CASO, si NO hay flujos con LN>LNt, entonces no enviar ningún flujo. E. Excepciones: SI el flujo que estaba en F en el último intervalo pertenece a este CS, entonces selecciona y envía ese flujo incluso si su LN es ahora < LNt. (Nota: esto ocurre solo en ese CS que tenía el flujo que fue el último de los tres en el período de paquetes anterior). Los paquetes enviados en los pasos D y E forman DB1. Los paquetes recibidos de otros CSs forman DB2. Para este intervalo de tiempo, encuentra los flujos globales NMax basados en LN de DB1 y DB2 (conjunto F). H. Envíe el conjunto F a los clientes en su dominio. Actualiza LNt para el próximo período. Algoritmo 3. Algoritmo optimista para reducir el número de paquetes enviados a través de Internet. Además, cuando se utiliza VAD [13], se reduciría aún más el tráfico al enviar solo la parte del encabezado del paquete RTP y no todo el paquete, con el fin de mantener actualizada la LN en todo momento. El tráfico aquí en este caso es O(NMax) para multicast y O(d) para unicast. Vemos que los algoritmos anteriores ahorran ancho de banda y cálculos en cada CS, y conducen a una arquitectura escalable con múltiples CS principalmente porque los clientes están agrupados en dominios. El ancho de banda necesario no depende del número total de clientes activos. Como el CS siempre elige a los tres mejores clientes de entre todos los clientes asignados en el dominio, la adición de nuevos clientes a la conferencia existente no causará ningún problema de escalabilidad. 8.3 Disponibilidad de Multidifusión En la arquitectura propuesta, no se hizo ninguna suposición sobre la disponibilidad de soporte de multidifusión de la red. El tráfico se reducirá aún más si la multidifusión está disponible a través de WAN. Es sencillo demostrar que el orden del tráfico tiende a ser O(d) en lugar de O(d2). Esta es una aproximación ya que el ahorro en la multidifusión también depende de la topología. El análisis se realizó para el caso en el que la multidifusión no está disponible (una suposición realista en el Internet de hoy en día). La ventaja de esta configuración es que podemos usarla incluso si la multidifusión está parcialmente disponible. Podemos instruir a los CSs durante la fase de configuración para enviar paquetes unicast a aquellos CSs que no pueden recibir paquetes multicast, mientras que los CSs en enrutadores habilitados para multicast pueden intercambiar paquetes en una dirección multicast. Las estructuras de datos y objetos de conferencia dentro de una CS se encuentran en [14]. Fig. 7. 

Fig. 7. Interfaz de usuario para establecer el peso de las corrientes de audio NMax (establecer la barra de auto a cero evita el eco). Mejora de calidad 8.4 La mejora observada en la calidad percibida del servicio de conferencias se debe a: (1) limitar el número de oradores concurrentes a un número bajo, como tres. Generalmente, en una conferencia, si hablan más de dos participantes se pierde la inteligibilidad. El análisis conversacional demuestra que en tal caso habría un mecanismo de reparación [15]. (2) Retraso: La transmisión de audio entre dos clientes pasará como máximo por dos servidores centrales, reduciendo así el retraso de extremo a extremo. Para una conferencia grande puede haber tres CSs, sin embargo, un salto está dentro del dominio incurriendo en un retraso insignificante. (3) Dado que las transmisiones se mezclan solo en los clientes, puede haber una mezcla personalizada de las transmisiones. La sintonización individual de la mezcla con pesos preserva el espacialismo. La Fig. 7 muestra la interfaz de usuario para lo mismo. El eco al seleccionar la auto-transmisión se puede evitar reduciendo el peso. Sin embargo, la retroalimentación ayuda a asegurar al hablante de que está siendo escuchado por todos. CONCLUSIÓN En este artículo, hemos presentado una discusión sobre un entorno de conferencias virtuales solo de voz. Hemos argumentado que la naturaleza distribuida de la implementación aquí la hace escalable. La interactividad se logra adaptando un esquema reciente de selección de flujo basado en el Número de Sonoridad. Además, incorporamos un resultado de un trabajo más reciente [15] donde se ha demostrado la suficiencia de tres hablantes simultáneos. Por lo tanto, hay una utilización significativamente efectiva del ancho de banda. Un flujo mixto se reproduce en cada cliente; cada cliente puede elegir tener una mezcla personalizada ya que la mezcla se realiza en el terminal local de cada cliente. Estos permiten que el discurso improvisado en una videoconferencia virtual a través de VoIP sea una realidad, como en una conferencia presencial real. La compatibilidad está asegurada gracias al uso de SIP, el protocolo de señalización más buscado. Para garantizar un rendimiento satisfactorio, no exigimos la disponibilidad de multidifusión, pero la utilizamos si está disponible. El tráfico en la WAN (Internet) está limitado por arriba por el cuadrado del número de dominios, --además se reduce aún más mediante el uso de algoritmos heurísticos-- lo cual está muy por debajo del número total de clientes en la conferencia. Esto se debe al uso de un Servidor de Conferencias local para cada dominio. Las técnicas de VAD ayudan a reducir aún más el tráfico. El uso del estándar SIP para la señalización hace que esta solución sea altamente interoperable. Hemos implementado una aplicación de CS en una red de campus. Creemos que esta nueva generación de entornos de conferencias virtuales ganará más popularidad en el futuro, ya que su facilidad de implementación está garantizada gracias a las tecnologías fácilmente disponibles y los marcos escalables. REFERENCIAS [1] L. Aguilar et al., Arquitectura para un Sistema de Teleconferencia Multimedia, en Actas de ACM SIGCOMM, Ago 1986, pp. 126-136. [2] Carsten Bormann, Joerg Ott et al., Protocolo de Control de Conferencias Simple, Borrador de Internet, Dic. 1996. [3] M. Decina y V. Trecordi, Voz sobre Protocolo de Internet y Comercio Electrónico Asistido por Humanos, IEEE Comm. Revista, septiembre de 1999, pp. 64-67. [4] Eckehard Doerry, Una comparación empírica de la interacción copresente y mediada tecnológicamente basada en la ruptura comunicativa, Tesis de doctorado, Escuela de Graduados de la Universidad de Oregón, 1995. [5] H. P. Dommel y J.J. Garcia-Luna-Aceves, Control de piso para conferencias y colaboración multimedia, J. Sistemas Multimedia, Vol. 5, No. 1, enero de 1997, pp. 23-38. [6] Amitava Dutta-Roy, Reuniones virtuales con videoconferencias de escritorio, IEEE Spectrum, julio de 1998, pp. 47-56. [7] M. Handley y V. Jacobson, SDP: Protocolo de Descripción de Sesiones, RFC 2327, IETF, abril de 1998. [8] M. Handley, J. Crowcroft et al., Conferencias muy grandes en Internet: la arquitectura de conferencias multimedia en Internet, Revista de Redes de Computadoras, vol. 31, No. 3, febrero de 1999, pp. 191-204. [9] Rec. ITU-T. H.323, Sistemas de Comunicaciones Multimedia basados en Paquetes, vol. 2, 1998. [10] P. Koskelainen, H. Schulzrinne y X. Wu, Un Marco de Control de Conferencias basado en SIP, NOSSDAV02, mayo de 2002, pp. 53-61. [11] R Venkatesha Prasad et al., Protocolo de Control para Soporte de Conferencias de Audio VoIP, Conferencia Internacional sobre Tecnología de Comunicación Avanzada, Mu-Ju, Corea del Sur, febrero de 2001, pp. 419-424. [12] R Venkatesha Prasad et al., Adición y Eliminación Automáticas de Clientes en Conferencias VoIP, 6º Simposio IEEE sobre Computadoras y Comunicaciones, julio de 2001, Hammamet, Túnez, pp. 386-390. [13] R Venkatesha Prasad, H S Jamadagni, Abjijeet, et al Comparación de Algoritmos de Detección de Actividad de Voz, 7º Simposio IEEE sobre Computadoras y Comunicaciones. Julio de 2002, Sicilia, Italia, pp. 530-535. [14] R. Venkatesha Prasad, Richard Hurni, H S Jamadagni, Una Conferencia VoIP Distribuida Escalable utilizando SIP, Actas del 8º Simposio de Computadoras y Comunicaciones de IEEE, Antalya, Turquía, junio de 2003. [15] R Venkatesha Prasad, H S Jamadagni y H N Shankar, Sobre el Problema de Especificar el Número de Pisos en una Conferencia Solo de Voz, Por aparecer en IEEE ITRE 2003. [16] R. Venkatesha Prasad, Richard Hurni, H S Jamadagni, Una Propuesta para Conferencias Distribuidas en SIP utilizando Servidores de Conferencias, Por aparecer en las Actas de MMNS 2003, Belfast, Reino Unido, septiembre de 2003. [17] R. Venkatesha Prasad, H.S. Jamadagni, J. Kuri, R.S. Varchas, un soporte de conferencias VoIP distribuido que utiliza el número de sonoridad, Tech. Rep. TR-CEDT-TE-03-01 [18] M. Radenkovic et al, Servicio de audio escalable y adaptable para apoyar el trabajo colaborativo y el entretenimiento a través de Internet, SSGRR 2002, LAquila, Italia, enero de 2002. [19] M. Radenkovic, C. Greenhalgh, S. Benford, Problemas de implementación para el soporte de audio multiusuario en CVEs, ACM VRST 2002, noviembre de 2002, pp. 179-185. [20] Srinivas Ramanathan, P. Venkata Rangan, Harrick M. Vin, Diseñando arquitecturas de comunicación para la colaboración multimedia interorganizacional, Journal of Organizational Computing, 2 (3&4), pp.277-302, 1992. [21] A. B. Roach, Notificación de Eventos Específicos del Protocolo de Inicio de Sesión (SIP), RFC 3265, IETF, junio de 2002. [22] J. Rosenberg, H. Schulzrinne et al., SIP: Protocolo de Inicio de Sesión, RFC 3261, IETF, junio de 2002. [23] J. Rosenberg, H. Schulzrinne, Modelos para Conferencias de Múltiples Partes en SIP, Borrador de Internet, IETF, julio de 2002. [24] H. Schulzrinne et al., RTP: un protocolo de transporte para aplicaciones en tiempo real, RFC 1889, IETF, enero de 1996. [25] Lisa R. Silverman, Llegada a la Madurez: Soluciones de Conferencias que Reducen Costos Corporativos, Documento Técnico, www.imcca.org/wpcomingofage.asp [26] Kundan Singh, Gautam Nair y Henning Schulzrinne, Conferencias Centralizadas utilizando SIP, Actas del 2do Taller de IP-Telefonía (IPTel), abril de 2001. [27] D. Thaler, M. Handley y D. Estrin, Arquitectura de Asignación de Direcciones de Multidifusión en Internet, RFC 2908, IETF, septiembre de 2000.