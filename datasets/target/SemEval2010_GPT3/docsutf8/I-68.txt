Sobre técnicas oportunísticas para resolver Procesos de Decisión de Markov Descentralizados con Restricciones Temporales Janusz Marecki y Milind Tambe Departamento de Ciencias de la Computación Universidad del Sur de California 941 W 37th Place, Los Ángeles, CA 90089 {marecki, tambe}@usc.edu RESUMEN Los Procesos de Decisión de Markov Descentralizados (DEC-MDPs) son un modelo popular de problemas de coordinación de agentes en dominios con incertidumbre y restricciones de tiempo, pero muy difíciles de resolver. En este artículo, mejoramos un método de solución heurística de vanguardia para DEC-MDPs, llamado OC-DEC-MDP, que recientemente se ha demostrado que escala a DEC-MDPs más grandes. Nuestro método de solución heurística, llamado Propagación de Función de Valor (VFP), combina dos mejoras ortogonales de OC-DEC-MDP. Primero, acelera OC-DECMDP en un orden de magnitud al mantener y manipular una función de valor para cada estado (como función del tiempo) en lugar de un valor separado para cada par de estado e intervalo de tiempo. Además, logra una mejor calidad de solución que OC-DEC-MDP porque, como muestran nuestros resultados analíticos, no sobreestima la recompensa total esperada como OC-DEC-MDP. Probamos ambas mejoras de forma independiente en un dominio de gestión de crisis, así como en otros tipos de dominios. Nuestros resultados experimentales demuestran una aceleración significativa de VFP sobre OC-DEC-MDP, así como una mayor calidad de solución en una variedad de situaciones. Categorías y Descriptores de Asignaturas I.2.11 [Inteligencia Artificial]: Inteligencia Artificial DistribuidaSistemas Multiagente Términos Generales Algoritmos, Teoría 1. INTRODUCCIÓN El desarrollo de algoritmos para la coordinación efectiva de múltiples agentes actuando como un equipo en dominios inciertos y críticos en tiempo se ha convertido recientemente en un campo de investigación muy activo con aplicaciones potenciales que van desde la coordinación de agentes durante una misión de rescate de rehenes [11] hasta la coordinación de Rovers de Exploración de Marte Autónomos [2]. Debido a las características inciertas y dinámicas de dichos dominios, los modelos de teoría de decisiones han recibido mucha atención en los últimos años, principalmente gracias a su expresividad y la capacidad de razonar sobre la utilidad de las acciones a lo largo del tiempo. Los modelos clave de teoría de decisiones que se han vuelto populares en la literatura incluyen los Procesos de Decisión de Markov Descentralizados (DECMDPs) y los Procesos de Decisión de Markov Parcialmente Observables Descentralizados (DEC-POMDPs). Desafortunadamente, resolver estos modelos de manera óptima ha demostrado ser NEXP-completo [3], por lo tanto, subclases más manejables de estos modelos han sido objeto de una investigación intensiva. En particular, el POMDP Distribuido en Red [13], que asume que no todos los agentes interactúan entre sí, el DEC-MDP Independiente de Transición [2], que asume que la función de transición es descomponible en funciones de transición locales, o el DEC-MDP con Interacciones Dirigidas por Eventos [1], que asume que las interacciones entre agentes ocurren en puntos de tiempo fijos, constituyen buenos ejemplos de tales subclases. Aunque los algoritmos globalmente óptimos para estas subclases han demostrado resultados prometedores, los dominios en los que estos algoritmos se ejecutan siguen siendo pequeños y los horizontes temporales están limitados a solo unos pocos intervalos de tiempo. Para remediar eso, se han propuesto algoritmos óptimos locales [12] [4] [5]. En particular, el Costo de Oportunidad DEC-MDP [4] [5], referido como OC-DEC-MDP, es especialmente notable, ya que se ha demostrado que se escala a dominios con cientos de tareas y horizontes temporales de dos dígitos. Además, OC-DEC-MDP es único en su capacidad para abordar tanto las restricciones temporales como las duraciones de ejecución del método inciertas, lo cual es un factor importante para los dominios del mundo real. OC-DEC-MDP es capaz de escalar a dominios tan grandes principalmente porque en lugar de buscar la solución óptima global, lleva a cabo una serie de iteraciones de políticas; en cada iteración realiza una iteración de valores que reutiliza los datos calculados durante la iteración de políticas anterior. Sin embargo, OC-DEC-MDP sigue siendo lento, especialmente a medida que el horizonte temporal y el número de métodos se acercan a valores grandes. La razón de los tiempos de ejecución prolongados de OC-DEC-MDP para tales dominios es una consecuencia de su enorme espacio de estados, es decir, OC-DEC-MDP introduce un estado separado para cada par posible de método e intervalo de ejecución del método. Además, OC-DEC-MDP sobreestima la recompensa que un método espera recibir al permitir la ejecución de métodos futuros. Esta recompensa, también conocida como el costo de oportunidad, desempeña un papel crucial en la toma de decisiones del agente, y como mostraremos más adelante, su sobreestimación conduce a políticas altamente subóptimas. En este contexto, presentamos VFP (= Propagación de Función de Valor), una técnica de solución eficiente para el modelo DEC-MDP con restricciones temporales y duraciones de ejecución de métodos inciertas, que se basa en el éxito de OC-DEC-MDP. VFP introduce nuestras dos ideas ortogonales: Primero, de manera similar a [7] [9] y [10], mantenemos 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS y manipulamos una función de valor a lo largo del tiempo para cada método en lugar de un valor separado para cada par de método e intervalo de tiempo. Dicha representación nos permite agrupar los puntos temporales en los que la función de valor cambia a la misma velocidad (= su pendiente es constante), lo que resulta en una propagación rápida y funcional de las funciones de valor. Segundo, demostramos (tanto teóricamente como empíricamente) que OC-DEC-MDP sobreestima el costo de oportunidad, y para remediarlo, introducimos un conjunto de heurísticas que corrigen el problema de sobreestimación del costo de oportunidad. Este documento está organizado de la siguiente manera: En la sección 2 motivamos esta investigación presentando un dominio de rescate civil donde un equipo de bomberos debe coordinarse para rescatar a civiles atrapados en un edificio en llamas. En la sección 3 proporcionamos una descripción detallada de nuestro modelo DEC-MDP con Restricciones Temporales y en la sección 4 discutimos cómo se podrían resolver los problemas codificados en nuestro modelo utilizando solucionadores óptimos a nivel global y local. Las secciones 5 y 6 discuten las dos mejoras ortogonales al algoritmo OC-DEC-MDP de vanguardia que implementa nuestro algoritmo VFP. Finalmente, en la sección 7 demostramos empíricamente el impacto de nuestras dos mejoras ortogonales, es decir, mostramos que: (i) Las nuevas heurísticas corrigen el problema de sobreestimación del costo de oportunidad, lo que conduce a políticas de mayor calidad, y (ii) Al permitir un intercambio sistemático de calidad de solución por tiempo, el algoritmo VFP se ejecuta mucho más rápido que el algoritmo OC-DEC-MDP 2. EJEMPLO MOTIVADOR Estamos interesados en dominios donde múltiples agentes deben coordinar sus planes a lo largo del tiempo, a pesar de la incertidumbre en la duración de la ejecución del plan y el resultado. Un ejemplo de dominio es un desastre a gran escala, como un incendio en un rascacielos. Debido a que puede haber cientos de civiles dispersos en numerosos pisos, se deben enviar múltiples equipos de rescate, y los canales de comunicación por radio pueden saturarse rápidamente y volverse inútiles. En particular, se deben enviar pequeños equipos de bomberos en misiones separadas para rescatar a los civiles atrapados en docenas de ubicaciones diferentes. Imagina un pequeño plan de misión de la Figura (1), donde se ha asignado la tarea a tres brigadas de bomberos de rescatar a los civiles atrapados en el sitio B, accesible desde el sitio A (por ejemplo, una oficina accesible desde el piso). Los procedimientos generales de lucha contra incendios implican tanto: (i) apagar las llamas, como (ii) ventilar el lugar para permitir que los gases tóxicos de alta temperatura escapen, con la restricción de que la ventilación no debe realizarse demasiado rápido para evitar que el fuego se propague. El equipo estima que los civiles tienen 20 minutos antes de que el fuego en el sitio B se vuelva insoportable, y que el fuego en el sitio A debe ser apagado para abrir el acceso al sitio B. Como ha ocurrido en el pasado en desastres a gran escala, la comunicación a menudo se interrumpe; por lo tanto, asumimos en este ámbito que no hay comunicación entre los cuerpos de bomberos 1, 2 y 3 (denominados como CB1, CB2 y CB3). Por lo tanto, FB2 no sabe si ya es seguro ventilar el sitio A, FB1 no sabe si ya es seguro ingresar al sitio A y comenzar a combatir el incendio en el sitio B, etc. Asignamos una recompensa de 50 por evacuar a los civiles del sitio B, y una recompensa menor de 20 por la exitosa ventilación del sitio A, ya que los propios civiles podrían lograr escapar del sitio B. Se puede ver claramente el dilema al que se enfrenta FB2: solo puede estimar las duraciones de los métodos de lucha contra incendios en el sitio A que serán ejecutados por FB1 y FB3, y al mismo tiempo FB2 sabe que el tiempo se está agotando para los civiles. Si FB2 ventila el sitio A demasiado pronto, el fuego se propagará fuera de control, mientras que si FB2 espera con el método de ventilación demasiado tiempo, el fuego en el sitio B se volverá insoportable para los civiles. En general, los agentes tienen que realizar una secuencia de tales 1 Explicamos la notación EST y LET en la sección 3 Figura 1: Dominio de rescate civil y un plan de misión. Las flechas punteadas representan restricciones de precedencia implícitas dentro de un agente. Decisiones difíciles; en particular, el proceso de decisión de FB2 implica primero elegir cuándo comenzar a ventilar el sitio A, y luego (dependiendo del tiempo que tomó ventilar el sitio A), elegir cuándo comenzar a evacuar a los civiles del sitio B. Tal secuencia de decisiones constituye la política de un agente, y debe encontrarse rápidamente porque el tiempo se está agotando. 3. DESCRIPCIÓN DEL MODELO Codificamos nuestros problemas de decisión en un modelo al que nos referimos como MDP Descentralizado con Restricciones Temporales 2. Cada instancia de nuestros problemas de decisión puede ser descrita como una tupla M, A, C, P, R donde M = {mi} |M| i=1 es el conjunto de métodos, y A = {Ak} |A| k=1 es el conjunto de agentes. Los agentes no pueden comunicarse durante la ejecución de la misión. Cada agente Ak está asignado a un conjunto Mk de métodos, de tal manera que S|A| k=1 Mk = M y ∀i,j;i=jMi ∩ Mj = ø. Además, cada método del agente Ak solo puede ejecutarse una vez, y el agente Ak solo puede ejecutar un método a la vez. Los tiempos de ejecución del método son inciertos y P = {pi} |M| i=1 es el conjunto de distribuciones de las duraciones de ejecución del método. En particular, pi(t) es la probabilidad de que la ejecución del método mi consuma tiempo t. C es un conjunto de restricciones temporales en el sistema. Los métodos están parcialmente ordenados y cada método tiene ventanas de tiempo fijas dentro de las cuales puede ser ejecutado, es decir, C = C≺ ∪ C[ ] donde C≺ es el conjunto de restricciones de predecesores y C[ ] es el conjunto de restricciones de ventanas de tiempo. Para c ∈ C≺, c = mi, mj significa que el método mi precede al método mj, es decir, la ejecución de mj no puede comenzar antes de que mi termine. En particular, para un agente Ak, todos sus métodos forman una cadena vinculada por restricciones de predecesor. Suponemos que el grafo G = M, C≺ es acíclico, no tiene nodos desconectados (el problema no puede descomponerse en subproblemas independientes) y sus vértices fuente y sumidero identifican los métodos fuente y sumidero del sistema. Para c ∈ C[ ], c = mi, EST, LET significa que la ejecución de mi solo puede comenzar después del Tiempo de Inicio Más Temprano EST y debe finalizar antes del Tiempo de Finalización Más Tardío LET; permitimos que los métodos tengan múltiples restricciones de ventana de tiempo disjuntas. Aunque las distribuciones pi pueden extenderse a horizontes temporales infinitos, dadas las restricciones de la ventana de tiempo, el horizonte de planificación Δ = max m,τ,τ ∈C[ ] τ se considera como la fecha límite de la misión. Finalmente, R = {ri} |M| i=1 es el conjunto de recompensas no negativas, es decir, ri se obtiene al ejecutar exitosamente mi. Dado que no se permite la comunicación, un agente solo puede estimar las probabilidades de que sus métodos ya hayan sido habilitados. También se podría utilizar el marco OC-DEC-MDP, que modela tanto las restricciones de tiempo como de recursos. La Sexta Conferencia Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 831 por otros agentes. Por lo tanto, si mj ∈ Mk es el próximo método a ser ejecutado por el agente Ak y el tiempo actual es t ∈ [0, Δ], el agente tiene que tomar una decisión de si Ejecutar el método mj (denotado como E), o Esperar (denotado como W). En caso de que el agente Ak decida esperar, permanece inactivo durante un tiempo pequeño arbitrario y reanuda la operación en el mismo lugar (= a punto de ejecutar el método mj) en el tiempo t + . En caso de que el agente Ak decida ejecutar el siguiente método, dos resultados son posibles: Éxito: El agente Ak recibe la recompensa rj y pasa al siguiente método (si existe) siempre y cuando se cumplan las siguientes condiciones: (i) Todos los métodos {mi| mi, mj ∈ C≺} que habilitan directamente el método mj ya han sido completados, (ii) La ejecución del método mj comenzó en algún momento dentro de la ventana de tiempo del método mj, es decir, ∃ mj ,τ,τ ∈C[ ] tal que t ∈ [τ, τ ], y (iii) La ejecución del método mj finalizó dentro de la misma ventana de tiempo, es decir, el agente Ak completó el método mj en un tiempo menor o igual a τ − t. Fracaso: Si alguna de las condiciones mencionadas anteriormente no se cumple, el agente Ak detiene su ejecución. Otros agentes pueden continuar con su ejecución, pero los métodos mk ∈ {m| mj, m ∈ C≺} nunca se activarán. La política πk de un agente Ak es una función πk : Mk × [0, Δ] → {W, E}, y πk( m, t ) = a significa que si Ak está en el método m en el tiempo t, elegirá realizar la acción a. Una política conjunta π = [πk] |A| k=1 se considera óptima (denotada como π∗), si maximiza la suma de recompensas esperadas para todos los agentes. 4. TÉCNICAS DE SOLUCIÓN 4.1 Algoritmos óptimos La política conjunta óptima π∗ suele encontrarse utilizando el principio de actualización de Bellman, es decir, para determinar la política óptima para el método mj, se utilizan las políticas óptimas para los métodos mk ∈ {m| mj, m ∈ C≺}. Desafortunadamente, para nuestro modelo, la política óptima para el método mj también depende de las políticas para los métodos mi ∈ {m| m, mj ∈ C≺}. Esta doble dependencia resulta del hecho de que la recompensa esperada por comenzar la ejecución del método mj en el tiempo t también depende de la probabilidad de que el método mj esté habilitado en el tiempo t. En consecuencia, si el tiempo está discretizado, es necesario considerar Δ|M| políticas candidatas para encontrar π∗. Por lo tanto, es poco probable que los algoritmos globalmente óptimos utilizados para resolver problemas del mundo real terminen en un tiempo razonable [11]. La complejidad de nuestro modelo podría reducirse si consideramos su versión más restringida; en particular, si cada método mj se permitiera estar habilitado en puntos de tiempo t ∈ Tj ⊂ [0, Δ], se podría utilizar el Algoritmo de Conjunto de Cobertura (CSA) [1]. Sin embargo, la complejidad de CSA es exponencial doble en el tamaño de Ti, y para nuestros dominios Tj puede almacenar todos los valores que van desde 0 hasta Δ. 4.2 Algoritmos Localmente Óptimos Dada la limitada aplicabilidad de los algoritmos globalmente óptimos para DEC-MDPs con Restricciones Temporales, los algoritmos localmente óptimos parecen más prometedores. Específicamente, el algoritmo OC-DEC-MDP [4] es particularmente significativo, ya que ha demostrado poder escalarse fácilmente a dominios con cientos de métodos. La idea del algoritmo OC-DECMDP es comenzar con la política de tiempo de inicio más temprana π0 (según la cual un agente comenzará a ejecutar el método m tan pronto como m tenga una probabilidad distinta de cero de estar ya habilitado), y luego mejorarla de forma iterativa, hasta que no sea posible realizar más mejoras. En cada iteración, el algoritmo comienza con una política π, que determina de manera única las probabilidades Pi,[τ,τ ] de que el método mi se realice en el intervalo de tiempo [τ, τ ]. Luego realiza dos pasos: Paso 1: Propaga desde los métodos de destino a los métodos de origen los valores Vi,[τ,τ], que representan la utilidad esperada de ejecutar el método mi en el intervalo de tiempo [τ, τ]. Esta propagación utiliza las probabilidades Pi,[τ,τ ] de la iteración del algoritmo anterior. Llamamos a este paso una fase de propagación de valores. Paso 2: Dados los valores Vi,[τ,τ ] del Paso 1, el algoritmo elige los intervalos de ejecución del método más rentables que se almacenan en una nueva política π. Luego propaga las nuevas probabilidades Pi,[τ,τ ] desde los métodos fuente a los métodos sumidero. Llamamos a este paso una fase de propagación de probabilidad. Si la política π no mejora a π, el algoritmo termina. Hay dos deficiencias del algoritmo OC-DEC-MDP que abordamos en este artículo. Primero, cada uno de los estados OC-DEC-MDP es un par mj, [τ, τ], donde [τ, τ] es un intervalo de tiempo en el cual el método mj puede ser ejecutado. Si bien esta representación estatal es beneficiosa, ya que el problema se puede resolver con un algoritmo estándar de iteración de valores, difumina el mapeo intuitivo del tiempo t a la recompensa total esperada por comenzar la ejecución de mj en el tiempo t. En consecuencia, si algún método mi habilita el método mj, y se conocen los valores Vj,[τ,τ ]∀τ,τ ∈[0,Δ], la operación que calcula los valores Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (durante la fase de propagación de valores), se ejecuta en tiempo O(I2), donde I es el número de intervalos de tiempo. Dado que el tiempo de ejecución de todo el algoritmo es proporcional al tiempo de ejecución de esta operación, especialmente para horizontes temporales grandes Δ, el algoritmo OC-DECMDP se ejecuta lentamente. Segundo, si bien OC-DEC-MDP se enfoca en el cálculo preciso de los valores Vj,[τ,τ], no aborda un problema crítico que determina cómo se dividen los valores Vj,[τ,τ] dado que el método mj tiene múltiples métodos habilitadores. Como mostramos más adelante, OC-DEC-MDP divide Vj,[τ,τ ] en partes que pueden sobreestimar Vj,[τ,τ ] al sumarse nuevamente. Como resultado, los métodos que preceden al método mj sobreestiman el valor para habilitar mj, lo cual, como mostraremos más adelante, puede tener consecuencias desastrosas. En las dos secciones siguientes, abordamos ambas deficiencias. 5. La función de propagación de valor (VFP) El esquema general del algoritmo VFP es idéntico al algoritmo OCDEC-MDP, en el sentido de que realiza una serie de iteraciones de mejora de política, cada una de las cuales implica una Fase de Propagación de Valor y Probabilidad. Sin embargo, en lugar de propagar valores separados, VFP mantiene y propaga las funciones completas, por lo tanto nos referimos a estas fases como la fase de propagación de la función de valor y la fase de propagación de la función de probabilidad. Con este fin, para cada método mi ∈ M, definimos tres nuevas funciones: Función de Valor, denotada como vi(t), que mapea el tiempo t ∈ [0, Δ] a la recompensa total esperada por comenzar la ejecución del método mi en el tiempo t. Función de Costo de Oportunidad, denotada como Vi(t), que mapea el tiempo t ∈ [0, Δ] a la recompensa total esperada por comenzar la ejecución del método mi en el tiempo t asumiendo que mi está habilitado. Función de probabilidad, denotada como Pi(t), que mapea el tiempo t ∈ [0, Δ] a la probabilidad de que el método mi se complete antes del tiempo t. Esta representación funcional nos permite leer fácilmente la política actual, es decir, si un agente Ak está en el método mi en el tiempo t, entonces esperará siempre y cuando la función de valor vi(t) sea mayor en el futuro. Formalmente: πk( mi, t ) = j W si ∃t >t tal que vi(t) < vi(t ) E en caso contrario. Ahora desarrollamos una técnica analítica para llevar a cabo las fases de propagación de la función de valor y la función de probabilidad. 3 De manera similar para la fase de propagación de la probabilidad 832 The Sixth Intl. Supongamos que estamos realizando una fase de propagación de funciones de valor durante la cual las funciones de valor se propagan desde los métodos de destino a los métodos de origen. En cualquier momento durante esta fase nos encontramos con una situación mostrada en la Figura 2, donde se conocen las funciones de costo de oportunidad [Vjn]N n=0 de los métodos [mjn]N n=0, y se debe derivar el costo de oportunidad Vi0 del método mi0. Sea pi0 la función de distribución de probabilidad de la duración de la ejecución del método mi0, y ri0 la recompensa inmediata por comenzar y completar la ejecución del método mi0 dentro de un intervalo de tiempo [τ, τ] tal que mi0 ∈ C[τ, τ]. La función Vi0 se deriva entonces de ri0 y los costos de oportunidad Vjn,i0 (t) n = 1, ..., N de los métodos futuros. Formalmente: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt si existe mi0 τ,τ ∈C[ ] tal que t ∈ [τ, τ ] 0 de lo contrario (1) Nota que para t ∈ [τ, τ ], si h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) entonces Vi0 es una convolución de p y h: vi0 (t) = (pi0 ∗h)(τ −t). Por ahora, asumamos que Vjn,i0 representa un costo de oportunidad total, posponiendo la discusión sobre diferentes técnicas para dividir el costo de oportunidad Vj0 en [Vj0,ik ]K k=0 hasta la sección 6. Ahora mostramos cómo derivar Vj0,i0 (la derivación de Vjn,i0 para n = 0 sigue el mismo esquema). Figura 2: Fragmento de un MDP del agente Ak. Las funciones de probabilidad se propagan hacia adelante (de izquierda a derecha) mientras que las funciones de valor se propagan hacia atrás (de derecha a izquierda). Sea V j0,i0 (t) el costo de oportunidad de comenzar la ejecución del método mj0 en el tiempo t dado que el método mi0 ha sido completado. Se obtiene multiplicando Vi0 por las funciones de probabilidad de todos los métodos que no sean mi0 y que permitan mj0. Formalmente: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t). Donde, de manera similar a [4] y [5], ignoramos la dependencia de [Plk ]K k=1. Observe que V j0,i0 no tiene que ser monótonamente decreciente, es decir, retrasar la ejecución del método mi0 a veces puede ser rentable. Por lo tanto, el costo de oportunidad Vj0,i0 (t) de habilitar el método mi0 en el tiempo t debe ser mayor o igual a V j0,i0. Además, Vj0,i0 debería ser no decreciente. Formalmente: Vj0,i0 = min f∈F f (2) donde F = {f | f ≥ V j0,i0 y f(t) ≥ f(t ) ∀t<t }. Conociendo el costo de oportunidad Vi0, podemos derivar fácilmente la función de valor vi0. Que Ak sea un agente asignado al método mi0. Si Ak está a punto de comenzar la ejecución de mi0, significa que Ak debe haber completado su parte del plan de misión hasta el método mi0. Dado que Ak no sabe si otros agentes han completado los métodos [mlk]k=K k=1, para derivar vi0, tiene que multiplicar Vi0 por las funciones de probabilidad de todos los métodos de otros agentes que permiten mi0. Formalmente: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) donde también se ignora la dependencia de [Plk]K k=1. Hemos mostrado consecuentemente un esquema general sobre cómo propagar las funciones de valor: Conociendo [vjn]N n=0 y [Vjn]N n=0 de los métodos [mjn]N n=0, podemos derivar vi0 y Vi0 del método mi0. En general, el esquema de propagación de la función de valor comienza con los nodos sumidero. Luego visita en cada momento un método m, de modo que todos los métodos que m habilita ya han sido marcados como visitados. La fase de propagación de la función de valor termina cuando todos los métodos fuente han sido marcados como visitados. 5.2 Lectura de la Política Para determinar la política del agente Ak para el método mj0, debemos identificar el conjunto Zj0 de intervalos [z, z] ⊂ [0, ..., Δ], tal que: ∀t∈[z,z] πk( mj0 , t ) = W. Se pueden identificar fácilmente los intervalos de Zj0 observando los intervalos de tiempo en los que la función de valor vj0 no disminuye monótonamente. 5.3 Fase de Propagación de la Función de Probabilidad Supongamos ahora que las funciones de valor y los valores de costo de oportunidad han sido propagados desde los métodos sumidero hasta los nodos fuente y los conjuntos Zj para todos los métodos mj ∈ M han sido identificados. Dado que la fase de propagación de la función de valor estaba utilizando probabilidades Pi(t) para los métodos mi ∈ M y los tiempos t ∈ [0, Δ] encontrados en la iteración previa del algoritmo, ahora tenemos que encontrar nuevos valores Pi(t), para preparar el algoritmo para su próxima iteración. Ahora mostramos cómo en el caso general (Figura 2) se propagan las funciones de probabilidad hacia adelante a través de un método, es decir, asumimos que las funciones de probabilidad [Pik]K k=0 de los métodos [mik]K k=0 son conocidas, y la función de probabilidad Pj0 del método mj0 debe ser derivada. Sea pj0 la función de distribución de probabilidad de la duración de la ejecución del método mj0, y Zj0 el conjunto de intervalos de inactividad para el método mj0, encontrados durante la última fase de propagación de la función de valor. Si ignoramos la dependencia de [Pik ]K k=0 entonces la probabilidad Pj0 (t) de que la ejecución del método mj0 comience antes del tiempo t está dada por: Pj0 (t) = (QK k=0 Pik (τ) si ∃(τ, τ ) ∈ Zj0 tal que t ∈ (τ, τ ) QK k=0 Pik (t) en caso contrario. Dada Pj0 (t), la probabilidad Pj0 (t) de que el método mj0 se complete para el tiempo t se deriva por: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Lo cual puede escribirse de forma compacta como ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t. Hemos demostrado consecuentemente cómo propagar las funciones de probabilidad [Pik]K k=0 de los métodos [mik]K k=0 para obtener la función de probabilidad Pj0 del método mj0. El general, la fase de propagación de la función de probabilidad comienza con los métodos de origen msi para los cuales sabemos que Psi = 1 ya que están habilitados de forma predeterminada. Luego visitamos en cada momento un método m tal que todos los métodos que permiten The Sixth Intl. La Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) ya ha marcado como visitados 833 metros. La fase de propagación de la función de probabilidad termina cuando todos los métodos de destino han sido marcados como visitados. 5.4 El algoritmo De manera similar al algoritmo OC-DEC-MDP, VFP comienza las iteraciones de mejora de la política con la política de tiempo de inicio más temprano π0. Luego, en cada iteración: (i) Propaga las funciones de valor [vi] |M| i=1 utilizando las antiguas funciones de probabilidad [Pi] |M| i=1 de la iteración previa del algoritmo y establece los nuevos conjuntos [Zi] |M| i=1 de intervalos de inactividad del método, y (ii) propaga las nuevas funciones de probabilidad [Pi] |M| i=1 utilizando los conjuntos recién establecidos [Zi] |M| i=1. Estas nuevas funciones [Pi ] |M| i=1 luego son utilizadas en la siguiente iteración del algoritmo. De manera similar a OC-DEC-MDP, VFP se detiene si una nueva política no mejora la política de la iteración del algoritmo anterior. 5.5 Implementación de Operaciones de Funciones. Hasta ahora, hemos derivado las operaciones funcionales para la propagación de la función de valor y la función de probabilidad sin elegir ninguna representación de función. En general, nuestras operaciones funcionales pueden manejar el tiempo continuo, y se tiene la libertad de elegir una técnica de aproximación de función deseada, como la aproximación lineal por tramos [7] o la aproximación constante por tramos [9]. Sin embargo, dado que uno de nuestros objetivos es comparar VFP con el algoritmo existente OC-DEC-MDP, que solo funciona para tiempo discreto, también discretizamos el tiempo y elegimos aproximar las funciones de valor y de probabilidad con funciones lineales por tramos (PWL). Cuando el algoritmo VFP propaga las funciones de valor y funciones de probabilidad, lleva a cabo constantemente operaciones representadas por las ecuaciones (1) y (3) y ya hemos demostrado que estas operaciones son convoluciones de algunas funciones p(t) y h(t). Si el tiempo está discretizado, las funciones p(t) y h(t) son discretas; sin embargo, h(t) puede aproximarse de manera precisa con una función PWL bh(t), que es exactamente lo que hace VFP. Como resultado, en lugar de realizar O(Δ2) multiplicaciones para calcular f(t), VFP solo necesita realizar O(k · Δ) multiplicaciones para calcular f(t), donde k es el número de segmentos lineales de bh(t) (nota que dado que h(t) es monótona, bh(t) suele estar cerca de h(t) con k Δ). Dado que los valores de Pi están en el rango [0, 1] y los valores de Vi están en el rango [0, P mi∈M ri], sugerimos aproximar Vi(t) con bVi(t) con un error V, y Pi(t) con bPi(t) con un error P. Ahora demostramos que el error de aproximación acumulado durante la fase de propagación de la función de valor puede expresarse en términos de P y V: TEOREMA 1. Sea C≺ un conjunto de restricciones de precedencia de un DEC-MDP con Restricciones Temporales, y P y V sean los errores de aproximación de la función de probabilidad y la función de valor respectivamente. El error general π = maxV supt∈[0,Δ]|V (t) − bV (t)| de la fase de propagación de la función de valor está entonces acotado por: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri. PRUEBA. Para establecer el límite para π, primero demostramos por inducción en el tamaño de C≺, que el error general de la fase de propagación de la función de probabilidad, π(P) = maxP supt∈[0,Δ]|P(t) − bP(t)| está limitado por (1 + P)|C≺| - 1. Base de inducción: Si n = 1, solo hay dos métodos presentes, y realizaremos la operación identificada por la Ecuación (3) solo una vez, introduciendo el error π(P) = P = (1 + P)|C≺| − 1. Paso de inducción: Supongamos que π(P) para |C≺| = n está acotado por (1 + P)n - 1, y queremos demostrar que esta afirmación se cumple para |C≺| = n. Sea G = M, C≺ un grafo con a lo sumo n + 1 aristas, y G = M, C≺ un subgrafo de G, tal que C≺ = C≺ - {mi, mj}, donde mj ∈ M es un nodo sumidero en G. A partir de la suposición de inducción, tenemos que C≺ introduce el error de fase de propagación de probabilidad acotado por (1 + P)n - 1. Ahora agregamos de nuevo el enlace {mi, mj} a C≺, lo cual afecta el error de solo una función de probabilidad, es decir, Pj, por un factor de (1 + P). Dado que el error de fase de propagación de probabilidad en C≺ estaba limitado por (1 + P )n − 1, en C≺ = C≺ ∪ { mi, mj } puede ser a lo sumo ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1. Por lo tanto, si las funciones de costo de oportunidad no están sobreestimadas, están limitadas por P mi∈M ri y el error de una operación de propagación de función de valor único será como máximo Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri. Dado que el número de operaciones de propagación de la función de valor es |C≺|, el error total π de la fase de propagación de la función de valor está acotado por: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6. DIVIDIENDO LAS FUNCIONES DE COSTO DE OPORTUNIDAD En la sección 5 omitimos la discusión sobre cómo se divide la función de costo de oportunidad Vj0 del método mj0 en funciones de costo de oportunidad [Vj0,ik ]K k=0 enviadas de regreso a los métodos [mik ]K k=0 , que habilitan directamente al método mj0. Hasta ahora, hemos seguido el mismo enfoque que en [4] y [5] en el sentido de que la función de costo de oportunidad Vj0,ik que el método mik envía de vuelta al método mj0 es una función mínima y no decreciente que domina la función V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). Nos referimos a este enfoque como heurística H 1,1. Antes de demostrar que esta heurística sobreestima el costo de oportunidad, discutimos tres problemas que podrían ocurrir al dividir las funciones de costo de oportunidad: (i) sobreestimación, (ii) subestimación y (iii) escasez. Considera la situación en la Figura 3: Dividiendo la función de valor del método mj0 entre los métodos [mik]K k=0, cuando se realiza la propagación de la función de valor para los métodos [mik]K k=0. Para cada k = 0, ..., K, la Ecuación (1) deriva la función de costo de oportunidad Vik a partir de la recompensa inmediata rk y la función de costo de oportunidad Vj0,ik. Si m0 es el único método que precede al método mk, entonces V ik,0 = Vik se propaga al método m0, y en consecuencia, el costo de oportunidad de completar el método m0 en el tiempo t es igual a PK k=0 Vik,0(t). Si este costo está sobreestimado, entonces un agente A0 en el método m0 tendrá demasiado incentivo para finalizar la ejecución de m0 en el tiempo t. En consecuencia, aunque la probabilidad P(t) de que m0 sea habilitado por otros agentes para el tiempo t sea baja, el agente A0 aún podría encontrar que la utilidad esperada de comenzar la ejecución de m0 en el tiempo t es mayor que la utilidad esperada de hacerlo más tarde. Como resultado, elegirá en el momento t comenzar a ejecutar el método m0 en lugar de esperar, lo cual puede tener consecuencias desastrosas. De manera similar, si PK k=0 Vik,0(t) está subestimado, el agente A0 podría perder interés en habilitar los métodos futuros [mik]K k=0 y simplemente enfocarse en 834 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) maximizando la probabilidad de obtener su recompensa inmediata r0. Dado que esta posibilidad aumenta cuando el agente A0 espera, considerará en el momento t que es más rentable esperar en lugar de comenzar la ejecución de m0, lo cual puede tener consecuencias igualmente desastrosas. Finalmente, si Vj0 se divide de tal manera que, para algún k, Vj0,ik = 0, es el método mik el que subestima el costo de oportunidad de habilitar el método mj0, y el razonamiento similar se aplica. Llamamos a este problema una falta de método mk. Esa breve discusión muestra la importancia de dividir la función de costo de oportunidad Vj0 de tal manera que se evite la sobreestimación, la subestimación y el problema de escasez. Ahora demostramos que: TEOREMA 2. La heurística H 1,1 puede sobreestimar el costo de oportunidad. PRUEBA. Demostramos el teorema mostrando un caso donde ocurre la sobreestimación. Para el plan de misión de la Figura (3), permita que H 1,1 divida Vj0 en [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 enviados a los métodos [mik ]K k=0 respectivamente. Además, suponga que los métodos [mik]K k=0 no proporcionan recompensa local y tienen las mismas ventanas de tiempo, es decir, rik = 0; ESTik = 0, LETik = Δ para k = 0, ..., K. Para demostrar la sobreestimación del costo de oportunidad, debemos identificar t0 ∈ [0, ..., Δ] tal que el costo de oportunidad PK k=0 Vik (t) para los métodos [mik]K k=0 en el tiempo t ∈ [0, .., Δ] sea mayor que el costo de oportunidad Vj0 (t). A partir de la Ecuación (1) tenemos: Vik (t) = Z Δ−t 0 pik (t) Vj0,ik (t + t) dt Sumando sobre todos los métodos [mik]K k=0 obtenemos: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t) Vj0,ik (t + t) dt (4) ≥ KX k=0 Z Δ−t 0 pik (t) Vj0,ik (t + t) dt = KX k=0 Z Δ−t 0 pik (t) Vj0 (t + t) Y k ∈{0,...,K} k =k Pik (t + t) dt Sea c ∈ (0, 1] una constante y t0 ∈ [0, Δ] tal que ∀t>t0 y ∀k=0,..,K tenemos Q k ∈{0,...,K} k =k Pik (t) > c. Entonces: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t) Vj0 (t0 + t) · c dt Porque Pjk es no decreciente. Ahora, supongamos que existe t1 ∈ (t0, Δ], tal que PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) . Dado que al disminuir el límite superior de la integral sobre una función positiva también disminuye la integral, tenemos: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt Y dado que Vj0 (t ) es no creciente, tenemos: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Suponiendo LET0 t En consecuencia, el costo de oportunidad PK k=0 Vik (t0) de comenzar la ejecución de los métodos [mik]K k=0 en el tiempo t ∈ [0, .., Δ] es mayor que el costo de oportunidad Vj0 (t0) lo cual demuestra el teorema. La Figura 4 muestra que la sobreestimación del costo de oportunidad es fácilmente observable en la práctica. Para remediar el problema de la sobreestimación del costo de oportunidad, proponemos tres heurísticas alternativas que dividen las funciones de costo de oportunidad: • Heurística H 1,0 : Solo un método, mik, recibe la recompensa esperada completa por habilitar el método mj0, es decir, V j0,ik (t) = 0 para k ∈ {0, ..., K}\{k} y V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heurística H 1/2,1/2 : Cada método [mik]K k=0 recibe el costo de oportunidad completo por habilitar el método mj0 dividido por el número K de métodos que habilitan el método mj0, es decir, V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) para k ∈ {0, ..., K}. • Heurística bH 1,1 : Esta es una versión normalizada de la heurística H 1,1 en la que cada método [mik]K k=0 inicialmente recibe el costo de oportunidad completo por habilitar el método mj0. Para evitar la sobreestimación del costo de oportunidad, normalizamos las funciones de división cuando su suma excede la función de costo de oportunidad a dividir. Formalmente: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) si PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) en otro caso Donde V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t). Para las nuevas heurísticas, ahora demostramos que: TEOREMA 3. Las heurísticas H 1,0, H 1/2,1/2 y bH 1,1 no sobreestiman el costo de oportunidad. PRUEBA. Cuando se utiliza la heurística H 1,0 para dividir la función de costo de oportunidad Vj0, solo un método (por ejemplo, mik) obtiene el costo de oportunidad para habilitar el método mj0. Por lo tanto: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) Y dado que Vj0 es no decreciente ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) La última desigualdad también es consecuencia del hecho de que Vj0 es no decreciente. Para la heurística H 1/2,1/2, de manera similar tenemos: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t). Para la heurística bH 1,1, la función de costo de oportunidad Vj0 está definida de tal manera que se divide de forma que PK k=0 Vik (t) ≤ Vj0 (t). Por consiguiente, hemos demostrado que nuestras nuevas heurísticas H 1,0, H 1/2,1/2 y bH 1,1 evitan la sobreestimación del costo de oportunidad. El Sexto Internacional. La razón por la que hemos introducido las tres nuevas heurísticas es la siguiente: Dado que H 1,1 sobreestima el costo de oportunidad, uno tiene que elegir qué método mik recibirá la recompensa por habilitar el método mj0, que es exactamente lo que hace la heurística H 1,0. Sin embargo, la heurística H 1,0 deja K − 1 métodos que preceden al método mj0 sin ninguna recompensa, lo que lleva a la inanición. La inanición se puede evitar si las funciones de costo de oportunidad se dividen utilizando la heurística H 1/2,1/2, que proporciona recompensa a todos los métodos habilitadores. Sin embargo, la suma de las funciones de costo de oportunidad divididas para la heurística H 1/2,1/2 puede ser menor que la función de costo de oportunidad dividida no nula para la heurística H 1,0, lo cual es claramente indeseable. La situación mencionada (Figura 4, heurística H 1,0 ) ocurre porque la media f+g 2 de dos funciones f, g no es menor que f ni que g, a menos que f = g. Por esta razón, hemos propuesto la heurística bH 1,1, la cual, por definición, evita los problemas de sobreestimación, subestimación y falta de recursos. 7. EVALUACIÓN EXPERIMENTAL Dado que el algoritmo VFP que introdujimos proporciona dos mejoras ortogonales sobre el algoritmo OC-DEC-MDP, la evaluación experimental que realizamos consistió en dos partes: En la parte 1, probamos empíricamente la calidad de las soluciones que un solucionador localmente óptimo (ya sea OC-DEC-MDP o VFP) encuentra, dado que utiliza diferentes heurísticas de división de la función de costo de oportunidad, y en la parte 2, comparamos los tiempos de ejecución de los algoritmos VFP y OC-DEC-MDP para una variedad de configuraciones de planes de misión. Parte 1: Primero ejecutamos el algoritmo VFP en una configuración genérica del plan de misión de la Figura 3 donde solo estaban presentes los métodos mj0, mi1, mi2 y m0. Las ventanas de tiempo de todos los métodos se establecieron en 400, la duración pj0 del método mj0 fue uniforme, es decir, pj0 (t) = 1 400 y las duraciones pi1, pi2 de los métodos mi1, mi2 fueron distribuciones normales, es decir, pi1 = N(μ = 250, σ = 20) y pi2 = N(μ = 200, σ = 100). Supusimos que solo el método mj0 proporcionaba recompensa, es decir, rj0 = 10 era la recompensa por finalizar la ejecución del método mj0 antes del tiempo t = 400. Mostramos nuestros resultados en la Figura (4) donde el eje x de cada uno de los gráficos representa el tiempo, mientras que el eje y representa el costo de oportunidad. El primer gráfico confirma que, cuando la función de costo de oportunidad Vj0 se dividió en las funciones de costo de oportunidad Vi1 y Vi2 utilizando la heurística H 1,1, la función Vi1 + Vi2 no siempre estaba por debajo de la función Vj0. En particular, Vi1 (280) + Vi2 (280) superó a Vj0 (280) en un 69%. Cuando se utilizaron las heurísticas H 1,0 , H 1/2,1/2 y bH 1,1 (gráficos 2, 3 y 4), la función Vi1 + Vi2 siempre estuvo por debajo de Vj0. Luego dirigimos nuestra atención al ámbito del rescate civil presentado en la Figura 1, para el cual muestreamos todas las duraciones de ejecución de las acciones de la distribución normal N = (μ = 5, σ = 2). Para obtener la línea base del rendimiento heurístico, implementamos un solucionador globalmente óptimo que encontró una verdadera recompensa total esperada para este dominio (Figura (6a)). Luego comparamos esta recompensa con una recompensa total esperada encontrada por un solucionador localmente óptimo guiado por cada una de las heurísticas discutidas. La figura (6a), que representa en el eje y la recompensa total esperada de una política, complementa nuestros resultados anteriores: la heurística H 1,1 sobreestimó la recompensa total esperada en un 280%, mientras que las otras heurísticas pudieron guiar al solucionador localmente óptimo cerca de una recompensa total esperada real. Parte 2: Luego elegimos H 1,1 para dividir las funciones de costo de oportunidad y realizamos una serie de experimentos destinados a probar la escalabilidad de VFP para varias configuraciones de planes de misión, utilizando el rendimiento del algoritmo OC-DEC-MDP como referencia. Iniciamos las pruebas de escalabilidad de VFP con una configuración de la Figura (5a) asociada con el dominio de rescate civil, para la cual las duraciones de ejecución del método se extendieron a distribuciones normales N(μ = Figura 5: Configuraciones del plan de misión: (a) dominio de rescate civil, (b) cadena de n métodos, (c) árbol de n métodos con factor de ramificación = 3 y (d) malla cuadrada de n métodos. Figura 6: Rendimiento de VFP en el ámbito del rescate civil. 30, σ = 5), y el plazo límite se extendió a Δ = 200. Decidimos probar el tiempo de ejecución del algoritmo VFP ejecutándose con tres niveles diferentes de precisión, es decir, se eligieron diferentes parámetros de aproximación P y V, de modo que el error acumulativo de la solución encontrada por VFP se mantuviera dentro del 1%, 5% y 10% de la solución encontrada por el algoritmo OC-DEC-MDP. Luego ejecutamos ambos algoritmos durante un total de 100 iteraciones de mejora de políticas. La figura (6b) muestra el rendimiento del algoritmo VFP en el ámbito del rescate civil (el eje y muestra el tiempo de ejecución en milisegundos). Como podemos ver, para este pequeño dominio, VFP se ejecuta un 15% más rápido que OCDEC-MDP al calcular la política con un error de menos del 1%. Para comparación, la solución óptima a nivel global no se terminó en las primeras tres horas de su ejecución, lo que muestra la fortaleza de los solucionadores oportunistas, como OC-DEC-MDP. A continuación, decidimos probar cómo se desempeña VFP en un dominio más difícil, es decir, con métodos que forman una cadena larga (Figura (5b)). Probamos cadenas de 10, 20 y 30 métodos, aumentando al mismo tiempo las ventanas de tiempo del método a 350, 700 y 1050 para asegurar que los métodos posteriores puedan ser alcanzados. Mostramos los resultados en la Figura (7a), donde variamos en el eje x el número de métodos y representamos en el eje y el tiempo de ejecución del algoritmo (notar la escala logarítmica). Al observar, al ampliar el dominio se revela el alto rendimiento de VFP: Dentro del 1% de error, corre hasta 6 veces más rápido que OC-DECMDP. Luego probamos cómo VFP se escala, dado que los métodos están organizados en un árbol (Figura (5c)). En particular, consideramos árboles con un factor de ramificación de 3 y una profundidad de 2, 3 y 4, aumentando al mismo tiempo el horizonte temporal de 200 a 300 y luego a 400. Mostramos los resultados en la Figura (7b). Aunque las mejoras en la velocidad son menores que en el caso de una cadena, el algoritmo VFP sigue siendo hasta 4 veces más rápido que OC-DEC-MDP al calcular la política con un error inferior al 1%. Finalmente probamos cómo VFP maneja los dominios con métodos organizados en una malla n × n, es decir, C≺ = { mi,j, mk,j+1 } para i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1. En particular, consideramos 836 The Sixth Intl. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) Figura 4: Visualización de heurísticas para la división de costos de oportunidad. Figura 7: Experimentos de escalabilidad para OC-DEC-MDP y VFP para diferentes configuraciones de red. mallas de 3×3, 4×4 y 5×5 métodos. Para tales configuraciones, debemos aumentar significativamente el horizonte temporal, ya que las probabilidades de habilitar los métodos finales para un momento específico disminuyen exponencialmente. Por lo tanto, variamos los horizontes temporales de 3000 a 4000, y luego a 5000. Mostramos los resultados en la Figura (7c) donde, especialmente para mallas más grandes, el algoritmo VFP se ejecuta hasta un orden de magnitud más rápido que OC-DEC-MDP mientras encuentra una política que está dentro de menos del 1% de la política encontrada por OC-DEC-MDP. CONCLUSIONES El Proceso de Decisión de Markov Descentralizado (DEC-MDP) ha sido muy popular para modelar problemas de coordinación de agentes, es muy difícil de resolver, especialmente para los dominios del mundo real. En este artículo, mejoramos un método de solución heurística de vanguardia para DEC-MDPs, llamado OC-DEC-MDP, que recientemente se ha demostrado que es escalable para DEC-MDPs grandes. Nuestro método de solución heurístico, llamado Propagación de Función de Valor (VFP), proporcionó dos mejoras ortogonales de OC-DEC-MDP: (i) Aceleró OC-DEC-MDP en un orden de magnitud al mantener y manipular una función de valor para cada método en lugar de un valor separado para cada par de método e intervalo de tiempo, y (ii) logró una mejor calidad de solución que OC-DEC-MDP porque corrigió la sobreestimación del costo de oportunidad de OC-DEC-MDP. En cuanto al trabajo relacionado, hemos discutido extensamente el algoritmo OCDEC-MDP [4]. Además, como se discute en la Sección 4, existen algoritmos óptimos a nivel global para resolver DEC-MDPs con restricciones temporales [1] [11]. Desafortunadamente, no logran escalar a dominios a gran escala en la actualidad. Más allá de OC-DEC-MDP, existen otros algoritmos localmente óptimos para DEC-MDPs y DECPOMDPs [8] [12], [13], sin embargo, tradicionalmente no han abordado los tiempos de ejecución inciertos y las restricciones temporales. Finalmente, las técnicas de función de valor han sido estudiadas en el contexto de MDPs de agente único [7] [9]. Sin embargo, al igual que [6], no logran abordar la falta de conocimiento del estado global, que es un problema fundamental en la planificación descentralizada. Agradecimientos: Este material se basa en trabajos respaldados por el programa COORDINATORS de DARPA/IPTO y el Laboratorio de Investigación de la Fuerza Aérea bajo el Contrato No. FA875005C0030. Los autores también quieren agradecer a Sven Koenig y a los revisores anónimos por sus valiosos comentarios. 9. REFERENCIAS [1] R. Becker, V. Lesser y S. Zilberstein. MDPs descentralizados con interacciones impulsadas por eventos. En AAMAS, páginas 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser y C. V. Goldman. Procesos de decisión de Markov descentralizados independientes de la transición. En AAMAS, páginas 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein y N. Immerman. La complejidad del control descentralizado de procesos de decisión de Markov. En UAI, páginas 32-37, 2000. [4] A. Beynier y A. Mouaddib. Un algoritmo polinómico para procesos de decisión de Markov descentralizados con restricciones temporales. En AAMAS, páginas 963-969, 2005. [5] A. Beynier y A. Mouaddib. Un algoritmo iterativo para resolver procesos de decisión de Markov descentralizados con restricciones. En AAAI, páginas 1089-1094, 2006. [6] C. Boutilier. Optimalidad secuencial y coordinación en sistemas multiagentes. En IJCAI, páginas 478-485, 1999. [7] J. Boyan y M. Littman. Soluciones exactas para procesos de decisión de Markov dependientes del tiempo. En NIPS, páginas 1026-1032, 2000. [8] C. Goldman y S. Zilberstein. Optimizando el intercambio de información en sistemas multiagente cooperativos, 2003. [9] L. Li y M. Littman. Aproximación perezosa para resolver MDPs continuos de horizonte finito. En AAAI, páginas 1175-1180, 2005. [10] Y. Liu y S. Koenig. Planificación sensible al riesgo con funciones de utilidad de un solo interruptor: Iteración de valor. En AAAI, páginas 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman y M. Boddy. Gestión de planes coordinados utilizando MDPs multiagentes. En el Simposio de Primavera de AAAI, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath y S. Marsella. Domando POMDP descentralizados: Hacia una computación eficiente de políticas para entornos multiagentes. En IJCAI, páginas 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe y M. Yokoo. POMDPs distribuidos en red: una sinergia de optimización de restricciones distribuidas y POMDPs. En IJCAI, páginas 1758-1760, 2005. El Sexto Internacional. Conferencia Conjunta sobre Agentes Autónomos y Sistemas Multiagente (AAMAS 07) 837