Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantiˇsek Brabec Hanan Samet Centro del Departamento de Ciencias de la Computación del Instituto de Investigación de Automatización para Estudios de Computación Avanzados Universidad de Maryland, College Park, MD 20742 {Egemen, Brabec, HJS} umiacs.umd.edu www.cs.umd.edu/{~ egemen, ~ brabec, ~ hjs} empresas abstractas en los sectores público y privado han estado haciendo que sus grandes archivos de datos espaciales estén disponibles en Internet. Sin embargo, el trabajo interactivo con volúmenes tan grandes de datos espaciales en línea es una tarea desafiante. Proponemos dos enfoques eficientes para el acceso remoto a datos espaciales grandes. Primero, presentamos una arquitectura de cliente cliente donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, la visualización de datos y la gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente mientras maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, para períodos prolongados de acceso a grandes datos en línea, presentamos el nombramiento (un enfoque para el o-de igual a ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ Este es un enfoque centralizado de igual a igual que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En el designación, los clientes activos de la Ley de Arquitectura del Merente de Negocios en el nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda de servicio y resolver las congestiones del servidor. Categorías y descriptores de sujetos c.2.4 [Redes de comunicación por computadora]: Sistemas distribuidos-Client/Server, aplicaciones distribuidas, bases de datos distribuidas;H.2.8 [Gestión de bases de datos]: bases de datos espaciales de aplicaciones de bases de datos y Términos generales de SIG rendimiento, gestión 1. Introducción En los últimos años, las empresas en los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con volúmenes tan grandes de datos espaciales en línea es una tarea desafiante. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos en línea espaciales: el navegador de Internet de arena (datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular de manera interactiva y visual los datos espaciales de forma remota. Desafortunadamente, el acceso remoto interactivo a los datos espaciales se ralentiza a un rastreo sin los mecanismos de acceso de datos adecuados. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, forman una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para las interacciones con grandes volúmenes de datos espaciales en línea. El sistema de arena basado en el servidor realiza la funcionalidad central responsable de las operaciones de la base de datos reales. Sand es un sistema de base de datos espacial desarrollado en la Universidad de Maryland [12]. El navegador de Internet de Sand del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de Sand a través de Internet. Los usuarios especifican consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. Sand Internet Browser está basado en Java, lo que lo hace desplegable en muchas plataformas. Además, dado que Java a menudo se ha instalado en las computadoras de destino de antemano, nuestros clientes se pueden implementar en estos sistemas con poca o ninguna necesidad de instalación o personalización de software adicional. El sistema puede comenzar a utilizarse inmediatamente sin ninguna configuración previa que pueda ser extremadamente beneficiosa en escenarios de uso sensibles al tiempo, como emergencias. Hay dos formas de desplegar arena. Primero, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (navegador de Internet de arena) como una aplicación Java o un applet. De esta manera, los usuarios en varias plataformas pueden acceder continuamente a los datos espaciales grandes en una ubicación remota con poca o 15 sin necesidad de ninguna instalación de software anterior. La segunda opción es utilizar un navegador de Internet de arena independiente junto con un sistema de administración de bases de datos habilitado para Internet instalado localmente (pieza del servidor). En este caso, el navegador Sand Internet aún se puede utilizar para ver datos de ubicaciones remotas. Sin embargo, los datos de acceso frecuente se pueden descargar a la base de datos local a pedido, y posteriormente se accede localmente. Los usuarios propios también pueden cargar grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero tenía como objetivo desarrollar una arquitectura de cliente cliente con métodos de almacenamiento de almacenamiento eficientes para equilibrar los recursos locales en un lado y la latencia significativa de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene como objetivo ayudar a los usuarios que desean manipular grandes volúmenes de datos en línea por períodos prolongados. Hemos desarrollado un enfoque centralizado de peerto para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente al utilizar mejor los recursos de red distribuidos entre clientes activos de una arquitectura de servidor de clientes. Llamamos a esta arquitectura de designación de nombramiento para el par de pares o ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ ﬄ Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet de arena (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La Sección 2 describe nuestro enfoque de cliente cliente con más detalle. La Sección 3 se centra en el nombramiento, nuestro enfoque entre pares. La Sección 4 discute nuestro trabajo en relación con el trabajo existente. La Sección 5 describe una muestra de escenario de navegador de Internet de arena para nuestros dos enfoques de acceso remoto. La Sección 6 contiene comentarios finales, así como futuras direcciones de investigación.2. El enfoque del cliente-servidor tradicionalmente, los sistemas de información geográfica (SIG), como Arcinfo de ESRI [2] y muchas bases de datos espaciales, están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y consulta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en una ubicación, mientras que los usuarios deben trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos confiables que las redes de área local y, por lo tanto, es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque de cliente cliente (Figura 1) permite que el motor de la base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Javab que les proporciona una puerta de enlace en el motor de base de datos espacial de arena. Nuestro cliente es más que un simple visor de imágenes. En cambio, opera en datos vectoriales que permiten al cliente ejecutar muchas operaciones, como el zoom o consultas de ubicación localmente. En la Figura 1: navegador de Internet de arena: arquitectura cliente -servidor.Esencia, se ejecuta un motor de base de datos espacial simple en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al almacenamiento en caché. En nuestro caso, el cliente actúa como un servidor liviano en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor solo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local solo se actualiza cuando se necesitan datos adicionales o más nuevos, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, como el zoom y la panorama. De hecho, mientras el usuario explore una región a la vez (es decir, él o ella no está panorámica en toda la base de datos), no se deben recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más receptivo que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que consultas de ventanas que se necesitan para la visualización de la base de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas de los usuarios aún se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas son lo suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de respuesta generalmente está dentro de los límites razonables.2.1 Comunicación del cliente-servidor Como se mencionó anteriormente, el navegador de Internet de arena es una pieza de cliente del servidor de base de datos espacial accesible remotamente construido alrededor del kernel de arena. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de secuencias de comandos basado en TCL, se requiere un servlet diseñado específicamente para interactuar el navegador de Internet de arena con el núcleo de arena en el lado del servidor. Este servlet escucha en un puerto determinado del servidor para las solicitudes entrantes del cliente. Traduce estas solicitudes al idioma Sand-TCL. A continuación, transmite estos comandos o scripts Sand-TCL al núcleo de arena. Después de que el núcleo proporcione los resultados, el servlet los obtiene y los procesa, y luego envía esos resultados al cliente de origen. Una vez que se lanza Java Servlet, espera a que un cliente inicie una conexión. Maneja ambas solicitudes para el código Java del cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico de arena. Cuando se lanza la pieza del cliente, se conecta al servlet de arena, la comunicación es impulsada por la pieza del cliente;El servidor solo responde a las consultas de los clientes. El cliente inicia una transacción al enviar una consulta. El servlet Java analiza la consulta y crea una expresión o script de arena correspondiente en el formato nativo de los núcleos de arena. Luego se envía al núcleo para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que representa un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si se envió un script al kernel (por ejemplo, solicitando todas las tuplas que coinciden con algunos criterios), entonces el servidor de arena puede devolver una cantidad arbitraria de datos. En este caso, los datos se comprimen primero antes de que se envíen a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Observe que si se usara otra base de datos espacial en lugar del núcleo de arena, entonces solo se debe hacer una simple modificación al servlet para que el navegador de Internet de arena funcione correctamente. En particular, las consultas enviadas por el cliente deberían ser recodificadas en otro idioma de consulta que sea nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado.3. El enfoque de igual a igual que muchos usuarios pueden querer trabajar en un conjunto de datos espaciales completos durante un período prolongado de tiempo. En este caso, puede ser necesaria una inversión inicial de descarga de todo el conjunto de datos para garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas solicitudes de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser atendidos pueden ralentizar el servidor para que se rastree. Esto se debe al hecho de que el enfoque común de cliente cliente para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los extremos (es decir, algunos clientes y un servidor). Construimos nombrar como un sistema centralizado de igual a igual para demostrar nuestro enfoque para mejorar los sistemas comunes de cliente cliente. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno aún funciona como un entorno de cliente cliente en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes de cliente cliente, nombrar mantiene más información sobre los clientes. Esto incluye inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una conexión deficiente con el servidor, el nombramiento puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes.quienes ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema de cliente cliente a un esquema de igual a igual). El servidor todavía realiza el servicio de directorio para los clientes activos, pero el servidor ya no atiende a todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el fin de compartir sus recursos de red en lugar de introducir contenido nuevo y, por lo tanto, ayudan a otor al servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de administración de pares dinámicos en comparación con los enfoques de peer-peer puro donde una inundación de mensajes para descubrir quién todavía está activo en el sistema debe ser utilizado por cada par que debe tomar una decisión. El servidor también es la principal fuente de datos y, en circunstancias regulares, puede no reenviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma el medio atómico de comunicación. Designa las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se replican como un subproducto de haber sido solicitado por una gran cantidad de usuarios. Esto abre el potencial para evitar el servidor en descargas futuras para los datos de otros usuarios, ya que ahora hay muchos puntos nuevos de acceso. Evitar el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor ahora es más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un par cae, no se toman precauciones adicionales. De hecho, el nombramiento no requiere recursos adicionales de un entorno de cliente cliente ya existente, pero, en cambio, amplía su capacidad. Los compañeros simplemente llegan o salen de una tabla en el servidor. La carga de datos se logra de manera similar a la descarga de datos. Para cargas, los clientes activos se pueden utilizar nuevamente. Los usuarios pueden cargar sus datos en un conjunto de pares que no sean el servidor si el servidor está ocupado o reside en una ubicación distante. Finalmente, los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. Tras la conexión inicial con el servidor, se pueden consultar si quieren o no compartir o no su tiempo de red inactivo y su espacio en disco. El resto de las operaciones siguen transparentemente después del contacto inicial. Designe trabajos en la capa de solicitud pero no en capas inferiores. Esto logra la independencia de la plataforma y la implementación fácil del sistema. El nombramiento no es un reemplazo, sino una adición a las arquitecturas de cliente cliente actuales. Desarrollamos una biblioteca de llamadas de funciones que cuando se colocan en una arquitectura de cliente cliente inicia el servicio. Estamos desarrollando esquemas avanzados de selección de pares que incorporan la ubicación de los clientes activos, el ancho de banda entre los clientes activos, el tamaño de los datos para transferir, cargar en clientes activos y la disponibilidad de clientes activos para formar un medio completo para seleccionar los mejores clientes que pueden convertirse enAlternativas eficientes al servidor. Con el nombramiento, estamos definiendo una API muy simple que podría usarse dentro de un sistema de servidor cliente existente fácilmente. En lugar de la negación del servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio de manera adecuada. La API para el lado del servidor es: start (serverportno) makefileAvailable (archivo, ubicación, boolean) devolución de llamada recibida (archivo, ubicación) Callback ErrorrreCeivingFile (archivo, ubicación, error) Stop () De manera similar, la API para el lado del cliente es: Start (Start (Start (Start (Start (Start (Start (ClientPortno, ServerPortno, ServerAddress) MakefileAvailable (archivo, ubicación, boolean) RecibeFile (archivo, ubicación) sendFile (archivo, ubicación) stop () el servidor, después de iniciar el servicio de designación, puede hacer que todos los archivos de datos estén disponibles para los clientes medianteUso del método MakeFileAvailable. Esto permitirá que el Nombre para tratar al servidor sea uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando se recibe un archivo de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. Designar guar7 Figura 2: La operación de localización en el nombramiento.Antees que al menos una de las devoluciones de llamada se llamará para que el usuario (que pueda no estar en línea más) siempre se pueda notificar (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden poner estos archivos a disposición del público utilizando el método MakefileAvailable en el lado del cliente. Por ejemplo, en nuestro navegador de Internet de arena, tenemos la localización de los datos espaciales en función que se pueden elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar conjuntos de datos completamente en sus discos locales antes de comenzar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio de designación tanto en el cliente como en los lados del servidor como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet de arena, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos en el servicio de designación. Nuestro servidor también pone a disposición sus archivos de datos sobre el designación. El mecanismo para la operación de localización se muestra con más detalles de los protocolos de designación en la Figura 2. La operación de carga se realiza de manera similar.4. Trabajo relacionado ha habido una cantidad sustancial de investigación sobre el acceso remoto a los datos espaciales. Un enfoque específico ha sido adoptado por numerosos servicios de mapeo basados en la web (Mapquest [5], Mapsonus [6], etc.). El objetivo en este enfoque es habilitar usuarios remotos, generalmente solo equipados con navegadores web estándar, para acceder al servidor de base de datos espacial de la compañía y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en realizar todos los cálculos en el lado del servidor y transferir solo mapas de bits que representan los resultados de las consultas y comandos de los usuarios. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene limitaciones severas en términos de funcionalidad y tiempo de respuesta disponible (cada acción del usuario da como resultado un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura de cliente cliente para ver imágenes grandes que opera a través de una conexión de red de bajo ancho de banda. Presenta una técnica basada en transformaciones wavelet que permite la minimización de la cantidad de datos necesarios para transferirse a través de la red entre el servidor y el cliente. En este caso, mientras el servidor contiene la representación completa de la imagen grande, solo se debe transferir una cantidad limitada de datos al cliente para permitirle mostrar una vista solicitada actualmente en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panorama. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué debe solicitarse. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal del servidor. Se ha informado otro trabajo relacionado en [16] donde se describe una arquitectura de cliente cliente que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos administra grandes bases de datos que no son prácticas para almacenarse en clientes individuales. Este trabajo combina la gestión de datos de trama (almacenada en pirámides [22]) con datos vectoriales almacenados en Quadtrees [19, 20]. Para nuestro enfoque de transferencia de pares (nombramiento), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicación, donde los datos ya están disponibles gratuitamente para el público, forma un candidato principal para un enfoque de este punto de vista. Gnutella es un sistema de intercambio de archivos entre pares (descentralizado). Desafortunadamente, sufre problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. Muchos sistemas de almacenamiento entre pares también han surgido recientemente. Pasado [18], el servicio de la eternidad [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como Seti@Home [21], hicieron otros recursos, como las CPU inactivas, trabajaron juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente a estos enfoques. Con el nombramiento, queremos mejorar los sistemas de servidor cliente existentes en términos de rendimiento mediante el uso de recursos de redes inactivas entre los clientes activos. Por lo tanto, otros temas como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se ha abordado con el nombramiento. Queremos expandir nuestra investigación, en el futuro, para abordar este problema. Desde nuestra perspectiva, aunque el nombramiento emplea algunas de las técnicas utilizadas en los sistemas entre pares, también está estrechamente relacionado con las arquitecturas de almacenamiento web actuales. La ardilla [13] forma el suelo medio. Crea un caché web colaborativo de pares de pares puro entre los cachés del navegador web de las máquinas en una red de área local. Excepto por este reciente enfoque de pares, el almacenamiento en caché web es principalmente un tema bien estudio en el ámbito del almacenamiento en caché del nivel de servidor/proxy [8, 11, 14, 17]. Los sistemas de almacenamiento en almacenamiento web colaborativo, el más relevante de estos para nuestra investigación, se centran en crear esquemas jerárquicos, basados en el hash, basados en directorio central o basados en el almacenamiento de almacenamiento de multicasts. No compitimos con estos enfoques. De hecho, el nombramiento puede trabajar en conjunto con almacenamiento en caché web colaborativo si se implementan juntos. Intentamos abordar la situación en la que llega una solicitud a un servidor, lo que significa que todos los cachés informan que faltan. Por lo tanto, el punto en el que se alcanza el servidor puede usarse para tomar una decisión central, pero luego la solicitud de servicio real se puede reenviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga Down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los esquemas de almacenamiento en caché web que se usan hoy en día emplean una política de reemplazo que da prioridad a reemplazar los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían al reemplazo inmediato de nuestros archivos de datos relativamente grandes a pesar de que pueden usarse con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy disperso desde el punto de vista de la red y, por lo tanto, no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Finalmente, ninguno de los métodos de almacenamiento en caché web abordan el problema simétrico de las grandes cargas de datos.5. Una aplicación de muestra Fedstats [1] es una fuente en línea que permite a los ciudadanos comunes el acceso a estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Estamos utilizando un conjunto de datos FedStats como un Bed de prueba para nuestro trabajo. Nuestro objetivo es proporcionar más potencia a los usuarios de Fedstats utilizando el navegador de Internet Sand. Como ejemplo, observamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección Ambiental (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: desechos peligrosos, descarga de aguas residuales, Emisiones de aire, volcado de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación de arena donde la ubicación del atributo espacial corresponde a la latitud y la longitud. Algunas consultas que se pueden manejar con nuestro sistema en estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tienen arsénico y participen en el programa de emisiones de aire, y: (a) se encuentran en Georgia a Illinois, alfabéticamente.(b) Acuéstese dentro de Arkansas o 30 millas dentro de su frontera.(c) Se encuentre dentro de las 30 millas de la frontera de Arkansas (es decir, ambos lados de la frontera).2. Para cada instalación regulada por EPA que tiene arsénico, encuentre todas las instalaciones reguladas por la EPA que tienen cloro y: (a) que están más cerca de él que de cualquier otra instalación eparegada que tenga arsénico.(b) que participan en el programa de emisiones de aire y están más cerca de él que de cualquier otra instalación eparegada que tenga arsénico. Para evitar informar una instalación en particular más de una vez, usamos nuestro grupo mediante el mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada del borde de Arkansas. Los sitios se obtienen de manera incremental con respecto a un punto dado. Este pedido se muestra usando diferentes tonos de color. Con estos datos de ejemplo, es posible trabajar con el navegador de Internet Sand en línea como un applet (conectarse a un servidor remoto) o después de localizar los datos y luego abrirlo localmente. En el primer caso, para cada acción tomada, la arquitectura cliente-servidor decidirá qué solicitar al servidor. En el último caso, el navegador utilizará la arquitectura de designación de pares de pares para localizar primero los datos.6. Observaciones finales Se ha dado una descripción general de nuestros esfuerzos para proporcionar acceso remoto a datos espaciales grandes. Hemos esbozado nuestros enfoques e introdujimos sus elementos individuales. Nuestro enfoque de cliente cliente mejora el rendimiento del sistema mediante el uso de métodos de almacenamiento en caché eficientes cuando se accede a un servidor remoto desde clientes delgados. Nombera un enfoque alternativo que mejora el rendimiento bajo un sistema de servidor de clientes existentes mediante el uso de recursos de cliente inactivo cuando los usuarios individuales desean trabajar en un conjunto de datos por períodos más largos de tiempo utilizando las computadoras de sus clientes. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que admitirán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Suponemos que un par (cliente) puede no estar disponible en cualquier momento y, por lo tanto, las disposiciones deben estar en su lugar para manejar dicha situación. Para abordar esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos ejecutar estudios integrales de rendimiento sobre nuestros métodos. Otro problema es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es deseable buscar un mecanismo que admita el intercambio de datos por diseño. El protocolo XML [3] ha surgido para convertirse prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando para hacer que Sand XML sea compatible para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco de arena. Esto convertirá el sistema de arena en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que se implementará en la mayoría de las plataformas, funcionará de manera eficiente dadas grandes cantidades de datos, poder tocar cualquier fuente de datos habilitada para GML y proporcionar un uso fácil de usarinterfaz gráfica del usuario. Esto también convertirá el sistema de arena de un prototipo orientado a la investigación en un producto que los usuarios finales podrían utilizar para acceder, ver y analizar sus datos de manera eficiente y con un esfuerzo mínimo.7. Referencias [1] Fedstats: la puerta de entrada a estadísticas de más de 100 agencias federales de EE. UU.http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación de datos geográficos, gestión, integración, análisis y diseminación.http://www.esri.com/software/ arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (XML).http://www.w3.org/xml/, 2002. [4] Lenguaje de marcado de geografía (GML) 2.0.http://opengis.net/gml/01-029/gml2.html, 2002. [5] MapQuest: sitio de mapeo interactivo centrado en el consumidor en la web.http://www.mapquest.com, 2002. [6] Mapsonus: conjunto de servicios geográficos en línea.http://www.mapsonus.com, 2002. [7] R. Anderson. El servicio de la eternidad. En Actas del Pragocrypt96, páginas 242-252, Praga, República Checa, septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. El almacenamiento en almacenamiento web y las distribuciones similares a ZIPF: 9 Figura 3: Salida de muestra del navegador de Internet de arena: los puntos oscuros grandes indican el resultado de una consulta que busca todos los sitios de arsénico a una distancia dada de Arkansas. Se utilizan diferentes tonos de color para indicar el orden de clasificación por la distancia desde un punto dado. Evidencia e implicaciones. En Actas del IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Actas IEEE Visualization97 (temas de Hot Hot de Late Breaking), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morrise I. Stoica. Almacenamiento cooperativo de área de amplio área con CFS. En Actas de la ACM Sosp01, páginas 202-215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de caché web. Redes informáticas y sistemas ISDN, 28 (7-11): 907-920, mayo de 1996. [12] C. Esperan¸ca y H. Samet. Experiencia con Sand/TCL: una herramienta de secuencias de comandos para bases de datos espaciales. Journal of Visual Languages and Computing, 13 (2): 229-255, abril de 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Squirrel: un caché web de pares descentralizado. Rice University/Microsoft Research, presentada para su publicación, 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y.Yerushalmi. Almacenamiento en caché web con hashing consistente. Computer Networks, 31 (11-16): 1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S.Rhea, H. Weatherspoon, W. Weimer, C. Wells y B. Zhao. Oceanstore: una arquitectura para la tienda persistente a escala global. En Actas de ACM Asplos00, páginas 190-201, Cambridge, MA, noviembre de 2000. [16] M. Potmesil. Mapas vivos: Ver información geoespacial en el www. Redes informáticas y sistemas ISDN, 29 (8-13): 1327-1342, septiembre de 1997. También Hyper Actas de la 6ta Conferencia Internacional de la World Wide Webs, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase y S. Gadde. No todos los golpes son iguales: almacenamiento en caché del proxy cooperativo sobre una red de área ancha. Redes informáticas y sistemas ISDN, 30 (22-23): 2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en el pasado, una utilidad de almacenamiento de pares a gran escala y a gran escala. En Actas de la ACM Sosp01, páginas 160-173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de estructuras de datos espaciales: gráficos por computadora, procesamiento de imágenes y SIG. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] Seti@Home.http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. COMPUTADOR GRÁFICOS, 17 (3): 1-11, julio de 1983. También procedimientos de la conferencia SigGraph83, Detroit, julio de 1983. 10