Marco unificado de maximización de utilidad para la selección de recursos en el Instituto de Tecnología del Lenguaje Luo Si. Escuela de Ciencias de la Computación de la Universidad Carnegie Mellon, Pittsburgh, PA 15213 lsi@cs.cmu.edu Jamie Callan Instituto de Tecnología del Lenguaje. Escuela de Ciencias de la Computación de la Universidad Carnegie Mellon, Pittsburgh, PA 15213 callan@cs.cmu.edu RESUMEN Este artículo presenta un marco de utilidad unificado para la selección de recursos de recuperación de información textual distribuida. Este nuevo marco muestra una forma eficiente y efectiva de inferir las probabilidades de relevancia de todos los documentos en las bases de datos de texto. Con la información de relevancia estimada, la selección de recursos puede realizarse optimizando explícitamente los objetivos de diferentes aplicaciones. Específicamente, cuando se utiliza para la recomendación de bases de datos, la selección se optimiza para el objetivo de alta recuperación (incluyendo tantos documentos relevantes como sea posible en las bases de datos seleccionadas); cuando se utiliza para la recuperación distribuida de documentos, la selección apunta al objetivo de alta precisión (alta precisión en la lista final combinada de documentos). Este nuevo modelo proporciona un marco más sólido para la recuperación distribuida de información. Los estudios empíricos muestran que es al menos tan efectivo como otros algoritmos de vanguardia. Categorías y Descriptores de Asignaturas H.3.3 [Búsqueda y Recuperación de Información]: Términos Generales Algoritmos 1. INTRODUCCIÓN Los motores de búsqueda convencionales como Google o AltaVista utilizan una solución de recuperación de información ad-hoc al asumir que todos los documentos buscables pueden ser copiados en una base de datos centralizada única con el propósito de indexarlos. La recuperación de información distribuida, también conocida como búsqueda federada, es diferente de la recuperación de información ad-hoc, ya que aborda los casos en los que los documentos no pueden ser adquiridos y almacenados en una sola base de datos. Por ejemplo, los contenidos de la Web oculta (también llamados contenidos invisibles o de la Web profunda) son información en la Web que no puede ser accedida por los motores de búsqueda convencionales. Se estima que el contenido web oculto es de 2 a 50 veces más grande que el contenido que puede ser buscado por los motores de búsqueda convencionales. Por lo tanto, es muy importante buscar este tipo de información valiosa. La arquitectura de la solución de búsqueda distribuida está altamente influenciada por diferentes características ambientales. En una pequeña red local, como en entornos de pequeñas empresas, los proveedores de información pueden cooperar para proporcionar estadísticas de corpus o utilizar el mismo tipo de motores de búsqueda. La investigación temprana en recuperación de información distribuida se centró en este tipo de entornos cooperativos [1,8]. Por otro lado, en una red de área amplia como entornos corporativos muy grandes o en la Web hay muchos tipos de motores de búsqueda y es difícil asumir que todos los proveedores de información puedan cooperar como se requiere. Aunque estén dispuestos a cooperar en estos entornos, puede ser difícil hacer cumplir una única solución para todos los proveedores de información o detectar si las fuentes de información proporcionan la información correcta según lo requerido. Muchas aplicaciones caen en el último tipo de entornos no cooperativos, como el proyecto Mind [16], que integra bibliotecas digitales no cooperativas, o el sistema QProber [9], que admite la navegación y búsqueda de bases de datos ocultas en la Web no cooperativas. En este artículo, nos enfocamos principalmente en entornos no cooperativos que contienen múltiples tipos de motores de búsqueda independientes. Hay tres subproblemas importantes en la recuperación de información distribuida. Primero, se debe adquirir información sobre el contenido de cada base de datos individual (representación de recursos) [1,8,21]. Segundo, dado una consulta, se debe seleccionar un conjunto de recursos para realizar la búsqueda (selección de recursos) [5,7,21]. Tercero, los resultados recuperados de todos los recursos seleccionados deben fusionarse en una lista final única antes de que pueda presentarse al usuario final (recuperación y fusión de resultados) [1,5,20,22]. Existen muchos tipos de soluciones para la recuperación de información distribuida. Invisible-web.net proporciona navegación guiada de bases de datos web ocultas al recopilar las descripciones de recursos de estas bases de datos y construir jerarquías de clases que las agrupan por temas similares. Un sistema de recomendación de bases de datos va un paso más allá que un sistema de navegación como Invisible-web.net al recomendar las fuentes de información más relevantes para las consultas de los usuarios. Está compuesto por la descripción del recurso y los componentes de selección de recursos. Esta solución es útil cuando los usuarios desean explorar las bases de datos seleccionadas por sí mismos en lugar de pedir al sistema que recupere documentos relevantes automáticamente. La recuperación distribuida de documentos es una tarea más sofisticada. Selecciona fuentes de información relevantes para las consultas de los usuarios, al igual que lo hace el sistema de recomendación de la base de datos. Además, las consultas de los usuarios se envían a las bases de datos seleccionadas correspondientes y las listas clasificadas individuales devueltas se fusionan en una lista única para presentar a los usuarios. El objetivo de un sistema de recomendación de bases de datos es seleccionar un pequeño conjunto de recursos que contengan tantos documentos relevantes como sea posible, lo cual llamamos un objetivo de alto recuerdo. Por otro lado, la efectividad de la recuperación distribuida de documentos suele medirse por la Precisión de la lista de resultados finales de documentos fusionados, a la que llamamos un objetivo de alta precisión. Investigaciones previas indicaron que estos dos objetivos están relacionados pero no son idénticos [4,21]. Sin embargo, la mayoría de las soluciones anteriores simplemente utilizan un algoritmo de selección de recursos efectivo del sistema de recomendación de bases de datos para el sistema de recuperación de documentos distribuido o resuelven la inconsistencia con métodos heurísticos [1,4,21]. Este documento presenta un marco unificado de maximización de utilidad para integrar el problema de selección de recursos tanto de recomendación de bases de datos como de recuperación de documentos distribuidos, tratándolos como objetivos de optimización diferentes. Primero, se construye una base de datos de muestra centralizada mediante el muestreo aleatorio de una pequeña cantidad de documentos de cada base de datos con muestreo basado en consultas; también se estiman las estadísticas del tamaño de la base de datos. Un modelo de transformación logística se aprende fuera de línea con una pequeña cantidad de consultas de entrenamiento para mapear las puntuaciones de documentos centralizadas en la base de datos de muestra centralizada a las probabilidades correspondientes de relevancia. Segundo, después de que se envía una nueva consulta, la consulta se puede utilizar para buscar en la base de datos de muestras centralizada que produce una puntuación para cada documento muestreado. La probabilidad de relevancia para cada documento en la base de datos de muestra centralizada puede estimarse aplicando el modelo logístico al puntaje de cada documento. Entonces, las probabilidades de relevancia de todos los documentos (en su mayoría no vistos) entre las bases de datos disponibles pueden ser estimadas utilizando las probabilidades de relevancia de los documentos en la base de datos de muestra centralizada y las estimaciones del tamaño de la base de datos. Para la tarea de selección de recursos para un sistema de recomendación de bases de datos, las bases de datos pueden ser clasificadas por el número esperado de documentos relevantes para cumplir con el objetivo de alto recall. Para la selección de recursos para un sistema distribuido de recuperación de documentos, se prefieren las bases de datos que contienen un pequeño número de documentos con grandes probabilidades de relevancia sobre las bases de datos que contienen muchos documentos con pequeñas probabilidades de relevancia. Este criterio de selección cumple con el objetivo de alta precisión de la aplicación de recuperación de documentos distribuidos. Además, se aplica el algoritmo de aprendizaje semisupervisado (SSL) [20,22] para fusionar los documentos devueltos en una lista final clasificada. El marco de utilidad unificado hace muy pocas suposiciones y funciona en entornos no cooperativos. Dos características clave lo convierten en un modelo más sólido para la recuperación de información distribuida: i) Formaliza los problemas de selección de recursos de diferentes aplicaciones como diversas funciones de utilidad, y optimiza las funciones de utilidad para lograr los resultados óptimos correspondientes; y ii) Muestra una forma efectiva y eficiente de estimar las probabilidades de relevancia de todos los documentos en todas las bases de datos. Específicamente, el marco construye modelos logísticos en la base de datos de muestra centralizada para transformar los puntajes de recuperación centralizados en las probabilidades correspondientes de relevancia y utiliza la base de datos de muestra centralizada como puente entre las bases de datos individuales y el modelo logístico. El esfuerzo humano (juicio de relevancia) necesario para entrenar el modelo logístico centralizado único no aumenta con el número de bases de datos. Esta es una gran ventaja sobre investigaciones anteriores, las cuales requerían que la cantidad de esfuerzo humano fuera lineal con el número de bases de datos [7,15]. El marco de utilidad unificada no solo es más sólido teóricamente, sino también muy efectivo. Los estudios empíricos muestran que el nuevo modelo es al menos tan preciso como los algoritmos de vanguardia en una variedad de configuraciones. La siguiente sección discute el trabajo relacionado. La sección 3 describe el nuevo modelo unificado de maximización de utilidad. La sección 4 explica nuestra metodología experimental. Las secciones 5 y 6 presentan nuestros resultados experimentales para la selección de recursos y la recuperación de documentos. La sección 7 concluye. 2. Investigación previa Ha habido una considerable investigación sobre todos los subproblemas de la recuperación de información distribuida. Exploramos los trabajos más relacionados en esta sección. El primer problema de la recuperación de información distribuida es la representación de recursos. El protocolo STARTS es una solución para adquirir descripciones de recursos en entornos cooperativos [8]. Sin embargo, en entornos no cooperativos, aunque las bases de datos estén dispuestas a compartir su información, no es fácil juzgar si la información que proporcionan es precisa o no. Además, no es fácil coordinar las bases de datos para proporcionar representaciones de recursos que sean compatibles entre sí. Por lo tanto, en entornos no cooperativos, una opción común es el muestreo basado en consultas, que genera y envía consultas de forma aleatoria a motores de búsqueda individuales y recupera algunos documentos para construir las descripciones. Dado que los documentos muestreados son seleccionados por consultas aleatorias, el muestreo basado en consultas no es fácilmente engañado por ningún spammer adversario que esté interesado en atraer más tráfico. Los experimentos han demostrado que descripciones de recursos bastante precisas pueden ser construidas enviando alrededor de 80 consultas y descargando alrededor de 300 documentos [1]. Muchos algoritmos de selección de recursos como gGlOSS/vGlOSS [8] y CORI [1] han sido propuestos en la última década. El algoritmo CORI representa cada base de datos por sus términos, las frecuencias de los documentos y un pequeño número de estadísticas del corpus (detalles en [1]). Como investigaciones previas en diferentes conjuntos de datos han demostrado que el algoritmo CORI es el más estable y efectivo de los tres algoritmos [1,17,18], lo utilizamos como algoritmo base en este trabajo. El algoritmo de selección de recursos de estimación de distribución de documentos relevantes (ReDDE [21]) es un algoritmo reciente que intenta estimar la distribución de documentos relevantes en las bases de datos disponibles y clasifica las bases de datos en consecuencia. Aunque se ha demostrado que el algoritmo ReDDE es efectivo, se basa en constantes heurísticas que se establecen empíricamente [21]. El último paso del subproblema de recuperación de documentos es la fusión de resultados, que es el proceso de transformar puntuaciones de documentos específicas de la base de datos en puntuaciones de documentos independientes de la base de datos comparables. El algoritmo de fusión de resultados de aprendizaje semisupervisado (SSL) [20,22] utiliza los documentos adquiridos mediante muestreo basado en consultas como datos de entrenamiento y regresión lineal para aprender los modelos de fusión específicos de la base de datos y de la consulta. Estos modelos lineales se utilizan para convertir las puntuaciones de documentos específicas de la base de datos en las puntuaciones de documentos centralizadas aproximadas. El algoritmo SSL ha demostrado ser efectivo [22]. Sirve como un componente importante de nuestro marco unificado de maximización de utilidad (Sección 3). Para lograr resultados precisos en la recuperación de documentos, muchos métodos anteriores simplemente utilizan algoritmos de selección de recursos que son efectivos en sistemas de recomendación de bases de datos. Pero como se señaló anteriormente, un algoritmo de selección de recursos optimizado para un alto recuerdo puede no funcionar bien para la recuperación de documentos, que tiene como objetivo la alta precisión. Este tipo de inconsistencia ha sido observada en investigaciones previas [4,21]. La investigación en [21] intentó resolver el problema con un método heurístico. La investigación más similar a lo que proponemos aquí es el marco teórico de la toma de decisiones (DTF) [7,15]. Este marco de trabajo calcula una selección que minimiza los costos generales (por ejemplo, calidad de recuperación, tiempo) del sistema de recuperación de documentos y se han propuesto varios métodos [15] para estimar la calidad de recuperación. Sin embargo, dos puntos distinguen nuestra investigación del modelo DTF. Primero, el DTF es un marco diseñado específicamente para la recuperación de documentos, pero nuestro nuevo modelo integra dos aplicaciones distintas con diferentes requisitos (recomendación de bases de datos y recuperación distribuida de documentos) en el mismo marco unificado. Segundo, el DTF construye un modelo para cada base de datos para calcular las probabilidades de relevancia. Esto requiere juicios de relevancia humana para los resultados recuperados de cada base de datos. Por el contrario, nuestro enfoque solo construye un modelo logístico para la base de datos de muestra centralizada. La base de datos de muestra centralizada puede servir como puente para conectar las bases de datos individuales con el modelo logístico centralizado, de esta manera se pueden estimar las probabilidades de relevancia de los documentos en diferentes bases de datos. Esta estrategia puede ahorrar una gran cantidad de esfuerzo en juicio humano y es una gran ventaja del marco de maximización de utilidad unificada sobre el DTF, especialmente cuando hay un gran número de bases de datos. MARCO DE MAXIMIZACIÓN DE UTILIDAD UNIFICADA El marco de Maximización de Utilidad Unificada (UUM) se basa en estimar las probabilidades de relevancia de los documentos (en su mayoría no vistos) disponibles en el entorno de búsqueda distribuida. En esta sección describimos cómo se estiman las probabilidades de relevancia y cómo son utilizadas por el modelo de Maximización de Utilidad Unificado. También describimos cómo el modelo puede ser optimizado para el objetivo de alto recuerdo de un sistema de recomendación de base de datos y el objetivo de alta precisión de un sistema de recuperación de documentos distribuido. 3.1 Estimación de Probabilidades de Relevancia Como se señaló anteriormente, el propósito de la selección de recursos es el alto recuerdo y el propósito de la recuperación de documentos es la alta precisión. Para cumplir con estos objetivos diversos, el problema clave es estimar las probabilidades de relevancia de los documentos en varias bases de datos. Este es un problema difícil porque solo podemos observar una muestra de los contenidos de cada base de datos utilizando muestreo basado en consultas. Nuestra estrategia es aprovechar al máximo toda la información disponible para calcular las estimaciones de probabilidad. 3.1.1 Aprendizaje de Probabilidades de Relevancia En el paso de descripción de recursos, la base de datos de muestra centralizada se construye mediante muestreo basado en consultas y los tamaños de la base de datos se estiman utilizando el método de muestreo y remuestreo [21]. Al mismo tiempo, se aplica un algoritmo de recuperación efectivo (Inquery [2]) en la base de datos de muestra centralizada con un pequeño número (por ejemplo, 50) de consultas de entrenamiento. Para cada consulta de entrenamiento, se aplica el algoritmo de selección de recursos CORI [1] para seleccionar un cierto número (por ejemplo, 10) de bases de datos y recuperar 50 identificadores de documentos de cada base de datos. El algoritmo de fusión de resultados SSL [20,22] se utiliza para combinar los resultados. Luego, podemos descargar los 50 documentos principales de la lista final fusionada y calcular sus puntajes centralizados correspondientes utilizando Inquery y las estadísticas del corpus de la base de datos de muestra centralizada. Las puntuaciones centralizadas se normalizan aún más (dividiéndolas por la puntuación centralizada máxima para cada consulta), ya que este método ha sido sugerido para mejorar la precisión de la estimación en investigaciones anteriores [15]. El juicio humano se adquiere para esos documentos y se construye un modelo logístico para transformar las puntuaciones de documentos centralizados normalizados en probabilidades de relevancia de la siguiente manera: ( ) ))(exp(1 ))(exp( |)( _ _ dSba dSba drelPdR ccc ccc ++ + == (1) donde )( _ dSc es la puntuación de documento centralizada normalizada y ac y bc son los dos parámetros del modelo logístico. Estos dos parámetros se estiman maximizando las probabilidades de relevancia de las consultas de entrenamiento. El modelo logístico nos proporciona la herramienta para calcular las probabilidades de relevancia a partir de las puntuaciones de documentos centralizadas. 3.1.2 Estimación de las puntuaciones de documentos centralizadas Cuando el usuario envía una nueva consulta, se calculan las puntuaciones de documentos centralizadas de los documentos en la base de datos de muestra centralizada. Sin embargo, para calcular las probabilidades de relevancia, necesitamos estimar las puntuaciones de los documentos centralizados para todos los documentos en las bases de datos en lugar de solo los documentos muestreados. Este objetivo se logra utilizando: las puntuaciones centralizadas de los documentos en la base de datos de muestra centralizada y las estadísticas del tamaño de la base de datos. Definimos el factor de escala de la base de datos para la base de datos i como la razón entre el tamaño estimado de la base de datos y el número de documentos muestreados de esta base de datos de la siguiente manera: SF_i = ^N_db / _N_db_samp_i donde ^N_db es el tamaño estimado de la base de datos y _N_db_samp_i es el número de documentos de la base de datos i en la base de datos de muestra centralizada. La intuición detrás del factor de escala de la base de datos es que, para una base de datos cuyo factor de escala es 50, si un documento de esta base de datos en la base de datos de muestra centralizada tiene una puntuación de documento centralizada de 0.5, podríamos suponer que hay alrededor de 50 documentos en esa base de datos que tienen puntuaciones de alrededor de 0.5. De hecho, podemos aplicar un método de interpolación lineal no paramétrico más fino para estimar la curva de puntuación del documento centralizado para cada base de datos. Formalmente, clasificamos todos los documentos muestreados de la base de datos i-ésima por sus puntajes de documento centralizado 34 para obtener la lista de puntajes de documento centralizado muestreado {Sc(dsi1), Sc(dsi2), Sc(dsi3),…..} para la base de datos i; asumimos que si pudiéramos calcular los puntajes de documento centralizado para todos los documentos en esta base de datos y obtener la lista completa de puntajes de documento centralizado, el documento superior en la lista muestreada tendría un rango de SFdbi/2, el segundo documento en la lista muestreada tendría un rango de SFdbi3/2, y así sucesivamente. Por lo tanto, los puntos de datos de los documentos muestreados en la lista completa son: {(SFdbi/2, Sc(dsi1)), (SFdbi3/2, Sc(dsi2)), (SFdbi5/2, Sc(dsi3)),…..}. La interpolación lineal por tramos se aplica para estimar la curva de puntuación del documento centralizado, como se ilustra en la Figura 1. La lista completa de puntuaciones de documentos centralizados se puede estimar calculando los valores de diferentes rangos en la curva de documentos centralizados como: ],1[,)(S ^^ c idbij Njd ∈ . Se puede observar en la Figura 1 que más puntos de datos de muestra producen estimaciones más precisas de las curvas de puntuación del documento centralizado. Sin embargo, para bases de datos con grandes proporciones de escala de base de datos, este tipo de interpolación lineal puede ser bastante inexacta, especialmente para los documentos mejor clasificados (por ejemplo, [1, SFdbi/2]). Por lo tanto, se propone una solución alternativa para estimar las puntuaciones de documentos centralizados de los documentos mejor clasificados para bases de datos con ratios a gran escala (por ejemplo, mayores de 100). Específicamente, se construye un modelo logístico para cada una de estas bases de datos. El modelo logístico se utiliza para estimar la puntuación del documento centralizado superior 1 en la base de datos correspondiente utilizando los dos documentos muestreados de esa base de datos con las puntuaciones centralizadas más altas. 0iα , 1iα y 2iα son los parámetros del modelo logístico. Para cada consulta de entrenamiento, se descarga el documento mejor recuperado de cada base de datos y se calcula la puntuación del documento centralizado correspondiente. Junto con las puntuaciones de los dos documentos muestreados principales, estos parámetros pueden ser estimados. Después de estimar la puntuación centralizada del documento principal, se ajusta una función exponencial para la parte superior ([1, SFdbi/2]) de la curva de puntuación del documento centralizado como: ]2/,1[)*exp()( 10 ^ idbiiijc SFjjdS ∈+= ββ (4) ^ 0 1 1log( ( ))i c i iS dβ β= − (5) )12/( ))(log()((log( ^ 11 1 − − = idb icic i SF dSdsS β (6) Los dos parámetros 0iβ y 1iβ se ajustan para asegurarse de que la función exponencial pase por los dos puntos (1, ^ 1)( ic dS ) y (SFdbi/2, Sc(dsi1)). La función exponencial se utiliza únicamente para ajustar la parte superior de la curva de puntuación del documento centralizado, mientras que la parte inferior de la curva sigue siendo ajustada con el método de interpolación lineal descrito anteriormente. El ajuste mediante la función exponencial de los documentos mejor clasificados ha demostrado empíricamente producir resultados más precisos. A partir de las curvas de puntuación de documentos centralizadas, podemos estimar las listas completas de puntuación de documentos centralizados correspondientes para todas las bases de datos disponibles. Después de que las puntuaciones estimadas de los documentos centralizados se normalizan, las listas completas de probabilidades de relevancia pueden ser construidas a partir de las listas completas de puntuaciones de documentos centralizados mediante la Ecuación 1. Formalmente, para la i-ésima base de datos, la lista completa de probabilidades de relevancia es: ],1[,)(R ^^ idbij Njd ∈. 3.2 El Modelo Unificado de Maximización de Utilidad En esta sección, definimos formalmente el nuevo modelo unificado de maximización de utilidad, que optimiza los problemas de selección de recursos para dos objetivos de alta recuperación (recomendación de bases de datos) y alta precisión (recuperación de documentos distribuidos) en el mismo marco. En la tarea de recomendación de bases de datos, el sistema necesita decidir cómo clasificar las bases de datos. En la tarea de recuperación de documentos, el sistema no solo necesita seleccionar las bases de datos, sino que también necesita decidir cuántos documentos recuperar de cada base de datos seleccionada. Generalizamos el proceso de selección de recomendaciones de bases de datos, que implícitamente recomienda todos los documentos en cada base de datos seleccionada, como un caso especial de la decisión de selección para la tarea de recuperación de documentos. Formalmente, denotamos di como el número de documentos que nos gustaría recuperar de la base de datos i y ,.....},{ 21 ddd = como una acción de selección para todas las bases de datos. La decisión de selección de la base de datos se toma en base a las listas completas de probabilidades de relevancia para todas las bases de datos. Las listas completas de probabilidades de relevancia se infieren a partir de toda la información disponible, específicamente sR, que representa las descripciones de recursos adquiridas mediante muestreo basado en consultas y las estimaciones del tamaño de la base de datos adquiridas mediante muestreo-resampleo; cS representa las puntuaciones de documentos centralizadas de los documentos en la base de datos de muestra centralizada. Si el método de estimación de puntajes de documentos centralizados y probabilidades de relevancia en la Sección 3.1 es aceptable, entonces las listas completas más probables de probabilidades de relevancia pueden derivarse y las denotamos como 1 ^ ^ * 1{(R( ), [1, ]),dbjd j Nθ = ∈ 2 ^ ^ 2(R( ), [1, ]),.......}dbjd j N∈. El vector aleatorio   denota un conjunto arbitrario de listas completas de probabilidades de relevancia y ),|( cs SRP θ como la probabilidad de generar este conjunto de listas. Finalmente, a cada acción de selección d y un conjunto de listas completas de la Figura 1. Construcción de la lista completa de puntuación de documentos centralizada mediante interpolación lineal (el factor de escala de la base de datos es 50). Para 35 probabilidades de relevancia θ, asociamos una función de utilidad ),( dU θ que indica el beneficio de realizar la selección d cuando las verdaderas listas completas de probabilidades de relevancia son θ. Por lo tanto, la decisión de selección definida por el marco bayesiano es: θθθ θ dSRPdUd cs d ).|(),(maxarg * = (7). Un enfoque común para simplificar el cálculo en el marco bayesiano es calcular solo la función de utilidad en los valores de parámetros más probables en lugar de calcular toda la expectativa. En otras palabras, solo necesitamos calcular ),( * dU θ y la Ecuación 7 se simplifica de la siguiente manera: ),(maxarg * * θdUd d = (8) Esta ecuación sirve como el modelo básico tanto para el sistema de recomendación de bases de datos como para el sistema de recuperación de documentos. 3.3 Selección de Recursos para Alto Recuerdo Alto recuerdo es el objetivo del algoritmo de selección de recursos en tareas de búsqueda federada como la recomendación de bases de datos. El objetivo es seleccionar un pequeño conjunto de recursos (por ejemplo, menos de N bases de datos de Nsdb) que contengan tantos documentos relevantes como sea posible, lo cual puede definirse formalmente como: = = i N j iji idb ddIdU ^ 1 ^ * )(R)(),( θ (9) I(di) es la función indicadora, que es 1 cuando se selecciona la i-ésima base de datos y 0 en caso contrario. Inserta esta ecuación en el modelo básico de la Ecuación 8 y asocia la restricción del número de base de datos seleccionado para obtener lo siguiente: sdb i i i N j iji d NdItoSubject ddId idb = = = )(: )(R)(maxarg ^ 1 ^* (10) La solución de este problema de optimización es muy simple. Podemos calcular el número esperado de documentos relevantes para cada base de datos de la siguiente manera: = = idb i N j ijRd dN ^ 1 ^^ )(R (11) Las bases de datos Nsdb con el mayor número esperado de documentos relevantes pueden ser seleccionadas para cumplir con el objetivo de alto recall. Llamamos a esto el algoritmo UUM/HR (Maximización Unificada de Utilidad para Alta Recuperación). 3.4 Selección de Recursos para Alta Precisión La alta precisión es el objetivo del algoritmo de selección de recursos en tareas de búsqueda federada como la recuperación distribuida de documentos. Se mide mediante la Precisión en la parte superior de la lista final de documentos fusionados. Este criterio de alta precisión se realiza mediante la siguiente función de utilidad, que mide la Precisión de los documentos recuperados de las bases de datos seleccionadas. = = i d j iji i ddIdU 1 ^ * )(R)(),( θ (12) Tenga en cuenta que la diferencia clave entre la Ecuación 12 y la Ecuación 9 es que la Ecuación 9 suma las probabilidades de relevancia de todos los documentos en una base de datos, mientras que la Ecuación 12 solo considera una parte mucho más pequeña de la clasificación. Específicamente, podemos calcular la decisión de selección óptima mediante: = = i d j iji d i ddId 1 ^* )(R)(maxarg (13) Diferentes tipos de restricciones causadas por las diferentes características de las tareas de recuperación de documentos pueden estar asociadas con el problema de optimización anterior. La más común es seleccionar un número fijo (Nsdb) de bases de datos y recuperar un número fijo (Nrdoc) de documentos de cada base de datos seleccionada, definido formalmente como: 0, )(: )(R)(maxarg 1 ^* ≠= = = = irdoci sdb i i i d j iji d difNd NdItoSubject ddId i (14) Este problema de optimización puede resolverse fácilmente calculando el número de documentos relevantes esperados en la parte superior de la lista completa de probabilidades de relevancia de cada base de datos: = = rdoc i N j ijRdTop dN 1 ^^ _ )(R (15) Luego, las bases de datos pueden ser clasificadas por estos valores y seleccionadas. Llamamos a este algoritmo UUM/HP-FL (Maximización Unificada de Utilidad para Alta Precisión con clasificaciones de documentos de longitud fija de cada base de datos seleccionada). Una situación más compleja es variar el número de documentos recuperados de cada base de datos seleccionada. Más específicamente, permitimos que diferentes bases de datos seleccionadas devuelvan diferentes cantidades de documentos. Para simplificar, se requiere que las longitudes de la lista de resultados sean múltiplos de un número base 10. (Este valor también puede variar, pero para simplificar se establece en 10 en este documento). Esta restricción está establecida para simular el comportamiento de los motores de búsqueda comerciales en la web. (Motores de búsqueda como Google y AltaVista devuelven solo 10 o 20 identificadores de documentos por página de resultados). Este procedimiento ahorra tiempo de cálculo al calcular la selección óptima de la base de datos al permitir que el paso de programación dinámica sea de 10 en lugar de 1 (más detalles se discuten posteriormente). Para una mayor simplificación, restringimos la selección a un máximo de 100 documentos de cada base de datos (di<=100). Luego, el problema de optimización de la selección se formaliza de la siguiente manera: ]10..,,2,1,0[,*10 )(: )(R)(maxarg _ 1 ^* ∈= = = = = kkd Nd NdItoSubject ddId i rdocTotal i i sdb i i i d j iji d i (16) NTotal_rdoc es el número total de documentos a recuperar. Desafortunadamente, no hay una solución simple para este problema de optimización como la hay para las Ecuaciones 10 y 14. Sin embargo, se puede aplicar un algoritmo de programación dinámica de 36 para calcular la solución óptima. Los pasos básicos de este método de programación dinámica se describen en la Figura 2. Dado que este algoritmo permite recuperar listas de resultados de longitudes variables de cada base de datos seleccionada, se le llama algoritmo UUM/HP-VL. Después de que se toman las decisiones de selección, se buscan las bases de datos seleccionadas y se recuperan los identificadores de documentos correspondientes de cada base de datos. El paso final de la recuperación de documentos es fusionar los resultados devueltos en una única lista clasificada con el algoritmo de aprendizaje semisupervisado. Se señaló anteriormente que el algoritmo SSL mapea las puntuaciones específicas de la base de datos en las puntuaciones de documentos centralizadas y construye la lista clasificada final en consecuencia, lo cual es consistente con todos nuestros procedimientos de selección donde se seleccionan los documentos con mayores probabilidades de relevancia (y por ende, puntuaciones de documentos centralizadas más altas). 4. METODOLOGÍA EXPERIMENTAL 4.1 Bancos de pruebas Es deseable evaluar algoritmos de recuperación de información distribuida con bancos de pruebas que simulen de cerca las aplicaciones del mundo real. Las colecciones web TREC WT2g o WT10g proporcionan una forma de dividir los documentos por diferentes servidores web. De esta manera, se podrían crear un gran número (O(1000)) de bases de datos con contenidos bastante diversos, lo que podría convertir a este banco de pruebas en un buen candidato para simular entornos operativos como la web oculta de dominio abierto. Sin embargo, dos debilidades de este banco de pruebas son: i) Cada base de datos contiene solo una pequeña cantidad de documentos (259 documentos en promedio para WT2g) [4]; y ii) El contenido de WT2g o WT10g se extrae arbitrariamente de la web. No es probable que una base de datos web oculta proporcione páginas personales o páginas web que indiquen que las páginas están en construcción y no contengan información útil en absoluto. Estos tipos de páginas web están contenidos en los conjuntos de datos WT2g/WT10g. Por lo tanto, los datos ruidosos de la Web no son similares a los contenidos de alta calidad de las bases de datos ocultas de la Web, que generalmente están organizados por expertos en el dominio. Otra opción es los datos de noticias/gobierno de TREC [1,15,17,18,21]. Los datos gubernamentales/noticias de TREC se centran en temas relativamente específicos. Comparado con los datos web de TREC: i) Los documentos de noticias/gobierno son mucho más similares a los contenidos proporcionados por una base de datos orientada a temas que a una página web arbitraria, ii) Una base de datos en este banco de pruebas es más grande que la de los datos web de TREC. En promedio, una base de datos contiene miles de documentos, lo cual es más realista que una base de datos de datos web de TREC con alrededor de 250 documentos. Dado que los contenidos y tamaños de las bases de datos en el banco de pruebas de noticias/gobierno de TREC son más similares a los de una base de datos orientada a temas, es un buen candidato para simular los entornos de recuperación de información distribuida de grandes organizaciones (empresas) o sitios web ocultos específicos de dominio, como West, que proporciona acceso a bases de datos de texto legales, financieras y de noticias [3]. Dado que la mayoría de los sistemas actuales de recuperación de información distribuida están desarrollados para entornos de grandes organizaciones (empresas) o para la Web oculta de dominios específicos en lugar de la Web oculta de dominio abierto, en este trabajo se eligió el banco de pruebas de noticias/gobierno de TREC. El banco de pruebas Trec123-100col-bysource es uno de los más utilizados en las pruebas de noticias y gobierno de TREC [1,15,17,21]. Fue elegido en este trabajo. Tres bancos de pruebas en [21] con distribuciones de tamaño de base de datos sesgadas y diferentes tipos de distribuciones de documentos relevantes también se utilizaron para proporcionar una simulación más exhaustiva para entornos reales. Se crearon 100 bases de datos a partir de los CDs de TREC 1, 2 y 3. Fueron organizados por fuente y fecha de publicación [1]. Los tamaños de las bases de datos no están sesgados. Los detalles se encuentran en la Tabla 1. Tres bancos de pruebas construidos en [21] se basaron en el banco de pruebas trec123-100colbysource. Cada banco de pruebas contiene muchas bases de datos pequeñas y dos bases de datos grandes creadas al fusionar alrededor de 10 a 20 bases de datos pequeñas. Listas completas de probabilidades de relevancia para todas las bases de datos |DB|. Solución de selección óptima para la Ecuación 16. i) Crear el arreglo tridimensional: Sel (1..|DB|, 1..NTotal_rdoc/10, 1..Nsdb) Cada Sel (x, y, z) está asociado con una decisión de selección xyzd, que representa la mejor decisión de selección en la condición: solo se consideran bases de datos del número 1 al número x para la selección; se recuperarán un total de y*10 documentos; solo se seleccionan z bases de datos de los candidatos de la base de datos x. Y Sel (x, y, z) es el valor de utilidad correspondiente al elegir la mejor selección. ii) Inicializar Sel (1, 1..NTotal_rdoc/10, 1..Nsdb) solo con la información de relevancia estimada de la 1ª base de datos. iii) Iterar el candidato actual de la base de datos i desde 2 hasta |DB| Para cada entrada Sel (i, y, z): Encontrar k tal que: )10,min(1: ))()1,,1((maxarg *10 ^ * yktosubject dRzkyiSelk kj ij k ≤≤ +−−−= ≤ ),,1())()1,,1(( * *10 ^ * zyiSeldRzkyiSelIf kj ij −>+−−− ≤ Esto significa que debemos recuperar * 10 k∗ documentos de la base de datos i-ésima, de lo contrario no debemos seleccionar esta base de datos y se debe mantener la solución anterior mejor Sel (i-1, y, z). Luego establezca el valor de iyzd y Sel (i, y, z) en consecuencia. iv) La mejor solución de selección se da por _ /10| | Toral rdoc sdbDB N Nd y el valor de utilidad correspondiente es Sel (|DB|, NTotal_rdoc/10, Nsdb). Figura 2. El procedimiento de optimización de programación dinámica para la Ecuación 16. Tabla 1: Estadísticas del banco de pruebas. Número de documentos Tamaño (MB) Tamaño del banco de pruebas (GB) Mínimo Promedio Máximo Mínimo Promedio Máximo Trec123 3.2 752 10782 39713 28 32 42 Tabla 2: Estadísticas del conjunto de consultas. Nombre del conjunto de temas TREC Campo del tema TREC Longitud promedio (palabras) Trec123 51-150 Título 3.1 37 Trec123-2ldb-60col (representativo): Las bases de datos en el trec123-100col-bysource se ordenaron en orden alfabético. Dos grandes bases de datos fueron creadas al fusionar 20 bases de datos pequeñas con el método de round-robin. Por lo tanto, las dos bases de datos grandes tienen más documentos relevantes debido a sus tamaños grandes, aunque las densidades de documentos relevantes son aproximadamente iguales a las de las bases de datos pequeñas. Las 24 colecciones de Associated Press y las 16 colecciones de Wall Street Journal en el banco de pruebas trec123-100col-bysource se fusionaron en dos grandes bases de datos, APall y WSJall. Las otras 60 colecciones quedaron sin cambios. Las bases de datos APall y WSJall tienen una mayor densidad de documentos relevantes para las consultas de TREC que las bases de datos pequeñas. Por lo tanto, las dos bases de datos grandes tienen muchos más documentos relevantes que las bases de datos pequeñas. Las 13 colecciones del Registro Federal y las 6 colecciones del Departamento de Energía en el banco de pruebas trec123-100col-bysource se fusionaron en dos grandes bases de datos, FRall y DOEall. Las otras 80 colecciones quedaron sin cambios. Las bases de datos FRall y DOEall tienen densidades más bajas de documentos relevantes para las consultas de TREC que las bases de datos pequeñas, a pesar de ser mucho más grandes. Se crearon 100 consultas a partir de los campos de título de los temas de TREC 51-150. Las consultas 101-150 se utilizaron como consultas de entrenamiento y las consultas 51-100 se utilizaron como consultas de prueba (detalles en la Tabla 2). 4.2 Motores de búsqueda En los entornos de recuperación de información distribuida no cooperativa de grandes organizaciones (empresas) o en la Web oculta específica de dominio, diferentes bases de datos pueden utilizar diferentes tipos de motores de búsqueda. Para simular el entorno de múltiples motores de búsqueda, se utilizaron tres tipos diferentes de motores de búsqueda en los experimentos: INQUERY [2], un modelo de lenguaje estadístico de unigrama con suavizado lineal [12,20] y un algoritmo de recuperación TFIDF con peso ltc [12,20]. Todos estos algoritmos fueron implementados con la herramienta Lemur [12]. Estos tres tipos de motores de búsqueda fueron asignados a las bases de datos entre los cuatro bancos de pruebas de manera round-robin. 5. RESULTADOS: SELECCIÓN DE RECURSOS DE LA RECOMENDACIÓN DE BASES DE DATOS Todos los cuatro bancos de pruebas descritos en la Sección 4 fueron utilizados en los experimentos para evaluar la efectividad de la selección de recursos del sistema de recomendación de bases de datos. Las descripciones de los recursos fueron creadas utilizando muestreo basado en consultas. Se enviaron alrededor de 80 consultas a cada base de datos para descargar 300 documentos únicos. Las estadísticas del tamaño de la base de datos fueron estimadas mediante el método de muestra y remuestra [21]. Cincuenta consultas (101-150) se utilizaron como consultas de entrenamiento para construir el modelo logístico relevante y ajustar las funciones exponenciales de las curvas de puntuación de documentos centralizados para bases de datos de gran proporción (detalles en la Sección 3.1). Otros 50 consultas (51-100) se utilizaron como datos de prueba. Los algoritmos de selección de recursos de los sistemas de recomendación de bases de datos suelen compararse utilizando la métrica de recuperación nR [1,17,18,21]. Que B denote una clasificación base, que a menudo es la RBR (clasificación basada en relevancia), y E como una clasificación proporcionada por un algoritmo de selección de recursos. Y que Bi y Ei denoten el número de documentos relevantes en la base de datos clasificada i-ésima de B o E. Entonces, Rn se define de la siguiente manera: = = = k i i k i i k B E R 1 1 (17) Por lo general, el objetivo es buscar solo algunas bases de datos, por lo que nuestras cifras solo muestran resultados para la selección de hasta 20 bases de datos. Los experimentos resumidos en la Figura 3 compararon la efectividad de los tres algoritmos de selección de recursos, a saber, CORI, ReDDE y UUM/HR. El algoritmo UUM/HR se describe en la Sección 3.3. Se puede observar en la Figura 3 que los algoritmos ReDDE y UUM/HR son más efectivos (en los conjuntos de pruebas representativos, relevantes y no relevantes) o igual de efectivos (en el conjunto de pruebas Trec123-100Col) que el algoritmo de selección de recursos CORI. El algoritmo UUM/HR es más efectivo que el algoritmo ReDDE en los conjuntos de pruebas representativos y relevantes y es aproximadamente igual que el algoritmo ReDDE en los conjuntos de pruebas Trec123100Col y no relevantes. Esto sugiere que el algoritmo UUM/HR es más robusto que el algoritmo ReDDE. Se puede observar que al seleccionar solo algunas bases de datos en el Trec123-100Col o en los conjuntos de pruebas no relevantes, el algoritmo ReDEE tiene una pequeña ventaja sobre el algoritmo UUM/HR. Atribuimos esto a dos causas: i) El algoritmo ReDDE fue ajustado en el banco de pruebas Trec123-100Col; y ii) Aunque la diferencia es pequeña, esto puede sugerir que nuestro modelo logístico para estimar probabilidades de relevancia no es lo suficientemente preciso. Más datos de entrenamiento o un modelo más sofisticado pueden ayudar a resolver este pequeño rompecabezas. Colecciones seleccionadas. Colecciones seleccionadas. Plataforma de pruebas Trec123-100Col. Plataforma de pruebas representativa. Colección seleccionada. Colección seleccionada. Plataforma de pruebas relevante. Plataforma de pruebas no relevante. Figura 3. Experimentos de selección de recursos en los cuatro bancos de pruebas. 38 6. RESULTADOS: EFECTIVIDAD DE LA RECUPERACIÓN DE DOCUMENTOS Para la recuperación de documentos, se buscan en las bases de datos seleccionadas y los resultados devueltos se fusionan en una lista final única. En todos los experimentos discutidos en esta sección, los resultados obtenidos de bases de datos individuales fueron combinados por el algoritmo de fusión de resultados de aprendizaje semisupervisado. Esta versión del algoritmo SSL [22] tiene permitido descargar un pequeño número de textos de documentos devueltos sobre la marcha para crear datos de entrenamiento adicionales en el proceso de aprendizaje de los modelos lineales que mapean las puntuaciones de documentos específicos de la base de datos en puntuaciones de documentos centralizadas estimadas. Se ha demostrado ser muy efectivo en entornos donde solo se obtienen listas de resultados cortas de cada base de datos seleccionada [22]. Este es un escenario común en entornos operativos y fue el caso de nuestros experimentos. La efectividad de la recuperación de documentos se midió mediante la Precisión en la parte superior de la lista final de documentos. Los experimentos en esta sección se llevaron a cabo para estudiar la efectividad de recuperación de documentos de cinco algoritmos de selección, a saber, los algoritmos CORI, ReDDE, UUM/HR, UUM/HP-FL y UUM/HP-VL. Los últimos tres algoritmos fueron propuestos en la Sección 3. Todos los primeros cuatro algoritmos seleccionaron 3 o 5 bases de datos, y se recuperaron 50 documentos de cada base de datos seleccionada. El algoritmo UUM/HP-FL también seleccionó 3 o 5 bases de datos, pero se permitió ajustar el número de documentos a recuperar de cada base de datos seleccionada; el número recuperado estaba limitado a ser de 10 a 100, y un múltiplo de 10. El Trec123-100Col y los bancos de pruebas representativos fueron seleccionados para la recuperación de documentos, ya que representan dos casos extremos de efectividad en la selección de recursos; en un caso, el algoritmo CORI es tan bueno como los otros algoritmos y en el otro caso es bastante Tabla 5. Precisión en el banco de pruebas representativo cuando se seleccionaron 3 bases de datos. (La primera línea base es CORI; la segunda línea base para los métodos UUM/HP es UUM/HR). Precisión en la clasificación de documentos CORI ReDDE UUM/HR UUM/HP-FL UUM/HP-VL 5 documentos 0.3720 0.4080 (+9.7%) 0.4640 (+24.7%) 0.4600 (+23.7%)(-0.9%) 0.5000 (+34.4%)(+7.8%) 10 documentos 0.3400 0.4060 (+19.4%) 0.4600 (+35.3%) 0.4540 (+33.5%)(-1.3%) 0.4640 (+36.5%)(+0.9%) 15 documentos 0.3120 0.3880 (+24.4%) 0.4320 (+38.5%) 0.4240 (+35.9%)(-1.9%) 0.4413 (+41.4%)(+2.2) 20 documentos 0.3000 0.3750 (+25.0%) 0.4080 (+36.0%) 0.4040 (+34.7%)(-1.0%) 0.4240 (+41.3%)(+4.0%) 30 documentos 0.2533 0.3440 (+35.8%) 0.3847 (+51.9%) 0.3747 (+47.9%)(-2.6%) 0.3887 (+53.5%)(+1.0%) Tabla 6. Precisión en el banco de pruebas representativo cuando se seleccionaron 5 bases de datos. (La primera línea base es CORI; la segunda línea base para los métodos UUM/HP es UUM/HR). Precisión en la clasificación de documentos CORI ReDDE UUM/HR UUM/HP-FL UUM/HP-VL 5 documentos 0.3960 0.4080 (+3.0%) 0.4560 (+15.2%) 0.4280 (+8.1%)(-6.1%) 0.4520 (+14.1%)(-0.9%) 10 documentos 0.3880 0.4060 (+4.6%) 0.4280 (+10.3%) 0.4460 (+15.0%)(+4.2%) 0.4560 (+17.5%)(+6.5%) 15 documentos 0.3533 0.3987 (+12.9%) 0.4227 (+19.6%) 0.4440 (+25.7%)(+5.0%) 0.4453 (+26.0%)(+5.4%) 20 documentos 0.3330 0.3960 (+18.9%) 0.4140 (+24.3%) 0.4290 (+28.8%)(+3.6%) 0.4350 (+30.6%)(+5.1%) 30 documentos 0.2967 0.3740 (+26.1%) 0.4013 (+35.3%) 0.3987 (+34.4%)(-0.7%) 0.4060 (+36.8%)(+1.2%) Tabla 3. Precisión en el banco de pruebas trec123-100col-bysource cuando se seleccionaron 3 bases de datos. (La primera línea base es CORI; la segunda línea base para los métodos UUM/HP es UUM/HR). Precisión en la clasificación de documentos CORI ReDDE UUM/HR UUM/HP-FL UUM/HP-VL 5 documentos 0.3640 0.3480 (-4.4%) 0.3960 (+8.8%) 0.4680 (+28.6%)(+18.1%) 0.4640 (+27.5%)(+17.2%) 10 documentos 0.3360 0.3200 (-4.8%) 0.3520 (+4.8%) 0.4240 (+26.2%)(+20.5%) 0.4220 (+25.6%)(+19.9%) 15 documentos 0.3253 0.3187 (-2.0%) 0.3347 (+2.9%) 0.3973 (+22.2%)(+15.7%) 0.3920 (+20.5%)(+17.1%) 20 documentos 0.3140 0.2980 (-5.1%) 0.3270 (+4.1%) 0.3720 (+18.5%)(+13.8%) 0.3700 (+17.8%)(+13.2%) 30 documentos 0.2780 0.2660 (-4.3%) 0.2973 (+6.9%) 0.3413 (+22.8%)(+14.8%) 0.3400 (+22.3%)(+14.4%) Tabla 4. Precisión en el banco de pruebas trec123-100col-bysource cuando se seleccionaron 5 bases de datos. (El primer punto de referencia es CORI; el segundo punto de referencia para los métodos UUM/HP es UUM/HR). La precisión en la clasificación de documentos CORI ReDDE UUM/HR UUM/HP-FL UUM/HP-VL 5 documentos 0.4000 0.3920 (-2.0%) 0.4280 (+7.0%) 0.4680 (+17.0%)(+9.4%) 0.4600 (+15.0%)(+7.5%) 10 documentos 0.3800 0.3760 (-1.1%) 0.3800 (+0.0%) 0.4180 (+10.0%)(+10.0%) 0.4320 (+13.7%)(+13.7%) 15 documentos 0.3560 0.3560 (+0.0%) 0.3720 (+4.5%) 0.3920 (+10.1%)(+5.4%) 0.4080 (+14.6%)(+9.7%) 20 documentos 0.3430 0.3390 (-1.2%) 0.3550 (+3.5%) 0.3710 (+8.2%)(+4.5%) 0.3830 (+11.7%)(+7.9%) 30 documentos 0.3240 0.3140 (-3.1%) 0.3313 (+2.3%) 0.3500 (+8.0%)(+5.6%) 0.3487 (+7.6%)(+5.3%) 39 mucho peor que los otros algoritmos. Las Tablas 3 y 4 muestran los resultados en el banco de pruebas Trec123-100Col, y las Tablas 5 y 6 muestran los resultados en el banco de pruebas representativo. En el banco de pruebas Trec123-100Col, la efectividad de recuperación de documentos del algoritmo de selección CORI es aproximadamente la misma o un poco mejor que el algoritmo ReDDE, pero ambos son peores que los otros tres algoritmos (Tablas 3 y 4). El algoritmo UUM/HR tiene una pequeña ventaja sobre los algoritmos CORI y ReDDE. Una de las principales diferencias entre el algoritmo UUM/HR y el algoritmo ReDDE fue señalada anteriormente: el UUM/HR utiliza datos de entrenamiento e interpolación lineal para estimar las curvas de puntuación de documentos centralizadas, mientras que el algoritmo ReDDE [21] utiliza un método heurístico, asume que las curvas de puntuación de documentos centralizadas son funciones escalonadas y no hace distinción entre la parte superior de las curvas. Esta diferencia hace que UUM/HR sea mejor que el algoritmo ReDDE para distinguir documentos con altas probabilidades de relevancia de aquéllos con bajas probabilidades de relevancia. Por lo tanto, el UUM/HR refleja mejor el objetivo de recuperación de alta precisión que el algoritmo ReDDE y, por lo tanto, es más efectivo para la recuperación de documentos. El algoritmo UUM/HR no optimiza explícitamente la decisión de selección con respecto al objetivo de alta precisión, como lo hacen los algoritmos UUM/HP-FL y UUM/HP-VL. Se puede observar que en este banco de pruebas, los algoritmos UUM/HP-FL y UUM/HP-VL son mucho más efectivos que todos los demás algoritmos. Esto indica que su poder proviene de optimizar explícitamente el objetivo de alta precisión de recuperación de documentos en las Ecuaciones 14 y 16. En el banco de pruebas representativo, CORI es mucho menos efectivo que otros algoritmos para la recuperación distribuida de documentos (Tablas 5 y 6). Los resultados de recuperación de documentos del algoritmo ReDDE son mejores que los del algoritmo CORI pero aún peores que los resultados del algoritmo UUM/HR. En este banco de pruebas, los tres algoritmos de UUM son aproximadamente igual de efectivos. Un análisis detallado muestra que la superposición de las bases de datos seleccionadas entre los algoritmos UUM/HR, UUM/HP-FL y UUM/HP-VL es mucho mayor que los experimentos en el banco de pruebas Trec123-100Col, ya que todos tienden a seleccionar las dos bases de datos grandes. Esto explica por qué son igualmente efectivos para la recuperación de documentos. En entornos operativos reales, las bases de datos pueden no devolver puntajes de documentos y reportar solo listas clasificadas de resultados. Dado que el modelo unificado de maximización de utilidad solo utiliza las puntuaciones de recuperación de los documentos muestreados con un algoritmo de recuperación centralizado para calcular las probabilidades de relevancia, toma decisiones de selección de bases de datos sin hacer referencia a las puntuaciones de los documentos de bases de datos individuales y puede generalizarse fácilmente a este caso de listas de clasificación sin puntuaciones de documentos. El único ajuste es que el algoritmo SSL fusiona listas clasificadas sin puntuaciones de documentos asignando a los documentos puntuaciones de pseudo-documentos normalizadas por sus rangos (En una lista clasificada de 50 documentos, el primero tiene una puntuación de 1, el segundo tiene una puntuación de 0.98, etc.), lo cual ha sido estudiado en [22]. Los resultados del experimento en el banco de pruebas trec123-100Col-bysource con 3 bases de datos seleccionadas se muestran en la Tabla 7. La configuración del experimento fue la misma que antes, excepto que las puntuaciones de los documentos fueron eliminadas intencionalmente y las bases de datos seleccionadas solo devuelven listas clasificadas de identificadores de documentos. Se puede observar en los resultados que el UUM/HP-FL y el UUM/HP-VL funcionan bien con bases de datos que no devuelven puntuaciones de documentos y siguen siendo más efectivos que otras alternativas. Otros experimentos con bases de datos que no devuelven puntuaciones de documentos no se informan, pero muestran resultados similares para demostrar la efectividad de los algoritmos UUM/HP-FL y UUM/HPVL. Los experimentos anteriores sugieren que es muy importante optimizar el objetivo de alta precisión de manera explícita en la recuperación de documentos. Los nuevos algoritmos basados en este principio logran resultados mejores o al menos tan buenos como los algoritmos previos de vanguardia en varios entornos. CONCLUSIÓN La recuperación distribuida de información resuelve el problema de encontrar información dispersa entre muchas bases de datos de texto en redes de área local e Internet. La mayoría de investigaciones previas utilizan un algoritmo efectivo de selección de recursos del sistema de recomendación de bases de datos para la aplicación de recuperación de documentos distribuidos. Sostenemos que el objetivo de alta recuperación de recursos en la recomendación de bases de datos y el objetivo de alta precisión en la recuperación de documentos están relacionados pero no son idénticos. Este tipo de inconsistencia también ha sido observada en trabajos anteriores, pero las soluciones previas utilizaron métodos heurísticos o asumieron la cooperación de bases de datos individuales (por ejemplo, que todas las bases de datos utilizaran el mismo tipo de motores de búsqueda), lo cual frecuentemente no es cierto en un entorno no cooperativo. En este trabajo proponemos un modelo unificado de maximización de utilidad para integrar la selección de recursos de recomendación de bases de datos y tareas de recuperación de documentos en un marco unificado. En este marco, las decisiones de selección se obtienen optimizando diferentes funciones objetivo. Hasta donde sabemos, este es el primer trabajo que intenta visualizar y modelar teóricamente la tarea de recuperación de información distribuida de manera integrada. El nuevo marco continúa una tendencia reciente de investigación que estudia el uso de muestreo basado en consultas y una base de datos de muestras centralizada. Se entrenó un único modelo logístico en la Tabla 7 centralizada. Precisión en el banco de pruebas trec123-100col-bysource cuando se seleccionaron 3 bases de datos (La primera línea base es CORI; la segunda línea base para los métodos UUM/HP es UUM/HR). (Los motores de búsqueda no devuelven puntajes de documentos) Precisión en la Clasificación de Documentos CORI ReDDE UUM/HR UUM/HP-FL UUM/HP-VL 5 documentos 0.3520 0.3240 (-8.0%) 0.3680 (+4.6%) 0.4520 (+28.4%)(+22.8%) 0.4520 (+28.4%)(+22.8) 10 documentos 0.3320 0.3140 (-5.4%) 0.3340 (+0.6%) 0.4120 (+24.1%)(+23.4%) 0.4020 (+21.1%)(+20.4%) 15 documentos 0.3227 0.2987 (-7.4%) 0.3280 (+1.6%) 0.3920 (+21.5%)(+19.5%) 0.3733 (+15.7%)(+13.8%) 20 documentos 0.3030 0.2860 (-5.6%) 0.3130 (+3.3%) 0.3670 (+21.2%)(+17.3%) 0.3590 (+18.5%)(+14.7%) 30 documentos 0.2727 0.2640 (-3.2%) 0.2900 (+6.3%) 0.3273 (+20.0%)(+12.9%) 0.3273 (+20.0%)(+12.9%) 40 base de datos de muestra para estimar las probabilidades de relevancia de documentos por sus puntajes de recuperación centralizados, mientras que la base de datos de muestra centralizada sirve como puente para conectar las bases de datos individuales con el modelo logístico centralizado. Por lo tanto, las probabilidades de relevancia para todos los documentos en las bases de datos pueden ser estimadas con una cantidad muy pequeña de juicio de relevancia humano, lo cual es mucho más eficiente que los métodos anteriores que construyen un modelo separado para cada base de datos. Este marco no solo es más sólido teóricamente, sino también muy efectivo. Un algoritmo para la selección de recursos (UUM/HR) y dos algoritmos para la recuperación de documentos (UUM/HP-FL y UUM/HP-VL) se derivan de este marco. Se han realizado estudios empíricos en bancos de pruebas para simular las soluciones de búsqueda distribuida de grandes organizaciones (empresas) o la Web oculta específica de un dominio. Además, los algoritmos de selección de recursos UUM/HP-FL y UUM/HP-VL se amplían con una variante del algoritmo de fusión de resultados SSL para abordar la tarea de recuperación de documentos distribuidos cuando las bases de datos seleccionadas no devuelven puntuaciones de documentos. Los experimentos han demostrado que estos algoritmos logran resultados que son al menos tan buenos como el estado del arte previo, y a veces considerablemente mejores. Un análisis detallado indica que la ventaja de estos algoritmos proviene de optimizar explícitamente los objetivos de las tareas específicas. El marco unificado de maximización de utilidad está abierto a diferentes extensiones. Cuando el costo está asociado con la búsqueda en las bases de datos en línea, el marco de utilidad puede ajustarse para estimar automáticamente el mejor número de bases de datos a buscar, de modo que se puedan recuperar una gran cantidad de documentos relevantes con costos relativamente bajos. Otra extensión del marco es considerar la efectividad de la recuperación de información de las bases de datos en línea, lo cual es un tema importante en los entornos operativos. Todas estas son las direcciones de la investigación futura. AGRADECIMIENTO Esta investigación fue apoyada por las subvenciones de la NSF EIA-9983253 y IIS-0118767. Cualquier opinión, hallazgo, conclusión o recomendación expresada en este documento son del autor y no necesariamente reflejan las del patrocinador. REFERENCIAS [1] J. Callan. (2000). Recuperación de información distribuida. En W.B. Croft, editor, Avances en Recuperación de Información. Kluwer Academic Publishers. (pp. 127-150). [2] J. Callan, W.B. 

Editorial Kluwer Academic. (pp. 127-150). [2] J. Callan, W.B. Croft, y J. Broglio. (1995). Experimentos TREC y TIPSTER con INQUERY. Procesamiento y Gestión de la Información, 31(3). (pp. 327-343). [3] J. G. Conrad, X. S. Guo, P. Jackson y M. Meziou. (2002). Selección de base de datos utilizando recursos de colección lógica adquiridos y físicos reales en un entorno operativo masivo específico de dominio. Búsqueda distribuida en la web oculta: Muestreo y selección jerárquica de bases de datos. En Actas de la 28ª Conferencia Internacional sobre Bases de Datos Muy Grandes (VLDB). [4] N. Craswell. (2000). Métodos para la recuperación distribuida de información. I'm sorry, but the sentence "Ph." is not a complete sentence. Could you please provide more context or a complete sentence for me to translate to Spanish? Tesis doctoral, Universidad Nacional Australiana. [5] N. Craswell, D. Hawking y P. Thistlewaite. (1999). Combinando resultados de motores de búsqueda aislados. En Actas de la 10ª Conferencia de Bases de Datos Australasiana. [6] D. DSouza, J. Thom y J. Zobel. (2000). Una comparación de técnicas para seleccionar colecciones de texto. En Actas de la 11ª Conferencia de Bases de Datos Australasiana. [7] N. Fuhr. (1999). Un enfoque de Teoría de la Decisión para la selección de bases de datos en IR en red. ACM Transactions on Information Systems, 17(3). (pp. 229-249). [8] L. Gravano, C. Chang, H. Garcia-Molina y A. Paepcke. (1997). Propuesta de Stanford para la metabusqueda en internet. En Actas de la 20ª Conferencia Internacional ACM-SIGMOD sobre Gestión de Datos. [9] L. Gravano, P. Ipeirotis y M. Sahami. (2003). QProber: Un sistema para la clasificación automática de bases de datos de la web oculta. ACM Transactions on Information Systems, 21(1). [10] P. Ipeirotis y L. Gravano. (2002). Búsqueda distribuida en la web oculta: Muestreo y selección jerárquica de bases de datos. En Actas de la 28ª Conferencia Internacional sobre Bases de Datos Muy Grandes (VLDB). [11] InvisibleWeb.com. http://www.invisibleweb.com [12] El kit de herramientas lemur. http://www.cs.cmu.edu/~lemur [13] J. Lu y J. Callan. (2003). Recuperación de información basada en contenido en redes peer-to-peer. En Actas de la 12ª Conferencia Internacional sobre Información y Gestión del Conocimiento. [14] W. Meng, C.T. Yu y K.L. Liu. (2002) Construcción de motores de búsqueda eficientes y efectivos. ACM Comput. Surv. 34(1). [15] H. Nottelmann y N. Fuhr. (2003). Evaluando diferentes métodos para estimar la calidad de recuperación para la selección de recursos. En Actas de la 25ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información. [16] H., Nottelmann y N., Fuhr. (2003). La arquitectura MIND para bibliotecas digitales federadas de multimedia heterogénea. Taller ACM SIGIR 2003 sobre Recuperación de Información Distribuida. [17] A.L. Powell, J.C. French, J. Callan, M. Connell y C.L. Viles. (2000). 

Viles. (2000). El impacto de la selección de bases de datos en la búsqueda distribuida. En Actas de la 23ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información. [18] A.L. Powell y J.C. French. (2003). Comparando el rendimiento de los algoritmos de selección de bases de datos. ACM Transactions on Information Systems, 21(4). (pp. 412-456). [19] C. Sherman (2001). 

ACM Transactions on Information Systems, 21(4). (pp. 412-456). [19] C. Sherman (2001). Busca en la web invisible. Guardian Unlimited. [20] L. Si y J. Callan. (2002). Utilizando datos muestreados y regresión para fusionar resultados de motores de búsqueda. En Actas de la 25ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información. [21] L. Si y J. Callan. (2003). Método de estimación de distribución de documentos relevantes para la selección de recursos. En Actas de la 26ª Conferencia Internacional Anual de ACM SIGIR sobre Investigación y Desarrollo en Recuperación de Información. [22] L. Si y J. Callan. (2003). Un método de aprendizaje semi-supervisado para fusionar los resultados de un motor de búsqueda. ACM Transactions on Information Systems, 21(4). (pp. 457-491). 41

ACM Transactions on Information Systems, 21(4). (pp. 457-491). 41