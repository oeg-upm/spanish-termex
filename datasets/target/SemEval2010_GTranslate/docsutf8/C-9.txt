EDAS: Proporcionar un entorno para los servicios adaptativos descentralizados Rüdiger Kapitza Dept. de comp. Sciences, Informatik 4 Universidad de Erlangen-nürnberg rrkapitz@cs.fau.de Franz J. Hauck Systems Laboratory University of Ulm Franz.hauck@uni- ulm.de Resumen como la idea de la virtualización de la potencia de cómputo, el almacenamiento y el ancho de banda se convierte en másy más importante, la computación de la cuadrícula evoluciona y se aplica a un número creciente de aplicaciones. El entorno para los servicios adaptativos descentralizados (EDA) proporciona una infraestructura similar a la red para servicios a largo plazo de acceso a los usuarios (por ejemplo, servidor web, repositorio de código fuente, etc.). Su objetivo es respaldar la ejecución autónoma y la evolución de los servicios en términos de escalabilidad y distribución consciente de los recursos. EDAS ofrece modelos de servicio flexibles basados en objetos móviles distribuidos que van desde un escenario tradicional de servidor de clientes hasta un enfoque totalmente basado en pares. La gestión automática de recursos dinámicos permite el uso optimizado de los recursos disponibles al tiempo que minimiza la complejidad administrativa. Categorías y descriptores de sujetos C.2.4 [Redes de comunicación informática]: aplicaciones distribuidas de sistemas distribuidos;D.2.12B [Software]: Introperabilidad de ingeniería de software [Objetos distribuidos] Diseño de términos generales, gestión 1. INTRODUCCIÓN Infraestructuras para la computación de la cuadrícula Apunte a virtualizar un grupo de computadoras, servidores y almacenamiento como un gran sistema informático. La gestión de recursos es un problema clave en tales sistemas, necesarios para una distribución eficiente y automatizada de tareas en la red. Dichas infraestructuras de cuadrícula a menudo se implementan a nivel empresarial, pero proyectos como Seti@Home [1] también han demostrado la viabilidad de las redes más descentralizadas. Las infraestructuras de computación de la cuadrícula actuales no proporcionan un soporte suficiente para la ejecución de servicios distribuidos, usamentados y a largo plazo, ya que están diseñados para resolver tareas de computación o información intensiva con un conjunto de parámetros más o menos fijo. El enfoque trifásico común del descubrimiento de recursos, la selección del sistema y la ejecución del trabajo falla por los servicios que cambian su demanda de recursos con el tiempo debido al acceso interactivo a los usuarios y se ejecutan durante un largo período de tiempo. En cambio, una infraestructura para los servicios a largo plazo debe colocar los servicios en función de su demanda actual y sus requisitos futuros estimados. Si la distribución resulta ser incorrecta (por ejemplo, un nodo se sobrecarga), el servicio debe migrarse dentro de la cuadrícula (por ejemplo, a un nodo más potente y menos cargado). Sin embargo, la migración es costosa ya que todo el estado de un servicio debe transferirse. Además, no es accesible un servicio no replicado durante la migración. Por lo tanto, la gestión de recursos debe evitar la migración si es posible. Además, se debe proporcionar un concepto de servicio que evade la sobrecarga en primer lugar, e inhibe en segundo lugar la falta de disponibilidad del servicio si la migración no se puede evitar. EDAS [2] tiene como objetivo proporcionar una infraestructura similar a la red para servicios a largo plazo de acceso a los usuarios que permite la adaptación dinámica en tiempo de ejecución, proporciona una infraestructura de gestión y ofrece soporte a nivel de sistema para la escalabilidad y la tolerancia a las fallas. Los nodos pueden unirse dinámicamente y abandonar la infraestructura, y todas las tareas de gestión, especialmente la gestión de recursos, están descentralizadas. El entorno se basa en nuestra infraestructura de middleware Suppectix [3], que admite directamente la reconfiguración dinámica de servicios basada en QoS. La gestión de recursos se centra en la ejecución de servicios que tienen un tiempo de funcionamiento largo y potencialmente infinito. Estos servicios están organizados en proyectos. Cada proyecto tiene un alcance de ejecución distribuido llamado entorno de servicio. Tal entorno posiblemente abarca múltiples instituciones. Cada institución representa un dominio administrativo que puede respaldar un proyecto con un conjunto fijo de recursos. Nuestro enfoque respalda la gestión de recursos adaptativos de todos los proyectos en el alcance de una institución basada en un algoritmo inspirado en los algoritmos difusivos para el balance de carga descentralizado [4]. No se sabe cómo subdividir de manera óptima estos recursos para los servicios, ya que la demanda de recursos de los servicios puede cambiar con el tiempo o incluso fluctuar con frecuencia. Para proporcionar recursos según sea necesario, nuestro enfoque rededica automáticamente los recursos de manera uniforme o no necesaria entre las instancias de servicio en los proyectos y nodos. Todo el Artículo 5 del proceso de rededicación es escalable, ya que está descentralizado y respeta ciertos límites como los recursos físicamente disponibles de un nodo y la cantidad de recursos dedicados a un proyecto. En los casos en que la rededicación no es posible, se inicia la migración del servicio exigente. EDAS admite aún más modelos de servicio flexibles, incluida una estructura de cliente/servidor totalmente centralizada, sistemas basados en el tope por pares y varias configuraciones entre los que permiten un uso controlado de recursos de pares basados en el modelo de objeto fragmentado [5]. El objetivo general es proporcionar una arquitectura de servicio genérico que permita implementar la funcionalidad del servicio una vez, y luego, idealmente, ejecutar este servicio con diferentes modelos de servicio y adaptarla en tiempo de ejecución, lo que amplía de una sola instancia local de usuario a una mulidominio.-Spanning Scalable Service. Para reducir el esfuerzo de implementación de dichos servicios, se ha desarrollado un marco que admite la evolución del tiempo de ejecución de un escenario tradicional de cliente/servidor a un servidor replicado activo con clientes que interactúan en una arquitectura híbrida de pares a igual como se conoce desde Napster. En una infraestructura de cuadrícula de servicio a largo plazo, la replicación activa tiene varios beneficios: las réplicas pueden unirse y dejar el grupo de objetos y, por lo tanto, las réplicas se pueden migrar sin falta de disponibilidad del servicio. La carga de solicitudes no modificadoras se puede distribuir uniformemente a través de las réplicas, lo que hace que las situaciones de sobrecarga sean menos probables. Finalmente, se puede tolerar una cierta cantidad de bloqueos de nodo. La siguiente sección describe las características utilizadas de Suppeix seguidas de una breve descripción de los componentes y conceptos centrales de EDAS. La Sección 4 explica los conceptos de autogestión y rededicación de la gestión distribuida de recursos adaptativos. La Sección 5 describe el marco para los servicios adaptativos descentralizados. La Sección 6 describe el trabajo relacionado y finalmente la Sección 7 concluye el documento.2. Middleware básico El entorno EDAS se basa en el middleware de Suppeix. En esencia, proporciona un orbe compatible con Corba y, como tal, admite sistemas distribuidos heterogéneos. Además, Suppeix admite el modelo de objetos fragmentado [5] que se utiliza para implementar y proporcionar servicios adaptativos descentralizados. En el modelo de objeto fragmentado, la distinción entre los trozos del cliente y el objeto del servidor ya no está presente (Fig. 1). Desde un punto de vista abstracto, un objeto fragmentado es una unidad con identidad, interfaz, comportamiento y estado únicos, como en el diseño clásico orientado a objetos. Sin embargo, la implementación de estas propiedades no está vinculada a una ubicación específica, sino que puede distribuirse arbitrariamente en varios fragmentos. Cualquier cliente que desee acceder al objeto fragmentado necesita un fragmento local, que proporciona una interfaz idéntica a la de un trozo tradicional. Sin embargo, la distribución e interacción interna no solo es transparente en la interfaz externa del objeto distribuido, sino que incluso puede cambiar dinámicamente en tiempo de ejecución. Esto permite que el modelo de objeto fragmentado se adapte a las condiciones de entorno cambiante o los requisitos de calidad de servicio. Ofrece cambiar el modelo de servicio a pedido del servidor de cliente tradicional a un enfoque de pares a igual y todo tipo de etapas intermedias mediante la migración e intercambio de fragmentos.3. Componentes centrales de EDAS Figura 1: Objeto fragmentado en tres nodos EDAS tiene tres componentes principales: cada nodo que admite activamente servicios adaptativos descentralizados proporciona un entorno de inicio. El entorno del hogar básicamente administra los recursos de uno o más nodos que pertenecen al mismo dominio o institución administrativa. El entorno de servicio se extiende sobre un conjunto de dominios que respaldan un determinado proyecto y se basan en los servicios básicos de los entornos domésticos correspondientes. El entorno de servicio admite la ejecución de servicios que pertenecen al mismo proyecto. Finalmente, el servicio adaptativo descentralizado se distribuye dinámicamente dentro del alcance de un entorno de servicio asociado. El entorno del hogar tiene el papel de un mediador entre los nodos de una institución y uno o más entornos de servicio, cada uno con un conjunto de servicios. La figura 2 muestra tres dominios, cada uno con un entorno doméstico que abarca todos los nodos de los dominios respectivos. Cada nodo proporciona un conjunto de recursos. Cada dominio tiene un gerente que puede usar ese entorno doméstico para asignar recursos a entornos de servicio y revocarlos. Además de proporcionar carga del sistema y todo tipo de información de uso de recursos al entorno de servicio, el entorno doméstico también notifica sobre todos los eventos importantes del sistema como un cierre o bloqueo de nodo. Un entorno de servicio representa un alcance de distribución para uno o más servicios. Por lo general, un entorno de servicio es propiedad de una organización o comunidad y se dedica a un proyecto. Un administrador de servicios puede iniciar, detener y configurar servicios a través de la interfaz del entorno de servicio y decidir qué recursos proporcionados por los entornos domésticos son aceptados. En la mayoría de los casos, un entorno de servicio se extiende en más de un dominio administrativo como se muestra en la figura 2. Una de las principales tareas del entorno de servicio es apoyar la migración de servicios o componentes de servicios, especialmente entre diferentes entornos de hogar. El entorno de servicio tiene en cuenta los recursos disponibles, los requisitos de los servicios y las políticas proporcionadas por el Gerente de Servicios. La migración de componentes de servicio puede ser necesaria por varias razones, como el cierre de nodos, las limitaciones de recursos y el crecimiento o la contracción de un entorno de servicio.4. La gestión descentralizada de recursos de gestión de recursos para servicios a largo plazo tiene otros requisitos que la gestión de recursos en entornos de computación de la red comunes. Por ejemplo, incluso en el contexto de los sistemas de cuadrícula tradicionales, es muy difícil determinar o incluso estimar los requisitos de recursos de una tarea [6]. Para los servicios a largo plazo, esto es aún más difícil, y es probable que la demanda de recursos cambie con frecuencia. Esto se convierte en el artículo 5 Host Fhost D Host E Host A Host C Servicio Servicio Servicio B Servicio A Home Env. Entorno de inicio entorno de inicio límite del fragmentado Administrador de dominios de Service Manager Domain Manager Figura 2: Escenario EDAS La distribución óptima de los servicios sobre un conjunto de nodos en un problema difícil. En general, la migración de servicios es un requisito previo de EDAS, ya que ofrece una solución si la decisión de distribución inicial fue incorrecta (por ejemplo, inicio inicial del servicio previamente desconocido) o la demanda de servicios ha cambiado sustancialmente. Pero la migración es costosa, ya que todo el estado de un servicio posiblemente incluye el código del programa debe transferirse. Si el servicio no se replica, no estará disponible durante la migración. Teniendo esto en cuenta, una gestión de recursos debe colocar los servicios y redindicar los recursos de forma adaptativa entre los servicios y los nodos según sea necesario para evitar la migración. Como EDAS tiene como objetivo proporcionar una infraestructura similar a la red para un gran conjunto de nodos que pueden unirse y dejar el sistema, todas las tareas de gestión de recursos deben descentralizarse para ser escalables y no deben requerir conocimiento global. La gestión de recursos se puede estructurar en las siguientes tareas diferentes: • Agregar y cambiar los recursos asignados de un entorno de servicio • Colocación automática del servicio en el momento de inicio y durante la migración debido a la sobrecarga • Mantener todo tipo de límites de recursos, especialmente los límites de servicioentornos • Compensar los nodos de salida y bloqueados En las siguientes secciones, describiremos qué tipo de límites de recursos hay y cómo hacer la gestión de recursos en función de estas condiciones básicas.4.1 Límites de recursos Nuestro enfoque gestiona los recursos en dos etapas, el nivel de nodo y el nivel de servicio-medio ambiente. En el nivel de nodo, monitoreamos el uso de todo tipo de recursos físicos, como espacio en disco, memoria, CPU y ancho de banda de red, pero también lógicos, como archivos abiertos, sockets e hilos. La entidad del monitoreo es un servicio o un componente de servicio en caso de un servicio adaptativo descentralizado. Cada servicio ha llamado límites locales que restringen el uso de recursos en el contexto del nodo actual. Si un servicio corre el riesgo de exceder el límite local de este tipo, el entorno doméstico intenta extender los límites o notifica el entorno de servicio responsable si la rededicación no es posible. Alcanzar un límite local puede ser causado por dos razones: un nodo sobrecargado o un entorno de servicio sobrecargado. En el primer caso, la migración del servicio podría ayudar, en el segundo caso, la migración a otro dominio administrativo podría ser una opción, o simplemente reducir la demanda de recursos al detener el servicio. Por supuesto, podría haber más de un servicio del mismo entorno de servicio en un nodo. Por lo tanto, los recursos asignados de un entorno de servicio en un nodo se pueden calcular fácilmente sumando todos los límites locales de sus servicios. Además, cada nodo tiene límites de nodo que restringen el uso general de ciertos recursos. Un límite de nodo nunca debe exceder el recurso físico (por ejemplo, espacio en disco) de un nodo y podría ser mucho más pequeño, por ejemplo, para apoyar a los usuarios locales. La suma de todos los límites locales en un nodo nunca debe exceder el límite de nodo de un recurso. Por lo tanto, observar y controlar los límites locales mantendrá los límites del nodo y evitan la sobrecarga. NodelimitNode ≥ NumberOfLocallImitsNodex I = 1 Locallimiti a nivel de la institución El uso de recursos de un entorno de servicio y sus servicios asociados también está restringido por los llamados límites globales. Estos límites determinan el uso máximo de recursos de un proyecto en el alcance de un entorno doméstico. La suma de todos los límites locales en todos los nodos de la institución para un determinado proyecto, por lo tanto, nunca excede su límite global. GlobalElimitse ≥ NumberOfLOCALLIMITSSEX I = 1 Locallimiti 4.2 Rededicación de recursos adaptativos Comenzamos con una implementación directa para describir el flujo de trabajo principal. Luego proponemos un enfoque para una solución más eficiente y discutimos sus problemas. Si un nuevo proyecto debe ser respaldado por un entorno de origen, primero es necesario identificar los nodos que ofrecen suficientes recursos no asignados para comenzar un servicio. Esto se puede lograr en una implementación ingenua utilizando un enfoque de inundación como el protocolo Gnutella, suponiendo que los nodos estén conectados en un gráfico aleatorio. Estos recursos se pueden asignar al entorno de servicio del nuevo proyecto que puede iniciar servicios en estos nodos. Por supuesto, un entorno domiciliario admite generalmente numerosos proyectos. Cada uno de estos proyectos tiene acciones de recursos en varios nodos, algunos de ellos ocupados por servicios, otros libres y no utilizados. A medida que la demanda de recursos de un servicio cambia, podría ser posible que un servicio alcance su límite local si el servicio está bajo una alta demanda. Lo que sucede a continuación depende del uso general de recursos del entorno de servicio y del consumo de recursos en el nodo local. Si el entorno de servicio no ha alcanzado su límite global y el nodo no está sobrecargado, el límite local dependiente del servicio debe extenderse simplemente reduciendo un límite local en otro nodo del mismo entorno de servicio. Cuando todos los recursos del nodo se asignan a otros entornos de servicio, hay dos posibilidades. Todos los recursos son utilizados por los servicios, por lo que tenemos que migrar un servicio o los recursos están asignados pero no utilizados. En el caso posterior, rededicaremos los recursos y los asignaremos al entorno de servicio exigente. Finalmente, el entorno de servicio podría haber alcanzado su límite global. En este caso, el consumo de recursos debe reducirse ya sea migrando el servicio a otro dominio y su entorno de inicio dependiendo o simplemente mediante el uso de recursos y si esto no es posible, detenga el servicio. A diferencia de la configuración de un nuevo entorno de servicio que no es crítico y una tarea menos frecuente, la adaptación de los límites locales ocurre con frecuencia y debe hacerse el artículo 5 casi de inmediato. Por lo tanto, no es una opción usar búsquedas de transmisión para la rededicación. En cambio, es necesario un enfoque más eficiente con una complejidad limitada. Lo mismo se aplica para detectar si un entorno de servicio alcanza un límite global. Actualmente investigamos si esto se puede lograr utilizando un algoritmo difusivo [4] como se usa para el equilibrio de carga descentralizada. De este modo, todos los nodos de un sistema se dividen en grupos que se superponen parcialmente. La unión de todos los grupos logra una cobertura completa. Los miembros del grupo frecuentemente intercambian información de carga y equilibran la carga por migración. En nuestro caso, apuntamos no a equilibrar la carga, sino la cantidad de recursos gratuitos disponibles de un entorno de servicio. Cada nodo que admite un determinado entorno de servicio está al menos conectado a otro nodo que admite el mismo proyecto. De esta manera, siempre debe saber si un entorno de servicio todavía tiene suficientes recursos y, por lo tanto, si un servicio puede crecer. Todavía quedan problemas abiertos, como si los recursos libres difusivamente equilibrados deberían estar estrechamente conectados con los recursos reales, comparables a las reservas. En este caso, puede haber problemas si un nodo admite varios entornos de servicio que tienen servicios que se ejecutan en el nodo y se excede un límite de nodo que requeriría la migración del servicio. De hecho, puede ser innecesario ya que los servicios pueden no usar todos los recursos asignados, pero el algoritmo difusivo causó el límite invadido al equilibrar igualmente los recursos gratuitos de todos los entornos de servicio admitidos. Si eliminamos el mapeo entre recursos gratuitos y recursos reales de un nodo, podemos evadir estas situaciones. Sin embargo, se vuelve más complicado determinar los recursos gratuitos y no asignados de un entorno doméstico.4.3 Colocación de servicios independientemente del mapeo de recursos gratuitos La colocación de un servicio es, como ya se dijo, un problema difícil. Distribuir los servicios por igual en todos los nodos seguramente evitaría la migración en el caso promedio, incluso si la demanda de recursos de los servicios cambia. Sin embargo, si la demanda de recursos de servicios varía mucho y la red está obstruida por muchos proyectos, podría ser que un servicio no se pueda colocar porque los recursos gratuitos están demasiado dispersos. Un enfoque diferente sería considerarlo como una variante del problema de llenado de contenedores que tiene como objetivo empacar elementos en los contenedores optimizando el número de contenedores usados. En nuestro caso, necesitamos un enfoque en línea ya que los elementos no se conocen de antemano y tenemos un problema multidimensional ya que un servicio tiene varios requisitos de recursos. El número de contenedores está limitado ya que tenemos un número finito de nodos en nuestra cuadrícula. Epstein y Van Stee en [7] han propuesto un algoritmo para este problema en [7]. En el lado negativo, este algoritmo necesita conocer todos los nodos y su uso real. Como la colocación de un servicio no es un problema crítico de tiempo nuevamente, un enfoque basado en inundaciones podría ofrecer una solución. Para reducir el número de respuestas, solo los nodos que proporcionan recursos suficientes deben responder. También debe considerarse para transformar el algoritmo en uno distribuido. Otro problema podría ser que el algoritmo optimiza la ocupación demasiado fuerte. Por lo tanto, los cambios en la demanda de servicio pueden conducir a nodos sobrecargados y causar migración. Creemos que esto puede evitarse no solo considerando el consumo de recursos real para determinar la demanda de recursos de un servicio, sino teniendo en cuenta la demanda anterior.5. Modelo de servicio adaptativo descentralizado en EDAS Un servicio adaptativo descentralizado normalmente coincide con un servicio tradicional accedido por usuarios como un servidor web, un servidor de mensajería instantánea o un repositorio de código fuente. Tal servicio está representado por un objeto fragmentado. Este objeto se expande o se reduce en el alcance abarcado por el entorno de servicio asociado dependiendo de las demandas del servicio y por razones de tolerancia a fallas. Por lo general, cada parte del objeto es móvil y se puede migrar si es necesario. Cada servicio tiene al menos dos interfaces: una para tareas de gestión y otro servicio específico para el usuario final. La interfaz de administración ofrece métodos para iniciar, detener y configurar instancias de servicio. Como este conjunto de características requiere un enorme esfuerzo de implementación para hacerlo de nuevo para cada implementación del servicio, apoyamos el desarrollo de servicios adaptativos descentralizados a través de un marco y una versión extendida de IDL en combinación con un compilador especial de IDL [8]. La idea principal es desarrollar un servicio de manera habitual del cliente/servidor como se hace en Plain Corba. Este servicio se puede iniciar y ejecutar en la cuadrícula como un sirviente común. Además, debería ser posible migrar el servicio. Esto se puede lograr utilizando un enfoque basado en el tipo de valor para describir el estado del servicio como se hace en [9] o utilizando los mecanismos de serialización suministrados por el lenguaje. Como nos gustaría tolerar los bloqueos de nodo y el servicio debería estar disponible durante la migración, admitimos la replicación activa del servicio. Esto se logra generando trozos especiales del lado del cliente que se comunican con una de las réplicas. Para mantener la conexión entre los clientes y el objeto replicado, utilizamos referencias limitadas por el tiempo [10] que restringen la migración, pero hacen que el uso de los servicios de ubicación (para hacer frente a las referencias anticuadas) sea obsoleto. Las réplicas se sincronizan a través de un marco de comunicación grupal. La extensión IDL consta de modificadores adicionales que afectan la generación de código para el lado del cliente y el servidor. Estos se retienen para marcar operaciones no modificadoras, lo que permite respuestas más rápidas y el equilibrio de carga de esas solicitudes. Además, uno puede marcar métodos como locales, lo que indica que pueden procesarse localmente. En este caso, el IDLCompiler crea un marcador de posición para la ejecución local. Aparte de los métodos de formulario que son habituales estáticos Esto es útil para implementar la contribución e interacción del lado del cliente. Por ejemplo, si un stub Client ofrece un método que da como resultado una transferencia de archivos, es posible integrar un protocolo personalizado que reenvíe una solicitud modificada al objeto replicado que devuelve no el archivo como en el caso común, pero las URL que apuntan a los clientes quepreviamente solicitó el archivo. Ahora el ClientStub obtiene los datos de la ubicación ofrecida y responde como si fuera suministrado por el objeto del servidor. Este comportamiento basado en igual por igual que se conoce en Napster es transparente para el cliente y se puede encender y desactivar dependiendo de las condiciones del entorno como la carga y la comunidad según sea necesario. Finalmente proporcionamos otro modificador para marcar operaciones administrativas. Si un método está marcado con Admin, es necesario una autenticación. El método para autenticarse es conectable y podría ser por frase de aprobación, dirección de Internet o cualquier otro esquema de autenticación. Este modificador facilita la creación de métodos de gestión de servicios. Artículo 5 6. Las infraestructuras de la red de trabajo relacionada como Globus-Toolkit [11] proporcionan servicios y mecanismos para entornos heterogéneos distribuidos para combinar recursos a pedido para resolver el consumo de recursos y calcular tareas intensivas. Debido a esta orientación, se centran en diferentes modelos de servicio, no proporcionan soporte para la movilidad de los objetos si incluso admite un enfoque de objeto distribuido. Pero lo más importante sigue un enfoque de gestión de recursos diferente a medida que se dirigen a la ejecución paralela de una gran cantidad de tareas a corto y medio plazo. Javasymfony [12] e IBI [13] proporcionan movilidad de objetos, pero se limitan al lenguaje de programación Java y se centran en la computación de alto rendimiento orientada a objetos. Los objetos replicados activamente son proporcionados por JGroup [14] basados en RMI. Además de este middleware básico, se ha implementado una capa de administración de replicación llamada ARM [15]. JGroup se enfoca en la replicación activa de los objetos, pero carece de soporte para servicios más flexibles como lo hace EDAS. ARM se puede comparar con EDAS, pero no admite distribución de recursos conscientes. Fog [16] y Globe [17] son entornos de middleware básicos que admiten el enfoque de objetos fragmentados. Globe considera la replicación y el almacenamiento en caché. Ambos sistemas carecen de soporte para la distribución consciente de los recursos.7. Conclusión y trabajo continuo basado en el modelo de objetos fragmentado y la arquitectura del entorno EDAS, los servicios adaptativos descentralizados se pueden diseñar, implementar y ejecutar fácilmente. Como se describe, la gestión de recursos puede descomponerse en dos problemas principales que deben resolverse. Control y gestión de límites de recursos, incluida la garantía de que los recursos asignados estén disponibles (incluso en el contexto de los bloqueos de nodos) y la colocación autónoma de los servicios. Para ambos problemas ofrecemos una solución, un entorno de simulación implementado actualmente verificará su viabilidad. En el siguiente paso, la gestión de recursos se integrará en un prototipo ya implementado de la arquitectura EDAS. Como se describe, ya tenemos una implementación temprana del marco para los servicios adaptativos descentralizados. Este marco debe extenderse para interactuar sin problemas con la gestión de recursos y la arquitectura EDAS. En un paso final necesitamos implementar algunos servicios que verifiquen la usabilidad de todo el proyecto EDAS.8. Referencias [1] D. Werthimer S. Bowyer J. Cobb D. Gedye D. Anderson W. T. Sullivan, III. Un nuevo proyecto SETI importante basado en los datos del Proyecto Serendip y 100,000 computadoras personales. En Proc.del quinto intl. Conf.Sobre la bioastronomía, 1997. [2] Hans Reiser R¨udiger Kapitza, Franz J. Hauck. Servicios descentralizados y adaptativos: el enfoque SuppeIX para un entorno de cuadrícula flexible y seguro. En Ingeniería y Gestión de Servicios Grid (GSEM 2004), Erfurt, Alemania, 2004. Saltador.[3] Hans P. Reiser, Franz J. Hauck, R¨udiger Kapitza y Andreas I. Schmied. Integrando objetos fragmentados en un entorno Corba. En Proc.de la red. Objectays, 2003. [4] Tiberiu Rotaru y Hans-Heinrich N¨ageli. Equilibrio de carga dinámica por difusión en sistemas heterogéneos. J. Distribución paralela. Comput., 64 (4): 481-497, 2004. [5] M. Makpangou, Y. Gourhant, J.-P.Narzul y M. Shapiro. Objetos fragmentados para abstracciones distribuidas.[6] Jennifer M. Schopf. Diez acciones cuando la programación de la cuadrícula: el usuario como programador de cuadrícula.Páginas 15-23, 2004. [7] Leah Epstein y Rob Van Stee. Embalaje multidimensional de espacio limitado en línea óptimo. En Soda 04: Actas del decimoquinto Simposio ACM-SIAM anual sobre algoritmos discretos, páginas 214-223, Filadelfia, PA, EE. UU., 2004. Sociedad de Matemáticas Industriales y Aplicadas.[8] Hans P. Reiser, Martin Steckermeier y Franz J. Hauck. IDLFlex: un compilador flexible y genérico para Corba IDL. En Proc.de las redes net.Objectdays (Erfurt, Alemania, 10-13 de septiembre de 2001), 2001. [9] R¨udiger Kapitza, Holger Schmidt y Franz J. Hauck. Migración de objetos independiente de la plataforma en Corba. En Proc.de las conferencias OTM05 (DOA, AGIA Napa, Chipre, 31 de octubre-nov. 04, 2005), 2005. [10] R¨udiger Kapitza, Hans P. Reiser y Franz J. Hauck. Referencias estables, vinculadas en el tiempo en el contexto de entornos que cambian dinámicamente. En MDC05: Proc.del 25 IEEE INT. Conf.en sistemas de computación distribuidos - talleres (Talleres ICDCS 2005), 2005. [11] Ian Foster, Carl Kesselman y Steven Tuecke. La anatomía de la cuadrícula: habilitando organizaciones virtuales escalables. Notas de conferencia en informática, 2150, 2001. [12] Thomas Fahringer y Alexandru Jugravu. Javasymfony: nuevas directivas para controlar y sincronizar la localidad, el paralelismo y el equilibrio de carga para la computación de racimos y la cuadrícula. En JGI 02: Actas de la Conferencia Conjunta ACM-Issis de 2002 sobre Java Grande, páginas 8-17, Nueva York, NY, EE. UU., 2002. ACM Press.[13] Rob V. Van Nieuwpoort, Jason Maassen, Rutger Hofman, Thilo Kielmann y Henri E. Bal. IBIS: un entorno eficiente de programación de cuadrícula basado en Java. En JGI 02: Actas de la Conferencia Conjunta ACM-Issis de 2002 sobre Java Grande, páginas 18-27, Nueva York, NY, EE. UU., 2002. ACM Press.[14] Alberto Montresor, Renzo Davoli y Ozalp Babaoglu. Middleware para servicios de red confiables en sistemas distribuidos dividibles. Sigops oper. Syst. Rev., 35 (1): 73-96, 2001. [15] H. Meling y B. Helvik. Brazo: gestión de replicación autónoma en JGroup, 2001. [16] Mesaac Makpangou, Yvon Gourhant, Jean-Pierre Le Narzul y Marc Shapiro. Objetos fragmentados para abstracciones distribuidas. En lecturas en sistemas informáticos distribuidos.[17] Philip Homburg, Leendert Van Doorn, Maarten Van Steen, Andrew S. Tanenbaum y Wiebren de Jonge. Un modelo de objeto para sistemas distribuidos flexibles. En Actas de la 1ª Conferencia Anual de ASCI, páginas 69-78, 1995. Artículo 5