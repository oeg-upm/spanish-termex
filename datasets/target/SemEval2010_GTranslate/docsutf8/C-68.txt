Una evaluación de la latencia de disponibilidad en redes vehiculares ad-hoc basadas en transportistas Shahram Ghandeharizadeh Departamento de Ciencias de la Computación Univ del sur de California Los Ángeles, CA 90089, EE. UU. Shahram@usc.edu Shyam Kapadia Departamento de Ciencias de la Computación Univ de los Ángeles del Sur de California,90089, EE. UU. Kapadia@usc.edu Bhaskar Krishnamachari Departamento de Informática de Ingeniería Eléctrica Univ del sur de California Los Ángeles, CA 90089, EE. UU. Bkrishna@usc.edu Resumen Entrega a pedido de audio y videoclips en Peer-to-PeerVehicular Ad-Hoc Networks es un área emergente de investigación. Nuestro entorno de destino utiliza operadores de datos, denominados Zebroids, donde un dispositivo móvil lleva un elemento de datos en nombre de un servidor a un cliente, minimizando así su latencia de disponibilidad. En este estudio, cuantificamos la variación en la latencia de disponibilidad con Zebroids en función de un rico conjunto de parámetros como la densidad del automóvil, el almacenamiento por dispositivo, el tamaño del repositorio y las políticas de reemplazo empleadas por Zebroids. Utilizando análisis y extensas simulaciones, obtenemos nuevas ideas sobre el diseño de sistemas basados en portadores. Se pueden obtener mejoras significativas en la latencia con cebroides a costa de una sobrecarga mínima. Estas mejoras ocurren incluso en escenarios con menor precisión en las predicciones de las rutas de automóviles. Dos hallazgos particularmente sorprendentes son: (1) una política ingenua de reemplazo aleatorio empleada por los Zebroids muestra un rendimiento competitivo, y (2) las mejoras de latencia obtenidas con una instanciación simplificada de Zebroides son robustas a los cambios en la distribución de popularidad de los elementos de datos. Categorías y descriptores de sujetos: C.2.4 [Sistemas distribuidos]: Términos generales del cliente/servidor: algoritmos, rendimiento, diseño, experimentación.1. Introducción Los avances tecnológicos en áreas de almacenamiento y comunicaciones inalámbricas ahora han hecho factible imaginar la entrega a pedido de elementos de datos, por ejemplo, clips de video y audio, en redes vehiculares de contenido de pares. En trabajo previo, Ghandeharizadeh et al.[10] introduzca el concepto de vehículos equipados con un dispositivo de autos-tope de automóviles, denominado autómata, para el entretenimiento en el vehículo. Las características notables de un autómata incluyen un dispositivo de almacenamiento masivo que ofrece cientos de gigabytes (GB) de almacenamiento, un procesador rápido y varios tipos de tarjetas de red. Incluso con las unidades de disco de 500 GB de hoy, un depósito de contenido de entretenimiento diverso puede exceder la capacidad de almacenamiento de un solo autómata. Tales repositorios constituyen el foco de este estudio. Para intercambiar datos, suponemos que cada autómata está configurado con dos tipos de tarjetas de red: 1) una tarjeta de red de bajo ancho de banda con una larga gama de radio en el orden de millas que permite que un dispositivo de autómata se comunique con una estación celular o WIMAX cercana, 2) Una tarjeta de red de alto ancho de banda con una rango de radio limitado en el orden de cientos de pies. La conexión de alto ancho de banda admite las tasas de datos en el orden de decenas a cientos de megabits por segundo y representa la red de pares ad-hoc entre los vehículos. Esto se etiqueta como el plano de datos y se emplea para intercambiar elementos de datos entre dispositivos. La conexión de bajo ancho de banda sirve como plano de control, lo que permite que los dispositivos de autómata intercambien metadatos con uno o más servidores centralizados. Esta conexión ofrece anchos de banda en el orden de decenas a cientos de kilobits por segundo. Los servidores centralizados, denominados despachadores, calculan los horarios de la entrega de datos a lo largo del plano de datos utilizando los metadatos proporcionados. Estos horarios se transmiten a los vehículos participantes utilizando el plano de control. La viabilidad técnica de dicha arquitectura de dos niveles se presenta en [7], con resultados preliminares para demostrar que el ancho de banda del plano de control es suficiente para el intercambio de información de control necesaria para realizar dicha aplicación. En un escenario típico, un dispositivo automático presenta a un pasajero con una lista de elementos de datos1, que muestra tanto el nombre de cada elemento de datos como su latencia de disponibilidad. Este último, denotado como δ, se define como el momento más temprano en el que el cliente encuentra una copia de su elemento de datos solicitado. Un elemento de datos está disponible inmediatamente cuando reside en el almacenamiento local del dispositivo automático que sirve a la solicitud. Debido a las limitaciones de almacenamiento, un autómata puede no almacenar todo el repositorio. En este caso, la latencia de disponibilidad es el momento desde que el usuario emite una solicitud hasta que los autómatas encuentran otro automóvil que contiene el elemento de datos referenciado.(Los términos automóviles y autómatas se usan indistintamente en este estudio). La latencia de disponibilidad para un elemento es una función de la ubicación actual del cliente, su destino y la ruta de viaje, el modelo de movilidad de los vehículos equipados con autómatas, el número de réplicas construidas para los diferentes elementos de datos y la ubicación de las réplicas del elemento de datos réplicasa través de los vehículos. Un método para mejorar la latencia de disponibilidad es emplear operadores de datos que transportan una réplica del elemento de datos solicitado desde un automóvil de servidor que lo contiene a un cliente que lo solicitó. Estos portadores de datos se denominan cebroides. La selección de Zebroids es facilitada por la arquitectura de dos niveles. El plano de control permite la recopilación de información centralizada en un despachador presente en una estación base.2 Algunos ejemplos de control en1 sin pérdida de generalidad, el elemento de datos del término podría ser medios tradicionales como texto o medios continuos, como un audio o video clip.2 Puede haber despachadores desplegados en un subconjunto de las estaciones base para la tolerancia a fallas y la robustez. Los despachadores entre basestaciones pueden comunicarse a través de la infraestructura con cable.75 Formación son actualmente solicitudes activas, ruta de viaje de los clientes y sus destinos, y caminos de los otros autos. Para cada solicitud del cliente, el despachador puede elegir un conjunto de operadores Z que colaboren para transferir un elemento de datos de un servidor a un cliente (Z-Relay Zebroids). Aquí, Z es el número de cebroides de tal manera que 0 ≤ z <n, donde n es el número total de automóviles. Cuando z = 0 no hay operadores, lo que requiere que un servidor entregue el elemento de datos directamente al cliente. De lo contrario, el equipo de relé elegido de Z Zebroids entrega el elemento de datos transitivamente entre sí para llegar al cliente, reduciendo así la latencia de disponibilidad (ver Sección 3.1 para más detalles). Para aumentar la robustez, el despachador puede emplear múltiples equipos de retransmisión de transportistas Z para cada solicitud. Esto puede ser útil en escenarios en los que el despachador tiene una precisión de predicción más baja en la información sobre las rutas de los automóviles. Finalmente, las limitaciones de almacenamiento pueden requerir que un Zebroid desaloje los elementos de datos existentes de su almacenamiento local para acomodar el elemento solicitado del cliente. En este estudio, cuantificamos los siguientes factores principales que afectan la latencia de disponibilidad en presencia de cebroides: (i) tamaño del repositorio del elemento de datos, (ii) densidad de automóvil, (iii) capacidad de almacenamiento por automóvil, (iv) duración del viaje del cliente, (((v) Esquema de reemplazo empleado por los Zebroides y (vi) precisión de las predicciones de ruta del automóvil. Para un subconjunto significativo de estos factores, abordamos algunas preguntas clave relacionadas con el uso de cebroides tanto mediante análisis como simulaciones extensas. Nuestros principales hallazgos son los siguientes. Una ingenua política de reemplazo aleatorio empleada por los Zebroids muestra un rendimiento competitivo en términos de latencia de disponibilidad. Con tal política, se pueden obtener mejoras sustanciales en la latencia con cebroides a una sobrecarga de reemplazo mínimo. En escenarios más prácticos, donde el despachador tiene información inexacta sobre las rutas de los automóviles, los Zebroids continúan proporcionando mejoras de latencia. Un resultado sorprendente es que los cambios en la popularidad de los elementos de datos no afectan las ganancias de latencia obtenidas con una simple instanciación de zebroides de relajación de Z llamados cebroides únicos (ver Sección 3.1). Este estudio sugiere una serie de instrucciones interesantes que se realizarán para obtener una mejor comprensión del diseño de sistemas basados en portadores que mejoran la latencia de disponibilidad. Trabajo relacionado: la replicación en las redes ad-hoc móviles ha sido un tema ampliamente estudiado [11, 12, 15]. Sin embargo, ninguno de estos estudios emplea cebroides como portadores de datos para reducir la latencia de las solicitudes de los clientes. Varios estudios novedosos e importantes como Zebranet [13], Daknet [14], Data Mules [16], Ferries de mensajes [20] y Seek y Focus [17] han analizado factores que afectan las redes conectadas intermitentemente que consisten en portadores de datos similares en espíritua cebroides. Los factores considerados por cada estudio están dictados por su entorno asumido y su aplicación objetivo. Una característica novedosa de nuestro estudio es el impacto en la latencia de disponibilidad para un repositorio de la base de datos determinado de elementos. Se puede obtener una descripción detallada de los trabajos relacionados en [9]. El resto de este documento está organizado de la siguiente manera. La Sección 2 proporciona una visión general de la terminología junto con los factores que afectan la latencia de disponibilidad en presencia de cebroides. La Sección 3 describe cómo se pueden emplear los cebroides. La Sección 4 proporciona detalles de la metodología de análisis empleada para capturar el rendimiento con Zebroids. La Sección 5 describe los detalles del entorno de simulación utilizado para la evaluación. La Sección 6 solicita las preguntas clave examinadas en este estudio y las responde mediante análisis y simulaciones. Finalmente, la Sección 7 presenta breves conclusiones y futuras direcciones de investigación.2. Descripción general y terminología La Tabla 1 resume la notación de los parámetros utilizados en el documento. A continuación presentamos algo de terminología utilizada en el documento. Suponga una red de automóviles equipados con autos, cada uno con capacidad de almacenamiento de bytes α. La capacidad de almacenamiento total del sistema es ST = N · α. Hay t elementos de datos en la base de datos, cada uno con parámetros de la base de datos T número de elementos de datos. Tamaño de SI del elemento de datos I FI FIRENCE DE ACCESO AL INCIEDAD DE DATOS I.Parámetros de replicación RI Frecuencia normalizada de acceso al elemento de datos I RI Número de réplicas para el elemento de datos en el que caracteriza un esquema de replicación particular.Δi Disponibilidad promedio Latencia del ítem de datos I Δagg Latencia de disponibilidad agregada, Δagg = t j = 1 ΔJ · parámetros del sistema de autómata FJ número G Número de celdas en el mapa (2D-Torus). N Número de dispositivos automáticos en el sistema.Capacidad de almacenamiento α por autómata.γ Duración de viaje de los autómatas del cliente. ST Capacidad de almacenamiento total del sistema automático, ST = N · α. Tabla 1: Términos y sus definiciones Tamaño SI. La frecuencia de acceso al elemento de datos I se denota como FI, con T J = 1 FJ = 1. Deje que la duración del viaje de los autómatas del cliente se considere γ. Ahora definimos la frecuencia normalizada de acceso al ítem de datos I, denotado por RI, como: ri = (fi) n t j = 1 (fj) n;0 ≤ n ≤ ∞ (1) El exponente N caracteriza una técnica de replicación particular. Se realiza un esquema de replicación de raíz cuadrada cuando n = 0.5 [5]. Esto sirve como línea base para comparar con el caso cuando se implementan Zebroids. RI se normaliza a un valor entre 0 y 1. El número de réplicas para el ítem de datos I, denotado como RI, es: Ri = Min (N, Max (1, Ri · N · α SI)). Esto captura el caso cuando al menos una copia de cada elemento de datos debe estar presente en la red ad-hoc en todo momento. En los casos en que se puede perder un elemento de datos de la red ad-hoc, esta ecuación se convierte en ri = min (n, max (0, ri · n · α si)). En este caso, es posible que deba ser una solicitud para la solicitud de datos perdidas obteniendo el elemento de un servidor remoto. La latencia de disponibilidad para un elemento de datos I, denotado como ΔI, se define como el momento más temprano en el que un autómata de cliente encontrará la primera réplica del elemento accesible para él. Si esta condición no se satisface, entonces establecemos ΔI en γ. Esto indica que el elemento de datos no estaba disponible para el cliente durante su viaje. Tenga en cuenta que dado que hay al menos una réplica en el sistema para cada elemento de datos I, al establecer γ en un gran valor, nos aseguramos de que los clientes soliciten cualquier elemento de datos que esté satisfecho. Sin embargo, en la mayoría de las circunstancias prácticas, γ puede no ser tan grande como para encontrar cada elemento de datos. Estamos interesados en la latencia de disponibilidad observada en todos los elementos de datos. Por lo tanto, aumentamos la latencia de disponibilidad promedio para cada elemento de datos I con su FI para obtener la siguiente métrica de latencia de disponibilidad ponderada (Δagg): ΔAgG = t i = 1 Δi · Fi A continuación, presentamos nuestro enfoque de solución que describe cómo se seleccionan los cebroides.3. Enfoque de solución 3.1 Zebroids Cuando un cliente hace referencia a un elemento de datos que falta en su almacenamiento local, el despachador identifica todos los autos con una copia del elemento de datos como servidores. A continuación, el despachador obtiene las rutas futuras de todos los automóviles para una duración de tiempo finito equivalente al tiempo máximo que el cliente está dispuesto a esperar a que su solicitud sea atendida. Usando esta información, el despachador programa la ruta de entrega más rápida desde cualquiera de los servidores al cliente que usa cualquier otro automóvil como transportistas intermedios. Por lo tanto, determina el conjunto óptimo de las decisiones de reenvío 76 que permitirán que el elemento de datos se entregue al cliente en la cantidad mínima de tiempo. Tenga en cuenta que la latencia a lo largo de la ruta de entrega más rápida que emplea un equipo de retransmisión de Z Zebroids es similar a la obtenida con enrutamiento epidémico [19] bajo los supuestos de almacenamiento infinito y sin interferencia. Una simple instanciación de Zebroids de Relay Z ocurre cuando Z = 1 y la solicitud de los clientes desencadena una transferencia de una copia del elemento de datos solicitado de un servidor a un Zebroid en sus proximidades. Tal Zebroid se denomina Zebroid única. En algunos casos, el despachador podría tener información inexacta sobre las rutas de los automóviles. Por lo tanto, un Zebroid programado sobre la base de esta información inexacta puede no volver a enjuague con su cliente objetivo. Para minimizar la probabilidad de tales escenarios, el despachador puede programar múltiples cebroides. Esto puede incurrir en sobrecargas adicionales debido a la utilización redundante de los recursos para obtener las mismas mejoras de latencia. El tiempo requerido para transferir un elemento de datos de un servidor a un Zebroid depende de su tamaño y del ancho de banda de enlace disponible. Con pequeños elementos de datos, es razonable suponer que este tiempo de transferencia es pequeño, especialmente en presencia del plano de datos de alto ancho de banda. Los elementos de datos grandes pueden dividirse en fragmentos más pequeños que permiten al despachador programar uno o más cebroides para entregar cada fragmento a un cliente de manera oportuna. Esto sigue siendo una dirección de investigación futura. Inicialmente, el número de réplicas para cada elemento de datos se puede calcular las réplicas utilizando la Ecuación 1. Este esquema calcula el número de réplicas de elementos de datos en función de su popularidad. Es estático porque el número de réplicas en el sistema no cambia y no se realizan reemplazos. Por lo tanto, esto se conoce como el entorno de los nezebroides. Cuantificamos el rendimiento de las diversas políticas de reemplazo con referencia a esta línea base que no emplea cebroides. Uno puede asumir una fase de inicio en frío, donde inicialmente solo una o pocas copias de cada elemento de datos existen en el sistema. Muchas espacios de almacenamiento de los autos pueden estar desocupados. Cuando los automóviles se encuentran entre sí, construyen nuevas réplicas de algunos elementos de datos seleccionados para ocupar las ranuras vacías. El procedimiento de selección puede ser elegir los elementos de datos de manera uniforme al azar. Se crean nuevas réplicas siempre que un automóvil tenga un cierto umbral de su almacenamiento desocupado. Finalmente, la mayoría de la capacidad de almacenamiento de un automóvil se agotará.3.2 Políticas de reemplazo basadas en el operador Las políticas de reemplazo consideradas en este documento son reactivas ya que un reemplazo ocurre solo en respuesta a una solicitud emitida para un cierto elemento de datos. Cuando el almacenamiento local de un Zebroid está completamente ocupado, necesita reemplazar uno de sus elementos existentes para llevar el elemento de datos solicitado al cliente. Para este propósito, el Zebroid debe seleccionar un candidato apropiado para el desalojo. Este proceso de decisión es análogo al encontrado en la paginación del sistema operativo, donde el objetivo es maximizar la relación de accesorios de caché para evitar el retraso de acceso al disco [18]. Las políticas de reemplazo basadas en portadores empleadas en nuestro estudio se usan menos recientemente (LRU), menos frecuentemente usadas (LFU) y aleatorias (donde un candidato de desalojo se elige uniformemente al azar). Hemos considerado variantes locales y globales de las políticas LRU/LFU que determinan si el conocimiento local o global de los contenidos de los automóviles conocidos en el despachador se usa para la decisión de desalojo en un Zebroid (ver [9] para obtener más detalles). Las políticas de reemplazo incurren en los siguientes gastos generales. Primero, la complejidad asociada con la implementación de una política. En segundo lugar, el ancho de banda utilizado para transferir una copia de un elemento de datos de un servidor al Zebroid. Tercero, el número promedio de reemplazos incurridos por los Zebroids. Tenga en cuenta que en el caso de No-Zebroids no se incurre en sobrecarga. Las métricas consideradas en este estudio son la latencia de disponibilidad agregada, ΔAgG, la mejora porcentual en ΔAgG con cebroides en comparación con el caso de no bebroides y el número promedio de reemplazos incurridos por solicitud del cliente, que es un indicador de la sobrecarga incurrida por los cebroides. Tenga en cuenta que los despachadores con la ayuda del plano de control pueden garantizar que no se pierda ningún elemento de datos del sistema. En otras palabras, al menos una réplica de cada elemento de datos se mantiene en la red ad-hoc en todo momento. En tales casos, a pesar de que un automóvil puede cumplir con un cliente solicitante antes que otros servidores, si su almacenamiento local contiene elementos de datos con una sola copia en el sistema, entonces dicho automóvil no se elige como Zebroid.4. La metodología de análisis aquí, presentamos la metodología de evaluación analítica y algunas aproximaciones como ecuaciones de forma cerrada que capturan las mejoras en la latencia de disponibilidad que se pueden obtener con los cebroides de oneinstantáneos y Z-Relay. Primero, presentamos algunos preliminares de nuestra metodología de análisis.• Sea n el número de automóviles en la red realizando una caminata aleatoria 2D en un toro √ g × √ g. Un automóvil adicional sirve como cliente que produce un total de autos N + 1. Tal modelo de movilidad se ha utilizado ampliamente en la literatura [17, 16] principalmente porque es susceptible de análisis y proporciona una línea de base contra la cual se puede comparar el rendimiento de otros modelos de movilidad. Además, esta clase de modelos de movilidad de Markovian se ha utilizado para modelar los movimientos de los vehículos [3, 21].• Suponemos que todos los automóviles comienzan desde la distribución estacionaria y realizan caminatas aleatorias independientes. Aunque para escenarios de densidad dispersa, la suposición de independencia se mantiene, ya no es válida cuando n se acerca a G. • Deja que el tamaño del depósito de intereses del ítem de datos sea T. Además, el ítem de datos I tiene réplicas de RI. Esto implica que los automóviles RI, identificados como servidores, tienen una copia de este elemento de datos cuando el cliente solicita el elemento i. Todos los resultados de análisis presentados en esta sección se obtienen suponiendo que el cliente esté dispuesto a esperar siempre que sean satisfechos (duración del viaje ilimitada γ = ∞). Con el modelo de movilidad de caminata aleatoria en un Torus 2D, existe una garantía de que mientras haya al menos una réplica del elemento de datos solicitado en la red, el cliente eventualmente encontrará esta réplica [2]. Las extensiones al análisis que también consideran las duraciones de viaje finito se pueden obtener en [9]. Considere un escenario en el que no se empleen cebroides. En este caso, la latencia de disponibilidad esperada para el elemento de datos es el tiempo de reunión esperado de la caminata aleatoria realizada por el cliente con cualquiera de las caminatas aleatorias realizadas por los servidores. Aldous et al.[2] Muestre que el tiempo de reunión de dos caminatas aleatorias en tal entorno puede modelarse como una distribución exponencial con la media C = C · G · log G, donde la constante C 0.17 para G ≥ 25. El tiempo de reunión, o de manera equivalente, la latencia de disponibilidad ΔI, para el cliente que solicita el ítem de datos I es el momento hasta que encuentre cualquiera de estas réplicas de RI por primera vez. Esta también es una distribución exponencial con el siguiente valor esperado (tenga en cuenta que esta formulación es válida solo para casos dispersos cuando g >> ri): Δi = cglogg ri La latencia de disponibilidad agregada sin emplear cebroides es entonces esta expresión promediada sobre todos los elementos de datos,Ponderado por su frecuencia de acceso: Δagg (no-zeb) = t i = 1 fi · c · g · log g ri = t i = 1 fi · c ri (2) 77 4.1 Zebroides únicos recuerdan eso con una-Las cebroides instantáneas, para una solicitud dada, se crea una nueva réplica en un automóvil en las cercanías del servidor, siempre que este automóvil se reúna con el cliente antes que cualquiera de los servidores RI. Además, esta réplica se genera en el momento del momento cuando el cliente emite la solicitud. Deje que NC sea el número total esperado de nodos que están en la misma celda que cualquiera de los servidores RI. Luego, tenemos nc i = (n - ri) · (1 - (1 - 1 g) ri) (3) En el modelo analítico, suponemos que se crean nuevas réplicas nc i, de modo que el número total de réplicas esaumentado a RI +NC i. La latencia de disponibilidad se reduce ya que es más probable que el cliente cumpla con una réplica antes. La latencia de disponibilidad esperada agregada en el caso de cebroides individuales se da luego por Δagg (zeb) = t i = 1 fi · c · g · log g ri + nc i = t i = 1 fi · c ri + nc(4) Observe que al obtener esta expresión, para facilitar el análisis, hemos asumido que las nuevas réplicas comienzan desde ubicaciones aleatorias en el toro (no necesariamente de la misma celda que los servidores RI originales). Por lo tanto, trata todos los operadores NC I de forma independiente, al igual que los servidores originales de RI. Como mostraremos a continuación en comparación con las simulaciones, esta aproximación proporciona un límite superior en las mejoras que se pueden obtener porque da como resultado una latencia esperada más baja en el cliente. Cabe señalar que el procedimiento enumerado anteriormente producirá una latencia similar a la empleada por un despachador que emplea cebroides individuales (ver Sección 3.1). Dado que el despachador es consciente de todos los movimientos de automóviles futuros, solo transferiría el elemento de datos solicitado en un solo Zebroid, si determina que el Zebroid se reunirá con el cliente antes que cualquier otro servidor. Esta Zebroid seleccionada se incluye en las nuevas réplicas NC I.4.2 Zebroides de Relay Z Para calcular la latencia de disponibilidad esperada con Zebroides de Relay Z, utilizamos un problema de coloración analógico similar a un enfoque utilizado por Spyropoulos et al.[17]. Los detalles del procedimiento para obtener una expresión de forma cerrada se dan en [9]. La latencia de disponibilidad agregada (Δagg) con zebroides de rel-relay viene dada por Δagg (zeb) = t i = 1 [fi · c n + 1 · 1 n + 1-ri · (n · log n ri-log (n + +1 - ri))] (5) 5. Metodología de simulación El entorno de simulación considerado en este estudio comprende vehículos como los automóviles que llevan una fracción del repositorio de elementos de datos. Un parámetro de precisión de predicción proporciona inherentemente una cierta garantía probabilística sobre la confianza de las predicciones de la ruta del automóvil conocidas en el despachador. Un valor del 100% implica que las rutas exactas de todos los automóviles se conocen en todo momento. Un valor del 70% para este parámetro indica que las rutas predichas para los automóviles coincidirán con los reales con probabilidad 0.7. Tenga en cuenta que esta probabilidad se extiende a través de las rutas del automóvil durante toda la duración del viaje. Ahora proporcionamos los preliminares del estudio de simulación y luego describimos la configuración de parámetros utilizada en nuestros experimentos.• Similar a la metodología de análisis, el mapa utilizado es un toro 2D. Un modelo de movilidad de Markov que representa una caminata aleatoria 2D imparcial en la superficie del toro describe el movimiento de los autos a través de este toro.• Cada cuadrícula/celda es un estado único de esta cadena de Markov. En cada ranura de tiempo, cada automóvil realiza una transición de una celda a cualquiera de sus 8 celdas vecinas. La transición es una función de la ubicación actual del automóvil y una matriz de transición de probabilidad q = [QIJ] donde QIJ es la probabilidad de transición del estado I al estado j. Solo los autos equipados con autómatas dentro de la misma celda pueden comunicarse entre sí.• Los parámetros γ, δ se han discretizado y expresado en términos del número de ranuras de tiempo.• Un dispositivo automático no mantiene más de una réplica de un elemento de datos. Esto se debe a que las réplicas adicionales ocupan el almacenamiento sin proporcionar beneficios.• Se pueden emplear cebroids uno instantáneo o Z-Relay Z por solicitud del cliente para mejorar la latencia.• A menos que se mencione lo contrario, se supone que el parámetro de precisión de predicción es del 100%. Esto se debe a que este estudio tiene como objetivo cuantificar el efecto de una gran cantidad de parámetros individualmente en la latencia de disponibilidad. Aquí, establecemos el tamaño de cada elemento de datos, SI, para ser 1. α representa el número de ranuras de almacenamiento por autómata. Cada ranura de almacenamiento almacena un elemento de datos.γ representa la duración del viaje de los clientes en términos del número de espacios de tiempo. Por lo tanto, los posibles valores de latencia de disponibilidad son entre 0 y γ.δ se define como el número de ranuras de tiempo después de la cual un dispositivo de autómata cliente encontrará una réplica del elemento de datos por primera vez. Si el cliente encontró una réplica para el elemento de datos solicitado en la primera celda, entonces establecemos δ = 0. Si Δ> γ, entonces establecemos δ = γ, indicando que el cliente no encontró una copia del elemento de datos solicitado durante todo su viaje. En todas nuestras simulaciones, para la ilustración consideramos un Torus 2D 5 × 5 con γ establecido en 10. Nuestros experimentos indican que las tendencias en la escala de resultados a mapas de mayor tamaño. Simulamos una distribución sesgada de acceso a los elementos de datos T que obedecen la ley ZIPFS con una media de 0.27. Se muestra que esta distribución corresponde a la venta de entradas de cine en los Estados Unidos [6]. Empleamos un esquema de replicación que asigna réplicas para un elemento de datos en función de la raíz cuadrada de la frecuencia de acceso de ese elemento. Se muestra que el esquema de replicación de raíz cuadrada tiene un rendimiento de latencia competitiva en un gran espacio de parámetros [8]. Las réplicas del elemento de datos se distribuyen de manera uniforme a través de los dispositivos automáticos. Esto sirve como el caso de no vebroides de línea base. El esquema de raíz cuadrada también proporciona la distribución de réplica inicial cuando se emplean los cebroides. Tenga en cuenta que los reemplazos realizados por los Zebroids causarán cambios en la distribución de réplica del elemento de datos. Las solicitudes generadas según la distribución ZIPF se emiten una a la vez. El automóvil cliente que emite la solicitud se elige de manera redonda. Después de un período máximo de γ, se registra la latencia encontrada por esta solicitud. En todos los resultados de la simulación, cada punto es un promedio de 200,000 solicitudes. Además, los intervalos de confianza del 95% determinados para los resultados son bastante ajustados para las métricas de latencia y sobrecarga de reemplazo. Por lo tanto, solo los presentamos para la métrica que captura el porcentaje de mejora en la latencia con respecto al caso de no ceboides.6. Resultados En esta sección, describimos nuestros resultados de evaluación donde se abordan las siguientes preguntas clave. Con una amplia variedad de esquemas de reemplazo disponibles para un Zebroid, ¿cuál es su efecto sobre la latencia de disponibilidad? Una pregunta más central es: ¿los cebroides proporcionan 78 0 20 40 60 80 100 1.5 2 2.5 3 3.5 Número de automóviles Latencia de disponibilidad agregada (Δ AGG) LRU_GLOBAL LFU_GLOBAL LRU_LOCAL LFU_LOCAL AROYA Figura 1: La Figura 1 muestra la latencia de disponibilidad cuando se emplea un instantáneoZebroides en función de los valores (N, α), cuando el almacenamiento total en el sistema se mantiene fijo, ST = 200. ¿MEJORAS SIGNIFICADAS en la latencia de disponibilidad? ¿Cuál es la sobrecarga asociada incurrida para emplear estos cebroides? ¿Qué sucede con estas mejoras en escenarios en los que un despachador puede tener información imperfecta sobre las rutas de los automóviles? ¿Qué compensaciones inherentes existen entre la densidad del automóvil y el almacenamiento por automóvil con respecto a su efecto combinado e individual sobre la latencia de disponibilidad en presencia de cebroides? Presentamos tanto análisis simple como simulaciones detalladas para proporcionar respuestas a estas preguntas, así como obtener información sobre el diseño de sistemas basados en portadores.6.1 ¿Cómo es un esquema de reemplazo empleado por una latencia de disponibilidad de impacto cebroid? Para la ilustración, presentamos experimentos de escala donde se emplean los cebroides individuales (ver Figura 1). A escala, queremos decir que α y N se cambian proporcionalmente para mantener constante el almacenamiento total del sistema, ST,. Aquí, t = 50 y st = 200. Elegimos los siguientes valores de (n, α) = {(20,10), (25,8), (50,4), (100,2)}. La figura indica que un esquema de reemplazo aleatorio muestra un rendimiento competitivo. Esto se debe a varias razones. Recuerde que la distribución de réplica inicial se establece según el esquema de replicación Squareroot. El esquema de reemplazo aleatorio no altera esta distribución, ya que hace que los reemplazos sean ciegos a la popularidad de un elemento de datos. Sin embargo, los reemplazos causan una reorganización de datos dinámicos para atender mejor la solicitud actualmente activa. Además, el patrón de movilidad de los automóviles es aleatorio, por lo tanto, las ubicaciones de las cuales las solicitudes emiten los clientes también son aleatorios y no se conocen a priori en el despachador. Estos hallazgos son significativos porque se puede implementar una política de reemplazo aleatoria de manera descentralizada simple. Los esquemas LRU-global y LFU-global proporcionan un rendimiento de latencia que es peor que al azar. Esto se debe a que estas políticas desarrollan rápidamente una preferencia por los elementos de datos más populares, creando así una mayor cantidad de réplicas para ellos. Durante el desalojo, los elementos de datos más populares casi nunca se seleccionan como candidato de reemplazo. En consecuencia, hay menos réplicas para los artículos menos populares. Por lo tanto, la distribución inicial de las réplicas del elemento de datos cambia de raíz cuadrada a esa parecido a la replicación lineal. El mayor número de réplicas para los elementos de datos populares proporciona beneficios adicionales marginales, mientras que el menor número de réplicas para los otros elementos de datos perjudica el rendimiento de latencia de estas políticas globales. Los esquemas LFU-Local y LRU-Local tienen un rendimiento similar al aleatorio ya que no tienen suficiente historial de solicitudes de elementos de datos locales. Especulamos que el desempeño de estas políticas locales abordará el de sus variantes globales para un historial lo suficientemente grande de solicitudes de elementos de datos. Debido al rendimiento competitivo mostrado por una política aleatoria, por el resto del documento, presentamos el rendimiento de los cebroides que emplean una política de reemplazo aleatorio.6.2 ¿Los zebroides proporcionan mejoras significativas en la latencia de disponibilidad? Encontramos que en muchos escenarios emplear cebroides proporciona mejoras sustanciales en la latencia de disponibilidad.6.2.1 Análisis primero consideramos el caso de cebroides individuales. La Figura 2.a muestra la variación en Δagg en función de N para t = 10 y α = 1 con un toro de 10 × 10 usando la ecuación 4. Los ejes X e Y se dibujan a una escala logarítmica. Figura 2.b Muestra el % de mejora en ΔAgG obtenida con cebroides individuales. En este caso, solo el eje X se siente a una escala logarítmica. Para ilustración, suponemos que los elementos de datos T se solicitan de manera uniforme. Inicialmente, cuando la red es escasa, la aproximación analítica para las mejoras en la latencia con cebroides, obtenida de las ecuaciones 2 y 4, coincide estrechamente con los resultados de la simulación. Sin embargo, a medida que aumenta N, la suposición de escasez para la cual el análisis es válido, a saber, n << g, ya no es cierto. Por lo tanto, las dos curvas divergen rápidamente. El punto en el que las dos curvas se alejan entre sí corresponden a un valor de Δagg ≤ 1. Además, como se mencionó anteriormente, el análisis proporciona un límite superior en las mejoras de latencia, ya que trata las réplicas recién creadas dadas por NC I de forma independiente. Sin embargo, estas réplicas de NC I comienzan desde la misma celda que una de las riegas RI del servidor. Finalmente, el análisis captura un escenario de OneShot donde dada una distribución de réplica de elemento de datos inicial, se calcula la latencia de disponibilidad. Las nuevas réplicas creadas no afectan las solicitudes futuras del cliente. Debido a las limitaciones del espacio, aquí resumimos las observaciones en el caso en que se emplean Z-Relay Zebroids. El lector interesado puede obtener más detalles en [9]. Observaciones similares, como el caso Zebroid único, se aplican ya que las curvas de simulación y análisis nuevamente comienzan a divergir cuando los supuestos de análisis ya no son válidos. Sin embargo, la observación clave aquí es que la mejora de la latencia con los cebroides de Relay Z es significativamente mejor que el caso de Zebroids individual, especialmente para escenarios de almacenamiento más bajos. Esto se debe a que en escenarios dispersos, las transferencias transitivas entre los cebroides crean un mayor número de réplicas para el elemento de datos solicitado, lo que produce una menor latencia de disponibilidad. Además, también se ve que la curva de validación de simulación para las mejoras en ΔAgg con Zebroids de rel-relay se acerca a la de la caja cebroide única para un almacenamiento más alto (valores de N más altos). Esto se debe a que los cebroides únicos son un caso especial de Zebroides de Z-Relay.6.2.2 Simulación Realizamos simulaciones para examinar todo el espectro de almacenamiento obtenido cambiando la densidad del automóvil N o el almacenamiento por automóvil α para capturar también escenarios donde los supuestos de escasez para los cuales el análisis es válido no se mantiene. Separamos el efecto de N y α capturando la variación de N mientras mantiene α constante (Caso 1) y viceversa (caso 2) con Z-Relay y Zebroides individuales. Aquí, establecemos el tamaño del repositorio como t = 25. La Figura 3 captura el caso 1 mencionado anteriormente. Se observan tendencias similares con el caso 2, una descripción completa de esos resultados está disponible en [9]. Con la Figura 3.B, manteniendo constante α, inicialmente aumentar la densidad del automóvil tiene mayores beneficios de latencia porque el aumento de N introduce más cebroides en el sistema. A medida que aumenta aún más, Ω se reduce porque el almacenamiento total en el sistema aumenta. En consecuencia, el número de réplicas por elemento de datos aumenta así, aumentando el número 79 de servidores. Por lo tanto, la política de reemplazo no puede encontrar un Zebroid con tanta frecuencia para transportar el elemento de datos solicitado al cliente antes que cualquiera de los servidores. Por otro lado, el mayor número de servidores beneficia el caso de no n de nicebroides para derribar Δagg. El efecto neto da como resultado una reducción en Ω para valores más grandes de N. 10 1 10 2 10 3 10 −1 10 0 10 1 10 2 Número de automóvilΔagg) 2.a) Δagg 10 1 10 2 10 3 0 10 20 30 40 50 60 80 90 100 100 Número de automóviles % de mejora en Δagg WRT No - Zebroides (Ω) Simulación analítica de nivel superior 2.b) Ω Figura 2: La Figura 2 muestra el rendimiento de latencia con Zebroides oneinstantáneos a través de simulaciones junto con la aproximación analítica para un toro de 10 × 10 con t = 10. Las tendencias mencionadas anteriormente son similares a las obtenidas del análisis. Sin embargo, algo contradictorio con el almacenamiento relativamente más alto del sistema, los cebroides de relajación Z proporcionan mejoras ligeramente más bajas en la latencia en comparación con los cebroides individuales. Especulamos que esto se debe a las diferentes distribuciones de réplicas de elementos de datos impuestos por ellos. Tenga en cuenta que los reemplazos realizados por los Zebroids causan fluctuaciones en estas distribuciones de réplicas que pueden afectar las futuras solicitudes del cliente. Actualmente estamos explorando opciones adecuadas de parámetros que pueden capturar estas distribuciones de réplicas cambiantes.6.3 ¿Cuál es la sobrecarga incurrida con mejoras en la latencia con Zebroids? Encontramos que las mejoras en la latencia con Zebroids se obtienen a una sobrecarga mínima de reemplazo (<1 por solicitud del cliente).6.3.1 Análisis con cebroides individuales, para cada cliente solicita un máximo de un Zebroid para mejorar la latencia. Por lo tanto, la sobrecarga de reemplazo por solicitud del cliente puede equivaler a un máximo de uno. Recuerde que para calcular la latencia con una instantánea 0 50 100 150 200 250 300 350 400 0 1 2 3 4 5 6 Número de automóvil150 200 250 300 350 400 0 10 20 30 40 50 60 Número de automóviles % de mejora en Δagg WRT No-Bebroides (Ω) Locas z itantáneas 3.B Figura 3: La Figura 3 representa el rendimiento de latencia con ambos instantáneosy Z-Relay Zebroids en función de la densidad del automóvil cuando α = 2 y t = 25. Zebroides, NC I nuevas réplicas se crean en la misma celda que los servidores. Ahora solo se incurre en un reemplazo si una de estas réplicas recientemente creadas de NC I se encuentra con el cliente antes que cualquiera de los servidores RI. Sea XRI y XNC, respectivamente, serán variables aleatorias que capturan el tiempo mínimo hasta cualquiera de las réplicas RI y NC I se encuentran con el cliente. Dado que se supone que XRI y XNC I son independientes, por la propiedad de variables aleatorias distribuidas exponencialmente, tenemos, sobrecarga/request = 1 · p (xnc i <xri) + 0 · p (xri ≤ xnc i) (6) sobrecarga/Solicitud = Ri c ri c + nc i c = ri ri + nc i (7) Recuerde que el número de réplicas para el elemento de datos I, RI, es una función del almacenamiento total en el sistema, es decir, RI = K · n ·α donde k satisface la restricción 1 ≤ ri ≤ N. Usando esto junto con la ecuación 2, obtenemos sobrecarga/solicitud = 1 - g g + n · (1 - k · α) (8) Ahora si mantenemos el almacenamiento total del sistema N· Α constante ya que G y T también son constantes, el aumento de N aumenta la sobrecarga de reemplazo. Sin embargo, si N · α es constante, el aumento de N causa α 80 0 20 40 60 80 100 0 0.05 0.1 0.15 0.2 0.25 0.3 0.35 0.4 0.45 0.5 Número de automóvil= 10) (n = 25, α = 8) (n = 50, α = 4) (n = 100, α = 2) Figura 4: La Figura 4 captura la sobrecarga de reemplazo cuando se emplea cebroides instantáneos en función de (n (n, α) valores, cuando el almacenamiento total en el sistema se mantiene fijo, st = 200. Baje. Esto implica que se incurre en una sobrecarga de reemplazo más alta para valores de N más altos y más bajos. Además, cuando ri = n, esto significa que cada automóvil tiene una réplica del elemento de datos i. Por lo tanto, no se emplean cebroides cuando se solicita este artículo, lo que produce una sobrecarga/solicitud de este artículo como cero. A continuación, presentamos resultados de simulación que validan nuestra hipótesis de análisis para la sobrecarga asociada con el despliegue de cebroides individuales.6.3.2 Simulación La Figura 4 muestra la sobrecarga de reemplazo con cebroides individuales cuando (n, α) varían mientras mantiene constante el almacenamiento total del sistema. Las tendencias mostradas por la simulación están de acuerdo con las predichas por el análisis anterior. Sin embargo, el almacenamiento total del sistema se puede cambiar ya sea variando la densidad del automóvil (N) o el almacenamiento por automóvil (α). Debido a tendencias similares, aquí presentamos el caso cuando α se mantiene constante y N varía (Figura 5). Remitimos al lector a [9] para el caso cuando α varía y N se mantiene constante. Presentamos un argumento intuitivo para el comportamiento de las curvas de reemplazo de reemplazo de Perrequest. Cuando el almacenamiento es extremadamente escaso, por lo que solo existe una réplica por elemento de datos en la red de autómatas, el número de reemplazos realizados por los Zebroids es cero ya que cualquier reemplazo hará que se pierda un elemento de datos del sistema. El despachador asegura que no se pierda ningún elemento de datos del sistema. En el otro extremo del espectro, si el almacenamiento se vuelve tan abundante que α = t, entonces todo el repositorio del elemento de datos puede replicarse en cada automóvil. El número de reemplazos es nuevamente cero ya que cada solicitud se puede cumplir localmente. Un escenario similar ocurre si N se incrementa a un valor tan grande que otro automóvil con el elemento de datos solicitado siempre está disponible en las cercanías del cliente. Sin embargo, hay un espectro de almacenamiento en el medio donde los reemplazos de los cebroides programados dan como resultado mejoras en ΔAgg (ver Figura 3). Además, observamos que para los escenarios de almacenamiento disperso, las mejoras más altas con Zebroides de Relay Z se obtienen a costa de una sobrecarga de reemplazo más alta en comparación con el caso de Zebroids individual. Esto se debe a que en el primer caso, cada una de estas zebroides Z seleccionadas a lo largo de la ruta de latencia más baja al cliente debe realizar un reemplazo. Sin embargo, la sobrecarga de reemplazo aún es inferior a 1, lo que indica que en un promedio de menos de un reemplazo por solicitud del cliente se necesita incluso cuando se emplean Zebroides de Relay Z.0 50 100 150 200 250 300 350 400 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 Número de automóvilN se varía manteniendo α = 2. 10 20 30 40 50 60 70 80 90 100 0 0.5 1 1.5 2 2.5 3 3.5 4 Porcentaje de predicción No - Zebroides (n = 50) One - Instantáneo (n = 50) Z -Releys (N= 50) No -Zebroids (n = 200) Uno -instantáneo (n = 200) Z -Reloys (n = 200) Latencia de disponibilidad agregada (Δagg) Figura 6: La Figura 6 muestra ΔAgG para diferentes densidades de automóviles en función de la predicción de la predicciónMétrica de precisión con α = 2 y t = 25. 6.4 ¿Qué sucede con la latencia de disponibilidad con cebroides en escenarios con inexactitudes en las predicciones de la ruta del automóvil? Encontramos que los cebroides continúan proporcionando mejoras en la latencia de disponibilidad incluso con una menor precisión en las predicciones de la ruta del automóvil. Utilizamos un solo parámetro P para cuantificar la precisión de las predicciones de la ruta del automóvil.6.4.1 Análisis Dado que P representa la probabilidad de que una ruta de automóvil predicha por el despachador coincida con la real, por lo tanto, la latencia con Zebroides puede ser aproximada por ΔERR Agg = P · Δagg (Zeb) + (1 - P) · Δagg(no-zeb) (9) Δerr agg = p · Δagg (zeb) + (1-p) · c ri (10) Las expresiones para ΔAgg (zeb) se pueden obtener de las ecuaciones 4 (unas instantáneas) o 5 (z (z-Relay Zebroids).6.4.2 Simulación La Figura 6 muestra la variación en Δagg en función de esta métrica de precisión de predicción de la ruta. Observamos una reducción suave en la mejora 81 en ΔAgG a medida que se reduce la métrica de precisión de predicción. Para los cebroides que están programados pero no se enredan con el cliente debido al error de predicción, etiquetamos dichos reemplazos realizados por los Zebroids como falló. Se ve que los reemplazos fallidos aumentan gradualmente a medida que se reduce la precisión de la predicción.6.5 ¿En qué condiciones se maximizan las mejoras en la latencia de disponibilidad con Zebroids? Sorprendentemente, encontramos que las mejoras en la latencia obtenidas con cebroides individuales son independientes de la distribución de entrada de la popularidad de los elementos de datos.6.5.1 Análisis La diferencia fraccional (etiquetada ω) en la latencia entre los no-bebroides y los cebroides individuales se obtiene de las ecuaciones 2, 3 y 4 como Ω = t i = 1 fi · c ri-t i = 1fi · c ri+(n - ri) · (1− (1− 1 g) ri) t i = 1 fi · c ri (11) aquí c = c · g · log G. Esto captura la mejora fraccional en la disponibilidadLatencia obtenida al emplear cebroides individuales. Sea α = 1, haciendo que el almacenamiento total en el sistema st = N. suponiendo que la distribución de réplica inicial sea según el esquema de replicación Squareroot, tenemos, ri = √ fi · n t j = 1 √ fj. Por lo tanto, obtenemos fi = k2 · r2 i n2, donde k = t j = 1 fj. Usando esto, junto con la aproximación (1 - x) n 1 - n · x para x x, simplificamos la ecuación anterior para obtener, ω = 1 - t i = 1 ri 1+ n - ri g t i = 1 ri in in in in in in in in in in inPara determinar cuándo se maximizan las ganancias con Zebroides únicos, podemos enmarcar un problema de optimización de la siguiente manera: Maximizar ω, sujeto a t i = 1 RI = ST TEOREM 1. Con un esquema de replicación de raíz cuadrada, las mejoras obtenidas con cebroides individuales son independientes de la distribución de popularidad de entrada de los elementos de datos.(Consulte [9] para la prueba) 6.5.2 Simulación realizamos simulaciones con dos distribución de frecuencia diferente de elementos de datos: uniforme y Zipfian (con media = 0.27). Mejoras de latencia similares con cebroides individuales se obtienen en ambos casos. Este resultado tiene implicaciones importantes. En casos con popularidad sesgada hacia ciertos elementos de datos, las mejoras agregadas en la latencia en todas las solicitudes de elementos de datos siguen siendo las mismas. Incluso en escenarios en los que la frecuencia de acceso a los elementos de datos cambia dinámicamente, los Zebroids continuarán proporcionando mejoras de latencia similares.7. Conclusiones y futuras direcciones de investigación En este estudio, examinamos las mejoras en la latencia que se pueden obtener en presencia de portadores que entregan un elemento de datos de un servidor a un cliente. Cuantificamos la variación en la latencia de disponibilidad en función de un rico conjunto de parámetros, como la densidad del automóvil, el almacenamiento por automóvil, el tamaño de la base de datos de título y las políticas de reemplazo empleadas por Zebroids. A continuación resumimos algunas direcciones clave de investigación futuras que pretendemos seguir. Para reflejar mejor la realidad, nos gustaría validar las observaciones obtenidas de este estudio con algunos rastros de simulación del mundo real de los movimientos vehiculares (por ejemplo, usando Corsim [1]). Esto también servirá como validación para la utilidad del modelo de movilidad de Markov utilizado en este estudio. Actualmente estamos analizando el rendimiento de Zebroids en un conjunto de datos del mundo real que comprende una red ad-hoc de autobuses que se mueven alrededor de un pequeño vecindario en Amherst [4]. Los Zebroids también se pueden utilizar para la entrega de elementos de datos que llevan información confidencial de retraso con un cierto vencimiento. Extensiones a Zebroids que satisfacen tales requisitos de aplicación presenta una interesante dirección de investigación futura.8. Agradecimientos Esta investigación fue apoyada en parte por una beca Annenberg y NSF subvenciones numeradas CNS-0435505 (Nets Noss), CNS-0347621 (carrera) e IIS-0307908.9. Referencias [1] Administración Federal de Carreteras. Simulación del corredor. Versión 5.1, http://www.ops.fhwa.dot.gov/trafficanalysistools/cors im.htm.[2] D. Aldous y J. Llenar. Cadenas reversibles de Markov y caminatas aleatorias en gráficos. Bajo preparación.[3] A. Bar-Noy, I. Kessler y M. Sidi. Usuarios móviles: actualizar o no para actualizar. En IEEE Infocom, 1994. [4] J. Burgess, B. Gallagher, D. Jensen y B. Levine. MaxProp: Enrutamiento para redes tolerantes a la interrupción basada en vehículos. En IEEE Infocom, abril de 2006. [5] E. Cohen y S. Shenker. Estrategias de replicación en redes de pares no estructuradas. En Sigcomm, 2002. [6] A. Dan, D. Dias, R. Mukherjee, D. Sitaram y R. Tewari. Buffing y almacenamiento en caché en servidores de video a gran escala. En Compcon, 1995. [7] S. Ghandeharizadeh, S. Kapadia y B. Krishnamachari. Pavan: un marco de políticas para la disponibilidad de contenido en redes vehiculares ad-hoc. En Vanet, Nueva York, NY, EE. UU., 2004. ACM Press.[8] S. Ghandeharizadeh, S. Kapadia y B. Krishnamachari. Comparación de estrategias de replicación para la disponibilidad de contenido en redes C2P2. En MDM, mayo de 2005. [9] S. Ghandeharizadeh, S. Kapadia y B. Krishnamachari. Una evaluación de la latencia de disponibilidad en redes AD-hoc vehiculares basadas en transportistas. Informe técnico, Departamento de Ciencias de la Computación, Universidad del Sur de California, Ceng-2006-1, 2006. [10] S. Ghandeharizadeh y B. Krishnamachari. C2P2: una red de igual a igual para servicios de información de automóviles a pedido. En el globo. IEEE, 2004. [11] T. Hara. Asignación de réplica efectiva en redes ad-hoc para mejorar la accesibilidad de los datos. En IEEE Infocom, 2001. [12] H. Hayashi, T. Hara y S. Nishio. Un método de asignación de réplica que se adapta a los cambios de topología en las redes ad-hoc. En Dexa, 2005. [13] P. Juang, H. Oki, Y. Wang, M. Martonosi, L. Peh y D. Rubenstein. Computación de eficiencia energética para el seguimiento de la vida silvestre: diseño de compensaciones y experiencias tempranas con Zebranet. SIGARCH Comput. Arquitera News, 2002. [14] A. Pentland, R. Fletcher y A. Hasson. Daknet: Repensar la conectividad en las naciones en desarrollo. Computer, 37 (1): 78-83, 2004. [15] F. Sailhan y V. Issarny. Golpe de almacenamiento cooperativo en redes ad-hoc. En MDM, 2003. [16] R. Shah, S. Roy, S. Jain y W. Brunette. Mulas de datos: modelado y análisis de una arquitectura de tres niveles para redes de sensores dispersos. Elsevier Ad-Hoc Networks Journal, 1 de septiembre de 2003. [17] T. Spyropoulos, K. Psounis y C. Raghavendra. Enrutamiento de una sola copia en redes móviles conectadas intermitentemente. En Secon, abril de 2004. [18] A. Tanenbaum. Sistemas operativos modernos, 2ª edición, Capítulo 4, Sección 4.4. Prentice Hall, 2001. [19] A. Vahdat y D. Becker. Enrutamiento epidémico para redes ad-hoc parcialmente conectadas. Informe técnico, Departamento de Ciencias de la Computación, Duke University, 2000. [20] W. Zhao, M. Ammar y E. Zegura. Un enfoque de transporte de mensajes para la entrega de datos en redes ad-hoc móviles escasas. En Mobihoc, páginas 187-198, Nueva York, NY, EE. UU., 2004. ACM Press.[21] M. Zonoozi y P. Dassanayake. Modelado de movilidad del usuario y caracterización del patrón de movilidad. IEEE Journal sobre áreas seleccionadas en Comunicaciones, 15: 1239-1252, septiembre de 1997. 82