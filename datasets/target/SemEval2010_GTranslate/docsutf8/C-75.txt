Composition of a DIDS by Integrating Heterogeneous IDSs on Grids Paulo F. Silva and Carlos B. Westphall and Carla M. Westphall Network and Management Laboratory Department of Computer Science and Statistics Federal University of Santa Catarina, Florianópolis, Brazil Marcos D. Assunção Grid Computing andLaboratorio de sistemas distribuidos y del Departamento de Ingeniería de Ciencias de la Computación e Ingeniería del Laboratorio de Nicta Victoria La Universidad de Melbourne, Victoria, 3053, Australia {Paulo, Westphal, Assuncao, Carla}@lrg.ufsc.br Resumen Este documento considera la composición de A DIDS (distribuidoSistema de detección de intrusos) mediante la integración de IDS heterogéneos (sistemas de detección de intrusos). Se utiliza un middleware de cuadrícula para esta integración. Además, se propone y validada una arquitectura para esta integración a través de la simulación. Categorías y descriptores de sujetos c.2.4 [Systes distribuidos]: cliente/servidor, aplicaciones distribuidas.1. Varios grupos han propuesto soluciones de introducción para integrar IDS heterogéneas (sistemas de detección de intrusos) [6], [7], [11], [2]. El IDWG (grupo de trabajo de detección de intrusos) describe algunas razones para integrar IDSS del IETF (Grupo de Tarea de Ingeniería de Internet) [12] de la siguiente manera: • Muchos IDS disponibles en el mercado tienen puntos fuertes y débiles, lo que generalmente hace que la implementación sea necesaria la implementación de la implementaciónde más de una identificación para proporcionar una solución adecuada.• Los ataques e intrusiones generalmente se originan en múltiples redes que abarcan varios dominios administrativos;Estos dominios generalmente utilizan diferentes IDS. Luego se necesita la integración de IDSS para correlacionar la información de múltiples redes para permitir la identificación de ataques distribuidos e intrusiones.• La interoperabilidad/integración de diferentes componentes IDS beneficiaría a la investigación sobre la detección de intrusiones y aceleraría la implementación de IDS como productos comerciales. Por lo tanto, DIDSS (sistemas de detección de intrusos distribuidos) comenzaron a surgir a principios de los 90 [9] para permitir la correlación de la información de intrusión de múltiples hosts, redes o dominios para detectar ataques distribuidos. La investigación sobre DIDSS ha recibido mucho interés, principalmente porque los IDS centralizados no pueden proporcionar la información necesaria para evitar tales ataques [13]. Sin embargo, la realización de A DIDS requiere un alto grado de coordinación. Las cuadrículas computacionales son atractivas al permitir el desarrollo de la aplicación y coordinación distribuida en un entorno distribuido. La computación de la red tiene como objetivo permitir coordinar el intercambio de recursos en grupos dinámicos de individuos y/u organizaciones. Además, Grid Middleware proporciona medios para acceso seguro, administración y asignación de recursos remotos;servicios de información de recursos;y protocolos y mecanismos para la transferencia de datos [4]. Según Foster et al.[4], las cuadrículas pueden verse como un conjunto de servicios agregados definidos por los recursos que comparten. OGSA (arquitectura de servicio de cuadrícula abierta) proporciona la base para esta orientación de servicio en las redes computacionales. Los servicios en OGSA se especifican a través de interfaces bien definidas, abiertas, extensibles y independientes de la plataforma, que permiten el desarrollo de aplicaciones interoperables. Este artículo propone un modelo para la integración de IDS mediante el uso de cuadrículas computacionales. El modelo propuesto permite que los IDS heterogéneos funcionen de manera cooperativa;Esta integración se denomina DidSog (sistema de detección de intrusos distribuido en la red). Cada uno de los IDS integrados es visto por otros como un recurso a los que se accede a través de los servicios que expone. Un middleware de la cuadrícula proporciona varias características para la realización de un DIDSOG, incluyendo [3]: coordinación descentralizada de recursos;uso de protocolos e interfaces estándar;y la entrega de QoS optimizado (calidad de servicio). La arquitectura orientada al servicio seguida de las redes (OGSA) permite la definición de interfaces que son adaptables a diferentes plataformas. Las diferentes implementaciones pueden ser encapsuladas por una interfaz de servicio;Esta virtualización permite el acceso constante a los recursos en entornos heterogéneos [3]. La virtualización del entorno a través de las interfaces de servicio permite el uso de servicios sin el conocimiento de cómo se implementan realmente. Esta característica es importante para la integración de IDSS, ya que las mismas interfaces de servicio pueden verse expuestas por diferentes IDS. El middleware de la cuadrícula se puede utilizar para implementar una gran variedad de servicios. Algunas funciones proporcionadas por Grid Middleware son [3]: (i) servicios de gestión de datos, incluidos servicios de acceso, replicación y localización;(ii) servicios de flujo de trabajo que implementan la ejecución coordinada de múltiples aplicaciones en múltiples recursos;(iii) servicios de auditoría que realizan la detección de fraudes o intrusiones;(iv) Servicios de monitoreo que implementan el descubrimiento de sensores en un entorno distribuido y generan alertas en condiciones determinadas;(v) Servicios para la identificación de problemas en un entorno distribuido, que implementan la correlación de información a partir de registros dispares y distribuidos. Estos servicios son importantes para la implementación de un DIDSOG. A DIDS necesita servicios para la ubicación y acceso a datos distribuidos de diferentes IDS. Los servicios de auditoría y monitoreo se ocupan de las necesidades adecuadas de los DIDS como: almacenamiento seguro, análisis de datos para detectar intrusiones, descubrimiento de sensores distribuidos y envío de alertas. La correlación de los registros distribuidos también es relevante porque la detección de ataques distribuidos depende de la correlación de la información de alerta generada por los diferentes IDS que componen el DIDSOG. Las siguientes secciones de este artículo se organizan de la siguiente manera. La Sección 2 presenta trabajo relacionado. El modelo propuesto se presenta en la Sección 3. La Sección 4 describe el desarrollo y un estudio de caso. Los resultados y la discusión se presentan en la Sección 5. Las conclusiones y el trabajo futuro se discuten en la Sección 6. 2. El trabajo relacionado didma [5] es un DIDS flexible, escalable, confiable y independiente de la plataforma. La arquitectura de Didma permite el análisis distribuido de eventos y se puede extender fácilmente mediante el desarrollo de nuevos agentes. Sin embargo, la integración con los IDS existentes y el desarrollo de componentes de seguridad se presentan como trabajo futuro [5]. La extensibilidad de Dids Didma y la integración con otros IDS son objetivos perseguidos por Didsog. La flexibilidad, la escalabilidad, la independencia de la plataforma, la confiabilidad y los componentes de seguridad discutidos en [5] se logran en DidSog mediante el uso de una plataforma de cuadrícula. Las técnicas más eficientes para el análisis de grandes cantidades de datos en redes a gran escala basadas en la agrupación y aplicables a DIDS se presentan en [13]. La integración de IDS heterogéneos para aumentar la variedad de técnicas de detección de intrusos en el entorno se menciona como trabajo futuro [13] DidSog, por lo tanto, tiene como objetivo integrar IDS heterogéneos [13]. Árbitro.[10] presenta una arquitectura jerárquica para un DIDS;La información se recopila, se agrega, se correlaciona y se analiza a medida que se envía en la jerarquía. La arquitectura consta de varios componentes para: monitoreo, correlación, detección de intrusos por estadísticas, detección por firmas y respuestas. Los componentes en el mismo nivel de la jerarquía cooperan entre sí. La integración propuesta por Didsog también sigue una arquitectura jerárquica. Cada IDS integrado a DidSog ofrece funcionalidades en un nivel dado de la jerarquía y solicita funcionalidades de IDSS desde otro nivel. La jerarquía presentada en [10] integra IDS homogéneas, mientras que la arquitectura jerárquica de Didsog integra IDS heterogéneas. Hay propuestas sobre la integración de cuadrículas computacionales e IDS [6], [7], [11], [2]. Árbitro.[6] y [7] proponen el uso del juego de herramientas Globus para la detección de intrusos, especialmente para los ataques de DOS (denegación de servicio) y DDoS (denegación de servicio distribuida);Globus se usa debido a la necesidad de procesar grandes cantidades de datos para detectar este tipo de ataque. Se presenta una arquitectura de procesamiento de dos fases. La primera fase apunta a la detección de ataques momentáneos, mientras que la segunda fase se refiere a ataques crónicos o perennes. Los IDS o DIDS tradicionales generalmente están coordinados por un punto central;Una característica que los deja propensos a los ataques. Leu et al.[6] Señalan que los IDS desarrollados en las plataformas de cuadrículas son menos vulnerables a los ataques debido a la distribución provista para tales plataformas. Leu et al.[6], [7] han utilizado herramientas para generar varios tipos de ataques, incluidos las inundaciones TCP, ICMP y UDP, y han demostrado a través de los resultados experimentales las ventajas de aplicar las redes computacionales a los IDS. Este trabajo propone el desarrollo de A DIDS en una plataforma de cuadrícula. Sin embargo, el DIDS resultante integra IDS heterogéneo, mientras que el DIDSS sobre las cuadrículas presentadas por Leu et al.[6] [7] No considere la integración de IDS heterogéneos. El procesamiento en las fases [6] [7] también está contemplado por DidSog, que está habilitado por la especificación de varios niveles de procesamiento permitidos por la integración de IDS heterogéneos. El DIDS GIDA (arquitectura de detección de intrusión de la cuadrícula) se dirige a la detección de intrusiones en un entorno de cuadrícula [11]. El simulador de cuadrícula GridSim se utilizó para la validación de DIDS GIDA. Se utilizaron recursos homogéneos para simplificar el desarrollo [11]. Sin embargo, Choon y Samsudim presentan la posibilidad de aplicar sistemas de detección heterogéneos para el trabajo futuro. Se presentan escenarios que demuestran cómo se presenta A DIDS en un entorno de cuadrícula. Didsog no tiene como objetivo detectar intrusiones en un entorno de cuadrícula. En contraste, DidSog usa la cuadrícula para componer A DIDS integrando IDS específicos;Sin embargo, los DIDS resultantes podrían usarse para identificar ataques en un entorno de cuadrícula. Los ataques locales y distribuidos se pueden detectar mediante la integración de los IDS tradicionales, mientras que los ataques particulares de las cuadrículas se pueden detectar mediante la integración de IDS de cuadrícula.3. El modelo propuesto Didsog presenta una jerarquía de servicios de detección de intrusos;Esta jerarquía se organiza a través de un vector bidimensional definido por el alcance: la complejidad. El IDSS componiendo didSog se puede organizar en diferentes niveles de alcance o complejidad, dependiendo de sus funcionalidades, la topología del entorno objetivo y los resultados esperados. La Figura 1 presenta un DIDSOG compuesto por diferentes servicios de detección de intrusos (es decir, recopilación de datos, agregación de datos, correlación de datos, análisis, respuesta a la intrusión) proporcionadas por diferentes IDS. El flujo de información y la relación entre los niveles de alcance y complejidad se presentan en esta figura. Los sensores ubicados tanto en las computadoras del Usuario 1S y User 2s en el dominio 1 recopilan la información sobre el entorno (host, red o aplicación). La información se envía a los analizadores simples que actúan sobre la información de un solo host (Nivel 1: 1) y a los servicios de agregación y correlación que actúan sobre la información de múltiples hosts del mismo dominio (Nivel 2: 1). Analizadores simples en el primer nivel de alcance envía la información a analizadores más complejos en los siguientes niveles de complejidad (Nivel 1: N). Cuando un analizador detecta una intrusión, se comunica con los servicios de contramedidas y monitoreo registrados en su alcance. Un analizador puede invocar un servicio de contramedidas que responde a un ataque detectado, o informa un servicio de monitoreo sobre el ataque en curso, para que el administrador pueda actuar en consecuencia. Los recursos de agregación y correlación en el segundo alcance reciben información de sensores de diferentes computadoras de usuarios (Usuario 1 y Usuario 2S) en el dominio 1. Estos recursos procesan la información recibida y la envían a los recursos de análisis registrados al primer nivel de complejidad en el segundo alcance (Nivel 2: 1). La información también se envía a los recursos de agregación y correlación registrados en el primer nivel de complejidad en el siguiente alcance (Nivel 3: 1). Usuario 1 Dominio 1 Analizadores Nivel 1: 1 Analizadores de sensores locales Nivel 1: N Agreg. Correlación Nivel 2: 1 Usuario 2 Dominio 1 Analizadores de sensores locales Nivel 2: 1 Analizadores Nivel 2: N Agreg. Correlación Nivel 3: 1 Dominio 2 Nivel de monitor 1 Nivel de monitor 2 Analizadores de analizadores 3: 1 Nivel 3: N Monitor Nivel 3 Nivel de respuesta 1 Nivel de respuesta 2 Nivel de respuesta 3 Fig. 1. Cómo funciona Didsog. Los recursos de análisis en el segundo alcance actúan como los recursos de análisis en el primer alcance, dirigiendo la información a un recurso de análisis más complejo y poniendo la contramedida y monitoreo de los recursos en acción en caso de ataques detectados. Los recursos de agregación y correlación en el tercer alcance reciben información de los dominios 1 y 2. Luego, estos recursos llevan a cabo la agregación y correlación de la información de diferentes dominios y la envían a los recursos de análisis en el primer nivel de complejidad en el tercer alcance (Nivel 3: 1). La información también podría enviarse al servicio agregado en el siguiente alcance en caso de recursos registrados en dicho nivel. Los recursos de análisis en el tercer alcance actúan similares a los recursos de análisis en la primera y segunda alcance, excepto que los recursos de análisis en el tercer alcance actúan sobre información de múltiples dominios. Las funcionalidades de los recursos registrados en cada uno de los ámbitos y el nivel de complejidad pueden variar de un entorno a otro. El modelo permite el desarrollo de niveles de N de alcance y complejidad. La Figura 2 presenta la arquitectura de un recurso que participa en el DIDSOG. Inicialmente, el recurso se registra a SIG (servicio de información de cuadrícula) para que otros recursos participantes puedan consultar los servicios proporcionados. Después de registrarse, el recurso solicita información sobre otros recursos de detección de intrusos registrados en el SIG. Un recurso dado de Didsog interactúa con otros recursos, al recibir datos de los recursos de origen, procesarlo y enviar los resultados a los recursos de destino, por lo tanto, formando una cuadrícula de recursos de detección de intrusos. ID de recurso de recurso de cuadrícula ID de base de cuadrícula Recursos de origen de la cuadrícula Recursos de destino de destino Servicio de información de la cuadrícula Descritor Connecor Fig. 2. Arquitectura de un recurso que participa del Didsog. Un recurso está compuesto por cuatro componentes: base, conector, descriptor e identificaciones nativas. Los ID nativos corresponden a los ID que se integran al DIDSOG. Este proceso de componente los datos recibidos de los recursos de origen y genera nuevos datos que se enviarán a los recursos de destino. Un componente de IDS nativo puede ser cualquier información de procesos de herramienta relacionada con la detección de intrusiones, incluida la recopilación de datos, la agregación de datos, la correlación de datos, la respuesta a la intrusión o la gestión. El descriptor es responsable de la información que identifica un recurso y sus respectivos recursos de destino en el DIDSOG. La Figura 3 presenta el diagrama de clase de la información almacenada por el descriptor. La clase Descriptor de recursos tiene miembros de características, niveles, tipo de datos y recursos de destino. La clase de características representa las funcionalidades que tiene un recurso. Los atributos de tipo, nombre y versión se refieren a las funciones ofrecidas por el componente IDS nativo, su nombre y versión, respectivamente. La clase de nivel identifica el nivel de objetivo y complejidad en el que actúa el recurso. La clase DataType representa el formato de datos que el recurso acepta recibir. La clase DataType está especializada por Classes Text, XML y Binary. La clase XML contiene el atributo DTDFile para especificar el archivo DTD que valida el XML recibido.-Vident -version -Description ResourceDescriptor -FeateReType -name -Version Funcionar 1 1 -Type -Version DataType -cope -Coplex Nivel 1 1 Text -Dtdfile XML 1 1 TargetResources 1 1 10 ..* -FeateReType recurso11 1 figura 3 figura 3. Diagrama de clase del componente descriptor. La clase TargetResources representa las características de los recursos de destino de un recurso determinado. Esta clase agrega el recurso. La clase de recursos identifica las características de un recurso de destino. Esta identificación se realiza a través del atributo FeatureType y las clases de nivel y tipo de datos. Un recurso determinado analiza la información de los descriptores de otros recursos y compara esta información con la información especificada en TargetResources para saber qué recursos enviar los resultados de su procesamiento. El componente base es responsable de la comunicación de un recurso con otros recursos del DIDSOG y con el servicio de información de la cuadrícula. Es este componente el que registra el recurso y las consultas otros recursos en el SIG. El componente del conector es el enlace entre las ID de base y nativa. La información que recibe la base de los recursos de origen se pasa al componente del conector. El componente del conector realiza los cambios necesarios en los datos para que lo entiendan los ID nativos y envíen estos datos a IDS nativos para su procesamiento. El componente del conector también tiene la responsabilidad de recopilar la información procesada por las ID nativas y hacer los cambios necesarios para que la información pueda pasar por el DIDSOG nuevamente. Después de estos cambios, Connector envía la información a la base, que a su vez la envía a los recursos de destino de acuerdo con las especificaciones del componente descriptor.4. Implementación Hemos utilizado GridSim Toolkit 3 [1] para el desarrollo y evaluación del modelo propuesto. Hemos utilizado y extendido características de GridSim para modelar y simular los recursos y componentes de DidSog. La Figura 4 presenta el diagrama de clase del DidSog simulado. La clase Simulation_DidSog inicia los componentes de simulación. La clase Simulation_User representa a un usuario de DidSog. Esta función de clase es iniciar el procesamiento de un sensor de recursos, desde donde se enviará la información recopilada a otros recursos. DidSog_GIS mantiene un registro de los recursos de DidSog. La clase DidSog_BaseResource implementa el componente base (ver Figura 2). DidSog_BaseResource interactúa con la clase didsog_descriptor, que representa el componente descriptor. La clase didSog_descriptor se crea a partir de un archivo XML que especifica un descriptor de recursos (ver Figura 3). DidSog_BaseResource DidSog_descriptor 11 DidSog_GIS Simulation_User Simulation_DidSog 1 * 1 * 1 1 GridInformationservice Gridsim GridResource Fig. 4. Diagrama de clase del Didsog simulado. Se debe desarrollar un componente del conector para cada IDS nativo integrado a DidSog. El componente del conector se implementa creando una clase derivada de didSog_BaseResource. La nueva clase implementará nuevas funcionalidades de acuerdo con las necesidades de las ID nativas correspondientes. En el entorno de simulación, se integraron recursos de recopilación de datos, análisis, agregación/correlación y generación de respuestas. Se desarrollaron clases para simular el procesamiento de cada componentes de IDS nativos asociados a los recursos. Para cada identificación nativa simulada se desarrolló una clase derivada de DidSog_BaseResource. Esta clase corresponde al componente del conector de los ID nativos y apunta a la integración de IDS a DidSog. Se elige un archivo XML que describe cada uno de los recursos integrados utilizando el componente del conector. La relación resultante entre los recursos integrados al DidSog, de acuerdo con la especificación de sus respectivos descriptores, se presenta en la Figura 5. Los recursos Sensor_1 y Sensor_2 generan datos simulados en formato TCPDUM [8]. Los datos generados se dirigen a los recursos Analyser_1 y Agreg_Corr_1, en el caso de Sensor_1, y a Agreg_Corr_1 en el caso de Sensor_2, según la especificación de sus descriptores. User_1 analyser_ 1 nivel 1: 1 sensor_1 Aggreg_ Corr_1 nivel 2: 1 user_2 sensor_2 analyser_2 nivel 2: 1 analyser_3 nivel 2: 2 tcpdump tcpdump tcpdumpag tcpdumpag IDMEF IDMEF IDMEF TCPDUMPDUMT_1 Nivel 1 COLADMASUSE_2 Nivel 2 Fig. 5. 5. 5. Flujo de la ejecución de la simulación. Los ID nativos de Analyser_1 generan alertas para cualquier intento de conexión al puerto 23. Los datos recibidos de Analyser_1 habían presentado tales características, generando una alerta IDMEF (formato de intercambio de mensajes de detección de intrusos) [14]. La alerta generada se envió al recurso de contramedida_1, donde se envió una advertencia al administrador que le informó sobre la alerta recibida. El recurso Agreg_Corr_1 recibió la información generada por los sensores 1 y 2. Sus actividades de procesamiento consisten en correlacionar las direcciones IP de origen con los datos recibidos. La información resultante del procesamiento de Aggreg_Corr_1 se dirigió al recurso analyser_2. El componente IDS nativo del analyser_2 genera alertas cuando una fuente intenta conectarse al mismo número de puerto de múltiples destinos. El Analyser_2 identifica esta situación en los datos recibidos de Aggreg_Corr_1 y luego se envía una alerta en formato IDMEF al recurso contramedido_2. Además de generar alertas en formato IDMEF, Analyser_2 también dirige los datos recibidos al analyser_3, en el nivel de complejidad 2. El componente IDS nativo de Analyser_3 genera alertas cuando se detecta la transmisión de mensajes ICMP de una fuente dada a múltiples destinos. Esta situación se detecta en los datos recibidos de Analyser_2, y una alerta IDMEF se envía al recurso CounterMease_2. El recurso CounterMease_2 recibe las alertas generadas por los analizadores 3 y 2, de acuerdo con la implementación de su componente IDS nativo. Las advertencias de las alertas recibidas se envían al administrador. La simulación llevada a cabo demuestra cómo funciona Didsog. Los datos simulados se generaron como la entrada para una cuadrícula de sistemas de detección de intrusos compuestos por varios recursos distintos. Los recursos llevan a cabo tareas como la recopilación de datos, la agregación y el análisis, y la generación de alertas y advertencias de manera integrada.5. Resultados del experimento La organización jerárquica del alcance y la complejidad proporciona un alto grado de flexibilidad para el modelo. El DIDSOG se puede modelar de acuerdo con las necesidades de cada entorno. Los descriptores definen el flujo de datos deseado para los DID resultantes. Cada IDS nativo está integrado al DidSog a través de un componente conector. El componente del conector también es flexible en el DidSog. Las adaptaciones, las conversiones de tipos de datos y los procesos auxiliares que el conector necesita proporciona IDS nativo. Los filtros y la generación de registros específicos para cada IDS o entorno nativos también se pueden incorporar al conector. Si se desea la integración de un nuevo IDS en un entorno ya configurado, es suficiente desarrollar el conector para las IDS deseadas y especificar el descriptor de recursos. Después de la especificación del conector y el descriptor, el nuevo IDS está integrado al DidSog. A través de la definición de ámbitos, los recursos pueden actuar sobre los datos de diferentes grupos de origen. Por ejemplo, el alcance 1 puede estar relacionado con un conjunto dado de hosts, el alcance 2 a otro conjunto de hosts, mientras que el alcance 3 puede estar relacionado con los hosts de los ámbitos 1 y 2. Los ámbitos se pueden definir de acuerdo con las necesidades de cada entorno. Los niveles de complejidad permiten la distribución del procesamiento entre varios recursos dentro del mismo alcance. En una tarea de análisis, por ejemplo, la búsqueda de ataques simples puede hacerse con recursos de complejidad 1, mientras que la búsqueda de ataques más complejos, que exige más tiempo, puede realizarse mediante recursos de complejidad 2. Con esto, el análisis de los datos lo realiza dos recursos. La distinción entre los niveles de complejidad también se puede organizar para integrar diferentes técnicas de detección de intrusos. El nivel de complejidad 1 podría definirse para análisis basados en firmas, que son técnicas más simples;el nivel de complejidad 2 para las técnicas basadas en el comportamiento, que requieren una mayor potencia computacional;y el nivel de complejidad 3 para la detección de intrusos en aplicaciones, donde las técnicas son más específicas y dependen de más datos. La división de los ámbitos y los niveles de complejidad hacen que el procesamiento de los datos se llevará a cabo en fases. Ningún recurso tiene pleno conocimiento sobre el flujo completo de procesamiento de datos. Cada recurso solo conoce los resultados de su procesamiento y el destino al que envía los resultados. Los recursos de mayor complejidad deben estar vinculados a recursos de menor complejidad. Por lo tanto, se mantiene la estructura jerárquica del DIDSOG, facilitando su extensión e integración con otros dominios de detección de intrusos. Al llevar a cabo una relación jerárquica entre los varios analizadores elegidos para un entorno, el recurso del sensor no se sobrecarga con la tarea de enviar los datos a todos los analizadores. Existirá un analizador inicial (nivel de complejidad 1) al que el sensor enviará sus datos, y este analizador dirigirá los datos al siguiente paso del flujo de procesamiento. Otra característica de la organización jerárquica es la fácil extensión e integración con otros dominios. Si es necesario agregar un nuevo host (sensor) al DidSog, es suficiente para conectarlo a la primera jerarquía de recursos. Si es necesario agregar un nuevo analizador, estará en el alcance de varios dominios, es suficiente relacionarlo con otro recurso del mismo alcance. El DIDSOG permite que diferentes niveles sean administrados por diferentes entidades. Por ejemplo, el primer alcance puede ser administrado por el usuario local de un host. El segundo alcance, que comprende varios hosts de un dominio, puede ser administrado por el administrador del dominio. Una tercera entidad puede ser responsable de administrar la seguridad de varios dominios de manera conjunta. Esta entidad puede actuar en el alcance 3 independientemente de otros. Con el modelo propuesto para la integración de IDS en cuadrículas, los diferentes IDS de un entorno (o múltiples IDS integrados) actúan de manera cooperativa mejorando los servicios de detección de intrusos, principalmente en dos aspectos. Primero, la información de múltiples fuentes se analiza de manera integrada para buscar ataques distribuidos. Esta integración se puede hacer bajo varios ámbitos. En segundo lugar, existe una gran diversidad de técnicas de agregación de datos, correlación y análisis de datos, y respuesta de intrusión que se pueden aplicar al mismo entorno;Estas técnicas pueden organizarse bajo varios niveles de complejidad.6. Conclusión La integración de IDS heterogéneos es importante. Sin embargo, la incompatibilidad y la diversidad de las soluciones IDS hacen que tal integración sea extremadamente difícil. Por lo tanto, este trabajo propuso un modelo para la composición de DIDS integrando IDS existentes en una plataforma de cuadrícula computacional (DIDSOG). Los IDS en Didsog están encapsulados como servicios de cuadrícula para la detección de intrusiones. Se utiliza una plataforma de cuadrícula computacional para la integración al proporcionar los requisitos básicos para la comunicación, la localización, el intercambio de recursos y los mecanismos de seguridad. Los componentes de la arquitectura del didsog se desarrollaron y evaluaron utilizando el simulador de cuadrícula Gridsim. Los servicios para la comunicación y la localización se utilizaron para llevar a cabo la integración entre componentes de diferentes recursos. Según los componentes de la arquitectura, se modelaron varios recursos formando una cuadrícula de detección de intrusos. La simulación demostró la utilidad del modelo propuesto. Se leyeron datos de los recursos del sensor y estos datos se usaron para alimentar otros recursos de DidSog. La integración de IDS distintos podría observarse a través del entorno simulado. Se integraron recursos que proporcionan diferentes servicios de detección de intrusos (por ejemplo, análisis, correlación, agregación y alerta). Los servicios de comunicación y localización proporcionados por GridSim se utilizaron para integrar componentes de diferentes recursos. Se modelaron varios recursos después de los componentes de la arquitectura que forman una cuadrícula de detección de intrusos. Los componentes de la arquitectura DidSog han servido como base para la integración de los recursos presentados en la simulación. Durante la simulación, los diferentes IDS cooperaron entre sí de manera distribuida;Sin embargo, de manera coordinada con una visión integrada de los eventos, que tiene, por lo tanto, la capacidad de detectar ataques distribuidos. Esta capacidad demuestra que el IDSS integrado ha resultado en un DIDS. El trabajo relacionado presenta la cooperación entre los componentes de un DIDS específico. Algunos trabajan se centran en el desarrollo de DIDSS en las cuadrículas computacionales o la aplicación de IDS a las cuadrículas computacionales. Sin embargo, ninguno se ocupa de la integración de IDS heterogéneos. En contraste, el modelo propuesto desarrollado y simulado en este trabajo puede arrojar algo de luz sobre la cuestión de la integración de IDS heterogéneos. Didsog presenta nuevas oportunidades de investigación que nos gustaría seguir, que incluyen: despliegue del modelo en un entorno más realista, como una cuadrícula;incorporación de nuevos servicios de seguridad;Análisis paralelo de datos por IDS nativos en múltiples hosts. Además de la integración de IDS habilitados por un middleware de cuadrícula, la cooperación de IDS heterogéneos puede verse como un problema económico. Los IDS de diferentes organizaciones o dominios administrativos necesitan incentivos para unirse a una cuadrícula de servicios de detección de intrusos y para colaborar con otros IDS. El desarrollo de mecanismos de prueba de estrategia distribuida para la integración de IDSS es un desafío que nos gustaría abordar.7. Referencias [1] Sulistio, A.;Poduvaly, G.;Buyya, r;y Tham, CK, construyendo una simulación de cuadrícula con servicio de red diferenciado utilizando GridSim, Proc.de la 6ta Conferencia Internacional sobre Computación de Internet (ICOMP05), 27-30 de junio de 2005, Las Vegas, EE. UU.[2] Choon, O. T.;Samsudim, A. Sistema de detección de intrusos basado en la cuadrícula. La novena IEEE Asia-Pacific Conference Communications, septiembre de 2003. [3] Foster, I.;Kesselman, C.;Tuecke, S. La fisiología de la red: una arquitectura de servicio de cuadrícula abierta para la integración del sistema distribuido. Borrador de junio de 2002. Disponible en http://www.globus.org/research/papers/ogsa.pdf. Acceso a febrero de 2006. [4] Foster, Ian;Kesselman, Carl;Tuecke, Steven. La anatomía de la cuadrícula: habilitando organizaciones virtuales escalables. Revista Internacional de Aplicaciones de Supercomputador, 2001. [5] Kannadiga, P.;Zulkernine, M. Didma: un sistema distribuido de detección de intrusos utilizando agentes móviles. Actas de la Sexta Conferencia Internacional de IEEE sobre Ingeniería de Software, Inteligencia Artificial, Redes y Computación Paralela/Distribuida, mayo de 2005. [6] Leu, Fang-Yie, et al. Integración de la red con detección de intrusos. Actas del 19 IEEE Aina05, marzo de 2005. [7] Leu, Fang-Yie, et al. Un sistema de detección de intrusión de cuadrícula basado en el rendimiento. Actas del 29 ° IEEE COMPSAC05, julio de 2005. [8] McCanne, S.;Leres, C.;Jacobson, v.;Tcpdump/libpcap, http://www.tcpdump.org/, 1994. [9] Snapp, S. R. et al. DIDS (sistema distribuido de detección de intrusos): motivación, arquitectura y un prototipo temprano. Procedimiento de la decimoctava Conferencia Nacional de Seguridad Informática IEEE. Baltimore, MD, octubre de 1992. [10] Sterne, D.;et al. Una arquitectura general de detección de intrusos cooperativas para Manets. Actas del tercer IEEE IWIA05, marzo de 2005. [11] Tolba, M. F .;et al. GIDA: Hacia la habilitación de sistemas de detección de intrusión de cuadrícula.5º Simposio Internacional IEEE sobre computación en clúster y la cuadrícula, mayo de 2005. [12] Wood, M. Requisitos de intercambio de mensajes de detección de intrusos. Proyecto de redacción-IDWG-10-10, octubre de 2002. Disponible en http://www.ietf.org/internet-drafts/draftietf-idwg-requirements-10.txt. Acceso a marzo de 2006. [13] Zhang, Yu-Fang;Xiong, Z.;Wang, X. Detección de intrusión distribuida basada en la agrupación. Actas de IEEE International Conference Machine Learning and Cybernetics, agosto de 2005. [14] Curry, D.;DeBar, H. Modelo de datos de intercambio de mensajes de detección de intrusos y definición de tipo de documento de lenguaje de marcado extensible (XML). Proyecto de borrador-IETF-IDWG-IDMEF-XML-10, marzo de 2006. Disponible en http://www.ietf.org/internetdrafts/draft-ietf-idwg-idmef-xml-16.txt.