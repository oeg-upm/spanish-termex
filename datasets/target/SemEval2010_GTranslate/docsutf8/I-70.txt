Un sistema de múltiples agentes para construir ontologías dinámicas Kévin Ottens ∗ Irit, Université Paul Sabatier 118 Route de Narbonne F-31062 Toulouse ottens@irit.fr Marie-Pierre Gleizes Irit, Université Paul Sabatier 118 Route de Narbonne F-31062 Toulouse Gleizes.fr Pierre Glize Irit, Université Paul Sabatier 118 Route de Narbonne F-31062 Toulouse Glize@irit.fr Abstract Ontologies Building From Text sigue siendo una tarea que requiere mucho tiempo que justifica el crecimiento del aprendizaje ontológico. Nuestro sistema llamado Dynamo está diseñado a lo largo de este dominio, pero siguiendo un enfoque original basado en una arquitectura adaptativa de múltiples agentes. En este artículo presentamos un algoritmo de agrupamiento jerárquico distribuido, núcleo de nuestro enfoque. Se evalúa y se compara con un algoritmo centralizado más convencional. También presentamos cómo se ha mejorado utilizando un enfoque de criterios múltiples. Con esos resultados en mente, discutimos los límites de nuestro sistema y agregamos como perspectivas las modificaciones requeridas para alcanzar una solución completa de construcción de ontología. Categorías y descriptores de sujetos I.2.11 [Inteligencia artificial]: Sistemas de inteligencia artificiales distribuidos Algoritmos de términos generales, Experimentación 1. Introducción Hoy en día, está bien establecido que las ontologías son necesarias para la web semántica, la gestión del conocimiento, B2B ... Para la gestión del conocimiento, las ontologías se utilizan para anotar documentos y mejorar la recuperación de la información. Pero construir una ontología manualmente es un proceso lento, tedioso, costoso, complejo y lento. Actualmente, un verdadero desafío radica en construirlos de forma automática o semiautomática y mantenerlos actualizados. Significaría crear ontologías dinámicas [10] y justifica la aparición de técnicas de aprendizaje ontología [14] [13]. Nuestra investigación se centra en Dynamo (un acrónimo de ontologías dinámicas), una herramienta basada en un sistema adaptativo de múltiples agentes para construir y mantener una ontología a partir de un conjunto de textos específicos de dominio. Nuestro objetivo no es construir una ontología jerárquica general exhaustiva, sino específica de dominio. Proponemos una herramienta semiautomatizada ya que se requiere un recurso externo: el oncólogo. Un oncólogo es una especie de ingeniero cognitivo o analista, que está utilizando información de textos y entrevistas expertas para diseñar ontologías. En el campo de múltiples agentes, las ontologías generalmente permiten que los agentes se entiendan entre sí [12]. A veces se usan para aliviar el proceso de construcción de ontología, en particular para contextos colaborativos [3], pero rara vez representan la ontología misma [16]. La mayoría de las obras interesadas en la construcción de ontologías [7] proponen el refinamiento de las ontologías. Este proceso consiste en usar una ontología existente y construir una nueva de él. Este enfoque es diferente de nuestro enfoque porque Dynamo comienza desde cero. Los investigadores, que trabajan en la construcción de ontologías a partir de textos, afirman que el trabajo a ser automatizado requiere recursos externos como un diccionario [14] o acceso web [5]. En nuestro trabajo, proponemos una interacción entre el oncólogo y el sistema, nuestro recurso externo se encuentra tanto en los textos como en el oncólogo. Este artículo presenta primero, en la Sección 2, el panorama general del sistema Dynamo. En particular los motivos que llevaron a su creación y a su arquitectura general. Luego, en la Sección 3 discutimos el algoritmo de agrupación distribuido utilizado en Dynamo y lo comparamos con un enfoque centralizado más clásico. La Sección 4 está dedicada a alguna mejora del comportamiento de los agentes que se diseñó teniendo en cuenta los criterios ignorados por la agrupación. Y finalmente, en la Sección 5, discutimos las limitaciones de nuestro enfoque y explicamos cómo se abordará en trabajos adicionales.2. Dynamo Overview 2.1 Ontology como un sistema de múltiples agentes Dynamo tiene como objetivo reducir la necesidad de acciones manuales en el procesamiento de los resultados del análisis de texto y sugerir un inicio de la red conceptual para construir ontologías de manera más eficiente. El enfoque elegido es completamente original de nuestro conocimiento y utiliza un sistema adaptativo de agente múltiple. Esta elección proviene de las cualidades ofrecidas por el sistema de múltiples agentes: pueden aliviar el diseño interactivo de un sistema [8] (en nuestro caso, una red conceptual), permiten su construcción incremental teniendo en cuenta progresivamente nuevos datos (provenientes deAnálisis de texto y interacción del usuario), y por último, pero no menos importante, se pueden distribuir fácilmente a través de una red de computadoras. Dynamo toma un análisis sintáctico y terminológico de textos como entrada. Utiliza varios criterios basados en estadísticas calculadas a partir de los contextos lingüísticos de términos para crear y posicionar los conceptos. Como salida, Dynamo proporciona al analista una organización jerárquica de conceptos (el sistema de múltiples agentes) que puede validar, refinado de modificado, hasta que obtenga un estado satisfactorio de 1286 978-81-904262-7-5 (RPS) c 2007 Ifaamas The Semantic Network. Una ontología puede verse como un mapa estable constituido por entidades conceptuales, representadas aquí por agentes, vinculados por relaciones etiquetadas. Por lo tanto, nuestro enfoque considera una ontología como un tipo de equilibrio entre sus agentes conceptuales donde sus fuerzas están definidas por sus posibles relaciones. La modificación de la ontología es una perturbación del equilibrio anterior por la apariencia o la desaparición de agentes o relaciones. De esta manera, una ontología dinámica es un proceso autoorganizado que ocurre cuando se incluyen nuevos textos en el corpus, o cuando el oncólogo interactúa con él. Para respaldar la flexibilidad necesaria de dicho sistema, utilizamos un sistema de múltiples agentes de autoorganización basado en un enfoque cooperativo [9]. Seguimos el método Adelfe [4] propuesto para impulsar el diseño de este tipo de sistema de múltiples agentes. Justifica cómo diseñamos algunas de las reglas utilizadas por nuestros agentes para maximizar el grado de cooperación dentro del sistema Dynamos Multi-Agent.2.2 Arquitectura propuesta En esta sección, presentamos nuestra arquitectura del sistema. Aborda las necesidades de la ingeniería del conocimiento en el contexto de la gestión y el mantenimiento de la ontología dinámica cuando la ontología está vinculada a una recopilación de documentos. El sistema Dynamo consta de tres partes (cf. Figura 1): • Una red de término, obtenida gracias a una herramienta de extracción de término utilizada para preprocesar el corpus textual, • Un sistema de agentes múltiples que utiliza la red de términos para hacer una agrupación jerárquica enpara obtener una taxonomía de conceptos, • una interfaz que permite al oncólogo visualizar y controlar el proceso de agrupación.?? Interfaz de ontólogo Sistema Concepto Concept Agente Término Términos Términos de extracción Figura 1: Arquitectura del sistema El término extractor que utilizamos es Syntex, un software que se ha utilizado de manera eficiente para las tareas de construcción de ontología [11]. Lo seleccionamos principalmente debido a su robustez y la gran cantidad de información extraída. En particular, crea una red de expansión principal que ya ha demostrado ser interesante para un sistema de agrupación [1]. En dicha red, cada término está vinculado a su término principal 1 y 1, es decir, la subcrasa máxima ubicada como cabeza del término su término de expansión2, y también a todos los términos para los cuales es una cabeza o un término de expansión. Por ejemplo, la ingeniería de conocimiento del texto tiene ingeniería de conocimiento como término principal y texto como término de expansión. Además, la ingeniería del conocimiento está compuesta de conocimiento como término principal e ingeniería como término de expansión. Con Dynamo, el término red obtenida como la salida del extractor se almacena en una base de datos. Para cada par de términos, suponemos que es posible calcular un valor de similitud para hacer una agrupación [6] [1]. Debido a la naturaleza de los datos, solo nos estamos centrando en el cálculo de similitud entre los objetos descritos gracias a las variables binarias, lo que significa que cada elemento se describe por la presencia o ausencia de un conjunto característico [15]. En el caso de los términos, generalmente estamos tratando con sus contextos de uso. Con Syntex, esos contextos se identifican por términos y se caracterizan por algunas relaciones sintácticas. El sistema Dynamo Multi-Agent implementa el algoritmo de agrupación distribuido descrito en detalle en la Sección 3 y las reglas descritas en la Sección 4. Está diseñado para ser tanto el sistema que produce la estructura resultante como la estructura misma. Significa que cada agente representa una clase en la taxonomía. Luego, la producción del sistema es la organización obtenida de la interacción entre los agentes, mientras que tiene en cuenta la retroalimentación proveniente del ontólogo cuando él/ella modifica la taxonomía dadas sus necesidades o experiencia.3. Agrupación distribuida Esta sección presenta el algoritmo de agrupación distribuido utilizado en Dynamo. En aras de la comprensión, y debido a su evaluación en la Sección 3.1, recordamos el algoritmo centralizado básico utilizado para una agrupación ascendente jerárquica en un espacio no métrico, cuando una medida de similitud simétrica está disponible [15] (que es el caso de lamedidas utilizadas en nuestro sistema). Algoritmo 1: Datos de algoritmo de agrupamiento ascendente jerárquico centralizado: Lista de L de elementos para organizar como un resultado de la jerarquía: raíz R de la jerarquía durante la longitud (l)> 1 do max ← 0;Un ← nulo;B ← nulo;porque i ← 1 a longitud (l) do i ← l [i];para j ← i + 1 a longitud (l) do j ← l [j];sim ← Similitud (I, J);Si sim> max entonces max ← Sim;A ← i;B ← J;final final final eliminar (a, l);eliminar (b, l);append ((a, b), l);End r ← L [1];En el algoritmo 1, para cada paso de agrupación, se determina el par de los elementos más similares. Esos dos elementos se agrupan en un clúster, y la clase resultante se agrega a la lista de elementos restantes. Este algoritmo se detiene cuando la lista solo le queda un elemento.2 es decir, la subcrasa máxima ubicada como cola del término el sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 1287 La jerarquía resultante del algoritmo 1 siempre es un árbol binario debido a la forma en que se realiza la agrupación. Además, agrupar los elementos más similares es equivalente a alejarlos de los menos similares. Nuestro algoritmo distribuido está diseñado confiando en esos dos hechos. Se ejecuta simultáneamente en cada uno de los agentes del sistema. Tenga en cuenta que, a continuación de este documento, utilizamos para ambos algoritmos una similitud de Anderberg (con α = 0.75) y una estrategia de agrupación de enlace promedio [15]. Esas elecciones tienen un impacto en el árbol resultante, pero no impactan ni la ejecución global del algoritmo ni su complejidad. Ahora presentamos el algoritmo distribuido utilizado en nuestro sistema. Está arrancado de la siguiente manera: • Se crea un agente superior que no tiene padre, será la raíz de la taxonomía resultante, • Se crea un agente para que cada término se coloque en la taxonomía, todos tienen la parte superior como padre. Una vez que se establece esta estructura básica, el algoritmo funciona hasta que alcanza el equilibrio y luego proporciona la taxonomía resultante. Ak - 1 ak ana2a1 p ...... ...... a1 Figura 2: Clasificación distribuida: Paso 1 El primer paso del proceso (Figura 2) se activa cuando un agente (aquí AK) tiene más de un hermano (ya que queremos obtener un árbol binario). Luego envía un mensaje a su padre P que indica a su hermano más diferente (aquí A1). Entonces P recibe el mismo tipo de mensaje de cada uno de sus hijos. A continuación, este tipo de mensaje se llamará voto. AK - 1 AK ANA2A1 P P ...... ...... P P Figura 3: Clustering distribuido: Paso 2 A continuación, cuando P tiene mensajes de todos sus hijos, comienza el segundo paso (Figura 3). Gracias a los mensajes recibidos que indican las preferencias de sus hijos, P puede determinar tres subgrupos entre sus hijos: • El niño que obtuvo la mayor cantidad de votos de sus hermanos, ese es el niño más diferente del mayor número de sus hermanos. En el caso de un empate, uno de los ganadores se elige al azar (aquí A1), • Los niños que permitieron la elección del primer grupo, que son los agentes que eligieron a su hermano del primer grupo como el más diferente (aquíAk a an), • los niños restantes (aquí A2 a AK - 1). Entonces P crea un nuevo agente P (tener P como padre) y pide a los agentes del segundo grupo (aquí los agentes a un) que lo conviertan en su nuevo padre. AK - 1 AK ANA2A1 P P ...... ...... Figura 4: Agrupación distribuida: Paso 3 Finalmente, el paso 3 (Figura 4) es trivial. Los niños rechazados por P (aquí Agente A2 a An) tienen en cuenta su mensaje y eligen P como su nuevo padre. La jerarquía acaba de crear un nuevo nivel intermedio. Tenga en cuenta que este algoritmo generalmente converge, ya que el número de hermanos de un agente cae. Cuando un agente solo tiene un hermano restante, su actividad se detiene (aunque sigue procesando mensajes provenientes de sus hijos). Sin embargo, en algunos casos podemos alcanzar un conflicto circular en el procedimiento de votación cuando, por ejemplo, A vota contra B, B contra C y C contra A. Con el sistema actual no se puede tomar decisión. El procedimiento actual debe mejorarse para abordar esto, probablemente utilizando un método de votación clasificado.3.1 Evaluación cuantitativa Ahora, evaluamos las propiedades de nuestro algoritmo distribuido. Se requiere comenzar con una evaluación cuantitativa, basada en su complejidad, al tiempo que la comparó con el algoritmo 1 de la sección anterior. Su complejidad teórica se calcula para el peor de los casos, considerando la operación de cálculo de similitud como elemental. Para el algoritmo distribuido, el peor caso significa que para cada ejecución, solo se puede crear un grupo de dos ítems. En esas condiciones, para un conjunto de datos dado de N ítems, podemos determinar la cantidad de cálculos de similitud. Para el algoritmo 1, notamos l = longitud (l), entonces el más encerrado para el bucle se ejecuta L - i tiempos. Y su cuerpo tiene el único cálculo de similitud, por lo que su costo es L - I. El segundo para el bucle se ejecuta L. para que varíe de 1 a L.Entonces su costo es PL I = 1 (L - I) que puede simplificarse en L × (L - 1) 2. Finalmente, para cada ejecución del bucle While, L disminuye de N a 1, lo que nos da T1 (n) como la cantidad de cálculos de similitud para el algoritmo 1: t1 (n) = nx l = 1 l × (l - 1) 2(1) Para el algoritmo distribuido, en un paso dado, cada uno de los agentes L evalúa la similitud con sus hermanos L −1. Entonces, cada paso tiene un costo L × (l - 1). Luego, se crean grupos y se produce otro voto con L disminuido en uno (ya que asumimos el peor de los casos, solo se construyen grupos de tamaño 2 o L -1). Dado que L es igual a N en la primera ejecución, obtenemos TDIST (N) como la cantidad de cálculos de similitud para el algoritmo distribuido: TDIST (N) = Nx L = 1 L × (L - 1) (2) Ambos algoritmos tienen luegoUna complejidad O (N3). Pero en el peor de los casos, el algoritmo distribuido hace el doble de El1288 el sexto intl. Conf.en agentes autónomos y sistemas de agentes múltiples (AAMAS 07) operaciones semematales realizadas por el algoritmo centralizado. Esta brecha proviene de la toma de decisiones locales en cada agente. Debido a esto, los cálculos de similitud se realizan dos veces para cada par de agentes. Podríamos concebir que un agente envía su resultado de cálculo a su par. Pero, simplemente movería el problema generando más comunicación en el sistema.0 20000 40000 60000 80000 100000 120000 140000 160000 180000 10 20 30 30 40 50 60 70 80 90 100 Cantidad de Comparisons Cantidad de términos de entrada 1. Algoritmo distribuido (en promedio, con Min y Max) 2. Polinomio logarítmico 3. Algoritmo centralizado Figura 5: Resultados experimentales en un segundo paso, la complejidad promedio del algoritmo ha sido determinada por experimentos. El sistema de múltiples agentes se ha ejecutado con conjuntos de datos de entrada generados aleatoriamente que varían de diez a cien términos. El valor dado es el promedio de comparaciones realizadas para cien corridas sin ninguna interacción del usuario. Resulta en los gráficos de la Figura 5. El algoritmo es más eficiente en promedio que el algoritmo centralizado, y su complejidad promedio está por debajo del peor de los casos. Se puede explicar por la baja probabilidad de que un conjunto de datos obliga al sistema a crear solo grupos mínimos (dos elementos) o máximo (elementos n - 1) para cada paso de razonamiento. La curva número 2 representa el polinomio logarítmico minimizando el error con la curva número 1. El término de mayor grado de este polinomio está en N2 log (N), entonces nuestro algoritmo distribuido tiene una complejidad O (N2 log (N)) en promedio. Finalmente, notemos la variación reducida de los rendimientos promedio con el máximo y el mínimo. En el peor de los casos para 100 términos, la variación es de 1.960.75 para un promedio de 40,550.10 (alrededor del 5%) que muestra la buena estabilidad del sistema.3.2 Evaluación cualitativa Aunque los resultados cuantitativos son interesantes, la ventaja real de este enfoque proviene de características más cualitativas que presentaremos en esta sección. Todas las ventajas obtenidas gracias al uso de un sistema adaptativo de agente múltiple. La principal ventaja para el uso de un sistema de múltiples agentes para una tarea de agrupación es introducir dinámica en dicho sistema. El oncólogo puede hacer modificaciones y la jerarquía se adapta según la solicitud. Es particularmente interesante en un contexto de ingeniería de conocimiento. De hecho, la jerarquía creada por el sistema está destinada a ser modificada por el oncólogo ya que es el resultado de un cálculo estadístico. Durante la mirada necesaria a los textos para examinar los contextos de uso de los términos [2], el oncólogo podrá interpretar el contenido real y revisar la propuesta del sistema. Es extremadamente difícil darse cuenta de esto con un enfoque centralizado de caja negra. En la mayoría de los casos, uno tiene que encontrar qué paso de razonamiento generó el error y modificar manualmente la clase resultante. Desafortunadamente, en este caso, todos los pasos de razonamiento que ocurrieron después de la creación de la clase modificada se pierden y deben recalcularse teniendo en cuenta la modificación. Es por eso que un sistema como Asium [6] intenta suavizar el problema con una colaboración del usuario del sistema mostrando al ontólogo las clases creadas después de cada paso de razonamiento. Pero, el oncólogo puede cometer un error y darse cuenta demasiado tarde. Figura 6: Árbol de agente conceptual Después de la estabilización autónoma del sistema para ilustrar nuestras afirmaciones, presentamos un ejemplo gracias a algunas capturas de pantalla del prototipo de trabajo probado en un corpus relacionado con el médico. Al usar datos de prueba y dejar que el sistema funcione solo, obtenemos la jerarquía de la Figura 6 después de la estabilización. Está claro que el concepto descrito por el término lésión (lesión) está fuera de lugar. Sucede que los cálculos de similitud lo colocan más cerca de la mujer (mujer) y Chirurgien (cirujano) que a la infección, gastroentérita (gastroenteritis) y hépatita (hepatitis). Esta posición incorrecta para la lesión se explica por el hecho de que sin el aporte de ontólogo, el razonamiento solo se realiza en los criterios de estadísticas. Figura 7: Árbol de conceptualidad después de la modificación de oncólogo, el oncólogo reemplaza el concepto en la rama correcta, afectando a ConceptAgent: 8 como su nuevo padre. El nombre ConceptAgent: X se da automáticamente a un agente conceptual que no es descrito por un término. El sistema reacciona por sí solo y refina la jerarquía de agrupación para obtener un árbol binario creando conceptagentes: 11. El nuevo estado estable si el de la Figura 7. Este acoplamiento del usuario del sistema es necesario para construir una ontología, pero no se necesita un ajuste particular al principio de algoritmo distribuido, ya que cada agente realiza un procesamiento local autónomo y se comunica con su vecindario por los mensajes. Además, este algoritmo puede distribuirse de facto en una red de computadoras. La comunicación entre los agentes se realiza enviando mensajes y cada uno mantiene su autonomía de decisión. Luego, una modificación del sistema para que se ejecute en red no requeriría ajustar el algoritmo. Por el contrario, solo requeriría reelaborar la capa de comunicación y el proceso de creación de agentes, ya que en nuestra implementación actual no están en red.4. Jerarquía de criterios múltiples En las secciones anteriores, supusimos que se puede calcular la similitud para cualquier par de términos. Pero, tan pronto como uno usa datos reales, esta propiedad ya no está verificada. Algunos términos no tienen ningún valor de similitud con ningún término extraído. Además para los nodos de hoja, a veces es interesante usar otros medios para colocarlos en la jerarquía. Para esta estructuración de bajo nivel, los ontólogos generalmente basan el sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 1289 sus opciones sobre heurística simple. Usando esta observación, construimos un nuevo conjunto de reglas, que no se basan en la similitud para admitir la estructuración de bajo nivel.4.1 Agregar reglas de cobertura de la cabeza En este caso, los agentes pueden actuar con un punto de vista muy local simplemente observando la relación padre/niño. Cada agente puede intentar determinar si su padre es adecuado. Es posible adivinar esto porque cada agente conceptual se describe mediante un conjunto de términos y gracias a la red de términos de expansión de cabeza. En el siguiente TX habrá el conjunto de términos que describan el Concept Agent X y Head (TX) el conjunto de todos los términos que son jefes de al menos un elemento de TX. Gracias a esas dos anotaciones, podemos describir la función de adecuación principal A (P, C) entre un padre P y un hijo C: A (P, C) = | TP ∩ Cabeza (TC) || TP ∪ Cabeza (TC) |(3) Entonces, el mejor padre para C es el agente P que maximiza A (P, C). Un agente insatisfecho por su padre puede intentar encontrar uno mejor evaluando la adecuación con los candidatos. Diseñamos un algoritmo complementario para impulsar esta búsqueda: cuando un agente C está insatisfecho por su padre P, evalúa A (BI, C) con todos sus hermanos (BI notados) el que maximiza un (bi, c) se elige comoel nuevo padre. Figura 8: Árbol de agente conceptual después de la estabilización autónoma del sistema sin regla de cobertura de la cabeza ahora ilustramos esta regla comportamiento con un ejemplo. La Figura 8 muestra el estado del sistema después de la estabilización en los datos de prueba. Podemos notar que la hépatita viral (hepatitis viral) todavía está vinculada a la raíz de la taxonomía. Es causado por el hecho de que no existe un valor de similitud entre el término de hepatitis viral y ninguno del término de los otros agentes conceptuales. Figura 9: Árbol de agente conceptual después de la activación de la regla de cobertura de la cabeza después de activar la regla de cobertura de la cabeza y dejar que el sistema se estabilice nuevamente, obtenemos la Figura 9. Podemos ver que la hepatitis viral se deslizó a través de la rama que conduce a la hepatitis y la eligió como su nuevo padre. Es una elección de incumplimiento sensible ya que la hepatitis viral es un término más específico que la hepatitis. Esta regla tiende a impulsar a los agentes descritos por un conjunto de términos para convertirse en hojas del árbol conceptual. Aborda nuestra preocupación por mejorar la estructuración de bajo nivel de nuestra taxonomía. Pero obviamente, nuestros agentes carecen de una forma de retroceder en caso de modificaciones en la taxonomía que los haría ubicar en la rama equivocada. Ese es uno de los puntos en el que nuestro sistema aún debe mejorarse al agregar otro conjunto de reglas.4.2 Al usar varios criterios en las secciones y ejemplos anteriores, solo usamos un algoritmo a la vez. El algoritmo de agrupación distribuido tiende a introducir nuevas capas en la taxonomía, mientras que el algoritmo de cobertura de la cabeza tiende a empujar a algunos de los agentes hacia las hojas de la taxonomía. Obviamente, plantea la pregunta sobre cómo lidiar con múltiples criterios en nuestra construcción de taxonomía y cómo los agentes determinan sus prioridades en un momento dado. La solución que elegimos provino de la búsqueda de minimizar la no cooperación dentro del sistema de acuerdo con el método ADELFE. Cada agente calcula tres grados de no cooperación y elige su prioridad actual dependiendo de qué grado sea el más alto. Para un agente determinado a que tiene un padre P, un conjunto de hermanos bi y que recibió un conjunto de mensajes mk que tiene la prioridad PK Los tres grados de no cooperación son: • μH (a) = 1 - a (p, a) esEl grado de no cooperación de cobertura de la cabeza, determinada por la cobertura de la cabeza del padre, • μb (a) = max (1 - similitud (a, bi)), es el grado de no cooperación de la hermandad, determinado por el peor hermano de A con respecto a las similitudes, • μm (a) = max (PK), es el grado de no cooperación de mensaje, determinado por el mensaje más urgente recibido. Luego, el grado de no cooperación μ (a) del agente A es: μ (a) = max (μH (a), μb (a), μm (a)) (4) entonces, tenemos tres casos que determinan qué tipo deAcción A Eligirá: • Si μ (a) = μH (a) entonces A usará el algoritmo de cobertura de la cabeza que detallamos en la subsección anterior • Si μ (a) = μb (a) entonces A usará el algoritmo de agrupación distribuida (Consulte la Sección 3) • Si μ (a) = μm (a) entonces A procesará MK inmediatamente para ayudar a su remitente, esos tres casos resumen las actividades actuales de nuestros agentes: tienen que encontrar el mejor padre para ellos (μ (μ (A) = μH (a)), mejore la estructuración a través de la agrupación (μ (a) = μb (a)) y procese otros mensajes de agente (μ (a) = μm (a)) para ayudarlos a cumplir sus propios objetivos.4.3 Complejidad experimental revisada evaluamos la complejidad experimental de todo el sistema multiagente cuando se activan todas las reglas. En este caso, la métrica utilizada es el número de mensajes intercambiados en el sistema. Una vez más, el sistema se ha ejecutado con conjuntos de datos de entrada que varían de diez a cien términos. El valor dado es el promedio del monto del mensaje enviado en el sistema en su conjunto para cien ejecuciones sin interacción del usuario. Resulta en los gráficos de la Figura 10. La curva número 1 representa el promedio del valor obtenido. La curva número 2 representa el promedio del valor obtenido cuando solo se activa el algoritmo de agrupamiento distribuido, no el conjunto de reglas completa. La curva número 3 representa el polinomio minimizando el error con la curva número 1. El término de mayor grado de este polinomio está en N3, entonces nuestro sistema de múltiples agentes tiene una complejidad O (N3) 1290 la sexta intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 0 5000 10000 15000 20000 25000 10 20 30 40 50 60 70 80 90 100 Cantidad de Messages Cantidad de términos de entrada 1. Dynamo, todas las reglas (en promedio, con Min y Max) 2. Agrupación distribuida solamente (en promedio) 2. Polinomio cúbico Figura 10: Resultados experimentales en promedio. Además, notemos la variación muy pequeña de los rendimientos promedio con el máximo y el mínimo. En el peor de los casos para 100 términos, la variación es de 126.73 para un promedio de 20,737.03 (alrededor del 0.6%), lo que prueba la excelente estabilidad del sistema. Finalmente, las reglas adicionales de cobertura de la cabeza son una mejora real solo en el algoritmo distribuido. Introducen más restricciones y el punto de estabilidad se alcanza con menos interacciones y toma de decisiones por parte de los agentes. Significa que se intercambian menos mensajes en el sistema al tiempo que obtiene un árbol de mayor calidad para el oncólogo.5. Discusión y perspectivas 5.1 Limitación actual de nuestro enfoque La limitación más importante de nuestro algoritmo actual es que el resultado depende del orden que se agregan los datos. Cuando el sistema funciona por sí mismo en un conjunto de datos fijo dado durante la inicialización, el resultado final es equivalente a lo que podríamos obtener con un algoritmo centralizado. Por el contrario, agregar un nuevo elemento después de una primera estabilización tiene un impacto en el resultado final. Figura 11: Árbol de agente conceptual Después de la estabilización autónoma del sistema para ilustrar nuestras afirmaciones, presentamos otro ejemplo del sistema de trabajo. Al usar datos de prueba y dejar que el sistema funcione solo, obtenemos la jerarquía de la Figura 11 después de la estabilización. Figura 12: Árbol de agente conceptual Después de tener en cuenta la hepatitis, el oncólogo interactúa con el sistema y agrega un nuevo concepto descrito por el término hepatitis y vinculado a la raíz. El sistema reacciona y estabiliza, luego obtenemos la Figura 12 como resultado.La hepatitis se encuentra en la rama correcta, pero no hemos obtenido la misma organización que la Figura 6 del ejemplo anterior. Necesitamos mejorar nuestro algoritmo distribuido para permitir que un concepto se mueva a lo largo de una rama. Actualmente estamos trabajando en las reglas requeridas, pero la comparación con el algoritmo centralizado será muy difícil. En particular, ya que tendrán en cuenta los criterios ignorados por el algoritmo centralizado.5.2 poda para la construcción de ontologías en la Sección 3, presentamos el algoritmo de agrupamiento distribuido utilizado en el sistema Dynamo. Dado que este trabajo se basó primero en este algoritmo, como resultado introdujo un sesgo claro hacia los árboles binarios. Pero tenemos que tener en cuenta que estamos tratando de obtener taxonomías que sean más refinadas y concisas. Aunque la regla de cobertura de la cabeza es una mejora porque se basa en cómo los ontólogos generalmente funcionan, solo aborda la estructuración de bajo nivel pero no los niveles intermedios del árbol. Al observar la Figura 7, está claro que se podría hacer una poda en la taxonomía. En particular, desde que Lésion se movió, conceptual: 9 podría eliminarse, ya no es necesario. Además, la rama que comienza con ConceptAgent: 8 respeta claramente la restricción de hacer un árbol binario, pero sería más útil para el usuario en una forma más compacta y significativa. En este caso, conceptual: 10 y conceptual: 11 probablemente podría fusionarse. Actualmente, nuestro sistema tiene las reglas necesarias para crear niveles intermedios en la taxonomía, o para que los conceptos cambien hacia la hoja. Como señalamos, no es suficiente, por lo que se necesitan nuevas reglas para permitir la eliminación de nodos del árbol, o moverlos hacia la raíz. La mayor parte del trabajo necesario para desarrollar esas reglas consiste en encontrar la información estadística relevante que apoyará al oncólogo.6. Conclusión Después de presentarse como una solución prometedora, garantizar la calidad del modelo y su riqueza terminológica, el edificio de la ontología del análisis textual del corpus es difícil y costoso. Requiere supervisar y tener en cuenta el objetivo de la ontología. El uso de herramientas de procesamiento de idiomas naturales alivia la localización de conocimiento en los textos a través de usos del lenguaje. Dicho esto, esas herramientas producen una gran cantidad de datos léxicos o gramaticales que no son triviales de examinar para definir elementos conceptuales. Nuestra contribución radica en este paso del proceso de modelado de los textos, antes de cualquier intento de normalizar o formalizar el resultado. Propusimos un enfoque basado en un sistema de agente múltiple adaptativo para proporcionar al oncólogo una primera estructura taxonómica de conceptos. Nuestro sistema utiliza una red terminológica resultante de un análisis realizado por Syntex. El estado actual de nuestro software permite producir estructuras simples, proponerlas al oncólogo y hacer que evolucionen según las modificaciones que hizo. Las actuaciones del sistema son interesantes y algunos aspectos son incluso comparables a su contraparte centralizada. Sus fortalezas son en su mayoría cualitativas, ya que permite interacciones más sutiles del usuario y una adaptación progresiva a la nueva información basada en lingüística. Desde el punto de vista de la construcción de la ontología, este trabajo es un primer paso que muestra la relevancia de nuestro enfoque. Debe continuar, tanto para garantizar una mejor robustez durante la clasificación como para obtener estructuras más ricas semánticas que los árboles simples. A partir de estas mejoras, en su mayoría nos estamos centrando en la poda de obtener mejores taxonomías. Actualmente estaban trabajando en el criterio para desencadenar las acciones complementarias de los cambios de estructura aplicados por nuestro algoritmo de agrupación. En otras palabras, este algoritmo presenta en el sexto intl. Conf.En los agentes autónomos y los sistemas de múltiples agentes (AAMAS 07) 1291 denominan niveles, y necesitamos poder eliminarlos si es necesario, para alcanzar un equilibrio dinámico. También desde el punto de vista de ingeniería de múltiples agentes, su uso en un contexto dinámico de ontología ha mostrado su relevancia. Estas ontologías dinámicas pueden verse como una resolución de problemas compleja, en tal caso, la autoorganización a través de la cooperación ha sido una solución eficiente. Y, en general, es probable que sea interesante para otras tareas relacionadas con el diseño, incluso si se centraron solo en la ingeniería de conocimiento en este documento. Por supuesto, nuestro sistema aún requiere más trabajo de evaluación y validación para determinar con precisión las ventajas y defectos de este enfoque. Estaban planeando trabajar en dicha evaluación comparativa en el futuro cercano.7. Referencias [1] H. Assadi. Construcción de una ontología regional a partir de texto y su uso dentro de un sistema documental. Actas de la Conferencia Internacional sobre Sistemas de Ontología e Información formales-FOIS98, páginas 236-249, 1998. [2] N. Aussenac-Gilles y D. Sörgel. Análisis de texto para ontología e ingeniería de terminología. Journal of Applied Ontology, 2005. [3] J. Bao y V. Honavar. Edificio de ontología colaborativa con wiki@nt. Actas del taller sobre evaluación de herramientas basadas en ontología (EON2004), 2004. [4] C. Bernon, V. Camps, M.-P.Gleizes, y G. Picard. Metodologías orientadas al agente, Capítulo 7. Ingeniería de sistemas autoadaptativos múltiples: la metodología Adelfe, páginas 172-202. Idea Group Publishing, 2005. [5] C. Brewster, F. Ciravegna e Y. Wilks. Antecedentes y conocimiento en primer plano en la construcción de ontología dinámica. Taller web semántico, Sigir03, agosto de 2003. [6] D. Faure y C. Nedellec. Un método de agrupación conceptual basado en corpus para marcos verbales y adquisición de ontología. Taller LREC sobre la adaptación de recursos léxicos y corpus a sublenguajes y aplicaciones, 1998. [7] F. Gandon. Ingeniería de ontología: una encuesta y un retorno de la experiencia. Inria, 2002. [8] J.-P.Georgé, G. Picard, M.-P.Gleizes, y P. Glize. Diseño vivo para sistemas computacionales abiertos.12º talleres internacionales IEEE sobre tecnologías habilitadoras, infraestructura para empresas colaborativas, páginas 389-394, junio de 2003. [9] M.-P.Gleizes, V. Camps y P. Glize. Una teoría del cálculo emergente basada en la autoorganización cooperativa para los sistemas artificiales adaptativos. Cuarto Congreso Europeo de Ciencia de Sistemas, septiembre de 1999. [10] J. Heflin y J. Hendler. Ontologías dinámicas en la web. Conferencia de la Asociación Americana de Inteligencia Artificial, 2000. [11] S. Le Moigno, J. Charlet, D. Bourigault y M.-C.Jaulent. Extracción de terminología del texto para construir una ontología en cuidados intensivos quirúrgicos. Actas del Simposio Anual de AMIA 2002, 2002. [12] K. Lister, L. Sterling y K. Taveter. Conciliar las diferencias ontológicas por los agentes asistentes. AAMAS06, mayo de 2006. [13] A. Maedche. Aprendizaje de ontología para la web semántica. Kluwer Academic Editor, 2002. [14] A. Maedche y S. Staab. Ontologías mineras del texto. Ekaw 2000, páginas 189-202, 2000. [15] C. D. Manning y H. Schütze. Fundamentos del procesamiento estadístico del lenguaje natural. The MIT Press, Cambridge, Massachusetts, 1999. [16] H. V. D. Parunak, R. Rohwer, T. C. Belding y S. Brueckner. Dinámica descentralizada en cualquier momento jerárquico.29a Conferencia Internacional ACM Sigir sobre investigación y desarrollo sobre recuperación de información, agosto de 2006. 1292 El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07)