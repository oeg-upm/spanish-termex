Un mecanismo de asignación de recursos de anticipación de precio para grupos compartidos distribuidos Michal Feldman ∗ mfeldman@sims.berkeley.edu kevin lai † kevin.lai@hp.com li zhang † l.zhang@hp.com Resumen En este documento, formulamos el presupuesto fijo del presupuesto fijo.Juego de asignación de recursos para comprender el rendimiento de un sistema distribuido de asignación de recursos basado en el mercado. Múltiples usuarios deciden cómo distribuir su presupuesto (ofertas) entre múltiples máquinas de acuerdo con sus preferencias individuales para maximizar su utilidad individual. Observamos tanto la eficiencia como la equidad de la asignación en el equilibrio, donde la equidad se evalúa a través de las medidas de uniformidad de utilidad y la envidia. Mostramos analíticamente y a través de simulaciones de que a pesar de estar altamente descentralizado, dicho sistema converge rápidamente a un equilibrio y, a diferencia del óptimo social que logra una alta eficiencia, pero una mala equidad, el esquema de asignación propuesto logra un buen equilibrio de altos grados de eficiencia y justicia en la justicia.equilibrio. Categorías y descriptores de sujetos C.2.4 [Redes de comunicación por computadora]: sistemas distribuidos;C.4 [rendimiento de los sistemas];F.2.2 [Análisis de algoritmos y complejidad de problemas]: algoritmos y problemas no numéricos;J.4 [Ciencias sociales y conductuales]: Economía General de Algoritmos, Performance, Diseño, Economía 1. Introducción La principal ventaja de grupos compartidos distribuidos como la cuadrícula [7] y PlanetLab [1] es su capacidad para reunir recursos computacionales compartidos. Esto permite un mayor rendimiento debido a la multiplexación estadística y al patrón de utilización de ráfaga de los usuarios típicos. Compartir nodos dispersos en la red permite un retraso más bajo porque las aplicaciones pueden almacenar datos cercanos a los usuarios. Finalmente, compartir permite una mayor confiabilidad debido a la redundancia en hosts y conexiones de red. Sin embargo, la asignación de recursos en estos sistemas sigue siendo el principal desafío. El problema es cómo asignar un recurso compartido, tanto de manera justa y eficiente (donde la eficiencia es la relación del bienestar social logrado para lo social óptimo) con la presencia de usuarios estratégicos que actúan en sus propios intereses. Se han propuesto varios algoritmos de asignación no económicos, pero estos típicamente suponen que los valores de las tareas (es decir, su importancia) son los mismos, o son inversamente proporcionales a los recursos requeridos, o son establecidos por un administrador omnisciente. Sin embargo, en muchos casos, los valores de la tarea varían significativamente, no están correlacionados con los requisitos de recursos, y son difíciles y requieren mucho tiempo para que un administrador establezca. En cambio, examinamos un sistema de asignación de recursos basado en el mercado (otros se describen en [2, 4, 6, 21, 26, 27]) que permite a los usuarios expresar sus preferencias por los recursos a través de un mecanismo de licitación. En particular, consideramos un esquema de anticipación de precio [12] en el que un usuario ofrece un recurso y recibe la relación de su oferta a la suma de ofertas para ese recurso. Este esquema proporcional es más simple, más escalable y más receptivo [15] que los esquemas basados en la subasta [6, 21, 26]. El trabajo anterior ha analizado esquemas de anticipación de precios en el contexto de la asignación de la capacidad de red para flujos para usuarios con presupuestos ilimitados. En este trabajo, examinamos un esquema de anticipación de precios en el contexto de la asignación de la capacidad computacional para usuarios con preferencias privadas y presupuestos limitados, lo que resulta en un juego cualitativamente diferente (como se discutió en la Sección 6). En este artículo, formulamos el juego de asignación de recursos presupuestarios fijos y estudiamos la existencia y el rendimiento de los equilibrios NASH de este juego. Para evaluar los equilibrios de NASH, consideramos tanto su eficiencia, midiendo cuán cerca está el bienestar social en el equilibrio para el óptimo social y la equidad, midiendo cuán diferentes son las empresas de servicios públicos. Aunque rara vez se considera en el estudio teórico del juego anterior, creemos que la equidad es una métrica crítica para un esquema de asignación de recursos porque la percepción de injusticia hará que algunos usuarios rechacen un sistema con una asignación de recursos más eficiente pero menos justa a favor de uno con menos eficiente, más asignación de recursos justos. Utilizamos tanto la uniformidad de la utilidad como la envidia de la envidia para medir la equidad. La uniformidad de servicios públicos, que es común en el trabajo de informática, mide la cercanía de los servicios públicos de diferentes usuarios. EnvyFeeness, que es más desde la perspectiva económica, mide la felicidad de los usuarios con sus propios recursos en comparación con los recursos de los demás. Nuestras contribuciones son las siguientes: • Analizamos la existencia y el rendimiento de 127 equilibrios Nash. Usando el análisis, mostramos que siempre hay un equilibrio de Nash en el juego de presupuesto fijo si las funciones de utilidad satisfacen una condición bastante débil y natural de fuerte competitividad. También mostramos los peores límites de rendimiento: para los jugadores M, la eficiencia en el equilibrio es Ω (1/ √ m), la uniformidad de utilidad es ≥ 1/ m y la envidia ≥ 2 √ 2-2 ≈ 0.83. Aunque estos límites son bastante bajos, las simulaciones descritas a continuación indican que estos límites son demasiado pesimistas.• Describimos algoritmos que permiten a los usuarios estratégicos optimizar su utilidad. Como parte del análisis de juegos de presupuesto fijo, mostramos que los usuarios estratégicos con funciones de utilidad lineal pueden calcular sus ofertas utilizando un algoritmo de respuesta mejor que resulta rápidamente en una asignación con alta eficiencia con poca sobrecarga computacional y de comunicación. Presentamos variaciones del mejor algoritmo de respuesta para tareas de paralelismo finitas e infinitas. Además, presentamos un algoritmo de ajuste codicioso local que converge más lentamente que la mejor respuesta, pero permite funciones de utilidad no lineales o no formulables.• Mostramos que el mecanismo de asignación de recursos que supera el precio logra un alto grado de eficiencia y equidad. Usando la simulación, encontramos que, aunque la asignación socialmente óptima da como resultado una eficiencia perfecta, también resulta en una justicia muy pobre. Del mismo modo, la asignación de acuerdo con solo los pesos de preferencia de los usuarios da como resultado una alta equidad, pero una eficiencia mediocre. La intuición sugeriría que la eficiencia y la justicia son exclusivas. Sorprendentemente, el equilibrio NASH, alcanzado por cada usuario, aplica iterativamente el mejor algoritmo de respuesta para adaptar sus ofertas, logra casi la eficiencia de la óptima social y casi la equidad de la asignación de poste de peso: la eficiencia es ≥ 0.90, la uniformidad de utilidad es≥ 0.65, y la envidia es ≥ 0.97, independiente del número de usuarios en el sistema. Además, el tiempo para converger al equilibrio es ≤ 5 iteraciones cuando todos los usuarios usan la mejor estrategia de respuesta. El algoritmo de ajuste local funciona de manera similar cuando hay suficiente competitividad, pero tarda de 25 a 90 iteraciones para estabilizarse. Como resultado, creemos que los sistemas distribuidos compartidos basados en el juego de presupuesto fijo pueden ser altamente descentralizados, pero lograr un alto grado de eficiencia y justicia. El resto del documento está organizado de la siguiente manera. Describimos el modelo en la Sección 2 y derivamos el rendimiento en los equilibrios NASH para el modelo de paralelismo infinito en la Sección 3. En la Sección 4, describimos algoritmos para que los usuarios optimicen su propia utilidad en el juego de presupuesto fijo. En la Sección 5, describimos nuestro simulador y resultados de simulación. Describimos el trabajo relacionado en la Sección 6. Concluimos discutiendo algún límite de nuestro modelo y trabajo futuro en la Sección 7. 2. La asignación de recursos de anticipación del precio del modelo. Estudiamos el problema de asignar un conjunto de recursos divisibles (o máquinas). Supongamos que hay M Usuarios y N Máquinas. Cada máquina se puede dividir continuamente para la asignación a múltiples usuarios. Un esquema de asignación Ω = (R1, ..., Rm), donde Ri = (Ri1, · · ·, Rin) con RIJ que representa la participación de la máquina J asignada al usuario I, satisface que para cualquier 1 ≤ I ≤ my1 ≤ j ≤ n, rij ≥ 0 y pm i = 1 rij ≤ 1. Deje que Ω denote el conjunto de todos los esquemas de asignación. Consideramos el mecanismo de anticipación de precios en el que cada usuario coloca una oferta a cada máquina, y el precio de la máquina está determinado por las ofertas totales realizadas. Formalmente, suponga que el usuario I presenta una oferta no negativa xij a la máquina j. El precio de la máquina J se establece en yj = pn i = 1 xij, las ofertas totales colocadas en la máquina j.En consecuencia, el usuario I recibe una fracción de rij = xij yj de j. Cuando yj = 0, es decir, cuando no hay oferta en una máquina, la máquina no se asigna a nadie. Llamamos a xi = (xi1, ..., xin) el vector de licitación del usuario i. La consideración adicional que tenemos es que cada usuario I tiene una restricción de presupuesto XI. Por lo tanto, el usuario es que las ofertas totales tienen que resumir su presupuesto, es decir, Pn j = 1 xij = xi. Las limitaciones presupuestarias provienen del hecho de que los usuarios no tienen un presupuesto infinito. Funciones de utilidad. Cada usuario es la utilidad está representada por una interfaz de usuario de la fracción (RI1, ..., Rin) que el usuario recibe de cada máquina. Dado el dominio del problema que consideramos, suponemos que cada usuario tiene preferencias diferentes y relativamente independientes para diferentes máquinas. Por lo tanto, la función de utilidad básica que consideramos es la función de utilidad lineal: ui (ri1, · · ·, rin) = wi1ri1 +· · · +winrin, donde wij ≥ 0 es el usuario preferencia privada, también llamada su peso, en la máquinaj. Por ejemplo, suponga que la máquina 1 tiene una CPU más rápida pero menos memoria que la máquina 2, y el usuario 1 ejecuta aplicaciones limitadas de CPU, mientras que el usuario 2 ejecuta aplicaciones limitadas de memoria. Como resultado, W11> W12 y W21 <W22. Nuestra definición de funciones de utilidad corresponde a que el usuario tenga suficientes trabajos o suficiente paralelismo dentro de los trabajos para utilizar todas las máquinas. En consecuencia, el objetivo de los usuarios es obtener el mayor recurso posible. Llamamos a esto el modelo de paralelismo infinito. En la práctica, una aplicación de usuarios puede tener un límite inherente en la paralelización (por ejemplo, algunos cálculos deben hacerse secuencialmente) o puede haber un límite del sistema (por ejemplo, los datos de aplicaciones se están atendiendo desde un servidor de archivos con capacidad limitada). Para modelar esto, también consideramos el modelo de paralelismo finito más realista, donde el paralelismo de los usuarios está limitado por KI, y la interfaz de usuario de la utilidad de los usuarios es la suma de la Wijrij más grande de KI. En este modelo, el usuario solo envía ofertas a máquinas hasta KI. Nuestra abstracción es capturar la esencia del problema y facilitar nuestro análisis. En la Sección 7, discutimos el límite de la definición anterior de funciones de utilidad. Mejor respuesta. Como normalmente, asumimos que los usuarios son egoístas y estratégicos: todos actúan para maximizar su propia utilidad, definida por sus funciones de utilidad. Desde la perspectiva del usuario I, si las ofertas totales de los otros usuarios colocados en cada máquina J es YJ, entonces la mejor respuesta del usuario I al sistema es la solución del siguiente problema de optimización: maximice la UI (xij xij +yj)Sujeto a pn j = 1 xij = xi, y xij ≥ 0. La dificultad del problema de optimización anterior depende de la formulación de la interfaz de usuario. Más tarde mostraremos cómo resolverlo para el modelo de paralelismo infinito y proporcionaremos una heurística para el modelo de paralelismo finito. Equilibrio de Nash. Suponiendo que el usuario es egoísta, cada vector de oferta de los usuarios es la mejor respuesta al sistema. La pregunta que más nos interesa es si existe una colección de vectores de licitación, uno para cada usuario, de modo que cada vector de oferta de cada usuarios sea la mejor respuesta a las de los otros usuarios. Tal estado se conoce como el equilibrio Nash, un concepto central en la teoría del juego. Formalmente, los vectores de licitación x1 ,..., XM es un equilibrio de Nash si para 128 cualquier 1 ≤ i ≤ m, xi es la mejor respuesta al sistema o, para cualquier otro vector de licitación xi, ui (x1, .., xi, ..., xm)≥ ui (x1, ..., xi, ..., xm). El equilibrio de Nash es deseable porque es un estado estable en el que nadie tiene incentivos para cambiar su estrategia. Pero un juego puede no tener un equilibrio. De hecho, un equilibrio de Nash puede no existir en el esquema de anticipación de precios que definimos anteriormente. Esto se puede mostrar con un ejemplo simple de dos jugadores y dos máquinas. Por ejemplo, deje U1 (R1, R2) = R1 y U2 (R1, R2) = R1 + R2. Entonces, el jugador 1 nunca debe ofertar en la máquina 2 porque no tiene valor para él. Ahora, el Jugador 2 tiene que presentar una oferta positiva en la máquina 2 para reclamar la máquina, pero no hay límite inferior, lo que resulta en la inexistencia del equilibrio de Nash. Debemos tener en cuenta que incluso el equilibrio de estrategia mixta no existe en este ejemplo. Claramente, esto sucede cuando hay un recurso que solo un jugador desea. Para descartar este caso, consideramos esos juegos fuertemente competitivos.1 Bajo el modelo de paralelismo infinito, un juego se llama muy competitivo si por 1 ≤ j ≤ n, existe un i = k tal que wij, wkj> 0. En tal condición, tenemos que (ver [5] para una prueba), Teorema 1. Siempre existe una estrategia pura Nash Equilibrium en un juego muy competitivo. Dada la existencia del equilibrio de Nash, la siguiente pregunta importante es el rendimiento en el equilibrio de Nash, que a menudo se mide por su eficiencia y equidad. Eficiencia (precio de la anarquía). Para un esquema de asignación Ω ∈ ω, denota por u (ω) = p i ui (ri) el bienestar social bajo Ω. Deje u ∗ = maxω∈ω u (ω) denota el bienestar social óptimo: las utilidades de usuario agregadas máximas posibles. La eficiencia en un esquema de asignación Ω se define como π (ω) = u (ω) u ∗. Deje que ω0 denote el conjunto de la asignación en el equilibrio de Nash. Cuando existe el equilibrio de Nash, es decir, Ω0 = ∅, defina la eficiencia de un juego Q como π (q) = minω∈ω0 π (Ω). Por lo general, es el caso que π <1, es decir, hay una pérdida de eficiencia en un equilibrio de Nash. Este es el precio de la anarquía [18] pagado por no tener la aplicación central del buen comportamiento de los usuarios. Este precio es interesante porque el control central da como resultado el mejor resultado posible, pero no es posible en la mayoría de los casos. Justicia. Si bien la definición de eficiencia es estándar, hay múltiples formas de definir la equidad. Consideramos dos métricas. Uno es comparando los servicios públicos de los usuarios. La uniformidad de utilidad τ (Ω) de un esquema de asignación Ω se define como mini ui (ω) maxi ui (Ω), la relación de la utilidad mínima y la utilidad máxima entre los usuarios. Dicha definición (o discrepancia de utilidad definida de manera similar como maxi ui (ω) mini ui (ω)) se usa ampliamente en la literatura de informática. Según esta definición, la uniformidad de utilidad τ (Q) de un juego Q se define como τ (q) = minω∈ω0 τ (Ω). La otra métrica ampliamente estudiada en economía es el concepto de envidia de envidia [25]. A diferencia de la métrica de uniformidad de utilidad, la envidia se refiere a cómo el usuario percibe el valor de la acción que le asignó, en comparación con las acciones que reciben otros usuarios. Dentro de dicho marco, defina la frenilidad de envidia de un esquema de asignación ω por ρ (ω) = mini, J ui (ri) ui (rj).Los alternativos incluyen agregar un precio de reserva o limitar la oferta más baja permitida a cada máquina. Sin embargo, estas alternativas introducen el problema de obtener el precio o el límite correctos. Cuando ρ (Ω) ≥ 1, el esquema se conoce como un esquema de asignación sin envidia. Del mismo modo, la envolía de envidia ρ (Q) de un juego Q se define como ρ (Q) = minω∈ω0 ρ (ω).3. Equilibrio de Nash En esta sección, presentamos algunos resultados teóricos con respecto al rendimiento en el equilibrio de Nash bajo el modelo de paralelismo infinito. Suponemos que el juego es fuertemente competitivo para garantizar la existencia de equilibrios. Para una discusión significativa de la eficiencia y la justicia, suponemos que los usuarios son simétricos al exigir que Xi = 1 ypn J = 1 wij = 1 para todos los 1 ≤ i ≤ m.O informalmente, requerimos que todos los usuarios tengan el mismo presupuesto, y tienen la misma utilidad cuando poseen todos los recursos. Esto impide el caso cuando un usuario tiene un presupuesto extremadamente alto, lo que resulta en muy baja eficiencia o baja equidad en equilibrio. Primero proporcionamos una caracterización de los equilibrios. Por definición, los vectores de licitación x1 ,..., XM es un equilibrio de Nash si y solo si cada estrategia de jugadores es la mejor respuesta a las ofertas de los grupos. Dado que UI es una función lineal y el dominio de cada usuarios ofrece {(xi1, ..., xin) |P j xij = xi, y xij ≥ 0} es un conjunto convexo, la condición de optimización es que existe λi> 0 tal que ∂ui ∂xij = wij yj - xij y 2 j  = λi si xij> 0, y <λi Si xij = 0. (1) o intuitivamente, en un equilibrio, cada usuario tiene el mismo valor marginal en las máquinas donde colocan ofertas positivas y tiene valores marginales más bajos en aquellas máquinas donde no ofertan. Según el modelo de paralelismo infinito, es fácil calcular el óptimo social U ∗ a medida que se logra cuando asignamos cada máquina totalmente a la persona que tiene el peso máximo en la máquina, i.e. U ∗ = pn j = 1 max1≤i≤m wij.3.1 Juegos de dos jugadores Primero mostramos que incluso en el caso no trivial más simple cuando hay dos usuarios y dos máquinas, el juego tiene propiedades interesantes. Comenzamos con dos casos especiales para proporcionar alguna intuición sobre el juego. Las matrices de peso se muestran en la Figura 1 (a) y (b), que corresponden respectivamente a los juegos de peso igual y de peso opuesto. Deje que X e Y denoten las ofertas respectivas de los usuarios 1 y 2 en la máquina 1. Denota por s = x + y y δ = (2 - s)/s. Juego de igual peso. En la Figura 1, ambos usuarios tienen valoraciones iguales para las dos máquinas. Por la condición de optimización, para que los vectores de oferta estén en equilibrio, necesitan satisfacer las siguientes ecuaciones de acuerdo con (1) α y (x + y) 2 = (1 - α) 1 - y (2 - x - y)2 α x (x + y) 2 = (1 - α) 1 - x (2 - x - y) 2 simplificando las ecuaciones anteriores, obtenemos que δ = 1 - 1/α y x = y = α. Por lo tanto, existe un equilibrio NASH único del juego donde los dos usuarios tienen el mismo vector de licitación. En el equilibrio, la utilidad de cada usuario es 1/2, y el bienestar social es 1. Por otro lado, el óptimo social es claramente 1. Por lo tanto, el juego de igual peso es ideal como la eficiencia, la uniformidad de la utilidad y la envidia son todas 1. 129 m1 m2 u1 α 1-α u2 α 1-α m1 m2 u1 α 1-α u2 1-α α (A) Juego de igual peso (b) Juego de peso opuesto Figura 1: Dos casos especiales de juegos de dos jugadores. Juego de peso opuesto. La situación es diferente para el juego opuesto en el que los dos usuarios colocan exactamente los pesos opuestos en las dos máquinas. Suponga que α ≥ 1/2. Del mismo modo, para que los vectores BID estén en el equilibrio, necesitan satisfacer α y (x + y) 2 = (1 - α) 1 - y (2 - x - y) 2 (1 - α) x (x +y) 2 = α 1 - x (2 - x - y) 2 al simplificar las ecuaciones anteriores, tenemos que cada equilibrio de Nash corresponde a una raíz no negativa de la ecuación cúbica F (Δ) = Δ3 - CΔ2 + Cδ - 1 =0, donde C = 1 2α (1 - α) - 1. Claramente, δ = 1 es una raíz de F (δ). Cuando δ = 1, tenemos que x = α, y = 1 - α, que es el equilibrio simétrico que es consistente con nuestra intuición: cada usuario pone una oferta proporcional a su preferencia de la máquina. En este equilibrio, u = 2 - 4α (1 - α), u ∗ = 2α y u/u ∗ = (2α + 1 α) - 2, que se minimiza cuando α = √ 2 2 con el valor mínimo de 2√ 2 - 2 ≈ 0.828. Sin embargo, cuando α es lo suficientemente grande, existen otras dos raíces, correspondientes a equilibrios asimétricos menos intuitivos. Intuitivamente, el equilibrio asimétrico surge cuando el usuario 1 valora la máquina 1 mucho, pero al colocar incluso una oferta relativamente pequeña en la máquina 1, puede obtener la mayor parte de la máquina porque el usuario 2 valora la máquina 1 de la máquina 1 y, por lo tanto, coloca una oferta aún más pequeña. En este caso, el usuario 1 obtiene la mayor parte de la máquina 1 y casi la mitad de la máquina 2. El umbral está en cuando F (1) = 0, es decir, cuando C = 1 2α (1 - α) = 4. Esto se resuelve a α0 = 2+ √ 2 4 ≈ 0.854. Esos equilibrios asimétricos en δ = 1 son malos, ya que producen una eficiencia más baja que el equilibrio simétrico. Sea Δ0 la raíz mínima. Cuando α → 0, C → + ∞, y Δ0 = 1/C + O (1/C) → 0. Entonces, x, y → 1. Por lo tanto, U → 3/2, U ∗ → 2 y U/U ∗ → 0.75. Desde el juego simple anterior, ya observamos que el equilibrio de Nash puede no ser único, lo que es diferente de muchos juegos de congestión en los que el equilibrio de Nash es único. Para el juego general de dos jugadores, podemos demostrar que 0.75 es en realidad la peor eficiencia con una prueba en [5]. Además, en el equilibrio asimétrico, la uniformidad de utilidad se acerca a 1/2 cuando α → 1. Este es lo peor posible para los juegos de dos jugadores porque, como mostramos en la Sección 3.2, una utilidad de los usuarios en cualquier equilibrio de Nash es al menos 1/m en el juego M-jugador. Otra consecuencia es que el juego de dos jugadores siempre está libre de envidia. Suponga que las dos acciones de los dos usuarios son R1 = (R11, ..., R1n) y R2 = (R21, ..., R2n) respectivamente. Entonces u1 (r1) + u1 (r2) = u1 (r1 + r2) = u1 (1, ..., 1) = 1 porque ri1 + ri2 = 1 para todos 1 ≤ i ≤ n.Nuevamente por eso U1 (R1) ≥ 1/2, tenemos que U1 (R1) ≥ U1 (R2), es decir, cualquier asignación de equilibrio está libre de envidia. Teorema 2. Para un juego de dos jugadores, π (Q) ≥ 3/4, τ (Q) ≥ 0.5 y ρ (Q) = 1. Todos los límites están apretados en el peor de los casos.3.2 Juego múltiple para grandes cantidades de jugadores, la pérdida en el bienestar social puede ser desafortunadamente grande. El siguiente ejemplo muestra el peor de los casos. Considere un sistema con M = N2 + N Players y N Máquinas. De los jugadores, hay N2 que tienen los mismos pesos en todas las máquinas, es decir, 1/n en cada máquina. Los otros jugadores N tienen peso 1, cada uno en una máquina diferente y 0 (o un poco suficientemente pequeño) en todas las demás máquinas. Claramente, u ∗ = n.La siguiente asignación es un equilibrio: los primeros jugadores de N2 distribuyen uniformemente su dinero entre todas las máquinas, el otro jugador N invierte todo su dinero en su máquina favorita respectiva. Por lo tanto, el dinero total en cada máquina es n + 1. En este equilibrio, cada uno de los primeros jugadores de N2 recibe 1 N 1/N n+1 = 1 n2 (n+1) en cada máquina, lo que resulta en una utilidad total de N3 · 1 n2 (n+1) <1. Los otros jugadores N reciben 1 n+1 en su máquina favorita, lo que resulta en una utilidad total de N · 1 n+1 <1. Por lo tanto, la utilidad total del equilibrio es <2, mientras que el óptimo social es n = θ (√ m). Este límite es el peor posible. ¿Qué pasa con la uniformidad de utilidad del juego de asignación de múltiples jugadores? Luego mostramos que la uniformidad de utilidad del juego de asignación de jugador M no puede exceder m.Sea (S1, ..., Sn) las ofertas totales actuales en las máquinas n, excluyendo el usuario i. Usuario puedo asegurar una utilidad de 1/m distribuyendo su presupuesto proporcionalmente a las ofertas actuales. Es decir, el usuario i, al ofertar sij = xi/ pn i = 1 si en la máquina j, obtiene un nivel de recurso de: rij = sij sij + sj = sj/ pn i = 1 si sj/ pn i = 1 si + sj= 1 1 + pn i = 1 si, donde pn j = 1 sj = pm j = 1 xj - xi = m - 1. Por lo tanto, rij = 1 1+m - 1 = 1 m. La utilidad total del usuario I es nx j = 1 rijwij = (1/m) nx j = 1 wij = 1/m. Dado que cada utilidad de los usuarios no puede exceder 1, la uniformidad mínima posible es 1/m. Mientras que la uniformidad de la utilidad puede ser pequeña, la introducción de la envidia, por otro lado, está limitada por una constante de 2 √ 2-2 ≈ 0.828, como se muestra en [29]. Para resumir, tenemos ese teorema 3. Para el juego del jugador M, π (q) = Ω (1/ √ m), τ (q) ≥ 1/ m y ρ (q) ≥ 2 √ 2-2. Todos estos límites están apretados en el peor de los casos.4. Algoritmos En la sección anterior, presentamos los límites de rendimiento del juego bajo el modelo de paralelismo infinito. Sin embargo, las preguntas más interesantes en la práctica son cómo se puede alcanzar el equilibrio y cuál es el rendimiento en el equilibrio de Nash para la distribución típica de las funciones de utilidad. En particular, nos gustaría saber si la estrategia intuitiva de cada jugador reajustando constantemente sus ofertas de acuerdo con el mejor algoritmo de respuesta conduce al equilibrio. Para responder a estas preguntas, recurrimos a simulaciones. En esta sección, presentamos los algoritmos que usamos para calcular o aproximar la mejor respuesta y el óptimo social en nuestros experimentos. Consideramos tanto el paralelismo infinito como el modelo de paralelismo finito.130 4.1 Modelo de paralelismo infinito Como mencionamos antes, es fácil calcular el óptimo social bajo el modelo de paralelismo infinito: simplemente asignamos cada máquina al usuario que más le gusta. Ahora presentamos el algoritmo para calcular la mejor respuesta. Recuerde que para los pesos W1 ,..., Wn, Total Bids Y1 ,..., yn, y el presupuesto X, la mejor respuesta es resolver el siguiente problema de optimización Maximizar u = pn j = 1 wj xj xj +yj sujeto a pn j = 1 xj = x, y xj ≥ 0. Para calcular la mejor respuesta, primero clasificamos a WJ YJ en orden decreciente. Sin pérdida de generalidad, suponga que W1 Y1 ≥ W2 Y2 ≥...wn yn. Suponga que x ∗ = (x ∗ 1, ..., x ∗ n) es la solución óptima. Mostramos que si x ∗ i = 0, entonces para cualquier j> i, x ∗ j = 0 también. Supongamos que esto no era cierto. Entonces ∂u ∂xj (x ∗) = wj yj (x ∗ j + yj) 2 <wj yj y2 j = wj yj ≤ wi yi = ∂u ∂xi (x ∗). Por lo tanto, contradice con la condición de optimización (1). Supongamos que k = max {i | x ∗ i> 0}. Nuevamente, por la condición de optimización, existe λ de tal manera que wi yi (x ∗ i +yi) 2 = λ para 1 ≤ i ≤ k, y x ∗ i = 0 para i> k.De manera equivalente, tenemos que: x ∗ i = r wiyi λ - yi, para 1 ≤ i ≤ k, y x ∗ i = 0 para i> k.Reemplazándolos en la ecuación pn i = 1 x ∗ i = x, podemos resolver para λ = (pk i = 1 √ wiyi) 2 (x+ pk i = 1 yi) 2. Por lo tanto, x ∗ i = √ wiyi pk i = 1 √ wiyi (x + kx i = 1 yi) - yi. La pregunta restante es cómo determinar k.Es el valor más grande de tal manera que x ∗ k> 0. Por lo tanto, obtenemos el siguiente algoritmo para calcular la mejor respuesta de un usuario: 1. Ordene las máquinas de acuerdo con Wi Yi en orden decreciente.2. Calcule la k más grande de tal manera que √ wkyk pk i = 1 √ wiyi (x + kx i = 1 yi) - yk ≥ 0. 3. Establecer xj = 0 para j> k, y para 1 ≤ j ≤ k, establecido: xj = √ wjyj pk i = 1 √ wiyi (x + kx i = 1 yi) - yj. La complejidad computacional de este algoritmo es O (n log n), dominado por la clasificación. En la práctica, la mejor respuesta se puede calcular con poca frecuencia (por ejemplo, una vez por minuto), por lo que para un host moderno típicamente poderoso, este costo es insignificante. El mejor algoritmo de respuesta debe enviar y recibir mensajes O (n) porque cada usuario debe obtener las ofertas totales de cada host. En la práctica, esto es más significativo que el costo computacional. Tenga en cuenta que los hosts solo revelan a los usuarios la suma de las ofertas en ellos. Como resultado, los anfitriones no revelan las preferencias privadas e incluso las ofertas individuales de un usuario a otro.4.2 Modelo de paralelismo finito Recuerde que en el modelo de paralelismo finito, cada usuario solo realiza ofertas en la mayoría de las máquinas KI. Por supuesto, el modelo de paralelismo infinito es solo un caso especial de modelo de paralelismo finito en el que Ki = n para todos los IS. En el modelo de paralelismo finito, calcular el óptimo social ya no es trivial debido al paralelismo limitado. En su lugar, se puede calcular utilizando el algoritmo de coincidencia máximo. Considere el gráfico bipartito completo ponderado G = U × V, donde u = {ui | 1 ≤ i ≤ m, y 1 ≤ ≤ ki}, v = {1, 2 ,..., n} con peso de borde asignado al borde (ui, vj). Una coincidencia de G es un conjunto de bordes con nodos disjuntos, y el peso de una coincidencia son los pesos totales de los bordes en la coincidencia. Como resultado, se mantiene el siguiente lema. Lema 1. El óptimo social es lo mismo que la coincidencia de peso máxima de G. Por lo tanto, podemos usar el algoritmo de coincidencia de peso máximo para calcular el óptimo social. La coincidencia de peso máxima es un problema de red clásica y se puede resolver en el tiempo polinomial [8, 9, 14]. Elegimos implementar el algoritmo húngaro [14, 19] debido a su simplicidad. Puede existir un algoritmo más eficiente para calcular la coincidencia máxima explotando la estructura especial de G. Esta sigue siendo una pregunta abierta interesante. Sin embargo, no conocemos un algoritmo eficiente para calcular la mejor respuesta bajo el modelo de paralelismo finito. En cambio, proporcionamos la siguiente heurística de búsqueda local. Supongamos que nuevamente tenemos n máquinas con pesas w1 ,..., WN y Total Bids Y1 ,..., yn. Deje que el presupuesto de los usuarios sea x y el paralelismo vinculado sea k.Nuestro objetivo es calcular una asignación de X a las máquinas hasta K para maximizar la utilidad de los usuarios. Para un subconjunto de máquinas A, denota por x (a) la mejor respuesta en un sin paralelismo unido y por u (a) la utilidad obtenida por el algoritmo de mejor respuesta. La búsqueda local funciona de la siguiente manera: 1. Establezca A para ser las máquinas K con la WI/YI más alta.2. Calcule u (a) por el algoritmo de mejor respuesta del paralelismo infinito (Sec 4.1) en A. 3. Para cada i ∈ A y cada j /∈ A, repita 4. Sea b = a - {i} + {j}, calcule u (b).5. If (u (b)> u (a)), deje que A ← B y GOTO 2. 6. Salida x (a). Intuitivamente, por la heurística de búsqueda local, probamos si podemos intercambiar una máquina en una que no esté en A para mejorar la mejor utilidad de respuesta. En caso afirmativo, intercambiamos las máquinas y repetimos el proceso. De lo contrario, hemos alcanzado un máximo local y una salida ese valor. Sospechamos que los máximos locales que encuentra este algoritmo también es el máximo global (con respecto a un usuario individual) y que este proceso se detiene después de unas pocas iteraciones, pero no podemos establecerlo. Sin embargo, en nuestras simulaciones, este algoritmo converge rápidamente a una eficiencia alta (≥ .7).131 4.3 Ajuste de codicioso local Los algoritmos de respuesta de los mejores de respuesta anteriores solo funcionan para las funciones de utilidad lineal descritas anteriormente. En la práctica, las funciones de utilidad pueden tener una forma más complicada, o lo que es peor, un usuario puede no tener una formulación de su función de utilidad. Suponemos que el usuario todavía tiene una manera de medir su utilidad, que es la suposición mínima necesaria para cualquier mecanismo de asignación de recursos basado en el mercado. En estas situaciones, los usuarios pueden usar una estrategia más general, el método local de ajuste codicioso, que funciona de la siguiente manera. Un usuario encuentra las dos máquinas que le proporcionan la utilidad marginal más alta y más baja. Luego mueve una pequeña cantidad fija de dinero de la máquina con baja utilidad marginal a la máquina con la más alta. Esta estrategia tiene como objetivo ajustar las ofertas para que los valores marginales en cada máquina que se oferten sean los mismos. Esta condición garantiza que la asignación es la óptima cuando la función de utilidad es cóncava. La compensación para el ajuste codicioso local es que lleva más tiempo estabilizarse que la mejor respuesta.5. Resultados de la simulación Si bien los resultados analíticos nos proporcionan un análisis en el peor de los casos para el modelo de paralelismo infinito, en esta sección empleamos simulaciones para estudiar las propiedades de los equilibrios NASH en escenarios más realistas y para el modelo de paralelismo finito. Primero, determinamos si el proceso de licitación del usuario converge y, de ser así, cuál es la tasa de convergencia. En segundo lugar, en casos de convergencia, observamos el rendimiento en equilibrio, utilizando las métricas de eficiencia y equidad definidas anteriormente. Método iterativo. En nuestras simulaciones, cada usuario comienza con un vector de oferta inicial y luego actualiza iterativamente sus ofertas hasta que se cumple un criterio de convergencia (que se describe a continuación). La oferta inicial se establece proporcional a los pesos de los usuarios en las máquinas. Experimentamos con dos métodos de actualización, los mejores métodos de respuesta, como se describe en la Sección 4.1 y 4.2, y el método local de ajuste codicioso, como se describe en la Sección 4.3. Criterios de convergencia. El tiempo de convergencia mide la rapidez con que el sistema alcanza el equilibrio. Es particularmente importante en el entorno altamente dinámico de los grupos compartidos distribuidos, en los que las condiciones de los sistemas pueden cambiar antes de alcanzar el equilibrio. Por lo tanto, una alta tasa de convergencia puede ser más significativa que la eficiencia en el equilibrio. Hay varios criterios diferentes para la convergencia. El criterio más fuerte es exigir que solo haya un cambio insignificante en las ofertas de cada usuario. El problema con este criterio es que es demasiado estricto: los usuarios pueden ver un cambio insignificante en sus utilidades, pero de acuerdo con esta definición, el sistema no ha convergido. El criterio de brecha de utilidad menos estricto requiere que solo haya un cambio insignificante en la utilidad de los usuarios. Dada la preocupación de los usuarios por la utilidad, esta es una definición más natural. De hecho, en la práctica, el usuario probablemente no esté dispuesto a reasignar sus ofertas dramáticamente para una pequeña ganancia de servicios públicos. Por lo tanto, utilizamos el criterio de brecha de utilidad para medir el tiempo de convergencia para el mejor método de actualización de respuesta, es decir, consideramos que el sistema ha convergido si la brecha de utilidad de cada usuario es menor que (0.001 en nuestros experimentos). Sin embargo, este criterio no funciona para el método de ajuste codicioso local porque los usuarios de ese método experimentarán fluctuaciones constantes en la utilidad a medida que avanzan el dinero. Para este método, utilizamos el criterio de brecha de utilidad marginal. Comparamos los márgenes de utilidad más altos y más bajos en las máquinas. Si la diferencia es insignificante, consideramos que el sistema está convergente. Además de la convergencia al equilibrio, también consideramos el criterio de la visión de los proveedores del sistema, el criterio de estabilización del bienestar social. Bajo este criterio, un sistema se ha estabilizado si el cambio en el bienestar social es ≤. La utilidad de los usuarios individuales puede no haber convergido. Este criterio es útil para evaluar qué tan rápido el sistema en su conjunto alcanza un nivel de eficiencia particular. Preferencias del usuario. Experimentamos con dos modelos de preferencias de usuario, distribución aleatoria y distribución correlacionada. Con una distribución aleatoria, los pesos de los usuarios en las diferentes máquinas se distribuyen de forma independiente e idéntica, según la distribución uniforme. En la práctica, las preferencias de los usuarios probablemente estén correlacionadas en función de factores como la ubicación de los hosts y los tipos de aplicaciones que ejecutan los usuarios. Para capturar estas correlaciones, asociamos con cada usuario y máquina de un vector de perfil de recursos donde cada dimensión del vector representa un recurso (por ejemplo, CPU, memoria y ancho de banda de red). Para un usuario I con un perfil Pi = (PI1, ..., PI), PIK representa el usuario es necesario para recursos k.Para la máquina J con perfil Qj = (QJ1, ..., Qj), QJK representa la fuerza de la máquina JS con respecto al recurso k.Entonces, WIJ es el producto DOT del usuario y los perfiles de recursos de la máquina JS, es decir, wij = pi · qj = p k = 1 pikqjk. Al usar estos perfiles, comprimimos el espacio de parámetros e introducimos correlaciones entre usuarios y máquinas. En las siguientes simulaciones, solucionamos el número de máquinas a 100 y variamos el número de usuarios de 5 a 250 (pero solo informamos los resultados para el rango de 5 - 150 usuarios, ya que los resultados siguen siendo similar para un mayor número de usuarios). Las secciones 5.1 y 5.2 presentan los resultados de la simulación cuando aplicamos el paralelismo infinito y los modelos de paralelismo finitos, respectivamente. Si el sistema converge, informamos el número de iteraciones hasta la convergencia. Un tiempo de convergencia de 200 iteraciones indica no convergencia, en cuyo caso informamos los valores de eficiencia y equidad en el punto en que terminamos la simulación.5.1 Paralelismo infinito En esta sección, aplicamos el modelo de paralelismo infinito, que supone que los usuarios pueden usar un número ilimitado de máquinas. Presentamos la eficiencia y la justicia en el equilibrio, en comparación con dos métodos de asignación de referencia: óptimo social y proporción de peso, en el que los usuarios distribuyen sus ofertas proporcionalmente a sus pesos en las máquinas (lo que puede parecer un método de distribución razonable de manera intuitiva). Presentamos resultados para los dos modelos de preferencia de usuario. Con las preferencias uniformes, los pesos de los usuarios para las diferentes máquinas se distribuyen de forma independiente e idéntica de acuerdo con la distribución uniforme, u ∼ (0, 1) (y se normalizan a partir de entonces). En las preferencias correlacionadas, cada vector de perfil de recursos de los usuarios y cada máquinas tiene tres dimensiones, y sus valores también se toman de la distribución uniforme, u ∼ (0, 1). Tiempo de convergencia. La Figura 2 muestra el tiempo de convergencia, la eficiencia y la equidad del modelo de paralelismo infinito bajo preferencias uniformes (izquierda) y correlacionada (derecha). Las parcelas (a) y (b) muestran el tiempo de convergencia y estabilización de los métodos de ajuste locales y de ajuste locales.132 0 50 100 100 150 200 0 20 40 60 80 100 120 140 160 Convergencetime (#Iterations) Número de usuarios Preferencias uniformes (a) Best-respuesta codiciosa (convergencia) codicioso (estabilización) 0 50 100 150 200 0 20 40 60 100 100 100120 140 160 Number of Users Correlated preferences (b) Best-response Greedy (convergence) Greedy (stabilization) 0 0.2 0.4 0.6 0.8 1 0 20 40 60 80 100 120 140 160 Efficiency Number of Users (c) Nash equilibrium Weight-proportional SocialÓptimo 0 0.2 0.4 0.6 0.8 1 0 20 40 60 80 100 120 140 160 Número de usuarios (D) Equilibrio de Nash Pesaje Proporciones Social 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 0 20 40 60 80 100 120 140 160 UtilityuniformityNúmero de usuarios (e) equilibrio NASH peso-proporción óptimo social 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.9 1 0 20 40 60 80 100 120 140 160 Número de usuarios (F) Equilibrio NASH Peso Proporción Social óptimo 0 0.2 0.4 0.6 0.8 0.8 0.8 0.8 0.6 0.6 0.6 0.6 0.6 0.6 0.6 0.6 0.6 0.6 0.6 0.6 0.6 0.6 0.6 0.81 0 20 40 60 80 100 120 140 160 Número de envidia de envidia de usuarios (g) Equilibrio de Nash Peso proporcional Optimo Social 0 0.2 0.4 0.6 0.8 1 0 20 40 60 80 100 120 140 160 Número de usuarios (H) Equilibrio NASH PROPORTALSocial Optimum Figura 2: Eficiencia, uniformidad de utilidad, envidia y tiempo de convergencia en función del número de usuarios bajo el modelo de paralelismo infinito, con preferencias uniformes y correlacionadas.n = 100. 133 0 0.2 0.4 0.6 0.8 1 0 20 40 60 80 100 Eficiencia Número de iteración Mejor respuesta codiciosa Figura 3: Nivel de eficiencia con el tiempo bajo el modelo de paralelismo infinito.Número de usuarios = 40. n = 100. El algoritmo de mejor respuesta converge en unas pocas número de iteraciones para cualquier número de usuarios. En contraste, el algoritmo de ajuste codicioso local no converge incluso dentro de 500 iteraciones cuando el número de usuarios es menor que 60, pero converge para un mayor número de usuarios. Creemos que para un pequeño número de usuarios, hay ciclos de dependencia entre los usuarios que evitan que el sistema convergue porque las decisiones de los usuarios afectan a otro usuario, cuyas decisiones afectan a otro usuario, etc. De todos modos, el método de ajuste codicioso local se estabiliza dentro de 100 iteraciones. La Figura 3 presenta la eficiencia con el tiempo para un sistema con 40 usuarios. Demuestra que si bien ambos métodos de ajuste alcanzan el mismo bienestar social, el algoritmo de mejor respuesta es más rápido. En el resto de este documento, nos referiremos al equilibrio (NASH), independientemente del método de ajuste utilizado para alcanzarlo. Eficiencia. La Figura 2 (c) y (d) presentan la eficiencia en función del número de usuarios. Presentamos la eficiencia en el equilibrio y utilizamos el óptimo social y los métodos de asignación estática de pesoproporcionado para la comparación. Social Optimum proporciona una asignación eficiente por definición. Para ambos modelos de preferencia de usuario, la eficiencia en el equilibrio es aproximadamente 0.9, independiente del número de usuarios, que es solo ligeramente peor que el óptimo social. La eficiencia en el equilibrio es de ≈ 50% de mejora sobre el método de asignación proporción de peso para preferencias uniformes, y una mejora de ≈ 30% para las preferencias correlacionadas. Justicia. La Figura 2 (e) y (f) presentan la uniformidad de la utilidad en función del número de usuarios, y las figuras (g) y (h) presentan la introducción de la envidia. Si bien el óptimo social produce una eficiencia perfecta, tiene mala equidad. El método de propiedad de peso logra la mayor equidad entre los tres métodos de asignación, pero la equidad en el equilibrio está cerca. La uniformidad de la utilidad es ligeramente mejor en el equilibrio bajo preferencias uniformes (> 0.7) que bajo preferencias correlacionadas (> 0.6), ya que cuando las preferencias de los usuarios están más alineadas, la felicidad de los usuarios es más probable que sea a expensas entre sí. Aunque la uniformidad de utilidad disminuye en el número de usuarios, sigue siendo razonable incluso para una gran cantidad de usuarios y se aplana en algún momento. En Social Optimum, la uniformidad de la utilidad puede ser infinitamente pobre, ya que a algunos usuarios no se les puede asignar recursos en absoluto. Lo mismo es cierto con respecto a la envidia de envidia. La diferencia entre las preferencias uniformes y correlacionadas se demuestra mejor en los resultados óptimos sociales. Cuando el número de usuarios es pequeño, puede ser posible satisfacer a todos los usuarios hasta cierto punto si sus preferencias no están alineadas, pero si están alineados, incluso con un número muy pequeño de usuarios, algunos usuarios no obtienen recursos, por lo tanto, ambas utilidadLa uniformidad y la envidia de la envidia van a cero. A medida que aumenta el número de usuarios, es casi imposible satisfacer a todos los usuarios independientemente de la existencia de correlación. Estos resultados demuestran la compensación entre los diferentes métodos de asignación. La eficiencia en el equilibrio es más baja que la óptima social, pero funciona mucho mejor con respecto a la equidad. La asignación de equilibrio es completamente libre de envidia bajo preferencias uniformes y casi sin envidia bajo preferencias correlacionadas.5.2 Paralelismo finito 0 50 100 100 150 200 0 10 20 30 40 50 60 70 80 90 ConvergenceTime (#iteraciones) Número de usuarios 5 máquinas/usuario 20 máquinas/usuario Figura 4: Tiempo de convergencia bajo el modelo de paralelismo finito.n = 100. 0.6 0.7 0.8 0.9 1 0 20 40 60 80 100 iteración de eficiencia Número 5-máquinas/usuario (40 usuarios) 20 máquinas/usuario (10 usuarios) Figura 5: nivel de eficiencia con el tiempo bajo el modelo de paralelismo finito con localAlgoritmo de búsqueda.n = 100. También consideramos el modelo de paralelismo finito y utilizamos el algoritmo de búsqueda local, como se describe en la Sección 4.2, para ajustar las ofertas de los usuarios. Nuevamente experimentamos con las distribuciones de preferencias uniformes y correlacionadas y no encontramos diferencias significativas en los resultados, por lo que presentamos los resultados de la simulación solo para la distribución uniforme. En nuestros experimentos, el algoritmo de búsqueda local se detiene rápidamente; generalmente descubre un máximo local dentro de dos iteraciones. Como se mencionó anteriormente, no podemos demostrar que un máximo local es el máximo global, pero nuestros experimentos indican que la heurística de búsqueda local conduce a una alta eficiencia.134 Tiempo de convergencia. Deje que ∆ denote el paralelismo límite que limita el número máximo de máquinas en las que puede ofertar cada usuario. Experimentamos con ∆ = 5 y ∆ = 20. En ambos casos, usamos 100 máquinas y variamos el número de usuarios. La Figura 4 muestra que el sistema no siempre converge, pero si lo hace, la convergencia ocurre rápidamente. La no convergencia ocurre cuando el número de usuarios está entre 20 y 40 para ∆ = 5, entre 5 y 10 para ∆ = 20. Creemos que la no convergencia es causada por una competencia moderada. Ninguna competencia permite que el sistema se equilibre rápidamente porque los usuarios no tienen que cambiar sus ofertas en reacción a los cambios en otras ofertas. La alta competencia también permite la convergencia porque la decisión de cada usuarios solo tiene un pequeño impacto en otros usuarios, por lo que el sistema es más estable y puede alcanzar gradualmente la convergencia. Sin embargo, cuando hay una competencia moderada, las decisiones de los usuarios pueden causar cambios dramáticos en las decisiones de otros y causar grandes fluctuaciones en las ofertas. En ambos casos de no convergencia, la relación de competidores por máquina, δ = m × ∆/n para uss y n máquinas, está en el intervalo [1, 2]. Aunque el sistema no converge en estos rangos malos, el sistema no logra y mantiene un alto nivel de eficiencia general después de algunas iteraciones (como se muestra en la Figura 5). Actuación. En la Figura 6, presentamos la eficiencia, la uniformidad de la utilidad y la envidia de envidia en el equilibrio de Nash para el modelo de paralelismo finito. Cuando el sistema no converge, medimos el rendimiento tomando el valor mínimo que observamos después de ejecutarse para muchas iteraciones. Cuando ∆ = 5, hay una caída de rendimiento, en particular con respecto a las métricas de equidad, en el rango entre 20 y 40 usuarios (donde no converge). Para un mayor número de usuarios, el sistema converge y logra un nivel más bajo de uniformidad de utilidad, pero un alto grado de eficiencia y envidia de envidia, similar a las del modelo de paralelismo infinito. Como se describió anteriormente, esto se debe a la relación de competencia que cae en el rango de cabeza a cabeza. Cuando el paralelismo unido es grande (∆ = 20), el rendimiento está más cerca del modelo de paralelismo infinito, y no observamos esta caída en el rendimiento.6. Trabajo relacionado Hay dos grupos principales de trabajos relacionados en la asignación de recursos: aquellos que incorporan un mecanismo económico y los que no lo hacen. Un enfoque no económico es la programación (encuestado por Pinedo [20]). Ejemplos de este enfoque son hacer cola en orden de primera llegada, por orden de llegada (FCFS), hacer cola utilizando el consumo de recursos de tareas (por ejemplo, [28]) y la programación utilizando la optimización combinatoria [19]. Todos estos suponen que los valores y el consumo de recursos de las tareas se informan con precisión, lo que no se aplica en presencia de usuarios estratégicos. Vemos la programación y la asignación de recursos como dos funciones separadas. La asignación de recursos divide un recurso entre los diferentes usuarios mientras la programación requiere una asignación dada y ordena los trabajos de los usuarios. Ejemplos del enfoque económico son el engendro [26]), el trabajo de Stoica, et al.[24]., El asignador de recursos del milenio [4], trabajo de Wellman, et al.[27], Bellagio [2]) y magnate [15]). Spawn y el trabajo de Wellman, et al.Utiliza una abstracción de reserva similar a la forma en que se asignan los asientos de la aerolínea. Desafortunadamente, las reservas tienen una alta latencia para adquirir recursos, a diferencia del esquema de anticipación de precio que consideramos. La compensación de los esquemas de anticipación de precio es que los usuarios tienen incertidumbre sobre la cantidad de los recursos que recibirán. Bellagio [3] utiliza el asignador centralizado de compartir. Share asigna recursos utilizando una subasta combinatoria centralizada que permite a los usuarios expresar preferencias con complementaridades. Resolver el problema de la subasta combinatoria de NP-NP proporciona una asignación óptima eficiente. El esquema de licencia previa que consideramos no opera explícitamente en las complementaridades, posiblemente pierda cierta eficiencia, pero también evita la complejidad y la sobrecarga de las subastas combinatorias. Ha habido varios análisis [10, 11, 12, 13, 23] de variaciones de esquemas de asignación de anticipación de precios en el contexto de la asignación de la capacidad de red para los flujos. Su metodología sigue al estudio de los juegos de congestión (potencial) [17, 22] al relacionar el equilibrio de Nash con la solución de un problema de optimización global (generalmente convexo). Pero esas técnicas ya no se aplican a nuestro juego porque modelamos a los usuarios que tienen presupuestos fijos y preferencias privadas para las máquinas. Por ejemplo, a diferencia de esos juegos, puede existir múltiples equilibrios de Nash en nuestro juego. Milchtaich [16] estudió juegos de congestión con preferencias privadas, pero la técnica en [16] es específica del juego de congestión.7. Conclusiones Este trabajo estudia el desempeño de un mecanismo basado en el mercado para grupos compartidos distribuidos utilizando métodos analáticos y de simulación. Mostramos que a pesar de los peores límites de los casos, el sistema puede alcanzar un alto nivel de rendimiento en el equilibrio de Nash en términos de métricas de eficiencia y justicia. Además, con algunas excepciones bajo el modelo de paralelismo finito, el sistema alcanza el equilibrio rápidamente utilizando el mejor algoritmo de respuesta y, cuando el número de usuarios no es demasiado pequeño, por el método de ajuste local codicioso. Si bien nuestro trabajo indica que el esquema de anticipación de precios puede funcionar bien para la asignación de recursos para grupos compartidos, hay muchas direcciones interesantes para el trabajo futuro. Una dirección es considerar funciones de utilidad más realistas. Por ejemplo, suponemos que no hay costo de paralelización, y no hay degradación del rendimiento cuando varios usuarios comparten la misma máquina. En la práctica, ambos supuestos pueden no ser correctos. Para ejemplos, el usuario debe copiar código y datos a una máquina antes de ejecutar su aplicación allí, y hay sobrecarga para multiplexar recursos en una sola máquina. Cuando el tamaño del trabajo es lo suficientemente grande y el grado de multiplexación es lo suficientemente bajo, probablemente podamos ignorar esos efectos, pero esos costos deben tenerse en cuenta para un modelado más realista. Otra suposición es que los usuarios tienen un trabajo infinito, por lo que cuantos más recursos puedan adquirir, mejor. En la práctica, los usuarios tienen trabajo finito. Un enfoque para abordar esto es modelar la utilidad de los usuarios de acuerdo con el tiempo para finalizar una tarea en lugar de la cantidad de recursos que recibe. Otra dirección es estudiar las propiedades dinámicas del sistema cuando los usuarios necesitan cambian con el tiempo, según algún modelo estadístico. Además de las preguntas habituales sobre los juegos repetidos, también sería importante comprender cómo los usuarios deben asignar sus presupuestos sabiamente con el tiempo para acomodar las necesidades futuras.135 0 0.2 0.4 0.6 0.8 1 0 20 40 60 80 100 120 140 160 Número de usuarios (a) Límite: 5 máquinas/eficiencia de usuario Utility Uniformity Envy-Freenness 0 0.2 0.4 0.6 0.8 1 0 10 20 30 30 50 60 70 80 90Número de usuarios (b) Límite: 20 máquinas/eficiencia del usuario Utility UNIFORITY Envy-Freenness Figura 6: Eficiencia, uniformidad de servicios públicos y envidia de envidia bajo el modelo de paralelismo finito.n = 100. 8. Agradecimientos Agradecemos a Bernardo Huberman, Lars Rasmusson, Eytan Adar y Moshe Babaioff por sus fructíferas discusiones. También agradecemos a los revisores anónimos por sus útiles comentarios.9. Referencias [1] http://planet-lab.org.[2] A. Auyoung, B. N. Chun, A. C. Snoeren y A. Vahdat. Asignación de recursos en infraestructuras informáticas distribuidas federadas. En Actas del primer taller sobre el sistema operativo y el soporte arquitectónico para la infraestructura de TI bajo demanda, 2004. [3] B. Chun, C. Ng, J. Albrecht, D. C. Parkes y A. Vahdat. Intercambios de recursos computacionales para la asignación de recursos distribuidos.2004. [4] B. N. Chun y D. E. Culler. Compartir recursos proporcionales basados en el mercado para grupos. Informe técnico CSD-1092, Universidad de California en Berkeley, División de Ciencias de la Computación, enero de 2000. [5] M. Feldman, K. Lai y L. Zhang. Un mecanismo de asignación de recursos de anticipación de precio para grupos compartidos distribuidos. Informe técnico, Arxiv, 2005. http://arxiv.org/abs/cs.dc/0502019.[6] D. Ferguson, Y. Yemimi y C. Nikolaou. Algoritmos microeconómicos para el equilibrio de carga en sistemas informáticos distribuidos. En la Conferencia Internacional sobre Sistemas de Computación Distribuido, páginas 491-499, 1988. [7] I. Foster y C. Kesselman. Globus: un kit de herramientas de infraestructura metacomputación. The International Journal of SuperComputer Aplications and High Performance Computing, 11 (2): 115-128, verano de 1997. [8] M. L. Fredman y R. E. Tarjan. Los montones de fibonacci y sus usos en algoritmos mejorados de optimización de red. Journal of the ACM, 34 (3): 596-615, 1987. [9] H. N. Gabow. Estructuras de datos para coincidencia ponderada y antepasados comunes más cercanos con vinculación. En Actas del primer Simposio ACM-SIAM anual sobre algoritmos discretos, páginas 434-443, 1990. [10] B. Hajek y S. Yang. Compradores estratégicos en un juego de oferta de suma para redes planas. Manuscrito, http: //tesla.csl.uiuc.edu/~hajek/papers/hajekyang.pdf, 2004. [11] R. Johari y J. N. Tsitsiklis. Pérdida de eficiencia en un juego de asignación de recursos de red. Matemáticas de la investigación de operaciones, 2004. [12] F. P. Kelly. La carga y el porcentaje de control de tráfico elástico. Transacciones europeas sobre telecomunicaciones, 8: 33-37, 1997. [13] F. P. Kelly y A. K. Maulloo. Control de tarifas en redes de comunicación: precios en la sombra, justicia proporcional y estabilidad. Operational Research Society, 49: 237-252, 1998. [14] H. W. Kuhn. El método húngaro para el problema de asignación. Res. Naval. Logis. Quart., 2: 83-97, 1955. [15] K. Lai, L. Rasmusson, S. Sorkin, L. Zhang y B. A. Huberman. Tycoon: una implementación de un sistema distribuido de asignación de recursos basado en el mercado. Manuscrito, http://www.hpl.hp.com/research/tycoon/papers_and_ presentaciones, 2004. [16] I. Milchtaich. Juegos de congestión con funciones de pago específicas del jugador. Juegos y comportamiento económico, 13: 111-124, 1996. [17] D. Monderer y L. S. Sharpley. Juegos potenciales. Juegos y comportamiento económico, 14: 124-143, 1996. [18] C. Papadimitriou. Algoritmos, juegos e Internet. En Actas del 33º STOC, 2001. [19] C. H. Papadimitriou y K. Steiglitz. Optimización combinatoria. Dover Publications, Inc., 1982. [20] M. Pinedo. Planificación. Prentice Hall, 2002. [21] O. Regev y N. Nisan. El mercado de palomitas de maíz: mercados en línea para recursos computacionales. En Actas de la Primera Conferencia Internacional sobre Economías de Información y Computación, páginas 148-157, 1998. [22] R. W. Rosenthal. Una clase de juegos que posee equilibrios Nash de estrategia pura. International Journal of Game Theory, 2: 65-67, 1973. [23] S. Sanghvi y B. Hajek. Asignación óptima de un bien divisible para compradores estratégicos. Manuscrito, http: //tesla.csl.uiuc.edu/~hajek/papers/optdivisible.pdf, 2004. [24] I. Stoica, H. Abdel-Wahab y A. Pothen. Un programador microeconómico para computadoras paralelas. En Actas del taller sobre estrategias de programación de empleo para el procesamiento paralelo, páginas 122-135, abril de 1995. [25] H. R. Varian. Equidad, envidia y eficiencia. Journal of Economic Theory, 9: 63-91, 1974. [26] C. A. Waldspurger, T. Hogg, B. A. Huberman, J. O. Kephart y S. Stornetta. Spawn: una economía computacional distribuida. IEEE Transactions on Software Engineering, 18 (2): 103-117, febrero de 1992. [27] M. P. Wellman, W. E. Walsh, P. R. Wurman y J. K. Mackie-Mason. Protocolos de subastas para la programación descentralizada. Juegos y comportamiento económico, 35: 271-303, 2001. [28] A. Wierman y M. Harchol-Balter. Clasificación de políticas de programación con respecto a la injusticia en un m/gi/1. En Actas de la Conferencia ACM Sigmetrics 2003 sobre medición y modelado de sistemas informáticos, 2003. [29] L. Zhang. Sobre la eficiencia y la justicia de un juego de asignación de recursos presupuestarios fijos. Manuscrito, 2004. 136