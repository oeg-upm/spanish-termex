Encontrar equilibrios en grandes juegos secuenciales de información imperfecta ∗ Andrew Gilpin Departamento de Ciencias de la Computación Carnegie Mellon University Pittsburgh, PA, EE. UU. Gilpin@cs.cmu.edu tuomas de Departamento de Ciencias de la Computación Carnegie Mellon University Pittsburgh, PA, EE. UU. Sandholm@cs.cmu.edu.edu.Resumen Encontrar un equilibrio de un juego extenso de información imperfecta es un problema fundamental en la teoría de juegos computacionales, pero las técnicas actuales no se escala a juegos grandes. Para abordar esto, presentamos el isomorfismo del juego ordenado y la transformación de abstracción isomórfica del juego ordenado relacionado. Para un juego secuencial de información imperfecta de múltiples jugadores con acciones observables y un espacio de señal ordenado, demostramos que cualquier equilibrio de Nash en un juego más pequeño abstracto, obtenido por una o más aplicaciones de la transformación, puede convertirse fácilmente en un equilibrio NASH enel juego original. Presentamos un algoritmo, Gameshrink, para abstraer el juego usando nuestro isomorfismo exhaustivamente. Su complejidad es ˜o (n2), donde n es el número de nodos en una estructura que llamamos el árbol de señal. No es más grande que el árbol de juego, y en los juegos no triviales es drásticamente más pequeño, por lo que Gameshrink tiene tiempo y complejidad espacial sublineal en el tamaño del árbol de juego. Usando Gameshrink, encontramos un equilibrio para un juego de póker con 3.100 millones de nodos más de cuatro órdenes de magnitud más que en el juego de póker más grande resuelto anteriormente. Discutimos varias aplicaciones de comercio electrónico para Gameshrink. Para abordar los juegos aún más grandes, introducimos métodos de aproximación que no preservan el equilibrio, pero sin embargo, el rendimiento (ex post) se puede probar estrategias cercanas a las óptimas. Categorías y descriptores de sujetos: I.2 [Inteligencia artificial], F. [Teoría de la computación], J.4 [Ciencias Sociales y del Comportamiento]: Economía. Términos generales: algoritmos, economía, teoría.1. Introducción en entornos con más de un agente, un resultado de los agentes generalmente se ve afectado por las acciones de los otros agentes. En consecuencia, la acción óptima de un agente puede depender de los demás. La teoría de juegos proporciona un marco normativo para analizar tales situaciones estratégicas. En particular, proporciona conceptos de solución que definen qué comportamiento racional es en tales entornos. El concepto de solución más famoso e importante es el de equilibrio de Nash [36]. Es un perfil de estrategia (una estrategia para cada agente) en el que ningún agente tiene un incentivo para desviarse a una estrategia diferente. Sin embargo, para que el concepto esté operativo, necesitamos técnicas algorítmicas para encontrar un equilibrio. Los juegos se pueden clasificar como juegos de información perfecta o información imperfecta. Chess y Go son ejemplos de los primeros y, hasta hace poco, la mayoría de los juegos de juego han estado en juegos de este tipo. Para calcular una estrategia óptima en un juego de información perfecta, un agente atraviesa el árbol de juego y evalúa nodos individuales. Si el agente puede atravesar todo el árbol de juego, simplemente calcula una estrategia óptima de abajo hacia arriba, utilizando el principio de inducción hacia atrás.1 En términos informáticos, esto se realiza utilizando una búsqueda Minimax (a menudo junto con αβ-poda para reducir el tamaño del árbol de búsqueda y, por lo tanto, mejorar la velocidad). La búsqueda Minimax se ejecuta en tiempo lineal en el tamaño del árbol de juego.2 La característica diferenciadora de los juegos de información imperfecta, como el póker, es que no son completamente observables: cuando es un recurso de agentes para moverse, ella no tiene accesoa toda la información sobre el mundo. En tales juegos, la decisión de qué hacer en un momento en el tiempo generalmente no se puede tomar de manera óptima sin considerar las decisiones en todos los demás puntos (incluidas las de otros caminos de juego) porque esas otras decisiones afectan las probabilidades de estar en diferentes estadosen el momento actual. Por lo tanto, los algoritmos para juegos de información perfectos no resuelven juegos de información imperfecta. Para juegos secuenciales con información imperfecta, uno podría intentar encontrar un equilibrio utilizando la forma normal (matriz), donde cada plan de contingencia del agente es una estrategia pura para el agente.3 Desafortunadamente (incluso si las estrategias equivalentes 1 realmente producen una solución de soluciónEso satisface no solo el concepto de solución de equilibrio de Nash, sino un concepto de solución más fuerte llamado Subgame Perfect Nash Equilibrio [45]. 2 Este tipo de algoritmo todavía no se escala en árboles enormes (como en el ajedrez o GO), sino la jugada de juego efectivaLos agentes se pueden desarrollar incluso entonces mediante la evaluación de nodos intermedios utilizando una evaluación heurística y luego tratando esos nodos como hojas. 3 an -equilibrio en un juego de forma normal con cualquier 160 se reemplazan por una sola estrategia [27]) Esta representación es generalmente exponencial enEl tamaño del árbol de juego [52]. Al observar que uno necesita considerar solo secuencias de movimientos en lugar de estrategias puras [41, 46, 22, 52], uno llega a una representación más compacta, la forma de secuencia, que es lineal en el tamaño del árbol de juego.4 paraJuegos de 2 jugadores, hay una formulación de programación lineal de tamaño polinómico (en el tamaño del árbol de juego) (complementariedad lineal en el caso no cero) basado en la forma de secuencia de tal manera que las estrategias para los jugadores 1 y 2 corresponden aVariables primarias y duales. Por lo tanto, el equilibrio de los juegos de 2 jugadores de tamaño razonable se puede calcular utilizando este método [52, 24, 25] .5 Sin embargo, este enfoque todavía produce enormes problemas de optimización (insoluble) para muchos juegos del mundo real, como el póker.1.1 Nuestro enfoque En este documento, adoptamos un enfoque diferente para abordar el difícil problema de cálculo de equilibrio. En lugar de desarrollar un método de búsqueda de equilibrio per se, desarrollamos una metodología para abstraer automáticamente los juegos de tal manera que cualquier equilibrio en el juego más pequeño (abstracto) corresponde directamente a un equilibrio en el juego original. Por lo tanto, al calcular un equilibrio en el juego más pequeño (usando cualquier algoritmo de búsqueda de equilibrio disponible), podemos construir un equilibrio en el juego original. La motivación es que un equilibrio para el juego más pequeño se puede calcular drásticamente más rápido que para el juego original. Con este fin, presentamos juegos con señales ordenadas (Sección 2), una amplia clase de juegos que tiene suficiente estructura que podamos explotar para fines de abstracción. En lugar de operar directamente en el árbol de juego (algo que encontramos técnicamente desafiante), en su lugar presentamos el uso de filtros de información (Sección 2.1), que cubre la información que recibe cada jugador. Se utilizan en nuestro algoritmo de análisis y abstracción. Al operar solo en el espacio de los filtros, podemos mantener intacta la estructura estratégica del juego, al tiempo que abstrae los detalles del juego de una manera sin pérdidas desde la perspectiva del hallazgo de equilibrio. Presentamos el isomorfismo del juego ordenado para describir situaciones estratégicamente simétricas y la transformación de abstracción isomórfica del juego ordenado para adquirir tales simetrías (Sección 3). Como nuestro principal resultado de equilibrio, tenemos lo siguiente: el número constante de agentes se puede construir en el tiempo cuasipolinomial [31], pero encontrar un equilibrio exacto es complete PPAD incluso en un juego de 2 jugadores [8]. El algoritmo más frecuente para encontrar un equilibrio en un juego de 2 agentes es Lemke-Howson [30], pero toma exponencialmente muchos pasos en el peor de los casos [44]. Para una encuesta de cálculo de equilibrio en juegos de 2 jugadores, ver [53]. Recientemente, se han demostrado que los algoritmos de detección de equilibrio que enumeran los soportes (es decir, conjuntos de estrategias puras que se juegan con probabilidad positiva) en muchos juegos [40], y se han desarrollado algoritmos eficientes de programación de enteros mixtos que buscan en el espacio de soportes [43 [43 [43] Para más de dos jugadores, se han propuesto muchos algoritmos, pero actualmente solo escalan a juegos muy pequeños [19, 34, 40].4 También hubo técnicas tempranas que capitalizaron de diferentes maneras sobre el hecho de que en muchos juegos la gran mayoría de las estrategias puras no se juegan en equilibrio [54, 23].5 Recientemente, este enfoque también se extendió para manejar los equilibrios secuenciales de la computación [26] [35]. Teorema 2 Sea γ un juego con señales ordenadas, y sea F un filtro de información para γ. Sea F un filtro de información construido a partir de F mediante una aplicación de la transformación de abstracción isomórfica del juego ordenado, y sea un perfil de estrategia de equilibrio NASH del juego inducido γf (es decir, el juego γ usando el filtro F). Si σ se construye utilizando las estrategias correspondientes de σ, entonces σ es un equilibrio NASH de γf. La prueba del teorema utiliza una caracterización equivalente de los equilibrios de Nash: σ es un equilibrio de Nash si y solo si existen creencias μ (creencias de jugadores sobre información desconocida) en todos los puntos del juego accesibles por σ de modo que σ es secuencialmente racional (es decir, es decir,, una mejor respuesta) dada μ, donde μ se actualiza usando la regla Bayes. Luego podemos usar el hecho de que σ es un equilibrio de Nash para mostrar que σ es un equilibrio de Nash considerando solo propiedades locales del juego. También damos un algoritmo, Gameshrink, para abstraer el juego usando nuestro isomorfismo exhaustivamente (Sección 4). Su complejidad es ˜o (n2), donde n es el número de nodos en una estructura que llamamos el árbol de señal. No es más grande que el árbol de juego, y en los juegos no triviales es drásticamente más pequeño, por lo que Gameshrink tiene tiempo y complejidad espacial sublineal en el tamaño del árbol de juego. Presentamos varias mejoras de velocidad algorítmicas y de estructura de datos relacionadas (Sección 4.1), y demostramos cómo una simple modificación a nuestro algoritmo produce un algoritmo de aproximación (Sección 5).1.2 Aplicaciones de comercio electrónico Los juegos secuenciales de información imperfecta son ubicuos, por ejemplo, en negociación y en subastas. A menudo, los aspectos del conocimiento de los jugadores no son pertinentes para decidir qué acción debe tomar el jugador en un punto dado del juego. En el extremo trivial, algunos aspectos del conocimiento de los jugadores nunca son pertinentes (por ejemplo, ya sea que esté lloviendo o no no tenga relación con la estrategia de licitación en una subasta de arte), y tales aspectos pueden quedarse completamente fuera de la especificación del modelo. Sin embargo, algunos aspectos pueden ser pertinentes en ciertos estados del juego, mientras que no son pertinentes en otros estados, y por lo tanto no pueden dejarse fuera del modelo por completo. Además, puede ser muy no obvio qué aspectos son pertinentes en los que los estados del juego. Nuestro algoritmo descubre automáticamente qué aspectos son irrelevantes en diferentes estados y elimina esos aspectos del juego, lo que resulta en una representación del juego más compacta y equivalente. Un área de aplicación amplia que tiene esta propiedad es la negociación secuencial (potencialmente sobre múltiples temas). Otra amplia área de aplicación son las subastas secuenciales (potencialmente sobre múltiples bienes). Por ejemplo, en aquellos estados de una subasta de 1 objeto donde el postor A puede inferir que su valoración es mayor que la del Bidder B, el Licitante A puede ignorar toda su información sobre las señales BS, aunque esa información sería relevante para inferir BS exactavaluación. Además, en algunos estados de la subasta, a un postor podría no importarle qué otros postores tienen qué valoraciones, pero se preocupan por qué valoraciones tienen los otros postores en conjunto (ignorando sus identidades). Muchos mecanismos de subasta y negociación secuenciales de grito abierto se encuentran dentro del modelo de juego estudiado en este documento (especificado en detalle más adelante), al igual que otros juegos en el comercio electrónico, como secuencias de ofertas de Take-it O-Leave-It [42] Nuestras técnicas no son de ninguna manera específicas para una aplicación. El experimento principal que presentamos en este documento es en 161 un juego recreativo. Elegimos un juego de póker particular como problema de referencia porque produce un árbol de juego extremadamente complicado y enorme, es un juego de información imperfecta, se especifica completamente como un juego (y los datos están disponibles), y se ha publicado comoUn problema de desafío de otros [47] (hasta donde sabemos, no se han propuesto instancias de problemas de desafío para las aplicaciones de comercio electrónico que requieren resolver juegos secuenciales).1.3 Rhode Island Holdem Poker Poker es un juego de cartas enormemente popular jugado en todo el mundo. La Serie Mundial de Póker de 2005 tenía más de $ 103 millones de dólares en premios totales, incluidos $ 56 millones para el evento principal. Cada vez más, los jugadores de póker compiten en casinos en línea, y las estaciones de televisión transmiten regularmente torneos de póker. El póker ha sido identificado como un área de investigación importante en la IA debido a la incertidumbre derivada de las cartas de oponentes, las acciones futuras de los oponentes y los movimientos casuales, entre otras razones [5]. Casi desde la fundación de los campos, la teoría del juego se ha utilizado para analizar diferentes aspectos del póker [28;37;3;51, pp. 186-219]. Sin embargo, este trabajo se limitó a pequeños juegos que podrían resolverse a mano. Más recientemente, los investigadores de IA han estado aplicando el poder computacional del hardware moderno para calcular estrategias basadas en la teoría de juegos para juegos más grandes. Koller y Pfeffer determinaron las soluciones a los juegos de póker con hasta 140,000 nodos utilizando el formulario de secuencia y la programación lineal [25]. Se han desarrollado aproximaciones a gran escala [4], pero esos métodos no proporcionan ninguna garantía sobre el rendimiento de las estrategias calculadas. Además, las aproximaciones fueron diseñadas manualmente por un experto humano. Nuestro enfoque produce un mecanismo de abstracción automatizado junto con garantías teóricas sobre el rendimiento de las estrategias. Rhode Island Holdem fue inventado como un Bed de Test Bed para el juego computacional [47]. Fue diseñado para que fuera similar en estilo a Texas Holdem, pero no tan grande que la necesidad de estrategias razonablemente inteligentes sería imposible.(Las reglas de Rhode Island Holdem, así como una discusión de cómo Rhode Island Holdem puede modelarse como un juego con señales ordenadas, es decir, encaja en nuestro modelo, está disponible en una versión extendida de este documento [13].) Aplicamos las técnicas desarrolladas en este documento para encontrar una solución exacta (Minax) a Rhode Island Holdem, que tiene un árbol de juego superior a 3.1 mil millones de nodos. La aplicación del formulario de secuencia a Rhode Island Holdem directamente sin abstracción produce un programa lineal con 91,224,226 filas y el mismo número de columnas. Esto es demasiado grande para los algoritmos de programación lineal (actual) para manejar. Utilizamos nuestro algoritmo Gameshrink para reducir esto con una abstracción sin pérdidas, y produjo un programa lineal con 1,237,238 filas y columnas con 50,428,638 coeficientes no cero. Luego aplicamos la eliminación iterada de estrategias dominadas, lo que redujo aún más a 1,190,443 filas y 1,181,084 columnas.(Aplicar la eliminación iterada de estrategias dominadas sin Gameshrink produjo 89,471,986 filas y 89,121,538 columnas, que aún habrían sido prohibitivamente grandes para resolver). Gameshrink requería menos de un segundo para realizar la reducción (es decir, calcular todas las transformaciones de abstracción isomórficas del juego ordenado). Usando un IBM EServer P5 570 de 1.65 GHz con 64 gigabytes de RAM (el solucionador de programa lineal realmente necesitaba 25 gigabytes), lo resolvimos en 7 días y 17 horas usando el método de barrera de punto interior de la versión Cplex 9.1.2. Recientemente demostramos nuestro óptimo jugador de Rhode Island Holdem Poker en la conferencia AAAI-05 [14], y está disponible para jugar en línea en http://www.cs.cmu.edu/ ~ gilpin/gsi.html. Mientras que otros han trabajado en programas de computadora para jugar Rhode Island Holdem [47], no se ha encontrado una estrategia óptima antes. Este es el juego de póker más grande resuelto hasta la fecha en más de cuatro órdenes de magnitud.2. Juegos con señales ordenadas que trabajamos con una clase de juegos ligeramente restringida, en comparación con la generalidad completa de la forma extensa. Esta clase, que llamamos juegos con señales ordenadas, está altamente estructurada, pero aún lo suficientemente general como para capturar una amplia gama de situaciones estratégicas. Un juego con señales ordenadas consiste en un número finito de rondas. Dentro de una ronda, los jugadores juegan un juego en un árbol dirigido (el árbol puede ser diferente en diferentes rondas). La única incertidumbre que enfrentan los jugadores provienen de señales privadas que los otros jugadores han recibido y de las señales futuras desconocidas. En otras palabras, los jugadores observan las acciones de los demás, pero potencialmente no son acciones de naturaleza. En cada ronda, puede haber señales públicas (anunciadas a todos los jugadores) y señales privadas (comunicadas confidencialmente a los jugadores individuales). Para simplificar, suponemos que es el caso en la mayoría de los juegos recreativos, que dentro de cada ronda, el número de señales privadas recibidas es la misma entre los jugadores (esto probablemente podría relajarse). También suponemos que las acciones legales que tiene un jugador son independientes de las señales recibidas. Por ejemplo, en el póker, las acciones de apuestas legales son independientes de las tarjetas recibidas. Finalmente, la suposición más fuerte es que hay un orden parcial sobre conjuntos de señales, y los pagos están aumentando (no necesariamente estrictamente) en estas señales. Por ejemplo, en el póker, este orden parcial corresponde exactamente a la clasificación de las manos de la tarjeta. Un juego con señales ordenadas es una tupla γ = i, g, l, θ, κ, γ, p ,, ω, u donde: 1. I = {1 ,..., n} es un conjunto finito de jugadores.2. G = G1 ,..., GR, GJ = `V J, EJ ´, es una colección finita de árboles dirigidos finitos con nodos v j y bordes EJ. Deje que ZJ denote los nodos de hoja de GJ y que NJ (V) denote los vecinos salientes de V ∈ V J. GJ es el juego escénico para la ronda j.3. L = l1 ,..., LR, LJ: V J \ ZJ → I Indica qué jugador actúa (elige un borde saliente) en cada nodo interno en la ronda j.4. Θ es un conjunto finito de señales.5. κ = κ1 ,..., κR y γ = γ1 ,..., γr son vectores de enteros no negativos, donde κJ y γj denotan el número de señales públicas y privadas (por jugador), respectivamente, reveladas en la ronda j. Cada señal θ ∈ θ solo puede revelarse una vez, y en cada ronda cada jugador recibe el mismo número de señales privadas, por lo que requerimos PR J = 1 κJ + Nγj ≤ | θ |. La información pública revelada en la redonda J es αJ ∈ θκJ y la información pública revelada en todas las redondas a través de la redonda J es ˜αJ = `α1 ,..., αJ ´. La información privada revelada al jugador i ∈ I en la redonda j es βj i ∈ θγj y la información privada revaluada al jugador i ∈ I en todas las redondeo a la redonda j es ˜βj i = `β1 I ,..., βJ I ´. 162 también escribimos ˜βJ = ˜βJ 1 ,..., ˜βJ n para representar toda la información privada a través de la redonda J, y ~ J I, ˜βJ −i = ˜βJ 1 ,..., ˜βJ I - 1, ˜β J I, ˜βJ I+1 ,..., ˜βJ n es ˜βJ con ˜βJ I reemplazado con ˜β J I. Se dice que la información total revelada a través de la ronda J, ˜αJ, ˜βJ, es legal si no se repiten señales.6. P es una distribución de probabilidad sobre θ, con p (θ)> 0 para todos θ ∈ θ. Las señales se extraen de θ según P sin reemplazo, por lo que si x es el conjunto de señales ya reveladas, entonces p (x | x) = (p (x) p y /∈X P (y) si x /∈ X 0Si x ∈ X. 7. es un orden parcial de subconjuntos de θ y se define para al menos aquellos pares requeridos por u. 8. Ω: rs j = 1 zj → {over, continuar} es una asignación de nodos terminales dentro de unJuego de escenario a uno de dos valores: en cuyo caso el juego termina, o continúa, en cuyo caso el juego continúa a la siguiente ronda. Claramente, requerimos ω (z) = para todos z ∈ Zr. Tenga en cuenta que ω es independiente de las señales. Deje ωj sobre = {z ∈ Zj |Ω (z) = over} y ωj cont = {z ∈ Zj |ω (z) = continuar}.9. u = (u1, ..., ur), uj: j - 1 k = 1 Ωk cont × ωj sobre × j k = 1 θκk × n i = 1 j k = 1 θγk → rn es una función de utilidad tal para cada uno para cada uno para cada uno.j, 1 ≤ j ≤ r, por cada i ∈ I, y para cada ˜z ∈ J - 1 k = 1 ωk cont × ωj, al menos una de las siguientes dos condiciones se mantiene: (a) la utilidad es la señal independiente:Uj I (˜z, ϑ) = UJ I (˜z, ϑ) para todos los legales ϑ, ϑ ∈ J K = 1 θκK × N i = 1 J K = 1 θγK.(b) se define para todas las señales legales (˜αJ, ˜βJ I), (˜αJ, ˜β J I) a través de la redonda J y una utilidad de los jugadores está aumentando en sus señales privadas, todo lo demás igual: ˜αJ, ˜βJ I˜αj, ˜β J I = ⇒ Ui ˜z, ˜αJ, ˜βJ I, ˜βJ −i ≥ UI ˜z, ˜αJ, ˜β J I, ˜βJ −I. Usaremos el término juego con señales ordenadas y el término juego ordenado indistintamente.2.1 Filtros de información En esta subsección, definimos un filtro de información para los juegos ordenados. En lugar de revelar completamente una señal (ya sea pública o privada) a un jugador, la señal pasa por primera vez a través de este filtro, que genera una señal gruesa al jugador. Al variar el filtro aplicado a un juego, podemos obtener una amplia variedad de juegos mientras mantiene intacto el espacio de acción subyacente del juego. Usaremos esto al diseñar nuestras técnicas de abstracción. Formalmente, un filtro de información es el siguiente. Sea γ = I, G, L, θ, κ, γ, P, ω, U sea un juego ordenado. Deje que SJ ⊆ J K = 1 θκK × J K = 1 θγk sea el conjunto de señales legales (es decir, sin señales repetidas) para un jugador a través de la ronda J. Un filtro de información para γ es una colección F = F1 ,..., Fr donde cada FJ es una función FJ: SJ → 2SJ de modo que cada una de las siguientes condiciones se mantenga: 1. (Verdad) (˜J, ˜βJ I) ∈ FJ (˜αJ, ˜βJ I) para todos los legales (˜αJ, ˜βJ I).2. (Independencia) El rango de FJ es una partición de SJ.3. (Preservación de la información) Si dos valores de una señal se distinguen en la Ronda K, entonces se distinguen FPR cada Ronda J> K.Sea MJ = PJ L = 1 κL +γL. Requerimos que para todos los legales (θ1, ..., θmk, ..., θmj) ⊆ θ y (θ1, ..., θmk, ..., θmj) ⊆ θ: (θ1, .., θmk) /∈ Fk (θ1, ..., θmk) = ⇒ (θ1, ..., θmk, ..., θmj) /∈ Fj (θ1, ..., Θmk, ..., θmj). Un juego con señales ordenadas γ y un filtro de información F para γ define un nuevo juego γf. Nos referimos a juegos como juegos ordenados filtrados. Nos quedamos con el juego original si usamos el filtro de identidad FJ ˜αJ, ˜βJ i = n ˜αj, ˜βj i o. Tenemos el siguiente resultado simple (pero importante): Proposición 1. Un juego ordenado filtrado es un juego extenso que satisface el recuerdo perfecto. Una prueba simple procede construyendo un juego de formulario extenso directamente desde el juego ordenado, y demostrando que satisface el recuerdo perfecto. Al determinar los pagos en un juego con señales filtradas, tomamos el promedio sobre todas las señales reales en la clase filtrada, ponderada por la probabilidad de que ocurra cada señal real.2.2 Estrategias y equilibrio de Nash ahora estamos listos para definir estrategias de comportamiento en el contexto de los juegos ordenados filtrados. Una estrategia de comportamiento para el jugador I en la redonda J de γ = I, G, L, θ, κ, γ, P, ω, U con filtro de información F es una distribución de probabilidad sobre posibles acciones, y se define para cada jugador I,Cada ronda j, y cada v ∈ V j \ zj para lj (v) = i: σj i, v: j - 1 k = 1 Ωk cont × rango fj → Δ n w ∈ V j |(v, w) ∈ Ej o.(Δ (x) es el conjunto de distribuciones de probabilidad en un conjunto finito X.) Una estrategia de comportamiento para el jugador I en la redonda j es σj i = (σj i, v1, ..., σj i, vm) para cada vk ∈ V j \ zj donde lj (vk) = i. Una estrategia de comportamiento para el jugador I en γ es σi = `σ1 I ,..., σr I ´. Un perfil de estrategia es σ = (σ1, ..., σn). Un perfil de estrategia con σi reemplazado por σi es (σi, σ - i) = (σ1, ..., σi - 1, σi, σi+1, ..., σn). Por un abuso de notación, diremos que el jugador que recibe una recompensa esperada de la interfaz de usuario (σ) cuando todos los jugadores están jugando el perfil de estrategia σ. La estrategia σi se dice que es el jugador es la mejor respuesta a σ - I si para todas las demás estrategias σi para el jugador I tenemos ui (σi, σ - i) ≥ ui (σi, σ - i).σ es un equilibrio de Nash si, para cada jugador I, σi es una mejor respuesta para σ -I. Siempre existe un equilibrio de Nash en juegos finitos de forma extensa [36], y uno existe en estrategias de comportamiento para juegos con un retiro perfecto [29]. Usando estas observaciones, tenemos el siguiente corolario a la Proposición 1: 163 Corolario 1. Para cualquier juego ordenado filtrado, existe un equilibrio de Nash en estrategias de comportamiento.3. Abstracciones de preservación de equilibrio En esta sección, presentamos nuestra técnica principal para reducir el tamaño de los juegos. Comenzamos definiendo un árbol de señal filtrado que representa todos los movimientos de posibilidades en el juego. Los bordes en negrita (es decir, los dos primeros niveles del árbol) en los árboles de juego en la Figura 1 corresponden a los árboles de señal filtrados en cada juego. Asociado con cada juego ordenado γ = I, G, L, θ, κ, γ, P ,, ω, U y Filtro de información F es un árbol de señal filtrado, un árbol dirigido en el que cada nodo corresponde a algunas señales reveladas (filtradas)y los bordes corresponden a revelar señales específicas (filtradas). Los nodos en el árbol de señal filtrado representan el conjunto de todas las señales filtradas reveladas posibles (públicas y privadas) en algún momento. Las señales públicas filtradas reveladas en la ronda J corresponden a los nodos en los niveles de κJ que comienzan en el nivel PJ - 1 K = 1 `κK + NγK ´ y las señales privadas reveladas en la redonda J corresponden a los nodos en los niveles de NγJ que comienzan en el nivel PJK = 1 κK + PJ - 1 K = 1 NγK. Denotamos a los niños de un nodo x como n (x). Además, asociamos pesos con los bordes correspondientes a la probabilidad de que el borde particular sea elegido dado que se alcanzó a su padre. En muchos juegos, hay ciertas situaciones en el juego que se puede considerar como estratégicamente equivalente a otras situaciones en el juego. Al fusionar estas situaciones juntas, es posible llegar a un juego más pequeño estratégicamente equivalente. Las siguientes dos definiciones formalizan esta noción a través de la introducción de la relación isomórfica del juego ordenado y la transformación de abstracción isomórfica del juego ordenado. Dos subárboles que comienzan en los nodos internos x e y de un árbol de señal filtrado se ordenan el juego isomórfica si x e y tienen el mismo padre y hay una biyección f: n (x) → n (y), de modo que para w ∈ N ((x) y v ∈ N (y), v = f (w) implica que los pesos en los bordes (x, w) y (y, v) son los mismos y los subárboles que comienzan en W y V se ordenan el juego isomórficos. Dos hojas (correspondientes a señales filtradas ϑ y ϑ hacia arriba a la ronda R) se ordenan el juego isomórfica si para todas ˜z ∈ R - 1 j = 1 ΩJ cont × ωr Over, ur (˜z, ϑ) = ur (˜z,ϑ). Sea γ = I, G, L, θ, κ, γ, P, ω, U sea un juego ordenado y sea F un filtro de información para γ. Sea ϑ y ϑ dos nodos donde los subárboles en el árbol de señal filtrado inducido correspondiente a los nodos ϑ y ϑ se ordenan el juego isomórficos, y ϑ y ϑ están en cualquier nivelpj - 1 k = 1 `κK + nγk ´ o pj k =1 κK + PJ - 1 K = 1 NγK para alguna ronda J. La transformación de abstracción isomórfica del juego ordenado se da creando un nuevo filtro de información F: F J ight, ˜βJ I = 8 <: FJ ˜αJ, ˜βJ I if ˜αJ, ˜J i /∈ ϑ ∪ ϑ ∪ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ϑ ∪ ϑ ϑ ∪ ϑ ϑif ˜αj, ˜βj i ∈ ϑ ∪ ϑ. La Figura 1 muestra la transformación de abstracción isomórfica del juego ordenado aplicada dos veces a un pequeño juego de póker. El Teorema 2, nuestro principal resultado de equilibrio, muestra cómo la transformación de abstracción isomórfica del juego ordenado puede usarse para calcular los equilibrios más rápido. Sea γ = I, G, L, θ, κ, γ, P, ω, U sea un juego ordenado y F sea un filtro de información para γ. Sea F un filtro de información construido a partir de F mediante una aplicación de la transformación de abstracción isomórfica del juego ordenado. Sea σ un equilibrio NASH del juego inducido γf. Si tomamos σj I, V ˜z, fj ˜αj, ˜βJ i = σ J I, V ˜z, F J ˜αJ, ˜βJ I, σ es un equilibrio NASH de γf. Para un juego de forma extensa, un sistema de creencias μ asigna una probabilidad para cada nodo de decisión x tal quep x∈H μ (x) = 1 para cada información establecida h.Un perfil de estrategia σ es secuencialmente racional en h Sistema de creencias dado μ si UI (σi, σ - i | h, μ) ≥ ui (τi, σ - i | h, μ) para todas las demás estrategias τi, donde i es el reproductorquien controla h.Un resultado básico [33, Proposición 9.C.1] que caracteriza los equilibrios de Nash dicta que σ es un equilibrio de Nash si y solo si hay un sistema de creencias μ tal que para cada información establecida H con PR (H | σ)> 0,Las siguientes dos condiciones tienen: (C1) σ es secuencialmente racional a H dado μ;y (c2) μ (x) = pr (x | σ) Pr (h | σ) para todos x ∈ H.Dado que σ es un equilibrio NASH de γ, existe tal sistema de creencias μ para γf. Usando μ, construiremos un sistema de creencias μ para γ y mostraremos que las condiciones C1 y C2 mantienen, lo que respalda a σ como un equilibrio de Nash. Cada uno de los conjuntos de información en alguna ronda J corresponde a señales filtradas FJ ˜α ∗ J, ˜β ∗ J I, Historia en las primeras rondas J - 1 (Z1, ..., Zj - 1) ∈ J - 1 K = 1ωk cont, e historia hasta ahora en la redonda J, v ∈ V j \ zj. Sea ˜z = (Z1, ..., Zj - 1, V) Representen todas las acciones del jugador que conducen a este conjunto de información. Por lo tanto, podemos especificar de manera única este conjunto de información utilizando la información FJ ˜α ∗ J, ˜β ∗ J I, ˜z. Cada nodo en un conjunto de información corresponde a las posibles señales privadas que han recibido los otros jugadores. Denota por ˜β algunos legales (FJ (˜αJ, ˜βJ 1), ..., FJ (˜αJ, ˜βJ i - 1), FJ (˜αJ, ˜βJ i+1), ..., FJ(˜αj, ˜βj n)). En otras palabras, existe (˜J, ˜βJ 1, ..., ˜βJ n) tal que (˜αJ, ˜βJ i) ∈ FJ (˜α ∗ J, ˜β ∗ J I), (˜αJ,˜βj k) ∈ Fj (˜αJ, ˜βJ K) para k = I, y no se repiten señales. Usando este conjunto de señales (˜αJ, ˜βJ 1, ..., ˜βJ n), que ˆβ denote (F J (˜αJ, ˜βJ 1), ..., F J (˜αJ, ˜βJi - 1), f j (˜αj, ˜βj i+1), ..., f j (˜αj, ˜βj n). (Abusaremos de la notación y escribiremos F j −i ˆβ = ˆβ). Ahora podemos calcular μ directamente de μ: μ ˆβ |FJ ˜αJ, ˜βJ I, ˜z = 8 >>>>>> <>>>>>>: μ ˆβ |F J ˜αJ, ˜βJ I, ˜z Si fj ˜αJ, ˜βJ I = F J, αJ, ˜βJ I o ˆβ = ˆβ P ∗ μ ˆβ |F j ˜αJ, ˜βJ I, ˜z si fj ˜αJ, ˜βJ i = f J, αJ, ˜βJ I y ˆβ = ˆβ 164 J1 J2 J2 K1 K1 K2 K2 C B B B B B B B B B B B B B B B C C B B B B B B C B C B B B B CC F B B Bf C B B B B F B F B C B C BF B F B B B B B B B B B B B B B B C F B B B B B B B B C F B B B B B B B C F B B B B B B B B F B B B C B B B B F B F B B 0 0 0 0-1 -1 -1 -1 -1 -1-1 -1-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1-1 -1 -1 -1 -1 -1 -10 0 0 0 0 0 0 0 0 -1 -2 -2 -2-1 -2 -2 -1 -1 -2 -2 -1 -2 -2 -2 1 2 2 1 2 2 1 2 2 2 2 2 2 J1 K1 K2 J1 J2 K2 J1 J2 K1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 22 2 2 2 2., J2 K1 K2 1 1 C B C F B B B BF C B B C BF B F B C B C B C B F B B B B B B B F B F B J1, J2 K1 K2 1 1 1 1 1 J1, J2 K2 J1, J2 K1 0 0 0-1 -1 -1 -1-1 -1 -1 -2 -2 -1 -1 -2 -2 2 2 2 2 2 2 -1 -1-1 -1 -1 0 0 0 1 2 2 -1 -1-1 -1 0 0 0 1 2 2 2C B B B F B F B -1 -10 0 0 C B B B F B F B -1 -1-1 -2 -2 -2 C B C BF B F B 0 0 0-1 -1 -1 C B C BF B F B J1, J2 J1, J2 J1, J2K1, K2K1, K2 K1, K2 -1 -1 1 2 2 2 2 2 2 2 {{J1, J2}, {K1, K2}} 1 1 1 1 1/4 1/4 1/4 1/4 1/3 1/3 1/3 1/3 1/3 1/3 1/3 1/3 1/3 1/3 1/3 1/3 1/4 1/41/2 1/3 1/3 1/3 1/32/3 1/32/3 1/2 1/2 1/3 2/3 2/3 1/3 Figura 1: Gameshrink aplicó a un pequeño juego de póker de cuatro cartas (dos jacks y dos reyes). Al lado de cada árbol de juego se encuentra el rango del filtro de información F. Las líneas punteadas denotan conjuntos de información, que están etiquetados por el jugador de control. Los círculos abiertos son nodos casuales con las probabilidades de transición indicadas. El nodo raíz es el nodo casual para la carta del jugador 1, y el siguiente nivel es para la carta del jugador 2S. El pago del jugador 2 al jugador 1 se da debajo de cada hoja. En este ejemplo, el algoritmo reduce el árbol de juego de 53 nodos a 19 nodos.donde p ∗ = PR (ˆβ | F J (˜αJ, ˜β J I)) PR (ˆβ | F J (˜αJ, ˜β J I))). Las siguientes tres afirmaciones muestran que μ como se calcula anteriormente admite σ como un equilibrio de Nash. Reclamación 1. μ es un sistema de creencias válido para γF. Para todas las configuraciones de información H con Pr (H | σ)> 0, μ (x) = PR (x | σ) Pr (H | σ) para todos x ∈ H.Reclamación 3. Para todos los conjuntos de información H con PR (H | σ)> 0, σ es secuencialmente racional en H dado μ. Las pruebas de reclamos 1-3 están en una versión extendida de este documento [13]. Por reclamos 1 y 2, sabemos que la condición C2 tiene. Por reclamo 3, sabemos que la condición C1 tiene. Por lo tanto, σ es un equilibrio de Nash.3.1 No trivialidad de generalizar más allá de este modelo Nuestro modelo no captura juegos secuenciales generales de información imperfecta porque está restringida de dos maneras (como se discutió anteriormente): 1) Existe una estructura especial que conecta las acciones del jugador y las acciones casuales (para uno,Se supone que los jugadores observan las acciones de los demás, pero las acciones de naturaleza pueden no ser observables públicamente), y 2) hay un orden común de señales. En esta subsección mostramos que eliminar cualquiera de estas condiciones puede hacer que nuestra técnica sea inválida. Primero, demostramos una falla al eliminar la primera suposición. Considere el juego en la Figura 2.6 Los nodos A y B están en el mismo conjunto de información, tienen el mismo nodo padre (casual), tienen subárboles isomórficos con los mismos pagos, y los nodos C y D también tienen propiedades estructurales similares. Al fusionar los subárboles que comienzan en A y B, obtenemos el juego a la derecha en la Figura 2. En este juego, la estrategia de equilibrio NASH de Player 1s es jugar a la izquierda. Pero en el juego original, el jugador 1 sabe que el nodo C nunca será alcanzado, por lo que debería jugar correctamente en ese conjunto de información.1/4 1/4 1/4 1/4 2 2 2 2 1 1 1 2 1 2 3 0 3 0 -10 10 1/2 1/4 1/4 2 2 2 2 1 1 2 3 0 3 0 A B 2 2 22 10-10 C D Figura 2: Ejemplo que ilustra la dificultad para desarrollar una teoría de las abstracciones de preservación de equilibrio para los juegos generales de forma extensa. Eliminar la segunda suposición (que las funciones de utilidad se basan en un orden común de señales) también puede causar falla. Considere un juego simple de tres tarjetas con un mazo que contiene dos Jacks (J1 y J2) y un Rey (K), donde la función de utilidad del jugador 1 se basa en el orden 6, agradecemos a Albert Xin Jiang por proporcionar este ejemplo.165 K J1 ∼ J2 Pero la función de utilidad del jugador 2 se basa en el orden J2 K J1. Es fácil verificar que en el juego abstraído (donde el jugador 1 trata a J1 y J2 como equivalente), el equilibrio Nash no corresponde a un equilibrio de Nash en el juego original.7 4. Gameshrink: un algoritmo eficiente para calcular las transformaciones de abstracción isomórficas ordenadas esta sección presenta un algoritmo, Gameshrink, para realizar las abstracciones. Solo necesita analizar el árbol de señal discutido anteriormente, en lugar de todo el árbol de juego. Primero presentamos una subrutina que usa Gameshrink. Es un programa dinámico para calcular la relación isomórfica del juego ordenado. Nuevamente, funciona en el árbol de la señal. ¿OrdenGameisomorphic?(Γ, ϑ, ϑ) 1. Si ϑ y ϑ tienen padres diferentes, entonces regrese falso.2. Si ϑ y ϑ son ambas hojas del árbol de señal: (a) si ur (ϑ | ˜z) = ur (ϑ | ˜z) para todos ˜z ∈ R - 1 j = 1 ΩJ cont × ωr, luego regreseverdadero.(b) De lo contrario, regrese falso.3. Cree un gráfico bipartito Gϑ, ϑ = (V1, V2, E) con V1 = N (ϑ) y V2 = N (ϑ).4. Para cada v1 ∈ V1 y V2 ∈ V2: si ordene elGameIsomórfica?(Γ, V1, V2) Crear borde (V1, V2) 5. Regrese verdadero si Gϑ, ϑ tiene una coincidencia perfecta;De lo contrario, devuelva falso. Al evaluar este programa dinámico de abajo hacia arriba, el algoritmo 1 determina, en el tiempo polinomio en el tamaño del árbol de señal, ya sea que cualquier par de nodos de misma profundidad de igual profundidad X e Y se ordenen el juego isomórfica. Podemos acelerar aún más este cálculo examinando solo los nodos con el mismo padre, ya que sabemos (del paso 1) que no se ordenan los nodos con diferentes padres isomórficos. La prueba en el paso 2 (a) se puede calcular en el tiempo O (1) consultando la relación a partir de la especificación del juego. ¿Cada llamada a OrderedGameisomorphic?Realiza como máximo un cálculo de coincidencia perfecto en un gráfico bipartito con nodos O (| θ |) y bordes O (| θ | 2) (recuerde que θ es el conjunto de señales). Usando el algoritmo de Ford-Fulkerson [12] para encontrar una coincidencia máxima, esto lleva tiempo o (| θ | 3). Sea S el número máximo de señales posiblemente reveladas en el juego (por ejemplo, en Rhode Island Holdem, S = 4 porque cada uno de los dos jugadores tiene una carta en la mano, además, hay dos cartas en la mesa). El número de nodos, n, en el árbol de señal es o (| θ | s). ¿El programa dinámico visita cada nodo en el árbol de señal, con cada visita que requiere o (| θ | 2) llamas al ORDENDGAMEISOMORFICO?rutina. Entonces, se necesita O (| θ | S | θ | 3 | θ | 2) = O (| θ | S+5) Tiempo para calcular toda la relación isomórfica del juego ordenado. Si bien esto es exponencial en el número de señales reveladas, ahora mostramos que es polinomio en el tamaño del árbol de señal y, por lo tanto, polinomio en el tamaño del árbol del juego 7, agradecemos a una persona anónima por este ejemplo.Porque el árbol de la señal es más pequeño que el árbol de juego. El número de nodos en el árbol de señal es N = 1 + SX I = 1 iy j = 1 (| θ | - j + 1) (cada término en la suma corresponde al número de nodos a una profundidad específica del árbol.) El número de hojas es sy j = 1 (| θ | - j + 1) = | θ |S ! ¡S!que es un límite inferior en el número de nodos. Para grande | θ |Podemos usar la relación `n k ´ ∼ nk k!Para obtener | θ |S ! ¡S!∼ „| θ | s s!" ¡S!= | Θ | S y, por lo tanto, el número de hojas en el árbol de señal es Ω (| θ | S). Por lo tanto, o (| θ | s+5) = o (n | θ | 5), lo que demuestra que podemos calcular la relación isomórfica ordenada en el polinomio de tiempo en el número de nodos, n, del árbol de señal. El algoritmo a menudo se ejecuta en el tiempo sublineal (y el espacio) en el tamaño del árbol de juego porque el árbol de la señal es significativamente más pequeño que el árbol de juego en la mayoría de los juegos no triviales.(Tenga en cuenta que la entrada al algoritmo no es un árbol de juego explícito, sino una especificación de las reglas, por lo que el algoritmo no necesita leer en el árbol de juego). En general, si un juego ordenado tiene rondas R, y cada juego de etapa de rondas tiene al menos b hojas no terminales, entonces el tamaño del árbol de señal es como máximo 1 BR del tamaño del árbol de juego. Por ejemplo, en Rhode Island Holdem, el árbol de juegos tiene 3.100 millones de nodos, mientras que el árbol de señales solo tiene 6.632,705. ¿Dado el ORDENDGAMEISOMORFICO?Rutina para determinar los isomorfismos del juego ordenado en un juego ordenado, estamos listos para presentar el algoritmo principal, Gameshrink. Inicializar F para ser el filtro de identidad para γ.2. Para j de 1 a R: para cada par de nodos hermanos ϑ, ϑ a cualquier nivelpj - 1 k = 1 `κk + nγk ´ o pj k = 1 κk + pj - 1 k = 1 nγk en el filtrado (según F) Árbol de señal: si ordeneGameIsomórfica?(Γ, ϑ, ϑ), entonces FJ (ϑ) ← FJ (ϑ) ← FJ (ϑ) ∪ FJ (ϑ).3. Salida F. Dada como entrada Un juego ordenado γ, Gameshrink aplica las ideas de reducción presentadas anteriormente de la manera más agresiva posible. Una vez que termina, no hay nodos contratibles (ya que compara cada par de nodos en cada nivel del árbol de señal), y genera el filtro de información correspondiente F. La corrección de Gameshrink sigue por una aplicación repetida del Teorema 2. Por lo tanto, tenemos el siguiente resultado: Teorema 3. GameShrink encuentra todos los isomorfismos de juegos ordenados y aplica las transformaciones de abstracción isomórficas de juego ordenadas asociadas. Además, para cualquier equilibrio de Nash, σ, del juego abstraído, el perfil de estrategia construido para el juego original a partir de σ es un equilibrio de Nash. El factor dominante en el tiempo de ejecución de Gameshrink está en la iteración RTH del bucle principal. Hay como máximo 166 `| θ |S ´ s!Nodos en este nivel, donde nuevamente tomamos S como el número máximo de señales posiblemente reveladas en el juego. Por lo tanto, el bucle interno se ejecuta o „` | θ |S ´ s!2 veces. Como se discutió en la próxima subsección, utilizamos una estructura de datos de la sindicato para representar el filtro de información F. Cada iteración del circuito interno posiblemente realiza una operación de unión en la estructura de datos;La realización de operaciones M en una estructura de datos de findir sindical que contiene elementos N toma O (α (m, n)) tiempo amortizado por operación, donde α (m, n) es la función inversa de ackermanns [1, 49] (que crece extremadamente lentamente lentamente lentamente). Por lo tanto, el tiempo total para Gameshrink es O „` | θ |S ´ s!2 α „` | θ |S ´ s!2, | θ | S ««. Por la desigualdad `n k ´ ≤ nk k!, esto es O `(| θ | S) 2 α` (| θ | S) 2, | θ | S ´´. Nuevamente, aunque esto es exponencial en S, es ˜o (N2), donde N es el número de nodos en el árbol de señal. Además, Gameshrink tiende a correr en el tiempo y espacio sublineario en el tamaño del árbol de juego porque el árbol de la señal es significativamente más pequeño que el árbol de juego en la mayoría de los juegos no triviales, como se discutió anteriormente.4.1 Mejoras de eficiencia Diseñamos varias técnicas de mejora de velocidad para Gameshrink, y todas ellas se incorporan a nuestra implementación. Una técnica es el uso de la estructura de datos de unión para almacenar el filtro de información F. Esta estructura de datos utiliza el tiempo casi lineal en el número de operaciones [49]. Inicialmente, cada nodo en el árbol de señalización es su propio conjunto (esto corresponde al filtro de información de identidad);Cuando se contraen dos nodos, se unen a un nuevo conjunto. Tras la terminación, las señales filtradas para el juego abstraído corresponden exactamente a los conjuntos de disjunto en la estructura de datos. Este es un método eficiente para grabar contracciones dentro del árbol de juego, y los requisitos de memoria son solo lineales en el tamaño del árbol de señal. Determinar si dos nodos están ordenados, el juego isomórfica requiere que determinemos si un gráfico bipartito tiene una coincidencia perfecta. Podemos eliminar algunos de estos cálculos mediante el uso de condiciones necesarias fáciles de controlar para la relación isomórfica del juego ordenado con Hold. Una de esas condiciones es verificar que los nodos tengan el mismo número de oportunidades que ser clasificados (según) más altos que, más bajo que y lo mismo que los oponentes. Podemos precomputar estas frecuencias para cada nodo de árbol de juego. Esto acelera sustancialmente Gameshrink, y podemos aprovechar esta base de datos en múltiples ejecuciones del algoritmo (por ejemplo, al intentar diferentes niveles de abstracción; ver la siguiente sección). Los índices para esta base de datos dependen de las señales privadas y públicas, pero no del orden en que se revelaron, y por lo tanto, dos nodos pueden tener la misma entrada de base de datos correspondiente. Esto hace que la base de datos sea significativamente más compacta.(Por ejemplo, en Texas Holdem, la base de datos se reduce en un factor `50 3 ´ '47 1 ´ '46 1 ´ /` 50 5 ´ = 20.) Almacenamos los histogramas en una base de datos bidimensional. La primera dimensión está indexada por las señales privadas, la segunda por las señales públicas. El problema de calcular el índice en (cualquiera de los dos) una de las dimensiones es exactamente el problema de calcular una biyección entre todos los subconjuntos de tamaño R de un conjunto de tamaño n y enteros en ˆ 0 ,..., `n r ´ - 1 ˜. Calculamos de manera eficiente esto utilizando los subconjuntos de orden colexicográfico [6]. Sea {c1 ,..., cr}, ci ∈ {0 ,..., n - 1}, denota las señales R y suponga que Ci <ci+1. Calculamos un índice único para este conjunto de señales de la siguiente manera: índice (c1, ..., cr) = pr i = 1 `ci i ´.5. Métodos de aproximación Algunos juegos son demasiado grandes para calcular un equilibrio exacto, incluso después de usar la técnica de abstracción presentada. Esta sección discute técnicas generales para calcular los perfiles de estrategia aproximadamente óptimos. Para un juego de dos jugadores, siempre podemos evaluar el peor rendimiento de una estrategia, proporcionando así una evaluación objetiva de la fortaleza de la estrategia. Para ilustrar esto, supongamos que sabemos la estrategia planificada del jugador 2 para algún juego. Luego podemos arreglar las probabilidades de las acciones de Jugador 2 en el árbol del juego como si fueran movimientos casuales. Luego, el jugador 1 se enfrenta a un problema de decisión de agente único, que se puede resolver de abajo, maximizando el pago esperado en cada nodo. Por lo tanto, podemos determinar objetivamente el rendimiento esperado del peor de los casos de la estrategia del jugador 2. Esto será más útil cuando queremos evaluar qué tan bien funciona una estrategia dada cuando sabemos que no es una estrategia de equilibrio.(Una variación de esta técnica también se puede aplicar en los juegos N-persona donde solo las estrategias de un jugador se mantienen solucionadas). Esta técnica proporciona garantías ex post sobre el peor rendimiento de una estrategia, y puede usarse independientemente del método que se utiliza para calcular las estrategias.5.1 Aproximaciones del espacio de estado Al modificar ligeramente el rind laspasiones, podemos obtener un algoritmo que produce árboles de juego aún más pequeños, a expensas de perder las garantías de equilibrio del Teorema 2. En lugar de requerir que los pagos en los nodos terminales coincidan exactamente, podemos calcular una multa que aumenta a medida que aumenta la diferencia en la utilidad entre dos nodos. Hay muchas formas en que la función de penalización podría definirse e implementarse. Una posibilidad es crear pesas de borde en los gráficos bipartitos utilizados en el Algoritmo 1, y luego, en lugar de requerir combinaciones perfectas en el gráfico no ponderado, requeriríamos coincidencias perfectas con bajo costo (es decir, solo considere dos nodos que se ordenan el juego isomórfica si elEl gráfico bipartito correspondiente tiene una coincidencia perfecta con costo por debajo de algún umbral). Por lo tanto, con este umbral como parámetro, tenemos una perilla para girar que en un extremo (umbral = 0) produce una abstracción óptima y en el otro extremo (umbral = ∞) produce un juego altamente abstraído (esto en efecto restringiría a los jugadorespara ignorar todas las señales, pero aún observando acciones). Esta perilla también engendra un algoritmo en cualquier momento. Uno puede resolver versiones cada vez menos abstractadas del juego y evaluar la calidad de la solución en cada iteración utilizando el método ex post discutido anteriormente.5.2 Aproximaciones algorítmicas En el caso de los juegos de dos jugadores de suma cero, el cálculo de equilibrio se puede modelar como un programa lineal (LP), que a su vez puede resolverse utilizando el método simplex. Este enfoque tiene características inherentes que podemos aprovechar en propiedades deseables en el contexto de la resolución de juegos. En el LP, las soluciones Primal corresponden a las estrategias del Jugador 2, y las soluciones duales corresponden a las estrategias del Jugador 1. Hay dos versiones del método simple: el Primal Simplex y el Dual Simplex. El Primal Simplex mantiene la viabilidad Primal y se realiza al encontrar mejores y mejores soluciones primarias hasta que el vector de solución dual sea factible, 167 en el cual se ha alcanzado la optimización. Análogamente, el Dual Simplex mantiene la doble viabilidad y procede al encontrar soluciones duales cada vez mejores hasta que el vector de solución primaria sea factible.(Se puede considerar que el método Dual Simplex está ejecutando el método Primal Simplex en el problema dual). Por lo tanto, los métodos Primal y Dual Simplex sirven como algoritmos en cualquier momento (para una abstracción dada) para los jugadores 2 y 1, respectivamente. En cualquier momento, pueden generar las mejores estrategias que se encuentran hasta ahora. Además, para cualquier solución factible al LP, podemos obtener límites de la calidad de las estrategias examinando las soluciones primarias y duales.(Al usar el método Primal Simplex, se pueden leer soluciones duales del Tableau LP). Cada solución factible del doble rendimiento de un límite superior en el valor óptimo del primal, y viceversa [9, p.57]. Por lo tanto, sin requerir un mayor cálculo, obtenemos límites más bajos en la utilidad esperada de la estrategia de cada agente contra el peor oponente de los agentes. Un problema con el método simplex es que no es un algoritmo primal-dual, es decir, no mantiene la viabilidad primaria y dual a lo largo de su ejecución.(De hecho, solo obtiene una viabilidad primaria y dual al final de la ejecución). En contraste, existen métodos de punto interior para la programación lineal que mantienen una viabilidad primitiva y dual durante toda la ejecución. Por ejemplo, muchos algoritmos de seguimiento de la ruta del punto interior tienen esta propiedad [55, cap.5]. Observamos que la ejecución de un método de programación lineal produce un método para encontrar -equilibrios (es decir, perfiles de estrategia en los que ningún agente puede aumentar su utilidad esperada en más que desviarse). También se puede usar un umbral en un criterio de terminación para usar el método como algoritmo en cualquier momento. Además, los métodos de punto interior en esta clase tienen el tiempo de ejecución del peor de los casos de tiempo polinómico, a diferencia del algoritmo Simplex, que toma exponencialmente muchos pasos en el peor de los casos.6. Se han introducido funciones de investigación relacionadas que transforman juegos extensos de forma [50, 11]. En contraste con nuestro trabajo, esos enfoques no fueron para hacer que el juego sea más pequeño y más fácil de resolver. El resultado principal es que un juego puede derivarse de otro por una secuencia de esas transformaciones si y solo si los juegos tienen la misma forma normal reducida pura. La forma normal reducida pura es el juego de forma extensa representada como un juego en forma normal donde se eliminan los duplicados de estrategias puras (es decir, las con pagos idénticos) y los jugadores esencialmente seleccionan clases de estrategias de equivalencia [27]. Una extensión de ese trabajo muestra un resultado similar, pero para transformaciones ligeramente diferentes y juegos de forma normales reducidos mixtos [21]. Existen tratamientos modernos de este trabajo previo sobre transformaciones del juego [38, cap.6], [10]. La reciente noción de isomorfismo débil en juegos extensos [7] está relacionada con nuestra noción de isomorfismo restringido del juego. La motivación de ese trabajo fue justificar conceptos de solución argumentando que son invariantes con respecto a las transformaciones isomórficas. De hecho, el autor muestra, entre otras cosas, que muchos conceptos de soluciones, incluidos Nash, Perfect, Subjame Perfect y el equilibrio secuencial, son invariables con respecto a los isomorfismos débiles. Sin embargo, esa definición requiere que los juegos sean probados para el isomorfismo débil sean del mismo tamaño. Nuestro enfoque es totalmente diferente: encontramos juegos más pequeños estratégicamente equivalentes. Además, su trabajo no proporciona algoritmos. Las técnicas de abstracción se han utilizado en la investigación de inteligencia artificial antes. A diferencia de nuestro trabajo, la mayoría (pero no todas) la investigación que implica abstracción ha sido para problemas individuales (por ejemplo, [20, 32]). Además, el uso de la abstracción generalmente conduce a soluciones subóptimas, a diferencia de las técnicas presentadas en este documento, que producen soluciones óptimas. Una excepción notable es el uso de la abstracción para calcular estrategias óptimas para el juego de brotes [2]. Sin embargo, una diferencia significativa para nuestro trabajo es que Sprouts es un juego de información perfecta. Una de las primeras piezas de investigación que utiliza la abstracción en entornos de múltiples agentes fue el desarrollo de la búsqueda de partición, que es el algoritmo detrás de GIB, el primer jugador de puentes de computadora de expertos de Worlds [17, 18]. A diferencia de otros algoritmos de búsqueda de árboles de juego que almacenan una posición de juego particular en cada nodo del árbol de búsqueda, la búsqueda de partition almacena grupos de posiciones que son similares.(Por lo general, la similitud de dos posiciones de juego se calcula ignorando los componentes menos importantes de cada posición del juego y luego verificando si las posiciones abstractadas son similares en algunos sentidos de dominio definidos por el experto entre sí). La búsqueda de partición puede conducir a mejoras de velocidad sustanciales sobre la búsqueda α-β. Sin embargo, no se basa en la teoría de juegos (no considera conjuntos de información en el árbol de juego) y, por lo tanto, no resuelve el equilibrio de un juego de información imperfecta, como el póker.8 Otra diferencia es que la abstracción se definepor un humano experto, mientras que nuestras abstracciones se determinan automáticamente. Ha habido algunas investigaciones sobre el uso de la abstracción para los juegos de información imperfectos. En particular, Billings et al [4] describen una abstracción construida manualmente para Texas Holdem Poker e incluyen resultados prometedores contra jugadores expertos. Sin embargo, este enfoque tiene inconvenientes significativos. Primero, es altamente especializado para Texas Holdem. En segundo lugar, se utilizó una gran cantidad de conocimiento y esfuerzo expertos para construir la abstracción. Tercero, la abstracción no preserva el equilibrio: incluso si se aplica a un juego más pequeño, podría no producir un equilibrio teórico del juego. Las ideas prometedoras para la abstracción en el contexto de los juegos generales de forma extensa se han descrito en un resumen extendido [39], pero hasta donde sabemos, no se han desarrollado completamente.7. Conclusiones y discusión Introdujimos la transformación de abstracción isomórfica del juego ordenado y dio un algoritmo, Gameshrink, para abstraer el juego usando el isomorfismo exhaustivamente. Probamos que en los juegos con señales ordenadas, cualquier equilibrio de NASH en los mapas de juego abstractos más pequeños directamente a un equilibrio de Nash en el juego original. La complejidad de Gameshrink es ˜o (N2), donde n es el número de nodos en el árbol de señal. No es más grande que el árbol de juego, y en los juegos no triviales es drásticamente más pequeño, por lo que GameShrink tiene tiempo y complejidad espacial Sublinear en 8 Bridge también es un juego de información imperfecta, y la búsqueda de partición tampoco encuentra el equilibrio para ese juego. En cambio, la búsqueda de partición se usa junto con el muestreo estadístico para simular la incertidumbre en el puente. También hay otros programas de puentes que utilizan técnicas de búsqueda para juegos de información perfectos junto con el muestreo estadístico y la abstracción definida por expertos [48]. Es poco probable que tales técnicas (no teóricas) sean competitivas en el póker debido a la mayor importancia de la información y el farol.168 El tamaño del árbol de juego. Usando Gameshrink, encontramos un equilibrio Minimax para Rhode Island Holdem, un juego de póker con 3.100 millones de nodos en el juego de cuatro órdenes de magnitud más que en el juego de póker más grande resuelto anteriormente. Para mejorar aún más la escalabilidad, introdujimos una variante de aproximación de Gameshrink, que puede usarse como un algoritmo en cualquier momento variando un parámetro que controla la grosería de la abstracción. También discutimos cómo (en un juego de suma cero de dos jugadores), la programación lineal se puede usar de manera en cualquier momento para generar estrategias aproximadamente óptimas de calidad creciente. El método también produce límites sobre la suboptimización de las estrategias resultantes. Actualmente estamos trabajando en el uso de estas técnicas para el límite de 2 jugadores a gran escala Texas Holdem Poker, un juego de cartas muy popular cuyo árbol de juegos tiene alrededor de 1018 nodos. Ese tamaño del árbol de juego nos ha requerido que usemos la versión de aproximación de Gameshrink (así como la abstracción basada en la ronda) [16, 15].8. Zum Hilbertschen Aufbau der Reellen Zahlen. Annalen, 99: 118-133, 1928. [2] D. Applegate, G. Jacobson y D. Sleator. Informe técnico CMU-CS-91-144, 1991. [3] R. Bellman y D. Blackwell. Algunos juegos de dos personas que involucran farol. PNAS, 35: 600-605, 1949. [4] D. Billings, N. Burch, A. Davidson, R. Holte, J. Schaeffer, T. Schauenberg y D. Szafron. Se aproxima a las estrategias óptimas teóricas del juego para el póker a gran escala. En Ijcai, 2003. [5] D. Billings, A. Davidson, J. Schaeffer y D. Szafron. Inteligencia Artificial, 134: 201-240, 2002. [6] B. Bollob´as. Cambridge University Press, 1986. [7] A. Casajus. Isomorfismo débil de juegos extensos. Matemáticas Ciencias Sociales, 46: 267-290, 2003. [8] X. Chen y X. Deng. Liquidando la complejidad del equilibrio NASH de 2 jugadores. ECCC, Informe No. 150, 2005. [9] V. Chv´atal. W. H. Freeman & Co., 1983. [10] B. P. de Bruin. Transformaciones del juego y equivalencia del juego. Nota técnica X-1999-01, Universidad de Amsterdam, Instituto de Lógica, Lenguaje y Computación, 1999. [11] S. Elmes y P. J. Reny. Sobre la equivalencia estratégica de extensos juegos de forma. J. of Economic Theory, 62: 1-23, 1994. [12] L. R. Ford, Jr. y D. R. Fulkerson. Princeton University Press, 1962. [13] A. Gilpin y T. Sandholm. Encontrar equilibrios en grandes juegos secuenciales de información imperfecta. Informe técnico CMU-CS-05-158, Universidad Carnegie Mellon, 2005. [14] A. Gilpin y T. Sandholm. POKER óptimo de Rhode Island Holdem. En AAAI, páginas 1684-1685, Pittsburgh, PA, EE. UU., 2005. [15] A. Gilpin y T. Sandholm. Un jugador competitivo de póker de Texas Holdem a través de la abstracción automatizada y el cálculo de equilibrio en tiempo real. Mimeo, 2006. [16] A. Gilpin y T. Sandholm. Un jugador de póker de Texas Holdem basado en la abstracción automatizada y el cálculo de equilibrio en tiempo real. En Aamas, Hakodate, Japón, 2006. [17] M. L. Ginsberg. En AAAI, páginas 228-233, Portland, OR, 1996. [18] M. L. Ginsberg. GIB: Pasos hacia un programa de juego de puentes de nivel experto. En Ijcai, Estocolmo, Suecia, 1999. [19] S. Govindan y R. Wilson. Un método global de Newton para calcular los equilibrios de Nash. Teoría, 110: 65-86, 2003. [20] C. A. Knoblock. Generando automáticamente abstracciones para la planificación. Artificial Intelligence, 68 (2): 243-302, 1994. [21] E. Kohlberg y J.-F.Mertens. Sobre la estabilidad estratégica de los equilibrios. Econometrica, 54: 1003-1037, 1986. [22] D. Koller y N. Megiddo. La complejidad de los juegos de suma cero de dos personas en forma extensa. Juegos y comportamiento económico, 4 (4): 528-552, octubre de 1992. [23] D. Koller y N. Megiddo. Encontrar estrategias mixtas con pequeños apoyos en juegos extensos de forma. International Journal of Game Theory, 25: 73-92, 1996. [24] D. Koller, N. Megiddo y B. Von Stengel. Cálculo eficiente de equilibrios para extensos juegos de dos personas. Juegos y comportamiento económico, 14 (2): 247-259, 1996. [25] D. Koller y A. Pfeffer. Representaciones y soluciones para problemas teóricos del juego. Artificial Intelligence, 94 (1): 167-215, julio de 1997. [26] D. M. Kreps y R. Wilson. Econometrica, 50 (4): 863-894, 1982. [27] H. W. Kuhn. PNAS, 36: 570-576, 1950. [28] H. W. Kuhn. Un póker simplificado de dos personas. En contribuciones a la teoría de los juegos, Volumen 1 de Annals of Mathematics Studies, 24, páginas 97-103. Princeton University Press, 1950. [29] H. W. Kuhn. Extensos juegos y el problema de la información. En contribuciones a la teoría de los juegos, Volumen 2 de Annals of Mathematics Studies, 28, páginas 193-216. Princeton University Press, 1953. [30] C. Lemke y J. Howson. Puntos de equilibrio de los juegos de bimatriz. Journal of the Society for Industrial and Applied Mathematics, 12: 413-423, 1964. [31] R. Lipton, E. Markakis y A. Mehta. Jugando juegos grandes usando estrategias simples. En ACM-EC, páginas 36-41, 2003. [32] C.-L.Liu y M. Wellman. En la abstracción del espacio de estado para la evaluación en cualquier momento de las redes bayesianas. Sigart Bulletin, 7 (2): 50-57, 1996. [33] A. Mas-Colell, M. Whinston y J. R. Green. Oxford University Press, 1995. [34] R. D. McKelvey y A. McLennan. Cálculo de equilibrios en juegos finitos. En Handbook of Computational Economics, Volumen 1, páginas 87-142. Elsevier, 1996. [35] P. B. Miltersen y T. B. Sørensen. Calculación de equilibrio secuencial para juegos de dos jugadores. En Soda, páginas 107-116, 2006. [36] J. Nash. Puntos de equilibrio en los juegos N-persona. Proc.de la Academia Nacional de Ciencias, 36: 48-49, 1950. [37] J. F. Nash y L. S. Shapley. Un simple juego de póker de tres personas. En contribuciones a la teoría de los juegos, volumen 1, páginas 105-116. Princeton University Press, 1950. [38] A. Perea. Racionalidad en juegos extensos de forma. Kluwer Academic Publishers, 2001. [39] A. Pfeffer, D. Koller y K. Takusagawa. Aproximaciones del espacio de estado para juegos extensos de forma, julio de 2000. Habla dada en el primer Congreso Internacional de la Teoría del Juego, Bilbao, España.[40] R. Porter, E. Nudelman e Y. Shoham. Métodos de búsqueda simples para encontrar un equilibrio de Nash. En AAAI, páginas 664-669, San José, CA, EE. UU., 2004. [41] I. Romanovskii. Reducción de un juego con memoria completa a un juego de matriz. Matemáticas soviéticas, 3: 678-681, 1962. [42] T. Sandholm y A. Gilpin. Secuencias de las ofertas de Take-It O-Leave-It: subastas casi óptimas sin revelación de valoración completa. En Aamas, Hakodate, Japón, 2006. [43] T. Sandholm, A. Gilpin y V. Conitzer. Métodos de programación de enteros mixtos para encontrar equilibrios de Nash. En AAAI, páginas 495-501, Pittsburgh, PA, EE. UU., 2005. [44] R. Savani y B. von Stengel. Exponencialmente muchos pasos para encontrar un equilibrio de Nash en un juego de bimatriz. En FOCS, páginas 258-267, 2004. [45] R. Selten. Spieltheoretische Behandlung Eines Oligopolmodells Mit Nachfragetr¨agheit. Zeitschrift für die gesamte Staatswissenschaft, 12: 301-324, 1965. [46] R. Selten. Estabilidad evolutiva en extensos juegos de dos personas: corrección y desarrollo adicional. Ciencias Sociales Matemáticas, 16: 223-266, 1988. [47] J. Shi y M. Littman. Métodos de abstracción para el póker teórico del juego. En computadoras y juegos, páginas 333-345. Springer-Verlag, 2001. [48] S. J. J. Smith, D. S. Nau y T. Throop. Puente de la computadora: una gran victoria para la planificación de la IA. AI Magazine, 19 (2): 93-105, 1998. [49] R. E. Tarjan. Eficiencia de un algoritmo de unión de conjunto bueno pero no lineal. Journal of the ACM, 22 (2): 215-225, 1975. [50] F. Thompson. Equivalencia de juegos en forma extensa. Rand Memo RM-759, The Rand Corporation, enero de 1952. [51] J. Von Neumann y O. Morgenstern. Teoría de los juegos y comportamiento económico. Princeton University Press, 1947. [52] B. von Stengel. Cálculo eficiente de estrategias de comportamiento. Juegos y comportamiento económico, 14 (2): 220-246, 1996. [53] B. von Stengel. Equilibrios de computación para juegos de dos personas. En Handbook of Game Theory, Volumen 3. North Holland, Amsterdam, 2002. [54] R. Wilson. Calibrios de computación de juegos de dos personas desde la forma extensa. Management Science, 18 (7): 448-460, 1972. [55] S. J. Wright. Métodos de punto interior primal-dual.