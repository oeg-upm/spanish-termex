Resolución de conflictos e inconsistencia en las organizaciones virtuales reguladas por las normas Wamberto Vasconcelos Departamento. de la informática de la Universidad de Ciencias de Aberdeen Aberdeen AB24 3ue Reino Unido wvasconcelos@acm.org Martin J. Kollingbaum Departamento de Computing Science University of Aberdeen Aberdeen AB24 3ue Reino Unido Mkolling@csd.abdn.ac.uk Timothy J. Dept. de la computaciónCiencia Universidad de Aberdeen Aberdeen AB24 3ue Reino Unido tnorman@csd.abdn.ac.uk Organizaciones virtuales abstractas reguladas por normas Definen, gobiernan y facilitan el intercambio de recursos coordinados y la resolución de problemas en las sociedades de agentes. Con una cuenta explícita de las normas, se puede lograr la apertura en las organizaciones virtuales: los nuevos componentes, diseñados por varias partes, se pueden acomodar sin problemas. Nos centramos en las organizaciones virtuales realizadas como sistemas de agentes múltiples, en los que los agentes humanos y de software interactúan para lograr objetivos individuales y globales. Sin embargo, cualquier relato realista de las normas debe abordar su naturaleza dinámica: las normas cambiarán a medida que los agentes interactúen entre sí y su entorno. Debido a la naturaleza cambiante de las normas o debido a las normas derivadas de diferentes organizaciones virtuales, habrá situaciones cuando una acción se permita y se prohíbe simultáneamente, es decir, surge un conflicto. Del mismo modo, habrá situaciones cuando una acción esté obligada y prohibida, es decir, surge una inconsistencia. Introducimos un enfoque, basado en la unificación de primer orden, para detectar y resolver tales conflictos e inconsistencias. En nuestra solución propuesta, anotamos una norma con el conjunto de valores que sus variables no deberían tener para evitar un conflicto o una inconsistencia con otra norma. Nuestro enfoque acomoda perfectamente las interrelaciones dependientes del dominio entre las acciones y los conflictos/inconsistencias indirectas que estos pueden causar. En términos más generales, podemos capturar una noción útil de delegación entre agentes (e entre rol) de acciones y normas asociadas a ellas, y usarla para abordar los conflictos/inconsistencias causadas por la delegación de la acción. Ilustramos nuestro enfoque con un ejemplo de ciencia electrónica en el que los agentes apoyan los servicios de cuadrícula. Categorías y descriptores de sujetos I.2.4 [Inteligencia artificial]: aplicaciones y sistemas expertos;I.2.11 [Inteligencia artificial]: Sistemas de inteligencia artificial distribuida de sistemas de agente de agente Algoritmos, Teoría 1. Introducción Las organizaciones virtuales (VO) facilitan el intercambio de recursos coordinados y la resolución de problemas que involucran a varias partes geográficamente remotas [9]. Los VO definen y regulan las interacciones (que facilitan la coordinación) entre el software y/o los agentes humanos que se comunican para lograr objetivos individuales y globales [16]. Los VO se realizan como sistemas de múltiples agentes y una característica más deseable de tales sistemas es la apertura por la cual los nuevos componentes diseñados por otras partes se acomodan sin problemas. El uso de normas, es decir, prohibiciones, permisos y obligaciones, en la especificación y operación de sistemas de múltiples agentes (masa) es un enfoque prometedor para lograr la apertura [2, 4, 5, 6]. Las normas regulan el comportamiento observable de los agentes de software heterogéneos y interesados, diseñados por varias partes que pueden no confiar completamente entre sí [3, 24]. Sin embargo, los VO regulados por normas pueden experimentar problemas cuando las normas asignadas a sus agentes están en conflicto (es decir, una acción está prohibida y permitida simultáneamente) o inconsistentes (es decir, una acción está prohibida y obligada simultáneamente). Proponemos un medio para detectar y resolver automáticamente conflictos e inconsistencia en VO regulados por normas. Hacemos uso de la unificación de primer orden [8] para averiguar si las normas se superponen y cómo se superponen en su influencia (es decir, los agentes y los valores de los parámetros en las acciones de los agentes que las normas pueden afectar). Esto permite una solución de grano fino por la cual la influencia de normas conflictivas o inconsistentes se reduce para conjuntos particulares de valores. Por ejemplo, Norms Agent X puede enviar una oferta (AG1, 20) y el agente AG2 tiene prohibido hacer una oferta de envío (y, z) (donde x, y, z son variables y ag1, ag2, 20 están constantes) están enconflicto porque sus agentes, acciones y términos (dentro de las acciones) unifican. Resolvemos el conflicto anotando las normas con conjuntos de valores que sus variables no pueden tener, reduciendo así su influencia. En nuestro ejemplo, el conflicto se evita si requerimos que la variable Y no pueda ser AG1 y que Z no puede ser 20. Este artículo está organizado de la siguiente forma: En la siguiente sección proporcionamos una definición minimalista para VO regulados por normas. En la Sección 3 definimos formalmente los conflictos de normas y explicamos cómo se detectan y resuelven. En la Sección 4 describimos cómo la maquinaria de la sección anterior puede adaptarse para detectar y resolver las inconsistencias de la norma. En la Sección 5 describimos cómo nuestras normas reducidas se usan en las sociedades de agentes conscientes de la norma. En la Sección 6 explicamos cómo nuestra maquinaria puede usarse para detectar y resolver conflictos/inconsistencias indirectas, es decir, las causadas a través de relaciones entre acciones;Extendemos y adaptamos la maquinaria para acomodar la delegación de las normas. En la Sección 7 ilustramos nuestro enfoque con un ejemplo de agentes de software regulados por normas que sirven la cuadrícula. En la Sección 8 encuestamos el trabajo relacionado y en la Sección 9 discutimos nuestras contribuciones y damos instrucciones para el trabajo futuro.644 978-81-904262-7-5 (RPS) C 2007 Ifaamas 2. Organizaciones virtuales Las organizaciones virtuales [17] permiten que varias partes se unan para compartir recursos y participar en la resolución de problemas. Este paradigma ha encontrado fuertes aplicaciones en la orquestación del servicio web [14], la ciencia electrónica [16] y la cuadrícula [9]. Los VO, en su formulación más genérica, pueden verse como artefactos de coordinación, lo que permite que el software y los agentes humanos participen en formas de interacción sofisticadas. Representamos formalmente nuestros VO como máquinas de estado finito en las que las acciones de los agentes individuales etiquetan los bordes entre estados discretos. Esto nos proporciona un denominador común más bajo: hay formas mucho más sofisticadas, convenientes y expresivas para representar interacciones entre los agentes (por ejemplo, AUML [19] e instituciones electrónicas [20], por nombrar algunas), pero por el bien de generalizarNuestro enfoque, asumiremos que cualquier formalismo de nivel superior se puede asignar en una máquina de estado finito (posiblemente con cierta pérdida de expresividad). Mostramos en la Figura 1 un VO simple representado gráficamente como una máquina de estado finito1. Las etiquetas en los bordes con //?> = <89 :; 0 p (x) q (y, z) //?> = <89 :; 1 s (a, b) //?> = <89:; /.-, ()*+2 Figura 1: VO de muestra como una máquina de estado finito que los estados son fórmulas atómicas de primer orden, denotadas genéricamente como ϕ;Sostienen las acciones realizadas por agentes individuales. Definimos nuestras organizaciones virtuales de la siguiente manera: def.1. Una organización virtual I es la triple S, S0, E, T donde S = {S1 ,..., Sn} es un conjunto de estados finitos y no vacíos, s0 ∈ S es el estado inicial, e es un conjunto finito de bordes (s, s, ϕ), s, s ∈ S que conecta s a s con una primeraOrdene la fórmula atómica ϕ como etiqueta, y t ⊆ s es el conjunto de estados terminales. Observe que los bordes están dirigidos, por lo tanto (s, t, ϕ) = (t, s, ϕ). La muestra VO de la Figura 1 se representa formalmente como i = {0, 1, 2}, 0, {(0, 0, p (x)), (0, 1, q (y, z)), (1,2, s (a, b)}, {2}. Asumimos una cuantificación existencial implícita en cualquier variable en ϕ, de modo que, por ejemplo, S (A, B) representa ∃A, B (A, B). Los VO deben permitir dos tipos de no determinismo correspondiente a opciones que los agentes autónomos pueden hacer, a saber, i) el que surge cuando hay más de un borde que sale de un estado;y ii) el que surge de las variables en las fórmulas ϕ etiquetando un borde, para el cual el agente que lleva a cabo la acción instancia. Este tipo de no determinismo son deseables, ya que ayudan a definir mecanismos de coordinación genéricos y flexibles. Otro concepto importante que usamos es el roles de los agentes en VO. Los roles, como se explotan en, por ejemplo, [18] y [20], nos ayudan a abstraer de agentes individuales y definir un patrón de comportamiento al que cualquier agente que adopte un papel debería cumplir. Además, todos los agentes con el mismo rol tienen garantizado los mismos derechos, deberes y oportunidades. Haremos uso de dos conjuntos finitos y no vacíos, agentes = {AG1 ,..., agn} y roles = {r1 ,..., rm}, que representa, respectivamente, los conjuntos de identificadores de agentes y etiquetas de roles. Nos referimos genéricamente a los términos de primer orden, es decir, constantes, variables y funciones (anidadas) como τ.2.1 Semántica de Vos La especificación de un VO como una máquina de estado finito da lugar a un conjunto posiblemente infinito de historias de comportamientos computacionales, en el que se registran las acciones que etiquetan las rutas desde el estado inicial a un estado final. Aunque las acciones que comprenden un VO se llevan a cabo distribuidas, proponemos una cuenta global explícita de todos los eventos. En la práctica, esto se puede lograr si requerimos el individuo 1, adoptamos la Convención de Prólogos [1] y usamos cadenas que comienzan con una letra mayúscula para representar variables y cadenas que comienzan con una letra pequeña para representar constantes.agentes para declarar/informar cualquier acción que hayan llevado a cabo;Esto asume agentes confiables, naturalmente2. Para registrar la autoría de la acción, anotamos las fórmulas con la identificación única de los agentes. Nuestro relato global explícito de todos los eventos es un conjunto de fórmulas atómicas terrestres ϕ, es decir, solo permitimos que las constantes aparezcan como términos de fórmulas. Cada fórmula es un registro veraz de una acción especificada en el VO. Observe, sin embargo, que en la especificación de VO no restringimos la sintaxis de las fórmulas: las variables pueden aparecer en ellas, y cuando un agente realiza una acción real, entonces cualquier variable de la acción especificada debe ser asignadas valores. Así definimos: def.2. Un estado de ejecución global de un VO, denotado como ξ, es un conjunto finito, posiblemente vacío, de tuplas a: r, ¯ϕ, t donde a ∈ Agents es un identificador de agente, r ∈ Roles es una etiqueta de roles, ¯ϕ is esUna fórmula atómica de primer orden en tierra, y t ∈ en es una marca de tiempo. Por ejemplo, AG1: Comprador, P (A, 34), 20 estados que el agente AG1 adopta el comprador de roles realizó la acción P (A, 34) en el instante 20. Dado un Vo I = S, S0, E, T, un estado de ejecución ξ y un estado s ∈ S, podemos definir una función que obtenga un posible estado de ejecución del siguiente, a saber, H (i, ξ, s) = ξ∪ {a: r, ¯ϕ, t}, para uno (s, s, ϕ) ∈ E. Dicha función h debe abordar los dos tipos de no determinismo anterior, así como la elección de los agentes potenciales que pueden llevarfuera de la acción y sus roles adoptados. También definimos una función para calcular el conjunto de todos los estados de ejecución posibles, h ∗ (i, ξ, s) = {ξ ∪ ∪ {a: r, ¯ϕ, t} | (s, s, ϕ) ∈ E}.2.2 VO regulados por la norma, abogamos por una separación de las preocupaciones por las cuales la organización virtual se complementa con un conjunto explícito y separado de normas que regula aún más el comportamiento de los agentes a medida que participan en la promulgación de una organización. La libertad de elección otorgada a los agentes (capturados a través del no determinismo de VO, explicado anteriormente) debe reducirse en algunas circunstancias. Por ejemplo, es posible que necesitemos describir que quien realizado ϕ esté obligado a llevar a cabo ϕ, de modo que si hay un punto de elección en el que ϕ aparece como una etiqueta de un borde, entonces se debe seguir ese borde. En lugar de incorporar tales aspectos normativos en el diseño de los agentes (por ejemplo, codificando explícitamente aspectos normativos en el comportamiento de los agentes) o en el VO en sí (por ejemplo, abordando las excepciones y el comportamiento desviado en el mecanismo en sí), adoptamos la opinión de que un VOdebe complementarse con un conjunto separado de normas que regulan aún más el comportamiento de los agentes a medida que participan en la promulgación de la organización. Esta separación de las preocupaciones debería facilitar el diseño de la masa;Sin embargo, los diferentes componentes (VO y normas) deben unirse en algún momento del proceso de diseño. Nuestras normas se definen como a continuación: def.3. Una norma, conocida genéricamente como ν, es cualquier construcción de la forma oτ: τ ϕ, pτ: τ ϕ, o fτ: τ ϕ, donde τ, τ son variables o constantes y ϕ es una fórmula atómica de primer orden. Adoptamos la notación de [18]: oτ: τ ϕ representa una obligación en que el agente τ asume el rol τ para provocar ϕ;Recordamos que τ, τ son variables, constantes y funciones aplicadas a términos (anidados). Pτ: τ ϕ y fτ: τ ϕ representa, respectivamente, un permiso y una prohibición del agente τ, jugando el rol τ para provocar ϕ. Asumiremos que los tipos se utilizan para manipular correctamente las variables para identificadores de agentes y etiquetas de roles. Proponemos representar formalmente las posiciones normativas de todos los agentes que promulgan un VO. Por posición normativa nos referimos a la carga social asociada a los individuos [12], es decir, sus obligaciones, permisos y prohibiciones: 2 agentes no controlados pueden acomodarse en esta propuesta, si asociamos a cada uno de ellos un agente de gobernador que supervisa elAcciones del agente externo y los informes sobre ellos. Este enfoque se introdujo en [12] y se explica en la Sección 5. El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 645 def.4. Un estado normativo global ω es un conjunto finito y posiblemente vacío de tuplas ω = ν, td, ta, te donde ν es una norma como se indica arriba y td, ta, te ∈ en son, respectivamente, el momento en que se declaró ν (introducido), cuando ν se activa y cuando ν expira, td ≤ ta <te. Vale la pena notar que no requerimos que las fórmulas atómicas de las normas sean molidas: podría haber variables en ellas. Suponemos una cuantificación universal implícita en las variables A, R de las normas xa: rϕ (para las modalidades deoípicas x ∈ {o, p, f}), de modo que, por ejemplo, PA: rp (x, b, c) se mantienepara ∀a ∈ Agentes. ∀r ∈ Roles.∃x.pa: rp (x, b, c). También nos referimos a las tuplas en Ω como normas. Los estados normativos globales complementan los estados de ejecución de VO con información sobre las posiciones normativas de los agentes individuales. Podemos relacionarlos a través de una función para obtener un estado de ejecución siguiente regulado por la norma de un VOS, es decir, g (i, ξ, s, ω, t) = ξ, t para el momento de la actualización. Por ejemplo, es posible que deseemos que todas las acciones prohibidas se excluyan del siguiente estado de ejecución, es decir, g (i, ξ, s, ω, t) = ξ ∪ {a: r, ¯ϕ, t}, (s, s, s,s, ϕ) ∈ E y Fa: rϕ, td, ta, te ∈ Ω, ta ≤ t ≤ te. Es posible que deseemos que solo se elijan acciones permitidas para el próximo estado de ejecución. No legislamos, o de hecho recomendamos, ninguna forma particular de regular VO. Sin embargo, ofrecemos bases simples para permitir que se implementen políticas arbitrarias. De la misma manera que un estado normativo es útil para obtener el próximo estado de ejecución de un VO, podemos usar un estado de ejecución para actualizar un estado normativo. Por ejemplo, es posible que deseemos eliminar cualquier obligación específica para un agente y un rol, que ha sido llevado a cabo por ese agente y rol específico, es decir, F (ξ, ω) = ω - obls, obls = {OA: Rϕ,td, ta, te ∈ ω |A: r, ¯ϕ, t ∈ ξ}. La gestión (es decir, la creación y la actualización) de los estados normativos globales es un área de investigación interesante. Se informa un enfoque simple pero útil en [11]: las reglas de producción representan genéricamente cómo se deben actualizar las normas para reflejar qué han hecho los agentes y qué normas tienen actualmente. En este documento, nuestro enfoque no es proponer cómo se deben manejar Ωs;Asumimos algún mecanismo que hace eso.3. Conflictos de normas ahora definimos medios para detectar y resolver conflictos e inconsistencias de normas. Hacemos uso del concepto de unificación [1, 8] de los términos de primer orden τ, es decir, constantes, variables o funciones (anidadas) con términos como parámetros. Inicialmente definimos sustituciones: def.5. Una sustitución σ es un conjunto finito y posiblemente vacío de pares x/τ, donde x es una variable y τ es un término. Definimos la aplicación de una sustitución como: 1. c · σ = c para una constante c 2. x · σ = τ · σ si x/τ ∈ σ;de lo contrario x · σ = x 3. pn (τ0, ..., τn) · σ = pn (τ0 · σ, ..., τn · σ).4. (xτ1: τ2 ϕ) · σ = x (τ1 · σ) :( τ2 · σ) (ϕ · σ) 5. ν, td, ta, te · σ = (ν · σ), td, ta,TE Donde x genéricamente se refiere a cualquiera de las modalidades deoticas O, P, F. Unificación entre dos términos τ, τ consiste en encontrar una sustitución σ (también llamada, en este contexto, el unifier de τ y τ) de modo que τ · · σ= τ · σ. Se han propuesto muchos algoritmos para resolver el problema de unificación, un problema fundamental en la prueba de teorema automatizado [8], y el trabajo más reciente proporciona formas muy eficientes de obtener unificadores. Haremos uso de la siguiente definición: def.6. La relación unifica (τ, τ, σ) sostiene si hay un σ posiblemente vacío tal que τ · σ = τ · σ. También definimos la unificación de las fórmulas atómicas como unificadas (pn (τ0, ..., τn), pn (τ0, ..., τn), σ) que contiene IFF τi · σ = τi · σ, 0 ≤ i ≤ i ≤ i ≤ i ≤ i ≤ i ≤ i ≤ i ≤ i ≤ i ≤ inorte.La relación unificada verifica si una sustitución σ es de hecho un unificador para τ, τ pero también se puede usar para encontrar dicho σ. Suponemos que Unify es una implementación adecuada de un algoritmo de unificación que yo) siempre termina (posiblemente falla, si no se puede encontrar un unificador);ii) es correcto;y iii) tiene una complejidad computacional lineal.3.1 Detección de conflictos Un conflicto de normas surge cuando una fórmula atómica que etiqueta un borde en el VO, es decir, una acción, se permite y prohibida simultáneamente [13]. En este caso, ambas normas están en conflicto con respecto a sus agentes, roles y parámetros (términos) de acciones específicas. Proponemos usar la unificación para detectar cuando una prohibición y un permiso se superponen y emplear el unifier para resolver el conflicto. Por ejemplo, PA: RP (C, X) y FA: BP (y, Z) están en conflicto, ya que se unen bajo σ = {a/a, r/b, y/c, x/d}). Sin embargo, si las variables en FA: BP (Y, Z) no obtienen los valores en σ, entonces no habrá conflictos. Por lo tanto, proponemos anotar las prohibiciones en Ω con unificadores, llamados aquí conjuntos de conflictos, y usar estas anotaciones para determinar cuáles son las variables de la prohibición en futuras unificaciones para evitar un conflicto. En adelante, cada prohibición se considera que tiene tal anotación, denotada como (fτ1: τ2 ϕ) σc, td, ta, te. Inicialmente, esta anotación está vacía. Proponemos reducir la influencia de las prohibiciones, dando así a los agentes más opciones en las acciones que pueden realizar. Se podría adoptar un enfoque similar mediante el cual se reducen los permisos, lo que limita las acciones de los agentes disponibles. Cada una de estas políticas es posible: no legislamos sobre ninguna de ellas ni damos preferencia sobre ninguna. En este artículo estamos interesados en formalizar tales políticas dentro de un marco matemático simple. Una prohibición puede estar en conflicto con varios permisos en Ω. Por lo tanto, tenemos que encontrar el conjunto máximo de pares conflictivos de permisos y prohibiciones en Ω, realizando una inspección por pares. Esto requiere identificar la sustitución entre dos pares de normas que caracterizan un conflicto. Esto se captura formalmente por la siguiente definición: def.7. Un conflicto surge entre dos tuplas ω, Ω ∈ ω bajo una sustitución σ, denotada como CFLCT (Ω, Ω, σ), si las siguientes condiciones tienen: 1. ω = (fτ1: τ2 ϕ) σc, td, ta, te, te, Ω = Pτ1: τ2 ϕ, td, ta, te 2. unify (τ1, τ1, σ), unify (τ2, τ2, σ) y unify (ϕ, ϕ, σ) 3. | te − te |≤ | ta - ta |Es decir, una prohibición y un conflicto de permiso (condición 1) si, y solo si los agentes y roles a los que se aplican y sus acciones, respectivamente, unifican bajo σ (condición 2) y sus períodos de activación se superponen (condición 3). Sustitución σ, el conjunto de conflictos, unifica los agentes, roles y fórmulas atómicas de un permiso y una prohibición. La anotación σc no juega ningún papel al detectar conflictos, pero, como mostramos a continuación, tenemos que actualizar la anotación para reflejar nuevas redacciones para resolver conflictos. Por ejemplo, CFLCT ((FA: BP (Y, D)) ∅, 1, 3, 5, PA: RP (C, X), 2, 3, 4, {A/A, R/B, Y/C, Z/x}) se mantiene. Definimos a continuación cómo obtenemos el conjunto de normas conflictivas de un estado normativo ω: def.8. El conjunto finito, posiblemente vacío de normas conflictivas de un estado normativo ω, denotado como CFLS (Ω), se define como CFLS (ω) = {Ω, ω, σ | ω, ω ∈ ω, CFLCT (ω, σ, σ, erm.)} 3.2 Resolución de conflictos Se puede hacer una forma de resolución de grano fino mediante la unificación. Detectamos la superposición de las influencias de las normas, es decir, cómo afectan los comportamientos de los agentes en el VO, y reducimos el 646 el sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) influencia de la prohibición. Ilustramos con los diagramas de Venn en la Figura 2 la superposición de las influencias normales (izquierda) que caracteriza un conflicto y la reducción necesaria para resolver el conflicto (derecha). La ilustración muestra el espacio de valores posibles para p (x, y) y p (x, y) pa: rp (c, x) fa: bp (y, z) p (x, y) fa: bp (y,Z) PA: RP (C, X) Figura 2: Superposición de influencia (izquierda) y reducción (derecha) Dos porciones de este espacio que definen el alcance de la influencia de las normas PA: RP (C, X) y FA: BP (Y, Z). El alcance de estas normas se superpone, ilustrado por la intersección de cuadros a la izquierda, en acciones con valores, por ejemplo, a, b, p (c, 2) ,..., A, B, P (C, N). La reducción de la prohibición elimina la intersección: mueve el alcance de la influencia de la norma hacia fuera de la influencia del permiso. Si hubiera múltiples superposiciones entre una prohibición y varios permisos, lo que probablemente suceda, entonces la prohibición se reducirá para mover el alcance de la norma para evitar todas las intersecciones. El algoritmo que se muestra en la Figura 3 muestra cómo obtenemos un conjunto de normas sin conflicto. Mapea un conjunto existente ω posiblemente con conflictogoritmo conflictresolution (ω, Ω) entrada Ω Salida Ω Comenzar Ω: = ω para cada ω ∈ Ω S.T.ω = (fa: r ¯ϕ) σc, td, ta, te do si ω, ω, σ ∈ Cfls (ω) luego Ω: = ω - {ω} Fin para cada Ω ∈ ω s.t.ω = (fτ1: τ2 ϕ) σc, td, ta, te do σmax c: = [ω, Ω, σc ∈Cfls (ω) {σc} ω: = (ω - {ω}) ∪ {(fτ1: τ2ϕ) (σc ∪ σmax c), td, ta, te} fin para final Figura 3: algoritmo para resolver conflictos en un conjunto de normas de normas en un nuevo conjunto Ω en el que se resuelven los conflictos (si los hay). El algoritmo forma ω como un conjunto que es conflicto-Freethis significa que las prohibiciones se anotan con un conjunto de conflictos que indica qué enlaces para las variables deben evitarse. Inicialmente, Ω está configurado para ser Ω. El algoritmo funciona en dos etapas. En la primera etapa (primero para cada bucle), eliminamos todas las prohibiciones conflictivas ω = (fa: r ¯ϕ) σc, TD, TA, TE con agente de tierra/pares de roles A: R y fórmulas de tierra ¯ϕ: la única formaResolver conflictos que surgen de tales prohibiciones es eliminarlos por completo, ya que no podemos reducir una norma completamente terrestre. En la segunda etapa (segunda para cada bucle), se examinan las prohibiciones restantes en Ω: el conjunto CFLS (Ω) contiene todos los conflictos entre los permisos y las prohibiciones restantes en Ω representadas como tuplas Ω, ω, σc, con σc que representan el conflicto de conflictoscolocar. Como una prohibición puede tener conflictos con varios permisos, el conjunto CFL (ω) puede contener más de una tupla para cada prohibición. Para proporcionar un Ω que refleje todos estos conflictos para una prohibición específica, tenemos que formar σmax C que contenga todos los conjuntos de conflictos σc para una prohibición dada ω. El conjunto máximo se utiliza para actualizar la anotación de la prohibición. Es importante explicar la necesidad de actualizar el conjunto de prohibiciones de conflicto. Los estados normativos cambian como resultado de las acciones de los agentes [11]: se revocan los permisos, prohibiciones y obligaciones existentes y/o las nuevas se implementan como resultado de las interacciones de los agentes con el medio ambiente y otros agentes. Cada vez que se agregan nuevas normas, debemos verificar si hay nuevos conflictos e inconsistencias. Si solo aplicamos nuestro algoritmo a un par que consiste en una norma antigua y una nueva, entonces se puede guardar algún procesamiento de pares de normas antiguas (que se trataron antes). La eliminación de las normas del conjunto Ω se trata de manera eficiente: cada permiso a eliminar debe verificarse primero para obtener conflictos con cualquier prohibición existente (se puede evitar el procesamiento si registramos el conflicto, en lugar de detectarlo nuevamente). Si hay un conflicto, entonces el conflicto establecido se habrá registrado en la anotación de las Prohibiciones;Este conjunto de conflictos se elimina de la anotación de las prohibiciones. La eliminación de obligaciones sigue un proceso similar. Las prohibiciones se eliminan sin la necesidad de considerar sus relaciones con otras normas. Nuestro algoritmo es correcto, ya que proporciona, para un Ω dado, un nuevo Ω en el que i) se han eliminado todas las prohibiciones terrestres que entran en conflicto con los permisos;y ii) todas las prohibiciones anotadas restantes (fτ: τ ¯ϕ) σc, td, ta, TE no unificarán con ninguno de los permisos en Ω, siempre que el unifier no aparezca en σc. El primer requisito se aborda por el primero para cada bucle, lo que hace precisamente esto: elimina todas las prohibiciones de tierra que se unen con una obligación. El segundo requisito se aborda por el segundo para cada bucle: cada prohibición tiene su anotación σc agregada con σmax c, acomodando así los unificadores de todos los permisos que unifican con la prohibición. Es fácil ver que el algoritmo siempre termina: cada uno de sus dos bucles pasa por un conjunto finito, procesando un elemento a la vez. El conjunto CFLS (ω) se calcula en un número finito de pasos, como se realizan las operaciones establecidas dentro de cada bucle. Sin embargo, el algoritmo tiene complejidad exponencial3, ya que el cálculo de CFL (Ω) requiere una comparación por pares de todos los elementos en ω. Ilustramos nuestro algoritmo con el siguiente ejemplo. Deje que haya el siguiente estado normativo global Ω: J (Fa: Rp (x, y)) {}, 2, 2, 9, PA: Rp (a, b), 3, 4, 8, (fa: rp (a, b)) {}, 2, 4, 12 pa: rp (d, e), 3, 4, 9, ff El primer bucle elimina la prohibición del suelo, obteniendo así lo siguiente Ω: j (fa: rp (x, Y)) {}, 2, 2, 9, PA: bp (c, d), 3, 4, 8, pe: f p (g, h), 3, 4, 9 ff luego tenemos el siguiente conjunto deNormas en conflicto CFLS (ω): 8 <: * (fa: rp (x, y)) {}, 2, 2, 9, PA: bp (c, d), 3, 4, 8, {a/a,R/b, x/c, y/d} +, * (fa: rp (x, y)) {}, 2, 2, 9, pe: f p (g, h), 3, 4, 9, {A/e, r/f, x/g, y/h} +9 =;Para cada prohibición ω ∈ ω recuperamos todos los elementos de w, w, σ ∈ Cfls (Ω) y recolectamos sus σs en σmax c. La final Ω es así: 8 <: (fa: rp (x, y)) j {a/a, r/b, x/c, y/d} {a/e, r/f, x/g,Y/h} ff, 2, 2, 9, PA: Rp (A, B), 3, 4, 8, PA: Rp (D, E), 3, 4, 9, 9 =;El conjunto anotado de conjuntos de conflictos debe entenderse como un registro de unificaciones pasadas, que informa cómo las prohibiciones deben usarse en el futuro para evitar conflictos con los permisos. Mostramos en la Sección 5.1 cómo las anotaciones son utilizadas por los agentes conscientes de la norma.4. Inconsistencias de normas Si se puede encontrar una sustitución σ que unifica una obligación y una prohibición, entonces se produce una situación de inconsistencia de la norma [13]. La obligación exige que un agente realice una acción prohibida. Podemos reutilizar la maquinaria, introducida anteriormente para resolver conflictos entre permisos y prohibiciones, para a) detectar y b) resolver tales inconsistencias. Con la definición 7, 3, el esfuerzo combinatorio ya no es necesario si mantenemos un conjunto de normas sin conflictos: cada vez que se introducirá una nueva norma, lo comparamos con los existentes, lo que hace que el proceso de mantenimiento de linealcomplejidad. El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 647 expresa la naturaleza de un conflicto entre una prohibición y permiso. Del mismo modo, se puede definir una situación de inconsistencia reutilizando esta definición y reemplazar la modalidad p deomia con O. Podemos reutilizar la maquinaria para la resolución de conflictos, desarrollada anteriormente, para resolver la inconsistencia. El algoritmo de resolución de conflictos se puede aplicar sin cambios para acumular un conflicto máximo establecido σmax c para cada prohibición en Ω que unifica las obligaciones.5. Sociedades de agentes conscientes de la norma Ahora describimos cómo nuestros VO regulados por normas dan lugar a las sociedades de agentes de Normaware. Abordamos la masa abierta y heterogénea: acomodamos a los agentes externos al proporcionar a cada uno de ellos un agente de gobernador correspondiente [12]. Este es un tipo de acompañante que interactúa con un agente externo, y observa e informa sobre su comportamiento. Mostramos nuestra arquitectura en la Figura 4 a continuación: un número de agentes de gobernadores externos de los agentes de Tuple Space Ag1 £ ¢ ¡GOV1 ⇐⇒............ I, S, ξ, Ω I, S, ξ, ω · · · Agn £ ¢ ¡Govn ⇐⇒ Figura 4: Arquitectura para las sociedades de agentes de los agentes externos interactúan (denotadas por el) con sus agentes de gobernadores correspondientes. Los agentes del gobernador tienen acceso a la descripción de VO, los estados actuales de la promulgación de VO, el estado de ejecución global ξ y el estado normativo global Ω. Los agentes de los gobernadores pueden escribir y leer desde (denotado por el ⇐⇒) Un espacio de memoria compartido (por ejemplo, una solución similar a la pizarra implementada como un espacio de tupla), actualizando la configuración global (denotada por el) para reflejar la dinámica deLa promulgación de VO. Los agentes de los gobernadores son necesarios porque no podemos anticipar o legislar sobre el diseño o el comportamiento de los agentes externos. Representamos a continuación cómo el agente externo decide los pares de gobernadores/agentes externos: las opciones no deterministas en el VO son decididas por el VO;El agente del gobernador considera cualquier aspecto normativo. El agente del gobernador representa al agente externo dentro del VO. Como tal, tiene el identificador único del agente externo. El agente del gobernador mantiene una cuenta de todos los roles que el agente externo está desempeñando actualmente: en nuestros VO, es posible que los agentes asuman más de un papel simultáneamente. Definimos en la Figura 5 cómo funcionan los agentes de los gobernadores: utilizamos un programa lógico para este propósito. Mostramos 1 principal (id, roles) ← 2 Obtener tuple (i, s, ξ, ω) ∧ 3 terminar (id, roles, i, ξ, ω) 4 main (id, roles) ← 5 Get Tuple (i,S, ξ, ω) ∧ 6 Normas de filtro (ID, roles, ω, ωid) ∧ 7 Discutir normas (id, roles, i, s, ξ, ωid, acciones) ∧ 8 Actualizar tupla (roles, acciones, newroles) ∧9 Main (ID, Newroles) Figura 5: Agente del Gobernador como programa lógico Las líneas de nuestras cláusulas numeradas 1-9. La primera cláusula (líneas 1-3) representa la condición de terminación: obtenga tuple/1 (línea 2) recupera i, s, ξ, Ω del espacio de tupla compartido y termina/4 verifica si la promulgación de VO actual (registrada en ξ)ha llegado a su fin. El equipo de agentes de gobernador sincroniza su acceso al espacio de la tupla [12], asegurando así que cada uno tenga la oportunidad de funcionar. La segunda cláusula (líneas 4-9) representa un bucle genérico cuando la condición de terminación de la primera cláusula no se mantiene. En este caso, la tupla se recupera nuevamente (línea 5) y el agente del gobernador procede (línea 6) para analizar el estado normativo global actual ω con el objetivo de obtener el subconjunto ωid ⊆ Ω de las normas que se refieren a la identificación del agente bajo los roles de los roles. Las normas de filtro de predicado/4 recolectan las normas que se aplican a la identificación del agente (el agente externo de los agentes del gobernador). En la línea 7, el agente del gobernador, en posesión de las normas aplicables, así como otra información relevante, interactúa con el agente externo para decidir sobre un conjunto de acciones que cumplen con las normas: estas acciones se utilizarán para actualizar (línea 8) laEstado de ejecución global ξ. En el proceso de actualización del estado de ejecución, se debe asignar un nuevo conjunto de roles al agente externo, representado como NewRoles. El agente del gobernador sigue en bucle (línea 9) utilizando el identificador para el agente externo y su nuevo conjunto de roles.5.1 Uso de normas anotadas ahora explicamos cómo las normas anotadas son utilizadas por los agentes conscientes de las normas. Lo hacemos a través de la definición de verificación de predicado/2, que se mantiene en su primer argumento, una acción candidata (en el formato de los elementos de ξ de def. 2), está dentro de la influencia de una prohibición anotada Ω, su segundo parámetro. La definición, como programa lógico, se muestra en la Figura 6. Verifica (línea 4) si el identificador de agente 1 verifica (acción, ω) ← 2 Action = A: R, ¯ϕ, T ∧ 3 Ω = (Fτ1: τ2 ϕ) σc, Td, Ta, TE ∧ 4 Unify (a, τ1, σ) ∧ unify (r, τ2, σ) ∧ unify (¯ϕ, ϕ, σ) ∧ 5 forall (σ, (σc ∈ σc, unify (σc, σ, σ)), mGU) ∧ 6MGUS = ∅∧ 7 ta ≤ t ≤ te Figura 6: Verifique si la acción está dentro de la influencia de la norma reducida y el papel de la acción se unifican con los términos apropiados τ1, τ2 de Ω y que las acciones ¯ϕ, ϕ se unan, todos debajo de debajoel mismo unifier σ. Luego verifica (líneas 5-6) que σ no unifica con ninguno de los conjuntos de conflictos en σc. Finalmente, en la línea 7 verifica si el tiempo de la acción está dentro de la influencia temporal de la norma. La verificación de la no unificación de σ con cualquier elemento de σc merece una explicación. Los elementos de σc son unificadores que indican qué valores no pueden tener las variables de la norma, es decir, representan brechas en el alcance original de la influencia de las normas. La prueba equivale a preguntar si la acción está fuera de tales brechas, es decir, la acción está dentro del alcance reducido de influencia de la norma.6. Conflicto de acción e inconsistencia En nuestra discusión anterior, el conflicto de normas y la inconsistencia se detectaron mediante una comparación directa de las fórmulas atómicas que representan la acción. Sin embargo, los conflictos e inconsistencias también pueden surgir indirectamente a través de las relaciones entre las acciones. Por ejemplo, si P (x) equivale a Q (x, x), entonces las normas PA: RP (X) y FA: RQ (X, X) están en conflicto ya que PA: Rp (x) se pueden reescribir como PA:RQ (x, x) y así tenemos a PA: RQ (X, X) y FA: RQ (X, X). En la discusión a continuación, nos concentramos en el conflicto de normas, pero la inconsistencia de la norma puede tratarse de manera similar, si cambiamos las modalidades deoípicas P para O. Las relaciones entre las acciones dependen del dominio. Diferentes dominios tienen formas distintas de relacionar sus acciones;Los ingenieros construyen ontologías para representar tales relaciones. Proponemos un medio simple para dar cuenta de tales relaciones y mostrar cómo se pueden conectar con los mecanismos introducidos anteriormente. En lugar de hacer uso de formalismos sofisticados para la construcción de ontología, empleamos un conjunto de axiomas de dominio, definidos a continuación: def.9. Los axiomas del dominio, denotados como δ, son un conjunto finito y posiblemente vacío de fórmulas ϕ → (ϕ1 ∧ · · · ∧ ϕn) donde ϕ, ϕi, 1 ≤ i ≤ n, son fórmulas atómicas de primer orden. Nuestro ejemplo anterior puede ser capturado por δ = {(p (x) → q (x, x)), (q (x, x) → p (x))}. Al representar explícitamente y manipular el conocimiento del dominio, logramos la generalidad: la misma maquinaria se puede usar con diferentes dominios. Un conjunto de normas puede tener diferentes conflictos e inconsistencias, para distintos dominios de aplicación.648 El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) el sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 649 650 El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) el sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 651