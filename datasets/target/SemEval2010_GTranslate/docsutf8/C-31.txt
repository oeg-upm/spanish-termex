Apocrita: un sistema distribuido de intercambio de archivos entre pares para las intranets Joshua J. Reynolds, Robbie McLeod, Qusay H. Mahmoud Distributed Computing and Wireless & Telecommunications Technology University de Guelph-Humber Toronto, ON, M9W 5L7 Canadá {JRINO04, RMCLE01,, RMCLE01,,,, Guelto Toronto, ON, M9W 5L7.QMAHMOUDATH@UOGOLPH.ca Resumen Muchas organizaciones deben a los documentos de los autores para diversos fines, y dichos documentos pueden ser accesibles por todos los miembros de la organización. Este acceso puede ser necesario para editar o simplemente ver un documento. En algunos casos, estos documentos se comparten entre los autores, por correo electrónico, que se editarán. Esto puede hacer que se envíen una versión incorrecta o se crean conflictos entre varios usuarios que intentan hacer enmiendas a un documento. Incluso puede haber múltiples documentos diferentes en el proceso de ser editado. Es posible que el usuario busque un documento en particular, que algunas herramientas de búsqueda, como Google Desktop, pueden ser una solución para documentos locales, pero no encontrarán un documento en otra máquina de usuarios. Surge otro problema cuando se pone a disposición un documento en una máquina de usuarios y ese usuario está fuera de línea, en cuyo caso el documento ya no es accesible. En este documento presentamos a Apocrita, un sistema revolucionario de intercambio de archivos P2P distribuido para intranets. Categorías y descriptores de sujetos c.2.4 [Redes de comunicación por computadora]: sistemas distribuidos - aplicaciones distribuidas. Términos generales Diseño, experimentación, rendimiento.1. Introducción El paradigma informático entre pares (P2P) se está convirtiendo en una forma completamente nueva de intercambio de recursos mutuos en Internet. Con el acceso a Internet de banda ancha cada vez más común, la tecnología P2P finalmente se ha convertido en una forma viable de compartir documentos y archivos de medios. Ya hay programas en el mercado que habilitan el intercambio de archivos P2P. Estos programas permiten a millones de usuarios compartir archivos entre ellos. Si bien la utilización de los clientes P2P ya es un paso gigantesco en comparación con la descarga de archivos de los sitios web, el uso de tales programas no está exento de problemas. Los archivos descargados aún requieren mucha administración manual por parte del usuario. El usuario aún necesita colocar los archivos en el directorio adecuado, administrar archivos con múltiples versiones, eliminar los archivos cuando ya no se desee. Nos esforzamos por facilitar el proceso de compartir documentos dentro de una intranet. Se requiere que muchas organizaciones sean documentos de los autores para diversos fines, y dichos documentos pueden necesitar ser accesibles por todos los miembros de la organización. Este acceso puede ser necesario para editar o simplemente ver un documento. En algunos casos, estos documentos se envían entre autores, por correo electrónico, para editar. Esto puede hacer que se envíen una versión incorrecta o se crean conflictos entre varios usuarios que intentan hacer enmiendas a un documento. Incluso puede haber múltiples documentos diferentes en el proceso de ser editado. Es posible que el usuario busque un documento en particular, que algunas herramientas de búsqueda, como Google Desktop, pueden ser una solución para documentos locales, pero no encontrarán un documento en otra máquina de usuarios. Además, algunas organizaciones no tienen un servidor de intercambio de archivos o la infraestructura de red necesaria para habilitar una. En este artículo presentamos a Apocrita, que es un sistema de intercambio de archivos P2P distribuido rentable para tales organizaciones. El resto de este documento está organizado de la siguiente manera. En la Sección 2, presentamos Apocrita. El mecanismo de indexación y protocolo distribuido se presentan en la Sección 3. La Sección 4 presenta el modelo de distribución entre pares. En la Sección 5 se presenta un prototipo de prueba de concepto, y las evaluaciones de rendimiento se analizan en la Sección 6. El trabajo relacionado se presenta es la Sección 7, y finalmente las conclusiones y el trabajo futuro se discuten en la Sección 8. 2. Apocrita apocrita es un sistema distribuido de intercambio de archivos entre pares, y ha sido diseñado para facilitar la búsqueda de documentos en un entorno de intranet. Actualmente, es posible que los documentos se encuentren en una máquina de usuarios o en una máquina remota. Incluso es posible que diferentes revisiones puedan residir en cada nodo en la intranet. Esto significa que debe haber un proceso manual para mantener versiones de documentos. Apocrita resuelve este problema utilizando dos enfoques. Primero, debido a la naturaleza inherente de Apocrita, el documento solo residirá en una sola ubicación lógica. En segundo lugar, Apocrita proporciona un método de revertir a versiones de documentos anteriores. El permiso de Apocrita para hacer copias digitales o difíciles de todo o parte de este trabajo para uso personal o en el aula se otorga sin tarifa siempre que las copias no sean o se distribuyan para obtener ganancias o ventajas comerciales y que las copias tengan este aviso y la cita completa del primeropágina. Copiar lo contrario, o volver a publicar, publicar en servidores o redistribuir a las listas, requiere un permiso específico previo y/o una tarifa. ACMSE07, 23-24 de marzo de 2007, Winston-Salem, NC, EE. UU. Copyright 2007 ACM 978-1-59593-629-5/07/0003 ... $ 5.00.174 también distribuirá documentos en múltiples máquinas para garantizar una alta disponibilidad de documentos importantes. Por ejemplo, si una máquina contiene un documento importante y la máquina es actualmente inaccesible, el sistema es capaz de mantener la disponibilidad del documento a través de este mecanismo de distribución. Proporciona una interfaz simple para buscar y acceder a archivos que pueden existir locales o de forma remota. La naturaleza distribuida de los documentos es transparente para el usuario. Apocrita admite un modelo de red descentralizado donde los pares usan un protocolo de descubrimiento para determinar los compañeros. Apocrita está destinado a usuarios de red en una intranet. El enfoque principal son las organizaciones que pueden no tener una red lo suficientemente grande como para requerir un servidor de archivos e infraestructura de soporte. Elimina la necesidad de que los documentos se compartan manualmente entre los usuarios mientras se editan y reduce la posibilidad de distribuir versiones conflictivas. El sistema también proporciona cierta redundancia y, en caso de falla de una sola máquina, no se perderán documentos importantes. Es independiente del sistema operativo y fácil de acceder a través de un navegador web o a través de una aplicación independiente. Para disminuir el tiempo requerido para indexar una gran cantidad de documentos, el proceso de indexación se distribuye en los nodos inactivos disponibles. Los archivos locales y remotos deben ser fácilmente accesibles a través de un sistema de archivos de montaje virtual, proporcionando transparencia para los usuarios.3. Indexación distribuida Apocrita utiliza un índice distribuido para todos los documentos que están disponibles en la intranet. Cada nodo contendrá parte del índice completo y tendrá en cuenta qué parte del índice tiene el nodo del otro. Un nodo podrá contactar a cada nodo que contenga una parte única del índice. Además, cada nodo tiene un índice local separado de sus propios documentos. Pero como se discutió más adelante, en la implementación actual, cada nodo tiene una copia de todo el índice. Se distribuye la indexación de los documentos. Por lo tanto, si un nodo está en el proceso de indexar muchos documentos, romperá el trabajo sobre los nodos. Una vez que se actualiza un índice local de nodos con los nuevos documentos, el índice distribuido se actualizará. El sistema de indexación distribuida actual consta de tres módulos separados: NodeController, FileSender y NodeIdexer. La responsabilidad de cada módulo se discute más adelante en esta sección.3.1 Protocolo de indexación El protocolo que hemos diseñado para la indexación distribuida se muestra en la Figura 1. Figura 1. Protocolo de indexación distribuida de Apocrita. Consulta inactiva: la consulta inactiva se envía desde el nodo iniciador para determinar qué otros nodos pueden ayudar con el proceso de indexación general. No se envían parámetros con el comando. El nodo receptor responderá con un comando ocupado o inactivo. Si se recibe el comando inactivo, el nodo de iniciación agregará el nodo de respuesta a una lista de ayudantes de indexación distribuidos disponibles. En el caso de que se reciba un comando ocupado, se ignora el nodo de respuesta. Ocupado: una vez que un nodo recibió una consulta IDL, determinará si puede considerarse un candidato para la indexación distribuida. Esta determinación se basa en el uso general de la CPU del nodo. Si el nodo está utilizando la mayoría de su CPU para otros procesos, el nodo responderá a la consulta inactiva con un comando ocupado. Idle: Al igual que con el caso de la respuesta ocupada, el nodo que recibe la consulta inactiva determinará su elegibilidad para la indexación distribuida. Para ser considerado un candidato para la indexación distribuida, el uso general de la CPU debe ser mínimo a todos para la indexación dedicada de los documentos distribuidos. Si este es el caso, el nodo responderá con un comando inactivo. Archivo entrante: una vez que el nodo iniciador ensambla un conjunto de nodos inactivos para ayudar con la indexación distribuida, dividirá los documentos que se enviarán a los nodos. Para hacer esto, envía un mensaje de archivo entrante, que contiene el nombre del archivo, así como el tamaño en los bytes. Después de que se haya enviado el comando de archivo entrante, el nodo de iniciación comenzará a transmitir el archivo al otro nodo. El nodo de iniciación pasará a través de los archivos que se enviarán al otro nodo;Cada transmisión de archivo está precedida por el comando de archivo entrante con los parámetros apropiados. Archivo de índice: una vez que el nodo de indexación ha completado el proceso de indexación del conjunto de archivos, debe devolver el índice resultante al nodo de iniciación. El índice se compone de múltiples archivos, que existen en el sistema de archivos del nodo de indexación. Al igual que con el comando de archivo entrante, el nodo de indexación transmite cada archivo de índice después de enviar un comando de archivo de índice. El comando de archivo de índice tiene dos parámetros: el primero es el nombre del índice, y el segundo es el tamaño del archivo en bytes. Enviar Complete: al enviar los conjuntos de archivos tanto para el índice como para los archivos que se indexarán, el nodo debe notificar al nodo correspondiente cuando el proceso esté completo. Una vez que el nodo de iniciación esté terminado de enviar el conjunto de documentos a indexar, luego enviará un comando Enviar un comando completo que indique al nodo de indexación que no hay más archivos y que el nodo puede continuar indexando los archivos. En el caso de que el nodo iniciado que envíe los archivos de índice, el nodo de indexación completará la transferencia con el comando Enviar el comando completo que indica al nodo de iniciación que no hay más archivos de índice que se enviarán y el nodo de iniciación puede ensamblar esos archivos de índice enEl índice principal. El nodecontroller es responsable de configurar conexiones con nodos en el estado inactivo para distribuir el proceso de indexación. Usando JXTA [5], el controlador de nodo obtendrá un conjunto de nodos. Este conjunto de nodos se itera y cada uno se envía al comando de consulta inactiva. Luego se recogen los nodos que responden con inactivo. El conjunto de nodos inactivos incluye el nodo que inicia el proceso de indexación distribuido, denominado nodo local. Una vez que se obtiene la colección de nodos inactivos, el nodo actualiza el conjunto de controladores y divide uniformemente el conjunto de documentos que se indexarán. Por ejemplo, si hay 100 documentos y 10 nodos (incluido el nodo local), cada nodo tendrá 10 documentos para indexar. Para cada nodo de indexación se crea una instancia del objeto FileSender. El FileSender es consciente del conjunto de documentos de los que el nodo es responsable. Una vez que se ha creado un objeto FileSender para cada nodo, el NodeController espera a que se complete cada FileSender. Cuando los objetos de FileSender hayan completado, el nodecontroller tomará los índices resultantes de 175 cada nodo y los pasará a una instancia del IndexCompiler, que mantiene el índice y la lista de los estudiantes de archivos. Una vez que el IndexCompiler haya completado, volverá al estado inactivo y activará el escáner de directorio para monitorear el conjunto de documentos de propiedad local para los cambios que pueden requerir reintegración. El NodeIndexer es responsable de recibir documentos que se le envíen al nodo iniciador y luego indexarlos usando el motor Lucene [7]. Una vez que se completa la indexación, el índice resultante se transmite de regreso al nodo de iniciación, así como se compila en el índice local de los nodos indexadores. Antes de iniciar el proceso de indexación, debe enviarse un mensaje de consulta inactiva. Este es el primer comando que configura el proceso de indexación. El nodo indexador determinará si se considera inactivo según el uso actual de la CPU. Como se describe en la sección Protocolo si el nodo no se usa y tiene un bajo porcentaje general de uso de la CPU, devolverá inactivo al comando de consulta inactiva. Si el uso de la CPU de los nodos indexadores es superior al 50% durante una cantidad de tiempo especificada, se considera que está ocupado y responderá al comando de consulta inactiva con ocupado. Si se determina que un nodo está ocupado, regresa a su estado de escucha esperando otra consulta inactiva de otro nodo iniciador. Si se determina que el nodo está inactivo, ingresará al estado donde recibirá archivos del nodo de iniciación que es responsable de la indexación. Una vez que todos los archivos son recibidos por el nodo iniciador, indicado por un mensaje de envío completo, inicia una instancia del motor de indexación de Lucene. Los archivos se almacenan en un directorio temporal separado de los nodos documentos locales que es responsable de mantener un índice de. El escritor de Lucene Index luego indexa todos los archivos transferidos. El índice se almacena en la unidad dentro de un directorio temporal separado del índice actual. Después de completar la indexación de los archivos, el nodo indexador ingresa al estado donde los archivos de índice se envían de regreso al nodo de iniciación. El nodo indexador buce a través de todos los archivos creados por Lucenes Indexwriter y los transmite al nodo iniciador. Una vez que se envían estos archivos, ese índice se fusiona en el índice completo de los nodos indexadores de los archivos existentes. Luego ingresa al estado inactivo donde luego escuchará cualquier otro nodo que requiriera distribuir el proceso de indexación. El objeto FileSender es el equivalente de nodo iniciador del nodo indexador. Inicia la comunicación entre el nodo iniciador y el nodo que ayudará en la indexación distribuida. El nodo iniciador ejecuta muchas instancias del nodo de FileSender uno para el otro que ha determinado que está inactivo. Al instanciar el FileSender se pasa el nodo que es responsable de contactar y el conjunto de archivos que deben enviarse. El primer trabajo de FileSenders es enviar los archivos que deben ser indexados por el otro nodo inactivo. Los archivos se transmiten uno a la vez al otro nodo. Envía cada archivo usando el comando de archivo entrante. Con ese comando envía el nombre del archivo que se envía y el tamaño en los bytes. Una vez que se hayan enviado todos los archivos, el FileSender envía el comando Enviar Complete. El FileSender crea una instancia de Lucenes IndexWriter y se prepara para crear el índice en un directorio temporal en el sistema de archivos. El FileSender comenzará a recibir los archivos que se guardarán dentro del índice. Recibe un comando de archivo de índice con el nombre de los archivos y el tamaño en los bytes. Este archivo se transmite en el directorio de índice temporal en el nodo FileSender. Después de que se haya completado la transferencia de los archivos de índice, el FileSender notifica la instancia del compilador de índice de que está listo para combinar el índice. Cada instancia del FileSender tiene su propia sección única de espacio temporal para almacenar el índice que se ha transferido desde el nodo de indexación. Al notificar al IndexCompiler, también pasará la ubicación de la ubicación del directorio de los servicios de archivos particular de ese índice.4. Distribución de pares Apocrita utiliza un modelo de distribución de igual a igual para distribuir archivos. Los archivos se distribuyen únicamente de un nodo de servicio a un nodo cliente sin tener en cuenta la disponibilidad de piezas de archivos de otros clientes en la red. Esto significa que las transferencias de archivo serán rápidas y eficientes y no deberían afectar severamente la usabilidad de servir nodos desde el punto de vista de un usuario local. El marco JXTA [5] se usa para implementar la funcionalidad entre pares. Esto se ha decidido debido a la línea de infracción extremadamente corta del proyecto que nos permite aprovechar más de cinco años de pruebas y desarrollo y apoyo de muchas organizaciones grandes que emplean a JXTA en sus propios productos. No nos preocupa ningún problema potencial de calidad porque se considera que JXTA es el marco de igual a igual más maduro y estable disponible. Usando la terminología JXTA, hay tres tipos de pares utilizados en la clasificación de nodos. Los pares de borde son típicamente nodos de bajo ancho de banda y no dedicados. Debido a estas características, los compañeros de borde no se usan con Apocrita. Los pares de retransmisión suelen ser nodos dedicados de mayor ancho de banda. Esta es la clasificación de todos los nodos en la red Apocrita y, como tal, son la clasificación predeterminada utilizada. Los pares de encuentro se utilizan para coordinar el paso de mensajes entre nodos en la red Apocrita. Esto significa que se requiere un mínimo de un par de la cita por subred.4.1 Descubrimiento de pares El subsistema del servidor Apocrita utiliza el Protocolo de descubrimiento de pares JXTA (PDP) para encontrar pares participantes dentro de la red como se muestra en la Figura 2. Figura 2. Proceso de descubrimiento por pares de Apocrita.176 El PDP escucha anuncios de pares de otros nodos en el Swarm de Apocrita. Si se detecta un anuncio de pares, el servidor intentará unirse al grupo de pares y comenzar a contribuir activamente a la red. Si el servicio Discovery no encuentra pares, el servidor creará un nuevo grupo de pares y comenzará a anunciar este grupo de pares. Este nuevo grupo de pares se anunciará periódicamente en la red;Cualquier nuevo compañero que se una a la red se adjuntará a este grupo de pares. Una clara ventaja de usar el JXTA PDP es que Apocrita no tiene que ser sensible a matices de redes particulares, como la unidad de transmisión máxima (MTU). Además, Apocrita no tiene que admitir métodos de entrega de paquetes de uno a muchos como multidifusión y, en cambio, puede confiar en JXTA para este soporte.4.2 Operación de consulta de índice Todos los nodos en el enjambre de Apocrita tienen una copia completa y actualizada del índice de red almacenado localmente. Esto hace que la consulta del índice de resultados de búsqueda sea trivial. A diferencia del protocolo Gnutella, una consulta no tiene que propagarse en toda la red. Esto también significa que el tiempo para devolver los resultados de la consulta es muy rápido, mucho más rápido que los protocolos que dependen de los nodos en la red para pasar la consulta por toda la red y luego esperar resultados. Esto se demuestra en la Figura 3. Figura 3. Operación de consulta de Apocrita. Cada documento en el enjambre tiene un número de identificación de documento único (ID). Un nodo consultará el índice y un resultado se devolverá con el número de identificación del documento, así como una lista de pares con una copia de la ID de documento coincidente. Entonces es responsabilidad del par de búsqueda contactar a los pares en la lista para negociar la transferencia de archivos entre el cliente y el servidor.5. Implementación de prototipo Apocrita utiliza el marco Lucene [7], que es un proyecto en desarrollo de Apache Software Foundation. Apache Lucene es una biblioteca de motor de búsqueda de texto de alto rendimiento y con todas las funciones escrita completamente en Java. En la implementación actual, Apocrita solo es capaz de indexar documentos de texto plano. Apocrita usa el marco JXTA [5] como una biblioteca de transporte de igual a igual entre nodos. JXTA se usa para pasar mensajes y archivos entre nodos en la red de búsqueda. Al usar JXTA, Apocrita aprovecha un mecanismo de transporte de pares confiable y probado. Utiliza la instalación de tuberías para pasar mensajes y archivos entre nodos. La instalación de tuberías proporciona muchos tipos diferentes de anuncios de tuberías. Esto incluye una tubería de unidifusión no garantizada, una tubería de unidifusión segura y una tubería no garantizada propagada. El paso de mensajes se usa para pasar mensajes de estado entre nodos para ayudar a indexación, búsqueda y recuperación. Por ejemplo, un nodo que intenta encontrar un nodo inactivo para participar en la indexación consultará nodos a través de la instalación de mensajes. Los nodos inactivos responderán con un mensaje de estado para indicar que están disponibles para comenzar a indexación. El paso de archivos se usa dentro de Apocrita para la transferencia de archivos. Después de que se haya buscado y ubicado un archivo dentro del grupo de pares, se abrirá un socket JXTA y se realizará la transferencia de archivos. Un socket JXTA es similar a un enchufe Java estándar, sin embargo, un socket JXTA utiliza tuberías JXTA en el transporte de red subyacente. El paso de archivos utiliza una tubería de unidifusión no garantizada para transferir datos. El paso de archivos también se usa dentro de Apocrita para la transferencia de índice. La transferencia de índice funciona exactamente como una transferencia de archivo. De hecho, la transferencia de índice en realidad pasa el índice como un archivo. Sin embargo, hay una diferencia clave entre la transferencia de archivos y la transferencia de índice. En el caso de la transferencia de archivos, se crea un socket entre solo dos nodos. En el caso de la transferencia de índice, se debe crear un socket entre todos los nodos en la red para pasar el índice, lo que permite que todos los nodos tengan un índice completo y completo de toda la red. Para facilitar esta transferencia de manera eficiente, la transferencia de índice utilizará una tubería propagada no garantizada para comunicarse con todos los nodos en la red Apocrita.6. Evaluación del rendimiento Es difícil comparar objetivamente los resultados obtenidos a través de Apocrita porque actualmente no hay otro sistema disponible con los mismos objetivos que Apocrita. Sin embargo, hemos evaluado el rendimiento de las secciones críticas del sistema. Se determinó que las secciones críticas son los procesos que son los más intensivos en el tiempo. La evaluación se completó en computadoras de laboratorio estándar en una LAN Ethernet de 100 MB/S;Las máquinas ejecutan Windows XP con una CPU Pentium 4 que se ejecuta a 2.4GHz con 512 MB de RAM. El tiempo de indexación se ha ejecutado contra ambos: The Time Magazine Collection [8], que contiene 432 documentos y 83 consultas y sus resultados más relevantes, y la colección NPL [8] que tiene un total de 11,429 documentos y 93 consultas con resultados esperados. Cada documento varía en tamaño entre 4KB y 8KB. Como lo demuestra la Figura 4, el número de nodos involucrados en el proceso de indexación afecta el tiempo necesario para completar los procesos de indexación a veces incluso drásticamente. Figura 4. Nodo vs. Tiempo de índice. La diferencia en pasar de un nodo de indexación a dos nodos de indexación es la más drástica y equivale a un tiempo de indexación 37% más rápido que un solo nodo de indexación. La diferente entre dos 177 nodos de indexación y tres nodos de indexación sigue siendo significativo y representa un tiempo de 16% más rápido que dos nodos de indexación. A medida que aumenta el número de nodos de indexación, los resultados son menos dramáticos. Esto se puede atribuir a la sobrecarga de tiempo asociada con la indexación de muchos nodos. El tiempo necesario para comunicarse con un nodo es constante, por lo que a medida que aumenta el número de nodos, esta constante se vuelve más frecuente. Además, la complejidad de unir los resultados de la indexación es una operación compleja y se complica aún más a medida que aumenta el número de nodos de indexación. El rendimiento del socket también es una parte muy importante de Apocrita. Los puntos de referencia se realizaron utilizando un archivo de 65 MB en un sistema con el cliente y el servidor que se ejecuta localmente. Esto se hizo para aislar posibles problemas de red. Aunque menos drásticos, se mostraron resultados similares cuando el cliente y el servidor se ejecutan en hardware independiente. Para mitigar posibles errores inesperados, cada prueba se ejecutó 10 veces. Figura 5. Sockets Java vs. Sockets JXTA. Como demuestra la Figura 5, el rendimiento de los enchufes JXTA es abismal en comparación con el rendimiento de los enchufes Java estándar. La tasa de transferencia mínima obtenida usando enchufes Java es 81,945 kb/s, mientras que el evaluador de transferencia mínimo obtenido usando enchufes JXTA es mucho más bajo a 3, 805kb/s. El evaluador de transferencia máximo que se obtiene con enchufes Java es 97,412kb/s, mientras que la tasa de transferencia máxima obtenida usando enchufes JXTA es de 5,530 kb/s. Finalmente, la tasa de transferencia promedio que usa enchufes Java es de 87,540 kb/s, mientras que la tasa de transferencia promedio que usa enchufes JXTA es de 4,293 kb/s. El principal problema encontrado en estos puntos de referencia es que el mecanismo de transporte de red subyacente no funciona de manera tan rápida o eficiente como se esperaba. Para obtener un aumento de rendimiento, el marco JXTA necesita ser sustituido con un enfoque más tradicional. El tiempo de indexación también es un cuello de botella y deberá mejorarse para que se mejore la calidad general de Apocrita.7. Trabajo relacionado Varios sistemas P2P descentralizados [1, 2, 3] existen hoy que Apocrita presenta parte de su funcionalidad. Sin embargo, Apocrita también tiene características únicas de búsqueda e indexación de novelas que hacen que este sistema sea único. Por ejemplo, Majestic-12 [4] es un proyecto de búsqueda e indexación distribuido diseñado para buscar en Internet. Cada usuario instalaría un cliente, que es responsable de indexar una parte de la web. Un área central para consultar el índice está disponible en la página web Majestic-12. El índice en sí no se distribuye, solo se distribuye el acto de indexación. El aspecto de indexación distribuido de este proyecto más relata de cerca los objetivos de Apocrita. Yacy [6] es una aplicación de búsqueda web de igual a igual. Yacy consiste en un rastreador web, un indexador, un motor de base de datos incorporado y un protocolo de intercambio de índice P2P. Yacy está diseñado para mantener un índice distribuido de Internet. Utilizó una tabla hash distribuida (DHT) para mantener el índice. El nodo local se usa para consultar, pero todos los resultados que se devuelven son accesibles en Internet. Yacy usó muchos compañeros y DHT para mantener un índice distribuido. Apocrita también utilizará un índice distribuido en futuras implementaciones y puede beneficiarse al usar una implementación de un DHT. Sin embargo, Yacy está diseñado como un motor de búsqueda web y, como tal, resuelve un problema muy diferente al de Apocrita.8. Conclusiones y trabajos futuros presentamos Apocrita, un sistema distribuido de búsqueda e indexación P2P destinado a usuarios de redes en una intranet. Puede ayudar a las organizaciones sin servidor de archivos de red o infraestructura de red necesaria para compartir documentos. Elimina la necesidad de que los documentos se compartan manualmente entre los usuarios mientras se editan y reducen la posibilidad de distribuir versiones conflictivas. Se ha construido un prototipo de prueba de concepto, pero los resultados de medir el mecanismo de transporte de red y el tiempo de indexación no fueron tan impresionantes como se imaginó inicialmente. A pesar de estas deficiencias, la experiencia obtenida del diseño e implementación de Apocrita nos ha dado más información sobre la construcción de sistemas distribuidos desafiantes. Para el trabajo futuro, Apocrita tendrá un modelo de distribución de contenido inteligente en el que una sola instancia de un archivo puede replicarse de manera inteligente y transparente en toda la red para garantizar que una copia de cada archivo importante siempre esté disponible, independientemente de la disponibilidad de nodos específicos en la red.. Además, planeamos integrar un sistema de control de revisión en la parte de distribución de contenido de Apocrita para que los usuarios puedan tener la capacidad de actualizar un archivo existente que encontraron y que mantengan la antigua revisión y se propague la nueva revisión. Finalmente, la implementación actual tiene algunos gastos generales y redundancia debido al hecho de que todo el índice se mantiene en cada nodo individual, planeamos diseñar un índice distribuido.9. Referencias [1] Rodrigues, R., Liskov, B., Shrira, L.: El diseño de un sistema robusto de igual a igual. Disponible en línea: http://www.pmg.lcs.mit.edu/~rodrigo/ew02-robust.pdf.[2] Chawathe, Y., Ratnasamy, S., Breslau, L., Lanham, N. y Chenker, S.: Hacer que los sistemas P2P tipo Gnutella sean escalables. En Actas de SigComm03, Karlsruhe, Alemania.[3] Cosecha: un sistema de búsqueda distribuido: http://harvest.sourceforge.net.[4] Majestic-12: Motor de búsqueda distribuido: http://www.majestic12.co.uk.[5] JXTA: http://www.jxta.org.[6] YACY: indexación web distribuida basada en P2P: http://www.yacy.net/yacy.[7] Lucene Search Engine Library: http://lucene.apache.org.[8] Colecciones de prueba (Time Magazine y NPL): www.dcs.gla.ac.uk/idom/ir_resources/test_collections.178