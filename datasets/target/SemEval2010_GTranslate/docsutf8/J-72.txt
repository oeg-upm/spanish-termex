Aplicación de algoritmos de aprendizaje a la obtención de preferencias Sebastien M. Lahaie División de Ingeniería y Ciencias Aplicadas Harvard University Cambridge, MA 02138 slahaie@eecs.harvard.edu David C. Parkes División de Ingeniería y Ciencias Aplicadas Harvard University Cambridge, MA 02138 Parkes@eecs.harvardResumen .edu Consideramos los paralelos entre el problema de obtención de preferencias en las subastas combinatorias y el problema de aprender una función desconocida de la teoría del aprendizaje. Mostramos que los algoritmos de aprendizaje pueden usarse como base para los algoritmos de obtención de preferencias. Los algoritmos de obtención resultantes realizan un número polinomial de consultas. También damos condiciones bajo las cuales los algoritmos resultantes tienen comunicación polinomial. Nuestro procedimiento de conversión nos permite generar protocolos de subastas combinatorias a partir de algoritmos de aprendizaje para polinomios, DNF monótono y funciones de umbral lineal. En particular, obtenemos un algoritmo que provoca ofertas de XOR con comunicación polinomial. Categorías y descriptores de sujetos F.2.0 [Análisis de algoritmos y complejidad del problema]: general;J.4 [Ciencias sociales y conductuales]: Economía;I.2.6 [Inteligencia artificial]: Algoritmos de aprendizaje de términos generales, Economía, Teoría 1. Introducción En una subasta combinatoria, los agentes pueden ofertar por paquetes de bienes en lugar de bienes individuales solos. Dado que hay un número exponencial de paquetes (en el número de bienes), la comunicación de valores sobre estos paquetes puede ser problemático. Comunicar las valoraciones de una manera única puede ser prohibitivamente costosa si el número de productos es solo moderadamente grande. Además, incluso podría ser difícil para los agentes determinar sus valoraciones para paquetes individuales [14]. Es de interés de tales agentes tener protocolos de subasta que requieran que oferten en la menor cantidad de paquetes posible. Incluso si los agentes pueden calcular de manera eficiente sus valoraciones, aún podrían ser reacios a revelarlos por completo en el curso de una subasta, porque dicha información puede ser valiosa para sus competidores. Estas consideraciones motivan la necesidad de protocolos de subasta que minimicen la comunicación y la revelación de información requerida para determinar una asignación óptima de bienes. Ha habido un trabajo reciente explorando los vínculos entre el problema de obtención de preferencias en las subastas combinatorias y el problema de aprender una función desconocida de la teoría del aprendizaje computacional [5, 19]. En la teoría del aprendizaje, el objetivo es aprender una función a través de varios tipos de consultas, como ¿cuál es el valor de las funciones en estas entradas? En la obtención de preferencias, el objetivo es obtener suficiente información parcial sobre las preferencias para poder calcular una asignación óptima. Aunque los objetivos de aprendizaje y obtención de preferencias difieren un poco, está claro que estos problemas comparten una estructura similar, y no debería sorprendernos que las técnicas de un campo sean relevantes para el otro. Mostramos que cualquier algoritmo de aprendizaje exacto con consultas de membresía y equivalencia puede convertirse en un algoritmo de obtención de preferencias con consultas de valor y demanda. El algoritmo de obtención resultante garantiza la obtención en un número polinomial de consultas de valor y demanda. Aquí nos referimos al polinomio en la cantidad de bienes, agentes y los tamaños de las funciones de valoración de los agentes en un esquema de codificación dado. Los esquemas de obtención de preferencias no han considerado tradicionalmente este último parámetro. Argumentamos que las garantías de complejidad para los esquemas de obtención deberían permitir la dependencia de este parámetro. La introducción de este parámetro también nos permite garantizar la comunicación polinomial en el peor de los casos, que generalmente no se puede lograr solo en el número de bienes y agentes. Finalmente, utilizamos nuestro procedimiento de conversión para generar protocolos de subastas combinatorias a partir de algoritmos de aprendizaje para polinomios, DNF monótono y funciones de umbral lineal. Por supuesto, una subasta combinatoria de un solo disparo donde los agentes proporcionan sus funciones de valoración completas a la vez también tendrían comunicación polinómica en el tamaño de las valoraciones de los agentes, y solo requieren una consulta. La ventaja de nuestro esquema es que los agentes pueden verse como cajas negras que proporcionan información incremental sobre sus valoraciones. No hay carga sobre los agentes de formular sus valoraciones en un esquema de codificación de los subastadores que eligen. Esperamos que esta sea una consideración importante en la práctica. Además, con nuestro esquema, toda la revelación solo ocurre en el peor de los casos.180 Por ahora, dejamos de lado el tema de los incentivos al derivar los algoritmos de obtención. Nuestro enfoque está en la complejidad del tiempo y la comunicación de la obtención de preferencias, independientemente de las limitaciones de incentivos, y en la relación entre las complejidades de aprendizaje y obtención de preferencias. Trabajo relacionado. Zinkevich et al.[19] Considere el problema de aprender clases restringidas de funciones de valoración que pueden representarse utilizando fórmulas de lectura y DNF de caja de herramientas. Las fórmulas de lectura pueden representar ciertas sustitutabilidades, pero no complementarias, mientras que lo opuesto es válido para la caja de herramientas DNF. Dado que su trabajo también se basa en la teoría del aprendizaje, permiten la dependencia del tamaño de la valoración objetivo como nosotros (aunque las valoraciones de lectura siempre se pueden representar sucintamente de todos modos). Su trabajo solo hace uso de consultas de valor, que son bastante limitadas en poder. Debido a que nos permitimos consultas de demanda, podemos obtener un esquema de obtención para las funciones de valoración general. Blum et al.[5] Proporcionar resultados relacionados con las complejidades del aprendizaje de consultas y la obtención de preferencias. Consideran modelos con consultas de membresía y equivalencia en el aprendizaje de consultas, y las consultas de valor y demanda en la obtención de preferencias. Muestran que ciertas clases de funciones pueden aprender eficientemente pero no provocadas de manera eficiente, y viceversa. En contraste, nuestro trabajo muestra que dada una versión más general (pero aún bastante estándar) de la consulta de demanda que el tipo que consideran, la complejidad de la obtención de preferencias no es mayor que la complejidad del aprendizaje. Mostraremos que las consultas de demanda pueden simular consultas de equivalencia hasta que tengamos suficiente información sobre valoraciones para implicar una solución al problema de obtención. Nisan y Segal [12] estudian la complejidad de la comunicación de la obtención de preferencias. Muestran que para muchas clases ricas de valoraciones, la peor complejidad de la comunicación de calcular una asignación óptima es exponencial. Sus resultados se aplican al modelo de complejidad computacional de caja negra. En este modelo, los algoritmos pueden hacer preguntas sobre las valoraciones de los agentes y recibir respuestas honestas, sin ninguna idea de cómo los agentes calculan internamente sus valoraciones. De hecho, este es el marco básico de la teoría del aprendizaje. Nuestro trabajo también aborda el tema de la complejidad de la comunicación, y podemos obtener algoritmos que proporcionan garantías de comunicación significativas a pesar de los resultados negativos de Nisan y Segals. Su trabajo motiva la necesidad de confiar en los tamaños de las funciones de valoración de los agentes en declarar los peores resultados.2. El aprendizaje de la consulta de los modelos 2.1 El modelo de aprendizaje de consulta que consideramos aquí se llama aprendizaje exacto de las consultas de membresía y equivalencia, introducido por Angluin [2]. En este modelo, el objetivo de los algoritmos de aprendizaje es identificar exactamente una función objetivo desconocida F: X → Y a través de consultas a un Oracle. La función de destino se extrae de una función de clase C que se conoce por el algoritmo. Típicamente, el dominio x es un subconjunto de {0, 1} m, y el rango y es {0, 1} o algún subconjunto de los números reales ê. A medida que avanza el algoritmo, construye una hipótesis manifiesta ˜f, que es su estimación actual de la función objetivo. Tras la terminación, la hipótesis manifiesta de un algoritmo de aprendizaje correcto satisface ˜f (x) = f (x) para todos x ∈ X. Es importante especificar la representación que se usará para codificar funciones de C. Por ejemplo, considere la siguiente función de {0, 1} m a ê: f (x) = 2 si x consiste en m 1s y f (x) = 0 de lo contrario. Esta función puede simplemente representarse como una lista de valores de 2M. O puede codificarse como el polinomio 2x1 · · · xm, que es mucho más sucinto. La elección de la codificación puede tener un impacto significativo en los requisitos de tiempo y espacio del algoritmo de aprendizaje. Deje que el tamaño (f) sea el tamaño de la codificación de F con respecto a la clase de representación dada. La mayoría de las clases de representación tienen una medida natural de tamaño de codificación. El tamaño de un polinomio se puede definir como el número de coeficientes no cero en el polinomio, por ejemplo. Por lo general, solo nos referiremos a las clases de representación;Las clases de función correspondientes estarán implícitas. Por ejemplo, la clase de representación de fórmulas DNF monótonas implica la clase de función de las funciones booleanas monótonas. Dos tipos de consultas se usan comúnmente para el aprendizaje exacto: consultas de membresía y equivalencia. En una consulta de membresía, el alumno presenta algunas x ∈ X y el Oracle responde con F (x). En una consulta de equivalencia, el alumno presenta su hipótesis manifiesta ˜f. El Oracle responde sí si ˜f = f, o devuelve un contraejemplo x tal que ˜f (x) = f (x). Una consulta de equivalencia es adecuada si el tamaño (˜f) ≤ tamaño (f) en el momento en que se presenta la hipótesis manifiesta. Estamos interesados en algoritmos de aprendizaje eficientes. Las siguientes definiciones están adaptadas de Kearns y Vazirani [9]: Definición 1. La clase C de representación es PolynomialQuery que se puede aprender exactamente de las consultas de membresía y equivalencia si hay un polinomio fijo P (·, ·) y un algoritmo L con acceso a consultas de membresía y equivalencia de un oráculo tal que para cualquier función objetivo f ∈ C, lsalidas después de la máximo p (tamaño (f), m) consulta una función ˜f ∈ C tal que ˜f (x) = f (x) para todas las instancias x. Del mismo modo, la clase C de representación se puede aprender de manera eficiente de las consultas de membresía y equivalencia si el algoritmo L genera una hipótesis correcta en el tiempo P (tamaño (F), M), para algún polinomio fijo P (·, ·). Aquí M es la dimensión del dominio. Dado que la función objetivo debe reconstruirse, también necesariamente permitimos la dependencia polinomial del tamaño (F).2.2 PREVENTACIÓN DE PREFERENCIA En una subasta combinatoria, se debe asignar un conjunto de bienes M entre un conjunto de agentes n para maximizar la suma de las valoraciones de los agentes. Tal asignación se llama eficiente en la literatura económica, pero nos referiremos a ella como óptimo y reservaremos el término eficiente para referirse a la eficiencia computacional. Dejamos que n = | n |y m = | m |. Una asignación es una partición de los objetos en los paquetes (S1, ..., Sn), de modo que si ∩ sj = ∅ para todos los distintos i, j ∈ N. Sea γ el conjunto de posibles asignaciones. Cada agente i ∈ N tiene una función de valoración VI: 2m → ê sobre el espacio de posibles paquetes. Cada valoración VI se extrae de una clase conocida de valoraciones vi. Las clases de valoración no necesitan coincidir. Asumiremos que todas las valoraciones consideradas están normalizadas, lo que significa V (∅) = 0, y que no hay externalidades, que significa VI (S1, ..., Sn) = vi (Si), para todos los agentes i ∈ N,Para cualquier asignación (S1, ..., sn) ∈ γ (es decir, un agente solo se preocupa por el paquete asignado a ella). Las valoraciones que satisfacen estas condiciones se denominan valoraciones generales.1 A menudo, las valoraciones generales están hechas para satisfacer los 181 adicionales también suponen que los agentes tienen funciones de utilidad cuasi lineales, lo que significa que los servicios públicos de agentes se pueden dividir en componentes monetarios y no monetarios. Si un agente I se asigna paquete S al precio P, deriva UI (S, P) = VI (S) - p.Una función de valoración puede verse como un vector de 2M-1 valores reales no negativos. Por supuesto, también puede haber representaciones más sucintas para ciertas clases de valoración, y ha habido mucha investigación sobre lenguajes de licitación concisos para varios tipos de valoraciones [11]. Un ejemplo clásico al que nos referiremos nuevamente más tarde es el lenguaje de ofertas XOR. En este idioma, el agente proporciona una lista de ofertas atómicas, que consisten en un paquete junto con su valor. Para determinar el valor de un paquete dado estas ofertas, se busca el paquete de más alto valor enumerado en las ofertas atómicas de tal manera que S ⊆ S. es entonces cuando v (s) = V (s). Como en el entorno de la teoría del aprendizaje, generalmente solo nos referiremos a los idiomas de licitación en lugar de las clases de valoración, porque las clases de valoración correspondientes estarán implícitas. Por ejemplo, el lenguaje de licitación XOR implica la clase de valoraciones que satisfacen la eliminación gratuita, que es la condición de que A ⊆ B ⇒ V (A) ≤ V (B). Dejamos el tamaño (V1, ..., Vn) = èn i = 1 tamaño (vi). Es decir, el tamaño de un vector de valoraciones es el tamaño de la concatenación de las representaciones de valoraciones en sus respectivos esquemas de codificación (idiomas de licitación). Para hacer una analogía con la teoría del aprendizaje computacional, suponemos que todas las clases de representación consideradas son interpretables polinomialmente [11], lo que significa que el valor de un paquete puede calcularse en tiempo polinómico dada la representación de las funciones de valoración. Más formalmente, una clase de representación (lenguaje de licitación) C es polinómicamente interpretable si existe un algoritmo que dada como entrada algunas v ∈ C y una instancia x ∈ X calcula el valor v (x) en el tiempo Q (tamaño (v), M), para algunas Q (·, ·) .2 fijas en las rondas intermedias de una subasta (iterativa), el subastador habrá obtenido información sobre las funciones de valoración de los agentes a través de varios tipos de consultas. Por lo tanto, habrá construido un conjunto de valoraciones manifiestas, denotadas ˜v1 ,..., ˜vn.3 Los valores de estas funciones pueden corresponder exactamente a los valores del agente verdadero, o pueden ser, por ejemplo, los límites superiores o inferiores en los valores verdaderos, dependiendo de los tipos de consultas hechas. También pueden ser simplemente valores predeterminados o aleatorios si no se ha adquirido información sobre ciertos paquetes. El objetivo en el problema de obtención de preferencias es construir un conjunto de valoraciones manifiestas de tal manera que: arg max (s1, ..., sn) ∈γ i∈N ˜Vi (Si) ⊆ arg max (s1, ..., sn) ∈γ i∈N VI (Si) es decir, las valoraciones manifiestas proporcionan suficiente información para calcular una asignación que es óptima con respecto a las verdaderas valoraciones. Tenga en cuenta que solo requerimos una de esas asignaciones óptimas.condición de libre disgusto (monotonicidad), pero no la necesitamos en este momento.2 Esto excluye o ∗, suponiendo P = NP, porque interpretar las ofertas de este lenguaje es NP-HARD mediante la reducción del empaque de sets ponderado, y no existe una clase de representación bien estudiada en la teoría del aprendizaje que sea claramente análoga o ∗.3 Esta visión de las subastas iterativas está destinada a ser paralelo a la configuración de aprendizaje. En muchas subastas combinatorias, las valoraciones manifiestas no se mantienen explícitamente, sino que simplemente implican la historia de las ofertas. Dos consultas típicas utilizadas en la obtención de preferencias son las consultas de valor y demanda. En una consulta de valor, el subastador presenta un paquete s ⊆ m y el agente responde con su valor (exacto) para el paquete V (s) [8]. En una consulta de demanda, el subastador presenta un vector de precios no negativos p ∈ ê (2m) sobre los paquetes junto con un paquete S. El agente responde sí si es el caso que s ∈ Arg max s ⊆m V (s) - p (s) ¡o de otra manera presenta un paquete s tal que v (s) - p (s)> v (s) - p (s) es decir, el agente confirma que el paquete presentado es más preferido en elPrecios cotizados, o indica uno mejor [15] .4 Tenga en cuenta que incluimos ∅ como un paquete, por lo que el agente solo responderá sí si su utilidad para el paquete propuesto no es negativo. Tenga en cuenta también que comunicar precios no lineales no implica necesariamente citar un precio para cada paquete posible. Puede haber formas más sucintas de comunicar este vector, como mostramos en la Sección 5. Hacemos las siguientes definiciones para paralelos a la configuración de aprendizaje de consultas y para simplificar las declaraciones de resultados posteriores: Definición 2. Las clases de representación V1 ,..., VN puede ser quirado polinomial provocado por consultas de valor y demanda si hay un polinomio fijo P (·, ·) y un algoritmo l con acceso a consultas de valor y demanda de los agentes de tal manera que para cualquier (v1, ..., ...vn) ∈ V1 ×...× VN, sal de L.VI (Si). Del mismo modo, la clase C de representación se puede provocar de manera eficiente de las consultas de valor y demanda si el algoritmo l genera una asignación óptima con la comunicación P (tamaño (V1, ..., VN), M), para algunos polinomiales fijos (·, ·, ·). Hay algunas diferencias clave aquí con la definición de aprendizaje de consultas. Hemos eliminado el término exactamente ya que las funciones de valoración no necesitan determinarse exactamente para calcular una asignación óptima. Además, un algoritmo de obtención eficiente es la comunicación polinómica, en lugar del tiempo polinomial. Esto refleja el hecho de que la comunicación en lugar del tiempo de ejecución es el cuello de botella en obtención. Calcular una asignación óptima de bienes incluso cuando se les da las valoraciones verdaderas es NP-Hard para una amplia gama de clases de valoración. Por lo tanto, no es razonable requerir tiempo polinomial en la definición de un algoritmo de obtención de preferencia eficiente. Nos complace centrarnos en la complejidad de comunicación de la obtención porque se cree ampliamente que este problema es más significativo en la práctica que el de la determinación del ganador [11] .5 4 Esto difiere ligeramente de la definición proporcionada por Blum et al.[5] Sus consultas de demanda están restringidas a precios lineales sobre los bienes, donde el precio de un paquete es la suma de los precios de sus bienes subyacentes. En contraste, nuestras consultas de demanda permiten precios no lineales, es decir, un precio distinto para cada paquete posible. Es por eso que el límite inferior en su teorema 2 no contradice nuestro resultado que sigue.5 Aunque el problema de determinación del ganador es NP-Hard para valoraciones generales, existen muchos algoritmos que lo resuelven de manera eficiente en la práctica. Estos van desde algoritmos de propósito especial [7, 16] hasta enfoques que utilizan solucionadores IP estándar [1].182 Dado que las valoraciones no necesitan ser provocadas exactamente, inicialmente está menos claro si la dependencia polinomial del tamaño (V1, ..., VN) está justificada en esta configuración. Intuitivamente, este parámetro está justificado porque debemos aprender valoraciones exactamente al realizar la obtención, en el peor de los casos. Abordamos esto en la siguiente sección.3. Entre los paralelos, entre las consultas de equivalencia y demanda, hemos descrito la configuración de obtención de aprendizaje y preferencia de consultas de una manera que resalte sus similitudes. Las consultas de valor y membresía son análogos claros. Un poco menos obvio es el hecho de que las consultas de equivalencia y demanda también son análogos. Para ver esto, necesitamos el concepto de precios de Lindahl. Los precios de Lindahl son precios no lineales y no anónimos sobre los paquetes. No son lineales en el sentido de que a cada paquete se le asigna un precio, y este precio no es necesariamente la suma de los precios sobre sus bienes subyacentes. No son anónimos en el sentido de que dos agentes pueden enfrentar diferentes precios para el mismo paquete de bienes. Por lo tanto, los precios de Lindahl son de la forma pi (s), para todos los s ⊆ m, para todos los precios de N. lindahl se presentan a los agentes en las consultas de demanda. Cuando los agentes han normalizado las funciones de utilidad cuasi-lineal, Bikhchandani y Ostroy [4] muestran que siempre existen precios de Lindahl de tal manera que (S1, ..., Sn) es una asignación óptima si y solo si Si ∈ Arg max SI VI (SI) - Pi (Si) ¡∀i ∈ N (1) (S1, ..., Sn) ∈ Arg max (S1, ..., sn) ∈γ i∈N pi (Si) (2) condición (1) establece que a cada agente se le asigna un paquete que maximiza su utilidad a los precios dados. La condición (2) establece que la asignación maximiza los ingresos de los subastadores a los precios dados. El escenario en el que se mantienen estas condiciones se llama equilibrio de Lindahl, o a menudo un equilibrio competitivo. Decimos que los precios de Lindahl apoyan la asignación óptima. Por lo tanto, es suficiente anunciar los precios de apoyo de Lindahl para verificar una asignación óptima. Una vez que hemos encontrado una asignación con los precios de apoyo de Lindahl, se resuelve el problema de obtención. El problema de encontrar una asignación óptima (con respecto a las valoraciones manifiestas) puede formularse como un programa lineal cuyas soluciones se garantiza que son integrales [4]. Las variables duales de este programa lineal están respaldando los precios de Lindahl para la asignación resultante. La función objetivo del programa dual es: min pi (s) πs + i∈N πi (3) con πi = max s⊆m (i (s) - pi (s)) πs = max (s1, ..., Sn) ∈γ i∈N pi (Si) Los valores óptimos de πi y πs corresponden a la utilidad máxima al agente I con respecto a su valoración manifiesta y los ingresos máximos para el vendedor. Por lo general, hay una gama de posibles precios de Lindahl que respalda una asignación óptima dada. Las valoraciones de los agentes manifiestan, de hecho, los precios válidos de Lindahl, y nos referimos a ellos como precios máximos de Lindahl. De todos los vectores posibles de los precios de Lindahl, los precios máximos de Lindahl maximizan la utilidad del subastador, de hecho, dándole todo el bienestar social. Por el contrario, los precios que maximizan el componente è i∈N πi del objetivo (la suma de los servicios públicos de los agentes) son precios mínimos de Lindahl. Cualquier precio de Lindahl servirá para nuestros resultados, pero algunos pueden tener mejores propiedades de obtención que otras. Tenga en cuenta que una consulta de demanda con precios máximos de Lindahl es casi idéntica a una consulta de equivalencia, ya que en ambos casos comunicamos la valoración manifiesta al agente. Dejamos para el trabajo futuro la cuestión de los precios de Lindahl para elegir minimizar la obtención de preferencias. Teniendo en cuenta ahora por qué las consultas de demanda y equivalencia son análogos directos, primero tenga en cuenta que, dado el πi en algún equilibrio de lindahl, configurando pi (s) = max {0, ˜vi (s) - πi} (4) para todos los i ∈ N y S⊆ M produce precios válidos de Lindahl. Estos precios dejan a todos los agentes indiferentes en todos los paquetes con precio positivo y satisfacen la condición (1). Por lo tanto, las consultas de demanda también pueden comunicar implícitamente las valoraciones manifiestas, ya que los precios de Lindahl generalmente serán una constante aditiva lejos de estas por la igualdad (4). En el siguiente lema mostramos cómo obtener contraejemplos para consultas de equivalencia a través de consultas de demanda. Lema 1. Supongamos que un agente responde con un paquete preferido cuando se propone un paquete y los precios de soporte de Lindahl P (s) (que respalda con respecto a la valoración del manifiesto de los agentes). Entonces ˜v (s) = v (s) o ˜v (s) = v (s). Prueba. Tenemos las siguientes desigualdades: ˜v (s) - p (s) ≥ ˜v (s) - p (s) ⇒ ˜v (s) - ˜v (s) ≤ p (s) - p (s) (s) (s) (5) V (S) - P (S)> V (S) - P (S) ⇒ V (S) - V (S)> P (S) - P (S) (6) Desigualdad (5) SostenLos precios respaldan la asignación propuesta con respecto a la valoración manifiesta. La desigualdad (6) se mantiene porque el agente de hecho prefiere S a S dada los precios, de acuerdo con su respuesta a la consulta de demanda. Si fuera el caso que ˜v (s) = V (s) y ˜v (s) = V (s), estas desigualdades representarían una contradicción. Por lo tanto, al menos uno de S y S es un contraejemplo para la valoración del manifiesto de los agentes. Finalmente, justificamos la dependencia del tamaño (V1, ..., VN) en problemas de obtención. Nisan y Segal (Proposición 1, [12]) y Parkes (Teorema 1, [13]) muestran que el apoyo a los precios de Lindahl necesariamente debe revelarse en el curso de cualquier protocolo de obtención de preferencia que termine con una asignación óptima. Además, Nisan y Segal (Lemma 1, [12]) indican que en el peor de los casos, los precios de los agentes deben coincidir con sus valoraciones (hasta una constante), cuando la clase de valoración es lo suficientemente rica como para contener valoraciones duales (como será lacaso con las clases más interesantes). Dado que revelar los precios de Lindahl es una condición necesaria para establecer una asignación óptima, y dado que los precios de Lindahl contienen la misma información que las funciones de valoración (en el peor de los casos), lo que permite la dependencia del tamaño (V1, ..., VN) en problemas de obtenciónes completamente natural.183 4. Desde el aprendizaje hasta la obtención de preferencias, la clave para convertir un algoritmo de aprendizaje hasta un algoritmo de obtención es simular consultas de equivalencia con consultas de demanda y valor hasta que se encuentre una asignación óptima. Debido a nuestra construcción de precios de Lindahl, cuando todos los agentes responden sí a una consulta de demanda, hemos encontrado una asignación óptima, análoga al caso en el que un agente responde sí a una consulta de equivalencia cuando la función objetivo se ha aprendido exactamente. De lo contrario, podemos obtener un contraejemplo a una consulta de equivalencia dada una respuesta de los agentes a una consulta de demanda. Teorema 1. Las clases de representación V1 ,..., VN puede ser quirado polinomial provocado por consultas de valor y demanda si pueden ser una quereria polinomial aprendida exactamente de las consultas de membresía y equivalencia. Prueba. Considere el algoritmo de obtención en la Figura 1. Cada consulta de membresía en el Paso 1 se simula con una consulta de valor ya que de hecho son idénticas. Considere el paso 4. Si todos los agentes responden que sí, la condición (1) se mantiene. La condición (2) se mantiene porque la asignación calculada es una maximización de ingresos para el subastador, independientemente de las verdaderas valoraciones de los agentes. Por lo tanto, se ha encontrado una asignación óptima. De lo contrario, al menos uno de SI o SI es un contraejemplo para ˜Vi, por Lemma 1. Identificamos un contraejemplo realizando consultas de valor en ambos paquetes y lo proporcionamos a la IA como respuesta a su consulta de equivalencia. Este procedimiento se detendrá, ya que en el peor de los casos se aprenderán exactamente las valoraciones de los agentes, en cuyo caso la asignación óptima y los precios de Lindahl serán aceptados por todos los agentes. El procedimiento realiza un número polinomial de consultas, desde A1 ,..., Y son todos los algoritmos de aprendizaje de la cuarta polinomio. Tenga en cuenta que el procedimiento de conversión da como resultado un algoritmo de obtención de preferencia, no un algoritmo de aprendizaje. Es decir, el algoritmo resultante no solo aprende las valoraciones exactamente, luego calcula una asignación óptima. Más bien, provoca información parcial sobre las valoraciones a través de consultas de valor, y prueba periódicamente si se ha recopilado suficiente información proponiendo una asignación a los agentes a través de consultas de demanda. Es posible generar un equilibrio de Lindahl para las valoraciones V1 ,..., VN utilizando una asignación y precios derivados utilizando valoraciones manifiestas ˜v1 ,..., ˜vn, y encontrar una asignación óptima no implica que las valoraciones de los agentes se hayan aprendido exactamente. El uso de consultas de demanda para simular consultas de equivalencia permite esta detención temprana. No obtendríamos esta propiedad con consultas de equivalencia basadas en valoraciones manifiestas.5. Complejidad de la comunicación En esta sección, pasamos al tema de la complejidad de la comunicación de la obtención. Nisan y Segal [12] muestran que para una variedad de espacios de valoración ricos (como valoraciones generales y submodulares), la carga de comunicación en el peor de los casos de determinar los precios de Lindahl es exponencial en la cantidad de bienes, m.La carga de comunicación se mide en términos del número de bits transmitidos entre agentes y subastadores en caso de comunicación discreta, o en términos del número de números reales transmitidos en el caso de la comunicación continua. La conversión de algoritmos de aprendizaje eficientes a un algoritmo de obtención produce un algoritmo cuyas consultas tienen tamaños polinomiales en los parámetros my tamaño (V1, .., VN). Teorema 2. Las clases de representación V1 ,..., VN se puede obtener de manera eficiente de las consultas de valor y demanda si se pueden aprender de manera eficiente de las consultas de membresía y equivalencia. Prueba. El tamaño de cualquier consulta de valor es O (m): el mensaje consiste únicamente en el paquete consultado. Para comunicar los precios de Lindahl al Agente I, es suficiente comunicar la función de valoración de los agentes y el valor πi, por igualdad (4). Tenga en cuenta que un algoritmo de aprendizaje eficiente nunca aumenta una hipótesis manifiesta del tamaño superpolinomial, porque el tiempo de ejecución de los algoritmos también sería superpolinomio, contradiciendo la eficiencia. Por lo tanto, la comunicación de la valoración de manifiesto requiere tamaño en la mayoría de P (tamaño (VI), M), para una P polinomial que es el tiempo de ejecución del algoritmo de aprendizaje eficiente. Que representan el excedente πi al agente No puedo requerir espacio mayor que Q (tamaño (˜Vi), m) para algún Q polinomio fijo, porque suponemos que la representación elegida es polinómicamente interpretable y, por lo tanto, cualquier valor generado será de tamaño polinomial. También debemos comunicarnos con i su paquete asignado, por lo que el tamaño total del mensaje para una consulta de demanda es como máximo p (tamaño (vi), m) + q (p (tamaño (vi), m), m) + o (m). Claramente, una respuesta de los agentes a una consulta de valor o demanda tiene un tamaño en la mayoría de Q (tamaño (vi), m) + o (m). Por lo tanto, las consultas de valor y demanda, y las respuestas a estas consultas, son siempre de tamaño polinómico. Un algoritmo de aprendizaje eficiente realiza un número polinomial de consultas, por lo que la comunicación total del algoritmo de obtención resultante es polinomio en los parámetros relevantes. A menudo habrá límites explícitos en el número de consultas de membresía y equivalencia realizadas por un algoritmo de aprendizaje, con constantes que no están enmascaradas por la notación Big-O. Estos límites pueden traducirse a límites explícitos en el número de consultas de valor y demanda realizadas por el algoritmo de obtención resultante. Superior limitamos el tamaño de la hipótesis manifiesta con el tiempo de ejecución del algoritmo de aprendizaje en el Teorema 2. Es probable que podamos hacer mucho mejor que esto en la práctica. Recuerde que una consulta de equivalencia es apropiada si el tamaño (˜f) ≤ tamaño (f) en el momento en que se realiza la consulta. Si las consultas de equivalencia de algoritmos de aprendizaje son apropiadas, también puede ser posible proporcionar límites estrechos en los requisitos de comunicación del algoritmo de obtención resultante. El teorema 2 muestra que los algoritmos de obtención que dependen del parámetro de tamaño (V1, ..., VN) evitan nisan y segals [12] resultados negativos en la peor complejidad de comunicación de problemas de asignación eficientes. Proporcionan garantías con respecto a los tamaños de las instancias de las funciones de valoración enfrentadas en cualquier ejecución del algoritmo. A estos algoritmos les irá bien si la clase de representación elegida proporciona representaciones sucintas para las valoraciones más simples y comunes, y por lo tanto el enfoque regresa a uno de lenguajes de licitación compactos pero expresivos. Consideramos estos problemas a continuación.6. Aplicaciones En esta sección, demostramos la aplicación de nuestros métodos a clases de representación particulares para valoraciones combinatorias. Hemos demostrado que el problema de obtención de preferencias para las clases de valoración V1 ,..., VN puede reducirse 184 Dado: Algoritmos de aprendizaje exactos A1 ,..., An para las clases de valoraciones v1 ,..., Vn respectivamente. Luce hasta que haya una señal para detener: 1. Ejecutar a1 ,..., Un paralelo en sus respectivos agentes hasta que cada uno requiera una respuesta a una consulta de equivalencia, o se ha detenido con la valoración exacta de los agentes.2. Calcule una asignación óptima (S1, ..., Sn) y los precios de Lindahl correspondientes con respecto a las valoraciones manifiestas ˜V1 ,..., ˜vn determinado hasta ahora.3. Presente la asignación y los precios a los agentes en forma de consulta de demanda.4. Si todos responden que sí, envíe la asignación y se detenga. De lo contrario, hay un agente que ha respondido con un paquete preferido si. Realice consultas de valor en SI y SI para encontrar un contraejemplo para ˜Vi y proporcionarlo a la IA. Figura 1: Algoritmos de aprendizaje de conversión a un algoritmo de obtención.al problema de encontrar un algoritmo de aprendizaje eficiente para cada una de estas clases por separado. Esto es significativo porque ya existen algoritmos de aprendizaje para una gran cantidad de clases de funciones, y porque a menudo puede ser más simple resolver cada subproblema de aprendizaje por separado que atacar el problema de obtención de preferencias directamente. Podemos desarrollar un algoritmo de obtención que se adapte a la valoración de cada agente, con los algoritmos de aprendizaje subyacentes vinculados juntos en las etapas de consulta de demanda de una manera independiente del algoritmo. Mostramos que los algoritmos de aprendizaje existentes para polinomios, fórmulas DNF monótonas y funciones de umbral lineal se pueden convertir en algoritmos de obtención de preferencias para valoraciones generales, valoraciones con desacuerdo y valoraciones con sustitutabilidades, respectivamente. Nos centramos en representaciones que son polinomialmente interpretables, porque la literatura de la teoría del aprendizaje computacional pone un gran énfasis en la tractabilidad computacional [18]. Al interpretar los métodos, enfatizamos la expresividad y la sucinción de cada clase de representación. La clase de representación, que en términos de subasta combinatoria define un lenguaje de licitación, debe ser necesariamente lo suficientemente expresiva como para representar todas las valoraciones posibles de interés, y también debe representar sucintamente las funciones más simples y comunes de la clase.6.1 Representaciones polinómicas Schapire y Sellie [17] dan un algoritmo de aprendizaje para polinomios multivariados dispersos que pueden usarse como base para un protocolo de subasta combinatoria. Las consultas de equivalencia hechas por este algoritmo son apropiadas. Específicamente, su algoritmo aprende la clase de representación de polinomios multivariados de T-Sparse sobre los números reales, donde las variables pueden tomar valores 0 o 1. Un polinomio de SPARS tiene en la mayoría de los términos T, donde un término es un producto de variables, p.x1x3x4. Un polinomio sobre los números reales tiene coeficientes extraídos de los números reales. Los polinomios son expresivos: cada función de valoración v: 2m → ê+ puede escribirse de manera única como polinomio [17]. Para tener una idea de la sucinción de los polinomios como lenguaje de licitación, considere las valoraciones aditivas y de un solo elemento presentadas por Nisan [11]. En la valoración aditiva, el valor de un paquete es el número de productos que contiene el paquete. En la valoración de un solo elemento, todos los paquetes tienen valor 1, excepto ∅ que tiene valor 0 (es decir, el agente está satisfecho tan pronto como ha adquirido un solo elemento). No es difícil demostrar que la valoración de un solo elemento requiere polinomios del tamaño 2M-1, mientras que los polinomios del tamaño M son suficientes para la valoración aditiva. Por lo tanto, los polinomios son apropiados para las valoraciones que son en su mayoría aditivas, con algunas sustitutabilidades y complementariedades que pueden introducirse ajustando los coeficientes. El algoritmo de aprendizaje para polinomios hace que en la mayoría de las consultas de equivalencia de MTI +2 y como máximo (MTI +1) (T2 I +3TI)/2 consultas de membresía a un Agente I, donde Ti es la escasez del polinomio que representa VI [17]. Por lo tanto, obtenemos un algoritmo que provoca valoraciones generales con un número polinómico de consultas y comunicación polinomial.6 6.2 Representaciones XOR El lenguaje de licitación XOR es estándar en la literatura de subastas combinatorias. Recuerde que una oferta XOR se caracteriza por un conjunto de paquetes B ⊆ 2m y una función de valor W: B → ê+ definida en esos paquetes, lo que induce la función de valoración: V (b) = max {b ∈B |B ⊆b} w (b) (7) Las ofertas XOR pueden representar valoraciones que satisfacen la desaceleración (y solo tales valoraciones), que nuevamente es la propiedad de que A ⊆ B ⇒ V (A) ≤ V (B). El lenguaje de licitación XOR es un poco menos expresivo que los polinomios, porque los polinomios pueden representar valoraciones que no satisfacen la eliminación gratuita. Sin embargo, Xor es tan expresivo como se requiere en la mayoría de los entornos económicos. Nisan [11] señala que las ofertas de XOR pueden representar la valoración de un solo elemento con m bids atómicas, pero se necesitan ofertas atómicas 2M-1 para representar la valoración aditiva. Dado que lo contrario se mantiene para los polinomios, estos dos idiomas son incomparables en sucindad y algo complementarios para el uso práctico. Blum et al.[5] Tenga en cuenta que las fórmulas DNF monótonas son los análogos de XOR BIDS en la literatura de la teoría del aprendizaje. Una fórmula monótona DNF es una disyunción de conjunciones en la que las variables parecen no ser negadas, por ejemplo x1x2 ∨ x3 ∨ x2x4x5. Tenga en cuenta que tales fórmulas pueden representarse como ofertas XOR donde cada oferta atómica tiene valor 1;Por lo tanto, las ofertas XOR generalizan las fórmulas DNF monótonas de las funciones booleanas a los valores reales. Estas ideas nos permiten generalizar un algoritmo de aprendizaje clásico para el DNF monótono ([3] Teorema 6 Tenga en cuenta que el Teorema 1 se aplica incluso si las valoraciones no satisfacen el desacuerdo. 185 1, [18] Teorema B) a un algoritmo de aprendizaje para las ofertas XOR.7 Lema 2. Una oferta XOR que contiene t bichas atómicas se puede aprender exactamente con consultas de equivalencia T + 1 y, como máximo, consultas de membresía TM. Prueba. El algoritmo identificará cada oferta atómica en el objetivo XOR BID a su vez. Inicialice la valoración manifiesta ˜v a la oferta que es idénticamente cero en todos los paquetes (esta es una oferta XOR que contiene 0 ofertas atómicas). Presente ˜v como una consulta de equivalencia. Si la respuesta es sí, ya terminamos. De lo contrario, obtenemos un paquete para el que v (s) = ˜v (s). Crea un paquete T de la siguiente manera. Primero inicialice t = S. Para cada elemento I en t, verifique a través de una consulta de membresía si v (t) = v (t - {i}). Si es así establecido t = t - {i}. De lo contrario, deje t como está y procede al siguiente elemento. Afirmamos que (t, v (t)) es una oferta atómica de la oferta de XOR objetivo. Para cada elemento I en t, tenemos v (t) = v (t - {i}). Para ver esto, tenga en cuenta que en algún momento al generar t, teníamos un ¯t tal que t ⊆ ¯t ⊆ sy v (¯t)> v (¯t - {i}), de modo que me mantuvieron en ¯T. Tenga en cuenta que V (S) = V (¯t) = V (t) porque el valor del paquete S se mantiene a lo largo del proceso de eliminación de elementos. Ahora asume v (t) = v (t - {i}). Entonces v (¯t) = v (t) = v (t-{i})> v (¯t-{i}) que contradice la eliminación libre, ya que t-{i} ⊆ ¯t-{i}. Por lo tanto, v (t)> v (t - {i}) para todos los elementos I en T. Esto implica que (t, v (t)) es una oferta atómica de v. Si este no fuera el caso, t tomaríaEl valor máximo de sus subconjuntos estrictos, por la definición de una oferta XOR, y tendríamos v (t) = max i∈T {max t ⊆t - {i} v (t)} = max i∈T {v(T - {i})} <v (t) que es una contradicción. Ahora mostramos que v (t) = ˜v (t), que implicará que (t, v (t)) no es una oferta atómica de nuestra hipótesis manifiesta por inducción. Suponga que cada oferta atómica (R, ˜v (R)) identificada hasta ahora es de hecho una oferta atómica de V (lo que significa que R se enumera en una oferta atómica de V como valor V (r) = ˜v (R))). Esta suposición se mantiene vacía cuando se inicializa la valoración de manifiesto. Usando la notación de (7), Sea (˜b, ˜w) nuestra hipótesis, y (b, w) sea la función objetivo. Tenemos ˜b ⊆ b, y ˜w (b) = w (b) para b ∈ ˜b por suposición. Por lo tanto, ˜v (s) = max {b∈ ˜b |B⊆s} ˜w (b) = max {b∈ ˜b |B⊆s} w (b) ≤ max {b∈B |B⊆s} w (b) = v (s) (8) Ahora suponga v (t) = ˜v (t). Entonces, ˜v (t) = v (t) = v (s) = ˜v (s) (9) La segunda igualdad se deriva del hecho de que el valor permanece constante cuando derivamos de S.S es un contraejemplo de la valoración manifiesta. De la ecuación (9) y la eliminación de libre, el algoritmo citado también se utilizó como base para el algoritmo de obtención de Zinkevich et al.S [19] para la caja de herramientas DNF. Recuerde que la caja de herramientas DNF son polinomios con coeficientes no negativos. Para estas representaciones, se puede simular una consulta de equivalencia con una consulta de valor en el paquete que contiene todos los bienes.tener ˜v (t) <˜v (s). Luego de nuevo de la ecuación (9) se deduce que v (s) <˜v (s). Esto contradice (8), por lo que de hecho tenemos v (t) = ˜v (t). Por lo tanto, (t, v (t)) no está actualmente en nuestra hipótesis como una oferta atómica, o tendríamos correctamente ˜v (t) = v (t) por la hipótesis de inducción. Agregamos (t, v (t)) a nuestra hipótesis y repetimos el proceso anterior, realizando consultas de equivalencia adicionales hasta que se hayan identificado todas las ofertas atómicas. Después de cada consulta de equivalencia, se identifica una oferta atómica con la mayoría de las consultas de membresía M. Cada contraejemplo conduce al descubrimiento de una nueva oferta atómica. Por lo tanto, hacemos en la mayoría de las consultas de membresía TM y exactamente consultas de equivalencia T + 1. El número de pasos de tiempo requeridos por este algoritmo es esencialmente el mismo que el número de consultas realizadas, por lo que el algoritmo es eficiente. Aplicando el Teorema 2, por lo tanto, obtenemos el siguiente corolario: Teorema 3. La clase de representación de las ofertas XOR se puede obtener de manera eficiente de las consultas de valor y demanda. Esto contrasta con los resultados negativos de Blum et al. ([5], el teorema 2) que indica que el DNF monótono (y, por lo tanto, XOR, las ofertas) no pueden provocarse de manera eficiente cuando las consultas de demanda están restringidas a precios lineales y anónimos sobre los bienes.6.3 Representaciones de umbral lineal Los polinomios, las ofertas de XOR y todos los idiomas basados en el lenguaje de OR (como XOR-OF o OF-XOR, y o ∗) no pueden representar sucintamente la valoración de la mayoría [11]. En esta valoración, los paquetes tienen valor 1 si contienen al menos m/2 elementos, y valor 0 de lo contrario. En términos más generales, considere la familia de valoraciones R-de-S donde los paquetes tienen valor 1 si contienen al menos R elementos de un conjunto especificado de elementos s ⊆ m, y valor 0 de lo contrario. La valoración de la mayoría es un caso especial de la valoración R-de-S con R = M/2 y S = M. Estas valoraciones son apropiadas para representar sustituabilidad: una vez que se ha obtenido un conjunto requerido de elementos, ningún otro elemento puede agregar valor. Permitir k = | s |, tales valoraciones están representadas sucintamente por funciones umbral R-de K. Estas funciones toman la forma de desigualdades lineales: xi1 +...+ xik ≥ r donde la función tiene valor 1 si la desigualdad se mantiene, y 0 de lo contrario. Aquí i1 ,..., IK son los elementos en el algoritmo de S. Littlestones Winnow 2 pueden aprender tales funciones usando consultas de equivalencia solamente, usando como máximo 8R2 + 5K + 14KR LN M + 1 Consultas [10]. Para proporcionar esta garantía, R debe ser conocida por el algoritmo, pero S (y K) son desconocidos. El algoritmo de obtención que resulta de Winnow 2 usa consultas de demanda solamente (las consultas de valor no son necesarias aquí porque los valores de los contraejemplos están implícitos cuando solo hay dos valores posibles). Tenga en cuenta que las funciones umbrales de R-de K siempre se pueden representar sucintamente en el espacio O (M). Por lo tanto, obtenemos un algoritmo que puede provocar tales funciones con un número polinomial de consultas y comunicación polinomial, en los parámetros N y M solos.186 7. Conclusiones y trabajos futuros Hemos demostrado que los algoritmos de aprendizaje exactos con consultas de membresía y equivalencia pueden usarse como base para los algoritmos de obtención de preferencias con consultas de valor y demanda. En el corazón de este resultado está el hecho de que las consultas de demanda pueden verse como consultas de equivalencia modificadas, especializadas para el problema de la obtención de preferencias. Nuestro resultado nos permite aplicar la riqueza de algoritmos de aprendizaje disponibles al problema de la obtención de preferencias. Un enfoque de aprendizaje para la obtención también motiva un enfoque diferente para diseñar algoritmos de obtención que se descompone perfectamente entre los tipos de agentes. Si el diseñador conoce de antemano qué tipos de preferencias es probable que cada agente exhiba (en su mayoría aditivo, muchos sustitutos, etc.), puede diseñar algoritmos de aprendizaje adaptados a las valoraciones de cada agente e integrarlos en un esquema de obtención. El algoritmo de obtención resultante hace un número polinomial de consultas y hace comunicación polinomial si los algoritmos de aprendizaje originales son eficientes. No requerimos que las valoraciones de los agentes se puedan aprender con consultas de valor y demanda. Las consultas de equivalencia solo pueden ser, y solo necesitan ser simuladas hasta el punto en que se ha calculado una asignación óptima. Este es el problema de obtención de preferencias. El Teorema 1 implica que la obtención de consultas de valor y demanda no es más difícil que aprender con consultas de membresía y equivalencia, pero no proporciona ninguna mejoría asintótica sobre la complejidad de los algoritmos de aprendizaje. Sería interesante encontrar ejemplos de clases de valoración para las cuales la obtención es más fácil que aprender. Blum et al.[5] Proporcione tal ejemplo al considerar solo consultas de membresía/valor (Teorema 4). En el trabajo futuro, planeamos abordar el tema de los incentivos al convertir los algoritmos de aprendizaje en algoritmos de obtención. En el entorno de aprendizaje, generalmente asumimos que los oráculos proporcionarán respuestas honestas a las consultas;En el entorno de obtención, los agentes suelen ser egoístas y proporcionarán respuestas posiblemente deshonestas para maximizar su utilidad. También planeamos implementar los algoritmos para los polinomios de aprendizaje y las ofertas de XOR como algoritmos de obtención, y probar su desempeño contra otros protocolos de subastas combinatorias establecidas [6, 15]. Una pregunta interesante aquí es: ¿Qué precios de Lindahl en el rango máximo a mínimo son los mejores para citar para minimizar la revelación de la información? Conjeturamos que la revelación de la información se reduce cuando se mueve de los precios máximos a mínimos de Lindahl, a saber, a medida que avanzamos, las consultas de demanda más lejos de las consultas de equivalencia. Finalmente, sería útil determinar si el lenguaje de licitación o ∗ [11] se puede aprender de manera eficiente (y por lo tanto provocado), dada la expresividad y la sucinción de los idiomas para una amplia variedad de clases de valoración. Agradecimientos Nos gustaría agradecer a Debasis Mishra por sus útiles discusiones. Este trabajo es apoyado en parte por NSF Grant IIS0238147.8. Referencias [1] A. Andersson, M. Tenhunen y F. Ygge. Programación entera para la determinación del ganador de la subasta combinatoria. En Actas de la Cuarta Conferencia Internacional sobre Sistemas Multiagentes (ICMAS-00), 2000. [2] D. Angluin. Aprender conjuntos regulares de consultas y contraejemplos. Información y computación, 75: 87-106, noviembre de 1987. [3] D. Angluin. Consultas y aprendizaje conceptual. Aprendizaje automático, 2: 319-342, 1987. [4] S. Bikhchandani y J. Ostroy. El modelo de asignación de paquetes. Journal of Economic Theory, 107 (2), diciembre de 2002. [5] A. Blum, J. Jackson, T. Sandholm y M. Zinkevich. PREVERSIÓN DE PREFERENCIA Y APRENDIZAJE DE CONSULTA. En Proc.16ª Conferencia Anual sobre Teoría del Aprendizaje Computacional (Colt), Washington DC, 2003. [6] W. Conen y T. Sandholm. Mecanismo VCG de revelación parcial para subastas combinatorias. En Proc.La 18ª Conferencia Nacional sobre Inteligencia Artificial (AAAI), 2002. [7] Y. Fujishima, K. Leyton-Brown e Y. Shoham. Domestica la complejidad computacional de las subastas combinatorias: enfoques óptimos y aproximados. En Proc.La 16ª Conferencia Internacional Conjunta sobre Inteligencia Artificial (IJCAI), páginas 548-553, 1999. [8] B. Hudson y T. Sandholm. Uso de consultas de valor en subastas combinatorias. En Proc.4ª Conferencia ACM sobre Comercio Electrónico (ACM-EC), San Diego, CA, junio de 2003. [9] M. J. Kearns y U. V. Vazirani. Una introducción a la teoría del aprendizaje computacional. MIT Press, 1994. [10] N. Littlestone. Aprender rápidamente cuando abundan los atributos irrelevantes: un nuevo algoritmo de umbral lineal. Aprendizaje automático, 2: 285-318, 1988. [11] N. Nisan. Licitación y asignación en subastas combinatorias. En Proc.La Conferencia ACM sobre Comercio Electrónico, páginas 1-12, 2000. [12] N. Nisan e I. Segal. Los requisitos de comunicación de las asignaciones eficientes y el apoyo a los precios de Lindahl. Documento de trabajo, Universidad Hebrea, 2003. [13] D. C. Parkes. Certificados de información basados en precios para subastas combinatorias de revelación mínima. En Padget et al., Editor, Commerce Electronic mediado por agente IV, LNAi 2531, páginas 103-122. Springer-Verlag, 2002. [14] D. C. Parkes. Diseño de subasta con costosa obtención de preferencias. En temas especiales de Annals of Mathematics and AI sobre los fundamentos del comercio electrónico, de próxima publicación (2003).[15] D. C. Parkes y L. H. Ungar. Subastas combinatorias iterativas: teoría y práctica. En Proc.17ª Conferencia Nacional sobre Inteligencia Artificial (AAAI-00), páginas 74-81, 2000. [16] T. Sandholm, S. Suri, A. Gilpin y D. Levine. CABOB: un algoritmo óptimo rápido para subastas combinatorias. En Proc.La 17ª Conferencia Internacional Conjunta sobre Inteligencia Artificial (IJCAI), páginas 1102-1108, 2001. [17] R. Schapire y L. Sellie. Aprender polinomios multivariados dispersos en un campo con consultas y contraejemplos. En Actas del Sexto Taller Anual de ACM sobre teoría del aprendizaje computacional, páginas 17-26. ACM Press, 1993. 187 [18] L. Valiant. Una teoria de lo aprendible. Comun. ACM, 27 (11): 1134-1142, noviembre de 1984. [19] M. Zinkevich, A. Blum y T. Sandholm. Sobre la obtención de preferencias de tiempo polinómico con quitas de valor. En Proc.4ª Conferencia ACM sobre Comercio Electrónico (ACM-EC), San Diego, CA, junio de 2003. 188