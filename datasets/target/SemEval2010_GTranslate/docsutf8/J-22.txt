Apuestas por permutaciones yiling Chen Yahoo! Investigación 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratorio Massachusetts Instituto de Tecnología Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6th Floor New York, NY 10011 Resumen Consideramos un escenario de apuestas de permutación, donde la gente apuesta por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de que coincidan sin riesgos con apuestas o, de manera equivalente, de encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los postores que enumeren explícitamente los pedidos en los que les gustaría apostar no es natural e intratable, porque el número de pedidos es n!¡Y el número de subconjuntos de pedidos es 2n!. Proponemos dos idiomas de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso. Las apuestas del subconjunto permiten a los comerciantes apostar que un candidato terminará clasificado entre algunos subconjuntos de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que se tomará una posición porAlgunos subconjuntos de candidatos, por ejemplo, el caballo A, B o D terminarán en la posición 2. Para las apuestas de subconjunto, mostramos que el problema del subastador se puede resolver en el tiempo polinomial si las órdenes son divisibles. Las apuestas de parejas permiten a los comerciantes apostar sobre si un candidato terminará clasificado más alto que otro candidato, por ejemplo, Horse A vencerá a Horse B. Probamos que el problema del subastador se convierte en NP-Hard para las apuestas de pares. Identificamos una condición suficiente para la existencia de una combinación de apuestas de par que se puede verificar en el tiempo polinomial. También mostramos que un algoritmo codicioso natural da una aproximación pobre para las órdenes indivisibles. Categorías y descriptores de asignaturas J.4 [Aplicaciones informáticas]: Ciencias sociales y conductuales-economía Términos generales Economía, Teoría 1. Introducción Comprar o vender una seguridad financiera vigente es una apuesta en el valor de seguridad. Por ejemplo, comprar una acción es una apuesta de que el valor de las acciones es mayor que su precio actual. Cada operador evalúa su ganancia esperada para decidir la cantidad de comprar o vender de acuerdo con su propia información y evaluación subjetiva de probabilidad. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de la información y las creencias de todos los comerciantes. En la práctica, esta evaluación agregada del mercado del valor de seguridad a menudo es más precisa que otros pronósticos que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considere comprar una seguridad al precio de cincuenta y dos centavos, eso paga $ 1 si y solo si un demócrata gana las elecciones presidenciales de los Estados Unidos en 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un demócrata gana. En este caso de una seguridad contingente de eventos, el valor de precio de los mercados de la seguridad corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes combinan socios comerciales bilaterales. Por ejemplo, un comerciante dispuesto a aceptar una pérdida de x dólar si un demócrata no gana a cambio de una ganancia de dólar y si un demócrata gana se corresponde con un segundo comerciante dispuesto a aceptar lo contrario. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un comerciante apuesta a que el candidato demócrata recibirá más votos que el candidato republicano, un segundo comerciante apuesta a que el candidato republicano recibirá más votos que el candidato libertario, y un tercer comerciante apostará que el candidato libertario recibirá más votosque el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrece, puede haber un partido de tres vías agradable a pesar de que no existen partidos bidireccionales. Proponemos un intercambio en el que los comerciantes tienen una flexibilidad considerable para expresar de forma natural y sucintamente sus apuestas, 326 y examinar la complejidad computacional de los subastadores que resulta en el problema correspondiente de identificar acuerdos bilaterales y multilaterales. En particular, nos centramos en un entorno en el que los comerciantes apuestan sobre el resultado de una competencia entre N candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una raza, etc.) y, por lo tanto, n!Posibles pedidos de candidatos después de la cuenta de votación final. Los comerciantes pueden apostar por las propiedades arbitrarias del orden final, por ejemplo, el candidato D ganará, el candidato D terminará en primer lugar o en el último lugar, el candidato D derrotará al candidato R, los candidatos D y R derrotarán al candidato L, etc.. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntos formen una coincidencia agradable. Como veremos, el problema de coincidencia se puede configurar como un programa lineal o entero, dependiendo de si las órdenes son divisibles o indivisibles, respectivamente. Intentando reducir el problema a un problema de correspondencia bilateral creando explícitamente n!Los valores, uno para cada posible pedido final, es engorroso para los comerciantes y computacionalmente inviables incluso para N de tamaño modesto.Además, la atención de los comerciantes se extendería entre n!Las opciones independientes, lo que hace que la probabilidad de que dos comerciantes converjan al mismo tiempo y lugar parezcan remotas. Existe una compensación entre la expresividad del lenguaje de licitación y la complejidad computacional del problema de correspondencia. Queremos ofrecer a los comerciantes el lenguaje de licitación más expresivo posible mientras mantenemos la viabilidad computacional. Exploramos dos idiomas de licitación que parecen naturales desde una perspectiva de comerciante. Las apuestas de subconjunto, descritas en la Sección 3.2, permite a los comerciantes apostar en qué posiciones en la clasificación, un candidato caerá, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los comerciantes también pueden apostar en qué candidatos caerán en una posición particular. En la Sección 4, derivamos un algoritmo de tiempo polinomial para las apuestas de subconjunto (divisibles) (divisibles). La clave del resultado es mostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce a la coincidencia bipartita máxima ponderada y, en consecuencia, podemos resolverlo en el polinomio de tiempo en el número de órdenes. Las apuestas de pares, descritas en la Sección 3.3, permiten a los comerciantes apostar por la clasificación final de dos candidatos, por ejemplo, el candidato D derrotará al candidato R. En la Sección 5, mostramos que la coincidencia óptima de las apuestas de pares (divisibles o indivisibles) es np-Difícil, a través de una reducción del problema del arco mínimo de retroalimentación no ponderada. También proporcionamos una condición suficiente polinomialmenteverificable para la existencia de una combinación de empasas y mostramos que un algoritmo codicioso ofrece una aproximación deficiente para las apuestas de pares indivisibles.2. Antecedentes y trabajos relacionados consideramos apuestas de permutación o apuestas sobre el resultado de una competencia entre n candidatos. El resultado final o el estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado de la lista de caballos en orden creciente de sus tiempos de finalización. El espacio estatal s contiene todo n!Permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, la gente apuesta por las propiedades del resultado como el caballo A ganará, el caballo A mostrará o terminará en primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en la pista de carreras, cada uno de estos diferentes tipos de apuestas se procesa en grupos o grupos separados. En otras palabras, todas las apuestas de victorias se procesan juntas, y todas las apuestas del espectáculo se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede dañar la liquidez y la agregación de información. Por ejemplo, a pesar de que Horse A es muy favorecido para ganar, eso puede no impulsar directamente las probabilidades de los caballos para mostrar. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así la liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, a Wed le gusta permitir a los comerciantes apostar por cualquier propiedad del orden final que deseen, declarado exactamente el idioma que prefieren. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta igualar a los comerciantes dispuestos. Exploramos la compensación entre la expresividad del lenguaje de licitación y la complejidad computacional del problema de correspondencia. Consideramos un marco en el que las personas proponen comprar valores que pagan $ 1 si y solo si alguna propiedad del pedido final es verdadera. Los comerciantes indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar.(Los pedidos de venta no pueden ser necesarios explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al operador recibir menos acciones de lo solicitado, siempre que se cumpla la restricción de precios;Una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago o cualquiera de los diversos enfoques practicados en los círculos financieros y de juego. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n!valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de valores n! Este es el llamado mercado completo de valores de flecha-debreu [1] para nuestro entorno. En la práctica, los comerciantes no quieren lidiar con las especificaciones de bajo nivel de pedidos completos: las personas piensan más naturalmente en términos de propiedades de alto nivel de pedidos. Además, operando n!Securities es inviable en la práctica desde un punto de vista computacional a medida que N crece. Un lenguaje de licitación muy simple podría permitir a los comerciantes apostar solo sobre quién gana la competencia, como se hace en el grupo de victorias en las carreras de carreras. El problema correspondiente correspondiente es polinomio, sin embargo, el lenguaje no es muy expresivo. Un comerciante que cree que A derecha a B, pero que ninguno de los dos ganará directamente no puede impartir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar pero nada más. Nuestro objetivo es encontrar idiomas que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, mientras mantienen la viabilidad computacional. Nuestro trabajo está en analogía directa al trabajo de Fortnow et.Alabama.[6]. Mientras que exploramos la combinatoria de permutación, Fortnow et.Alabama.Explore la combinatoria booleana. Los autores consideran un espacio de estado de los 2n posibles resultados de n variables binarias. Los comerciantes expresan apuestas en lógica booleana. Los autores muestran que la coincidencia divisible es CO-NP-COMPLETA y la coincidencia indivisible es σp 2 complete. Hanson [9] describe un mecanismo de regla de puntuación del mercado que puede permitir la apuesta en el número combinatorio de resultados. El mercado comienza con una distribución de probabilidad conjunta en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier operador puede cambiar la distribución de probabilidad siempre que acepte pagar al operador más reciente 327 de acuerdo con la regla de puntuación. El fabricante de mercado paga al último comerciante. Por lo tanto, él tiene riesgo y puede incurrir en pérdida. Los mecanismos de reglas de puntuación del mercado tienen una buena propiedad de que se limita la peor pérdida del fabricante de mercado. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no se han explorado completamente. Nuestros mecanismos tienen un subastador que no tiene ningún riesgo y solo coincide con las órdenes. La investigación sobre los idiomas de licitación y la determinación del ganador en las subastas combinatorias [4, 14, 18] considera desafíos computacionales similares para encontrar una asignación de elementos a los licitadores que maximicen los ingresos de los subastadores. Las subastas combinatorias permiten a los licitadores colocar valores distintos en paquetes de bienes en lugar de solo en bienes individuales. La incertidumbre y el riesgo generalmente no se consideran y el problema del subastador central es maximizar el bienestar social. ¡Nuestros mecanismos permiten a los comerciantes construir apuestas para un evento con n!resultados. Se consideran la incertidumbre y el riesgo y el problema del subastador es explorar las oportunidades de arbitraje y las apuestas sin riesgo.3. Permutación de permutación En esta sección, definimos los problemas de correspondencia óptimos y de correspondencia que un subastador necesita resolver en un mercado general de apuestas de permutación. Luego ilustramos las definiciones de problemas en el contexto de los mercados de subconjuntos y empotrizas.3.1 Valores, pedidos y problemas de correspondencia consideran un evento con n candidatos competitivos donde el resultado (estado) es una clasificación de los n candidatos. El lenguaje de licitación de un mercado que ofrece valores en los resultados futuros determina el tipo y el número de valores disponibles y afecta directamente qué información puede agregarse sobre el resultado. Un lenguaje de licitación totalmente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final;Un lenguaje menos expresivo limita el tipo de información que puede agregarse, aunque puede permitir una solución más eficiente al problema de correspondencia. Para cualquier lenguaje de licitación y el número de valores en un mercado de apuestas de permutación, podemos representar sucintamente el problema del subastador con las ofertas sin riesgos de la siguiente manera. Considere un conjunto de índice de apuestas u órdenes o que los operadores presentan al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto el comerciante está dispuesto a pagar por una unidad de seguridad φi y Qi es la cantidad de acciones de la seguridad que quiere comprar a preciobi. Naturalmente, bi ∈ (0, 1) ya que una unidad de seguridad vale la pena como máximo $ 1 cuando el evento se realiza. Dado que el orden I se define para una sola seguridad φi, omitiremos la variable de seguridad siempre que esté claro desde el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Deje que Xi sea la fracción del orden I ∈ O aceptado. En la versión indivisible del mercado xi = 0 o 1 mientras en la versión divisible xi ∈ [0, 1]. Además, II (s) sea la variable indicadora de si el orden I está ganando en el estado s, es decir, II (s) = 1 si el pedido se devuelve $ 1 en el estado S y II (S) = 0 de lo contrario. Hay dos posibles problemas que el subastador puede querer resolver. El más simple es encontrar un subconjunto de pedidos que puedan coincidir con el riesgo sin riesgos, es decir, un subconjunto de órdenes que aceptan juntos otorgan una ganancia no negativa al subastador en todos los resultados posibles. Llamamos a este problema la existencia de una coincidencia o, a veces, simplemente, el problema coincidente. El problema más complejo es que el subastador encuentre la coincidencia óptima con respecto a algún criterio, como ganancias, volumen de negociación, etc. Definición 1 (existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes o, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi - ii (s)) qixi ≥ 0, ∀s ∈¿S?(1) Del mismo modo podemos definir la existencia de un partido con órdenes divisibles. Definición 2 (existencia de coincidencia, órdenes divisibles). Dado un conjunto de órdenes o, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi> 0 tal que yo (bi - ii (s)) qixi ≥ 0, ∀s ∈¿S?(2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito libre de riesgos, el subastador puede optimizar algún criterio para determinar las órdenes de aceptar. Algunos objetivos razonables incluyen maximizar el volumen de negociación total en el mercado o la peor ganancia del subastador. Los siguientes problemas de correspondencia óptimos se definen para un subastador que maximiza su peor ganancias. Definición 3 (coincidencia óptima, órdenes indivisibles). Dado un conjunto de órdenes o, elija Xi ∈ {0, 1} de modo que el siguiente problema de programación de enteros mixtos alcance su optimización Max Xi, C C (3) S.T.i bi - ii (s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (coincidencia óptima, órdenes divisibles). Dado un conjunto de pedidos o, elija xi ∈ [0, 1] de modo que el siguiente problema de programación lineal logre su optimización Max Xi, C C (4) S.T.i bi - ii (s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable C es la peor ganancia para el subastador. Tenga en cuenta que, estrictamente hablando, los problemas de coincidencia óptimos no requieren resolver los problemas de optimización (3) y (4), porque solo se necesita el conjunto óptimo de pedidos. La ganancia óptima del peor de los casos puede permanecer desconocida.3.2 Subconjunto de apuestas Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar por un subconjunto de puestos en los que un candidato puede terminar, o pueden apostar por un subconjunto de candidatos que ocuparán una posición particular. Una seguridad α | φ donde φ es un subconjunto de posiciones paga $ 1 si el candidato α se encuentra en una posición que es un elemento de φ y paga $ 0 de lo contrario. Por ejemplo, la seguridad α | {2, 4} paga $ 1 cuando el candidato α 328 ocupa el segundo o cuarto. Del mismo modo, una seguridad ψ | j donde ψ es un subconjunto de candidatos paga $ 1 si alguno de los candidatos en el set ψ rangos en la posición j. Por ejemplo, la seguridad {α, γ} | 2 paga $ 1 cuando el candidato α o el candidato γ ocupan el segundo lugar. El subastador en un mercado de apuestas de subconjunto enfrenta un problema de correspondencia no trivial, es decir, determinar qué órdenes aceptar entre todos los pedidos presentados I ∈ O. Tenga en cuenta que aunque solo hay n candidatos y n posibles puestos, el número de valores disponibles para apostar es exponencial ya que un comerciante puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones. Con esto, no está claro de inmediato si uno puede encontrar un socio comercial o una coincidencia para que ocurra el comercio, o que el subastador pueda resolver el problema de correspondencia en el tiempo polinomial. En la siguiente sección, mostraremos que algo sorprendentemente existe una solución polinómica elegante tanto para los problemas de coincidencia de coincidencia como para los problemas combinados clásicos. Cuando se acepta un pedido, el comerciante correspondiente paga el precio de pedido presentado al subastador y el subastador paga los pedidos ganadores $ 1 por acción después de que se revela el resultado. El subastador tiene que elegir cuidadosamente qué órdenes y qué fracciones de ellos aceptar para que se les garantice una ganancia no negativa en cualquier estado futuro. El siguiente ejemplo ilustra el problema de correspondencia para órdenes indivisibles en el mercado de apuestas de subconjuntos. Ejemplo 1. Supongamos n = 3. Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia. El subastador recibe los siguientes 4 pedidos: (1) Compre 1 acción α | {1} al precio $ 0.6;(2) comprar 1 acción β | {1, 2} al precio $ 0.7;(3) comprar 1 acción γ | {1, 3} al precio $ 0.8;y (4) comprar 1 acción β | {3} al precio $ 0.7. Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα. El beneficio dependiente del estado correspondiente del subastador para cada orden se puede calcular como los siguientes vectores, C1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) C2 = (−0.3, 0.7, −0.3, −0.3, 0.7, 0.7, 0.7, 0.7,, −0.3) C3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) C4 = (0.7, −0.3, 0.7, 0.7, −0.3, 0.7).6 columnas corresponden a los 6 estados futuros. Para las órdenes indivisibles, el subastador puede aceptar órdenes (2) y (4) y obtener el vector de ganancias C = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar órdenes (2), (3) y ((4) y tiene ganancias en el estado C = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2).3.3 APUTADORES DE PARTIDOS Un par de apuestas de pareja permite a los comerciantes apostar sobre si un candidato se clasificará más alto que otro candidato, en un resultado que es una permutación de n candidatos. Una seguridad α> β paga $ 1 si el α candidato se clasifica más alto que el candidato β y $ 0 de lo contrario. Hay un total de valores n (n -1) diferentes ofrecidos en el mercado, cada uno correspondiente a un par de candidatos ordenados. Los comerciantes colocan pedidos de la forma compran acciones de Qi de α> β al precio por acción no más grande que BI.BI en general debe estar entre 0 y 1. Una vez más, la orden puede ser indivisible o divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con un b c d e f .99 .99 .5 .5 .5 .99 .99 .99.99 Figura 1: Cada ciclo tiene un beneficio negativo en el peor de los casos de −0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad proporciona una ganancia positiva en el peor de los casos de 0.44.xi ∈ {0, 1} para indivisible y xi ∈ [0, 1] para órdenes divisibles. Se aplican las mismas definiciones para la existencia de una coincidencia y una coincidencia óptima de la Sección 3.1. Los órdenes en el mercado de apuestas de pares tienen una interpretación natural como un gráfico, donde los candidatos son nodos en el gráfico y cada orden que clasifica un par de candidatos α> β está representado por un borde dirigido e = (α, β) conprecio ser y peso qe. Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia no negativa en el peor de los casos. Suponiendo Qe = 1 para todas las E, este es un ciclo C con un total de | C |bordes de tal manera que la ganancia del peor de los casos para el subastador sea e∈C be-(| c |-1) ≥ 0, ya que en el peor estado de casos el subastador necesita pagar $, 1 a cada orden del ciclo, excepto uno. Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de órdenes en los que cada ciclo tiene una ganancia negativa en el peor de los casos y, sin embargo, hay una coincidencia positiva en el peor de los peores en general. Las etiquetas de borde en la figura son los precios;Tanto la solución óptima divisible e indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1. 4. Complejidad de las apuestas de subconjunto Los problemas de correspondencia del subastador en cualquier mercado de permutación, incluido el mercado de apuestas de subconjunto, ¡tienen n!restricciones. Los métodos de fuerza bruta tomarían tiempo exponencial para resolver. Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjunto, podemos demostrar que los problemas de correspondencia para los pedidos divisibles pueden resolverse en el tiempo polinomial. Teorema 1. La existencia de una coincidencia y los problemas óptimos de partidos con órdenes divisibles en un mercado de apuestas de subconjunto se pueden resolver en tiempo polinomial.329 Prueba. Considere el problema de programación lineal (4) para encontrar una coincidencia óptima. Este programa lineal tiene | o |+ 1 Variables, una variable Xi para cada pedido I y la variable de ganancias c.También tiene exponencialmente muchas limitaciones. Sin embargo, podemos resolver el programa en tiempo polinomio en el número de pedidos | O |Al usar el algoritmo elipsoide, siempre que podamos resolver eficientemente su problema de separación correspondiente en el tiempo polinomial [7, 8]. El problema de separación para un programa lineal toma como entrada un vector de valores variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada. Para los valores dados de las variables, una restricción violada en la ecuación.(4) Pregunta si hay un estado o permutación en el que la ganancia es menor que C, y puede reescribirse como i II (S) qixi <i biqixi - c ∀s ∈ S. (5) Por lo tanto, es suficiente para mostrarCómo encontrar eficientemente un estado que satisface la desigualdad anterior (5) o verificar que la desigualdad opuesta se mantenga para todos los estados.Mostraremos que el problema de separación se puede reducir al problema de coincidencia bipartita máxima 1 [3]. El lado izquierdo en la ecuación.(5) es el dinero total que el subastador necesita pagar a los comerciantes ganadores en el estado s.El primer término en el lado derecho es el dinero total recaudado por el subastador y se fija para un vector de solución dado de XIS y C.Se puede construir un gráfico bipartito ponderado entre el conjunto de candidatos y el conjunto de posiciones. Para cada orden de la forma α | φ hay bordes desde el nodo candidato α hasta cada nodo de posición en φ. Para las órdenes de la forma ψ | j hay bordes de cada candidato en ψ a la posición j. Para cada pedido, ponemos peso Qixi en cada uno de estos bordes. Todos los bordes múltiples con los mismos puntos finales se reemplazan con un solo borde que conlleva el peso total del OCTS múltiple. Cada estado S corresponde a una coincidencia perfecta en el gráfico bipartito. Además, el subastador paga a los ganadores la suma de todos los pesos de borde en la coincidencia perfecta, ya que cada candidato solo puede estar en una posición y cada puesto es tomado por un candidato. Por lo tanto, el estado y el pago del peor fundido de los subastadores son la solución al problema de correspondencia bipartita máxima ponderado, que ha conocido algoritmos de tiempo polinomial [12, 13]. Por lo tanto, el problema de separación se puede resolver en el tiempo polinomial. Naturalmente, si la solución óptima a (4) ofrece una ganancia en el peor de los casos de C ∗> 0, existe una coincidencia. Por lo tanto, el problema de correspondencia también se puede resolver en el tiempo polinomial.5. La complejidad de las apuestas de pares en esta sección mostramos que un ligero cambio del lenguaje de licitación puede provocar un cambio dramático en la complejidad del problema de correspondencia óptimo del subastador. En particular, mostramos que encontrar la coincidencia óptima en el mercado de apuestas de pares es NP-Hard para órdenes divisibles e indivisibles. Luego identificamos una condición suficiente verificable polinomialmente para decidir la existencia de una coincidencia. Los resultados de la dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas de parejas tiene un lenguaje de licitación aparentemente más restrictivo que solo ofrece N (n - 1) 1 la noción de coincidencia perfecta en un gráfico bipartito, que solo usamos en esta prueba, no debe confundirse con la noción de apuestas coincidentes que usamos en todo el papel.valores. En contraste, el mercado de apuestas de subconjunto permite a los operadores apostar por un número exponencial de valores y, sin embargo, tuvo una solución de tiempo polinómico para encontrar la coincidencia óptima. Nuestra esperanza es que la comparación de las complejidades del subconjunto y los mercados de apuestas de pares ofrezcan información sobre lo que hace que un lenguaje de licitación sea expresivo y al mismo tiempo permitir una solución de correspondencia eficiente. En todo el análisis que sigue, suponemos que los comerciantes presentan órdenes unitarias en los mercados de apuestas de pares, es decir Qi = 1. Un conjunto de pedidos o recibidos por el subastador en un mercado de apuestas de pares con pedidos unitarios puede representarse mediante un gráfico dirigido, G (V, E), donde el conjunto de vértices V contiene candidatos que los comerciantes apuestan. Un borde e ∈ E, denotado (α, β, BE), representa una orden para comprar 1 parte de la seguridad α> β al precio BE. Todos los bordes tienen el mismo peso de 1. Adoptamos las siguientes anotaciones en todo el documento: • G (V, E): Gráfico dirigido original igualmente ponderado para el conjunto de pedidos unitarios O. • BE: Precio del pedido de borde e.• G ∗ (V ∗, E ∗);Una gráfica dirigida de pedidos aceptados para una coincidencia óptima, donde el peso de borde Xe es la cantidad de orden E aceptada por el subastador.xe = 1 para órdenes indivisibles y 0 <xe ≤ 1 para órdenes divisibles.• H (V, E): un gráfico dirigido genérico de pedidos aceptados.• K (H): la solución al problema de arco de arco de retroalimentación mínima no ponderada en el gráfico H. K (h) es el número mínimo de bordes para eliminar para que H se vuelva acíclico.• L (H): la solución al problema de arco de arco de retroalimentación mínima ponderada en el gráfico H. L (H) es el peso total mínimo para el conjunto de bordes que, cuando se eliminan, dejan h acíclico.• C (H): la peor ganancia del subastador si acepta todos los pedidos en el gráfico H. •: un número real positivo suficientemente pequeño. Donde no se indique, <1/(2 | e |) para un gráfico H (v, e). En otros casos, el valor se determina en el contexto. Un conjunto de arco de retroalimentación de un gráfico dirigido es un conjunto de bordes que, cuando se eliminan del gráfico, deja un gráfico acíclico dirigido (DAG). El problema del conjunto de arco de retroalimentación mínima no ponderada es encontrar un arco de retroalimentación con la cardinalidad mínima, mientras que el problema de arco de retroalimentación mínima ponderada busca encontrar un arco de retroalimentación con el peso mínimo total del borde. Se ha demostrado que los problemas del conjunto de arco de retroalimentación mínima no ponderada y ponderada son NP completas [10]. Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas de pares.5.1 COMPARACIÓN INDIVISIBLES óptimas El problema de correspondencia óptimo de coincidencia óptima se introduce en la definición 3 de la Sección 3. Suponiendo las órdenes de la unidad y considerando el gráfico de pedidos G (v, E), reafiremos el problema de coincidencia óptimo de los subastadores en un mercado de apuestas de pares como eligiendo un subconjunto de bordes para aceptar de tal manera que 330 ganancias en el peor de los casos se maximice en el siguiente problema de optimización,Max Xe, C C (6) S.T.e be-es decir (s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin perder la generalidad, suponemos que no hay bordes múltiples en el gráfico de orden G. mostramosQue el problema de correspondencia óptimo para órdenes indivisibles es NP-HARD a través de una reducción del problema del conjunto de arco de retroalimentación mínima no ponderada. Este último toma como entrada un gráfico dirigido y pregunta cuál es el número mínimo de bordes para eliminar del gráfico para dejar un DAG. Nuestra prueba de dureza se basa en los siguientes lemas. Lema 2. Supongamos que el subastador acepta todos los bordes en un gráfico dirigido igualmente ponderado H (V, E) con precio de borde BE = (1 -) y peso de borde Xe = 1. Entonces, la ganancia del peor de los casos es igual a k (h)-| e |, donde k (h) es la solución al problema de arco de retroalimentación mínima no ponderada en H. prueba. Si el pedido de una ventaja obtiene una recompensa de $ 1 al final del mercado, llamamos a la ventaja una ventaja ganadora, de lo contrario se llama una ventaja perdedora. Para cualquier estado, todos los bordes ganadores necesariamente forman un DAG. Por el contrario, para cada DAG hay un estado en el que los bordes DAG son ganadores (aunque los bordes restantes en G no son necesariamente perdedores). Supongamos que en el estado s hay WS ganadores y ls = | e |- WS perdiendo bordes. Entonces, LS es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los bordes perdedores en el estado s.Los bordes que permanecen después de eliminar el conjunto de arco de retroalimentación mínima forman el DAG máximo para el gráfico H. Considere el estado SMAX en el que todos los bordes del DAG máximo son ganadores. Esto proporciona el número máximo de bordes ganadores WMAX. Todos los demás bordes son necesariamente perdedores en el estado SMAX, ya que cualquier borde que no esté en el máximo DAG debe formar un ciclo junto con algunos de los bordes DAG. El número de bordes perdedores en el estado SMAX es la cardinalidad del conjunto mínimo de arco de retroalimentación de H, es decir, | E |- wmax = k (h). El beneficio del subastador en un estado s es ganancias (s) = e∈E be - w = (1 -) | e |- W ≥ (1 -) | E |- Wmax, donde la igualdad se mantiene cuando s = smax. Por lo tanto, la ganancia del peor de los casos se logra en el estado smax, ganancias (smax) = (| e |-wmax)-| e |= k (h) - | e |. Considere el gráfico de los órdenes aceptados para una coincidencia óptima, G ∗ (V ∗, E ∗), que consiste en el subconjunto óptimo de los bordes E ∗ para ser aceptado por el subastador, es decir, es un bordes con Xe = 1 en la solución de la optimizaciónproblema (6). Tenemos el siguiente lema. Lema 3. Si los precios del borde son = (1−), entonces el gráfico de solución indivisible óptimo G ∗ tiene el mismo tamaño de arco de arco de retroalimentación mínima no ponderada que el gráfico de todos los órdenes G, es decir, k (g ∗) = k (g). Además, G ∗ es el subgrafo de G más pequeño de G, es decir, es el subgrafio de G con el menor número de bordes, que tiene el mismo tamaño del arco de retroalimentación mínima no ponderada como G. Prueba. G ∗ es un subgrafio de G, de ahí el número mínimo de bordes para romper los ciclos en G ∗ no es más que eso en G, a saber, K (G ∗) ≤ K (G). Supongamos que k (g ∗) <k (g). Dado que tanto K (G ∗) como K (g) son enteros, para cualquier <1 | E |Tenemos que k (g ∗) - | e ∗ |<k (g) - | e |. Por lo tanto, por Lemma 2, el subastador tiene una ganancia más alta en el peor de los casos al aceptar G que aceptar G ∗, lo que contradice la optimización de G ∗. Finalmente, la ganancia del peor de los casos k (g)-| e ∗ |se maximiza cuando | E ∗ |se minimiza. Por lo tanto, G ∗ es el subgrafo más pequeño de G tal que K (G ∗) = K (G). Los dos lemas anteriores demuestran que la ganancia máxima del peor de los peores en la coincidencia indivisible óptima está directamente relacionada con el tamaño del conjunto de arco de retroalimentación mínima. Por lo tanto, calcular cada uno da automáticamente al otro, por lo tanto, calcular la ganancia máxima del peor de los casos en el problema de apuestas de pares indivisibles es NP-Hard. Teorema 4. Calcular el máximo ganancias del peor de los casos en las apuestas de pares indivisibles es NP-HARD. Prueba. Por Lemma 3, la ganancia máxima del peor de los casos que es el óptimo para el problema de programación de enteros mixtos (6), es k (g)-| e ∗ |, donde | e ∗ |es el número de bordes aceptados. Ya que k (g) es entero y | e ∗ |≤ | E |<1, resolver (6) automáticamente nos dará la cardinalidad del conjunto de arco de retroalimentación mínima de G, K (G). Debido a que el problema del conjunto de arco de retroalimentación mínima es NP-Complete [10], calcular la ganancia máxima en el peor de los casos es NP-HARD. El teorema 4 establece que resolver el problema de optimización es difícil, porque incluso si el conjunto óptimo de pedidos se proporciona calculando la ganancia óptima del peor de los casos al aceptar esas órdenes es NP-HARD. Sin embargo, no implica si el problema de coincidencia óptimo, es decir, encontrar el conjunto óptimo de pedidos para aceptar, es NP-Hard. Es posible poder determinar qué bordes en un gráfico que participan en la coincidencia óptima, pero no puede calcular la ganancia del peor de los casos correspondiente. A continuación, demostramos que el problema de coincidencia óptima indivisible es en realidad NP-Hard. Usaremos el siguiente hecho breve repetidamente. Lema 5 (Lemma de extracción de borde). Dado un gráfico ponderado H (V, E), eliminar un solo borde E con peso XE de la gráfica disminuye la solución de arco de arco de retroalimentación mínima ponderada L (H) por no más de XE y reduce la solución del conjunto de arco de retroalimentación mínima no ponderada K ((H) por no más de 1. Prueba. Suponga que el arco de retroalimentación mínima ponderada para el gráfico H - {E} es F. Entonces F ∪ {E} es un conjunto de arco de retroalimentación para H, y tiene peso de borde total L (H− {E})+Xe. Debido a que L (h) es la solución al problema del arco del arco de retroalimentación mínima ponderada en h, tenemos l (h) ≤ l (h - {e})+xe, lo que implica que l (h - {e}) ≥ l (H) - xe. Del mismo modo, suponga que el arco de retroalimentación mínima no ponderada para el gráfico h - {e} es f. Entonces F ∪ {e} es un arco de retroalimentación para H, y ha establecido cardinalidad k (h− {e})+1. Debido a que k (h) es la solución al problema del arco del arco de retroalimentación mínima no ponderada en h, tenemos k (h) ≤ k (h - {e}) + 1, dando esa k (h - {e}) ≥ k (H) - 1. Teorema 6. Encontrar el partido óptimo en las apuestas de pares indivisibles es NP-Hard.331 Prueba. Nos reducimos del problema del arco del arco de retroalimentación mínima no ponderada, aunque con una transformación polinomial ligeramente más compleja que implica múltiples llamadas al oráculo óptimo de coincidencia. Considere un gráfico de instancia G del problema de conjunto de arco de retroalimentación mínima. Estamos interesados en calcular k (g), el tamaño del conjunto de arco de retroalimentación mínima de G. Supongamos que tenemos un oráculo que resuelve el problema de coincidencia óptimo. Denote por coincidencia óptima (g) la salida del oráculo óptimo de coincidencia en el gráfico G con precios BE = (1-) en todos sus bordes. Por Lemma 3, en la entrada G, el Oracle Optimal Match devuelve el subgrafo de G con el menor número de bordes, que tiene el mismo tamaño de arco de retroalimentación mínima establecida como G. El siguiente procedimiento encuentra k (g) utilizando polinomialmente muchas llamadas al oráculo óptimo de coincidencia en una secuencia de subgrafías de G. set g: = g iteraciones: = 0 while (g tiene un conjunto de borde no vacío) Restablecer G: = coincidencia óptima ((G) if (G tiene un ajuste de borde no vacío) iteraciones de incremento en 1 restablecimiento g eliminando cualquier borde E End si finaliza mientras return (iteraciones) Este procedimiento elimina los bordes del gráfico original G capa por capa hasta que el gráfico esté vacío, mientras que en elAl mismo tiempo, calculando el conjunto mínimo de arco del arco K (g) del gráfico original como el número de iteraciones. En cada iteración, comenzamos con un gráfico G y lo reemplazamos con el subgrafio G más pequeño que tiene la misma k (g). En esta etapa, eliminar un borde adicional e necesariamente da como resultado k (g - {e}) = k (g) −1, porque k (g - {e}) <k (g) por la optimización de g y k(G - {e}) ≥ k (g) - 1 por el lema Edgeremoval. Por lo tanto, en cada iteración, la cardinalidad del conjunto de arco de retroalimentación mínima se reduce exactamente en 1. Por lo tanto, el número de iteraciones es igual a k (g). Tenga en cuenta que este procedimiento proporciona una transformación polinómica del problema de coincidencia óptima al problema del conjunto de arco de retroalimentación mínima no ponderada, que llama al oráculo óptimo de coincidencia exactamente k (g) ≤ | e |tiempos, donde | E |es el número de bordes de G. de ahí el problema de coincidencia óptimo es NP-HARD.5.2 COMPARACIÓN DE DIVISIBLES óptimas Cuando los pedidos son divisibles, el problema de coincidencia óptima de los subastadores se describe en la definición 4 de la Sección 3. Suponiendo que las órdenes de la unidad y considerando el gráfico de la orden G (v, e), reafirmamos el problema de coincidencia óptima de los subastadores para las órdenes divisibles como la elección de la cantidad de órdenes para aceptar, xe ∈ [0, 1], de modo que la ganancia del peor de los casos se maximiza enEl siguiente problema de programación lineal, Max XE, C C (7) S.T.e be-es decir (s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. Todavía suponemos que no hay bordes multiedios en el gráfico de orden G. Cuando las órdenes son divisibles, elEl subastador puede estar mejor aceptando órdenes parciales. El ejemplo 2 muestra una situación en la que aceptar órdenes parciales genera mayores ganancias en el peor de los casos que la solución óptima indivisible. Ejemplo 2. Mostramos que el programa lineal (7) a veces tiene una solución óptima no entera. A B C D E F B B B B B B B B B B FIGURA 2: Un gráfico de pedido. Las cartas en los bordes representan los precios de los pedidos. Considere el gráfico en la Figura 2. Hay un total de cinco ciclos en el gráfico: tres ciclos de cuatro borde ABCD, ABEF, CDEF y dos ciclos de seis borde ABCDEF y ABEFCD. Suponga que cada borde tiene el precio B tal que 4B - 3> 0 y 6B - 5 <0, a saber, b ∈ (.75, .80), por ejemplo B = .78. Con esto, la solución indivisible óptima consiste en como máximo un ciclo de cuatro fuentes, con el peor beneficio de los casos (4B-3). Por otro lado, tomar 1 2 fracción de cada uno de los tres ciclos de cuatro fuentes produciría una mayor ganancia en el peor de los casos de 3 2 (4B-3). A pesar del aumento potencial de ganancias para aceptar órdenes divisibles, el problema de correspondencia óptimo de los subastadores sigue siendo NP-Hard para órdenes divisibles, que se presenta a continuación a través de varios lemas y teoremas. Lema 7. Supongamos que el subastador acepta órdenes descritos por un gráfico ponderado dirigido H (v, e) con peso de borde Xe como la cantidad aceptada para el pedido de borde e.La peor ganancia de los casos para el subastador es c (h) = e∈E (be-1) xe + l (h).(8) Prueba. Para cualquier estado de estado, los bordes ganadores forman un DAG. Por lo tanto, la ganancia del peor de los casos para el subastador logra en los estados cuando se minimiza la cantidad total de pedidos perdedores. La cantidad total mínima de pedidos perdedores es la solución al problema de establecimiento de arco de retroalimentación mínima ponderada en H, es decir, L (H). Considere el gráfico de los órdenes aceptados para una coincidencia divisible óptima, g ∗ (v ∗, e ∗), que consiste en el subconjunto óptimo de los bordes e ∗ para ser aceptado por el subastador, con peso de borde xe> 0 obteniendo la solución óptima deEl programa lineal (7). Tenemos los siguientes lemas.332 Lema 8. L (G ∗) ≤ K (G ∗) ≤ K (G). Prueba.L (G ∗) es la solución del problema del arco del arco de retroalimentación mínima ponderada en G ∗, mientras que K (G ∗) es la solución del problema del arco del arco de retroalimentación mínima no ponderada en G ∗. Cuando todos los pesos de borde en G ∗ son 1, L (G ∗) = K (G ∗). Cuando los XE son inferiores a 1, L (G ∗) puede ser menor o igual a K (G ∗). Dado que G ∗ es un subgrafio de G pero posiblemente con diferentes pesos de borde, K (G ∗) ≤ K (G). Por lo tanto, tenemos la relación anterior. Lema 9. Existe algo así que cuando todos los precios de borde son (1 -), l (g ∗) = k (g). Prueba. De Lemma 8, L (G ∗) ≤ K (G). Sabemos que la ganancia de los subastadores en el peor de los casos al aceptar G ∗ es c (g ∗) = e∈E ∗ (be-1) xe + l (g ∗) = l (g ∗)-e∈E ∗ xe. Cuando acepta el gráfico de orden original G en su totalidad, su peor beneficio es c (g) = e∈E (be - 1) + k (g) = k (g) - | e |. Supongamos l (g ∗) <k (g). Si | E |− E∈E ∗ xe = 0, significa que G ∗ es G. Por lo tanto, l (g ∗) = k (g) independientemente de, lo que contradice con la suposición l (g ∗) <k (g). Si | E |- e∈E ∗ xe> 0, entonces cuando <k (g) - l (g ∗) | e |- E∈E ∗ Xe, C (G) es estrictamente mayor que C (G ∗), que contradice con la optimización de C (G ∗). Porque los XE son menos de 1, L (G ∗)> K (G) es imposible. Por lo tanto, l (g ∗) = k (g). Teorema 10. Encontrar la ganancia óptima del peor de los casos en las apuestas de pares divisibles es NP-Hard. Prueba. Dado el conjunto óptimo de órdenes parciales para aceptar para G cuando los pesos de borde son (1-), si podemos calcular la ganancia óptima del peor de los casos, por Lemma 9 podemos resolver el problema del arco del arco de retroalimentación mínima no ponderada en G, que es NP, que es NP-duro. Por lo tanto, encontrar la ganancia óptima del peor de los casos es NP-Hard. El teorema 10 establece que resolver el programa lineal (7) es NP-Hard. De manera similar al caso indivisible, todavía necesitamos demostrar que solo encontrar la coincidencia divisible óptima es difícil, en lugar de poder calcular la ganancia óptima del peor de los peores. Dado que en el caso divisible, los bordes no necesariamente tienen pesos unitarios, la prueba en el Teorema 6 no se aplica directamente. Sin embargo, con una propiedad adicional del caso divisible, podemos aumentar el procedimiento de la prueba de dureza indivisible para calcular el conjunto de arco mínimo de retroalimentación mínima no ponderada K (g) aquí también. Primero, tenga en cuenta que el subgrafio divisible óptimo G ∗ de un gráfico G es el subgrafio ponderado con mínimo de retroalimentación ponderada Tamaño del conjunto L (g ∗) = k (g) y la mayor suma de pesos de borde e∈E ∗ Xe, ya que su correspondienteEl peor beneficio de los casos es K (g) - e∈E ∗ xe según Lemmas 7 y 9. Lema 11. Supongamos que el gráfico H satisface l (h) = k (h) y eliminamos el borde e con peso xe <1. Entonces, k (h - {e}) = k (h). Prueba. Suponga lo contrario, a saber, k (h− {e}) <k (h). Luego por Lemma 5, K (H - {e}) = k (h) - 1. Dado que la eliminación de un solo borde no puede reducir el arco de retroalimentación mínima establecida en más del peso del borde, L (h) - xe ≤ L (H - {E}).(9) Por otro lado, h - {e} ⊂ h así tenemos, l (h - {e}) ≤ k (h - {e}) = k (h) - 1 = l (h) - 1.(10) Combinando (9) y (10), obtenemos Xe ≥ 1. Surge la contradicción. Por lo tanto, eliminar cualquier borde con menos de peso unitario de un gráfico divisible óptimo no cambia K (h), el tamaño mínimo de arco de retroalimentación de la versión no ponderada del gráfico. Ahora podemos aumentar el procedimiento para el caso indivisible en el Teorema 6, para demostrar la dureza de la versión divisible, como sigue. Teorema 12. Encontrar el partido óptimo en las apuestas de pares divisibles es NP-Hard. Prueba. Reducimos del problema del arco del arco de retroalimentación mínima no ponderada para Graph G. Suponga que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en la gráfica de entrada H calcula los pesos de borde xe ∈ (0, 1] para el subgrafio óptimo H ∗de h, satisfactorio l (h ∗) = k (h). El siguiente procedimiento sale k (g).Establecer g: = g iteraciones: = 0 while (g tiene un borde no vacío) Restablecer G: = coincidencia divisible óptima (g) mientras (g tiene bordes con peso <1) Retire un borde con peso <1 de g restableciendo g configurandoTodos los pesos de borde a 1 restablecimiento G: = coincidencia divisible óptima (g) Fin mientras (g tiene un conjunto de borde no vacío) iteraciones de incremento en 1 restablecimiento g eliminando cualquier borde E final si finalTeorema 6 correspondiente para el caso indivisible, calculamos K (g) eliminando iterativamente los bordes y recomputando la solución divisible óptima en el subgrafio restante, hasta que se eliminen todos los bordes. En cada iteración del bucle externo, el conjunto de arco de retroalimentación mínima se reduce en 1, por lo tanto, el número de iteraciones es igual a k (g). Queda por verificar que cada iteración reduce K (g) en exactamente 1. A partir de un gráfico al comienzo de una iteración, calculamos su subgrafio divisible óptimo. Luego seguimos eliminando un borde de peso sin unidades a la vez y recomputando el subgrafio divisible óptimo, hasta que este último contiene solo bordes con peso unitario. Por Lemma 11 a lo largo de la iteración hasta ahora, el conjunto de arco de retroalimentación mínima del gráfico no ponderado correspondiente permanece sin cambios. Una vez que el Oracle devuelve un gráfico G con pesos de borde unitario, eliminar cualquier borde reduciría el conjunto mínimo de arco de retroalimentación: de lo contrario, G no es óptimo ya que G - {E} tendría 333 el mismo conjunto de arco de retroalimentación mínima pero menor peso de borde total. Al Lemma 5, eliminar un solo borde no puede reducir el arco de retroalimentación mínima establecido en más de uno, por lo tanto, ya que todos los bordes tienen peso unitario, K (g) se reduce exactamente en uno.k (g) es igual al valor devuelto del procedimiento. Por lo tanto, el problema de correspondencia óptimo para las órdenes divisibles es NP-Hard.5.3 Existencia de una coincidencia Sabiendo que el problema de coincidencia óptimo es NP-Hard para órdenes indivisibles y divisibles en las apuestas de pares, verificamos si el subastador puede identificar la existencia de un partido con facilidad. Lema 13 establece una condición suficiente para el problema de correspondencia con órdenes indivisibles y divisibles. Lema 13. Una condición suficiente para la existencia de una coincidencia para las apuestas de pares es que existe un ciclo c en g de tal manera que, es ≥ | c |- 1, (11) donde | c |es el número de bordes en el ciclo C. prueba. El lado izquierdo de la desigualdad (11) representa el pago total que el subastador recibe al aceptar cada unidad de pedidos en el ciclo C en su totalidad. Debido a que la dirección de un borde representa el orden predicho de los dos nodos conectados en la clasificación final, formando un ciclo, lo que significa que hay alguna contradicción lógica en los ordenamientos predichos de los candidatos. Por lo tanto, el estado se realiza, no todos los bordes en el ciclo pueden ser bordes ganadores. El peor de los casos para el subastador corresponde a un estado donde cada borde del ciclo se paga por $ 1 excepto uno, con | c |- 1 Sea el pago máximo a los comerciantes. Por lo tanto, si se cumple la desigualdad (11), el subastador tiene ganancias no negativas en el peor de los casos al aceptar las órdenes en el ciclo. Se puede demostrar que identificar un ciclo de ganancia de peor de los casos tan no negativo en un gráfico de pedidos G se puede lograr en el tiempo polinomial. Lema 14. Se necesita tiempo polinomial para encontrar un ciclo en un gráfico de orden G (v, e) que tiene la ganancia más alta en el peor de los casos, es decir, max c∈C e∈C be-(| c |-1), donde c es el es elConjunto de todos los ciclos en G. Prueba. Porque E∈C be-(| c |-1) = e∈C (be-1) + 1 = 1-e∈C (1-be), encontrando el ciclo que da la ganancia más alta en el original en el originalEl gráfico de pedidos G es equivalente a encontrar el ciclo más corto en un gráfico convertido H (V, E), donde H se logra estableciendo el peso para que el borde E en G sea (1 - BE). Encontrar el ciclo más corto en el gráfico H se puede hacer dentro del tiempo polinomial al recurrir al problema de ruta más corto. Para cualquier vértice V en V, consideramos cada vértice vecino W tal que (v, w) ∈ E. luego encontramos la ruta más corta de W a V, denotada como ruta (W, V). El ciclo más corto que pasa el vértice V se encuentra eligiendo la W de tal manera que E (V, W) + Path (W, V) se minimice. Comparando el ciclo más corto que se encuentra para cada vértice, podemos determinar el ciclo general más corto para el gráfico H. Debido a que el problema de la ruta corta se puede resolver en el tiempo polinomial [3], podemos encontrar la solución a nuestro problema en el tiempo polinomial. Si la ganancia del peor de los casos para el ciclo óptimo no es negativo, sabemos que existe una coincidencia en G. Sin embargo, la condición en Lemma 13 no es una condición necesaria para la existencia de una coincidencia. Incluso si todos los ciclos individuales en el gráfico de pedidos tienen ganancias negativas en el peor de los casos, el subastador puede aceptar múltiples ciclos de entrelazamiento para tener ganancias positivas del peor de los peores. La Figura 1 exhibe tal situación. Si la coincidencia indivisible óptima consiste solo en ciclos de disjunto de borde, un algoritmo codicioso natural puede encontrar el ciclo que brinda la mayor ganancia del peor de los casos, eliminar sus bordes del gráfico y continuar hasta que no existan más ciclos. Sin embargo, mostramos que tal algoritmo codicioso puede dar una aproximación muy pobre.√ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n bordes en los que el algoritmo codicioso encuentra solo dos ciclos, elciclo punteado en el centro y el ciclo restante único. Las etiquetas en las caras dan el número de bordes en el ciclo correspondiente. Lema 15. El algoritmo codicioso da como máximo una aproximación O (√ n) al número máximo de ciclos disjuntos. Prueba. Considere el gráfico en la Figura 3 que consiste en un ciclo con √ n bordes, cada uno de los cuales participa en otro ciclo (de lo contrario disjunto) con √ n + 1 bordes. Supongamos que todos los pesos de borde son (1 -). El número máximo de ciclos disjuntos es claramente √ n, tomando todos los ciclos con longitud √ n + 1. Debido a que los ciclos más pequeños ofrecen una ganancia más alta en el peor de los casos, el algoritmo codicioso seleccionaría primero el ciclo de longitud √ n, después de lo cual solo habría un ciclo restante de longitud n.Por lo tanto, el número total de ciclos seleccionados por Greedy es 2 y el factor de aproximación en este caso es √ n/2. A la luz del Lemma 15, uno puede esperar que los algoritmos codiciosos le den √ n-acroximaciones en el mejor de los casos. Los algoritmos de aproximación 334 para encontrar el número máximo de ciclos de disjunto de borde han sido considerados por Krivelevich, Nutov y Yuster [11, 19]. De hecho, para el caso de los gráficos dirigidos, los autores muestran que un algoritmo codicioso ofrece una acroximación n [11]. Cuando la coincidencia óptima no consiste en ciclos de disco de borde como en el ejemplo de la Figura 3, el algoritmo codicioso que intenta encontrar ciclos individuales óptimos falla obviamente.6. Conclusión Consideramos un escenario de apuestas de permutación, donde los comerciantes apuestan al orden final de n candidatos. ¡Mientras no es natural e intratable permitir que los comerciantes aposen directamente en el n!Diferentes ordenos finales, proponemos dos lenguajes de apuestas expresivos, apuestas de subconjunto y apuestas de par. En un mercado de apuestas de subconjunto, los comerciantes pueden apostar en un subconjunto de puestos que se encuentra un candidato o en un subconjunto de candidatos que ocupan una posición específica en el orden final. Las apuestas de pares permiten a los comerciantes apostar a si uno dado el candidato se clasifica más alto que otro candidato dado. Examinamos el problema del subastador de igualar pedidos sin incurrir en riesgos. Encontramos que en un mercado de apuestas de subconjunto, un subastador puede encontrar el conjunto óptimo y la cantidad de órdenes de aceptar de tal manera que su peor beneficio se maximice en el tiempo polinómico si las órdenes son divisibles. La complejidad cambia drásticamente para las apuestas de pares. Probamos que el problema de correspondencia óptimo para el subastador es NP-Hard para las apuestas de pares con órdenes indivisibles y divisibles a través de reducciones al problema del conjunto de arco de retroalimentación mínima. Identificamos una condición suficiente para la existencia de una coincidencia, que puede verificarse en tiempo polinomial. Se ha demostrado que un algoritmo codicioso natural da una aproximación pobre para las apuestas de pares indivisibles. Las preguntas abiertas interesantes para nuestras apuestas de permutación incluyen la complejidad computacional de la coincidencia indivisible óptima para las apuestas de subconjunto y la condición necesaria para la existencia de una coincidencia en los mercados de apuestas de pares. Estamos interesados en explorar más algoritmos de aproximación para los mercados de apuestas de parejas.7. Agradecimientos Agradecemos a Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin y miembros de Yahoo! Investigación para ideas y discusiones valiosas.8. Referencias [1] K. J. Arrow. El papel de los valores en la asignación óptima de la carga de riesgos. Review of Economic Studies, 31 (2): 91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson y T. A. Rietz. Resultados de una docena de años de investigación en mercados de futuros electorales. En C. A. Plott y V. Smith, editores, Manual de resultados económicos experimentales (de próxima publicación).2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest y C. Stein. Introducción a los algoritmos (segunda edición). MIT Press y McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham y R. Steinberg. Subastas combinatorias. MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz y T. W. Ross. Deseos, expectativas y acciones: una encuesta sobre la formación de precios en los mercados de valores electorales. Journal of Economic Behavior and Organization, 39: 83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock y M. P. Wellman. Estilo booleano de apuestas: un marco para el comercio de valores basados en fórmulas lógicas. Sistemas de soporte de decisiones, 39 (1): 87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz y A. Schrijver. El método elipsoide y sus consecuencias en la optimización combinatoria. Combinatorica, 1 (2): 169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz y A. Schrijver. Algoritmos geométricos y optimización combinatoria. Springer-Verlag, Berlín Heidelberg, 1993. [9] R. D. Hanson. Diseño del mercado de la información combinatoria. Information Systems Frontiers, 5 (1): 107-119, 2003. [10] R. M. Karp. Reducibilidad entre problemas combinatorios. En complejidad de los cálculos de la computadora (Proc. Simpos., IBM Thomas J. Watson Res. Centro, Yorktown Heights, N.Y.), páginas 85-103. Plenum, Nueva York, 1972. [11] M. Krivelevich, Z. Nutov y R. Yuster. Algoritmos de aproximación para problemas de embalaje de ciclo. Actas del decimosexto Simposio ACM-SIAM anual sobre algoritmos discretos, páginas 556-561, 2005. [12] H. W. Kuhn. El método húngaro para el problema de asignación. Naval Research Logistic Quarterly, 2: 83-97, 1955. [13] J. Munkres. Algoritmos para los problemas de asignación y transporte. Revista de la Sociedad de Matemáticas Industriales y Aplicadas, 5 (1): 32-38, 1957. [14] N. Nisan. Licitación y asignación en subastas combinatorias. En Actas de la 2da Conferencia ACM sobre Comercio Electrónico (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles y F. A. Nielsen. El verdadero poder de los mercados artificiales. Science, 291: 987-988, febrero de 2002. [16] C. Plott y S. Sunder. Eficiencia de los mercados de seguridad experimentales con información privilegiada: una aplicación de modelos de expectativas racionales. Journal of Political Economy, 90: 663-98, 1982. [17] C. Plott y S. Sunder. Expectativas racionales y la agregación de información diversa en los mercados de seguridad de laboratorio. Econometrica, 56: 1085-1118, 1988. [18] T. Sandholm. Algoritmo para una determinación óptima del ganador en subastas combinatorias. Artificial Intelligence, 135: 1-54, 2002. [19] R. Yuster y Z. Nutov. Embalaje ciclos dirigidos de manera eficiente. Actas del 29º Simposio Internacional sobre Fundaciones Matemáticas de la Computación (MFCS), 2004. 335