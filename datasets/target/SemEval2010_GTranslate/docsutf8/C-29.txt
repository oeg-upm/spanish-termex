Implementación y evaluación del desempeño de Conflex-G: Programa de búsqueda de espacio conformacional molecular habilitado para la red con Omnirpc Yoshihiro Nakajima Escuela de Graduados de Sistemas e Ingeniería de la Información, Universidad de Tsukuba Tsukuba, 305-8577, Japón yoshihiro@hpcs.is.tsukuba.ac.JPMitsuhisa Sato Institute of Information Sciences and Electronics, University of Tsukuba Tsukuba, 305-8577, Japón msato@is.tsukuba.ac.jp Hitohi GOO GOTO Ingeniería de información basada en el conocimiento, Toyohashi University Technology Toolyhashi, 441-8580, Japón Gotoh@COCHEM2.tutkie.tut.ac.jp Taisuke Boku, Daisuke Takahashi Institute of Information Sciences and Electronics, University of Tsukuba Tsukuba, 305-8577, Japón {Taisuke, Daisuke}@hpcs.is.tsukuba.ac.jp Resumen conflex-g esLa versión habilitada para la cuadrícula de un programa de búsqueda de espacio conformacional molecular llamado conflex. Hemos implementado Conflex-G utilizando un sistema RPC Grid llamado OMNIRPC. En este documento, informamos el rendimiento de Conflex-G en un tallador de cuadrícula de varios grupos de PC distribuidos geográficamente. Para explorar muchas conformaciones de grandes bio-moléculas, Conflex-G genera estructuras de prueba de las moléculas y asigna trabajos para optimizar una estructura de prueba con un método de mecánica molecular confiable en la cuadrícula. OMNIRPC proporciona un modelo de persistencia restringido para admitir las aplicaciones de búsqueda paramétrica. En este modelo, cuando el procedimiento de inicialización se define en el módulo RPC, el módulo se inicializa automáticamente en el momento de la invocación llamando al procedimiento de inicialización. Esto puede eliminar la comunicación e inicialización innecesaria en cada llamada en Conflex-G.Conflexg puede lograr un rendimiento comparable a MPI Conflex y puede explotar más recursos informáticos al permitir el uso de un clúster de múltiples grupos en la cuadrícula. El resultado experimental muestra que el conflex-G logró una aceleración de 56.5 veces en el caso de la molécula 1BL1, donde la molécula consiste en una gran cantidad de átomos, y cada optimización de la estructura de prueba requiere un tiempo significativo. El desequilibrio de carga del tiempo de optimización de la estructura de prueba también puede causar la degradación del rendimiento. Categorías y descriptores de sujetos C.2.4 [Organización de sistemas informáticos]: sistemas distribuidos por redes de comunicación ComputerMunication;J.2.4 [Aplicaciones informáticas]: Ciencias físicas e ingeniería Términos generales Diseño, rendimiento 1. La aclaración de la introducción de las conformaciones estables y el proceso de plegamiento de las proteínas es uno de los objetivos más fundamentales y desafiantes en la ciencia de la vida. Mientras que algunas de las estructuras secundarias más comunes (por ejemplo, ciertos tipos de hélice, la cadena beta y la bobina) son bien conocidos, un análisis preciso de los miles de conformadores químicamente importantes y el análisis de orden pico de sus interconversiones conformacionales a través de sus conformacionalLos estados de transición en la superficie de energía potencial son necesarios para la investigación de orden de microsegundos del proceso de plegamiento hacia las formaciones de la estructura terciaria. Recientemente, el concepto de la red computacional ha comenzado a atraer un interés significativo en el campo de la informática de la red de alto rendimiento. Los rápidos avances en tecnología e infraestructura de red de amplio área han permitido construir entornos informáticos distribuidos a gran escala y de alto rendimiento, o cuadrículas computacionales, que proporcionan un acceso confiable, consistente y generalizado a enormes recursos computacionales. Conflex es uno de los programas de búsqueda de espacio conformacional más eficientes y confiables [1]. Hemos aplicado este programa 154 a la paralelización utilizando la computación global. El rendimiento del conflex paralelo permite la exploración de la región de menor energía del espacio conformacional de pequeños péptidos dentro de un tiempo transcurrido disponible utilizando un clúster de PC local. Dado que la optimización de la estructura del ensayo en Conflex se calcula a través de la mecánica molecular, la búsqueda de espacio conformacional se puede realizar rápidamente en comparación con la utilizando el cálculo orbital molecular. Aunque la versión paralela de Conflex se utilizó para calcular en paralelo la optimización de la estructura, que ocupa más del 90% del procesamiento en la búsqueda de conformación molecular, no se pudo lograr una mejora suficiente en la aceleración solo con este método. Por lo tanto, para los polímeros altos de organismos vivos, como la proteasa del VIH, el clúster de uso de una PC es insuficiente debido al requisito de optimización de una gran cantidad de estructuras de prueba. Esto requiere los vastos recursos informáticos de un entorno informático de la cuadrícula. En este artículo, describimos a Conflex-G, un programa de búsqueda conformacional molecular habilitado para la red, utilizando OMNIRPC e informar su rendimiento en una cuadrícula de varios grupos de PC que se distribuyen geográficamente. El prototipo de conflex-G asigna la optimización de estructuras de ensayo de cálculo, que es una tarea que requiere mucho tiempo, a los nodos de los trabajadores en el entorno de la cuadrícula para obtener un alto rendimiento. Además, comparamos el rendimiento de Conflex-G en un clúster de PC local con el de un lecho de prueba de cuadrícula. OMNIRPC [2, 3, 4] es una implementación segura de hilo de NINF RPC [5, 6], que es una instalación de RPC de cuadrícula para la informática del entorno de la cuadrícula. Varios sistemas adoptan el concepto de RPC como el modelo básico para la computación del entorno de la cuadrícula, incluidos NINF-G [7], NetSolve [8] y Corba [9]. El sistema RPCStyle proporciona una interfaz de programación intuitiva e fácil de usar, lo que permite a los usuarios del sistema de cuadrícula crear fácilmente aplicaciones habilitadas para la red. Para admitir la programación paralela, un cliente RPC puede emitir solicitudes de llamadas asíncronas a una computadora remota diferente para explotar el paralelismo en toda la red a través de OMNIRPC. En este artículo, proponemos el modelo de persistencia OmnIrpc a un sistema RPC de la cuadrícula y demostramos su efectividad. Para admitir una aplicación típica para un entorno de cuadrícula, como una aplicación de búsqueda paramétrica, en la que la misma función se ejecuta con diferentes parámetros de entrada en el mismo conjunto de datos. En el sistema GRIDRPC actual [10], los datos establecidos por la llamada anterior no pueden ser utilizadas mediante llamadas posteriores. En el sistema OMNIRPC, una vez que se invoca un ejecutable remoto, el cliente intenta usar el ejecutable remoto invocado y su estado inicializado para las llamadas RPC posteriores a las mismas funciones remotas para eliminar el costo de invocación de cada llamada. Este documento demuestra que Conflex-G puede explotar los enormes recursos informáticos de un entorno de cuadrícula y buscar conformadores moleculares a gran escala. Demostramos conflex-G en nuestro lecho de prueba de cuadrícula utilizando la proteína real como una molécula de muestra. La instalación OMNIRPC del módulo inicializable automático (AIM) permite que el sistema calcule eficientemente numerosos conformadores. Además, al usar OMNIRPC, el usuario puede paralelizar la red y moverse del clúster al entorno de la cuadrícula sin modificar el código del programa y compilar el programa. Además, el usuario puede construir fácilmente un entorno de cuadrícula privada. El resto de este documento está organizado de la siguiente manera. Una selección general de la base de datos de estructura inicial Base de datos Local Perturbation Geometry Optimización Comparación y registro Figura 1: Algoritmo de búsqueda de espacio conformacional en el conflex original.del sistema Conflex se presenta en la Sección 2, y la implementación y el diseño de Conflex-G se describen en la Sección 3. Reportamos los resultados experimentales obtenidos usando Conflex-G y discutimos su rendimiento en la Sección 4. En la Sección 6, presentamos conclusiones y discutimos sujetos para futuros estudios.2. Conflex Conflex [1] es un programa de búsqueda de espacio conformacional eficiente, que puede buscar predominantemente y exhaustivamente los conformadores en la región de menor energía. Las aplicaciones de Conflex incluyen la aclaración de la reactividad y la selectividad de los medicamentos y los posibles materiales de medicamentos con respecto a su flexibilidad conformacional.2.1 Algoritmo de Informational Spacessarch La estrategia básica de Conflex es una búsqueda exhaustiva de las regiones de baja energía. El conflex original realiza los siguientes cuatro pasos principales: 1. Selección de una estructura inicial entre los conformadores únicos descubiertos previamente ordenados en una base de datos conformacional.(Una estructura de entrada se usa como la primera estructura inicial al comienzo de una ejecución de búsqueda solamente). 2. Generación de estructuras de prueba por perturbaciones locales a la estructura inicial seleccionada.3. Optimización de geometría para las estructuras de prueba recientemente generadas.4. Comparación de las estructuras optimizadas (de prueba) con éxito con los otros conformadores almacenados en una base de datos de conformación y la preservación de conformadores únicos recién descubiertos en la base de datos. La Figura 1 muestra el esquema de Conflex, el algoritmo de búsqueda de espacio conformacional original. Estos procedimientos incorporan dos estrategias únicas. La Figura 2 muestra las estrategias para generar perturbaciones locales en Conflex. La primera estrategia implica tanto el aleteo de la esquina como el volteo de borde para los átomos del anillo y la rotación paso a paso para cadenas laterales o cadenas de columna vertebral. Estos métodos proporcionan una forma altamente eficiente de producir varias buenas estructuras de prueba. Estas perturbaciones se pueden considerar para imitar 155 155 FIGA DEL ENTA DEL ENTA DE CORQUE DE ROTACIÓN PASO FIGURA 2: Estrategias utilizadas para generar las perturbaciones locales.Un paso de cruce de barrera en el proceso elemental de la interconversión conformacional térmica. En realidad, las perturbaciones de una estructura inicial corresponden al rendimiento preciso alrededor del espacio de la estructura inicial debido a la localización y debilidad de la perturbación. La regla de selección de la estructura inicial, la regla más baja del Conformador primero, es la segunda estrategia para dirigir la búsqueda de conformación expandida a las regiones de baja energía. La estructura inicial se selecciona como el conjunto de conformadores de energía más bajos almacenados en la base de datos de conformación. Esta regla es efectiva para moverse por el espacio de búsqueda hacia regiones de menor energía, como el agua desde una corriente que se encuentra con un depósito vacío, mientras llena las depresiones locales en el camino. Por lo tanto, estos procedimientos tácticos de la búsqueda conflex se denominan algoritmo de llenado del depósito. Para permanecer en la región de baja energía y realizar una búsqueda exhaustiva, el límite de búsqueda (SEL), que determina la energía máxima de las estructuras iniciales, está predefinida. El aumento gradual del SEL permite que solo se registren los conformadores de baja energía y evita que se desvíe en regiones innecesariamente de alta energía.2.2 Paralelización de conflex para el clúster para la aplicación a más de 100 átomos, el conflex mejoró utilizando técnicas de computación paralela de alto rendimiento. En el algoritmo de búsqueda Conflex, los procedimientos de optimización de geometría siempre toman el 95% del tiempo transcurrido de la ejecución de la búsqueda. Por lo tanto, paralelamos esta optimización utilizando la técnica de paralelización de maestro/trabajador. Modificamos los procedimientos de búsqueda de la siguiente manera. Después de generar estructuras de prueba (Paso 2), se almacenan temporalmente en un grupo de tareas en el nodo maestro. Luego, cada nodo trabajador se suministra dinámicamente una estructura de prueba del nodo maestro. Después de finalizar una optimización en un nodo de trabajador, el trabajador se suministra inmediatamente con otra estructura de prueba. Cuando todas las estructuras de prueba relacionadas con una estructura inicial dada están optimizadas, solo el procedimiento maestro se usa en comparación. Al paralelizar al conflex, la aceleración de la búsqueda de conformadores moleculares obtenidos es como se informa en [11].3. Conflex-G Originalmente, Conflex estaba destinado a su uso en la exploración de los conformadores de las grandes bio-moléculas, dicha proteasa del VIH. En tales moléculas, aumenta el número de estructuras de prueba y el tiempo requerido para la optimización de la selección de RPC de las conformaciones de estructura inicial Base de datos Comparación de perturbación local y registro Programa del cliente Task Bolet de la optimización de geometría Optimización RPC RPC Grid Grid Cluster B Cluster A Cluster C ESTRUCTURA DE ESTRUCTURA DE ESTRUCTURA DE ESTRUCTURAEstructura de prueba Estructura Figura 3: Procedimiento de Conflex-G.Agente Rexrex Rex Cliente Jones.tsukuba.ac.jp hpc-serv.hpcc.jp hpc1 hpc2 hpc3 agente invocation Communicationnetwork Figura 4: Descripción general del sistema OMNIRPC para el clúster remoto que tiene una dirección IP privada.La estructura del juicio se vuelve inmensa. Implementamos la versión paralela de Conflex, que no puede tratar tales moléculas usando solo un clúster de PC local. Para explotar los vastos recursos informáticos de un entorno de cuadrícula, diseñamos e implementamos Conflex-G, que es una versión habilitada para la cuadrícula de Conflex, con el sistema OMNIRPC. Conflex-G asigna trabajos para optimizar una estructura de prueba a los nodos computacionales de cada clúster en el entorno de la cuadrícula. La Figura 3 muestra el proceso de Conflex-G. Los programas de los trabajadores se inicializan mediante el método Initialize, que proporciona la instalación de AIM de OMNIRPC en la invocación de trabajadores. En cada llamada RPC, el estado inicializado se reutiliza en el host remoto. En otras palabras, el programa del cliente puede eliminar la inicialización para cada llamada RPC y, por lo tanto, puede optimizar las estructuras de prueba de manera eficiente.3.1 El sistema OMNIRPC OMNIRPC es un sistema RPC Grid que permite una programación paralela perfecta desde un clúster de PC a un entorno de cuadrícula. OMNIRPC hereda su API y arquitectura básica de NINF. Un cliente y los hosts computacionales remotos que ejecutan los procedimientos remotos pueden conectarse a través de una red. Las bibliotecas remotas se implementan como un programa ejecutable que contiene una rutina de red de red como su rutina principal. Llamamos a este programa ejecutable un programa ejecutable remoto (REX). Cuando se inicia el programa del cliente OMNIRPC, la función de inicialización del sistema OMNIRPC invoca el programa OMNIRPC Agent Program OMRPC-Agent en los hosts remotos que figuran en el archivo de host. Para invocar al agente, el usuario puede usar el comando de shell remoto RSH en una red de área local, la API Gram (Globus Resource Asignation Manager) de Globus 156 Toolkit [12] en un entorno de cuadrícula o el comando shell de shell seguro SSH SSH. El usuario puede cambiar las configuraciones solo cambiando el archivo de host. OMNIRPCCALL es una simple interfaz de programación de clientes para llamar a funciones remotas. Cuando OmnIrpCCall realiza una llamada de procedimiento remoto, la llamada se asigna a un host remoto apropiado. Cuando el cliente emite la solicitud RPC, solicita que el agente en el host seleccionado envíe el trabajo del ejecutable remoto con el programador de trabajo local especificado en el archivo de host. Si no se especifica el programador de trabajo, el agente ejecuta el ejecutable remoto en el mismo nodo por la llamada del sistema de la bifurcación. El cliente envía los datos de los argumentos de entrada al ejecutable remoto invocado y recibe los resultados al retorno de la función remota. Una vez que se invoca un ejecutable remoto, el cliente intenta usar el ejecutable remoto invocado para llamadas RPC posteriores para eliminar el costo de invocar el mismo ejecutable remoto nuevamente. Cuando se invocan el agente y los ejecutables remotos, los programas remotos obtienen la dirección y el puerto del cliente de la lista de argumentos y se conectan nuevamente al cliente por TCP/IP directo o Globus-IO para la transmisión de datos. Debido a que el sistema OMNIRPC no utiliza ningún puerto de servicio fijo, el programa del cliente asigna los puertos no utilizados dinámicamente para esperar la conexión desde los ejecutables remotos. Esto evita posibles problemas de seguridad y permite al usuario instalar el sistema OMNIRPC sin requerir una cuenta privilegiada. Aquí, un recurso de cuadrícula típico se considera un grupo de grupos de PC distribuidos geográficamente. Para los grupos de PC en una red privada, un proceso de agente OMNIRPC en el host del servidor funciona como un proxy para transmitir las comunicaciones entre el cliente y los ejecutables remotos multiplexando las comunicaciones utilizando una sola conexión. Esta característica, llamada Multiplex IO (MXIO), permite que un solo cliente use hasta 1,000 hosts informáticos remotos. Cuando el clúster de PC está dentro de un firewall, el reenvío de puerto de SSH permite que el nodo se comunique con el exterior con MXIO. La Figura 4 muestra la descripción general del sistema OMNIRPC para un clúster remoto con una dirección IP privada. Para la programación paralela, el programador puede usar llamadas de procedimientos remotos asíncronos, lo que permite al cliente emitir varias solicitudes mientras continúa con otros cálculos. Las solicitudes se envían a diferentes hosts remotos que se ejecutarán en paralelo, y el cliente espera o encuesta la solicitud completa. En dicho modelo de programación con llamadas de procedimiento remoto asíncrono, el programador debe manejar solicitudes sobresalientes explícitamente. Debido a que OMNIRPC es un sistema seguro para los subprocesos, una serie de llamadas de procedimientos remotos pueden ser sobresalientes en cualquier momento para programas multiproceso escritos en OpenMP.3.2 Modelo de persistencia OMNIRPC: Módulo inicializable automático OMNIRPC admite eficientemente las aplicaciones paralelas típicas de maestría/trabajador, como programas de ejecución paramétrica. Para aplicaciones de búsqueda paramétricas, que a menudo requieren una gran cantidad de datos idénticos para cada llamada, OmnIrpc admite un modelo de persistencia limitado, que es implementado por el módulo inicializable automático. El usuario puede definir un procedimiento de inicialización en el ejecutable remoto para enviar y almacenar datos automáticamente antes de las llamadas de procedimiento remoto reales. Dado que el ejecutable remoto puede aceptar solicitudes de llamadas posteriores, el conjunto de datos que ha sido establecido por el procedimiento de inicialización puede reutilizarse. Como resultado, el programa de trabajadores puede ejecutarse de manera eficiente y reducir la cantidad de datos transmitidos para la inicialización. Una vez que se invoca un ejecutable remoto, el cliente intenta usar el ejecutable remoto invocado para llamadas RPC posteriores. Sin embargo, OMNIRPC no garantiza la persistencia del ejecutable remoto, por lo que los datos establecidos por la llamada anterior no pueden ser utilizados mediante llamadas posteriores. Esto se debe a que una llamada remota de OMNIRPCCALL puede programarse en cualquier host remoto dinámicamente, y los ejecutables remotos pueden finalizarse accidentalmente debido a la rededulación dinámica o las fallas del host. Sin embargo, la persistencia del ejecutable remoto puede explotarse en ciertas aplicaciones. Un ejemplo es una aplicación de búsqueda paramétrica: en dicha aplicación, sería eficiente si la primera llamada pudiera precargar un gran conjunto de datos, y las llamadas posteriores pudieran realizarse en los mismos datos, pero con diferentes parámetros. Este es el caso de Conflex. OMNIRPC proporciona un modelo de persistencia restringido a través del módulo inicializable automático (AIM) para admitir este tipo de aplicación. Si el procedimiento de inicialización se define en el módulo, el módulo se inicializa automáticamente al invocación llamando al procedimiento de inicialización. Cuando el ejecutable remoto se vuelve a programar en diferentes hosts, se llama a la inicialización para inicializar el módulo remoto recientemente asignado. Esto puede eliminar las comunicaciones innecesarias cuando las llamadas de RPC usan los mismos datos. Para revelar más sobre la diferencia en progreso entre los casos con el objetivo de Omnirpc y sin objetivo Omnirpc, presentamos dos figuras. La Figura 5 ilustra el cuadro de tiempo del progreso de una aplicación OMNIRPC típica utilizando la instalación de AIM de OMNIRPC, y la Figura 6 ilustra el cuadro de tiempo de la misma aplicación sin la instalación de AIM de OMNIRPC. En ambas figuras, las líneas entre diamantes representan los procesos de inicialización, y las líneas entre los puntos representan el cálculo. La línea en negrita indica el momento en que el programa del cliente envía los datos a un programa de trabajadores. Es necesario para la aplicación sin la instalación de AIM de OMNIRPC para inicializarse en cada RPC. La aplicación que utiliza la instalación de AIM de OMNIRPC puede reutilizar los datos inicializados una vez que se inicializa el conjunto de datos. Esto puede reducir la inicialización en cada RPC. Los trabajadores de la aplicación con el AIM pueden calcular eficientemente en comparación con la aplicación sin la instalación de AIM de OMNIRPC.3.3 Implementación de Conflex-G usando OMNIRPC La Figura 3 muestra una descripción general del proceso utilizado en Conflexg. Utilizando RPCS, Conflex-G asigna los procesos de optimización de la estructura de prueba, que se realizan por los nodos de cálculo de un clúster de PC en la versión MPI de Conflex, a los nodos computacionales de cada clúster en un entorno de cuadrícula. Hay dos cálculos realizados por los programas de trabajadores en Conflex-G.Uno es la inicialización de un programa de trabajadores, y otro es el cálculo de la optimización de la estructura del ensayo. Primero, la instalación OMNIRPC del AIM está adaptada para la inicialización de un programa de trabajadores. Esta instalación llama automáticamente la función de inicialización, que está contenida en el programa de trabajadores, una vez que el programa del cliente invoca el programa de trabajadores en un nodo remoto. Es necesario que el sistema RPC común, incluido GridRPC, inicialice un programa para cada llamada de RPC, ya que la persistencia de datos de los programas de trabajadores 157 Tiempo Programa de clientes Programa de trabajadores 1 Programa de trabajadores 2 Inicialización Inicialización Cálculo de cálculo Cálculo Cálculo de cálculo Paralelizado utilizando RPC asíncronos Figura 5: Tiempo: Tiempo: Tiempo Tiempo: Tiempo Tiempo Tiempo: Tiempo TiempoGráfico de aplicaciones utilizando la instalación OMNIRPC del módulo inicializable automático.Tiempo Programa del cliente Programa de trabajadores 1 Programa de trabajadores 2 Inicialización Inicialización Inicialización Cálculo Cálculo Cálculo Cálculo Inicialización Inicialización Paralelizado utilizando el cálculo de RPCS asíncrono Figura 6: Tiempo de tiempo de aplicaciones sin la instalación OMNIRPC del módulo inicializable automático. Tabla 1: Configuraciones de la máquina en el Bed de prueba de cuadrícula. Autenticación de red de la máquina de la máquina del clúster del sitio # de nodos # de CPU Univ.de Tsukuba Dennis Dual Xeon 2.4Ghz 1GB Ethernet Globus, SSH 14 28 Alice Dual Athlon 1800+ 100MB Ethernet Globus, SSH 18 36 Tut Toyo Dual Athlon 2600+ 100Mb Ethernet SSH 8 16 AIST UME Pentium dual3 1.4GHZ 1GB Ethnet Globus, SSH 32 64 64 64 64no es apoyado. Sin embargo, en OMNIRPC, cuando la función remota de Inicializar se define en el programa de trabajadores y un nuevo programa de trabajadores, correspondiente al otro RPC, se asigna para ejecutar, una función de inicialización se llama automáticamente. Por lo tanto, después de la llamada de función de inicialización para configurar datos de inicialización comunes, un programa de trabajadores puede reutilizar estos datos y aumentar la eficiencia de sus procesos. Por lo tanto, cuanto mayor sea el costo de configuración, mayor será el beneficio potencial. Implementamos el programa de trabajadores de Conflex-G para recibir datos, como los parámetros de evaluación de energía, de un programa de cliente y para ser inicializados por la función inicializar. Organizamos el programa cliente de Conflex-G para transferir el archivo de parámetros al momento de la inicialización del trabajador. Esto permite que la ejecución se realice modificando solo la configuración del cliente si el usuario desea ejecutar Conflex-G con un conjunto de datos diferente. En segundo lugar, para calcular la optimización de la estructura del ensayo en un programa de trabajadores, el programa de trabajadores debe recibir los datos, como la disposición del átomo de la estructura del ensayo y el estado de energía interna. El resultado se devuelve al programa del cliente después de que el trabajador haya optimizado la estructura de prueba. Dado que la parte de cálculo de la optimización de la estructura en este programa de trabajadores se puede calcular de forma independiente utilizando diferentes parámetros, paralelamos esta porción utilizando RPC asíncronos en el lado del cliente. Para llamar a la función de optimización de la estructura en un programa de trabajadores del programa del cliente, utilizamos la API OmnIrpCCallasync, que está destinada a RPC asíncrono. Además, la API OmnirpcCallWaitall que espera hasta que se usen todos los RPC asíncronos para realizar la sincronización con todos los RPC asíncronos completados para optimizar la estructura de prueba. El programa cliente que asigna la optimización de la estructura de prueba al nodo de cálculo de un clúster de PC usando RPC se describe de la siguiente manera. Omnirpcinit () omnirpcModuleInit (conflex_search, ...);... while (<new conformers>) {foreach (<sits Structures>) omnirpccallasync (conflex_search_worker, ...);Omnirpcwaitall ();... Tenga en cuenta que la API OmnIrpCModuleInit devuelve solo los argumentos necesarios para la inicialización y en realidad no ejecutará la función de inicialización. Como se describió anteriormente, la inicialización real se realiza en la primera llamada remota. Dado que el sistema OMNIRPC tiene un planificador fácil de round-robin, no tenemos que escribir explícitamente el código para el balance de carga. Por lo tanto, los RPC se asignan automáticamente a los trabajadores inactivos.158 Tabla 2: rendimiento de la red entre el nodo maestro del clúster Dennis y el nodo maestro de cada clúster de PC. Tiempo de clúster de rendimiento de ida y vuelta (MS) (MBPS) Dennis 0.23 879.31 Alice 0.18 94.12 Toyo 11.27 1.53 UME 1.07 373.33 4. Resultados preliminares 4.1 Prueba de cuadrícula Bed El Bed de prueba de cuadrícula se construyó mediante recursos de computación en la Universidad de Tsukuba, la Universidad Tecnológica de Toyohashi (TUT) y el Instituto Nacional de Ciencia y Tecnología Industrial Avanzada (AIST). La Tabla 1 muestra los recursos informáticos utilizados para la cuadrícula del presente estudio. La Universidad de Tsukuba y AIST están conectadas por un WAN Tsukuba de 1 GBPS, y los otros grupos de PC están conectados por SINET, que es una red de área amplia dedicada a la investigación académica en Japón. La Tabla 2 muestra el rendimiento de la red medida entre el nodo maestro del clúster Dennis y el nodo maestro de cada clúster de PC en el lecho de prueba de la cuadrícula. El rendimiento de la comunicación se midió utilizando NetPerf, y el tiempo de ida y vuelta se midió mediante PING.4.2 Rendimiento de Conflex-G En todos los experimentos de Conflex-G, el programa del cliente se ejecutó en el nodo maestro del clúster de Dennis en la Universidad de Tsukuba. El programador de omnirpc incorporado se utilizó como programador de trabajo. SSH se utilizó para un sistema de autenticación, el OminRPCS MXIO, que transmite la comunicación de E/S entre el programa de clientes y los programas de trabajadores mediante el reenvío de puertos de SSH, no se utilizó. Tenga en cuenta que se asigna y realiza un programa de trabajadores en una CPU del nodo de cálculo en un clúster de PC. Es decir, el número de trabajadores es igual al número de CPU. Estos programas fueron compilados por Intel Fortran Compiler 7.0 y GCC 2.95. MPICH, versión 1.2.5, se utilizó para comparar el rendimiento entre el MPI Conflex y el conflex-G. Para demostrar la usabilidad de la instalación OMNIRPC del AIM, implementamos otra versión de Conflex-G que no utilizó la instalación OMNIRPC. El programa de trabajadores en esta versión de Conflexg debe inicializarse en cada RPC porque el trabajador no contiene el conjunto de datos anterior. Para examinar el rendimiento de Conflex-G, seleccionamos dos péptidos y dos proteínas pequeñas como moléculas de prueba: • metilester de n-acetil tetra-alanina (Alax04) • metilester de n-acetil hexdeca-alanina (Alax16) • Miniproteína TRP-cage-cageConstruya TC5B (1L2Y) • El fragmento N-terminal del receptor PTH (1BL1) Tabla 3 enumera las características de estas moléculas de muestra. La estructura / bucles de prueba de la columna en esta tabla muestra la Figura 7: Actuaciones de conflex-G, MPI conflex y conflex original en el clúster Dennis. Figura 8: Relación de aceleración, que se basa en el tiempo transcurrido de Conflex-G usando un trabajador en el clúster de Dennis. Figura 9: Rendimiento de Conflex-G con y sin la instalación OMNIRPC del módulo inicializable automático para ALAX16.159 Tabla 3: Características de las moléculas y la transmisión de datos para optimizar las estructuras moleculares de prueba en cada código molecular. Molecular # de # de la estructura de prueba total de prueba Transferencia de datos al código de transferencia de datos ATOMS ATOMS / BOCO Inicializar un trabajador / estructura de prueba Alax04 181 360 45 2033KB 17.00kb Alax16 191 480 160 2063KB 18.14KB 1L2Y 315 331 331 2099KB 29.58KB 1BL1 519 519 519 519 5192150kb 48.67KB Tabla 4: Tiempo de búsqueda transcurrido para la conformación molecular de Alax04. Total Total Optimization Cluster # de estructuras Tiempo de optimización Velocidad transcurrida ( # de trabajadores) Tiempo (s) / estructura (s) Tiempo (s) Tiempo (s) Up Dennis (secuencial) 1 320.0 1786.21 4.96 1786.21 1.00 Toyo (16) 16 20.0 1497.084.16 196.32 9.10 Dennis (28) 28 11.4 1905.51 5.29 97.00 18.41 Alice (36) 36 8.9 2055.25 5.71 87.09 20.51 UME (56) 56 5.7 2196.77 6.10 120.69 14.80 Dennis (28) + Toyo (16) 44 7.3 1630.09 4.53.36) + Toyo (16) 52 6.2 1774.53 4.93 178.24 10.02 Dennis (28) + Alice (36) 64 5.0 1999.02 5.55 81.52 21.91 Dennis (28) + Ume (56) 84 3.8 2085.84 5.79 92.22 19.37 Alice (36) + Ume (36) (36) (36) (36) (36) (36) (36) (36) (36) (56).56) 92 3.5 2120.87 5.89 101.25 17.64 Tabla 5: Tiempo de búsqueda transcurrido para la conformación molecular de Alax16 Total de optimización de optimización # de estructuras Tiempo de optimización Velocidad ( # de trabajadores) Tiempo de trabajadores / trabajadores (S) / estructura (S) (S) (S) Tiempo (S) Up Dennis (1) 1 480.0 74027.80 154.22 74027.80 1.00 Toyo (16) 16 30.0 70414.21 146.70 4699.15 15.75 Dennis (28) 28 17.1 74027.80 154.22 3375.60 21.93 Alice (36) 36.3. .41 22.71 Ume (56) 56 8.6 123399.38257.08 2913.63 25.41 Dennis (28) + Toyo (16) 44 10.9 76747.74 159.89 2762.10 26.80 Alice (36) + Toyo (16) 52 9.2 82700.44 172.29 2246.73 32.95 Dennis (28) + Alice (36) 64 7.5 87571.30 182.44 2051.50 36.08 Toyo (16) + Ume (56) 72 6.7 109671.32 228.48 2617.85 28.28 Dennis (28) + Ume (56) 84 5.7 102817.90 214.20 2478.93 29.86 Dennis(28)+Ume(56)+Toyo(16) 100 4.8 98238.07 204.66 2478.93 29.86 Table 6: Tiempo transcurrido de la búsqueda de la estructura de prueba de 1L2Y. Clúster Total # de estructuras Tiempo de optimización transcurrido de velocidad transcurrida ( # de trabajadores) trabajadores / trabajadores / estructura (s) Tiempo (s) Tiempo (H) Up Toyo MPI (1) 1 331.0 867 286,967 79.71 1.00 Toyo MPI (16) 16 20.7.7.7.7.7867 18,696 5.19 15.34 Dennis (28) 28 11.8 803 14,101 3.91 20.35 Dennis (28) + Ume (56) 84 3.9 1,064 8,316 2.31 34.50 Tabla 7: Tiempo elapsado de la búsqueda de la estructura de prueba de 1bl1. Clúster Total # de estructuras Tiempo de optimización transcurrido de velocidad transcurrida ( # de trabajadores) trabajadores / trabajadores / estructura (s) Tiempo (s) Tiempo (H) Up Toyo MPI (1) 1 519.0 3,646 1892,210 525.61 1.00 Toyo MPI (16)16 32.4 3,646 120,028 33.34 15.76 Dennis (28) 28 18.5 3,154 61,803 17.16 30.61 Dennis (28) + UME (56) 84 6.1 4,497 33,502 9.30 56.48 160 Número de estructuras de ensayo generadas en cada iteración, indicando el grado de paralelismo. La Figura 3 también resume la cantidad de transmisión de datos requerida para la inicialización de un programa de trabajadores y para la optimización de cada estructura de prueba. Tenga en cuenta que la cantidad de transmisión de datos, que se requiere para inicializar un programa de trabajadores y optimizar una estructura de prueba en la versión MPI de Conflex, es igual a la de Conflex-G.Utilizamos una versión de mejora del campo de fuerza MM2 para asignar una función de energía potencial a varias propiedades geométricas de un grupo de átomos.4.2.1 Rendimiento En un clúster local primero comparamos el rendimiento de Conflex-G, la versión MPI de Conflex y la versión secuencial original de Conflex-G usando un clúster local. Investigamos el desempeño variando el número de trabajadores que usan el clúster de Dennis. Elegimos ALAX04 como una molécula de prueba para este experimento. La Figura 7 compara los resultados para el MPI Conflex y Conflex-G en un clúster de PC local. El resultado de este experimento muestra que Conflex-G puede reducir el tiempo de ejecución a medida que aumenta el número de trabajadores, como en la versión MPI de Conflex. Encontramos que Conflex-G logró eficiencias comparables a la versión MPI. Con 28 trabajadores, Conflex-G logró una aceleración de 18.00 veces en comparación con la versión secuencial de Conflex. El rendimiento de Conflex-G sin la instalación de AIM de OMNIRPC es peor que el de Conflexg utilizando la instalación, en función del aumento en el número de trabajadores. Esto indica que el objetivo OMNIRPC permite al trabajador calcular de manera eficiente sin otros cálculos, dicha inicialización o invocación de programas de trabajadores. A medida que aumenta el número de trabajadores, el rendimiento de Conflex-G es ligeramente más bajo que el de la versión MPI. Esta degradación del rendimiento es causada por diferencias en los procesos de inicialización de trabajadores de Conflex-G y MPI conflex. En el caso de MPI conflex, todos los trabajadores se inicializan antes de la fase de optimización. En el caso de OminRPC, el trabajador se invoca a pedido cuando realmente se emite la llamada RPC. Por lo tanto, la inicialización incurre en esta sobrecarga. Dado que el objetivo de Conflex-G es explorar las conformaciones de grandes bio-moléculas, el número de estructuras de prueba y el tiempo para optimizar la estructura de prueba podrían ser grandes. En tales casos, la sobrecarga para invocar e inicializar el programa de trabajadores puede ser pequeño en comparación con todo el tiempo transcurrido.4.2.2 Rendimiento para los péptidos en el lecho de prueba de la cuadrícula primero, las moléculas de muestra (Alax04 y Alax16) se usaron para examinar el rendimiento del conflex-G en un entorno de la cuadrícula. La Figura 8 muestra la aceleración lograda mediante el uso de múltiples grupos en comparación con el uso de un trabajador en el clúster Dennis. Los resultados detallados se muestran en la Tabla 4 y la Tabla 5. En ambos casos, el mejor rendimiento se obtuvo utilizando 64 trabajadores de la combinación de los grupos de Dennis y Alice. Conflex-G logró una aceleración máxima de 36.08 veces para Alax04 y una aceleración máxima de 21.91 veces para Alax16. En el caso de ALAX04, el rendimiento se mejora solo cuando el rendimiento de la red entre los grupos es alto. Sin embargo, incluso si se usan dos o más grupos en un entorno de red de área amplia, la mejora del rendimiento fue leve porque el tiempo de optimización de una estructura de prueba generada por Alax04, una molécula pequeña, es corto. Además, la sobrecarga requerida para la invocación de un programa de trabajadores y la transmisión de datos de red consume una gran parte del tiempo de procesamiento restante. En particular, la transmisión de datos requerida para la inicialización de un programa de trabajadores es de 2 MB. En el caso de Toyo Cluster, donde el rendimiento de la red entre el programa del cliente y los programas de trabajadores es deficiente, el momento de la transmisión de datos al programa de trabajadores requirió aproximadamente 6.7 segundos. Dado que este tiempo de transmisión fue más largo que el tiempo de procesamiento de una optimización de la estructura en Conflex-G, la mayor parte del tiempo se dedicó a esta transmisión de datos. Por lo tanto, incluso si Conflex-G usa una gran cantidad de nodos de cálculo en un entorno de red de área amplia, no se obtiene el beneficio de usar un recurso de cuadrícula. En el caso de ALAX16, Conflex-G logró una aceleración utilizando dos o más grupos de PC en nuestro lecho de prueba de cuadrícula. Esto se debió a que el tiempo de cálculo en el programa de trabajadores fue largo y la sobrecarga, como la latencia de la red y la invocación de programas de trabajadores, se volvió relativamente pequeño y podía ocultarse. El mejor rendimiento se obtuvo utilizando 64 trabajadores en los grupos de Dennis y Alice. En el caso de AAX16, el rendimiento alcanzado fue una aceleración de 36.08 veces. La Figura 9 revela el efecto del uso de la facilidad de la OMNIRPC apunte al rendimiento de Conflex-G. En la mayoría de los casos, Conflex-G con la instalación de AIM de OMNIRPC archivó un mejor rendimiento que Conflex-G sin la instalación. En particular, la instalación de AIM de OMNIRPC fue ventajosa cuando se usa dos grupos conectados por una red de bajo rendimiento. Los resultados indican que la instalación de AIM de OMNIRPC puede mejorar el rendimiento en el entorno de la red.4.2.3 PerformanceForsMallProteinTheGridTestbed Finalmente, exploramos la conformación molecular usando conflex-G para moléculas grandes. En un entorno de cuadrícula, este experimento se realizó utilizando los grupos de Dennis y Ume. En este experimento, utilizamos dos proteínas, 1L2Y y 1BL1. La Tabla 6 y la Tabla 7 muestran el rendimiento de Conflex-G en el entorno de la cuadrícula y el del MPI Conflex en el clúster Toyo, respectivamente. Las velocidades en estas tablas se calcularon respectivamente en función del rendimiento de un trabajador y 16 trabajadores del clúster Toyo utilizando MPI Conflex. Conflex-G con 84 trabajadores en los grupos de Dennis y Ume obtuvo aceleraciones máximas de 56.5 veces para 1L2Y y 34.5 veces para 1L2Y. Dado que el tiempo de cálculo para la optimización de la estructura requirió una gran cantidad de tiempo, la relación de gastos generales, incluidas tareas como la invocación de un programa de trabajadores y la transmisión de datos para la inicialización, se hizo muy pequeña, de modo que se mejoró el rendimiento de Conflex-G. Encontramos que el desequilibrio de carga en el tiempo de procesamiento de la optimización para cada estructura de prueba causó la degradación del rendimiento. Cuando obtuvimos el mejor rendimiento para 1L2Y usando los grupos Dennis y Ume, el tiempo para cada optimización de la estructura varió de 190 a 27,887 segundos, y la relación entre los tiempos más largos y más cortos fue de 13.4. Para 1BL1, la relación de tiempo mínimo durante el tiempo máximo fue de 190. Además, para que el programa de trabajadores espere hasta la finalización de la optimización de todas las estructuras de prueba, se descubrió que todos los programas de trabajadores esperaban en un estado inactivo durante aproximadamente 6 horas. Esto ha causado la degradación del rendimiento de Conflex-G.161 4.3 Discusión En esta subsección, discutimos la mejora del rendimiento reflejado en nuestros experimentos. Explotando el paralelismo: para explotar más recursos computacionales, es necesario aumentar el grado de paralelismo. En este experimento, el grado de paralelismo no fue tan grande en el caso de las moléculas de muestra. Al usar un conjunto de más de 500 nodos de computación para 1BL1, el número de estructuras de prueba asignadas a cada trabajador será solo uno o dos. Si se asignan más de 100 estructuras de prueba a cada programa de trabajadores, el cálculo se puede realizar de manera más eficiente debido a la reducción de la sobrecarga para la invocación e inicialización de los trabajadores a través de la instalación del objetivo OMNIRPC. Una idea para aumentar el paralelismo es superponerse a la ejecución de dos o más conjuntos de estructuras de prueba. En el algoritmo actual, se genera un conjunto de estructuras de prueba a partir de una estructura inicial y se calcula hasta que se calculan las optimizaciones para todas las estructuras en este conjunto. Además, esto ayudará a mejorar el desequilibrio de carga. Al tener otros conjuntos de estructuras de prueba se superponen, incluso si algunas optimizaciones requieren mucho tiempo, la optimización de las estructuras en otros conjuntos se puede ejecutar para compensar a los trabajadores inactivos por otras optimizaciones. Sin embargo, no está claro cómo tal modificación del algoritmo podría afectar la calidad de los resultados finales en términos de una búsqueda de conformación. Mejora en el desequilibrio de carga Al optimizar cada estructura de prueba: la Tabla 8 enumera las estadísticas para los tiempos de optimización de las estructuras de prueba generadas para cada molécula de muestra medida utilizando 28 trabajadores en el grupo de Dennis. Cuando se utilizan dos o más conjuntos de grupos de PC, la aceleración en el rendimiento se ve obstaculizada por el desequilibrio de carga de la optimización de las estructuras de prueba. El momento más largo para optimizar una estructura de prueba fue casi 24 veces más largo que el tiempo más corto. Además, otros trabajadores deben esperar hasta que el trabajo más largo haya terminado, para que no se pueda reducir todo el tiempo de ejecución. Cuando Conflex-G registró los conformadores de 1BL1 por el clúster de Dennis, el tiempo de cálculo más largo de la optimización de la estructura del ensayo representó aproximadamente el 80% del tiempo transcurrido. Por lo tanto, hay dos posibles soluciones para el desequilibrio de carga.• Es necesario refinar el algoritmo utilizado para generar la estructura de prueba, que suprime la variación de tiempo para optimizar una estructura de prueba en Conflex. Esto permite a Conflex-G lograr un alto rendimiento mediante el uso de muchos recursos informáticos.• Una de las soluciones es superponer las ejecuciones para dos o más conjuntos de estructuras de prueba. En los algoritmos actuales, se genera un conjunto de estructuras de prueba a partir de una estructura inicial y el cálculo continúa hasta que se calculen todas las estructuras en este conjunto. Al tener otros conjuntos de estructuras de prueba, incluso si una búsqueda de estructura lleva mucho tiempo, se puede ejecutar un trabajo para compensar el desequilibrio de carga por otros trabajos. Sin embargo, cómo tal modificación de los algoritmos podría afectar la eficiencia no está clara.• En este experimento, utilizamos un planificador de RoundRobbin construido simple de OmnIrpc, que es necesario para aplicar el programador que asigna estructuras con largos tiempos de optimización a una Tabla 8 de alto rendimiento: Estadísticas del tiempo transcurrido de la optimización de la estructura de prueba utilizando28 trabajadores en el clúster de Dennis. Código (s) de varianza promedio de Min Máx de Molecular ALAX04 2.0 11.3 5.3 3 Alax16 47.6 920.0 154.2 5404 1L2Y 114.2 13331.4 803.2 636782 1bl1 121.0 29641.8 3153.5 2734810 Nodos y estructuras con los tiempos de optimización corta a los tiempos de optimización cortos a los tiempos de bajo nivel a bajas. En general, sin embargo, podría ser difícil predecir el tiempo requerido para la optimización de la estructura de prueba. Paralelización del programa de trabajadores para acelerar para optimizar una estructura de prueba: en la implementación actual, no paralelizamos el programa de trabajadores. Para acelerar las estructuras de prueba, la programación híbrida que usa OMNIRPC y OpenMP en una máquina SMP (procesador múltiple simétrico) puede ser uno de los métodos alternativos para mejorar el rendimiento general.5. Trabajo relacionado recientemente, se ha desarrollado un algoritmo que resuelve los problemas de paralelización y comunicación en procesadores mal conectados para ser utilizados para la simulación. El proyecto Folding@Home [13] simula las escalas de tiempo de miles a millones de veces más de lo que se logró anteriormente. Esto nos ha permitido simular el plegamiento por primera vez y examinar directamente las enfermedades relacionadas con el plegamiento. Seti@home [14] es un programa para buscar la vida alienígena analizando las señales de radiotelescopio utilizando datos de radiotelescopio de transformación de Fourier de telescopios de diferentes sitios. SETI@Home Attlely Problemas inmensamente paralelos, en los que el cálculo se puede dividir fácilmente entre varias computadoras. Los fragmentos de datos de radiotelescopios se pueden asignar fácilmente a diferentes computadoras. La mayoría de estos esfuerzos desarrollan explícitamente una aplicación de acoplamiento como una aplicación paralela que utiliza un lenguaje de programación paralelo de propósito especial y un middleware, como MPI, que requiere habilidades de desarrollo y esfuerzo. Sin embargo, las habilidades y el esfuerzo necesarios para desarrollar una aplicación de la red pueden no ser necesarias para OMNIRPC. Nimrod/G [15] es una herramienta para el modelado paramétrico distribuido e implementa una granja de tareas paralela para simulaciones que requieren varios parámetros de entrada variables. Nimrod incorpora un componente de programación distribuido que puede administrar la programación de experimentos individuales a las computadoras inactivas en una red de área local. Nimrod se ha aplicado a aplicaciones que incluyen bio-información, investigación de operaciones y modelado molecular para el diseño de fármacos. NetSolve [8] es una instalación RPC similar a OMNIRPC y NINF, proporcionando una interfaz de programación similar y un mecanismo de equilibrio de carga automática. NINF-G [7] es una implementación habilitada por la cuadrícula de NINF y proporciona un sistema GridRPC [10] que utiliza LDAP para administrar la base de datos de ejecutables remotos, pero no admite clústeres que involucran a las direcciones o direcciones IP privadas dentro de un firewall. Matsuoka et al.[16] también ha discutido varios temas de diseño relacionados con los sistemas RPC de la red.162 6. Conclusiones y trabajos futuros hemos diseñado e implementado Conflex-G utilizando OMNIRPC. Informamos su desempeño en una prueba de prueba de cuadrícula de varios grupos de PC distribuidos geográficamente. Para explorar la conformación de grandes bio-moléculas, se usó conflexg para generar estructuras de prueba de las moléculas y asignar trabajos para optimizarlas mediante mecánica molecular en la red. OMNIRPC proporciona un modelo de persistencia restringido para que el módulo se inicialice automáticamente en la invocación llamando al procedimiento de inicialización. Esto puede eliminar la comunicación innecesaria y la inicialización en cada llamada en Conflex-G.Conflex-G puede lograr un rendimiento comparable al MPI de Conflex y explota más recursos informáticos al permitir el uso de múltiples grupos de PC en la cuadrícula. El resultado experimental muestra que Afflex-G logró una aceleración de 56.5 veces para la molécula 1BL1, donde la molécula consiste en una gran cantidad de átomos y cada optimización de la estructura de prueba requiere una gran cantidad de tiempo. El desequilibrio de carga de las optimizaciones de la estructura de prueba puede causar la degradación del rendimiento. Necesitamos refinar el algoritmo utilizado para generar la estructura de prueba para mejorar la optimización del balance de carga para las estructuras de prueba en Conflex. Los estudios futuros incluirán el desarrollo de herramientas de implementación y un examen de tolerancia a fallas. En el OMNIRPC actual, el registro de un programa de ejecución a hosts remotos e implementaciones de programas de trabajadores se establece manualmente. Se requerirán herramientas de implementación a medida que aumente el número de hosts remotos. En entornos de cuadrícula en los que el entorno cambia dinámicamente, también es necesario respaldar la tolerancia a las fallas. Esta característica es especialmente importante en aplicaciones a gran escala que requieren un cálculo largo en un entorno de cuadrícula. Planeamos refinar el algoritmo de optimización conformacional en Conflex para explorar la búsqueda del espacio de conformación de bio-moléculas más grandes como la proteasa del VIH utilizando hasta 1000 trabajadores en un entorno de la red.7. Agradecimientos Esta investigación fue apoyada en parte por una subvención del Ministerio de Educación, Cultura, Deportes, Ciencia y Tecnología en Japón, No. 14019011, 2002, y como parte del Programa de Investigación y Desarrollo para la Aplicación de la Computación Avanzada.Ciencia y tecnología de la Corporación de Ciencia y Tecnología de Japón (investigación sobre la plataforma informática de la red para el diseño de medicamentos). Nos gustaría agradecer al Centro de Investigación de Tecnología Grid, AIST, Japón por proporcionar recursos informáticos para nuestro experimento.8. Referencias [1] H. Goto y E. Osawa. Un algoritmo eficiente para buscar conformadores de baja energía de moléculas cíclicas y acíclicas. J. Chem. Soc., Perkin Trans, 2: 187-198, 1993. [2] M. Sato, T. Boku y D. Takahashi. OMNIRPC: un sistema RPC de cuadrícula para programación paralela en el entorno de clúster y cuadrícula. En Proc.de CCGRID2003, páginas 219-229, 2003. [3] M. Sato, M. Hirano, Y. Tanaka y S. Sekiguchi. OMNIRPC: una instalación RPC de cuadrícula para clúster y computación global en OpenMP. En Proc.de taller sobre aplicaciones y herramientas de OpenMP 2001 (LNCS 2104), páginas 130-135, 2001. [4] Proyecto OMNIRPC.http://www.omni.hpcc.jp/omnirpc/.[5] M. Sato, H. Nakada, S. Sekiguchi, S. Matsuoka, U. Nagashima y H. Takagi. NINF: una biblioteca de información basada en red para infraestructura informática mundial mundial. En HPCN Europe, páginas 491-502, 1997. [6] Proyecto NINF.http://ninf.apgrid.org/.[7] Y. Tanaka, H. Nakada, S. Sekiguchi, T. Suzumura y S. Matsuoka. NINF-G: una implementación de referencia del middleware de programación basado en RPC para la computación de la red. Journal of Grid Computing, 1 (1): 41-51, 2003. [8] D. Arnold, S. Agrawal, S. Blackford, J. Dongarra, M. Miller, K. Seymour, K. Sagi, Z. Shiy S. Vadhiyar. Guía de usuarios para NetSolve V1.4.1. Departamento de computación innovador. Informe técnico ICL-UT-02-05, Universidad de Tennessee, Knoxville, TN, junio de 2002. [9] Object Management Group.http://www.omg.org/.[10] K. Seymour, H. Nakada, S. Matsuoka, J. Dongarra, C. Lee y H. Casanova. GridRPC: una API de llamada de procedimiento remoto para la computación de la cuadrícula.[11] H.Goto, T. Takahashi, Y. Takata, K. Ohta y U Nagashima. Conflex: comportamientos conformacionales de los polipéptidos según lo predicho por una búsqueda espacial conformacional. En Nanotech2003, Volumen 1, páginas 32-35, 2003. [12] I. Foster y C. Kesselman. Globus: un kit de herramientas de infraestructura metacomputación. The International Journal of SuperComputer Aplications y High Performance E Computing, 11 (2): 115-128, verano de 1997. [13] Stefan M. Larson, Christopher D. Snow, Michael Shirts y Vijay S. Pande. Plegar@home y genome@home: Uso de la computación distribuida para abordar problemas previamente intratables en biología computacional. Genómica computacional, 2002. [14] Proyecto Home Seti@.http://setiathome.ssl.berkeley.edu/.[15] R. Buyya, K. Branson, J. Giddy y D. Abramson. El laboratorio virtual: un conjunto de herramientas para permitir el modelado molecular distribuido para el diseño de fármacos en la red mundial. Concurrencia y cálculo: práctica y experiencia, 15 (1): 1-25, enero de 2003. [16] S. Matsuoka, H. Nakada, M. Sato y S. Sekiguchi. Problemas de diseño de sistemas de servidor habilitados para la red para la cuadrícula. En Proc.de Grid 2000 (LNCS 1971), páginas 4-17, 2000. 163