Self-interested Automated Mechanism Design and Implications for Optimal Combinatorial Auctions∗ Vincent Conitzer Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA conitzer@cs.cmu.edu Tuomas Sandholm Carnegie Mellon University 5000 Forbes Avenue Pittsburgh, PA 15213, USA sandholm@cs.cmu.edu Resumen A menudo, se debe elegir un resultado sobre la base de las preferencias reportadas por un grupo de agentes. La dificultad clave es que los agentes pueden informar sus preferencias de forma no sincera para hacer que el resultado elegido sea más favorable para ellos mismos. El diseño del mecanismo es el arte de diseñar las reglas del juego para que los agentes estén motivados para informar sus preferencias sinceramente, y se elige un resultado deseable. En un mecanismo automatizado recientemente propuesto, un mecanismo automatizado, un mecanismo se calcula para la configuración de agregación de preferencias en cuestión. Esto tiene varias ventajas, pero la desventaja es que el problema de optimización del diseño del mecanismo debe resolverse de nuevo cada vez. A diferencia del trabajo anterior sobre el diseño de mecanismo automatizado que estudió un diseñador benevolente, en este documento estudiamos problemas de diseño de mecanismo automatizado donde el diseñador se interestó en sí mismo. En este caso, el centro solo se preocupa por qué resultado se elige y qué pagos se hacen. La razón por la que las preferencias de los agentes son relevantes es que el centro está limitado a hacer que cada agente al menos fuera tan bien como el agente habría sido si no hubiera participado en el mecanismo. En este entorno, mostramos que el diseño de mecanismos deterministas óptimos es complete NP en dos casos especiales importantes: cuando el centro solo está interesado en los pagos realizados, y cuando los pagos no son posibles y el centro solo está interesado en el resultado elegido. Luego mostramos cómo permitir la aleatorización en el mecanismo facilita los problemas en esta configuración computacionalmente fácil. Finalmente, mostramos que el problema de la AMD que maximiza el pago está estrechamente relacionado con una variante interesante del problema de diseño de subasta combinatorial óptimo (RevenueMaximizing), donde los licitantes tienen preferencias de las mejores. Mostramos que aquí también, diseñar una subasta determinista óptima es NPComplete, pero diseñar una subasta aleatoria óptima es fácil. Categorías y descriptores de sujetos F.2 [Teoría de la computación]: Análisis de algoritmos y complejidad del problema;J.4 [Aplicaciones informáticas]: Ciencias sociales y conductuales-economía Algoritmos de términos generales, Economía, Teoría 1. Introducción en entornos múltiples, a menudo se debe elegir un resultado sobre la base de las preferencias reportadas por un grupo de agentes. Dichos resultados podrían ser presidentes potenciales, planes conjuntos, asignaciones de bienes o recursos, etc. El agregador de preferencias generalmente no conoce las preferencias de los agentes a priori. Más bien, los agentes informan sus preferencias al coordinador. Desafortunadamente, un agente puede tener un incentivo para informar mal sus preferencias para engañar al mecanismo para seleccionar un resultado que sea más deseable para el agente que el resultado que se seleccionaría si el agente revelara sus preferencias sinceramente. Dicha manipulación es indeseable porque los mecanismos de agregación de preferencias se adaptan a las preferencias agregadas de una manera socialmente deseable, y si los agentes revelan sus preferencias de forma insinceros, se puede elegir un resultado socialmente indeseable. La manipulabilidad es un problema generalizado en los mecanismos de agregación de preferencias. Un resultado negativo seminal, el teorema de Gibbard-Satterthwaite, muestra que bajo cualquier esquema de agregación de preferencias no dictador, si hay al menos 3 resultados posibles, existen preferencias bajo las cuales un agente es mejor informar con falsedad [10, 23].(Un esquema de agregación de preferencias se llama dictatorial si uno de los agentes dicta el resultado sin importar las preferencias que informan los otros agentes). Lo que al agregador le gustaría hacer es diseñar un mecanismo de agregación de preferencias para que 1) los agentes interesados estén motivados para informar sus preferencias con sinceridad, y 2) el mecanismo elige un resultado que sea deseable desde la perspectiva de algún objetivo. Esta es la configuración clásica del diseño del mecanismo en la teoría de juegos. En este documento, estudiamos el caso en el que el diseñador se interesa por sí mismo, es decir, al diseñador no le importa directamente cómo viene el OUT132 se relaciona con las preferencias de los agentes, pero está bastante preocupado por su propia agenda para la cual se debe elegir el resultado, y con maximizar los pagos a sí mismo. Esta es la configuración de diseño del mecanismo más relevante para el comercio electrónico. En el caso de que el diseñador de mecanismo esté interesado en maximizar alguna noción de bienestar social, la importancia de recopilar las preferencias de los agentes es clara. Quizás sea menos obvio por qué deberían recolectarse cuando el diseñador se interesa y, por lo tanto, su objetivo no está directamente relacionado con las preferencias de los agentes. La razón de esto es que a menudo las preferencias de los agentes imponen límites sobre cómo el diseñador elige el resultado y los pagos. La restricción más común es la de la racionalidad individual (IR), lo que significa que el mecanismo no puede empeorar a ningún agente de lo que el agente habría sido si no hubiera participado en el mecanismo. Por ejemplo, en el contexto del diseño de subasta óptimo, el diseñador (subastador) solo se preocupa por la cantidad de ingresos, y no per se con qué tan bien se corresponde la asignación del bien (o los bienes) con las preferencias de los agentes. Sin embargo, el diseñador no puede obligar a un agente a pagar más que su valoración por el paquete de bienes asignados a él. Por lo tanto, incluso un diseñador interesado elegirá un resultado que haga que los agentes sean razonablemente bien. Por otro lado, el diseñador no necesariamente elegirá un resultado de maximización de bienestar social. Por ejemplo, si el diseñador siempre elige un resultado que maximice el bienestar social con respecto a las preferencias reportadas, y obliga a cada agente a pagar la diferencia entre la utilidad que tiene ahora y la utilidad que hubiera tenido si no hubiera participado en el mecanismo, es fácil ver que los agentes pueden tener un incentivo para informar mal sus preferencias, y esto en realidad puede generar menos ingresos. De hecho, uno de los resultados contradictorios de la teoría del diseño de subasta óptima es que a veces el bien se asigna a nadie incluso cuando el subastador tiene un precio de reserva de 0. El diseño del mecanismo clásico proporciona algunos mecanismos generales que, bajo ciertos supuestos, satisfacen alguna noción de no manipulabilidad y maximizan algún objetivo. La ventaja de estos mecanismos es que no dependen de la información (incluso probabilística) sobre las preferencias de los agentes (por ejemplo, el mecanismo de Vickrey-Clarke-Groves (VCG) [24, 4, 11]), o pueden aplicarse fácilmente aCualquier distribución de probabilidad sobre las preferencias (por ejemplo, el mecanismo DAGVA [8, 2], la subasta Myerson [18] y la subasta de múltiples unidades Maskin-Riley [17]). Sin embargo, los mecanismos generales también tienen inconvenientes significativos: • Los mecanismos generales más famosos y ampliamente aplicables, VCG y DAGVA, solo maximizan el bienestar social. Si el diseñador se interesa por sí mismo, como es el caso en muchas configuraciones de comercio electrónico, estos mecanismos no maximizan el objetivo de los diseñadores.• Los mecanismos generales que se centran en un diseñador autointerestado solo son aplicables en configuraciones muy restringidas, ya que Myersson esperaba una subasta de maximización de ingresos para vender un solo artículo, y Maskin y Rileys esperaban la subasta de maximización de ingresos para vender múltiples unidades idénticas de un artículo.• Incluso en la configuración restringida en la que se aplican estos mecanismos, los mecanismos solo permiten la maximización del pago. En la práctica, el diseñador también puede estar interesado en el resultado per se. Por ejemplo, un subastador puede importarle qué postor recibe el artículo.• A menudo se supone que los pagos secundarios se pueden usar para adaptar los incentivos de los agentes, pero esto no siempre es práctico. Por ejemplo, en los mercados electrónicos basados en el trueque, como los pagos de Compro, FirstBarter.com, Barterone y Intagio-Side no están permitidos. Además, entre los agentes de software, podría ser más deseable construir mecanismos que no dependan de la capacidad de realizar pagos, porque muchos agentes de software no tienen la infraestructura para realizar pagos. En contraste, seguimos un enfoque reciente donde el mecanismo está diseñado automáticamente para el problema específico en cuestión. Este enfoque aborda todas las desventajas enumeradas anteriormente. Formulamos el problema de diseño del mecanismo como un problema de optimización. La entrada se caracteriza por el número de agentes, los tipos posibles de los agentes (preferencias) y las distribuciones previas de los agregadores sobre los tipos de agentes. La salida es un mecanismo no manipulable que es óptimo con respecto a algún objetivo. Este enfoque se llama diseño de mecanismo automatizado. El enfoque de diseño de mecanismo automatizado tiene cuatro ventajas sobre el enfoque clásico del diseño de mecanismos generales. Primero, se puede usar incluso en entornos que no satisfacen los supuestos de los mecanismos clásicos (como la disponibilidad de pagos secundarios o que el objetivo es el bienestar social). En segundo lugar, puede permitir que uno elude los resultados de imposibilidad (como el teorema de Gibbard-Satterthwaite) que afirman que no hay un mecanismo deseable en todas las preferencias. Cuando el mecanismo está diseñado para la configuración en cuestión, no importa que no funcione de manera más general. En tercer lugar, puede producir mejores mecanismos (en términos de garantías de no manipulabilidad más fuertes y/o mejores resultados) que los mecanismos clásicos porque el mecanismo capitaliza los detalles del entorno (la información probabilística que el diseñador tiene sobre los tipos de agentes). Dada la gran cantidad de información que las partes tienen entre sí hoy en día, es probable que este enfoque conduzca a un gran ahorro sobre los mecanismos clásicos, que en gran medida ignoran esa información. Por ejemplo, imagine que una empresa crea automáticamente su mecanismo de adquisición basado en el conocimiento estadístico sobre sus proveedores, en lugar de usar una subasta clásica de adquisición descendente. Cuarto, la carga del diseño se transfiere de los humanos a una máquina. Sin embargo, el diseño del mecanismo automatizado requiere que el problema de optimización del diseño del mecanismo se resuelva de nuevo para cada configuración. Por lo tanto, su complejidad computacional se convierte en un tema clave. Investigaciones anteriores han estudiado esta pregunta para los diseñadores benevolentes, que desean maximizar, por ejemplo, bienestar social [5, 6]. En este artículo estudiamos la complejidad computacional del diseño de mecanismo automatizado en el caso de un diseñador interesado. Esta es una configuración importante para el diseño de mecanismo automatizado debido a la escasez de mecanismos generales en esta área, y el hecho de que en la mayoría de los entornos de comercio electrónico el diseñador se interesa. También mostramos que este problema está estrechamente relacionado con un problema de diseño de subasta combinatorial óptimo de subasta combinatoria óptimo (maximización de ingresos).133 El resto de este documento está organizado de la siguiente manera. En la Sección 2, justificamos el enfoque en mecanismos no manipulables. En la Sección 3, definimos el problema que estudiamos. En la Sección 4, mostramos que el diseño de un mecanismo determinista óptimo es NP complete incluso cuando el diseñador solo se preocupa por los pagos realizados. En la Sección 5, mostramos que el diseño de un mecanismo determinista óptimo también es NP complete cuando los pagos no son posibles y el diseñador solo está interesado en el resultado elegido. En la Sección 6, mostramos que un mecanismo aleatorizado óptimo puede diseñarse en el tiempo polinomial incluso en el caso general. Finalmente, en la Sección 7, mostramos que para diseñar subastas combinatorias óptimas bajo las preferencias de las mejores solo, nuestros resultados en AMD implican que este problema es NP completo para las subastas deterministas, pero fáciles para las subastas aleatorias.2. Justificando el enfoque en los mecanismos no manipulables antes de definir el problema computacional del diseño del mecanismo automatizado, debemos justificar nuestro enfoque en los mecanismos no manipulables. Después de todo, no es inmediatamente obvio que no hay mecanismos manipulables que, incluso cuando los agentes informan sus tipos estratégicamente y, por lo tanto, a veces falsamente, aún alcanzan mejores resultados (según cualquier objetivo que usemos) que cualquier mecanismo no manipulable. Sin embargo, este es el caso: dado cualquier mecanismo, podemos construir un mecanismo no manipulable cuyo rendimiento es idéntico, como sigue. Construimos una capa de interfaz entre los agentes y el mecanismo original. Los agentes informan sus preferencias (o tipos) a la capa de interfaz;Posteriormente, la capa de interfaz ingresa al mecanismo original de los tipos que los agentes habrían informado estratégicamente al mecanismo original, si sus tipos se declararon a la capa de interfaz. El resultado resultante es el resultado del nuevo mecanismo. Dado que la capa de interfaz actúa estratégicamente en nombre de cada agente, nunca hay un incentivo para informar falsamente a la capa de interfaz;Y, por lo tanto, los tipos informados por la capa de interfaz son los tipos estratégicos que se habrían informado sin la capa de interfaz, por lo que los resultados son exactamente como habrían sido con el mecanismo original. Este argumento es conocido en la literatura de diseño del mecanismo como el principio de revelación [16].(Existen dificultades computacionales para aplicar el principio de revelación en grandes resultados combinatorios y espacios de tipo [7, 22]. Sin embargo, debido a que aquí nos centramos en los espacios de resultados y tipos representados rotos, esto no es una preocupación aquí). Dado esto, podemos centrarnos en mecanismos veraces en el resto del documento.3. Definiciones Ahora formalizamos la configuración de diseño de mecanismo automatizado. Definición 1. En una configuración de diseño de mecanismo automatizado, se nos da: • Un conjunto finito de resultados o;• un conjunto finito de N agentes;• Para cada agente I, 1. Un conjunto finito de tipos θi, 2. Una distribución de probabilidad γi sobre θi (en el caso de tipos correlacionados, hay una distribución conjunta única γ sobre θ1 × ... × θn) y 3. Una función de utilidad UI: θi × O → R;1 • Una función objetivo cuya expectativa el diseñador desea maximizar. Existen muchas funciones objetivas posibles que el diseñador podría tener, por ejemplo, el bienestar social (donde el diseñador busca maximizar la suma de los servicios públicos de los agentes), o la utilidad mínima de cualquier agente (donde el diseñador busca maximizar la peor utilidad porcualquier agente). En ambos casos, el diseñador es benevolente, porque el diseñador, en cierto sentido, persigue la felicidad colectiva de los agentes. Sin embargo, en este documento, nos centramos en el caso de un diseñador interesado. Un diseñador interesado solo se preocupa por el resultado elegido (es decir, al diseñador no le importa cómo se relaciona el resultado con las preferencias de los agentes, sino que tiene una preferencia fija sobre los resultados), y sobre los pagos netos realizados por los agentes,que fluyen al diseñador. Definición 2. Un diseñador interesado tiene una función objetivo dada por G (O) + N i = 1 πi, donde G: O → R indica la propia preferencia de los diseñadores sobre los resultados, y πi es el pago realizado por el agente i. En el caso de que G = 0 en todas partes, se dice que el diseñador está maximizando el pago. En el caso de que los pagos no son posibles, G constituye la función objetivo por sí misma. Ahora definimos los tipos de mecanismos en estudio. Según el principio de revelación, podemos restringir la atención a los mecanismos de revelación directos y veraz, donde los agentes informan sus tipos directamente y nunca tienen un incentivo para informarlos mal. Definición 3. Consideramos los siguientes tipos de mecanismo: • Un mecanismo determinista sin pagos consiste en una función de selección de resultados O: θ1 × θ2 ×...× θn → O. • Un mecanismo aleatorizado sin pagos consiste en una función de selección de distribución P: θ1 × θ2 ×...× θn → P (O), donde P (O) es el conjunto de distribuciones de probabilidad sobre O. • Un mecanismo determinista con pagos consiste en una función de selección de resultados O: θ1 × θ2 ×... × θn → O y para cada agente I, una función de selección de pago πi: θ1 × θ2 ×...× θn → R, donde πi (θ1, ..., θn) da el pago realizado por el agente I cuando los tipos informados son θ1 ,..., θn.1 Aunque esto sigue a la notación de la teoría del juego estándar [16], el hecho de que el agente tenga una función de utilidad y un tipo quizás sea confuso. Los tipos codifican las diversas preferencias posibles que el agente puede resultar tener, y el tipo de agentes no es conocido por el agregador. La función de utilidad es de conocimiento común, pero debido a que el tipo de agentes es un parámetro en la función de utilidad de los agentes, el agregador no puede saber cuál es la utilidad de los agentes sin conocer el tipo de agentes.134 • Un mecanismo aleatorio con pagos consiste en una función de selección de distribución P: θ1 × θ2 ×...× θn → P (O), y para cada agente I, una función de selección de pago πi: θ1 × θ2 ×...× θn → R.2 Hay dos tipos de restricción en el diseñador en la construcción del mecanismo.3.1 Restricciones de racionalidad individual (IR) El primer tipo de restricción es el siguiente. La utilidad de cada agente debe ser al menos tan grande como la utilidad de los agentes, es decir, la utilidad que el agente recibiría si no participara en el mecanismo. De lo contrario, ese agente no participaría en el mecanismo, y ninguna participación de los agentes puede dañar el objetivo de los diseñadores del mecanismo porque, en el peor de los casos, el mecanismo puede ignorar a un agente fingiendo que el agente no está allí.(Además, si no se aplica dicha restricción, el diseñador podría simplemente hacer que los agentes paguen una cantidad infinita). Este tipo de restricción se llama restricción IR (racionalidad individual). Hay tres restricciones IR posibles diferentes: ex ante, ex interina y ex post, dependiendo de lo que el agente sepa sobre su propio tipo y los otros tipos al decidir si participar en el mecanismo. Ex ante Ir significa que el agente participaría si no supiera nada (ni siquiera su propio tipo). No estudiaremos este concepto en este documento. Ex intermedio IR significa que el agente siempre participaría si solo conociera su propio tipo, pero no los de los demás. EX Post IR significa que el agente siempre participaría incluso si supiera que todos los tipos de Bodys. Definiremos las dos últimas nociones de IR formalmente. Primero, necesitamos formalizar el concepto del resultado alternativo. Suponemos que cada utilidad de alojamiento de cada agente es cero para cada uno de sus tipos. Esto es sin pérdida de generalidad porque podemos agregar un término constante a la función de utilidad de un agente (para un tipo dado), sin afectar el comportamiento de toma de decisiones de ese agente de maximización de utilidad esperada [16]. Definición 4. En cualquier configuración de diseño de mecanismo automatizado con una restricción IR, hay un resultado de retroceso o0 ∈ O donde, para cualquier agente I y cualquier tipo θi ∈ θi, tenemos ui (θi, o0) = 0. (además, en el caso deUn diseñador interesado, G (O0) = 0.) Ahora podemos definir las nociones de racionalidad individual. Definición 5. La racionalidad individual (IR) se define por: • Un mecanismo determinista es ex interino IR para cualquier agente I, y cualquier tipo θi ∈ θi, tenemos E (θ1, .., θi - 1, θi+1, .., ..,, ..,θn) | θi [ui (θi, o (θ1, .., θn)) - πi (θ1, .., θn)] ≥ 0. Un mecanismo aleatorizado es ex interino IR para cualquier agente I, y cualquier tipo θi ∈ θi, tenemos E (θ1, .., θi - 1, θi+1, .., θn) | θi eo | θ1, .. .., θn [ui (θi, o) −πi (θ1, .., θn)] ≥ 0. • Un mecanismo determinista es ex post si para cualquier agente I, y cualquier tipo de vector (θ1, .., θn)∈ θ1 ×...× θn, tenemos ui (θi, o (θ1, ..., θn)) - πi (θ1, ..., θn) ≥ 0. 2 No aleatorizamos los pagos porque mientras los agentes y el diseñadorson un riesgo neutral con respecto a los pagos, es decir, su utilidad es lineal en pagos, no hay razón para aleatorizar los pagos. Un mecanismo aleatorizado es ex post IR para cualquier agente I, y cualquier tipo de vector (θ1, ..., θn) ∈ θ1 ×...× θn, tenemos eo | θ1, .., θn [ui (θi, o) - πi (θ1, .., θn)] ≥ 0. Los términos que involucran pagos pueden dejarse fuera en el caso de que los pagos no sean posibles.3.2 Compatibilidad de incentivos (IC) Restricciones El segundo tipo de restricción dice que los agentes nunca deberían tener un incentivo para informar mal su tipo (como se justifica anteriormente por el principio de revelación). Para este tipo de restricción, las dos variantes más comunes (o conceptos de solución) son la implementación en estrategias dominantes e implementación en el equilibrio de Bayes-Nash. Definición 6. Dada una configuración de diseño de mecanismo automatizado, se dice que un mecanismo implementa su resultado y funciones de pago en estrategias dominantes si Truthtelling siempre es óptimo incluso cuando los tipos informados por los otros agentes ya son conocidos. Formalmente, para cualquier agente I, cualquier tipo de vector (θ1, ..., θi, ..., θn) ∈ θ1 ×...× θi ×...× θn, y cualquier informe de tipo alternativo ˆθi ∈ θi, en el caso de los mecanismos deterministas tenemos ui (θi, o (θ1, ..., θi, ..., θn)) - πi (θ1, ...,.θi, ..., θn) ≥ ui (θi, o (θ1, ..., ˆθi, ..., θn)) - πi (θ1, ..., ˆθi, ..., θn). En el caso de los mecanismos aleatorios tenemos EO | θ1, .., θi, .., θn [ui (θi, o) - πi (θ1, ..., θi, ..., Θn)] ≥ EO | θ1, .., ˆθi, .., θn [ui (θi, o) - πi (θ1, ..., ˆΘi, ..., θn)]. Los términos que involucran pagos pueden dejarse fuera en el caso de que los pagos no sean posibles. Por lo tanto, en la implementación de estrategias dominantes, Truthtelling es óptimo independientemente de lo que informan los otros agentes. Si es óptimo solo dado que los otros agentes son sinceros, y dado que uno no conoce los tipos de otros agentes, tenemos implementación en el equilibrio de Bayes-Nash. Definición 7. Dada una configuración de diseño de mecanismo automatizado, se dice que un mecanismo implementa sus funciones de resultado y pago en el equilibrio de la narración de bayes si la verdadera siempre es óptimo para un agente cuando ese agente aún no sabe nada sobre los otros tipos de agentes, y los otros agentes sondiciendo la verdad. Formalmente, para cualquier agente I, cualquier tipo θi ∈ θi, y cualquier informe de tipo alternativo ˆθi ∈ θi, en el caso de mecanismos deterministas tenemos e (θ1, .., θi - 1, θi+1, .., θn)| θi [ui (θi, o (θ1, ..., θi, ..., θn)) - πi (θ1, ..., θi, ...., θn)] ≥ E (θ1, ..,,,,θi - 1, θi+1, .., θn) | θi [ui (θi, o (θ1, ..., ˆθi, ..., θn)) - πi (θ1, .., ˆθi, .. ..., θn)]. En el caso de los mecanismos aleatorios tenemos E (θ1, .., θi - 1, θi+1, .., θn) | θi eo | θ1, .., θi, .., θn [ui (θi, o)- πi (θ1, ..., θi, ..., θn)] ≥ E (θ1, .., θi - 1, θi+1, .., θn) | θi eo | θ1, .., ˆθi,.., θn [ui (θi, o) - πi (θ1, ..., ˆθi, ..., θn)]. Los términos que involucran pagos pueden dejarse fuera en el caso de que los pagos no sean posibles.135 3.3 Diseño de mecanismo automatizado Ahora podemos definir el problema computacional que estudiamos. Definición 8. (Diseño de mecanismo automatizado (AMD)) Se damos: • Una configuración de diseño de mecanismo automatizado, • una noción IR (ex interina, ex post o ninguno), • un concepto de solución (estrategias dominantes o bayes-loh), • si los pagos son posibles, • Si es posible la aleatorización, • (en la variante de decisión del problema) un valor objetivo G. Se nos pregunta si existe un mecanismo del tipo especificado (en términos de pagos y aleatorización) queSatisface tanto la noción IR como el concepto de solución, y proporciona un valor esperado de al menos G para el objetivo. Un caso especial interesante es el entorno donde solo hay un agente. En este caso, el agente de informes siempre sabe todo lo que hay que saber sobre los tipos de otros agentes porque no hay otros agentes. Dado que ex post y ex interino IR solo difieren en lo que se supone que un agente sabe sobre otros tipos de agentes, los dos conceptos IR coinciden aquí. Además, debido a que la implementación en estrategias dominantes e implementación en el equilibrio de la narración de Bayes solo difiere en lo que se supone que un agente sabe sobre otros tipos de agentes, los dos conceptos de solución coinciden aquí. Esta observación demostrará ser una herramienta útil para probar los resultados de la dureza: si demostramos la dureza computacional en el entorno individual, esto implica inmediatamente la dureza para ambos conceptos IR, para ambos conceptos de solución, para cualquier número de agentes.4. La AMD determinista de pago por el pago es difícil en esta sección, demostramos que es NP completo diseñar un mecanismo determinista que maximice la suma esperada de los pagos recaudados de los agentes. Mostramos que este problema es difícil incluso en el entorno de un solo agente, lo que lo muestra inmediatamente para ambos conceptos IR, para ambos conceptos de solución. Para demostrar Nphardness, reducimos del problema de Minsat. Definición 9 (Minsat). Se nos da una fórmula φ en forma normal conjuntiva, representada por un conjunto de variables booleanas V y un conjunto de cláusulas C, y un entero K (k <| c |). Se nos pregunta si existe una tarea a las variables en V de tal manera que en la mayoría de las cláusulas K en φ se satisfacen. Recientemente se demostró que Minsat era NP-Completo [14]. Ahora podemos presentar nuestro resultado. Teorema 1. La AMD determinista de la maximización del pago es NP Complete, incluso para un solo agente, incluso con una distribución uniforme sobre los tipos. Prueba. Es fácil demostrar que el problema está en NP. Para mostrar NP-Hardness, reducimos una instancia arbitraria de Minsat a la siguiente instancia de AMD determinista de pago de pago de un solo agente. Deje que el tipo de agentes se establece θ = {θc: c ∈ C} ∪ {θv: v ∈ V}, donde C es el conjunto de cláusulas en la instancia de Minsat, y V es el conjunto de variables. Deje que la distribución de probabilidad sobre estos tipos sea uniforme. Deje que el conjunto de resultados sea o = {o0} ∪ {oc: c ∈ C} ∪ {ol: l ∈ L}, donde l es el conjunto de literales, es decir, l = {+v: v ∈ V} ∪ {−v: v ∈ V}. Deje que la notación v (l) = V denote que v es la variable correspondiente a la l literal l, es decir, l ∈ {+V, −v}. Sea l ∈ C denota que la L literal ocurre en la cláusula c.Luego, deje que la función de utilidad de los agentes sea dada por u (θc, ol) = | θ |+ 1 para todos l ∈ L con l ∈ C;u (θc, ol) = 0 para todos l ∈ L con l /∈ C;u (θc, oc) = | θ |+ 1;u (θc, oc) = 0 para todos c ∈ C con c = c;u (θv, ol) = | θ |Para todos l ∈ L con V (L) = V;u (θv, ol) = 0 para todos l ∈ L con v (l) = v;u (θv, oc) = 0 para todos c ∈ C. El objetivo de la instancia AMD es g = | θ |+ | C | −k | θ |, donde K es el objetivo de la instancia de Minsat. Mostramos que las instancias son equivalentes. Primero, supongamos que hay una solución a la instancia de Minsat. Deje que la tarea de los valores de la verdad a las variables en esta solución sea dada por la función F: V → L (donde v (f (v)) = V para todas v ∈ V). Entonces, para cada v ∈ V, Sea O (θv) = de (V) y π (θv) = | θ |. Para cada c ∈ C, deje o (θc) = OC;Sea π (θc) = | θ |+ 1 Si C no se satisface en la solución Minsat, y π (θc) = | θ |Si C está satisfecho. Es sencillo verificar que la restricción IR esté satisfecha. Ahora verificamos que el agente no tenga ningún incentivo para informar mal. Si el tipo de agentes es un θv, entonces cualquier otro informe le dará un resultado que no sea mejor, para un pago que no es menos, por lo que no tiene ningún incentivo para informar mal. Si el tipo de agentes es algún θc donde C es una cláusula satisfecha, nuevamente, cualquier otro informe le dará un resultado que no sea mejor, para un pago que no es menos, por lo que no tiene ningún incentivo para informar mal. El caso final para verificar es dónde el tipo de agentes es algún θc donde C es una cláusula insatisfecha. En este caso, observamos que para ninguno de los tipos, informando que conduce a un resultado OL para una l ∈ C literal, precisamente porque la cláusula no se satisface en el caso de Minsat. Porque también, ningún tipo además de θc conduce al resultado OC, informar cualquier otro tipo dará un resultado con la utilidad 0, al tiempo que forja un pago de al menos | θ |del agente. Claramente, el agente es mejor informar sinceramente, para una utilidad total de 0. Esto establece que el agente nunca tiene un incentivo para informar mal. Finalmente, mostramos que se alcanza el objetivo. Si S es el número de cláusulas satisfechas en la solución Minsat (de modo que S ≤ k), el pago esperado de este mecanismo es | V || θ |+S | θ |+(| C | −s) (| θ |+1) | θ |≥ | V || θ |+k | θ |+(| c | −k) (| θ | +1) | θ |= | Θ |+ | C | −k | θ |= G. Entonces hay una solución a la instancia de AMD. Ahora suponga que hay una solución a la instancia de AMD, dada por una función de resultado O y una función de pago π. Primero, supongamos que hay algunos v ∈ V tal que o (θv) /∈ {O+V, O - V}. Luego, la utilidad que el agente deriva del resultado dado para este tipo es 0 y, por lo tanto, por IR, no se puede extraer ningún pago del agente para este tipo. Porque, nuevamente por IR, el pago máximo que se puede extraer para cualquier otro tipo es | θ |+ 1, se deduce que el pago máximo esperado que podría obtenerse es como máximo (| θ | −1) (| θ | +1) | θ |<| Θ |<G, contradiciendo que esta es una solución a la instancia de AMD. Se deduce que en la solución a la instancia de AMD, para cada v ∈ V, O (θv) ∈ {O+V, O - V}.136 Podemos interpretar esto como una asignación de valores de verdad a las variables: V se establece en verdadero si o (θv) = o+V, y en falso si o (θv) = o - v. Afirmamos que esta tarea es una solución a la instancia de Minsat. Por la restricción IR, el pago máximo que podemos extraer de cualquier tipo θv es | θ |. Debido a que no puede haber incentivos para que el agente informe falsamente, para cualquier cláusula C satisfecha por la asignación dada, el pago máximo que podemos extraer para el tipo correspondiente θc es | θ |.(Porque si extraíamos más de este tipo, la utilidad de los agentes en este caso sería menor que 1; y si V es la variable que satisface C en la asignación, de modo que o (θv) = ol donde ocurre en C, entonces elEl agente sería mejor informar θv en lugar del informe veraz θc, para obtener un resultado que valga la pena | θ | +1 mientras tiene que pagar como máximo | θ |.) Finalmente, para cualquier cláusula insatisfecha C, por la restricción IR, el pago máximo que podemos extraer para el tipo correspondiente θc es | θ |+ 1. Se deduce que el pago esperado de nuestro mecanismo es como máximo v | θ |+s | θ |+(| c | −s) (| θ | +1) θ, donde s es el número de cláusulas satisfechas. Debido a que nuestro mecanismo logra el objetivo, se deduce que v | θ |+s | θ |+(| c | −s) (| θ | +1) θ ≥ g, que por manipulaciones algebraicas simples es equivalente a s ≤ k.Entonces hay una solución a la instancia de Minsat. Debido a que la AMD que maximiza el pago es solo el caso especial de AMD para un diseñador interesado en sí mismo donde el diseñador no tiene preferencias sobre el resultado elegido, esto implica inmediatamente la dureza para el caso general de AMD para un diseñador autoinaltado donde los pagos son posibles. Sin embargo, aún no implica dureza para el caso especial donde los pagos no son posibles. Probaremos la dureza en este caso en la siguiente sección.5. La AMD determinista egoísta sin pagos es difícil en esta sección, demostramos que es completado NP diseñar un mecanismo determinista que maximice la expectativa del objetivo de los diseñadores cuando los pagos no son posibles. Mostramos que este problema es difícil incluso en el entorno de un solo agente, lo que lo muestra inmediatamente para ambos conceptos IR, para ambos conceptos de solución. Teorema 2. Sin pagos, la AMD determinista para un diseñador interestado es NP-completado, incluso para un solo agente, incluso con una distribución uniforme sobre los tipos. Prueba. Es fácil demostrar que el problema está en NP. Para mostrar np-dardness, reducimos una instancia arbitraria de Minsat a la siguiente AMD determinista egoísta de un solo agente sin instancia de pagos. Deje que el tipo de agentes se establece θ = {θc: c ∈ C} ∪ {θv: v ∈ V}, donde C es el conjunto de cláusulas en la instancia de Minsat, y V es el conjunto de variables. Deje que la distribución de probabilidad sobre estos tipos sea uniforme. Deje que el conjunto de resultados sea o = {o0} ∪ {oc: c ∈ C} ∪ {ol: l ∈ L} ∪ {o ∗}, donde l es el conjunto de literales, es decir, l = {+v: v: v: v: v: v: v: v: v: V es∈ V} ∪ {−v: v ∈ V}. Deje que la notación v (l) = V denote que v es la variable correspondiente a la l literal l, es decir, l ∈ {+V, −v}. Sea l ∈ C denota que la L literal ocurre en la cláusula c.Luego, deje que la función de utilidad de los agentes sea dada por u (θc, ol) = 2 para todos l ∈ L con l ∈ C;u (θc, ol) = −1 para todos l ∈ L con l /∈ C;u (θc, oc) = 2;u (θc, oc) = −1 para todos c ∈ C con c = c;u (θc, o ∗) = 1;u (θv, ol) = 1 para todos l ∈ L con v (l) = v;u (θv, ol) = −1 para todos l ∈ L con v (l) = v;u (θv, oc) = −1 para todos c ∈ C;u (θv, o ∗) = −1. Deje que la función objetivo de los diseñadores sea dada por g (o ∗) = | θ | +1;g (ol) = | θ |para todos l ∈ L;g (oc) = | θ |para todos c ∈ C. El objetivo de la instancia AMD es G = | θ |+ | C | −k | θ |, donde K es el objetivo de la instancia de Minsat. Mostramos que las instancias son equivalentes. Primero, supongamos que hay una solución a la instancia de Minsat. Deje que la tarea de los valores de la verdad a las variables en esta solución sea dada por la función F: V → L (donde v (f (v)) = V para todas v ∈ V). Entonces, para cada v ∈ V, deje o (θv) = de (v). Para cada c ∈ C que se satisface en la solución Minsat, deje o (θc) = OC;Para cada c ∈ C insatisfecho, deje o (θc) = O ∗. Es sencillo verificar que la restricción IR esté satisfecha. Ahora verificamos que el agente no tenga ningún incentivo para informar mal. Si el tipo de agentes es un θv, está obteniendo la utilidad máxima para ese tipo, por lo que no tiene ningún incentivo para informar mal. Si el tipo de agentes es algún θc donde C es una cláusula satisfecha, nuevamente, está obteniendo la utilidad máxima para ese tipo, por lo que no tiene ningún incentivo para informar mal. El caso final para verificar es dónde el tipo de agentes es algún θc donde C es una cláusula insatisfecha. En este caso, observamos que para ninguno de los tipos, informando que conduce a un resultado OL para una l ∈ C literal, precisamente porque la cláusula no se satisface en el caso de Minsat. Debido a que ningún tipo de tipo conduce al resultado OC, no hay ningún resultado que el mecanismo seleccione que le dé a la utilidad del agente mayor que 1 para el tipo θc, y por lo tanto, el agente no tiene ningún incentivo para informar falsamente. Esto establece que el agente nunca tiene un incentivo para informar mal. Finalmente, mostramos que se alcanza el objetivo. Si S es el número de cláusulas satisfechas en la solución Minsat (de modo que s ≤ k), entonces el valor esperado de la función objetivo de los diseñadores es | V || θ |+s | θ |+(| c | −s) (| Θ | +1) | θ |≥ | V || θ |+k | θ |+(| c | −k) (| θ | +1) | θ |= | Θ |+ | C | −k | θ |= G. Entonces hay una solución a la instancia de AMD. Ahora suponga que hay una solución a la instancia de AMD, dada por una función de resultado o. Primero, supongamos que hay algunos v ∈ V tal que o (θv) /∈ {O+V, O - V}. El único otro resultado que el mecanismo puede elegir bajo la restricción IR es O0. Esto tiene un valor objetivo de 0, y debido a que el valor más alto que la función objetivo ha tomado es | θ |+ 1, se deduce que el valor máximo esperado de la función objetivo que podría obtenerse es como máximo (| θ | −1) (| θ | +1) | θ |<| Θ |<G, contradiciendo que esta es una solución a la instancia de AMD. Se deduce que en la solución a la instancia de AMD, para cada v ∈ V, O (θv) ∈ {O+V, O - V}. Podemos interpretar esto como una asignación de valores de verdad a las variables: V se establece en verdadero si o (θv) = o+V, y en falso si o (θv) = o - v. Afirmamos que esta tarea es una solución a la instancia de Minsat. Por lo anterior, para cualquier tipo θv, el valor de la función objetivo en este mecanismo será | θ |. Para cualquier cláusula C satisfecha por la asignación dada, el valor de la función objetivo en el caso en que el agente informa el tipo θc será como máximo | θ |.(Esto se debe a que no podemos elegir el resultado o ∗ para dicho tipo, ya que en este caso el agente tendría un incentivo para informar θv en su lugar, donde V es la variable que satisface C en la asignación (de modo que o (θv) = OLDonde L ocurre en c).) Finalmente, para cualquier cláusula insatisfecha C, el valor máximo que la función objetivo puede tomar en el caso en que el agente informa el tipo θc es | θ |+ 1, simplemente porque este es el valor más grande que la función jamás haya tomado. Se deduce que el valor esperado de la función objetivo para nuestro mecanismo es como máximo v | θ |+s | θ |+(| c | −s) (| θ | +1) θ, donde s es el número de 137 satisfecho.cláusulas. Debido a que nuestro mecanismo logra el objetivo, se deduce que v | θ |+s | θ |+(| c | −s) (| θ | +1) θ ≥ g, que por manipulaciones algebraicas simples es equivalente a s ≤ k.Entonces hay una solución a la instancia de Minsat. Ambos resultados de dureza se basaron en la restricción de que el mecanismo debería ser determinista. En la siguiente sección, mostramos que la dureza del diseño desaparece cuando permitimos la aleatorización en el mecanismo.6. La AMD aleatoria para un diseñador autoinalgado es fácil, ahora mostramos cómo permitir la aleatorización sobre los resultados hace que el problema de la AMD autoinaltada a través de la programación lineal, para cualquier número constante de agentes. Teorema 3. La AMD aleatoria interestimada con un número constante de agentes se puede solucionar en el tiempo polinómico mediante programación lineal, con y sin pagos, tanto para ex post y ex-incluso si los tipos están correlacionados. Prueba. Debido a que los programas lineales se pueden resolver en el tiempo polinomial [13], todo lo que necesitamos mostrar es que el número de variables y ecuaciones en nuestro programa es polinomio para cualquier número constante de agentes, es decir, exponencial solo en N., para fines, para fines,de determinar el tamaño del programa lineal, deje t = maxi {| θi |}. Las variables de nuestro programa lineal serán las probabilidades (P (θ1, θ2, ..., θn)) (o) (como la mayoría de las variables tn | o |) (como mayor variables NTN).(Mostramos el programa lineal para el caso donde los pagos son posibles; el caso sin pagos se obtiene fácilmente de esto simplemente omitiendo todas las variables de pago en el programa, o agregando restricciones adicionales que obligan a los pagos a ser 0.) Primero, mostramos las limitaciones IR. Para ex post IR, agregamos las siguientes restricciones (como la mayoría de NTN) al LP: • Por cada i ∈ {1, 2 ,..., N}, y para cada (θ1, θ2, ..., θn) ∈ θ1 × θ2 ×...× θn, agregamos (o∈O (p (θ1, θ2, ..., θn)) (o) u (θi, o)) - πi (θ1, θ2, ..., θn) ≥ 0. Para ex IR interino, agregamos las siguientes restricciones (como la mayoría de NT) al LP: • Por cada i ∈ {1, 2 ,..., N}, por cada θi ∈ θi, agregamos θ1, ..., θn γ (θ1, ..., θn | θi) ((o∈O (p (θ1, θ2, ..., θn))))(o) u (θi, o)) - πi (θ1, θ2, ..., θn)) ≥ 0. Ahora, mostramos las limitaciones del concepto de solución. Para la implementación en estrategias dominantes, agregamos las siguientes restricciones (como máximo ntn+1) al LP: • Para cada i ∈ {1, 2 ,..., N}, para cada (θ1, θ2, ..., θi, ..., θn) ∈ θ1 × θ2 ×...× θn, y para cada informe de tipo alternativo ˆθi ∈ θi, agregamos la restricción (o∈O (p (θ1, θ2, ..., θi, ..., θn)) (o) u (θi, o)) - πi (θ1, θ2, ..., θi, ..., θn) ≥ (o∈O (p (θ1, θ2, ..., ˆθi, ..., Θn)) (o) u (θi, o)) - πi (θ1, θ2, ..., ˆθi, ..., θn). Finalmente, para la implementación en el equilibrio de Bayes-Nash, agregamos las siguientes restricciones (como más nt2) al LP: • Por cada i ∈ {1, 2, ..., n}, por cada θi ∈ θi, y para cada cada unoInforme de tipo alternativo ˆθi ∈ θi, agregamos la restricción θ1, ..., θn γ (θ1, ..., θn | θi) ((o∈O (p (θ1, θ2, ..., θi, ..., θn)) (o) u (θi, o)) - πi (θ1, θ2, ..., θi, ..., θn)) ≥ θ1, ..., θn γ (θ1, ..., θn | θi) ((o∈O (p (θ1, θ2, ..., ˆθi, ..., θn)) (o) u (θi, o)) - πi (θ1, θ2, ..., ˆΘi, ..., θn)). Todo lo que queda por hacer es dar la expresión que el diseñador busca maximizar, que es: • θ1, ..., θn γ (θ1, ..., θn) ((o∈O (p (θ1, θ2, ..., θi, ..., θn)) (o) g (o)) + n i = 1 πi (θ1, θ2, ..., θn)). Como indicamos, el número de variables y restricciones es exponencial solo en n, y por lo tanto, el programa lineal es de tamaño polinomial para un número constante de agentes. Por lo tanto, el problema se puede resolver en el tiempo polinomial.7. Implicaciones para un problema óptimo de diseño de subasta combinatoria en esta sección, demostraremos algunas consecuencias interesantes del problema del diseño de mecanismo automatizado para un diseñador interesado en el diseño de subastas combinatorias óptimas. Considere una subasta combinatoria con un conjunto de artículos a la venta. Para cualquier paquete b ⊆ s, deje que UI (θi, b) sea el postor es la utilidad para recibir el paquete B cuando el tipo de licitadores es θi. El problema óptimo de diseño de la subasta es especificar las reglas de la subasta para maximizar los ingresos esperados para el subastador.(Por el principio de revelación, sin pérdida de generalidad, podemos suponer que la subasta es veraz). El problema de diseño de subasta óptimo se resuelve para el caso de un solo artículo por la famosa subasta Myerson [18]. Sin embargo, diseñar subastas óptimas en subastas combinatorias es un problema de investigación abierto reconocido [3, 25]. El problema está abierto incluso si solo hay dos artículos a la venta.(El caso de TwoItem con una forma muy especial de complementariedad y ninguna sustituibilidad se ha resuelto recientemente [1]. Supongamos que tenemos elementos de eliminación gratuitos se pueden desechar sin costo. Además, supongamos que las preferencias de los licitantes tienen la siguiente estructura: cada vez que un postor recibe un paquete de artículos, la utilidad de los licitantes para ese paquete está determinada solo por el mejor elemento en el paquete.(Hacemos hincapié en que 138 qué elemento es el mejor se permite depender del tipo de licitadores). Definición 10. Se dice que el postor I tiene preferencias mejores sobre paquetes de elementos si existe una función VI: θi × S → R de tal manera que para cualquier θi ∈ θi, para cualquier B ⊆ S, ui (θi, b) = maxs∈BVI (θi, S). Hacemos la siguiente observación útil en este entorno: no tiene sentido otorgar a un postor más de un elemento. La razón es que si el postor informa con sinceridad, quitando todo menos el artículo más valioso del postor no lastimará al postor;Y, mediante la eliminación gratuita, hacerlo solo puede reducir el incentivo para que este postor informe falsamente este tipo, cuando el postor realmente tiene otro tipo. Ahora mostramos que el problema de diseñar una subasta óptima determinista aquí es NP-COMPLETE, ¡por una reducción del pago que maximiza el problema AMD! Teorema 4. Dado un problema de diseño de subasta combinatoria óptima bajo las mejores preferencias (dado por un conjunto de elementos sy para cada postor i, un espacio de tipo finito θi y una función vi: θi × s → r tal que para cualquier θi ∈ θi, paraCualquier b ⊆ s, ui (θi, b) = maxs∈B VI (θi, s)), diseñar la subasta determinista óptima es completa, incluso para un solo postor con una distribución uniforme sobre los tipos. Prueba. El problema está en NP porque podemos generar de manera no determinista una regla de asignación y luego establecer los pagos utilizando la programación lineal. Para mostrar NP-Hardness, reducimos una instancia arbitraria de AMD determinista que Maximizing AMD, con un solo agente y una distribución uniforme sobre los tipos, a la siguiente instancia de problema de diseño de subasta combinatorial óptima con un solo postor con preferencias de solo solo. Para cada resultado o ∈ O en la instancia de AMD (además del resultado o0), que haya un elemento, así que ∈ S. deje que el espacio de tipo sea el mismo, y vaya V (θi, entonces) = ui (θi, o) (donde u se especifica en la instancia de AMD). Deje que el valor objetivo de ingresos esperado sea el mismo en ambos casos. Mostramos que las instancias son equivalentes. Primero suponga que existe una solución a la instancia de AMD, dada por una función de resultado y una función de pago. Luego, si la solución AMD elige el resultado o para un tipo, en la solución de subasta óptima, asigne {SO} al postor para este tipo.(A menos que o = o0, en cuyo caso asignamos {} al postor). Deje que las funciones de pago sean las mismas en ambos casos. Luego, la utilidad que recibe un agente para informar un tipo (dado el tipo verdadero) en cualquier solución es la misma, por lo que tenemos compatibilidad con incentivos en la solución de subasta óptima. Además, debido a que la distribución de tipos y la función de pago son los mismos, los ingresos esperados para el subastador/diseñador son los mismos. Se deduce que existe una solución a la instancia de diseño de subasta óptima. Ahora suponga que existe una solución a la instancia de diseño de subasta óptima. Por la observación de más de un elemento, podemos suponer sin pérdida de generalidad que la solución nunca asigna más de un elemento. Luego, si la solución de subasta óptima asigna el elemento, por lo tanto, al postor para un tipo, en la solución AMD, deje que el mecanismo elija el resultado O para ese tipo. Si la solución de subasta óptima no asigna nada al postor para un tipo, en la solución AMD, deje que el mecanismo elija el resultado O0 para ese tipo. Deje que las funciones de pago sean las mismas. Luego, la utilidad que recibe un agente para informar un tipo (dado el tipo verdadero) en cualquier solución es la misma, por lo que tenemos compatibilidad con incentivos en la solución AMD. Además, debido a que la distribución de tipos y la función de pago son los mismos, los ingresos esperados para el diseñador/subastador son los mismos. Se deduce que existe una solución a la instancia de AMD. Afortunadamente, también podemos llevar a cabo el resultado de facilidad de los mecanismos aleatorios a este entorno de subasta combinatoria que nos da uno de los pocos algoritmos conocidos de tiempo polinómico para un problema de diseño de subasta combinatorial óptimo. Teorema 5. Dado un problema de diseño de subasta combinatoria óptima bajo las mejores preferencias (dado por un conjunto de elementos sy para cada postor i, un espacio de tipo finito θi y una función vi: θi × s → r tal que para cualquier θi ∈ θi, paracualquier b ⊆ s, ui (θi, b) = maxs∈B vi (θi, s)), si el número de postores es una K constante, entonces la subasta aleatoria óptima se puede diseñar en tiempo polinomial.(Para cualquier restricción IC e IR). Prueba. Por la observación en más de uno, podemos sin pérdida de generalidad restringirnos a las asignaciones donde cada postor recibe como máximo un elemento. Hay menos de (| s | + 1) k tales asignaciones, es decir, un número polinomial de asignaciones. Debido a que podemos enumerar los resultados explícitamente, simplemente podemos resolver esto como una instancia de AMD que maximiza el pago, con programación lineal.8. Investigación relacionada sobre la complejidad en el diseño del mecanismo ha habido un interés reciente considerable en el diseño del mecanismo en la informática. Algunos de ellos se han centrado en cuestiones de complejidad computacional, pero la mayor parte de ese trabajo se ha esforzado por el diseño de mecanismos que son fáciles de ejecutar (por ejemplo, [20, 15, 19, 9, 12]), en lugar de estudiar la complejidad de diseñar el mecanismo. La pieza más cercana del trabajo anterior estudió la complejidad del diseño de mecanismo automatizado por un diseñador benevolente [5, 6]. Roughgarden ha estudiado la complejidad de diseñar una buena topología de red para los agentes que eligen egoístamente los enlaces que usan [21]. Esto está relacionado con el diseño del mecanismo, pero difiere significativamente en que el diseñador solo ha restringido el control sobre las reglas del juego porque no hay fiesta que pueda imponer el resultado (o pagos secundarios). Además, no hay informes explícitos de preferencias.9. Conclusiones y la investigación futura a menudo, se debe elegir un resultado sobre la base de las preferencias reportadas por un grupo de agentes. La dificultad clave es que los agentes pueden informar sus preferencias de forma no sincera para hacer que el resultado elegido sea más favorable para ellos mismos. El diseño del mecanismo es el arte de diseñar las reglas del juego para que los agentes estén motivados para informar sus preferencias sinceramente, y se elige un resultado deseable. En un mecanismo automatizado recientemente emergente, un mecanismo automatizado, un mecanismo, se calcula para la configuración de agregación de preferencia específica a mano. Esto tiene varias ventajas, 139, pero la desventaja es que el problema de optimización del diseño del mecanismo debe resolverse de nuevo cada vez. A diferencia del trabajo anterior en el diseño de mecanismo automatizado que estudió un diseñador benevolente, en este documento estudiamos problemas de diseño de mecanismo automatizado donde el diseñador es una configuración interestada mucho más relevante para el comercio electrónico. En este entorno, el centro solo se preocupa por qué resultado se elige y qué pagos se hacen. La razón por la que las preferencias de los agentes son relevantes es que el centro está limitado a hacer que cada agente al menos fuera tan bien como el agente habría sido si no hubiera participado en el mecanismo. En este entorno, demostramos que diseñar un mecanismo determinista óptimo es completar NP en dos casos especiales importantes: cuando el centro solo está interesado en los pagos realizados, y cuando los pagos no son posibles y el centro solo está interesado en el resultadoelegido. Estos resultados de dureza implican dureza en todas las configuraciones de diseño de mecanismo automatizado más general con un diseñador interesado. Los resultados de la dureza se aplican si las restricciones de racionalidad individual (participación) se aplican exámenes intermedios o ex post, y si el concepto de solución es la implementación de estrategias dominantes o la implementación de equilibrio de bayes-nash. Luego demostramos que permitir la aleatorización en el mecanismo hace que el problema de diseño en todas estas configuraciones sea computacionalmente fácil. Finalmente, demostramos que el problema de la AMD que la maximiza el pago está estrechamente relacionado con una variante interesante del problema de diseño de subasta combinatorial óptimo (que maximiza los ingresos), donde los postores tienen preferencias solo. Demostramos que aquí también, diseñar un mecanismo determinista óptimo es NP complete incluso con un agente, pero diseñar un mecanismo aleatorizado óptimo es fácil. La investigación futura incluye estudiar el diseño del mecanismo automatizado con un diseñador interesado en entornos más restringidos, como subastas (donde el objetivo de los diseñadores puede incluir preferencias sobre qué postor debe recibir el bien, así como los pagos). También queremos estudiar la complejidad del diseño de mecanismo automatizado en la configuración donde los espacios de resultado y tipo tienen una estructura especial para que puedan representarse de manera más concisa. Finalmente, planeamos ensamblar un conjunto de datos de problemas de diseño del mecanismo del mundo real, tanto histórico como de corriente, y aplicar el diseño de mecanismo automatizado a esos problemas.10. Referencias [1] M. Armstrong. Subastas óptimas de objetos múltiples. Review of Economic Studies, 67: 455-481, 2000. [2] K. Arrow. La doctrina de los derechos de propiedad y la revelación de la demanda bajo información incompleta. En M. Boskin, editor, economía y bienestar humano. New York Academic Press, 1979. [3] C. Avery y T. Hendershott. Bundling y subastas óptimas de múltiples productos. Review of Economic Studies, 67: 483-497, 2000. [4] E. H. Clarke. Precio multiparte de bienes públicos. Public Choice, 11: 17-33, 1971. [5] V. Conitzer y T. Sandholm. Complejidad del diseño del mecanismo. En Actas de la 18ª Conferencia Anual sobre Incertidumbre en Inteligencia Artificial (UAI-02), páginas 103-110, Edmonton, Canadá, 2002. [6] V. Conitzer y T. Sandholm. Diseño de mecanismo automatizado: resultados de complejidad derivados del entorno de un solo agente. En Actas de la 5ta Conferencia Internacional sobre Comercio Electrónico (ICIC-03), páginas 17-24, Pittsburgh, PA, EE. UU., 2003. [7] V. Conitzer y T. Sandholm. Críticas computacionales del principio de revelación. En Actas de la Conferencia ACM sobre Comercio Electrónico (ACM-EC), Nueva York, NY, 2004. Papel corto. La versión de longitud completa apareció en el taller de AAMAS-03 en Comercio Electrónico mediado por agente (AMEC).[8] C. Daspremont y L. A. G´erard-Varet. Incentivos e información incompleta. Journal of Public Economics, 11: 25-45, 1979. [9] J. Feigenbaum, C. Papadimitriou y S. Shenker. Compartir el costo de las transmisiones de muliticast. Journal of Computer and System Sciences, 63: 21-41, 2001. Versión temprana en las actas del Simposio ACM anual sobre Teoría de la Computación (STOC), 2000. [10] A. Gibbard. Manipulación de esquemas de votación. Econometrica, 41: 587-602, 1973. [11] T. Groves. Incentivos en equipos. Econometrica, 41: 617-631, 1973. [12] J. Hershberger y S. Suri. Precios de Vickrey y caminos más cortos: ¿Qué vale la ventaja? En Actas del Simposio Anual sobre Fundamentos de la Computación (FOCS), 2001. [13] L. Khachiyan. Un algoritmo polinomial en la programación lineal. Matemáticas soviéticas. Doklady, 20: 191-194, 1979. [14] R. Kohli, R. Krishnamurthi y P. Mirchandani. El problema mínimo de satisfilidad. Siam Journal of Discrete Mathematics, 7 (2): 275-283, 1994. [15] D. Lehmann, L. I. Ocallaghan e Y. Shoham. Revelación de la verdad en subastas combinatorias rápidas, aproximadamente eficientes. Journal of the ACM, 49 (5): 577-602, 2002. La versión temprana apareció en Actas de la Conferencia ACM sobre Comercio Electrónico (ACM-EC), 1999. [16] A. Mas-Colell, M. Whinston y J. R. Green. Teoría microeconómica. Oxford University Press, 1995. [17] E. S. Maskin y J. Riley. Subastas óptimas de unidades múltiples. En F. Hahn, editor, Economía de los mercados, información y juegos faltantes, Capítulo 14, páginas 312-335. Clarendon Press, Oxford, 1989. [18] R. Myerson. Diseño de subasta óptimo. Matemáticas de Operation Research, 6: 58-73, 1981. [19] N. Nisan y A. Ronen. Mecanismos VCG computacionalmente factibles. En Actas de la Conferencia ACM sobre Comercio Electrónico (ACM-EC), páginas 242-252, Minneapolis, MN, 2000. [20] N. Nisan y A. Ronen. Diseño de mecanismo algorítmico. Juegos y comportamiento económico, 35: 166-196, 2001. Versión temprana en las actas del Simposio ACM anual sobre Teoría de la Computación (STOC), 1999. [21] T. Roughgarden. Diseñar redes para usuarios egoístas es difícil. En Actas del Simposio Anual sobre Fundamentos de la Computación (FOCS), 2001. [22] T. Sandholm. Problemas en subastas computacionales de Vickrey. International Journal of Electronic Commerce, 4 (3): 107-129, 2000. Número especial en 140 aplicando agentes inteligentes para el comercio electrónico. Una versión breve y temprana apareció en la Segunda Conferencia Internacional sobre Sistemas de Multi-Agentes (ICMA), páginas 299-306, 1996. [23] M. A. Satterthwaite. Condiciones a prueba de estrategias y flechas: teoremas de existencia y correspondencia para procedimientos de votación y funciones de bienestar social. Journal of Economic Theory, 10: 187-217, 1975. [24] W. Vickrey. Contrapeculación, subastas y licitaciones selladas competitivas. Journal of Finance, 16: 8-37, 1961. [25] R. V. Vohra. Problemas de investigación en subastas combinatorias. Mimeo, versión 29 de octubre de 2001. 141