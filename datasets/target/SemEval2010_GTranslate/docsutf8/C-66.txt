Programación basada en la heurística de las cargas de trabajo de servicio web compuesto Thomas Phan Wen-Syan Li IBM Almaden Research Center 650 Harry Rd. San José, CA 95120 {Phantom, WSL}@us.ibm.com Los servicios web abstractos se pueden agregar para crear flujos de trabajo compuestos que proporcionen funcionalidad simplificada para usuarios humanos u otros sistemas. Aunque los estándares de la industria y las investigaciones recientes han tratado de definir las mejores prácticas y mejorar la composición del flujo de trabajo de extremo a extremo, un área que no se ha explorado por completo es la programación de las solicitudes de servicio web de flujos de trabajo para aprovisionar los servicios reales en un nivel multifiente,Entorno de organización multi-organización. Este problema es relevante para los escenarios comerciales modernos donde los procesos comerciales dentro de un flujo de trabajo deben completarse dentro de los límites definidos por QoS. Debido a que estos procesos comerciales son consumidores de servicios web, las solicitudes de servicio deben asignarse y programarse en múltiples proveedores de servicios web, cada uno con su propio acuerdo de nivel de servicio negociado. En este documento, proporcionamos heurísticas para programar solicitudes de servicio de múltiples flujos de trabajo de procesos comerciales a proveedores de servicios web de modo que se maximice una métrica de valor comercial en todos los flujos de trabajo. Mostramos que un algoritmo de búsqueda genético es apropiado para realizar esta programación, y a través de la experimentación mostramos que nuestro algoritmo escala bien hasta mil flujos de trabajo y produce mejores mapeos que los enfoques tradicionales. Categorías y descriptores de sujetos c.2.4 [Redes de comunicación por computadora]: aplicaciones distribuidas de sistemas distribuidos;D.2.8 [Ingeniería de software]: Medidas de complejidad de métricas, medidas de rendimiento 1. Introducción Los servicios web pueden componerse en flujos de trabajo para proporcionar funcionalidad optimizada de extremo a extremo para usuarios humanos u otros sistemas. Aunque los esfuerzos de investigación anteriores han buscado formas de automatizar de manera inteligente la composición de los servicios web en flujos de trabajo (por ejemplo, [1, 9]), un problema importante restante es la asignación de solicitudes de servicios web a los proveedores de servicios web subyacentes en un tiempo de ejecución de niveles múltiplesescenario dentro de las limitaciones. En este documento, abordamos este problema de programación y examinamos medios para administrar una gran cantidad de flujos de trabajo de procesos comerciales de manera escalable. El problema de programar las solicitudes de servicio web a los proveedores es relevante para los dominios comerciales modernos que dependen del aprovisionamiento de servicios de múltiples niveles. Considere el ejemplo que se muestra en la Figura 1 que ilustra nuestro espacio de problemas. Los flujos de trabajo comprenden múltiples procesos comerciales relacionados que son consumidores de servicios web;Aquí suponemos que los flujos de trabajo representan el servicio solicitado de clientes o sistemas automatizados y que el flujo de trabajo ya ha sido compuesto con un kit de herramientas de coreografía existente. Estos flujos de trabajo se envían a un portal (no se muestra) que actúa como agente de programación entre los consumidores de servicios web y los proveedores de servicios web. En este ejemplo, un flujo de trabajo podría representar las acciones necesarias para instanciar un itinerario de vacaciones, donde un proceso comercial solicita reservar un boleto de aerolínea, otro proceso de negocio solicita una habitación de hotel, etc. Cada una de estas solicitudes se dirige a un tipo de servicio particular (por ejemplo, reservas de aerolíneas, reservas de hoteles, reservas de automóviles, etc.), y para cada tipo de servicio, hay múltiples instancias de proveedores de servicios que publican una interfaz de servicio web. Un desafío importante es que los flujos de trabajo deben cumplir con una métrica de calidad de servicio (QoS), como el tiempo de finalización de extremo a extremo de todos sus procesos comerciales, y que cumplir o fallar este objetivo resulta en la asignación de un negocio cuantitativo.Valor métrico para el flujo de trabajo;Intuitivamente, se desea que todos los flujos de trabajo cumplan con sus respectivos objetivos de QoS. Además, aprovechamos la noción de que los acuerdos de servicio de QoS generalmente están acordados entre los proveedores de servicios web y el agente de programación de tal manera que los proveedores anuncian cierto nivel de QoS garantizado al planificador en función de condiciones de tiempo de ejecución, como el tiempo de respuesta y la máxima concurrencia disponible. El problema resultante es programar y asignar las solicitudes de procesos comerciales de tipos de servicio a uno de los proveedores de servicios para ese tipo. La programación debe hacerse de tal manera que se maximice el valor comercial agregado en todos los flujos de trabajo. En la Sección 3 declaramos el escenario como un problema combinatorio y utilizamos un algoritmo de búsqueda genética [5] para encontrar la mejor tarea de las solicitudes de servicio web a los proveedores. Este enfoque converge hacia una tarea que maximiza el valor comercial general para todos los flujos de trabajo. En la Sección 4 mostramos a través de la experimentación que esta búsqueda heurística encuentra mejores tareas que otros algoritmos (codicioso, redondo y proporcional). Además, este enfoque nos permite escalar el número de flujos de trabajo simultáneos (hasta mil flujos de trabajo en nuestros experimentos) y aún así encontrar horarios efectivos.2. Trabajo relacionado en el contexto de la asignación y programación de servicios, [11] mapea las llamadas de servicio web a los posibles servidores utilizando programación lineal, pero su trabajo se refiere a mapear solo flujos de trabajo únicos;Nuestro enfoque principal está en programar escalablemente múltiples flujos de trabajo (UP 30 Tipo de servicio Superhotelels.com Proceso de negocio Proceso de negocio Flujo de trabajo ... Proceso comercial Proceso comercial ... hostilehostels.com Increíbleinns.com Proceso de negocios Proceso de negocios Proceso de negocios ... Servicio de proceso de negocios ServicioProveedor Skyhighairlines.com Supercrazyflights.com Proceso de negocios ... Acuerdo de servicio de QoS anunciado CarrentalService.com Figura 1: Un escenario de ejemplo que demuestra la interacción entre los procesos comerciales en flujos de trabajo y proveedores de servicios web. Cada proceso comercial accede a un tipo de servicio y luego se asigna a un proveedor de servicios para ese tipo.a mil como mostramos más adelante) utilizando diferentes métricas comerciales y una heurística de búsqueda.[10] presenta un enfoque de aprovisionamiento dinámico que utiliza técnicas predictivas y reactivas para la entrega de aplicaciones de Internet de niveles múltiples. Sin embargo, las técnicas de aprovisionamiento no consideran los desafíos que enfrentan cuando hay planes de ejecución de consultas alternativos y fuentes de datos replicadas.[8] presenta un mecanismo de programación basado en retroalimentación para sistemas de niveles múltiples con bases de datos de back-end, pero a diferencia de nuestro trabajo, asume un acoplamiento más estricto entre los diversos componentes del sistema. Nuestro trabajo también se basa en la investigación previa de programación. El problema clásico de programación de la tienda de empleo, que se muestra que es NP-completado [4] [3], es similar a las nuestras, ya que las tareas dentro de un trabajo deben programarse en la maquinaria (C.F. Nuestro escenario es que los procesos comerciales dentro de un flujo de trabajo deben programarseen proveedores de servicios web). Las diferencias más destacadas son que las máquinas pueden procesar solo un trabajo a la vez (suponemos que los servidores pueden realizar múltiples tareas pero con rendimiento degradado y un nivel de concurrencia máximo), las tareas dentro de un trabajo no pueden ejecutarse simultáneamente en diferentes máquinas (asumimos que los procesos comerciales puedenser asignado a cualquier servidor disponible), y la métrica principal del rendimiento es el MakePan, que es el momento de la última tarea entre todos los trabajos para completar (y como mostramos más adelante, optimizar el makepan es insuficiente para programar los procesos comerciales, que requiere diferentes métricas).3. Diseñe en esta sección Describimos nuestro modelo y discutimos cómo podemos encontrar tareas de programación utilizando un algoritmo de búsqueda genética.3.1 Modelo Basamos nuestro modelo en el escenario simplificado que se muestra en la Figura 1. Específicamente, suponemos que los usuarios o los sistemas automatizados solicitan la ejecución de un flujo de trabajo. Los flujos de trabajo comprenden procesos comerciales, cada uno de los cuales hace que un servicio web se invocara a un tipo de servicio. Además, los procesos comerciales tienen un pedido en el flujo de trabajo. La disposición y la ejecución de los procesos comerciales y el flujo de datos entre ellos son administrados por una herramienta de composición o coreografía (por ejemplo, [1, 9]). Aunque los lenguajes de composición pueden usar mecanismos sofisticados de control de flujo, como las ramas condicionales, por simplicidad suponemos que los procesos se ejecutan secuencialmente en un orden dado. Este escenario puede extenderse naturalmente a relaciones más complejas que se pueden expresar en BPEL [7], lo que define cómo interactúan los procesos comerciales, se intercambian mensajes, se ordenan actividades y se manejan excepciones. Debido a las limitaciones de espacio, nos centramos en el problema del espacio presentado aquí y ampliaremos nuestro modelo a escenarios de implementación más avanzados en el futuro. Cada flujo de trabajo tiene un requisito de QoS para completar dentro de un número específico de unidades de tiempo (por ejemplo, en el orden de segundos, como se detalla en la sección Experimentos). Al finalizar (o falla), al flujo de trabajo se le asigna un valor comercial. Extendimos este enfoque aún más y consideramos diferentes tipos de finalización del flujo de trabajo para modelar niveles de QoS diferenciados que pueden aplicar las empresas (por ejemplo, para proporcionar un servicio al cliente escalonado). Decimos que un flujo de trabajo es exitoso si se completa dentro de su requisito de QoS, aceptable si se completa dentro de un factor constante κ 31 de su límite de QoS (en nuestros experimentos elegimos κ = 3), o falla si termina más allá de κ veces su QoS su QoSatado. Para cada categoría, se asigna un puntaje de valor comercial al flujo de trabajo, con la categoría exitosa asignada el puntaje positivo más alto, seguido de aceptable y luego falla. La distribución del punto de valor comercial no es uniforme entre los flujos de trabajo, más casos de modelado en los que algunos flujos de trabajo son de mayor prioridad que otros. Cada tipo de servicio es implementado por varios proveedores de servicios diferentes. Suponemos que los proveedores hacen acuerdos de nivel de servicio (SLA) para garantizar un nivel de rendimiento definido por el tiempo de finalización para completar una invocación del servicio web. Aunque los SLA pueden ser complejos, en este documento suponemos por simplicidad que las garantías pueden tomar la forma de una degradación de rendimiento lineal bajo carga. Esta garantía se define por varios parámetros: α es el tiempo de finalización esperado (por ejemplo, en el orden de segundos) si la carga de trabajo asignada de las solicitudes de servicio web es menor o igual a β, la concurrencia máxima y si la carga de trabajo es más altaque β, la finalización esperada para una carga de trabajo de tamaño Ω es α+ γ (Ω - β) donde γ es un coeficiente fraccional. En nuestros experimentos variamos α, β y γ con diferentes distribuciones. Idealmente, todos los flujos de trabajo podrían terminar dentro de sus límites de QoS y, por lo tanto, maximizar el valor comercial agregado en todos los flujos de trabajo. Sin embargo, debido a que modelamos a los proveedores de servicios con rendimiento degradante bajo carga, no todos los flujos de trabajo alcanzarán su límite de QoS: puede ser fácilmente el caso de que los procesos comerciales se asignen a los proveedores que están sobrecargados y no pueden completarse dentro del límite de QoS de flujos de trabajo respectivos. El problema de investigación clave, entonces, es asignar los procesos comerciales a los proveedores de servicios web con el objetivo de optimizar el valor comercial agregado de todos los flujos de trabajo. Dado que el alcance de la optimización es el conjunto completo de flujos de trabajo, puede ser que las mejores tareas de programación puedan dar lugar a que algunos flujos de trabajo tengan que fallar para que más flujos de trabajo tengan éxito. Esta observación intuitiva sugiere que los enfoques de programación tradicionales como la redonda o las tareas proporcionales no funcionarán bien, que es lo que observamos y discutimos en la Sección 4. Por otro lado, una búsqueda exhaustiva de todas las tareas posibles encontrará el mejor horario, pero la complejidad computacional es prohibitivamente alta. Supongamos que hay flujos de trabajo W con un promedio de procesos comerciales B por flujo de trabajo. Además, en el peor de los casos, cada proceso comercial solicita un tipo de servicio, para el cual hay proveedores de P. Por lo tanto, hay combinaciones de W · PB para explorar para encontrar las tareas óptimas de los procesos comerciales para los proveedores. Incluso para configuraciones pequeñas (p. Ej. W = 10, b = 5, p = 10), el tiempo computacional para la búsqueda exhaustiva es significativo, y en nuestro trabajo buscamos escalar estos parámetros. En la siguiente subsección, discuta cómo se puede utilizar un algoritmo de búsqueda genética para converger hacia las tareas de programación óptimas.3.2 Algoritmo genético Dado un espacio de búsqueda exponencial de asignaciones de procesos comerciales para proveedores de servicios web, el problema es encontrar la tarea óptima que produce el valor comercial agregado general más alto en todos los flujos de trabajo. Para explorar el espacio de la solución, utilizamos una heurística de búsqueda del algoritmo genético (GA) que simula la selección natural darwiniana al hacer que los miembros de una población compitan para sobrevivir para pasar sus cromosomas genéticos a la próxima generación;Después de generaciones sucesivas, existe una tendencia a que los cromosomas converjan hacia la mejor combinación [5] [6]. Aunque existen otras heurísticas de búsqueda que pueden resolver los problemas de optimización (por ejemplo, recocido simulado o esculpido de hilos más empinado), el problema de programación de procesos comerciales se ajusta bien a una GA porque las soluciones potenciales pueden representarse en forma de matriz y nos permite usar investigaciones previas en efectivo en efectivoRecombinación cromosómica GA para formar nuevos miembros de la población (por ejemplo [2]).0 1 2 3 4 0 1 2 0 2 1 1 0 1 0 1 0 2 1 2 0 0 1 Figura 2: Un cromosoma de ejemplo que representa una asignación de programación de (flujo de trabajo, tipo de servicio) → proveedor de servicios. Cada fila representa un flujo de trabajo, y cada columna representa un tipo de servicio. Por ejemplo, aquí hay 3 flujos de trabajo (0 a 2) y 5 tipos de servicio (0 a 4). En Workflow 0, cualquier solicitud de servicio tipo 3 va al proveedor 2. Tenga en cuenta que el identificador del proveedor de servicios está dentro de un rango limitado a su tipo de servicio (es decir, su columna), por lo que los 2 enumerados para el tipo de servicio 3 son un servidor diferente del servidor 2 en otras columnas. Representación cromosómica de una solución. En la Figura 2 mostramos un cromosoma de ejemplo que codifica una asignación de programación. La representación es una matriz bidimensional que mapea {flujo de trabajo, tipo de servicio} a un proveedor de servicios. Para un proceso comercial en el flujo de trabajo I y utilizando el tipo de servicio J, la (i, j) la entrada en la tabla es el identificador para el proveedor de servicios al que se asigna el proceso comercial. Tenga en cuenta que el identificador del proveedor de servicios está dentro de un rango limitado a su tipo de servicio. Ejecución de GA. Un GA procede de la siguiente manera. Inicialmente, se crea un conjunto aleatorio de cromosomas para la población. Los cromosomas se evalúan (hash) a alguna métrica, y los mejores se eligen para ser padres. En nuestro problema, la evaluación produce el valor comercial neto en todos los flujos de trabajo después de ejecutar todos los procesos comerciales una vez que se asignan a sus respectivos proveedores de servicios de acuerdo con el mapeo en el cromosoma. Los padres se recombinan para producir hijos, simulando el crossover sexual y ocasionalmente puede surgir una mutación que produce nuevas características que no estaban disponibles en ninguno de los padres. La idea principal es que nos gustaría que los niños sean diferentes de los padres (para explorar más espacio en la solución) pero no muy diferentes (para contener las porciones del cromosoma que resultan en buenas tareas de programación). Tenga en cuenta que encontrar el óptimo global no está garantizado porque la recombinación y la mutación son estocásticas. Recombinación y mutación de GA. Como se mencionó, los cromosomas son matrices bidimensionales que representan asignaciones de programación. Para simular la recombinación sexual de dos cromosomas para producir un nuevo cromosoma infantil, aplicamos un esquema de cruce de un punto dos veces (una vez a lo largo de cada dimensión). El crossover se explica mejor por analogía al espacio cartesiano de la siguiente manera. Se elige un punto aleatorio en la matriz para ser coordinada (0, 0). Los elementos de matriz de los cuadrantes II y IV del primer padre y los elementos de los cuadrantes I y III del segundo padre se utilizan para crear el nuevo hijo. Este enfoque sigue las mejores prácticas de GA manteniendo juntos segmentos de cromosomas contiguos a medida que se transmiten de padre a niño. El esquema de mutación uni-cromosoma cambia aleatoriamente una de las asignaciones de proveedores de servicios a otro proveedor dentro del rango disponible. Otros esquemas de recombinación y mutación son un área de investigación en la comunidad de GA, y buscamos explorar nuevos operadores en el trabajo futuro. Función de evaluación de GA. Un componente de GA importante es la función de evaluación. Dado un cromosoma particular que representa un mapeo de programación, la función calcula determinista el valor comercial neto en todas las cargas de trabajo. Los procesos comerciales en cada carga de trabajo se asignan a los proveedores de servicios, y el tiempo de finalización de cada proveedor se calcula en función de la garantía de acuerdo de servicio utilizando los parámetros mencionados en la Sección 3.1, a saber, el tiempo de finalización descargado α, la rencia β de la rentabilidad máxima y un coeficiente γ coeficienteEso controla la degradación del rendimiento lineal bajo carga pesada. Tenga en cuenta que la función de evaluación se puede reemplazar fácilmente si lo desea;Por ejemplo, otras funciones de evaluación pueden modelar diferentes garantías de proveedores de servicios o flujos de trabajo paralelos.4. Experimentos y resultados En esta sección mostramos el beneficio de usar nuestro planificador basado en GA. Debido a que queríamos escalar los escenarios hasta una gran cantidad de flujos de trabajo (hasta 1000 en nuestros experimentos), implementamos un programa de simulación que nos permitió variar parámetros y medir los resultados con diferentes métricas. El simulador se escribió en C ++ estándar y se ejecutó en una computadora de escritorio Linux (Fedora Core) que se ejecuta a 2.8 GHz con 1 GB de RAM. Comparamos nuestro algoritmo con candidatos alternativos: • Un algoritmo bien conocido de Round-Robin que asigna cada proceso comercial de manera circular a los proveedores de servicios para un tipo de servicio particular. Este enfoque proporciona el esquema más simple para el equilibrio de carga.• un algoritmo de proporción aleatoria que asigna proporcionalmente procesos comerciales a los proveedores de servicios;Es decir, para un tipo de servicio determinado, los proveedores de servicios están clasificados por su tiempo de finalización garantizado, y los procesos comerciales se asignan proporcionalmente a los proveedores en función de su tiempo de finalización.(También probamos un esquema de proporcionalidad basado tanto en los tiempos de finalización como en la concurrencia máxima, pero logramos los mismos resultados, por lo que solo los resultados de los esquemas anteriores se muestran aquí.) • Un algoritmo codicioso de Strawman que siempre asigna procesos comerciales al proveedor de servicios que tiene elTiempo de finalización garantizado más rápido. Este algoritmo representa un enfoque ingenuo basado en observaciones locales codiciosas de cada flujo de trabajo sin tener en cuenta todos los flujos de trabajo. En los experimentos que siguen, todos los resultados se promediaron en 20 ensayos y para ayudar a normalizar los efectos de la aleatorización utilizada durante la GA, cada ensayo comenzó leyendo en datos preinicializados del disco. En la Tabla 1 enumeramos nuestros parámetros experimentales. En la Figura 3 mostramos los resultados de ejecutar nuestro GA contra las tres alternativas candidatas. El eje X muestra el número de flujos de trabajo escalados hasta 1000, y el eje Y muestra el valor comercial agregado para todos los flujos de trabajo. Como se puede ver, la GA produce constantemente el mayor valor comercial, incluso a medida que crece el número de flujos de trabajo;Con 1000 flujos de trabajo, el GA produce una mejora del 115% sobre la siguiente alternativa.(Tenga en cuenta que aunque estamos optimizando con la métrica de valor comercial que definimos anteriormente, los algoritmos genéticos pueden converger hacia el valor óptimo de cualquier métrica, siempre que la función de evaluación pueda medir consistentemente un valor de cromosomas con esa métrica). Como se esperaba, el algoritmo codicioso funciona muy mal porque hace el peor trabajo al equilibrar la carga: todos los procesos comerciales para un tipo de servicio determinado se asignan a un solo servidor (el anunciado para tener el tiempo de finalización más rápido) y como más procesos comercialesLlega, el rendimiento del proveedor se degrada linealmente. El esquema redondo de robín inicialmente es superado por el esquema aleatorio de forma proporcional hasta alrededor de 120 flujos de trabajo (como se muestra en el gráfico ampliado de la Figura 4), pero a medida que aumenta el número de flujos de trabajo, el esquema de round-roBin gana consistentemente sobre la proporción aleatoria. La razón es que aunque el esquema de proporción aleatoria asigna procesos comerciales a los proveedores proporcionalmente de acuerdo con los tiempos de finalización anunciados (que es una medida del poder del proveedor de servicios), incluso los mejores proveedores eventualmente alcanzarán una concurrencia máxima del mundo real paraEl gran -2000 -1000 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 AggregateBusinessValueArsAlsallWorkwork Flows Número total de flujos de trabajo de flujos de trabajo puntajes de valor comercial de algoritmos de algoritmo genético Round Round Round Round Proportionalmente Figura 3: Pulinos de valor comercial neto de los diferentes algoritmos de programación.-500 0 500 1000 1500 2000 2500 3000 3500 4000 0 50 100 150 200AggregateBusiness ValueAcrossallWorkflows Número total de flujos de trabajo Puntuaciones de valor comercial de los algoritmos de programación Algoritmo genético Round Robin Robin Camediario Figura 4: Aumento de la región más izquierda en la Figura 3. Número de flotas de trabajo Fultos de trabajoque estamos considerando. Para una gran cantidad de flujos de trabajo, el esquema de redondeo puede equilibrar mejor la carga en todos los proveedores de servicios. Para comprender mejor el comportamiento resultante de las tareas de programación, mostramos los resultados de finalización del flujo de trabajo en las Figuras 5, 6 y 7 para los flujos de trabajo de 100, 500 y 900, respectivamente. Estas cifras muestran el porcentaje de flujos de trabajo que tienen éxito (pueden completarse con su límite de QoS), aceptables (pueden completarse dentro de κ = 3 veces su límite de QoS) y fallidos (no se puede completar dentro de κ = 3 veces su límite de QoS). La GA produce constantemente el mayor porcentaje de flujos de trabajo exitosos (lo que resulta en valores comerciales más altos para el conjunto de flujos de trabajo agregados). Además, el esquema de round-robin produce mejores resultados que el proporsional aleatorio para una gran cantidad de flujos de trabajo, pero no funciona tan bien como la GA. En la Figura 8 graficamos el MakePan resultante de los mismos experimentos anteriores. MakePan es una métrica tradicional de la comunidad de programación de empleo que mide el tiempo transcurrido para que el último trabajo complete. Si bien es útil, no captura la métrica de valor comercial de alto nivel con la que estamos optimizando. De hecho, el Makepan es ajeno al hecho de que proporcionamos múltiples niveles de finalización (exitosos, aceptables y fallidos) y asigna puntajes de valor comercial en consecuencia. Para completar, observamos que la GA proporciona el Makepan más rápido, pero el algoritmo Round Robin lo coincide. El GA produce mejores valores comerciales (como se muestra en la Figura 3) porque es capaz de buscar el espacio de la solución para encontrar mejores asignaciones que produzcan flujos de trabajo más exitosos (como se muestra en las Figuras 5 a 7). También observamos el efecto de los algoritmos de programación al equilibrar la carga. La Figura 9 muestra el porcentaje de proveedores de servicios a los que se accedió mientras se ejecutaban los flujos de trabajo. Como se esperaba, el algoritmo codicioso siempre llega a un proveedor de servicios;Por otro lado, el algoritmo de remolino redondo es el más rápido para difundir el negocio 33 FLUILES DE TRABAJO DEL COMENTARIO DEL COMENTARIO EXPERIMENTAL 5 a 1000 por flujo de trabajo Uniforme Aleatorio: 1 - 10 Tipos de servicio 10 Proveedores de servicios por tipo de servicio Uniforme aleatorio: 1 - 10 WorkflowQOS Objetivo Uniforme aleatorio: 10-30 segundos Tiempo de finalización del proveedor de servicios (α) Uniforme aleatorio: 1 - 12 segundos Proveedor de servicios Máxima concurrencia (β) uniforme aleatorio: 1 - 12 Proveedor de servicios Coeficiente de degradación (γ) uniforme: 0.1 - 0.9 comercialValor para flujos de trabajo exitosos uniformes aleatorios: 10 - 50 puntos Valor comercial para flujos de trabajo aceptables Uniformes aleatorios: 0 - 10 puntos Valor comercial para flujos de trabajo fallidos Uniformes aleatorios: -10 - 0 puntos GA: Número de padres 20 Ga: Número de niños 80 Ga:Número de generaciones 1000 Tabla 1: Los parámetros experimentales fallaron aceptables (completados pero no dentro de QoS) exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRandProportionAlgreedyGeneticG porcentaje de flujo de flujo de flujo de flujo de flujo de trabajo, 100 flujos de trabajo Figura 5: Comportamiento de flujo de trabajo para 100flujos de trabajo. Fallido aceptable (completado pero no dentro de QoS) exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinrandProportionAlgreedyGeneticG porcentaje de flujos de trabajo de flujo de trabajo, 500 flujos de trabajo Figura 6: Comportamiento de flujo de trabajo para 500 flujos de trabajo. Falló aceptable (completado pero no dentro de QoS) exitoso (completado dentro de QoS) 0% 20% 40% 60% 80% 100% RoundRobinrandProportionAlgreedyGeneticG porcentaje de flujos de flujo de trabajo de flujo de trabajo, 500 flujos de trabajo Figura 7: Comportamiento de flujo de trabajo para 900 flujos de trabajo.0 50 100 150 200 250 300 0 200 400 600 800 1000 HACHEPAN [segundos] Número de flujos de trabajo Tiempo de finalización máximo para todos los flujos de trabajo Algoritmo genético Round Round Robin Proporto Alegado Figura 8: Tiempo máximo de finalización para todos los flujos de trabajo. Este valor es la métrica Makepan utilizada en la investigación de programación tradicional. Aunque es útil, el MakePan no tiene en cuenta la puntuación del valor comercial en nuestro dominio de problemas.procesos. La Figura 10 es el porcentaje de proveedores de servicios accedidos (es decir, el porcentaje de proveedores de servicios representados en la Figura 9) que tenían más procesos comerciales asignados que su concurrencia máxima anunciada. Por ejemplo, en el algoritmo codicioso solo se utiliza un proveedor de servicios, y este proveedor se satura rápidamente. Por otro lado, el algoritmo de proporción aleatoria utiliza muchos proveedores de servicios, pero debido a que los procesos comerciales se asignan proporcionalmente con más tareas que van a los mejores proveedores, existe una tendencia a que un porcentaje menor de proveedores se sature. Para completar, mostramos el rendimiento del algoritmo genético en sí en la Figura 11. El algoritmo escala linealmente con un número creciente de flujos de trabajo. Observamos que los algoritmos redondos de robín, proporción aleatoria y codicioso terminados en 1 segundo incluso para la mayor configuración de flujo de trabajo. Sin embargo, creemos que el beneficio de encontrar puntajes de valor comercial mucho más altos justifica el tiempo de ejecución de la GA;Además, esperaríamos que el tiempo de ejecución mejore con el ajuste del software, así como con una computadora más rápido que nuestra PC estándar.5. Conclusión Los procesos comerciales dentro de los flujos de trabajo pueden orquestarse para acceder a los servicios web. En este documento, analizamos el aprovisionamiento de servicios de múltiples niveles, donde las solicitudes de servicio web a los tipos de servicios se pueden asignar a diferentes proveedores de servicios. El problema resultante es que para admitir una gran cantidad de flujos de trabajo, la asignación del proceso comercial al proveedor de servicios web debe ser inteligente. Utilizamos una métrica de valor comercial para medir el BE34 0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de los servicios de servicio de servicios de flujos de trabajo de flujos de trabajo utilizados algoritmo genético RODUD RODER ROBIN PROPORTIONAL DE AGUACIÓN AGUACIÓN Figura 9: El porcentaje de proveedores de servicios utilizados durante las ejecuciones de carga de trabajo. El algoritmo codicioso siempre llega al proveedor de servicios, mientras que el algoritmo de robin redondeo extiende las solicitudes de manera uniforme entre los proveedores.0 0.2 0.4 0.6 0.8 1 0 200 400 600 800 1000 Porcentaje de servicios de servicios de servicio Número de flujos de trabajo Proveedores de servicios Saturados Algoritmo Genético Round Robin Aleatorio Proporción codiciosa Figura 10: El porcentaje de proveedores de servicios que están saturados entre aquellos proveedores que fueron utilizado (es decir, porcentaje de laProveedores de servicios representados en la Figura 9). Un proveedor de servicios saturados es aquel cuya carga de trabajo es mayor que su concurrencia máxima anunciada.0 5 10 15 20 25 0 200 400 600 800 1000 RunningtimeSeconds Total Número de flujos de trabajo Tiempo de ejecución del algoritmo genético GA Tiempo de ejecución Figura 11: Tiempo de ejecución del algoritmo genético.Haviour de los flujos de trabajo que cumplen o falla los valores de QoS, y optimizamos nuestra programación para maximizar el valor comercial agregado en todos los flujos de trabajo. Dado que el espacio de solución de las asignaciones de programador es exponencial, utilizamos un algoritmo de búsqueda genética para buscar el espacio y converger hacia el mejor horario. Con una configuración predeterminada para todos los parámetros y el uso de nuestra puntuación de valor comercial, la GA produjo una mejora del valor comercial de hasta 115% en el siguiente algoritmo mejor. Finalmente, debido a que un algoritmo genético convergerá hacia el valor óptimo utilizando cualquier métrica (incluso otra cosa que la métrica de valor comercial que utilizamos), creemos que nuestro enfoque tiene un fuerte potencial para continuar el trabajo. En el trabajo futuro, buscamos adquirir rastros del mundo real de las instancias de servicio web para obtener mejores estimaciones de las garantías de acuerdo de servicio, aunque esperamos que tales garantías entre los proveedores y sus consumidores no estén generalmente disponibles para el público. También veremos otras métricas de QoS, como la CPU y el uso de E/S. Por ejemplo, podemos analizar los costos de transferencia con ancho de banda variable, latencia, tamaño de datos y distribución de datos. Además, esperamos mejorar nuestro algoritmo genético y compararlo con más alternativas de programador. Finalmente, dado que nuestro trabajo es complementario al trabajo existente en la coreografía de servicios web (porque confiamos en los flujos de trabajo preconfigurados), buscamos integrar nuestro enfoque con los sistemas de flujo de trabajo de servicios web disponibles expresados en BPEL.6. Referencias [1] A. Ankolekar, et al. Daml-S: Marcado semántico para servicios web, en Proc.del Simposio de Trabajo Semántico de Intl, 2001. [2] L. Davis. Programación de la tienda de empleo con algoritmos genéticos, en Proc.de la Conferencia INTL sobre algoritmos genéticos, 1985. [3] H.-L.Fang, P. Ross y D. Corne. Un prometedor enfoque de algoritmo genético para la programación de la tienda de empleo, la reprogramación y los problemas de programación de tallas abiertas, en Proc.En la 5ta Conferencia INTL sobre algoritmos genéticos, 1993. [4] M. Gary y D. Johnson. Computadoras e intratabilidad: una guía de la teoría de NP-Completitud, Freeman, 1979. [5] J. Holland. Adaptación en sistemas naturales y artificiales: un análisis introductorio con aplicaciones a biología, control e inteligencia artificial, MIT Press, 1992. [6] D. Goldberg. Algoritmos genéticos en búsqueda, optimización y aprendizaje automático, Kluwer Academic Publishers, 1989. [7] Procesos comerciales en un mundo de servicios web, www-128.ibm.com/developerworks/ Webservices/biblioteca/ws-bpelwp/.[8] G. Soundararajan, K. Manassiev, J. Chen, A. Goel y C. Amza. Bases de datos de back-end en clústeres de servidor de contenido dinámico compartido, en Proc.de la Conferencia IEEE INTL sobre computación autónoma, 2005. [9] B. Srivastava y J. Koehler. Composición del servicio web Soluciones actuales y problemas abiertos, ICAP, 2003. [10] B. Urgaonkar, P. Shenoy, A. Chandra y P. Goyal. Aprovisionamiento dinámico de aplicaciones de Internet de varios niveles, en Proc.de la Conferencia IEEE INTL sobre computación autónoma, 2005. [11] L. Zeng, B. Benatallah, M. Dumas, J. Kalagnanam y Q. Sheng. Composición de servicios web impulsados por la calidad, en Proc.de la Conferencia WWW, 2003. 35