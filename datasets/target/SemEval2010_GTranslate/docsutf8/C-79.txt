Un enfoque de la capa cruzada para el descubrimiento y la distribución de recursos en las redes móviles ad-hoc Chaiporn Jaikaeo Ingeniería de la Computación de la Universidad Kasetsart, Tailandia (+662) 942-8555 ext 1424 cpj@cpe.ku.ac.th Xiang Cao Informática y ciencias de la información Universidad de deDelaware, EE. UU. (+1) 302-831-1131 cao@cis.udel.edu chien-chung Shen Computer and Information Sciences University of Delaware, EE. UU. (+1) 302-831-1951 cshen@cis.udel.edu Resumen estoPaper describe un enfoque de capa cruzada para diseñar un sistema P2P robusto a través de redes ad-hoc móviles. El diseño se basa en primitivas funcionales simples que permiten el enrutamiento tanto en P2P como en las capas de red que se integran para reducir la sobrecarga. Con estas primitivas, el documento aborda varias técnicas de equilibrio de carga. También se presentan resultados de simulación preliminares. Categorías y descriptores de sujetos c.2.4 [Sistemas distribuidos]: Aplicaciones distribuidas Términos generales Algoritmos y diseño 1. INTRODUCCIÓN Las redes ad-hoc móviles (MANET) consisten en nodos móviles que establecen de forma autónoma la conectividad a través de comunicaciones inalámbricas de múltiples saltos. Sin confiar en cualquier infraestructura de red existente y preconfigurada o control centralizado, las manets son útiles en situaciones en las que se requieren instalaciones de comunicación improvisadas, como las comunicaciones de campo de batalla y las misiones de alivio de desastres. A medida que las aplicaciones de Manet exigen el procesamiento colaborativo y el intercambio de información entre los nodos móviles, el descubrimiento y la distribución de recursos (servicio) se han convertido en capacidades indispensables. Un enfoque para diseñar esquemas de descubrimiento y distribución de recursos sobre Manets es construir un sistema de pares (P2P) (o una superposición) que organiza pares del sistema en una estructura lógica, además de la topología de la red real. Sin embargo, la implementación de tales sistemas P2P sobre Manets puede dar lugar a una gran cantidad de operaciones de inundación desencadenadas por el proceso de enrutamiento reactivo o la ineficiencia en términos de utilización de ancho de banda en esquemas de enrutamiento proactivo. De cualquier manera, la construcción de una superposición creará potencialmente un problema de escalabilidad para Manets a gran escala. Debido a la naturaleza dinámica de Manets, los sistemas P2P deben ser robustos al ser escalables y adaptables a los cambios de topología. Estos sistemas también deben proporcionar formas eficientes y efectivas para que los compañeros interactúen, así como otras características específicas de aplicaciones deseables. Este documento describe un paradigma de diseño que utiliza las siguientes dos primitivas funcionales para diseñar esquemas de descubrimiento y distribución de recursos robustos sobre Manets.1. Retroalimentación positiva/negativa. Los paquetes de consulta se utilizan para explorar una ruta a otros pares que tienen recursos de interés. Opcionalmente, los paquetes de publicidad se envían a las rutas publicitarias de otros pares sobre los recursos disponibles. Al atravesar una ruta, estos paquetes de control miden la bondad de la ruta y dejan información de retroalimentación en cada nodo en el camino para guiar los paquetes de control posteriores a las direcciones apropiadas.2. Caminata aleatoria esporádica. A medida que la topología de la red y/o la disponibilidad de recursos cambian, las rutas existentes pueden volverse obsoletas mientras que mejor rutas están disponibles. Sporadic Random Walk permite que un paquete de control explore diferentes caminos y descubra de manera oportunista nuevas y/o mejores rutas. Adoptando este paradigma, todo el sistema Manet P2P funciona como una colección de entidades autónomas que consisten en diferentes tipos de paquetes de control, como los paquetes de consulta y publicidad. Estos paquetes funcionan en colaboración, pero indirectamente, para lograr tareas comunes, como el descubrimiento de recursos, el enrutamiento y el equilibrio de carga. Con la colaboración entre estas entidades, un sistema MANET P2P puede aprender la dinámica de la red por sí misma y ajustar su comportamiento en consecuencia, sin la sobrecarga de organizar pares en una superposición. El resto de este documento está organizado de la siguiente manera. El trabajo relacionado se describe en la siguiente sección. La Sección 3 describe el esquema de descubrimiento de recursos. La Sección 4 describe el esquema de distribución de recursos. El esquema de invalidación de réplica se describe en la Sección 5, seguido de la evaluación del desempeño de TI en la Sección 6. La Sección 7 concluye el documento.2. Trabajo relacionado para Manets, los sistemas P2P se pueden clasificar en función del principio de diseño, en enfoques en capas y en capas cruzadas. Un enfoque en capas adopta una solución [1] similar a P2P, donde el descubrimiento de recursos se facilita como un protocolo de capa de aplicación y los protocolos de enrutamiento MANET subyacentes son entregados. Por ejemplo, Konark [2] hace uso de un protocolo de multidifusión subyacente de modo que los proveedores de servicios y los consultores anuncian y los servicios de búsqueda a través de un grupo de multidifusión predefinido, respectivamente. Proem [3] es una plataforma de computación móvil de alto nivel para sistemas P2P sobre Manets. Define un protocolo de transporte que se encuentra en la parte superior de la pila TCP/IP existente, por lo que depende de un protocolo de enrutamiento existente para operar. Con un control limitado sobre cómo se enrutan los paquetes de control y datos en la red, es difícil evitar la ineficiencia de los protocolos de enrutamiento de uso general que a menudo son reactivos y basados en inundaciones. En contraste, los enfoques de capas cruzadas se basan en su propio mecanismo de enrutamiento o aumenta los algoritmos de enrutamiento de Manet existentes para respaldar el descubrimiento de recursos.7ds [4], que es el trabajo pionero que implementa el sistema P2P en dispositivos móviles, explota la localidad de datos y la movilidad de los nodos a los datos de difusión de una manera de un solo salto. Por lo tanto, se puede dar como resultado una larga latencia de búsqueda, ya que un nodo 7DS puede obtener datos de interés solo si el nodo que contiene los datos está en su cobertura de radio. Mohan et al.[5] propone un algoritmo de descubrimiento de servicio adaptativo que combina modelos de empuje y tirón. Específicamente, un proveedor de servicios/Querier transmite publicidad/consulta solo cuando el número de nodos que se publicita o consulta, que se estima por los paquetes de control recibidos, está por debajo de un umbral durante un período de tiempo. De esta manera, el número de paquetes de control en la red está limitado, lo que proporciona una buena escalabilidad. A pesar del mecanismo para reducir los paquetes de control, la sobrecarga alta puede ser inevitable, especialmente cuando hay muchos clientes que intentan localizar diferentes servicios, debido al hecho de que el algoritmo se basa en las inundaciones, para la replicación de recursos, Yin y Cao [6] y diseño y y y y y y a Cao yEvaluar técnicas de almacenamiento de almacenamiento cooperativo para Manets. El almacenamiento en caché, sin embargo, se realiza reactivamente por nodos intermedios cuando un Querier solicita datos de un servidor. Los elementos o recursos de datos nunca se introducen en otros nodos de manera proactiva. Thanedar et al.[7] propone un esquema de replicación de contenido liviano utilizando una técnica de anillo de expansión. Si un servidor detecta el número de solicitudes excede un umbral dentro de un período de tiempo, comienza a replicar sus datos en nodos capaces de almacenar réplicas, cuyos recuentos de lúpulo desde el servidor son de ciertos valores. Dado que la replicación de datos se desencadena solo por la frecuencia de solicitud, es posible que haya réplicas creadas innecesariamente en un alcance grande a pesar de que solo los nodos dentro de un rango pequeño solicitan estos datos. Nuestro mecanismo de replicación de recursos propuesto, en contraste, intenta replicar un elemento de datos en las áreas apropiadas, en lugar de un área grande alrededor del servidor, donde el elemento se solicita con frecuencia.3. Descubrimiento de recursos proponemos un esquema de descubrimiento de recursos híbridos en capas híbridas que se basa en las múltiples interacciones de la consulta, la respuesta y los paquetes de publicidad. Suponemos que cada recurso está asociado con un ID1 único. Inicialmente, cuando un nodo quiere descubrir un recurso, implementa paquetes de consulta, que llevan la ID de recurso correspondiente y explora aleatoriamente la red para buscar el recurso solicitado. Al recibir dicho paquete de consulta, el nodo genera un paquete de respuesta que proporciona el recurso solicitado. Los paquetes de publicidad también se pueden usar para informar de manera proactiva a otros nodos sobre qué recursos están disponibles en cada nodo. Además de descubrir la identidad del nodo que proporciona el recurso solicitado, también puede ser necesario descubrir una ruta que conduce a este nodo para una interacción adicional. Para permitir que los nodos intermedios tomen una decisión sobre dónde reenviar los paquetes de consulta, cada nodo mantiene dos tablas: vecino 1 La suposición de ID única se hace para la brevedad en la exposición, y los recursos podrían especificarse a través de afirmaciones de valores de atributos.tabla y tabla de feromona. La tabla vecina mantiene una lista de todos los vecinos actuales obtenidos a través de un protocolo de descubrimiento de vecinos. La tabla de feromona mantiene el mapeo de una identificación de recursos y una identificación de vecinos a un valor de feromona. Esta tabla está inicialmente vacía y se actualiza por un paquete de respuesta generado por una consulta exitosa. La Figura 1 ilustra un ejemplo de una mesa vecina y una tabla de feromona mantenida por el nodo A que tiene cuatro vecinos. Cuando Node A recibe un paquete de consulta que busca un recurso, toma una decisión a qué vecino debe reenviar el paquete de consulta calculando la conveniencia de cada uno de los vecinos que el mismo paquete de consulta no ha visitado antes. Para una identificación de recursos, la conveniencia de elegir un vecino N, δ (R, N), se obtiene del valor de feromonas de la entrada cuyos campos de ID de vecinos y de recursos son N y R, respectivamente. Si no existe dicha entrada en la tabla de feromona, δ (R, N) se establece en cero. Una vez que se han calculado las deseos de todos los próximos saltos válidos, se normalizan para obtener la probabilidad de elegir a cada vecino. Además, también se asigna una pequeña probabilidad a aquellos vecinos con cero deseabilidad para ejercer la caminata aleatoria esporádica primitiva. Según estas probabilidades, se selecciona un próximo salto para reenviar el paquete de consulta. Cuando un paquete de consulta encuentra un nodo con un recurso satisfactorio, se devuelve un paquete de respuesta al nodo de consulta. El paquete de respuesta de regreso también actualiza la tabla de feromona en cada nodo en su viaje de regreso al aumentar el valor de feromona en la entrada cuyos campos de identificación de recursos y ID de vecinos coinciden con la ID del recurso descubierto y el salto anterior, respectivamente. Si tal entrada no existe, se agrega una nueva entrada a la tabla. Por lo tanto, los paquetes de consulta posteriores que buscan el mismo recurso, al encontrar esta información de feromonas, se guían hacia el mismo destino con una pequeña probabilidad de tomar una ruta alternativa. Dado que el esquema de descubrimiento híbrido no se basa en un protocolo de enrutamiento de Manet ni organiza nodos en una superposición lógica, los paquetes de consultas deben atravesar la topología de la red real. En redes densas, los grados nodales relativamente grandes pueden tener impactos potenciales en este mecanismo de exploración aleatoria. Para abordar este problema, el esquema híbrido también incorpora publicidad proactiva además de la consulta reactiva. Para realizar publicidad proactiva, cada nodo implementa periódicamente un paquete de publicidad que contiene una lista de sus ID de recursos disponibles. Estos paquetes se alejarán del nodo publicitario de manera aleatoria hasta un número limitado de lúpulo y anunciarán información de recursos a los nodos circundantes de la misma manera que los paquetes de respuesta. En el esquema híbrido, un aumento de la feromona sirve como una retroalimentación positiva que indirectamente guía paquetes de consulta que buscan recursos similares. Intuitivamente, la cantidad de feromona aumentada es inversamente proporcional a la distancia que el paquete de respuesta ha recorrido de regreso, y otras métricas, como la calidad del recurso, también podrían contribuir a esta cantidad. Cada nodo también realiza una retroalimentación negativa implícita para los recursos que no han recibido comentarios positivos durante algún tiempo al disminuir regularmente la feromona en todas sus entradas de la tabla de feromona a lo largo del tiempo. Además, la feromona puede reducirse mediante una respuesta negativa explícita, por ejemplo, un paquete de respuesta que regresa de un nodo que no está dispuesto a proporcionar un recurso debido a la carga de trabajo excesiva. Como resultado, el equilibrio de carga se puede lograr mediante retroalimentación positiva y negativa. Un nodo que sirve demasiados nodos puede devolver menos respuestas a los paquetes de consulta o generar respuestas negativas.2 La tercera conferencia internacional sobre tecnología, aplicaciones y sistemas móviles - Mobility 2006 Figura 1: Ejemplo que ilustra las tablas de vecinos y feromonas mantenidas por el nodo A: (a) conectividad inalámbrica alrededor de una muestra que actualmente tiene cuatro vecinos, (b) como vecinos de la mesa vecina, y (c) una posible tabla de feromona de una Figura 2: Escenarios de muestra que ilustran los tres mecanismos que admiten el equilibrio de carga: (a) Replicación de recursos, (b) Retocatación de recursos y (c) División de recursos 4. Distribución de recursos Además del descubrimiento de recursos, un nodo de consulta generalmente intenta acceder y recuperar el contenido de un recurso después de un descubrimiento exitoso. En ciertas situaciones, también es beneficioso hacer que un recurso esté disponible en múltiples nodos cuando el recurso puede reubicarse y/o replicarse, como los archivos de datos. Además, en Manets, debemos considerar no solo la cantidad de carga manejada por un proveedor de recursos, sino también la carga en esos nodos intermedios que se encuentran en las rutas de comunicación entre el proveedor y otros nodos también. Por lo tanto, describimos un esquema de distribución de recursos híbridos, captura cruzada para lograr el equilibrio de carga incorporando las funcionalidades de reubicación de recursos, replicación de recursos y división de recursos.4.1 Replicación de recursos múltiples réplicas de un recurso en la red ayudan a prevenir un solo nodo, así como nodos que lo rodean, por una gran cantidad de solicitudes y transferencias de datos. Un ejemplo es cuando un nodo ha obtenido un archivo de datos de otro nodo, el nodo solicitante y los nodos intermedios pueden almacenar en caché el archivo y comenzar a compartir ese archivo con otros nodos circundantes de inmediato. Además, los recursos replicables también se pueden replicar proactivamente en otros nodos que se encuentran en ciertas áreas estratégicas. Por ejemplo, para ayudar a los nodos a encontrar un recurso rápidamente, podríamos replicar el recurso para que sea accesible mediante una caminata aleatoria para un número específico de lúpulo desde cualquier nodo con cierta probabilidad, como se muestra en la Figura 2 (a). Para realizar esta característica, el esquema de distribución de recursos híbridos emplea un tipo diferente de paquete de control, llamado paquete de replicación de recursos, que es responsable de encontrar un lugar apropiado para crear una réplica de un recurso. Un paquete de replicación de recursos del Tipo R es implementado por un nodo que proporciona el recurso R en sí. A diferencia de un paquete de consulta que sigue una feromona más alta aguas arriba hacia un recurso que está buscando, un paquete de replicación de recursos tiende a ser impulsado de recursos similares al moverse aguas abajo hacia la feromona más débil. Cuando un paquete de replicación de recursos se encuentra en un área con feromona suficientemente baja, toma una decisión si debe continuar explorando o retrocediendo. La decisión depende de condiciones como la carga de trabajo actual y/o la energía restante del nodo que se está visitando, así como la popularidad del recurso en sí.4.2 Reubicación de recursos En ciertas situaciones, se puede requerir un recurso para transferir de un nodo a otro. Por ejemplo, es posible que un nodo ya no desee poseer un archivo debido a la escasez de espacio de almacenamiento, pero no puede simplemente eliminar el archivo ya que otros nodos aún pueden necesitarlo en el futuro. En este caso, el nodo puede optar por crear réplicas del archivo mediante el mecanismo de replicación de recursos antes mencionado y luego eliminar su propia copia. Consideremos una situación en la que la mayoría de los nodos que solicitan un recurso se encuentran lejos de un proveedor de recursos, como se muestra en la parte superior de la Figura 2 (b). Si el recurso R es reubicado, se prefiere reubicarse en otra área que está más cerca de esos nodos, similar a la parte inferior de la misma figura. Por lo tanto, el ancho de banda de la red se utiliza de manera más eficiente. La tercera conferencia sobre tecnología móvil, aplicaciones y sistemas - Mobility 2006 3 El esquema de distribución de recursos híbridos incorpora algoritmos de reubicación de recursos que se adaptan a las solicitudes de los usuarios y tienen como objetivo reducir la sobrecarga de comunicación. Específicamente, siguiendo el mismo concepto de mantenimiento de feromona, el esquema de distribución de recursos híbridos introduce otro tipo de feromona que corresponde a las solicitudes de los usuarios, en lugar de los recursos. Este tipo de feromona, llamada solicitud de feromona, está configurada por paquetes de consulta que están en sus fases de exploración (no devueltas) para guiar un recurso a una nueva ubicación.4.3 División de recursos Ciertos tipos de recursos se pueden dividir en subresourios más pequeños (por ejemplo, un archivo grande que se divide en archivos más pequeños) y se distribuye a múltiples ubicaciones para evitar sobrecargar un solo nodo, como se muestra en la Figura 2 (c). El esquema de distribución de recursos híbridos incorpora un mecanismo de división de recursos que opera en una capa delgada justo encima de todos los otros mecanismos descritos anteriormente. El mecanismo de la división de recursos es responsable de descomponer los recursos divisibles en subcreSources, y luego agrega una palabra clave adicional para distinguir cada subconurento entre sí. Por lo tanto, cada uno de estos subcontratos será visto por los otros mecanismos como un solo recurso que puede ser descubierto, replicado y reubicado de forma independiente. El mecanismo de la división de recursos también es responsable de combinar datos de estos subconocentes juntos (por ejemplo, fusionar piezas de un archivo) y entregar el resultado final a la aplicación.5. Réplica Invalidación Aunque las réplicas mejoran la accesibilidad y la carga de equilibrio, la invalidación de la réplica se convierte en un problema crítico cuando los nodos almacenados en caché los recursos actualizables pueden actualizar simultáneamente sus propias réplicas, que hace que las réplicas de otros nodos obsoletas. La mayoría de las soluciones existentes al problema de invalidación de la réplica imponen restricciones de que solo la fuente de datos podría realizar actualizaciones e invalidar otras réplicas, o recurrir a inundaciones en toda la red que resulta en un fuerte tráfico de red y conduce a un problema de escalabilidad, o ambas. La falta de infraestructura respalda y los cambios de topología frecuentes en Manets desafían aún más el problema. Aplicamos el mismo paradigma de capa cruzada a la invalidación de réplicas en Manets, lo que permite actualizaciones concurrentes realizadas por múltiples réplicas. Para coordinar las actualizaciones concurrentes y difundir las réplicas de invalidaciones, una infraestructura especial, llamada malla o malla de validación para abreviar, se mantiene adaptativamente entre los nodos que poseen réplicas válidas de un recurso. Una vez que un nodo ha actualizado su réplica, un paquete de invalidación solo se difundirá sobre la malla de validación para informar a otros nodos de posesión de réplicas que sus réplicas se vuelven inválidas y deben eliminarse. La estructura (topología) de la malla de validación sigue evolucionando (1) cuando los nodos solicitan y almacenan en caché un recurso, (2) cuando los nodos actualizan sus respectivas réplicas e invalidan otras réplicas, y (3) cuando los nodos se mueven. Para acomodar la dinámica, nuestro esquema integra los componentes de la inteligencia del enjambre para mantener adaptativamente la malla de validación sin confiar en cualquier protocolo de enrutamiento MANET subyacente. En particular, el esquema tiene en cuenta las actualizaciones concurrentes iniciadas por múltiples nodos para garantizar la consistencia entre las réplicas. Además, el número de versión se usa para distinguir las réplicas nuevas de las viejas al invalidar cualquier réplica obsoleta. Los resultados de la simulación muestran que el esquema propuesto facilita efectivamente las actualizaciones de réplicas concurrentes y realiza eficientemente la invalidación de réplicas sin incurrir en inundaciones en toda la red. La Figura 3 muestra la idea de la malla de validación que mantiene la conectividad entre los nodos que contienen réplicas válidas de un recurso para evitar inundaciones en toda la red al invalidar las réplicas. Figura 3: Ejemplos que muestran el mantenimiento de la malla de validación Hay ocho nodos en la red de muestra, y comenzamos solo con el nodo A que contiene el archivo válido, como se muestra en la Figura 3 (a). Más adelante, el nodo G emite un paquete de consulta para el archivo y finalmente obtiene el archivo de A Via nodos B y D. Dado que los nodos intermedios pueden almacenar en caché los datos reenviados, los nodos B, D y G ahora mantendrá réplicas válidas del archivo. Como resultado, se establece una malla de validación entre los nodos A, B, D y G, como se muestra en la Figura 3 (b). En la Figura 3 (c), otro nodo, H, ha emitido un paquete de consulta para el mismo archivo y lo obtuvo del caché BS del nodo a través del nodo E. En este punto, seis nodos contienen réplicas válidas y están conectados a través de la malla de validación. Ahora asumimos que el nodo G actualiza su réplica del archivo e informa a los otros nodos enviando un paquete de invalidación a través de la malla de validación. En consecuencia, todos los demás nodos, excepto G, eliminan sus réplicas del archivo de su almacenamiento y la malla de validación se desgarra. Sin embargo, la feromona de reenvío de la consulta, según lo denotado por las flechas punteadas en la Figura 3 (d), se configura en estos nodos a través de las rutas inversas en las que los paquetes de invalidación han recorrido, de modo que las solicitudes futuras para este archivo se reenviarán al nodo G.En la Figura 3 (e), el nodo H hace una nueva solicitud para el archivo nuevamente. Esta vez, su paquete de consulta sigue la feromona hacia el nodo G, donde se puede obtener el archivo actualizado. Finalmente, se establece una nueva malla de validación sobre los nodos G, B, D, E y H. Para mantener una malla de validación entre los nodos que contienen réplicas válidas, una de ellas está designada como el nodo focal. Inicialmente, el nodo que posee originalmente los datos es el nodo focal. A medida que los nodos actualizan las réplicas, el nodo que dura (o más recientemente) actualiza una 4ª Conferencia Internacional sobre Tecnología Móvil, Aplicaciones y Sistemas - Mobility 2006 La réplica correspondiente asume el papel del nodo focal. También nombramos nodos, como G y H, que originan las solicitudes para replicar datos como clientes y nodos B, D y E que almacenan en caché localmente los datos como nodos de datos. Por ejemplo, en las Figuras 3 (a), 3 (b) y 3 (c), el nodo A es el nodo focal;En las Figuras 3 (d), 3 (e) y 3 (f), el nodo G se convierte en el nodo focal. Además, para acomodar nodos recién participantes y la movilidad de los nodos, el nodo focal inunda periódicamente la malla de validación con un paquete de mantenimiento de alas, para que los nodos que puedan escuchar este paquete se consideran parte de la malla de validación. Si un nodo que contiene una réplica válida/actualizada no escucha un paquete de Alive-Alive para un cierto intervalo de tiempo, implementará un paquete de búsqueda utilizando el mecanismo de descubrimiento de recursos descrito en la Sección 3 para encontrar otro nodo (punto de archivo adjunto) actualmente en la validaciónmalla para que pueda adjuntar. Una vez que se encuentra un punto de archivo adjunto, se devuelve un paquete de búsqueda_reply al nodo desconectado que originó la búsqueda. Los nodos intermedios que reenvían el paquete Search_reply también se convertirán en parte de la malla de validación. Para ilustrar el efecto de la movilidad del nodo, en la Figura 3 (f), el nodo H se ha movido a una ubicación donde no está conectado directamente a la malla. A través del mecanismo de descubrimiento de recursos, el nodo H se basa en un nodo intermedio F para conectarse a la malla. Aquí, el nodo F, aunque parte de la malla de validación, no contiene la réplica de datos y, por lo tanto, se denomina nodo no data. El cliente y el nodo de datos que siguen escuchando los paquetes Keep-Alive desde el nodo focal actúan como si estuvieran conteniendo una réplica válida, para que puedan responder a los paquetes de consulta, como el nodo B en la Figura 3 (c) respondiendo una solicitud desde el nodo H. Mientras un nodo desconectado que intenta descubrir un punto de fijación para volver a colocar a la malla, el nodo desconectado no puede responder a un paquete de consulta. Por ejemplo, en la Figura 3 (f), el nodo H no responde a ningún paquete de consulta antes de volver a colocar a la malla. Aunque la malla de validación proporciona una topología conceptual que (1) conecta todas las réplicas juntas, (2) coordina las actualizaciones concurrentes y (3) difunde los paquetes de invalidación, el problema técnico es cómo tal topología de malla podría mantenerse y evolucionar de manera efectiva y eficiente cuando ((a) Los nodos solicitan y almacenan en caché un recurso, (b) cuando los nodos actualizan sus respectivas réplicas e invalidan otras réplicas, y (c) cuando los nodos se mueven. Sin confiar en ningún protocolo de enrutamiento de Manet, las dos primitivas trabajan juntas para facilitar la búsqueda eficiente y el mantenimiento adaptativo.6. Evaluación del desempeño Hemos realizado experimentos de simulación utilizando el simulador Qualnet para evaluar el rendimiento del descubrimiento de recursos descrito, la distribución de recursos y los esquemas de invalidación de réplicas. Sin embargo, debido a la limitación del espacio, solo se informa el rendimiento de la réplica de invalidación. En nuestros experimentos, ochenta nodos se distribuyen uniformemente sobre un terreno de tamaño 1000 × 1000 m2. Cada nodo tiene un rango de comunicación de aproximadamente 250 m sobre un canal inalámbrico de 2 Mbps, utilizando IEEE802.11 como la capa MAC. Utilizamos el modelo de movilidad de punto aleatorio con un tiempo de pausa de 1 segundo. Los nodos pueden moverse a velocidades mínimas y máximas de 1 m/sy 5 m/s, respectivamente. La Tabla 1 enumera otras configuraciones de parámetros utilizadas en la simulación. Inicialmente, hay un nodo de servidor de recursos en la red. Dos nodos se recogen al azar cada 10 segundos como clientes. Cada β segundos, verificamos el número de nodos, n, que han recibido datos. Luego retomamos al azar los nodos MIN (γ, N) de ellos para iniciar la actualización de datos. Cada experimento se ejecuta durante 10 minutos. Tabla 1: Configuración de simulación HOP_LIMIT 10 Advertise_HOP_LIMIT 1 KeepAlive_INTERVAL 3 Second Num_Search 1 Advertise_Interval 5 Segundo Expiration_Interval 10 segundos Generación de consultas Tasa de generación de consultas 2 Consulta/ 10 Sec Máx # de actualización concurrente (γ) 2 frecuencia de actualización (β) 3s Evaluamos el rendimiento bajo bajo bajoDiferente velocidad de movilidad, la densidad, el número máximo de nodos de actualización concurrentes y la frecuencia de actualización utilizando dos métricas: • La sobrecarga promedio por actualización mide el número promedio de paquetes transmitidos por actualización en la red.• El retraso promedio por actualización mide cuánto tiempo lleva nuestro enfoque para finalizar una actualización en promedio. Todas las cifras que se muestran presentan los resultados con un intervalo de confianza del 70%. Figura 4: Overhead vs. Velocidad para 80 nodos Figura 5: Overhead versus densidad Figura 6: Overhead vs. Max #Actualizaciones de concurrencia Figura 7: Overhead vs. Freq. Figura 8: Retraso versus velocidad Figura 9: Retraso versus densidad La tercera conferencia sobre tecnología móvil, aplicaciones y sistemas - Movilidad 2006 5 Figura 10: Retraso vs. Actualizaciones máximas #Concurrentes Figura 11: Retraso frente a la frecuencia. Las Figuras 4, 5, 6 y 7 muestran la sobrecarga versus varios valores de parámetros. En la Figura 4, la sobrecarga aumenta a medida que aumenta la velocidad, lo que se debe al hecho de que a medida que aumenta la velocidad, los nodos salen de la malla con más frecuencia y enviarán más paquetes de búsqueda. Sin embargo, la sobrecarga no es alta, e incluso en la velocidad de 10 m/seg, la sobrecarga es inferior a 100 paquetes. En contraste, se espera que los paquetes sean más de 200 paquetes a varias velocidades cuando se usan inundaciones. La Figura 5 muestra que la sobrecarga casi sigue siendo la misma bajo varias densidades. Eso se atribuye solo a las inundaciones sobre la malla en lugar de toda la red. El tamaño de la malla no varía mucho en varias densidades, por lo que la sobrecarga no varía mucho. La Figura 6 muestra que la sobrecarga también casi sigue siendo la misma bajo varios números máximos de actualizaciones concurrentes. Eso es porque un nodo más solo significa una inundación más sobre la malla durante el proceso de actualización para que el impacto sea limitado. La Figura 7 muestra que si las actualizaciones ocurren con más frecuencia, la sobrecarga es más alta. Esto se debe a que las actualizaciones más rápidas ocurren, (1) habrá más mensaje de Keep_alive sobre la malla entre dos actualizaciones, y (2) los nodos salen de la malla con más frecuencia y enviarán más paquetes de búsqueda. Las Figuras 8, 9, 10 y 11 muestran el retraso versus varios valores de parámetros. De la Figura 8, sabemos que el retraso aumenta a medida que aumenta la velocidad, lo que se debe al hecho de que al aumentar la velocidad, los clientes saldrán fuera de la malla con mayor probabilidad. Cuando estos clientes quieran actualizar los datos, pasarán tiempo para buscar primero la malla. Cuanto más rápida sea la velocidad, más tiempo necesitan pasar los clientes para buscar en la malla. La Figura 9 muestra que el retraso se ve negativamente afectado por la densidad. El retraso disminuye ligeramente a medida que aumenta el número de nodos, debido al hecho de que cuantos más nodos en la red, más nodos reciben los paquetes de publicidad que ayuda al paquete de búsqueda a encontrar el objetivo para que disminuya el retraso de la actualización. La Figura 10 muestra que el retraso disminuye ligeramente a medida que aumenta el número máximo de actualizaciones concurrentes. Cuanto mayor sea el número máximo de actualizaciones concurrentes, más nodos se recogen para hacer la actualización. Luego, con mayor probabilidad, uno de estos nodos todavía está en malla y termina la actualización de inmediato (no es necesario buscar malla primero), lo que disminuye el retraso. La Figura 11 muestra cómo el retraso varía con la frecuencia de actualización. Cuando las actualizaciones ocurren con más frecuencia, el retraso será mayor. Debido a que cuanto menos frecuentemente, más nodos de tiempo en malla tienen que salir de la malla, entonces deben tomarse el tiempo para buscar en la malla cuando se actualizan, lo que aumenta el retraso. Los resultados de la simulación muestran que el esquema de invalidación de réplica puede reducir significativamente la sobrecarga con un retraso aceptable.7. Conclusión Para facilitar el descubrimiento y distribución de recursos sobre Manets, un enfoque es diseñar sistemas de pares (P2P) sobre Manets que construye una superposición organizando a los compañeros del sistema en una estructura lógica en la parte superior de la topología física de Manets. Sin embargo, la implementación de superposición sobre Manets puede dar lugar a una gran cantidad de operaciones de inundación desencadenadas por el proceso de enrutamiento o la ineficiencia en términos de uso de ancho de banda. Específicamente, el enrutamiento superpuesto se basa en los protocolos de enrutamiento de la capa de red. En el caso de un protocolo de enrutamiento reactivo, el enrutamiento en la superposición puede causar una gran cantidad de mensaje de descubrimiento de ruta inundado ya que la ruta de enrutamiento en cada paso de enrutamiento debe descubrirse a pedido. Por otro lado, si se adopta un protocolo de enrutamiento proactivo, cada par debe transmitir periódicamente los mensajes de control, lo que conduce a una mala eficiencia en términos de uso de ancho de banda. De cualquier manera, la construcción de una superposición potencialmente sufrirá el problema de escalabilidad. El documento describe un paradigma de diseño que utiliza las primitivas funcionales de la retroalimentación positiva/negativa y la caminata aleatoria esporádica para diseñar esquemas robustos de descubrimiento y distribución de recursos sobre Manets. En particular, el esquema ofrece las características del diseño de capas cruzadas de sistemas P2P, lo que permite que el proceso de enrutamiento tanto en el P2P como en las capas de red se integren para reducir la sobrecarga, (2) la escalabilidad y el soporte de movilidad, que minimizaEl uso de operaciones globales de inundación y combina adaptativamente la publicidad de recursos proactivos y el descubrimiento de recursos reactivos, y (3) equilibrio de carga, que facilita la replicación de recursos, la reubicación y la división para lograr el equilibrio de carga.8. Referencias [1] A. Oram, Peer-to-Peer: aprovechando el poder de las tecnologías disruptivas. Oreilly, marzo de 2000. [2] S. Helal, N. Desai, V. Verma y C. Lee, Konark - Un protocolo de descubrimiento y entrega de servicios para redes ad -hoc, en la tercera conferencia IEEE sobre redes de comunicación inalámbrica (WCNC), Nueva Orleans, Louisiana, 2003. [3] G. Krotuem, Proem: una plataforma de computación entre pares para redes ad-hoc móviles, en el middleware de taller de temas avanzados para la informática móvil, Alemania, 2001. [4] M. Papadopouli y H. Schulzrinne, un análisis de rendimiento de 7DS una herramienta de difusión de datos y captación previa para igual para los usuarios móvily premio de cartel).[5] U. Mohan, K. Almeroth y E. Belding-Royer, descubrimiento de servicios escalables en redes móviles ad-hoc, en la conferencia de redes IFIP, Atenas, Grecia, mayo de 2004. [6] L. Yin y G. Cao, Apoyando el almacenamiento en caché cooperativo en las redes ad hoc, en IEEE Infocom, 2004. [7] V. Thanedar, K. Almeroth y E. Belding-Royer, un esquema de replicación de contenido liviano para entornos ad-hoc móviles, en la conferencia de redes de iFIP,Atenas, Grecia, mayo de 2004. 6 La tercera conferencia internacional sobre tecnología móvil, aplicaciones y sistemas - Movilidad 2006