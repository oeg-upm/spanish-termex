Nash Equilibria in Graphical Games on Trees Revisited ∗ Edith Elkind University of Warwick Coventry, CV4 7AL, U.K. Leslie Ann Goldberg University of Warwick Coventry, CV4 7AL, U.K. Paul Goldberg University of Warwick Coventry, CV4 7AL, U.K. ABSTRACT Graphical games have been proposed asUn modelo teórico de juego de redes distribuidas a gran escala de agentes no cooperativos. Cuando el número de jugadores es grande, y el gráfico subyacente tiene un grado bajo, proporcionan una forma concisa de representar a los pagos de los jugadores. Recientemente se ha demostrado que el problema de encontrar equilibrios de Nash en un juego gráfico general de grado-3 con dos acciones por jugador está completo para el PPAD de la clase de complejidad, lo que indica que es poco probable que haya algún algoritmo de tiempo polinómico para este problema. En este artículo, estudiamos la complejidad de los juegos gráficos con dos acciones por jugador en árboles de grado límite. Este entorno fue considerado por primera vez por Kearns, Littman y Singh, quienes propusieron un algoritmo dinámico basado en programación que calcula todos los equilibrios NASH de tales juegos. El tiempo de ejecución de su algoritmo es exponencial, aunque los equilibrios aproximados se pueden calcular de manera eficiente. Más tarde, Littman, Kearns y Singh propusieron una modificación a este algoritmo que puede encontrar un único equilibrio de Nash en el tiempo polinomial. Mostramos que este algoritmo modificado es incorrecto: la salida no siempre es un equilibrio de Nash. Luego proponemos un nuevo algoritmo que se basa en las ideas de Kearns et al.y calcula todos los equilibrios NASH en tiempo cuadrático si el gráfico de entrada es una ruta, y en el tiempo polinomial si es un gráfico arbitrario de máximo grado 2. Además, nuestro algoritmo se puede utilizar para calcular los equilibrios NASH de los juegos gráficos en árboles arbitrarios, pero el tiempo de ejecución puede ser exponencial, incluso cuando el árbol ha limitado el grado. Mostramos que esto es inevitable: cualquier algoritmo de este tipo tomará un tiempo exponencial, incluso en árboles de grado limitado con Vaño de Ruta 2. Es una pregunta abierta si nuestro algoritmo se ejecuta en tiempo polinomial en gráficos con el viento de ruta 1, pero mostramos que encontrar un equilibrio NASH para un juego gráfico de 2 acciones en el que el gráfico subyacente tiene un grado máximo 3 y una vía de ruta constante es PPAD-complete (es poco probable que sea manejable). Categorías y descriptores de sujetos F.2 [Teoría de la computación]: Análisis de algoritmos y complejidad del problema;J.4 [Aplicaciones informáticas]: Ciencias sociales y conductuales-economía Algoritmos de términos generales, Economía, Teoría 1. Introducción Los juegos gráficos se introdujeron en los documentos de Kearns et al.[8] y Littman et al.[9] Como una representación sucinta de juegos con una gran cantidad de jugadores. La representación clásica de forma normal (o forma de matriz) tiene un tamaño que es exponencial en el número de jugadores, lo que la hace inadecuada para juegos distribuidos a gran escala. Un juego gráfico asocia a cada jugador con un vértice de un gráfico subyacente G, y la recompensa a ese jugador es una función de las acciones elegidas por él y sus vecinos en G;Si G tiene bajo grado, esta es una forma concisa de representar un juego con muchos jugadores. Los documentos [8, 9] dan un algoritmo de programación dinámica para encontrar equilibrios de Nash en juegos gráficos donde hay dos acciones por jugador y G es un árbol. El primero de estos documentos describe un algoritmo genérico para este problema que puede especializarse de dos maneras: como un algoritmo que calcula las aproximaciones a todos los equilibrios de NASH en el tiempo de tiempo en el tamaño de entrada y la calidad de aproximación, o como un algoritmo de tiempo exponencial quePermite el cálculo exacto de todos los equilibrios de Nash en G. En [9], los autores proponen una modificación al último algoritmo que tiene como objetivo encontrar un único equilibrio de Nash en el tiempo polinomial. Esto no funciona del todo, como mostramos en la Sección 3, aunque introduce una idea útil.1.1 Antecedentes El algoritmo genérico de [8] consta de dos fases a las que nos referiremos como el pase aguas arriba y el pase aguas abajo;1 El primero comienza en las hojas del árbol y termina en la raíz, mientras que el segundo comienza en la raíz y termina en las hojas. Se supone que cada jugador tiene dos estrategias puras (acciones), que se denotan por 0 y 1;Se deduce que cualquier estrategia mixta puede representarse como un número único x ∈ [0, 1], donde x es la probabilidad de que el jugador seleccione 1. Durante el pase aguas arriba, cada vértice V calcula el conjunto de sus mejores respuestas potenciales a cada estrategia mixta W de su padre W;Una estrategia V es una mejor respuesta potencial a W si 1 nota que la terminología aguas arriba y aguas abajo se invierte en [8, 9]: nuestros árboles están enraizados en la parte superior.100 Hay un equilibrio de Nash en el juego gráfico aguas abajo de V (inclusive) dado que W juega W (para una definición más técnica, se remite al lector a la Sección 2). La salida de esta etapa se puede ver como una Tabla (continua) T (W, V), donde t (W, V) = 1 si y solo si V es una mejor respuesta potencial a W;Nos referimos a esta tabla como la mejor política de respuesta para V. El algoritmo genérico no aborda el problema de representar la mejor política de respuesta;De hecho, la diferencia más importante entre las dos instancias del algoritmo genérico descrito en [8] está en su enfoque de este problema. El cálculo se realiza inductivamente: la mejor política de respuesta para V se calcula en función de las mejores políticas de respuesta de V S Children U1 ,..., Reino Unido. Al final del pase aguas arriba, todos los niños de la raíz han calculado sus mejores políticas de respuesta. Al comienzo del pase posterior, la raíz selecciona su estrategia e informa a sus hijos sobre su elección. También selecciona una estrategia para cada niño. Una condición necesaria y suficiente para que el algoritmo continúe es que la estrategia de la raíz es una mejor respuesta a las estrategias de sus hijos y, para cada niño, la estrategia elegida es una de las mejores respuestas potenciales precomputadas a la estrategia elegidade la raíz. El equilibrio luego se propaga aguas abajo, con cada vértice seleccionando sus acciones infantiles. La acción del niño se elige para ser cualquier estrategia de las mejores respuestas potenciales precomputadas a la estrategia elegida de los padres. Para limitar el tiempo de ejecución de este algoritmo, el documento [8] muestra que cualquier política de mejor respuesta puede representarse como una unión de un número exponencial de rectángulos;El algoritmo de aproximación de tiempo polinomial se obtiene combinando esta representación con una cuadrícula de tamaño polinomial. La idea principal de [9] es que no es necesario realizar un seguimiento de todos los rectángulos en las mejores políticas de respuesta;Más bien, en cada paso del pase ascendente, es posible seleccionar un subconjunto de tamaño polinomial de la política correspondiente (en [9], este subconjunto se llama política de punto de interrupción) y aún así asegurarse de que el pase posterior pueda proceder con éxito (Una condición suficiente para esto es que el subconjunto de la mejor política de respuesta para V almacenada por el algoritmo contiene una ruta continua de W = 0 a W = 1).1.2 Nuestros resultados Una de las principales contribuciones de nuestro artículo es mostrar que el algoritmo propuesto por [9] es incorrecto. En la Sección 3 describimos un ejemplo simple para el cual el algoritmo de [9] genera un vector de estrategias que no constituye un equilibrio NASH del juego subyacente. En las secciones 4, 5 y 6 mostramos cómo arreglar el algoritmo de [9] para que siempre produce una salida correcta. La Sección 4 considera el caso en el que el gráfico subyacente es una ruta de longitud n.Para este caso, mostramos que el número de rectángulos en cada una de las mejores políticas de respuesta es O (N2). Esto nos da un algoritmo O (N3) para encontrar un equilibrio de Nash, y para calcular una representación de todos los equilibrios de Nash.(Este algoritmo es un caso especial del algoritmo genérico de [8]: mostramos que se ejecuta en tiempo polinomial cuando el gráfico subyacente es una ruta). Podemos mejorar el tiempo de ejecución del algoritmo genérico utilizando las ideas de [9]. En particular, damos un algoritmo O (N2) para encontrar un equilibrio NASH de un juego gráfico en un camino de longitud n.En lugar de almacenar las mejores políticas de respuesta, este algoritmo almacena subconjuntos definidos adecuadamente, que, después de [9], llamamos políticas de punto de interrupción (modificando la definición según sea necesario). Obtenemos el siguiente teorema del teorema 1. Hay un algoritmo O (N2) que encuentra un equilibrio NASH de un juego gráfico con dos acciones por jugador en una ruta N-Vértice. Hay un algoritmo O (N3) que calcula una representación de todos los equilibrios de Nash de dicho juego. En la Sección 5 extendemos los resultados de los gráficos de la Sección 4 a General de grado2, obteniendo el siguiente teorema. Teorema 2. Hay un algoritmo de tiempo polinómico que encuentra un equilibrio NASH de un juego gráfico con dos acciones por jugador en un gráfico con el máximo grado 2. En la Sección 6 ampliamos nuestro algoritmo para que pueda usarse para encontrar un equilibrio NASH de un juego gráfico en un árbol arbitrario. Incluso cuando el árbol tiene un grado limitado, el tiempo de ejecución puede ser exponencial. Mostramos que esto es inevitable al construir una familia de juegos gráficos en árboles de grados limitados para los cuales las mejores políticas de respuesta de algunos de los vértices tienen un tamaño exponencial, y cualquier algoritmo de TWOPass (es decir, un algoritmo que es similar en el espíritu de [8]) tiene que almacenar casi todos los puntos de las mejores políticas de respuesta. En particular, mostramos lo siguiente. Teorema 3. Hay una familia infinita de juegos gráficos en árboles de grados limitados con el ancho de ruta 2, de modo que cualquier algoritmo de dos pasos para encontrar equilibrios de Nash en estos árboles requiere tiempo y espacio exponenciales. Es interesante observar que los árboles utilizados en la prueba del teorema 3 tienen el camino de ruta 2, es decir, están muy cerca de ser caminos. Es una pregunta abierta si nuestro algoritmo se ejecuta en tiempo polinomial para gráficos de vía de ruta 1. Esta pregunta puede verse como una generalización de un problema de geometría computacional muy natural: la describimos con más detalle en la Sección 8. En la Sección 7, damos un resultado de la intratabilidad teórica de complejidad para el problema de encontrar un equilibrio NASH de un juego gráfico en un gráfico con un pequeño ancho de ruta. Probamos el siguiente teorema. Teorema 4. Considere el problema de encontrar un equilibrio de Nash para un juego gráfico en el que el gráfico subyacente tiene el máximo grado 3 y el ancho de ruta k.Hay una K constante de tal manera que este problema es complete PPAD. El teorema 4 limita la medida en que podemos explotar las propiedades similares a la ruta del gráfico subyacente, para encontrar equilibrios de Nash. Para probar el teorema 4, utilizamos resultados recientes de completidad de PPAD para juegos, en particular los documentos [7, 4] que muestran que el problema de encontrar equilibrios de Nash en los juegos gráficos de grado D (para d ≥ 3) es computacionalmente equivalente alProblema de resolver juegos de forma normal del jugador R (para R ≥ 4), los cuales son completos PPAD.2. Preliminares y notación consideramos juegos gráficos en los que el gráfico subyacente G es un árbol N-Vértice. Cada vértice tiene dos acciones, que se denotan por 0 y 1. Una estrategia mixta viene dada por un solo número x ∈ [0, 1], que denota la probabilidad de que el jugador seleccione la acción 1. Fur Los propósitos del algoritmo, el árbol está arbitrariamente arbitrariamente. Por conveniencia, suponemos sin pérdida de generalidad que la raíz tiene un solo hijo, y que su recompensa es independiente de la acción elegida por el niño. Esto se puede lograr eligiendo primero una raíz arbitraria del árbol, y luego agregando un padre ficticio de esta raíz, dando al nuevo padre una función de pago constante. Dado un borde (v, w) del árbol g, y una estrategia mixta w para w, deje que g (v, w), w = w sea la instancia obtenida de g al (1) eliminar todos los nodos z que están separados deV Por W (es decir, todos los nodos z de tal manera que la ruta de Z a V pasa a través de W), y (2) restringiendo la instancia para que W esté obligado a jugar estrategia mixta W.Definición 1. Supongamos que (V, W) es un borde del árbol, que V es una estrategia mixta para V y que W es una estrategia mixta para w.101 Decimos que V es una mejor respuesta potencial a W (denotada por V ∈ PBRV (W)) Si hay un equilibrio en la instancia G (V, W), W = W en la que V tiene una estrategia mixta v. DefinimosLa mejor política de respuesta para V, dada W, como B (W, V) = {(W, V) |v ∈ PBRV (W), W ∈ [0, 1]}. Por lo general, W es el padre de V, y esto se conoce como la mejor política de respuesta para V. La expresión B (W, V) | V = V se usa para denotar el conjunto B (W, V) ∩ [0, 1] × {V}. El pase aguas arriba del algoritmo genérico de [8] calcula la mejor política de respuesta para V para cada nodo V que no sea la raíz. Con los supuestos anteriores sobre la raíz, el pase aguas abajo es sencillo: deje que W denote la raíz y v denote a su hijo. La raíz selecciona cualquier par (W, V) de B (W, V). Decide tocar la estrategia mixta W y le indica a V que reproduce la estrategia mixta v. El resto del pase descendente es recursivo. Cuando su padre le instruye a un nodo V para que adopte la estrategia mixta V, hace lo siguiente para cada niño u, encuentra un par (v, u) ∈ B (v, u) (con el mismo valor V que se le diopor su padre) y te indica que te toces.3. Algoritmo de Littman et al. El algoritmo de [9] se basa en la siguiente observación: para calcular un solo equilibrio de Nash por un algoritmo de dos pasos, no es necesario construir toda la mejor política de respuesta para cada vértice. Mientras, en cada paso del pase aguas abajo, el vértice bajo consideración puede seleccionar un vector de estrategias para todos sus hijos para que cada estrategia de cada niño sea una mejor respuesta potencial a la estrategia de los padres, el algoritmo tiene éxito en producir un equilibrio NASH. Esto se puede lograr si, al comienzo del pase aguas abajo, tenemos una estructura de datos en la que cada vértice V con el padre w almacena un conjunto ˆb (w, v) ⊆ b (w, v) (llamada política de punto de ruptura) queCubre todos los posibles w ∈ [0, 1]. Más tarde mostraremos que una condición suficiente para la construcción de dicha estructura de datos es el invariante que, en cada nivel del pase aguas arriba, ˆb (W, V) contiene un camino continuo de W = 0 a W = 1. En [9], se sugiere que podemos seleccionar la política de punto de interrupción de una manera particular. A saber, el documento usa la siguiente definición: Definición 2. (cf. [9]) Una política de punto de interrupción para un nodo V con el padre w consiste en un conjunto ordenado de w -breakpoints w0 = 0 <w1 <w2 <· · · <<WT -1 <WT = 1 y un conjunto asociado de Values V V1 ,..., Vt. La interpretación es que para cualquier w ∈ [0, 1], si wi - 1 <w <wi para algunos índices i y w juega w, entonces v jugará vi;y si w = wi para algún índice i, V jugará cualquier valor entre vi y vi+1. Decimos que tal política de punto de ruptura tiene puntos de interrupción T - 1. Luego, el documento afirma que cualquier vértice V puede calcular su política de punto de interrupción con respecto a su padre W dadas las políticas de punto de interrupción de sus hijos U1 ,..., Reino Unido. La prueba se realiza ordenando los puntos de interrupción de los niños (es decir, los valores respectivos de V) de izquierda a derecha (se puede suponer sin pérdida de generalidad que todos estos puntos de interrupción son distintos) y considerarlos a su vez;cada uno de esos puntos vl ∈ {v1 ,..., VL} corresponde a una elección fija de estrategias para niños k - 1 y un intervalo de estrategias admisibles para un niño. Suponga por conveniencia que este niño es U1 y su intervalo de estrategias admisibles en VL es [A, B];Suponga también que para UJ, J = 2 ,..., K, sus respectivas políticas de punto de ruptura los prescriben para jugar UJ en respuesta a VL. Sea p i (u, w), i = 0, 1, la recompensa esperada para V cuando v juega i, u1 juega u, cada UJ, j = 2 ,..., k, juega UJ, y W juega w, y considere el conjunto wl = {w ∈ [0, 1] |∃u ∈ [A, B] S.T. P 0 (u, w) = p1 (u, w)};Tenga en cuenta que para cualquier w ∈ Wl tenemos vl ∈ PBRV (W).V1 V2 V3 V4 V5 V6 V7 V W Figura 1: LKS: recorte para encontrar políticas de punto de interrupción. Los autores muestran que para cualquier punto de interrupción VL, el conjunto WL está vacío, un solo intervalo o una unión de dos intervalos no flotantes (un intervalo no flota si uno de sus puntos finales es 0 o 1);Además, la unión de todos los conjuntos WL, L = 1 ,..., L, cubre el intervalo [0, 1]. Se deduce fácilmente que uno puede cubrir [0, 1] con los intervalos L+2, cada uno de los cuales es un subconjunto de algún WL. Luego, los autores afirman que cualquier cobertura puede transformarse en una política de punto de ruptura para V. A saber, dicen que para dos intervalos WL1 y WL2 en la cubierta, cualquier superposición entre WL1 y WL2 puede ser asignada arbitrariamente la cobertura por WL1 y WL2 recortada en consecuencia (cf. [9], p. 5). Ilustran su enfoque en una figura, que se reproduce como la Figura 1 aquí. En la figura, las líneas horizontales discontinuas representan los puntos de interrupción V1, V2 ,..., V7 y los intervalos sólidos a lo largo de estos puntos de interrupción son los conjuntos W1, W2 ,..., W7. La ruta conectada gruesa es la política de punto de ruptura correspondiente. Se elige de la siguiente manera: comience a la izquierda y siempre salte al intervalo, lo que permite el mayor progreso a la derecha. Para ver por qué este enfoque no funciona en general, considere una ruta de longitud 4 que consiste en una raíz indiferente R, su hijo W, W S Child V y V S Child U. Supongamos que recibe una recompensa de 1 si juega de manera diferente a V y 0 de lo contrario. Por lo tanto, si V denota la estrategia mixta de V (es decir, V juega 1 con probabilidad V), entonces la recompensa esperada que U deriva de jugar 0 viene dada por P0 (u) = V y la recompensa esperada que U deriva de jugar 1P1 (u) = 1 - v. Suponga que V no deriva el pago de la jugada 1 (entonces p1 (v) = 0) y que su matriz de pago para jugar 0 es 1 −9 9 −1, por lo que si u denotaLa estrategia mixta de U y W denota la estrategia mixta de W, la recompensa esperada que V deriva de jugar 0 viene dada por P0 (v) = (1 - u) (1 - w) + (1 - u) W (−9) + U (1 - W) 9 + UW (−1). Usando las técnicas de [8] (o, alternativamente, las de la Sección 4), no es difícil verificar que las mejores políticas de respuesta para U y V (como en la definición 1) estén dadas por los gráficos en la Figura 2. La mejor política de respuesta para U es una política de punto de ruptura para U (como en la definición 2) con V -BreakPoints V0 = 0, V1 = 1/2 y V2 = 1 con valores asociados U1 = 1 y U2 = 0. La mejor política de respuesta para V no es una política de punto de ruptura (debido a cómo la curva de W = 0 a W = 1 se duplica). El algoritmo LKS recortaría para obtener una política de punto de interrupción, como la de la Figura 3. Tenga en cuenta que esta política de punto de interrupción ˆB (W, V) no es válida en el sentido de que no satisface ˆB (W, V) ⊆ B (W, V).102 1 10.5 0.5 1 10.1 0.9 U V V W Figura 2: Mejores políticas de respuesta para U y V.0.1 0.9 1 0.5 1 V W Figura 3: Una política recortada para V El punto es que la matriz de pago de W ahora se puede elegir para evitar que el algoritmo LKS encuentre un equilibrio de Nash. Por ejemplo, suponga que los pagos se dan de modo que P0 (W) = V y P1 (W) = (1 - V) 2. La mejor política de respuesta para W es una línea horizontal en W = .1 (este es el valor de W que permite v = 2/3 - ver Figura 2, que hace p0 (w) = p1 (w).). En el paso hacia abajo, los valores elegidos son w = .1, entonces, desde el recorte, v = 0 y u = 1, que no es un equilibrio de Nash ya que W prefiere la acción 1. El fracaso del algoritmo no es causado por el hecho de que la política de recorte va lo más posible a la derecha. Cualquier otro recorte sería igual de malo. Por ejemplo, suponga que la política de punto de interrupción para V tiene V = 0 hasta algún punto w ∗ <.9 y luego salta a V = 1. El algoritmo es derrotado por la matriz de pago con p 0 (w) = 2v y p1 (w) = (1 - v) en la que la mejor política de respuesta para W es una línea horizontal en W = .9. El algoritmo luego da w = .9, v = 1 y u = 0, que no es un equilibrio de Nash ya que W prefiere la acción 0. Concluimos que el algoritmo LKS no siempre encuentra un equilibrio de Nash. En las Secciones 4 y 6 mostramos cómo modificar el algoritmo para que siempre encuentre un equilibrio de Nash. Para el algoritmo modificado, tenemos que extender la definición de política de punto de interrupción (ver definición 3) para que incluya políticas de punto de ruptura, como la mejor política de respuesta para V en la Figura 2. Desafortunadamente, dicha política de punto de interrupción puede tener un tamaño exponencial (ver Figura 7), por lo que el algoritmo corregido no se ejecuta en tiempo polinomial en todos los árboles. En la siguiente sección, mostramos que se ejecuta en tiempo polinomial en un camino.4. Encontrar equilibrios en una ruta en esta sección, nos enfocamos en el caso cuando el gráfico subyacente es una ruta, es decir, su conjunto de vértices es {V1 ,..., Vn}, y su conjunto de borde es {(vj, vj+1) |j = 1 ,..., n - 1}. Mostramos que en este caso la mejor política de respuesta para cada vértice puede representarse como una unión de un número polinomial de rectángulos, donde un rectángulo está definido por un par de intervalos cerrados (IV, IU) y consiste en todos los puntos en IV ×Iu;Puede ser el caso de que uno o ambos de los intervalos IV e IU consistan en un solo punto. Teorema 5. Para cualquier j = 1 ,..., n, el conjunto B (VJ, VJ - 1) puede representarse como una unión disjunta de los rectángulos de 2 (j + 4) 2. Además, dada dicha representación de B (VJ, VJ - 1), se puede calcular una representación de B (VJ+1, VJ) en el tiempo O (J2). PRUEBA. Para cualquier conjunto A ⊆ [0, 1] 2 que se represente como una unión de un número finito de rectángulos, decimos que un punto u ∈ [0, 1] en el eje U es un punto de evento U de un IF ifu = 0 o u = 1 o a contiene un rectángulo de la forma IV × IU y U es un punto final de IU;Los puntos de eventos V se definen de manera similar. Observe que para cualquier u ∈ [0, 1], el número de componentes conectados de [0, 1] × {u} ∩ a es como máximo el número de puntos de eventos V de A. Utilizamos la inducción en J para mostrar que para cada VJ la declaración del teorema se mantiene y, además, cada B (VJ, VJ - 1) tiene como máximo los puntos de evento 2J + 4. Para simplificar el estuche base, modificamos el juego gráfico agregando un vértice ficticio V0 al comienzo de la ruta: el único vecino de V0 es V1, los pagos de V0 siempre son iguales a 0, y los pagos de todos los demás vértices ((incluyendo V1) son los mismos que en el juego original. Para J = 0, tenemos B (V1, V0) = [0, 1] 2, por lo que la declaración del teorema es trivialmente verdadera. Ahora, supongamos que j> 0, establece v = vj y deje u = vj - 1 y w = vj+1 sean los vértices que preceden y siguen a V, respectivamente. Los pagos a V se describen mediante una matriz 2 × 2 × 2 P: Pxyz es la recompensa que V recibe cuando U juega x, V juega y y w juega z, donde x, y, z ∈ {0, 1}. Supongamos que U juega 1 con probabilidad U y W juega 1 con probabilidad w.Entonces V S El recompensa esperado de jugar 0 es P0 = (1 - U) (1 - W) P000+(1 - U) WP001+U (1 - W) P100+UWP101, mientras que su recompensa esperado de jugar 1 es P1 = (((1 - u) (1 - W) P010+(1 - u) WP011+U (1 - W) P110+UWP111. Si P 0> P1, V prefiere estrictamente jugar 0, si P0 <P1, V prefiere estrictamente jugar 1, y si P0 = P1, V es indiferente, es decir, puede jugar cualquier estrategia (mixta). Dado que P0 y P1 son lineales en W y U, existen algunas constantes A1, A0, B1 y B0 que dependen de la matriz P, pero no de U y W, de modo que P0 - P1 = W (B1U + B0) - -(A1U + A0).(1) Dependiendo de los valores de A1, A0, B1 y B0, subdividimos el resto de la prueba en los siguientes casos.• B1 = 0, B0 = 0. En este caso, p0> p1 si y solo si a1u + a0 <0. Si también a1 = 0, a0 = 0, claramente, b (w, v) = [0, 1] 2, y la declaración del teorema es trivialmente verdadera. De lo contrario, el vértice V es indiferente entre 0 y 1 si y solo si a1 = 0 y u = −a0/a1. Sea V = {V |v ∈ (0, 1), −a0/a1 ∈ Pbru (v)}. Por la hipótesis inductiva, V consiste en como máximo 2 (j - 1) + 4 segmentos y puntos aislados. Para cualquier v ∈ V, tenemos B (W, V) | V = V = [0, 1]: No importa lo que juegue W, siempre y cuando u esté jugando −a0/a1, V está contento de jugar V.la otra mano, para cualquier v ∈ (0, 1) \ V tenemos B (W, V) | V = V = ∅: Cuando V juega V, solo puede responder con U = −a0/a1, en cuyo casoV puede beneficiarse de cambiar a una de las estrategias puras. Para completar la descripción de B (W, V), queda para analizar los casos V = 0 y V = 1. El vértice V prefiere jugar 0 si a1> 0 y u ≤ −a0/a1, o a1 <0 y u ≥ −a0/a1, o 103 a1 = 0 y a0 <0. Suponga por ahora que a1> 0;Los otros dos casos pueden tratarse de manera similar. En este caso 0 ∈ PBRV (W) para algunos w ∈ [0, 1] si y solo si existe una u ∈ PBru (0) de modo que U ≤ −a0/a1: si no existe tal u, siempre que V juega 0La respuesta estadounidense no está en PBRU (0) o V puede mejorar su recompensa jugando 1. Por lo tanto, B (W, V) | V = 0 = [0, 1] o B (W, V) | V = 0 = ∅. Del mismo modo, B (W, V) | V = 1 es igual a [0, 1] o ∅, dependiendo de PBRU (1). Por lo tanto, el conjunto B (W, V) consiste en como máximo 2J + 4 ≤ (j + 4) 2 rectángulos: B (W, V) ∩ [0, 1] × (0, 1) = [0, 1]× V contribuye como máximo 2J + 2 rectángulos, y cada uno de los conjuntos B (W, V) | V = 0 y B (W, V) | V = 1 contribuye como máximo un rectángulo. Del mismo modo, su número total de puntos de eventos es como máximo 2J + 4: los únicos puntos de eventos W son 0 y 1, cada punto de eventos V de B (W, V) es un punto de eventos V de B (V, U), y hay como máximo 2J + 2 de ellos.• B1U + B0 ≡ 0, A1 = αB1, A0 = αB0 para algunos α ∈ R. En este caso, V es indiferente entre 0 y 1 si y solo si W = α, o B1 = 0 y U = −B0/B1= −a0/a1. De manera similar al caso anterior, podemos mostrar que B (W, V) ∩ [0, 1] × (0, 1) consiste en el rectángulo {α} × [0, 1] y como máximo rectángulos 2J + 2 delFormulario [0, 1] × IV, donde cada IV corresponde a un componente conectado de B (V, U) | U = −B0/B1. Además, V prefiere jugar 0 si B1U + B0> 0 y W ≥ α o B1U + B0 <0 y W ≤ α. Por lo tanto, si b1u ∗ + b0> 0 para algunos u ∗ ∈ Pbru (0), entonces b (w, v) | v = 0 contiene [α, + ∞) ∩ [0, 1] y si b1u ∗∗ + b0<0 para algunos u ∗∗ ∈ Pbru (0), entonces b (w, v) | v = 0 contiene [−∞, α] ∩ [0, 1];Si tanto u ∗ y u ∗∗, b (w, v) | v = 0 = [0, 1]. El conjunto B (W, V) | V = 1 se puede describir de manera similar. Por la hipótesis inductiva, B (V, U) tiene como máximo los puntos de evento 2J + 2;Como al menos dos de estos son puntos de evento U, tiene como máximo los puntos de eventos de 2J V. Dado que cada punto de eventos V de B (W, V) es un punto de vegent de B (V, U) y B (W, V) tiene como máximo 3 puntos de eventos W (0, 1 y α), su totalEl número de puntos de eventos es como máximo 2J + 3 <2J +4. Además, de manera similar al caso anterior, se deduce que B (W, V) consta de como máximo 2J + 4 <(j + 4) 2 rectángulos.• B1U + B0 ≡ 0, α (B1U + B0) ≡ A1u + A0. En este caso, se puede definir la función de indiferencia f (·) como f (u) = a (u) b (u) = a1u+a0 b1u+b0, donde a (u) y b (u) nunca se convierten en cerosimultáneamente. Observe que cada vez que w = f (u) y u, w ∈ [0, 1], V es indiferente entre jugar 0 y 1. Para cualquiera a ⊆ [0, 1] 2, definimos una función ˆfv por ˆfv (a) = {(f (u), v) |(v, u) ∈ A};Tenga en cuenta que ˆFV mapea subconjuntos de [0, 1] 2 a subconjuntos de R × [0, 1]. A veces dejamos caer el subíndice V cuando está claro desde el contexto. Lema 1. Para cualquier (W, V) ∈ [0, 1] × (0, 1) tenemos (W, V) ∈ B (W, V) si y solo si existe una u ∈ [0, 1] tal que (V (V, u) ∈ B (V, U) y W = F (U). PRUEBA. FIJA UN ARBITRARIO V ∈ (0, 1). Supongamos que U juega algunos u ∈ PBru (V), w = f (u) satisface w ∈ [0, 1] y w juega w.Existe un vector de estrategias V1 ,..., VJ - 1 = U, VJ = V tal que para cada VK, k <j, su estrategia es una mejor respuesta a las estrategias de sus vecinos. Como W = F (U), V es indiferente entre jugar 0 y 1;En particular, puede jugar v. Por lo tanto, si definimos VJ+1 = W, el vector de estrategias (V1, ..., VJ+1) satisfará las condiciones en la definición de la mejor respuesta potencial, es decir, tenemosv ∈ PBRV (W). Por el contrario, suponga que v ∈ PBRV (W) para algunos w ∈ [0, 1], v = 0, 1. Luego existe un vector de estrategias v1 ,..., VJ - 1, VJ = V, VJ+1 = W de tal manera que para cada VK, K ≤ J, su estrategia es una mejor respuesta a las estrategias de sus vecinos. Como V = 0, 1, V es, de hecho, indiferente entre jugar 0 y 1, lo cual solo es posible si W = F (VJ - 1). Elegir u = vj - 1;por construcción, u ∈ Pbru (v). Lemma 1 describe las situaciones en que V es indiferente entre jugar 0 y jugar 1. Sin embargo, para caracterizar completamente B (W, V), también necesitamos saber cuándo V prefiere una estrategia pura. Definir ˆf (0) = ∪u∈Pbru (0) Ru, donde ru = ´ [f (u), +∞) × {0} si b (u)> 0, (−∞, f (u)] ×{0} si b (u) <0. y ˆf (1) = ∪u∈Pbru (1) ru, donde ru = ´ [f (u), +∞) × {1} si b (u) <0, (−∞, f (u)] × {1} si b (u)> 0. Lema 2. Para cualquier w ∈ [0, 1], tenemos (w, 0) ∈ ˆf (0) si y solo si 0 ∈ PBRV (W) y (w, 1) ∈ ˆf (1) si y solo si 1 ∈ PBRV(W). PRUEBA. Considere un U0 ∈ PBRU (0) arbitrario. Si b (u0)> 0, para u = u0 la desigualdad p0 ≥ p1 es equivalente a w ≥ f (u0). Por lo tanto, cuando U juega U0 y W juega w, w ≥ f (u0), V prefiere jugar 0;Como U0 ∈ PBru (U), se deduce que 0 ∈ PBRV (W). El argumento para el caso B (U0) <0 es similar. Por el contrario, si 0 ∈ PBRV (W) para algunos w ∈ [0, 1], existe un vector (V1, ..., VJ - 1, VJ = 0, VJ+1 = W) tal que para cada VK,K ≤ J, VK juega VK, y esta estrategia es una mejor respuesta a las estrategias de los vecinos de VKS. Tenga en cuenta que para cualquier vector tenemos vj - 1 ∈ PBRU (0). A modo de contradicción, suponga (w, 0) ∈ ë u∈Pbru (0) ru. Entonces debe ser el caso de que para cualquier u0 ∈ Pbru (0) F (u0) <w y ru0 = (−∞, f (u0)] × {0} o f (u0)> w y ru0 = [f(u0), +∞) × {0}. En ambos casos, cuando V juega 0, U juega U0, y V juega W, la desigualdad entre F (U0) y W es equivalente a P0 <P1, es decir, V se beneficiaría de cambiar a 1. El argumento para ˆf (1) es similar. Juntos, Lemma 1 y Lemma 2 describen completamente el conjunto B (W, V): tenemos B (W, V) = ˆf (0) ∪ ˆf (B (V, U)) ∪ ˆf (1) [0, 1] 2. Queda por mostrar que B (W, V) puede representarse como una unión de los rectángulos como máximo (j + 4) 2, tiene como máximo los puntos de evento 2J + 4 y se puede calcular en el tiempo O (J2). Establecer u ∗ = −b0/b1.2 Considere un rectángulo arbitrario R = [V1, V2] × [U1, U2] ⊆ B (V, U). Si u ∗ ∈ [u1, u2], la función f (·) es continua en [u1, u2] y, por lo tanto, ˆf (r) = [fmin, fmax] × [v1, v2], donde fmin = min {f (f (f (f (u1), f (u2)}, fmax = max {f (u1), f (u2)}, es decir, en este caso ˆf (r) ∩ [0, 1] 2 consiste en un solo rectángulo. Ahora, supongamos que R se cruza con la línea [0, 1] × {u ∗};Como se observó anteriormente, hay como máximo 2J+2 de estos rectángulos. Supongamos que limu → u ∗ - f (u) = +∞;Como f (·) es una función lineal fraccional, esto implica que Limu → U ∗+ F (u) = −∞ y también F (u1)> f (u2). Dado que f (·) es continuo en [u1, u ∗) y (u ∗, u2], es fácil ver que ˆf ([v1, v2] × [u1, u ∗)) = [f (u1),+∞) × [V1, V2] 2 El caso B1 = 0 no causa problemas especiales. Para completar, configure U ∗ para ser cualquier valor fuera de [0, 1] en este caso.104 v u v u* 1 f (0) f (a) f (b) f (1) a b (0, 0) w v 2 V (0, 0) 1 1 V 2 V 1 1 Figura 4: F está aumentando (−∞, u ∗) y (u ∗, +∞).y ˆF ([V1, V2] × (U ∗, U2]) = (−∞, F (U2)] × [V1, V2], es decir, en este caso ˆf (R) ∩ [0, 1] 2 consistede la mayoría de los dos rectángulos. El caso limu → u ∗ - f (u) = −∞ es similar. Como ˆf (b (v, u)) = ë r⊂b (v, u) ˆf (r), se deduce que ˆf (b (v, u)) consiste en como máximo (j + 3) 2 + 2j +2 rectángulos. Además, es fácil ver que tanto ˆf (0) como ˆf (1) consisten en la mayoría de los 2 segmentos de línea cada uno. Concluimos que B (W, V) puede representarse como una unión de la mayoría de los rectángulos como máximo (j + 3) 2 + 2j + 6 <(j + 4) 2. Además, si V es un punto de evento V de B (W, V), entonces V es un punto de vegents de B (V, U) (esto incluye los casos v = 0 y V = 1, como 0 y 1 son V V =-Sevent Puntos de b (v, u)) y si w es un punto de evento w de b (w, v), entonces w = 0 o w = 1 o existe algunos u ∈ [0, 1] de modo quew = f (u) y u es un punto de evento U de b (v, u). Por lo tanto, B (W, V) tiene como máximo los puntos de evento 2J + 4. El O (J2) atado en el tiempo de ejecución en el Teorema 5 se deduce de nuestra descripción del algoritmo. Sigue la O (N3) en el tiempo de ejecución general para encontrar un equilibrio de Nash (y una representación de todos los equilibrios de Nash).4.1 Encontrar un solo equilibrio de Nash en el tiempo O (N2) El límite superior en el tiempo de ejecución de nuestro algoritmo es apretado, al menos suponiendo la implementación directa, en la que cada B (VJ+1, VJ) se almacena como una unión de rectángulos: No es difícil construir un ejemplo en el que el tamaño de B (VJ+1, VJ) es Ω (J2). Sin embargo, en algunos casos no es necesario representar todos los equilibrios de Nash;Más bien, el objetivo es encontrar un equilibrio arbitrario del juego. En esta sección, mostramos que este problema se puede resolver en tiempo cuadrático, obteniendo así una prueba del teorema 1. Nuestra solución se basa en la idea de [9], es decir, trabajar con subconjuntos de las mejores políticas de respuesta en lugar de las mejores políticas de respuesta en sí;Después de [9], nos referiremos a subconjuntos como políticas de punto de interrupción. Si bien no siempre es posible construir una política de punto de ruptura como se define en [9], mostramos cómo modificar esta definición para garantizar que siempre exista una política de punto de interrupción;Además, demostramos que para un gráfico de ruta, la política de punto de interrupción de cualquier vértice se puede almacenar en una estructura de datos cuyo tamaño es lineal en el número de descendientes que tiene este vértice. Definición 3. Una política de punto de interrupción ˆB (V, U) para un vértice u cuyo padre es V es una curva no interna de la forma x1 ∪ y1 ∪ · · · ∪ ym-1 xm, donde xi = [vi-1,vi] × {ui}, yi = {vi} × [ui, ui+1] y ui, vi ∈ [0, 1] para i = 0 ,..., m.Decimos que una política de punto de interrupción es válida si v0 = 0, vm = 1 y ˆb (v, u) ⊆ b (v, u). A veces abusaremos de la notación al referirnos a ˆB (V, U) como una colección de segmentos xi, yi en lugar de su unión. Tenga en cuenta que no requerimos que vi ≤ vi+1 o ui ≤ ui+1;En consecuencia, en cualquier argumento que involucre políticas de punto de interrupción, todos los segmentos deben tratarse como segmentos dirigidos. Observe que cualquier política de punto de ruptura válida ˆB (V, U) puede verse como un mapeo 1-1 continuo γ (t) = (γv (t), γu (t)), γ: [0, 1] → [0,1] 2, donde γ (0) = (0, u1), γ (1) = (1, um) y existen algunos t0 = 0, t1 ,..., t2m - 2 = 1 tal que {γ (t) |t2k ≤ t ≤ t2k+1} = xk+1, {γ (t) |t2k+1 ≤ t ≤ t2k+2} = yk+1. Como se explica en la Sección 3, podemos usar una política de punto de interrupción válida en lugar de la mejor política de respuesta durante el pase posterior, y aún así garantizar que al final, generaremos un equilibrio de Nash. El teorema 6 muestra que uno puede calcular inductivamente políticas de punto de interrupción válidas para todos los vértices en la ruta;La prueba de este teorema se puede encontrar en la versión completa de este documento [6]. Teorema 6. Para cualquier V = VJ, uno puede encontrar en el tiempo polinomial una política de punto de interrupción válida ˆB (W, V) que consiste en la mayoría de los segmentos 2J + 1.5. Equilibrios de Nash en gráficos con el máximo grado 2 En esta sección, mostramos cómo se puede aplicar el algoritmo para rutas para resolver un juego en cualquier gráfico cuyos vértices tienen un título como máximo 2. Un gráfico que tiene el máximo grado 2 es, por supuesto, una unión de caminos y ciclos. Dado que cada componente conectado se puede manejar de forma independiente, para obtener una prueba del Teorema 2, solo necesitamos mostrar cómo lidiar con los ciclos. Dado un ciclo con vértices V1 ,..., VK (en orden cíclico), hacemos dos búsquedas separadas para un equilibrio de Nash: primero buscamos un equilibrio de Nash donde algunos vértices juegan una estrategia pura, luego buscamos un equilibrio NASH completamente mixto, donde todos los vértices juegan estrategias mixtas. Para I ≤ k, vi vi denotar la probabilidad de que VI juegue 1. La primera búsqueda se puede hacer de la siguiente manera. Para cada i ∈ {1 ,..., k} y cada b ∈ {0, 1}, haga lo siguiente.1. Deje que P sea la ruta (VI+1, VI+2 ..., VK, V1, ..., VI - 1, VI) 2. Deje que la recompensa a VI+1 se base en poner VI = B (por lo que depende solo de VI+1 y VI+2.) 3. Aplique el pase aguas arriba a P 4. Poner vi = b;Aplique el pase aguas abajo para cada vértice, VJ, realice un seguimiento de todas las estrategias mixtas posibles VJ 5. Compruebe si VI+1 tiene alguna respuesta que sea consistente con VI = B;Si es así, tenemos un equilibrio de Nash.(De lo contrario, no hay un equilibrio de Nash de la forma deseada). Para la segunda búsqueda, tenga en cuenta que si VI juega una estrategia mixta, entonces VI + 1 y VI - 1 satisfacen una ecuación de la forma VI + 1 = (A0 + A1VI - 1)/(B0 + B1VI - 1). Dado que todos los vértices en el ciclo juegan estrategias mixtas, tenemos VI+3 = (A0+A1VI+1)/(B0+B1VI+1). Componiendo las dos transformaciones fraccionales lineales, obtenemos VI +3 = (A0 +A1 VI - 1)/(B0 +B1 VI - 1).Para algunas constantes nuevas A0, A1, B0, B1. Elija cualquier vértice VI. Podemos expresar VI en términos de VI+2, luego VI+4, VI+6, etc. y, en última instancia, VI para obtener una ecuación cuadrática (para VI) que es fácil de obtener de los pagos en el juego. Si la ecuación no es trivial, tiene como máximo 2 soluciones en (0, 1). Para un ciclo de longitud impar, todos los demás VJ son derivables de esas soluciones, y si existe un equilibrio NASH completamente mixto, todo el VJ debería ser números reales en el rango (0, 1). Para un ciclo de longitud uniforme, obtenemos dos ecuaciones cuadráticas, una para VI y otra para 105 VI+1, y podemos probar de la misma manera que alguna solución a estos valores de rendimiento para el otro VJ, todos los cuales se encuentran ((0, 1). Si la ecuación cuadrática es trivial, hay potencialmente un continuo de equilibrios totalmente mezclados. Los valores para VI que pueden ocurrir en un equilibrio de Nash son aquellos para los cuales todos los valores de VJ dependientes se encuentran en (0, 1);La última condición es fácil de verificar calculando la imagen del intervalo (0, 1) bajo las transformaciones lineales fraccionales respectivas.6. Encontrar equilibrios en un árbol (arbitrario) para árboles arbitrarios, la estructura general del algoritmo sigue siendo el mismo, es decir, se puede construir una mejor política de respuesta (o, alternativamente, una política de punto de ruptura) para cualquier vértice basado en las mejores políticas de respuesta desus hijos. Suponemos que el grado de cada vértice está limitado por una constante K, es decir, la matriz de pago para cada vértice es de tamaño O (2K). Considere un vértice V cuyos hijos son U1 ,..., Reino Unido y cuyo padre es W;La mejor política de respuesta de cada UJ es B (V, UJ). De manera similar a la sección anterior, podemos calcular los pagos esperados de V S P0 y P1 para jugar 0 o 1, respectivamente. A saber, cuando cada uno de los UJ juega UJ y W juega w, tenemos p0 = l0 (u1, ..., Reino Unido, w), p 1 = l1 (u1, ..., Reino Unido, w), donde las funcionesL0 (·, ..., ·), L1 (·, ..., ·) son lineales en todos sus argumentos. Por lo tanto, la desigualdad p0> p1 puede reescribirse como wb (u1, ..., Reino Unido)> a (u1, .., Reino Unido), donde tanto a (·, ..., ·) como b (·,,.., ·) Son lineales en todos sus argumentos. Establecer u = (u1, ..., Reino Unido) y defina la función de indiferencia f: [0, 1] k → [0, 1] como f (u) = a (u)/b (u);Claramente, si cada UJ juega UJ, W juega W y W = F (U), V es indiferente entre jugar 0 y 1. Para cualquier x = x1 × · · · × xk, donde xi ⊆ [0, 1] 2 Define ˆf (x) = {(f (u), v) |(v, ui) ∈ Xi, i = 1 ,..., k} también, establecer ˆf (0) = {(w, 0) |∃u S.T.ui ∈ Pbrui (0) y wb (u) ≥ a (u)} y ˆf (1) = {(w, 1) |∃u S.T.ui ∈ Pbrui (1) y wb (u) ≤ a (u)}. Como en la sección anterior, podemos mostrar que B (W, V) es igual a ˆf (0) ∪ ˆf (B (V, U1) × · · · × B (V, Reino Unido)) ∪ ˆf (1) [0, 1] 2;Además, cualquier ruta de W = 0 a W = 1 que sea un subconjunto de B (W, V) constituye una política de punto de ruptura válida.6.1 Política de punto de interrupción del tamaño exponencial Si bien el algoritmo de la Sección 4 puede generalizarse para árboles limitados, su tiempo de ejecución ya no es polinomio. De hecho, lo contrario es cierto: podemos construir una familia de árboles y matrices de pago para todos los jugadores para que las mejores políticas de respuesta para algunos de los jugadores consistan en un número exponencial de segmentos. Además, en nuestro ejemplo, las políticas de punto de interrupción coinciden con las mejores políticas de respuesta, lo que significa que incluso encontrar un solo equilibrio de Nash utilizando el enfoque de [8, 9] tomará exponencialmente mucho tiempo. De hecho, una declaración más fuerte es cierta: para cualquier algoritmo de dos pasos de tiempo polinómico (definido más adelante) que funcione con subconjuntos de las mejores políticas de respuesta para este gráfico, podemos elegir los pagos de los vértices para que el pase posterior de este algoritmofallará. S 1 1 T S N - 1 00 0000 11 1111 00 0000 11 1111 0000 0000 11 1111 0 00 1 11 0 00 1 11 0 00 1 11 0 00 1 11 0 00 1 11 0 00 1 11 0 00 1 11 0000 111111 00 0000 11 1111 0 00 1 11 0000 00000000 00000000 0000 1111 1111111111111111111111 000 000000 000000 000 111 111111 111111 111 S S T T T 2 N - 1 N 2 N 1 N - 12 N-Size Política de punto de interrupción. En el resto de esta subsección, describimos esta construcción. Considere el árbol TN dado por la Figura 5;Deje que VN sea la raíz de este árbol. Por cada k = 1 ,..., n, deje que los pagos de SK y TK sean los mismos que los de U y V descritos en la Sección 3;Recuerde que las políticas de punto de interrupción para U y V se muestran en la Figura 2. No es difícil ver que la función de indiferencia para TK viene dada por f (s) = .8s+.1. El pago de V0 es 1 si V1 selecciona la misma acción que V0 y 0 de lo contrario;La Política de mejor respuesta de V0 viene dada por la Figura 6. Lema 3. Fix K <n, y dejar U, T, V y W denotar las estrategias de VK - 1, TK, VK y VK+1, respectivamente. Supongamos que VK prefiere jugar 0 a jugar 1 si y solo si .5t + .1u + .2> w.Entonces B (VK+1, VK) consta de al menos 3k segmentos. Además, {(V, W) |(v, w) ∈ B (vk+1, vk), 0 ≤ w ≤ .2} = [0, .2] × {0} y {(v, w) |(V, W) ∈ B (VK+1, VK), .8 ≤ W ≤ 1} = [.8, 1] × {1}. PRUEBA. La prueba procede por inducción en k.Para k = 0, la declaración es obvia. Ahora, supongamos que es cierto para B (VK, VK - 1). Se puede ver B (VK+1, VK) como una unión de siete componentes: ˆf (0) ∩ [0, 1] × {0}, ˆf (1) ∩ [0, 1] × {1} y cincoComponentes que corresponden a los segmentos de B (VK, TK). Examinamos a su vez. Para describir ˆf (0) ∩ [0, 1] × {0}, tenga en cuenta que f (u, t) = .5t+.1u+.2 es monótono en t y u y satisface f (0, 0) = .2. Además, tenemos pBRVK - 1 (0) = {0} y pBrtk (0) = {0}. Para cualquier w ∈ [0, 1] tenemos f (0, 0) ≥ w si y solo si w ∈ [0, .2]. Concluimos que ˆf (0) ∩ [0, 1] × {0} = [0, .2] × {0}. Del mismo modo, se deduce que ˆf (1) ∩ [0, 1] × {1} = [.8, 1] × {1}. Definir s1 = {(f (u, 0), v) |(V, u) ∈ B (VK, VK - 1) ∩ [0, .9] × [0, 1]}, S2 = {(f (U, .5), V) |(V, u) ∈ B (VK, VK - 1) ∩ [.1, .9] × [0, 1]}, S3 = {(f (U, 1), V) |(V, u) ∈ B (VK, VK - 1) ∩ [.1, 1] × [0, 1]};Estos conjuntos corresponden a segmentos horizontales de B (VK, TK). Es fácil ver que S1, S2, S3 ⊂ B (VK+1, VK). Dado que F es una función continua, el número de segmentos en cada SI es al menos el número de segmentos en B (VK, VK - 1) ∩ [.1, .9] × [0, 1], que es al menos 3K−1 por hipótesis de inducción. Además, como F es monótono en U y F (1, 0) <f (0, .5) <f (1, .5) <f (0, 1), todos Si, i = 1, 2, 3,son disjuntos. Finalmente, el conjunto B (VK+1, VK) contiene dos segmentos que corresponden a los segmentos verticales de B (VK, Tk), es decir, S4 = {(F (0, T), .1) |t ∈ [.5, 1]) = [.45, .7] × {.1} y s5 = {(f (1, t), .9) |t ∈ [0, .5]) = [.3, .55] × {.9}. Claramente, S4 conecta S2 y S3, S5 conecta S1 y S2, y S4 y S5 no se cruzan entre sí. Concluimos que B (Vk+1, VK) 106 0 00 00 00 00 00 00 00 00 00 0 1 11 11 11 11 11 11 11 11 11 11 1 00000000001111111111 1 1 10.8 1 1 0.9 0.1 V V0.5 0.2 V V v 21 10 1 10.Figura 6: Políticas de punto de interrupción para V0 y V1.es una línea continua que consiste en al menos 3k segmentos y satisface la condición del lema. Para completar la construcción, debemos demostrar que podemos diseñar la matriz de pago para VK para que prefiera jugar 0 a jugar 1 si y solo si .5t + .1u + .2> w.Con este fin, demostramos una declaración más general, a saber, que la función de indiferencia de un vértice puede ser una función multilineal fraccional arbitraria de sus estrategias de descendientes. Decimos que una función de las variables K es multilineal si se puede representar como una suma de monomiales y cada uno de estos monomiales es lineal en todas sus variables. Tenga en cuenta que esta definición es diferente de una más estándar en el sentido de que no requerimos que todos los monomiales tengan el mismo grado. Recuerde que los pagos de un vértice con vecinos K + 1 son descritos por las matrices P0 y P1, donde PJ I0i1 ... IK es la recompensa que V recibe cuando juega J, y sus vecinos juegan i0 ,..., IK, y J, i0 ,..., ik ∈ {0, 1}. Sea P [J] = P [J] (W, U1, ..., Reino Unido) el pago esperado obtenido por este vértice cuando juega J y las estrategias (mixtas) de sus vecinos están dadas por un vector (W,U1, ..., Reino Unido), es decir, p [j] = e [p j i0i1 ... ik] donde i0 ,..., son variables aleatorias independientes de Bernoulli, cada una de las cuales es 1 con las probabilidades respectivas W, U1 ,..., Reino Unido. Lema 4. Dado un árbol vértice V cuyo padre es w y cuyos hijos son U1 ,..., Reino Unido, para cualquier función F = F (U1, ..., Reino Unido) que puede representarse como una relación de dos funciones multilineales F1, F2, es decir, F = F1 (U1, ..., Reino Unido) F2 (U1, ..., Reino Unido), existen matrices de pago P0 y P1 para V tal que P [0] - P [1] = WF2 (U1, ..., Reino Unido) - F1 (U1, .., Reino Unido). La prueba de este lema se basa en el hecho de que cada monomio de la forma como (u0) s0...(Reino Unido) SK, S1 ,..., sk ∈ {0, 1}, puede representarse como t = t0 ... tk∈σk+1 ct (u0) t0 (1 - u0) 1 - t0...(Reino Unido) Tk (1 - Reino Unido) 1 - Tk para algunos CT, t ∈ {0, 1} K+1. Los detalles se pueden encontrar en la versión completa de este documento [6].6.2 Irreducibilidad de la mejor política de respuesta para TN Si bien la mejor política de respuesta construida en la subsección anterior tiene un tamaño exponencial, no está claro `a priori que es necesario realizar un seguimiento de todos sus segmentos de línea en lugar de concentrarse en un pequeñosubconjunto de estos segmentos. Sin embargo, resulta que para los algoritmos de dos pasos, como el algoritmo de [8], la mejor política de respuesta no puede simplificarse. Más precisamente, decimos que un algoritmo A es un algoritmo de dos pasos si 0 0 0 0 00 0 0 0 0 0 00 0 0 0 0 00 0 0 0 0 1 1 1 1 11 1 1 1 11 1 1 1 11 1 1 1 1 1 1 1 11 1 00000000000000000000000000000000011111111111111111111111111111 0.2 0.8 0.9 1 0.1 1 V V V 2 3 S 1 S S S S 1 T 0 T 2 3 4 5 Figura 7: Política de punto de interrupción para V2.• A consiste en un pase aguas arriba y un pase aguas abajo.• Durante el pase ascendente, para cada vértice V con el padre W, A construye un conjunto BB (W, V) ⊆ B (W, V). Este conjunto se produce a partir de los conjuntos {BB (V, U) |U es un hijo de V} aplicando el procedimiento desde el comienzo de la Sección 6 (sustituyendo BB (V, UJ) por B (V, UJ) para todos los niños UJ de V), y luego posiblemente omitiendo algunos de los puntos de los puntos delConjunto resultante (que luego se almacena explícitamente).• El pase aguas abajo es idéntico al paso aguas abajo de [8] como se describe en la Sección 2, excepto que funciona en los conjuntos BB (W, V) en lugar de en los conjuntos B (W, V). Teorema 7 demuestra que cualquier algoritmo de dos pasos fallará durante el pase posterior en TN si hay un índice j tal que el conjunto BB (VJ+1, VJ) omite cualquier punto interior de cualquiera de los (al menos 3J) de los segmentos deB (VJ+1, VJ). Esto implica el Teorema 3. Teorema 7. Para cualquier algoritmo de dos pasos A para el que existe un índice j, j ∈ [1, n/4], un segmento S de B (VJ, VJ-1) y un punto interior (x, y) de S.Que BB (VJ, VJ - 1) no contiene (x, y), podemos elegir matrices de pago de los vértices VJ ,..., VN para que el pase posterior de A falle y, además, pagos a V4J ,..., VN es idénticamente 0. Dibujamos la prueba del teorema 7;Los detalles se pueden encontrar en la versión completa de este documento [6]. Procedemos por inducción. Para J = 1, el argumento es similar al de la Sección 3. Para el paso inductivo, la idea principal es que podemos acercarnos a cualquier parte de una mejor política de respuesta (¡incluida la parte que se omitió!) Al usar una función de indiferencia apropiada;Esto nos permite reducir el caso J = J0 a J = J0 - 1. 7. PPAD-Completación de juegos gráficos de ancho de ruta limitado En la sección anterior, demostramos que para los juegos gráficos en árboles que son casi pero no del todo los algoritmos de dos pasos no pueden encontrar el equilibrio Nash en el tiempo polinomial. A continuación, mostramos que una propiedad gráfica de ruta más leve nos permite construir juegos gráficos para los cuales es poco probable que cualquier algoritmo de tiempo polinómico encuentre equilibrios de Nash.7.1 Awidth de ruta Una descomposición de la ruta de un gráfico G = (V, E) es una secuencia de subset Si (V) ⊆ V tal que para cada borde (V, V) ∈ E, V, V ∈ Si (V) para algunos i, y además, para cada v ∈ V, si v ∈ Si (V) y V ∈ Sj (V) para J> I, entonces V ∈ Sk (V) para todos los I ≤ K ≤ J. La descomposición de la ruta tiene ancho k si todos los conjuntos Si (V) tienen cardinalidad como máximo K + 1. El ancho de ruta de G es el ancho mínimo de cualquier descomposición de la ruta de G. 107 El ancho de la ruta es una restricción del ancho de árbol (en el que uno buscaría un árbol cuyos vértices eran los sets si (v), y los conjuntos que contienen algún vértice tendrían que formarun subárbol). Para cualquier K constante, se puede decidir en tiempo polinomial si un gráfico tiene un ancho de ruta (o ancho de árbol) k.Además, muchos problemas teóricos gráficos parecen más fáciles de resolver en el tiempo polinomial, cuando se limitan al ancho de árbol fijo, o el ancho de ruta, gráficos, consulte [1] para una descripción general. Tenga en cuenta que una ruta tiene el ancho de ruta 1 y un ciclo tiene un ancho de ruta 2. 7.2 PPAD-Completimiento Revisamos algunas definiciones básicas de la teoría de la complejidad computacional de los problemas de búsqueda. Un problema de búsqueda asocia cualquier entrada (aquí, un juego gráfico) con un conjunto de soluciones (aquí, los equilibrios nash del juego de entrada), donde la longitud de descripción de cualquier solución debe estar limitada polinomialmente en función de la longitud de descripción de suaporte. En un problema de búsqueda total, existe una garantía de que existe al menos una solución para cualquier entrada. El teorema de Nashs nos asegura que el problema de encontrar equilibrios de Nash es total. Una reducción de los problemas de búsqueda a los problemas s es un mecanismo que muestra que cualquier algoritmo de tiempo polinómico para S implica un algoritmo de tiempo polinomial para S. consiste en funciones F y G, computables en tiempo polinomial, donde F mapas de las entradas de Sa las entradas de S y G mapas soluciones de S a soluciones de S, de tal manera que si es una entrada a S, y SS es una solución a F (IS), entonces G (SS) es una solución a IS. Observe que los problemas de búsqueda totales no permiten las reducciones anteriores de problemas como el SAT del circuito (donde la entrada es un circuito booleano, y las soluciones son vectores de entrada que hacen que la salida sea verdadera) debido al hecho de que el circuito SAT y otros problemas completos de NP completanTener entradas con conjuntos de soluciones vacías. En cambio, el trabajo reciente sobre la complejidad computacional de encontrar un equilibrio de Nash [7, 4, 5, 2, 3] lo ha relacionado con el siguiente problema. Definición 4. FINAL DE LA LÍNEA. Entrada: Circuitos booleanos S y P, cada uno con n de entrada y N bits de salida, donde P (0n) = 0n y S (0n) = 0n. Solución: x ∈ {0, 1} n tal que s (x) = x, o alternativamente x ∈ {0, 1} n tal que p (s (x)) = x. S y P pueden considerarse como un sucesor y predecesor. Observe que calculando Si (0n) (para i = 0, 1, 2, ...) y comparando con P (Si+1 (0n)), eventualmente debemos encontrar una solución al final de la línea. El final de la línea caracteriza el PPAD de la clase de complejidad (defender el argumento de paridad en un gráfico, la versión dirigida), introducida en Papadimitriou [11], y cualquier problema de búsqueda es complete PPAD si el final de la línea se reduce a S. Otros PPAD-Los problemas completos incluyen la búsqueda de un hiperplano de sándwich de jamón y encontrar equilibrios de mercado en una economía de intercambio (ver [11] para obtener descripciones más detalladas de estos problemas).Nash 3 gráficos es el problema de encontrar un equilibrio de Nash para un juego gráfico cuyo gráfico tiene el grado 3. Daskalakis et al.[4] Muestra PPAD-completidad de NASH 3 gráficos por una reducción de Brouwer tridimensional, introducido en [4] y definido de la siguiente manera. Definición 5. Brouwer tridimensional. Entrada: un circuito c que tiene 3n bits de entrada y 2 bits de salida. Los bits de entrada definen una cubeleta del cubo de la unidad, que consiste en las 3 coordenadas de sus puntos, dadas a N bits de precisión. La salida representa uno de los cuatro colores asignados por C a una cubeleta. C está restringido para asignar el color 1 a las cubeletas adyacentes al plano (y, z), color 2 a las cubeletas restantes adyacentes al plano (x, z), color 3 a las cubeletas restantes en (x, y)-Plane y color de 0 a todas las demás cubeletas en la superficie del cubo de la unidad. Una solución es un vértice pancromático, un vértice adyacente a las cubeletas que tienen 4 colores distintos. La razón por la cual se garantiza que existirá una solución es que se puede construir una función Brouwer asociada φ, es decir, una función continua desde el cubo de la unidad hasta sí mismo, de modo que los vértices pancromáticos corresponden a puntos fijos de φ.El teorema de Brouwers Fixpoint promete la existencia de un punto de fijación. La prueba del teorema 4 utiliza una modificación de la reducción de [4] de Brouwer tridimensional a NASH de 3 gráficos. Para probar el teorema, comenzamos con algunos resultados preliminares de la siguiente manera. Cada jugador tiene 2 acciones, denotadas 0 y 1. Para un jugador en Vertex V, permita que P [v] denote la probabilidad de que el jugador juegue 1. Lema 5. [7] Existe un juego gráfico GShift de tamaño fijo que tiene vértices V, V donde P [V] es la parte fraccional de 2p [V]. Corolario 1. Existe un juego gráfico Gn -thift de tamaño θ (n) de urbano de ruta constante, con vértices v, vn donde p [vn] es la parte fraccional de 2n .p [v]. PRUEBA. Haga una cadena de n copias de Gshift en Lemma 5. Cada subconjunto de vértices en la descomposición de la ruta son los vértices en una copia de GShift. Deje que (x) denote el n-th bit de la expansión binaria de x, donde interpretamos 1 como verdadero y 0 como falso. Los siguientes usan gadgets de [7, 4]. Corolario 2. Existe k de tal manera que para todos los n, y para todos los n1, n2, n3 ≤ n, existe un juego gráfico de tamaño o (n) con vía kidth k, que tiene vértices v1, v2, v3 donde p [v3] = p [V1] + 2 - n3 (in1 p [v1] ∧ in2 p [v2]). Prueba del teorema 4. Sea C el circuito booleano que describe una instancia de Brouwer tridimensional. Deja que G1 ,..., GP (n) sean las puertas de C indexadas de tal manera que las entradas a cualquier puerta son la (s) salida (s) de puertas de baja indexación.G1 ,..., G3n serán las entradas 3n a C. Todos los jugadores en el juego gráfico G construido en [4] tienen 2 acciones denotadas 0 y 1. La probabilidad de que V juegue 1 se denota P [V]. G tiene 3 jugadores VX, VY y VZ para los cuales P [VX], P [VY] y P [VZ] representan las coordenadas de un punto en el Cubo de la Unidad. G está diseñado para incentivar VX, VY y VZ para ajustar sus probabilidades en las direcciones dadas por una función Brouwer que está especificada por el circuito C. en un equilibrio Nash, P [VX], P [VY] y P [VZ] representandoCoordenadas de un punto de fijación de una función que pertenece a la clase de funciones representadas por Brouwer tridimensional. Para 1 ≤ i ≤ p (n) introducimos un vértice V (i) c de modo que para 1 ≤ j ≤ i, ij (p [v (i) c]) es la salida de la puerta GJ;Para i <j ≤ p (n), ij (p [v (i) c]) es 0. Construya V (I) C de V (I - 1) C usando Corolario 2. Deje que G (i) sea el juego gráfico que hace esto. Sea S1 (G (i)) ,..., Sn (g (i)) ser una descomposición de longitud n de ruta de G (i), donde v (i - 1) c ∈ S1 (g (i)) y v (i) c ∈ Sn (g (i)). Luego, se obtiene una descomposición de la ruta de ∪1≤i≤p (n) g (i) tomando la unión de las descomposiciones de la ruta separada, junto con Sn (g (i - 1)) ∪ S1 (g (i))para 2 ≤ i ≤ p (n). Deje que GC sea el juego gráfico anterior que simula C. GC tiene entradas 3N, que consiste en los primeros n bits de las expansiones binarias de P [VX], P [VY] y P [VZ]. De manera similar a [4], la salida de GC afecta a VX, VY y VZ de la siguiente manera. El color 0 incentiva VX, VY y VZ 108 para ajustar sus probabilidades P [VX], P [VY] y P [VZ] en la dirección (−1, −1, −1);El color 2 los incentiva para que se muevan en dirección (1, 0, 0);color 2, dirección (0, 1, 0);Color 3, dirección (0, 0, 1). Necesitamos asegurarnos de que en los puntos en los límites de las cubeletas adyacentes, el cambio de dirección será aproximadamente el promedio de las direcciones de los puntos circundantes. De esa manera, los cuatro colores/direcciones deben estar cerca para que puedan cancelarse mutuamente (y estamos en un vértice pancromático). Esto se logra utilizando el mismo truco que [4], en el que hacemos un número constante de copias de GC, que difieren en que cada copia agrega un pequeño vector de desplazamiento a sus copias de P [VX], P [Vy] yp [vz] (que se derivan del original utilizando el dispositivo de adición de [7]). Usando los dispositivos de adición y multiplicación de [7] promedimos las direcciones y agregamos un pequeño múltiplo de este promedio a (P [VX], P [VY], P [VZ]). En un equilibrio de Nash, las salidas de cada copia se cancelarán entre sí. El ancho de ruta de todo el juego es, como máximo, M veces el camino de ruta GC.8. Problemas abiertos El problema más importante que dejó este documento es si es posible encontrar un equilibrio NASH de un juego gráfico en un árbol de grados limitados en tiempo polinómico. Nuestra construcción muestra que cualquier algoritmo de dos pasos que almacene explícitamente las políticas de punto de interrupción necesita tiempo y espacio exponenciales. Sin embargo, no impide la existencia de un algoritmo que se basa en una idea similar, pero, en lugar de calcular toda la política de punto de interrupción para cada vértice, utiliza un pequeño número de pases adicionales a través del gráfico para decidir qué (tamaño polinomial)Se deben calcular partes de cada política de punto de interrupción. En particular, dicho algoritmo puede basarse en el algoritmo de aproximación de [8], donde el valor de se elige adaptivamente. Otra pregunta intrigante está relacionada con el hecho de que el gráfico para el que construimos una política de punto de interrupción de tamaño exponencial tiene el ancho de ruta 2, mientras que nuestros resultados positivos son para una ruta, es decir, un gráfico de viento de ruta 1. No está claro si para algún gráfico de gráfico de ruta limitado 1 el tiempo de ejecución de (la versión basada en políticas de punto de interrupción de) nuestro algoritmo será polinomio. En particular, es instructivo considerar un gráfico de oruga, es decir, el gráfico que se puede obtener de TN eliminando los vértices S1 ,..., Sn. Para este gráfico, se obtiene la mejor política de respuesta de un vértice VK en la columna vertebral de la oruga combinando la mejor política de respuesta de su predecesor en la columna vertebral VK - 1 y su otro hijo TK;Dado que este último es una hoja, su mejor política de respuesta es trivial (es decir, [0, 1] 2, [0, 1] × {0}, o [0, 1] × {1}) o consta de dos horizontalessegmentos y un segmento vertical de la forma {α} × [0, 1] que los conecta. Suponiendo por conveniencia que b (vk, tk) = [0, α] × {0} ∪ {α} × [0, 1] ∪ [α, 1] × {1}, y F es la función de indiferencia para VK,Observamos que la mejor política de respuesta para VK consta de 5 componentes: ˆf (0), ˆf (1) y tres componentes que corresponden a [0, α] × {0}, {α} × [0, 1],y [α, 1] × {1}. Por lo tanto, se puede pensar en construir B (VK+1, VK) como el siguiente proceso: Turn B (VK, VK - 1) por π/2, córtelo a lo largo de la línea (ahora horizontal) VK = α, aplique una fraccionadaTransformación lineal a la coordenada horizontal de ambas partes y vuelva a conectarlas usando la imagen del segmento {α} × [0, 1] bajo f.Esto implica que el problema de limitar el tamaño de la mejor política de respuesta (o, alternativamente, la política de punto de interrupción), puede verse como una generalización del siguiente problema de geometría computacional, que creemos que puede ser de interés independiente: el problema 1. Dada una colección de segmentos de eje paralelo en R2, considere la siguiente operación: elija una línea de eje paralelo LI (ya sea vertical u horizontal), corte el plano a lo largo de esta línea y cambie una de las dos partes resultantes por una cantidad arbitraria Δi;Como resultado, algunos segmentos se dividirán en dos partes. Vuelva a conectar estas partes, es decir, para cada segmento de la forma [A, B] × {C} que se transformó en [A, T] × {C + ΔI} y [T, B] × {C}, introduce un segmento{T} × [C, C+ΔI]. ¿Es posible comenzar con el segmento [0, 1] y después de N, las operaciones obtienen un conjunto que no puede representarse como una unión de segmentos de línea de poli (n)? En caso afirmativo, ¿puede ser el caso de que en este conjunto no haya una ruta con un número polinomial de giros que conecta los puntos finales del segmento original? Resulta que, en general, la respuesta a la primera pregunta es positiva, es decir, después de n pasos, es posible obtener un conjunto que consiste en segmentos θ (CN) para algunos C> 0. Esto implica que incluso para una oruga, la mejor política de respuesta puede ser exponencialmente grande. Sin embargo, en nuestro ejemplo (que se omite a partir de esta versión del documento debido a limitaciones de espacio), existe una ruta de tamaño polinomial a través de la mejor política de respuesta, es decir, no prueba que la política de punto de interrupción sea necesariamente exponencial de tamaño. Si uno puede probar que este es siempre el caso, puede ser posible adaptar esta prueba para demostrar que puede haber una brecha exponencial entre los tamaños de las mejores políticas de respuesta y las políticas de punto de ruptura.9. Referencias [1] H. Bodlaender y T. Kloks. Algoritmos eficientes y constructivos para el ancho de ruta y el ancho de árbol de los gráficos. Journal of Algorithms, 21: 358-402, 1996. [2] X. Chen y X. Deng.3-NASH es PPAD-COMPLETO. Informe técnico TR-05-134, Coloquio electrónico en complejidad computacional, 2005. [3] X. Chen y X. Deng. Liquidando la complejidad del equilibrio NASH de 2 jugadores. Informe técnico TR-05-140, Coloquio electrónico en complejidad computacional, 2005. [4] C. Daskalakis, P. Goldberg y C. Papadimitriou. La complejidad de calcular un equilibrio de Nash. En Actas del 38º Simposio ACM sobre la teoría de la computación, 2006. [5] C. Daskalakis y C. Papadimitriou. Los juegos de tres jugadores son difíciles. Informe técnico TR-05-139, Coloquio electrónico en complejidad computacional, 2005. [6] E. Elkind, L. Goldberg y P. Goldberg. Equilibrios de Nash en juegos gráficos en árboles revisitados. Informe técnico TR-06-005, Coloquio electrónico en complejidad computacional, 2006. [7] P. Goldberg y C. Papadimitriou. Reducibilidad entre problemas de equilibrio. En Actas del 38º Simposio ACM sobre Teoría de la Computación, 2006. [8] M. Kearns, M. Littman y S. Singh. Modelos gráficos para la teoría de juegos. En Actas de la 17ª Conferencia sobre Incertidumbre en Inteligencia Artificial, 2001. [9] M. Littman, M. Kearns y S. Singh. Un algoritmo exacto eficiente para juegos gráficos conectados individualmente. En Actas de la 15ª Conferencia Anual sobre Sistemas de Procesamiento de Información Neural, 2001. [10] L. Ortiz y M. Kearns. Propagación de Nash para juegos gráficos de Loopy. En Actas de la 17ª Conferencia Anual sobre Sistemas de Procesamiento de Información Neural, 2003. [11] C. Papadimitriou. Sobre la complejidad del argumento de paridad y otras pruebas de existencia ineficientes. J. Comput. Syst. Sci., 48 (3): 498-532, 1994. 109