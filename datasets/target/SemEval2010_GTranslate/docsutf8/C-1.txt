El descubrimiento de servicios de cuadrícula escalable basado en los autores UDDI * * se enumeran en orden alfabético. Sujata Banerjee $, Sujoy Basu $, Shishir Garg, Sukesh Garg, Sung-Ju Lee $, Pramila Mullan, Puneet Sharma $ $ HP Labs 1501 Page Mill Road Palo Alto, CA, 94304 USA +1-650-857-2137 {Sujata.banerjee, sujoy.basu, sungju.lee, puneet.sharma}@hp.com France Telecom R&D Division 801 Gateway Blvd, # 500 South San Francisco, CA, 94080 USA +1 650 -875-1500 {Shishir.garg, Sukesh.garg, pramila.mullan}@francetelecom.com Resumen El descubrimiento eficiente de los servicios de la red es esencial para el éxito de la computación de la red. La estandarización de las redes basadas en los servicios web ha resultado en la necesidad de que los mecanismos de descubrimiento de servicios web escalables se implementaran en cuadrículas a pesar de que UDDI ha sido el estándar de la industria de facto para el descubrimiento de servicios web, requisitos impuestos de replicación estrecha entre los registros y la faltadel control autónomo ha obstaculizado severamente su despliegue y uso generalizado. Con el advenimiento de la cuadrícula, el problema de la escalabilidad de UDDI se convertirá en un obstáculo que evitará su despliegue en las redes. En este artículo presentamos nuestra arquitectura de descubrimiento de servicio web distribuido, llamada Dude (motor de implementación UDDI distribuido). Dude aprovecha DHT (tablas hash distribuidas) como un mecanismo de cita entre múltiples registros UDDI. Dude permite a los consumidores consultar múltiples registros, al mismo tiempo que permiten que las organizaciones tengan un control autónomo sobre sus registros. Según el prototipo preliminar en PlanetLab, creemos que la arquitectura de tipo puede apoyar la distribución efectiva de los registros de UDDI, lo que hace que UDDI sea más sólido y también robusto y también.abordar sus problemas de escala. Además, la arquitectura de tipo para distribución escalable se puede aplicar más allá de UDDI a cualquier mecanismo de descubrimiento de servicios de cuadrícula. Categorías y descriptores de sujetos C2.4 [Sistemas distribuidos] Términos generales Diseño, experimentación, estandarización.1. Introducción El descubrimiento eficiente de los servicios de la red es esencial para el éxito de la computación de la red. La estandarización de las redes basadas en los servicios web ha resultado en la necesidad de un permiso de servicio web escalable para hacer que las copias digitales o difíciles de todo o parte de este trabajo para uso personal o en el aula se otorguen sin tarifa, siempre que las copias no sean con fines de lucroo ventaja comercial y esas copias llevan este aviso y la cita completa en la primera página. Para copiar lo contrario, volver a publicar, publicar en servidores o redistribuir a las listas, requiere un permiso específico previo y/o una tarifa. MGC 05, 28 de noviembre al 2 de diciembre de 2005 Grenoble, Mecanismos de descubrimiento de Francia que se desplegarán en cuadrículas. Los servicios de descubrimiento de red brindan la capacidad de monitorear y descubrir recursos y servicios en cuadrículas. Proporcionan la capacidad de consultar y suscribirse a la información de recursos/servicios. Además, se pueden requerir trampas de umbral para indicar un cambio específico en las condiciones existentes. El estado de los datos debe mantenerse en un estado suave para que la información más reciente siempre esté disponible. La información recopilada debe proporcionarse a una variedad de sistemas con el fin de utilizar la red o probar información sumaria. Sin embargo, el problema fundamental es la necesidad de ser escalable para manejar grandes cantidades de datos de múltiples fuentes. La comunidad de servicios web ha abordado la necesidad de descubrimiento de servicios, antes de que se anticipara las redes, a través de un estándar de la industria llamado UDDI. Sin embargo, a pesar de que UDDI ha sido el estándar de la industria de facto para el descubrimiento de servicios web, los requisitos impuestos de reflexión estrecha entre los registros y la falta de control autónomo, entre otras cosas, ha obstaculizado severamente su despliegue y uso generalizado [7]. Con el advenimiento de la red calculando el problema de escalabilidad con UDDI se convertirá en un obstáculo que evitará su implementación en las redes. Este documento aborda el problema de escalabilidad y una forma de encontrar servicios en múltiples registros en UDDI mediante el desarrollo de una arquitectura de descubrimiento de servicios web distribuidos. La distribución de la funcionalidad UDDI se puede lograr de múltiples maneras y tal vez utilizando diferentes infraestructuras/plataformas informáticas distribuidas (por ejemplo, Corba, DCE, etc.). En este artículo exploramos cómo se puede aprovechar la tecnología de la tabla de hash distribuida (DHT) para desarrollar una arquitectura de descubrimiento de servicios web distribuidos escalables. Un DHT es un sistema distribuido de igual a igual (P2P) que forma una superposición estructurada que permite un enrutamiento más eficiente que la red subyacente. Esta elección de diseño crucial está motivada por dos factores. El primer factor motivador es la simplicidad inherente de la abstracción Put/Get que proporcionan los DHT, lo que facilita la construcción de aplicaciones rápidamente además de los DHT. Reconocemos que tener solo esta abstracción puede no ser suficiente para todas las aplicaciones distribuidas, pero para el objetivo en cuestión, funciona muy bien, ya que quedará claro más adelante. Otras plataformas de computación distribuidas/middleware, al tiempo que proporcionan más funcionalidad, tienen una sobrecarga y complejidad mucho más altas. El segundo factor motivador se deriva del hecho de que los DHT son una herramienta relativamente nueva para construir aplicaciones distribuidas y nos gustaría probar su potencial aplicándolo al problema de distribuir UDDI. En la siguiente sección, proporcionamos una breve descripción de los servicios de información de la red, UDDI y sus limitaciones, que es seguida por una visión general de los DHT en la Sección 3. La Sección 4 describe nuestra arquitectura propuesta con detalles sobre casos de uso. En la Sección 5, el artículo 2 describimos nuestra implementación actual, seguida de nuestros hallazgos en la Sección 6. La Sección 7 discute el trabajo relacionado en esta área y la Sección 8 contiene nuestros comentarios finales.2. Background 2.1 Servicio de cuadrícula Discovery Computing se basa en estándares que utilizan la tecnología de servicios web. En la arquitectura presentada en [6], la función de descubrimiento de servicios se asigna a un servicio de red especializado llamado Registro. La implementación de la versión del servicio web del servicio de monitoreo y descubrimiento (WS MDS), también conocido como el componente MDS4 de Globus Toolkit versión 4 (GT4), incluye dicho registro en forma de recursos de servicio índice y propiedades de servicio sonrecopilado e indexado por este servicio. Su función básica lo hace similar al registro UDDI. Para alcanzar la escalabilidad, los servicios de índice de diferentes contenedores de globo pueden registrarse entre sí de manera jerárquica para agregar datos. Este enfoque para alcanzar la escalabilidad funciona mejor en las organizaciones virtuales jerárquicas (VO), y expandir una búsqueda para encontrar suficiente número de coincidencias implica atravesar la jerarquía. Específicamente, este enfoque no es una buena coincidencia para los sistemas que intentan explotar la convergencia de la reducción de la red y la computación entre igual [5].2.2 UDDI Más allá de la computación de la cuadrícula, el problema del descubrimiento de servicios debe abordarse de manera más general en la comunidad de servicios web. Una vez más, la escalabilidad es una gran preocupación ya que millones de compradores que buscan servicios específicos deben encontrar todos los vendedores potenciales del servicio que puedan satisfacer sus necesidades. Aunque hay diferentes formas de hacer esto, los comités de estándares de servicios web abordan este requisito a través de una especificación llamada UDDI (descripción universal, descubrimiento e integración). Un registro UDDI permite que una empresa ingrese tres tipos de información en un registro UDDI: páginas blancas, páginas amarillas y páginas verdes. La intención de UDDIS es funcionar como un registro de servicios al igual que las páginas amarillas es un registro para las empresas. Al igual que en las páginas amarillas, las empresas se registran y sus servicios en diferentes categorías. En UDDI, las páginas blancas son una lista de las entidades comerciales. Las páginas verdes representan la información técnica que es necesaria para invocar un servicio determinado. Por lo tanto, al navegar por un registro UDDI, un desarrollador debe poder localizar un servicio y una empresa y averiguar cómo invocar el servicio. Cuando se ofreció inicialmente UDDI, proporcionó mucho potencial. Sin embargo, hoy encontramos que UDDI no se ha implementado ampliamente en Internet. De hecho, los únicos usos conocidos de UDDI son los conocidos como registros privados de UDDI dentro de los límites de las empresas. Los lectores pueden consultar [7] para obtener un artículo reciente que discute las deficiencias de UDDI y las propiedades de un registro de servicio ideal. La mejora del estándar UDDI continúa con toda su fuerza y UDDI versión 3 (V3) se aprobó recientemente como un estándar de OASIS. Sin embargo, UDDI hoy tiene problemas que no se han abordado, como la escalabilidad y la autonomía de los registros individuales. UDDI V3 proporciona un mayor soporte para entornos de múltiples regys basados en la portabilidad de las claves al permitir que las claves se vuelvan a registrar en múltiples registros, la capacidad de vincular los registros en varias topologías está habilitada de manera efectiva. Sin embargo, no se proporciona una descripción normativa de estas topologías en la especificación UDDI en este punto. Las mejoras dentro de UDDI V3 que permiten el apoyo a los entornos de múltiples regularidades son significativas y abieren la posibilidad de investigaciones adicionales sobre cómo se pueden implementar entornos multirregratrales. Un escenario de implementación recomendado propuesto por la especificación UDDI V3.0.2 es utilizar los registros comerciales de UDDI como registros raíz, y es posible habilitar esto utilizando nuestra solución.2.3 Tablas de hash distribuidas Una tabla de hash distribuida (DHT) es un sistema distribuido de igual a igual (P2P) que forma una superposición estructurada que permite un enrutamiento más eficiente que la red subyacente. Mantiene una colección de pares de valor clave en los nodos que participan en esta estructura de gráficos. Para nuestra implementación, una clave es el hash de una palabra clave desde un nombre o descripción del servicio. Habrá múltiples valores para esta clave, uno para cada servicio que contenga la palabra clave. Al igual que cualquier otra estructura de datos de tabla hash, proporciona una interfaz simple que consiste en operaciones put () y get (). Esto debe hacerse con robustez debido a la naturaleza transitoria de los nodos en los sistemas P2P. El valor almacenado en el DHT puede ser cualquier objeto o una copia o referencia a él. Las teclas DHT se obtienen de un gran espacio de identificadores. Una función hash, como MD5 o SHA-1, se aplica a un nombre de objeto para obtener su clave DHT. Los nodos en un DHT también se asignan al mismo espacio de identificadores aplicando la función hash a su identificador, como la dirección IP y el número de puerto, o la clave pública. El espacio del identificador se asigna a los nodos de manera distribuida y determinista, de modo que el enrutamiento y la búsqueda se pueden realizar de manera eficiente. Los nodos de un DHT mantienen enlaces a algunos de los otros nodos en el DHT. El patrón de estos enlaces se conoce como la geometría DHTS. Por ejemplo, en el Bamboo DHT [11], y en la masa DHT [8] en el que se basa el bambú, los nodos mantienen enlaces a los nodos vecinos y a otros nodos distantes que se encuentran en una tabla de enrutamiento. La entrada de la tabla de enrutamiento en la fila I y la columna J, denotó RI [j], es otro nodo cuyo identificador coincide con los propios dígitos primero I, y cuyo dígito (i + 1) ST es j. La tabla de enrutamiento permite un enrutamiento de superposición eficiente. El bambú, como todos los DHT, especifica los algoritmos a seguir cuando un nodo se une a la red superpuesta, o cuando un nodo falla o deja la red, la geometría debe mantenerse incluso cuando esta velocidad es alta. Para lograr un enrutamiento o búsqueda consistente, se debe enrutar una clave DHT al nodo con el identificador numéricamente más cercano. Para obtener detalles sobre cómo se construyen y mantienen las tablas de enrutamiento, se hace referencia al lector [8, 11].3. Arquitectura propuesta de jerarquías de registro UDDI basadas en DHT Como se mencionó anteriormente, proponemos construir un sistema UDDI distribuido sobre una infraestructura DHT. Esta elección está motivada principalmente por la simplicidad de la abstracción Put/Get que los DHT proporcionan, lo cual es lo suficientemente potente para la tarea en cuestión, especialmente porque planeamos validar nuestro enfoque con una implementación que se ejecuta en PlanetLab [9]. Una motivación secundaria es comprender los problemas de implementación con los sistemas basados en DHT. Se han construido varias aplicaciones como superposiciones utilizando DHT, como almacenamiento de archivos distribuidos, bases de datos, publicar sistemas de suscripción y redes de distribución de contenido. En nuestro caso, estamos construyendo una red de superposición basada en DHT de registros UDDI, donde el DHT actúa como una red de encuentro que conecta múltiples registros. En el escenario de computación de la cuadrícula, una red superpuesta de múltiples registros de UDDI parece una alternativa interesante a los registros UDDI Public Artículo 2 que actualmente mantienen Microsoft, IBM, SAP y NTT. Además, nuestro objetivo es no cambiar ninguna de las interfaces UDDI para los clientes y los editores. La Figura 1 destaca la arquitectura propuesta para el marco de registro UDDI basado en DHT. Los nodos UDDI se replican en un registro UDDI según el estándar UDDI actual. Sin embargo, cada registro local tiene un registro de representación local que media entre el registro local de UDDI y el servicio DHT. El servicio DHT es el pegamento que conecta los registros proxy juntos y facilita la búsqueda de registros. Figura 1: La información del servicio de arquitectura de tipo se puede dispersar a varios registros de UDDI para promover la escalabilidad. El Registro Proxy publica, realiza consultas y elimina la información de los registros dispersos de UDDI. Sin embargo, el alcance de las consultas se limita a registros relevantes. El DHT proporciona información sobre los registros relevantes. La idea central en la arquitectura es completar los nodos DHT con la información necesaria de los proxies que permite una búsqueda fácil y ubicua cuando se realizan consultas. Cuando se agrega un nuevo servicio a un registro, todos los términos de búsqueda potenciales son cuidados por el proxy y se usan como claves DHT para publicar el servicio en el DHT. El valor almacenado para este servicio identifica de manera única el servicio e incluye la URL de un registro y la clave UDDI única del servicio en ese registro. De manera similar, cuando llegan consultas, se analizan y se identifican un conjunto de términos de búsqueda. Estos términos de búsqueda son hash y los valores almacenados con esos valores hash se recuperan del DHT. Tenga en cuenta que un proxy no necesita conocer todos los nodos DHT;Necesita saber solo un nodo DHT (esto se hace como parte del proceso de arranque) y, como se describe en la Sección 2.3, este nodo DHT puede enrutar la consulta según sea necesario a los otros nodos en la superposición de DHT. Describimos tres escenarios de uso más adelante que se ocupan de agregar un nuevo registro local, insertar un nuevo servicio y consultar un servicio. Además, el DHT optimiza el mecanismo de consulta UDDI. Este proceso se convierte en una búsqueda utilizando una clave única UDDI en lugar de una consulta utilizando un conjunto de parámetros de búsqueda. Esta clave y la URL del registro se obtienen buscando inicialmente en el DHT. La consulta DHT puede devolver múltiples valores para los servicios de coincidencia, y en cada uno de los registros coincidentes, el proxy realiza operaciones de búsqueda. El nombre del servicio se utiliza como hash para insertar la información del servicio. La información del servicio contiene la URL de consulta y la clave UDDI única para el registro que contiene el servicio. Podría haber múltiples registros asociados con un servicio determinado. La información del servicio se ajusta al siguiente esquema.<xs: esquema xmlns: xs = http: //www.w3.org/2001/xmlschema elementFormDefault = Atribute de AtributeFormdefault = no calificado> <xs: elemento name = registrados> <xs: anotación> <xs: documentación> información de servicio <//////xs: documentación> </xs: anotación> <xs: complextype> <xs: secuence> <xs: element name = registry maxoccurs = unounded> <xs: complextype> <xs: secuence> <xs: element name = name/><xs: elemento name = key maxoccurs = Unbounded/> </xs: secuencia>… </xs: esquema> Puede haber múltiples registros proxy uddi en esta arquitectura. La ventaja de esto es introducir interacciones distribuidas entre los clientes y registros UDDI. La organización también puede decidir qué información está disponible de los registros locales mediante la implementación de políticas en el registro proxy.3.1 Secuencia de operaciones En esta sección, demostramos cuál debería ser la secuencia de operaciones para tres escenarios cruciales: agregar un nuevo registro local, insertar un nuevo servicio y consultar un servicio. Otras operaciones como eliminar un registro, eliminar un servicio, etc. son similares y se omiten aquí. Figura 2: Diagrama de secuencia: agregue un nuevo registro local Agregue un nuevo Registro UDDI local La Figura 2 contiene un diagrama de secuencia que ilustra cómo se agrega un nuevo registro UDDI a la red de registros UDDI. El nuevo registro se registra con su registro de poder. El registro de poder a su vez consulta el nuevo registro para todos los servicios que tiene el registro local de UDDI Registro UDDI Local Registro de Registro Local Registro de proxy de DHT Registro de poder de distribución basado en DHT Artistra 2 almacenado en sus bases de datos y, a su vez, registra cada una de esas entradas con el DHT el DHT el DHT el DHT el DHT.. Figura 3: Diagrama de secuencia: agregue un nuevo servicio Agregue un nuevo servicio, ¡el diagrama de casos de uso representado por error! Fuente de referencia no encontrada.Destaca cómo un cliente publica un nuevo servicio al registro UDDI. Para interactuar con el registro, un cliente debe saber cómo contactar a su registro de poder local. Luego publica un servicio con el registro de poder que a su vez publica el servicio con el registro UDDI local y recibe la clave UDDI de la entrada del registro. Luego, se publican nuevos pares de valor clave en el DHT, donde cada clave se obtiene al fabricar una palabra clave de búsqueda del servicio y el valor consiste en la URL de consulta del registro y la clave UDDI. Figura 4: Diagrama de secuencia: consulta para una consulta de servicio Un servicio La Figura 4 muestra cómo un cliente consulta el registro UDDI para un servicio. Una vez más, el cliente necesita saber cómo contactar a su registro de poder local e invoca la solicitud de servicio de consulta. El registro proxy a su vez contacta a uno de los nodos DHT para determinar las consultas DHT utilizando los términos de búsqueda. Como se explicó anteriormente en el contexto de la Figura 1, se pueden recuperar múltiples valores del DHT. Cada valor incluye la URL de consulta de un registro y la clave UDDI única de un servicio coincidente en ese registro. El proxy luego contacta los registros coincidentes y espera la respuesta de las operaciones de búsqueda utilizando las claves UDDI correspondientes. Al recibir las respuestas, el Registro Proxy recopila todas las respuestas y devuelve el conjunto agregado de servicios al cliente. Ahora ilustraremos estas operaciones usando un ejemplo. Considere un cliente que contactó a su proxy local para publicar un servicio llamado accesorios de computadora. El proxy sigue los pasos de la Figura 3 para agregar el servicio al registro UDDI 1, y también publica dos entradas en el DHT. Las claves de estas entradas se obtienen al hash las palabras computadora y accesorios, respectivamente. Ambas entradas tienen el mismo valor que consiste en la URL de consulta de este registro y la clave UDDI única devuelta por el registro para este servicio. A continuación, consideramos a otro cliente que publica un servicio llamado reparación de computadoras a través de su proxy al registro UDDI 2. Un proceso similar da como resultado 2 entradas más agregadas al DHT. Recuerde que nuestra implementación de DHT puede tener múltiples entradas con la misma clave. Si seguimos los pasos de la Figura 4 para un cliente que envía una consulta a su proxy usando la computadora de la palabra, vemos que el DHT se consulta con el hash de la computadora de la palabra como clave. Esto recupera la URL de consulta y las respectivas claves UDDI de ambos servicios mencionados anteriormente en este ejemplo. El proxy puede hacer una operación de búsqueda simple en los registros UDDI 1 y 2. Está claro que a medida que aumenta el número de registros y clientes de UDDI, este proceso de búsqueda solo en registros UDDI relevantes es más escalable que hacer una búsqueda completa utilizando la computadora Word en todos los registros UDDI.4. Implementación En esta sección, describimos nuestra implementación que actualmente se implementa en PlanetLab [9]. PlanetLab es una plataforma abierta y distribuida a nivel mundial para desarrollar, implementar y acceder a los servicios de red. Actualmente tiene 527 máquinas, alojadas por 249 sitios, que abarcan más de 25 países. Las máquinas PlanetLab están alojadas por instituciones de investigación/académicas, así como de empresas industriales. France Telecom y HP son dos de los principales partidarios de la industria para PlanetLab. Cada máquina host de PlanetLab está conectada a Internet y ejecuta un paquete de software común que incluye un sistema operativo basado en Linux que admite la virtualización del servidor. Por lo tanto, los usuarios pueden desarrollar y experimentar con nuevos servicios en condiciones del mundo real. La ventaja de usar PlanetLab es que podemos probar la arquitectura de tipo en condiciones del mundo real con una base de nodo geográficamente dispersa geográficamente a gran escala. Debido a la disponibilidad de Juddi, un registro UDDI V2 de código abierto (http://www.juddi.org) y la falta de registro UDDI V3 fácilmente disponible, se tomó una decisión de usar UDDI V2. La estandarización de UDDI V3 es reciente y tenemos la intención de extender este trabajo para apoyar UDDI V3 y versiones posteriores en el futuro. El registro de proxy se implementa modificando la fuente de Juddi para habilitar la publicación, consultar y eliminar la información del servicio de un DHT. Además, también permite consultar múltiples registros y recopilar la respuesta usando UDDI4J [13]. Para la implementación de DHT, utilizamos el código DHT de bambú [11]. El Bamboo DHT permite que múltiples registros proxy publiquen y eliminen la información del servicio de sus respectivos registros UDDI, así como consulten los servicios de todos los registros. El proxy utiliza el nombre del servicio como entrada a la función DHTS Hash Artículo 2 para obtener la tecla DHT. El valor que se almacena en el DHT usando esta clave es el URI del registro junto con la clave UDDI del servicio. Esto asegura que cuando el Registro de Proxy consulte los servicios con un nombre determinado, recupere las teclas URI y UDDI para las entradas coincidentes. Usando estos resultados devueltos, el proxy puede hacer operaciones de búsqueda rápidas en los respectivos registros UDDI. Las claves UDDI hacen innecesaria repetir la búsqueda en los registros UDDI con el nombre del servicio. Hasta ahora hemos descrito el proceso de coincidencia exacta en el nombre del servicio. Sin embargo, hay tipos adicionales de búsqueda que deben ser compatibles. En primer lugar, la búsqueda solicitada podría ser insensible al caso. Para respaldar eso, el registro de proxy tiene que publicar el mismo servicio una vez utilizando el nombre exactamente como se ingresó en el registro UDDI, y una vez con el nombre convertido a todas las letras de los casos más bajos. Para hacer una búsqueda insensible al caso, el registro de proxy simplemente tiene que convertir la cadena de consulta en letras de caso inferior. En segundo lugar, el usuario podría consultar en función del prefijo de un nombre de servicio. De hecho, este es el comportamiento predeterminado de la búsqueda en UDDI. En otras palabras, un comodín está implícito al final del nombre del servicio que se busca. Para respaldar esto de manera eficiente en el DHT, nuestros registros proxy deben tomar prefijos del nombre del servicio de una longitud variable y publicar la clave URI y UDDI varias veces, una vez que use cada prefijo. Por ejemplo, los tamaños de prefijo elegidos en una implementación pueden ser de 5, 10, 15 y 20 caracteres. Si se envía una búsqueda de los primeros 12 caracteres de un nombre de servicio, el registro de proxy consultará el DHT con los primeros 10 caracteres de la cadena de búsqueda y luego refinar el resultado de la búsqueda para garantizar que la coincidencia se extienda al 12º carácter. Si la cadena de búsqueda tiene menos de 5 caracteres, y la búsqueda es de un prefijo en lugar de una coincidencia exacta, el DHT no puede ser de ayuda, a menos que cada servicio se publique en el DHT con prefijo de longitud 0. El uso de este prefijo nulo enviará una copia de cada servicio anunciado al nodo DHT al que mapea el hash del prefijo nulo. Dado que esto puede conducir a la carga de carga, una mejor solución podría ser usar el DHT solo para obtener una lista de todos los registros UDDI y enviar la búsqueda a todos en las ubicaciones que se buscarán. En tercer lugar, el nombre del servicio que se busca puede ser una expresión regular, como una con caracteres comodines incrustados. Por ejemplo, una búsqueda de%s de jardín debería coincidir con los suministros de jardín y las herramientas de jardinería. Esto se tratará de manera similar al caso anterior, ya que el DHT debe ser consultado con el prefijo más largo disponible. Los resultados devueltos deben refinarse para garantizar que la expresión regular coincida. La Figura 5 muestra el diagrama de red para nuestra implementación. Hay dos parejas de registro UDDI y Juddi. Considere un cliente que contacta el proxy UDDI en Grouse.hpl.hp.com. El proxy realiza una búsqueda del DHT usando la cadena de consulta o un prefijo. Esto implica contactar a uno de los nodos DHT, como Pli1-Br3.hpl.hp.com, que sirve como puerta de enlace al DHT para Grouse.hpl.hp.com, en función del archivo de configuración de los últimos. El nodo DHT puede luego enrutar la consulta a uno de los otros nodos DHT que es responsable de la tecla DHT a la que se asigna la cadena de la consulta. Los resultados de la búsqueda DHT regresan a Pli1-Br3.hpl.hp.com, que los reenvía a Grouse.hpl.hp.com. Los resultados pueden incluir algunos servicios de cada uno de los registros de Juddi. Por lo tanto, el registro de proxy realiza las operaciones de búsqueda en PlanetLab1 y PlanetLab2.RDFrancetelecom.com para sus respectivas entradas enumeradas en los resultados de búsqueda. Las respuestas a estas búsquedas son recopiladas por el Registro Proxy y se devuelven al cliente. Figura 5 Diagrama de red 5. Trabajo relacionado Se ha propuesto un marco para el descubrimiento de servicios basado en Qo en cuadrículas en [18]. UDDIE, un registro de UDDI extendido para publicar y descubrir servicios basados en parámetros de QoS, se propone en [19]. Nuestro trabajo es complementario ya que nos enfocamos en cómo federar los registros de UDDI y abordar el problema de escalabilidad con UDDI. El proxy Dude puede publicar las propiedades del servicio admitidas por UDDIE en las consultas DHT y Rango de soporte utilizando técnicas propuestas para tales consultas en DHTS. Luego podemos ofrecer los beneficios de escalabilidad de nuestra solución actual a los registros UDDI y UDDIE. Descubrir los servicios que cumplen con los requisitos de QoS y precios se han estudiado en el contexto de una economía de la red, para que los programadores de redes puedan usar varios modelos de mercado, como mercados de productos básicos y subastas. El directorio de mercado de la cuadrícula [20] se propuso para este propósito. En [12], los autores presentan un emparejador basado en la ontología. Las descripciones de recursos y solicitudes se expresan en el esquema RDF, un lenguaje de marcado semántico. Las reglas de emparejamiento se expresan en Triple, un idioma basado en la lógica de la bocina. Aunque nuestra implementación actual se centra en la versión 2 de UDDI, en el futuro consideraremos extensiones semánticas a UDDI, WS-Descubrube [16] y otros estándares de computación de la cuadrícula, como el Servicio de Monitoreo y Descubrimiento (MDS) [10]. Por lo tanto, la extensión más simple de nuestro trabajo podría implicar el uso del DHT para hacer una búsqueda inicial basada en sintaxis para identificar los registros locales que deben ser contactados. Luego, el registro de proxy puede contactar a estos registros, que realizan un emparejamiento semántico para identificar sus coincidencias, que luego se fusionan en el registro de proxy y se devuelven al cliente. La convergencia de la cuadrícula y la computación P2P se ha explorado en [5]. Gridvine [2] construye una superposición semántica lógica encima de una capa física que consiste en P-Grid [1], una superposición estructurada basada en el árbol de búsqueda distribuido que utiliza el enrutamiento basado en prefijos y cambia las rutas de superposición como parte del protocolo de mantenimiento de la redpara adaptarse a la carga en diferentes partes del espacio de tecla. Se ha construido un servicio UDDI federado [4] en la parte superior del sistema Publish-Suscribe Planetp [3] para las comunidades P2P no estructuradas. El enfoque de este trabajo ha estado en la gestión del servicio federado. El servicio UDDI se trata como un servicio de Artículo 2 de la aplicación que se administrará en su marco. Por lo tanto, no abordan el problema de la escalabilidad en UDDI y, en su lugar, usan una replicación simple. En [21], los autores describen un sistema de extensión UDDI (UX) que lanza una consulta federada solo si los resultados encontrados localmente no son adecuados. Si bien el servidor UX se posiciona como un intermediario de manera similar al proxy UDDI descrito en nuestro marco de tipo, se centra más en el marco de QoS y no intenta implementar un mecanismo de federación perfecta como nuestro enfoque basado en DHT. En [22] D2HT describe un marco de descubrimiento construido sobre DHT. Sin embargo, hemos elegido usar UDDI en la parte superior de DHT. D2HT ha utilizado (sistema de gestión de agentes) AMS/ (facilitador de directorio) DF sobre DHT.6. Conclusiones y trabajo futuro En este documento, hemos descrito una arquitectura distribuida para respaldar el descubrimiento a gran escala de servicios web. Nuestra arquitectura permitirá a las organizaciones mantener un control autónomo sobre sus registros UDDI y, al mismo tiempo, permitir a los clientes consultar múltiples registros simultáneamente. Los clientes son ajenos al enfoque de poder transparente que hemos adoptado y enriqueciendo una respuesta más rica y completa a sus consultas. Según las pruebas de prototipos iniciales, creemos que la arquitectura de tipo puede soportar una distribución efectiva de los registros de UDDI, lo que hace que UDDI sea más sólido y también abordar sus problemas de escala. El documento ha resuelto los problemas de escalabilidad con UDDI, pero no impide la aplicación de este enfoque a otros mecanismos de descubrimiento de servicios. Un ejemplo de otro mecanismo de descubrimiento de servicios que podría beneficiarse de dicho enfoque es Globus Toolkits MDS. Además, planeamos investigar otros aspectos del descubrimiento de servicios de red que extienden este trabajo. Algunos de estos aspectos incluyen la capacidad de suscribirse a la información de recursos/servicios, la capacidad de mantener estados blandos y la capacidad de proporcionar una variedad de vistas para diversos fines diferentes. Además, planeamos revisar las API del servicio para una solución de descubrimiento de servicios de cuadrícula que aprovecha las soluciones y especificaciones disponibles, así como el trabajo presentado en este documento.7. REFERENCIAS [1] N-Grid: un sistema P2P estructurado autoorganizado. K. Aberer, P. Cudr_e-Mauroux, A. Datta, Z. Sopotovic, M. Hauswirth, M. Punceva y R. Schmidt. ACM Sigmod Record, 32 (3), 2003. [2] Gridvine: construcción de redes de superposición semántica a escala de Internet Karl Aberer, Philippe Cudre-Mauroux, Manfred Hauswirth y Tim Van Pelt. Actas, 3er ISWC 2004, Hiroshima, Japón.[3] Planetp: Uso de chismes para crear contenido direccionable Comunidades de intercambio de información entre pares. F. M. Cuenca-Acuna, C. Peery, R. P. Martin y T. D. Nguyen. En Actas del Simposio del 12º INTL sobre HPDC, junio de 2003. [4] Servicios federados de autogestión. Francisco Matias Cuenca-Acuna y Thu D. Nguyen. En Actas del 23º IEEE International SRDS, 2004, Florianpolis, Brasil.[5] Sobre la muerte, los impuestos y la convergencia de P2P y la computación de la cuadrícula. Ian Foster y Adriana Iamnitchi. En Actas del 2º IPTP de 2003. [6] La fisiología de la red: una arquitectura de servicios de cuadrícula abierta para la integración de sistemas distribuidos, I. Foster, C. Kesselman, J. M. Nick y S. Tuecke. Presentado a Ogsi WG, Global Grid Forum, 22 de junio de 2002. Disponible en http://www.globus.org/alliance/publications/papers.php [7] ¿Fue el Registro de Servicio Universal A Dream?, Fred Hartman y Harris Reynolds, en el Web Services Journal, 2 de diciembre de 2004. [8] Pastry: ubicación y enrutamiento de objetos escalables y distribuidos para sistemas de pares de igual a gran escala. A. Rowstron y P. Druschel. En Proc.de IFIP/ACM Middleware, noviembre de 2001 [9] http://www.planet-lab.org [10] Servicios de información de cuadrícula para compartir recursos distribuidos. K. Czajkowski, S. Fitzgerald, I. Foster y C. Kesselman. Actas del IEEE HPDC-10, 2001. [11] Manejo del manejo en un DHT. S. Rhea, D. Geels, T. Roscoe y J. Kubiatowicz. Actas de la Conferencia Técnica Anual de Usenix, junio de 2004. [12] La coincidencia de recursos basados en la ontología en la red: la red se encuentra con la web semántica, Hongsuda Tangmunarunkit, Stefan Decker, Carl Kesselman. En Actas del segundo ISWC (2003), Miami, Florida.[13] UDDI4J Java Class Library: http://www124.ibm.com/developerworks/oss/uddi4j/ [14] Especificación UDDI V2: Disponible en http://uddi.org/ [15] UDDI V3.0.2 Especificación:http://uddi.org/ [16] Servicios web Dynamic Discovery (WS-Discovery), febrero de 2004. http://msdn.microsoft.com/ws/2004/02/discovery [17] Servicios de información (MDS): Conceptos clave.http://www.globus.org/toolkit/docs/4.0/info/key/ [18] G- Qosm: Descubrimiento del servicio de cuadrícula utilizando Propiedades de QoS, R J. Al-Ali, O.F. Rana, D.W.Walker, S. Jha y S. Sohail. Journal of Computing and Informatics (Número especial sobre computación en la red), ed: Domenico Laforenza, vol.21, No. 4, pp. 363-382, 2002. [19] Uddie: un registro extendido para servicios web, A. Shaikhali, O.F. Rana, R. Al-Ali y D.W.Walker, Taller sobre informática orientada al servicio: modelos, arquitecturas y aplicaciones en Saint Conference, Florida, EE. UU., Enero de 2003. IEEE Computer Society Press.[20] Un servicio de directorio de cuadrículas orientado al mercado para publicación y descubrimiento de proveedores de servicios de cuadrícula y sus servicios, J. Yu, S. Venugopal y R. Buyya, Journal of SuperComputing, Kluwer Academic Publishers, EE. UU., 2005. [21] ChenZhou, Liang-Tien Chia, Bilhanan Silverajan, Bu-Sung Lee: UX-Una arquitectura que proporciona un apoyo federado y consciente de QoS para UDDI. ICWS 2003: 171-176.[22] Kee-Hyun Choi, Ho-Jin Shin, Dong-Ryeol Shin, Service Discovery que admite la escalabilidad abierta utilizando la plataforma de agente FIPACO para redes ubicuas, Notas de conferencias en ciencias de la computación, volumen 3482, enero de 2005. Artículo 2