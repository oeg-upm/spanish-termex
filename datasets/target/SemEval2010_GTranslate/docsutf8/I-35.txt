Gestión de normas distribuidas en sistemas regulados de múltiples agentes ∗ Dorian Gaertner Dept. de Computing, Imperial College London, Londres SW7 2az, Reino Unido dg00@doc.ic.ac.uk Andres Garcia-Camino, Pablo Noriega, J.-A. Rodríguez-Aguilar IIIA-CSIC, 08193 Bellaterra, España {Andrés, Pablo, Jar}@iiia.csic.es Wamberto Vasconcelos Departamento de Ciencias de la Computación, Universidad de Aberdeen, Aberdeen AB24 3ue, Reino Unido Wvasconcelos@acm.ampliamente reconocido como un medio para coordinar sistemas de múltiples agentes. La gestión distribuida de las normas es un problema desafiante y observamos una falta de realizaciones computacionales verdaderamente distribuidas de modelos normativos. Para regular el comportamiento de los agentes autónomos que participan en múltiples actividades relacionadas, proponemos un modelo normativo, la estructura normativa (NS), un artefacto que se basa en la propagación de posiciones normativas (obligaciones, prohibiciones, permisos),como consecuencias de las acciones de los agentes. Dentro de un NS, pueden surgir conflictos debido a la naturaleza dinámica del MAS y la concurrencia de las acciones de los agentes. Sin embargo, garantizar la libertad de conflicto de un NS en el tiempo de diseño es computacionalmente intratable. Mostramos esto al formalizar la noción de conflicto, proporcionando un mapeo de NSS en redes de Petri de color y tomando prestados resultados teóricos bien conocidos de ese campo. Dado que se requiere una resolución de conflictos en línea, presentamos un algoritmo manejable para emplear distribuidos. Luego demostramos que este algoritmo es primordial para la promulgación distribuida de un ns. Categorías y descriptores de temas I.2.11 [Inteligencia artificial distribuida]: Idiomas y estructuras Algoritmos de términos generales, diseño, teoría 1. Introducción Una característica fundamental de los sistemas abiertos y regulados de múltiples agentes en los que interactúan los agentes autónomos es que los agentes participantes están destinados a cumplir con las convenciones del sistema. Las normas pueden usarse para modelar tales convenciones y, por lo tanto, como un medio para regular el comportamiento observable de los agentes [6, 29]. Hay muchas contribuciones sobre el tema de las normas de sociólogos, filósofos y lógicos (por ejemplo, [15, 28]). Sin embargo, hay muy pocas propuestas para las realizaciones computacionales de modelos normativos: la forma en que las normas pueden integrarse en el diseño y ejecución de la masa. Los pocos que existen (por ejemplo, [10, 13, 24]) funcionan de manera centralizada que crea cuellos de botella y puntos de falla individuales. Hasta donde sabemos, ninguna propuesta realmente respalda la promulgación distribuida de entornos normativos. En nuestro artículo, abordamos ese problema y proponemos medios para manejar compromisos conflictivos en sistemas abiertos, regulados y multiagentes de manera distribuida. El tipo de MAS regulado que imaginamos consiste en múltiples actividades relacionadas múltiples donde los agentes interactúan. Cada agente puede participar simultáneamente en varias actividades y cambiar de una actividad a otra. Las acciones de un agente dentro de una actividad pueden tener consecuencias en forma de posiciones normativas (es decir, obligaciones, permisos y prohibiciones) [26] que pueden limitar su comportamiento futuro. Por ejemplo, un agente comprador que se queda sin crédito puede tener prohibido hacer más ofertas, o un agente de vendedores está obligado a entregar después de cerrar un acuerdo. Suponemos que los agentes pueden optar por no cumplir con todas sus obligaciones y, por lo tanto, pueden ser sancionados por el MAS. Observe que, cuando se distribuyen actividades, las posiciones normativas deben fluir de las actividades en las que se generan a aquellos en los que surtan efecto. Por ejemplo, la obligación de los vendedores anteriores debe fluir (o ser propagada) de una actividad de negociación a una actividad de entrega. Dado que en un MAS abierto, regulado, uno no puede incorporar aspectos normativos en el diseño de los agentes, adoptamos la opinión de que el MAS debe complementarse con un conjunto separado de normas que regula aún más el comportamiento de los agentes participantes. Para modelar la separación de las preocupaciones entre el nivel de coordinación (interacciones de los agentes) y el nivel normativo (propagación de posiciones normativas), proponemos un artefacto llamado estructura normativa (NS). Dentro de un conflicto NS pueden surgir debido a la naturaleza dinámica de la MAS y la concurrencia de las acciones de los agentes. Por ejemplo, un agente puede estar obligado y prohibido a hacer el 636 978-81-904262-7-5 (RPS) c 2007 Ifaamas de la misma acción en una actividad. Dado que la regulación de un MAS implica que los agentes participantes deben ser conscientes de la validez de aquellas acciones que tienen lugar dentro de él, tales conflictos deben identificarse y posiblemente resolverse si se necesita un reclamo de validez para que un agente participe en una accióno ser sancionado. Sin embargo, garantizar la libertad de conflicto de un NS en el tiempo de diseño es computacionalmente intratable. Mostramos esto al formalizar la noción de conflicto, proporcionando un mapeo de NSS en redes de Petri de color (CPN) y tomando prestados resultados teóricos bien conocidos del campo de las CPN. Creemos que se requiere la detección y resolución de conflictos en línea. Por lo tanto, presentamos un algoritmo manejable para la resolución de conflictos. Este algoritmo es primordial para la promulgación distribuida de un ns. El papel está organizado de la siguiente manera. En la Sección 2 detallamos un escenario para servir como ejemplo en todo el documento. A continuación, en la Sección 3 definimos formalmente el artefacto de la estructura normativa. Más adelante, en la Sección 4 formalizamos la noción de conflicto para analizar posteriormente la complejidad de la detección de conflictos en términos de CPN en la Sección 5. La Sección 6 describe la gestión computacional de NSS describiendo su promulgación y presentando un algoritmo para la resolución de conflictos. Finalmente, comentamos sobre el trabajo relacionado, sacamos conclusiones e informamos sobre el trabajo futuro en la Sección 7. 2. Escenario Utilizamos un escenario de cadena de suministro en el que las empresas y las personas se unen en un mercado en línea para realizar negocios. El procedimiento de transacción general puede organizarse como seis actividades distribuidas, representadas como nodos en el diagrama en la Figura 1. Involucran a diferentes participantes cuyo comportamiento se coordina a través de protocolos. En este escenario, los agentes pueden desempeñar uno de los cuatro roles: Modelo de coordinación de negociación de pagos de registro de Marexit Modelo de coordinación de negociación Contrato Figura 1: Estructura de actividad del escenario Ketplace Contador (ACC), Cliente, Proveedor (Supp) y Gerentes de Warehouse (WM). Las flechas que conectan las actividades representan cómo los agentes pueden moverse de una actividad a otra. Después de registrarse en el mercado, los clientes y proveedores se reúnen en una actividad en la que negocian los términos de su transacción, es decir, precios, cantidades de bienes que se entregarán, plazos y otros detalles. En la actividad contractual, la orden se establece y se prepara una factura. Luego, el cliente participará en una actividad de pago, verificando su valía de crédito e instruyendo a su banco que transfiera la cantidad correcta de dinero. Mientras tanto, el proveedor organizará que se entreguen los productos (por ejemplo, a través de un gerente de almacén) en la actividad de entrega. Finalmente, los agentes pueden dejar el mercado ajustado a un protocolo de salida predeterminado. El contador del mercado participa en la mayoría de las actividades como un proveedor confiable de herramientas de auditoría. En el resto del documento, construiremos sobre este escenario para ejemplificar la noción de estructura normativa e ilustrar nuestro enfoque para la detección y resolución de conflictos en un entorno distribuido.3. La estructura normativa en los agentes de masa interactúa según los protocolos que naturalmente se distribuyen. Abogamos que las acciones en uno de esos protocolo pueden tener un efecto sobre la promulgación de otros protocolos. Ciertas acciones pueden estar prohibidas u obligatorias, por ejemplo. Tomamos que las posiciones normativas sean obligaciones, prohibiciones y permisos similares al trabajo descrito en [26]. La intención de agregar o eliminar una posición normativa que llamamos comando normativo. Las ocurrencias de posiciones normativas en un protocolo también pueden tener consecuencias para otros protocolos1. Para definir nuestro lenguaje de norma y especificar cómo se propagan las posiciones normativas, nos hemos inspirado en los sistemas de contexto múltiple [14]. Estos sistemas permiten la estructuración del conocimiento en distintas teorías formales y la definición de relaciones entre ellos. Las relaciones se expresan como reglas del puente: la deducibilidad de las fórmulas en algunos contextos conduce a la deducción de otras fórmulas en otros contextos. Recientemente, estos sistemas se han utilizado con éxito para definir arquitecturas de agentes [11, 23]. La metáfora se traduce en nuestro trabajo actual de la siguiente manera: la expresión de ilocuciones y/o la existencia de posiciones normativas en algunas escenas normativas conduce a la deducción de posiciones normativas en otras escenas normativas. Nos preocupa la propagación y distribución de posiciones normativas dentro de una red de escenas normativas distribuidas como consecuencia de las acciones de los agentes. Tomamos que las escenas normativas sean conjuntos de posiciones y expresiones normativas que están asociados con un protocolo de interacción subyacente correspondiente a una actividad. En esta sección, primero presentamos un lenguaje simple que captura estos aspectos e introducimos formalmente las nociones de la escena normativa, la regla de transición normativa y la estructura normativa. Damos la semántica prevista de estas reglas y mostramos cómo controlar un MAS a través de las normas en un ejemplo.3.1 Conceptos básicos Los bloques de construcción de nuestro idioma son términos y fórmulas atómicas: def.1. Un término, denotado como t, es (i) cualquier constante expresada usando minúsculas (con o sin subíndices), p.A, B0, C o (ii) cualquier variable expresada utilizando mayúsculas (con o sin subíndice), p. X, y, zb o (iii) Cualquier función f (t1, ..., tn), donde f es un símbolo de función n-ary y t1, .., tn son términos. Algunos ejemplos de términos y funciones son crédito, precio u oferta (Biblia, 30) respectivamente una variable, una constante y una función. Haremos uso de identificadores en todo el documento, que son términos constantes y también necesitan la siguiente definición: def.2. Una fórmula atómica es cualquier construcción p (t1, ..., tn), donde p es un símbolo de predicado N-oral y T1 ,..., TN son términos. El conjunto de todas las fórmulas atómicas se denota como δ. Nos centramos en una clase expresiva de masa en la que se lleva a cabo la interacción mediante actos de discurso ilocucionario intercambiados entre los agentes participantes: def.3. Illocuciones I son fórmulas atómicas terrestres que tienen la forma P (Ag, R, Ag, R, δ, T) donde P es un elemento de 1 aquí, resumimos de los protocolos y nos referimos a ellas genéricamente como actividades. El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 637 un conjunto de partículas ilocucionarias (por ejemplo, informar, solicitud, oferta);AG, AG son identificadores de agentes;R, R son identificadores de roles;δ, un término terrestre arbitrario, es el contenido del mensaje, construido a partir de un lenguaje de contenido compartido;t ∈ N es una marca de tiempo. El significado intuitivo de P (AG, R, AG, R, M, T) es que el agente AG juega el rol R envió el mensaje M al agente AG Rol de juego R en el tiempo t.Un ejemplo de ilocución es informar (AG4, Supp, AG3, Cliente, Oferta (Wire, 12), 10). A veces es útil referirse a ilocuciones que no están completamente fundamentadas, es decir, aquellas que pueden contener variables no asociadas (libres). En la descripción de un protocolo, por ejemplo, los valores precisos del mensaje intercambiado pueden dejarse sin especificar. Durante la promulgación del protocolo, los agentes producirán los valores reales que darán lugar a una ilocución terrestre. Por lo tanto, podemos definir esquemas de ilocución: def.4. Un esquema de ilocución ¯i es cualquier fórmula atómica P (Ag, R, Ag, R, δ, T) en la que algunos de los términos pueden ser variables o pueden contener variables.3.2 Definición formal de la noción de NS primero definimos escenas normativas de la siguiente manera: def.5. Una escena normativa es una tupla S = IDS, ΔS donde IDS es un identificador de escena y ΔS es el conjunto de fórmulas atómicas δ (es decir, expresiones y posiciones normativas) que se mantienen en s.También nos referiremos a ΔS como el estado de la escena normativa s.Por ejemplo, una instantánea del estado de la escena normativa de entrega de nuestro escenario podría representarse como: ΔS = 8 <: Utt (solicitud (Sean, Cliente, Kev, Wm, Recibe (Wire, 200), 20)), Utt(Aceptar (Kev, Wm, Sean, Cliente, Recibir (cable, 200), 30)), Obl (informar (Kev, Wm, Sean, Cliente, entregado (cable, 200), 30)) 9 =;Es decir, el agente Sean asumió el rol del cliente ha solicitado el agente KEV (asumiendo el rol de Warehouse Manager WM) para recibir 200 kg de cable, y el agente KEV está obligado a entregar 200 kg de cable a Sean desde que aceptó la solicitud. Tenga en cuenta que el estado de una escena normativa ΔS evoluciona con el tiempo. Estas escenas normativas están conectadas entre sí a través de transiciones normativas que especifican cómo las expresiones y las posiciones normativas en una escena afectan otras escenas normativas. Como se mencionó anteriormente, las actividades no son independientes ya que las ilocuciones pronunciadas en algunos de ellos pueden tener un efecto en otros. Las reglas de transición normativa definen las condiciones bajo las cuales se genera un comando normativo. Estas condiciones son expresiones o posiciones normativas asociadas con un protocolo dado (denotado, por ejemplo, actividad: enunciado) que producen un comando normativo, es decir, la adición o eliminación de otra posición normativa, posiblemente relacionada con una actividad diferente. Nuestras reglas de transición se definen así: def.6. Una regla de transición normativa R es de la forma: r :: = v c v :: = ids: d |V, V D :: = N |utt (¯i) n :: = per (¯i) |PRH (¯i) |obl (¯i) c :: = add (ids: n) |Eliminar (IDS: N) donde ¯i es un esquema de ilocución, n es una posición normativa (es decir, permiso, prohibición u obligación), IDS es un identificador para la actividad S y C es un comando normativo. Dotamos nuestro idioma con la semántica habitual de los idiomas basados en reglas [19]. Las reglas asignan una estructura normativa existente a una nueva estructura normativa donde solo cambia el estado de las escenas normativas. En las definiciones a continuación, confiamos en el concepto estándar de sustitución [9]. Def.7. Una transición normativa es una tupla B = IDB, RB donde IDB es un identificador y RB es una regla de transición normativa. Estamos proponiendo extender la noción de MAS, regulada por protocolos, con una capa adicional que consiste en escenas normativas y transiciones normativas. Esta capa se representa como un gráfico bipartito que llamamos estructura normativa. Una estructura normativa relaciona escenas normativas y transiciones normativas que especifican qué posiciones normativas se generarán o eliminarán en qué escenas normativas. Def.8. Una estructura normativa es un gráfico bipartito etiquetado ns = nodos, bordes, LIN, lout. Nodes es un conjunto S∪B donde S es un conjunto de escenas normativas y B es un conjunto de transiciones normativas. Los bordes son un conjunto Ain ∪ Aout donde Ain ⊆ S × B es un conjunto de arcos de entrada etiquetados con una fórmula atómica utilizando la función de etiquetado Lin: Ain → D;y AOT ⊆ B × S es un conjunto de arcos de salida etiquetados con una posición normativa utilizando la función de etiquetado LOUT: AOUT → N. Lo siguiente debe mantener: 1. Cada fórmula atómica que aparece en el LHS de una regla Rb debe ser de la forma (IDS: D) donde s ∈ S y D ∈ δ y ∃Ain ∈ Ain tal que ain = (S, B) y Lin (ain) = D. 2. La fórmula atómica que aparece en el RHS de una regla Rb debe ser de la forma agregue (ids: n) o eliminar (ids: n) donde s ∈ S y ∃Aout ∈ Aout tal que aout = (b, s) y lout ((aout) = N. 3. ∀a ∈ Ain tal que a = (s, b) y b = idb, rb y lin (a) = d entonces (ids: d) debe ocurrir en el LHS de Rb.4. ∀a ∈ Aout tal que a = (b, s) y b = idb, rb y lout (a) = n luego agregue (ids: n) o eliminar (ids: n) debe ocurrir en el rhs de rb. Los dos primeros puntos aseguran que cada fórmulas atómicas en el LHS de una regla de transición normativa etiquete un arco que ingresa a la transición normativa apropiada en la estructura normativa, y que la fórmula atómica en el RHS etiqueta el arco saliente correspondiente. Los puntos tres y cuatro aseguran que las etiquetas de todos los arcos entrantes se usen en el LHS de la regla de transición normativa en la que estos arcos entran, y que las etiquetas de todos los arcos salientes se usan en el RHS de la regla de transición normativa que dejan estos arcos.3.3 Semántica prevista La semántica formal se definirá mediante un mapeo a las redes de Petri de color en la Sección 5.1. Aquí comenzamos a definir la semántica prevista de las reglas de transición normativa describiendo cómo una regla cambia una escena normativa de una estructura normativa existente que produce una nueva estructura normativa. Cada regla se desencadena una vez por cada sustitución que unifica el lado izquierdo V de la regla con el estado de las escenas normativas correspondientes. Una fórmula atómica (es decir, un enunciado o una posición normativa) es un poco unificable con un enunciado o posición normativa que pertenece al estado de la escena normativa correspondiente. Cada vez que se activa una regla, se lleva a cabo el comando normativo especificado en el lado derecho de esa regla, con la intención de agregar o eliminar una posición normativa del estado de la escena normativa correspondiente. Sin embargo, la adición no es incondicional ya que pueden surgir conflictos. Este tema será tratado en las Secciones 4 y 6.1.638 El sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 3.4 Ejemplo En nuestro ejemplo de ejecución, tenemos la siguiente regla de transición normativa ejemplar: „Pago: OBL (Inform (X, Cliente, Y, ACC, Pay (Z, P, Q), T)), Pago: Utt (inform (x, cliente, y, acc, pay (z, p, q), t)) «Entrega: add (obl (inform (y, wm, x, cliente, entregado (Z, q), t))) es decir, durante la actividad de pago, una obligación en el Cliente X de informar el Contador y sobre el pago P del Artículo Z en el tiempo T y la expresión correspondiente que cumple esta obligación permite el flujo de una Normaa la actividad de entrega. La norma es una obligación para el Agente Y (esta vez asumiendo el papel del Gerente de Warehouse WM) para enviar un mensaje al Cliente X que se ha entregado el ítem Z. Mostramos en la Figura 2 una representación diagramática de cómo se relacionan las actividades y una estructura normativa: el contrato de entrega de pago Nivel normativo Registro de salida de la entrega de pagos Nivel de coordinación de negociación Contrato NT Figura 2: Actividades y estructura normativa A medida que se pronuncian ilocuciones durante las actividades, surgen posiciones normativas. Las expresiones y las posiciones normativas se combinan en las reglas de transición, causando el flujo de posiciones normativas entre escenas normativas. La conexión entre los dos niveles se describe en la Sección 6.2.4. Definición de conflicto Los términos conflictos deoípicos y inconsistencia deoípica se han utilizado indistintamente en la literatura. Sin embargo, en este documento adoptamos la opinión de [7] en la que los autores sugieren que surge una inconsistencia deóntica cuando una acción se permite y prohibida simultáneamente, ya que no se puede actuar un permiso, no se produce ningún conflicto real. Sin embargo, las situaciones en que una acción se obligan y prohibe simultáneamente son conflictos deónticos, ya que tanto las obligaciones como las prohibiciones influyen en los comportamientos de una manera conflictiva. El contenido de posiciones normativas en este documento son ilocuciones. Por lo tanto, surge un conflicto normativo cuando una ilocución está simultáneamente obligada y prohibida. Proponemos usar la noción estándar de unificación [9] para detectar cuando una prohibición y una superposición de permiso. Por ejemplo, una obligación obl (Inform (A1, R1, A2, R2, P (C, X), T)) y una Prohibición PRH (Inform (A1, R1, A2, R2, P (Y, D), T)) están en conflicto, ya que se unifican bajo σ = {a1/a1, r1/r1, a2/a2, r2/r2, y/c, x/d, t/t}). Capturamos formalmente esta noción: def.9. Un conflicto (deóntico) surge entre dos posiciones normativas n y n bajo una sustitución σ, denotada como conflicto (n, n, σ), si y solo si n = pRH (¯i), n = obl (¯i) y unificar(¯i, ¯i, σ). Es decir, una prohibición y una obligación están en conflicto si, y solo si sus ilocuciones se unen bajo σ. La sustitución σ, llamada aquí el conflicto establecido, unifica los agentes, roles y fórmulas atómicas. Suponemos que Unify es una implementación adecuada de un algoritmo de unificación que yo) siempre termina (posiblemente falla, si no se puede encontrar un unificador);ii) es correcto;y iii) tiene complejidad computacional lineal. Las inconsistencias causadas por la misma ilocución que se permite y prohibidas simultáneamente se pueden formalizar de manera similar. En este artículo nos centramos en los conflictos de prohibición/obligación, pero la maquinaria computacional introducida en la Sección 6.1 puede usarse igualmente para detectar inconsistencias de prohibición/permiso, si sustituimos la modalidad obl por PER.5. Formalizando la libertad de conflicto En esta sección, presentamos algunos conocimientos de antecedentes sobre CPN asumiendo una comprensión básica de las redes de Petri ordinarias. Para detalles técnicos, remitimos al lector a [16]. Luego asignamos NSS a CPN y analizamos sus propiedades. Los CPN combinan la fuerza de las redes de Petri con la fuerza de los lenguajes de programación funcional. Por un lado, las redes de Petri proporcionan las primitivas para la descripción de la sincronización de procesos concurrentes. Como se observó en [16], los CPN tienen una semántica que se basa en la verdadera concurrencia, en lugar de entrelazar. En nuestra opinión, es más fácil trabajar con una semántica de la concesión verdadera porque es la forma en que imaginamos la conexión entre el nivel de coordinación y el nivel normativo de un sistema de múltiples agentes. Por otro lado, los lenguajes de programación funcionales utilizados por los CPN proporcionan las primitivas para la definición de tipos de datos y la manipulación de sus valores de datos. Por lo tanto, podemos traducir fácilmente expresiones de una estructura normativa. Por último, pero no menos importante, los CPN tienen una semántica bien definida que define inequívocamente el comportamiento de cada CPN. Además, los CPN tienen una gran cantidad de métodos y herramientas de análisis formales por las cuales se pueden probar las propiedades de las CPN. En resumen, los CPN nos proporcionan todas las características necesarias para razonar formalmente sobre estructuras normativas dado que se proporciona un mapeo adecuado. De acuerdo con las redes de Petri, los estados de una CPN están representados por medio de lugares. Pero a diferencia de las redes de Petri, cada lugar tiene un tipo de datos asociado que determina el tipo de datos que el lugar puede contener. Un estado de CPN se llama marcado. Consiste en una serie de tokens posicionados en los lugares individuales. Cada token lleva un valor de datos que tiene el tipo de lugar correspondiente. En general, un lugar puede contener dos o más tokens con el mismo valor de datos. Por lo tanto, una marca de un CPN es una función que mapea cada lugar en un múltiple 2 de tokens del tipo correcto. A menudo se refiere a los valores de token como colores de token y otro también se refiere a los tipos de datos como conjuntos de color. Los tipos de una CPN pueden ser arbitrariamente complejos. Las acciones en una CPN se representan mediante transiciones. Un arco entrante en una transición de un lugar indica que la transición puede eliminar los tokens del lugar correspondiente, mientras que un arco saliente indica que la transición puede agregar tokens. El número exacto de tokens y sus valores de datos están determinados por las expresiones ARC, que están codificadas utilizando el lenguaje de programación elegido para la CPN. Una transición se habilita en un CPN si y solo si todos los 2 un set (o bolsa) multiset es una extensión de la noción de SET, lo que permite la posibilidad de múltiples apariencias del mismo elemento. El sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07), 639 variables en las expresiones de sus arcos entrantes están unidos a algún valor (cada uno de estos enlaces se conoce como un elemento de unión). Si es así, la transición puede ocurrir eliminando los tokens de sus lugares de entrada y agregando tokens a sus lugares de salida. Además de las expresiones de arco, es posible unir una expresión de la guardia booleana (con variables) a cada transición. Al poner todos los elementos anteriores juntos, obtenemos una definición formal de CPN que se empleará más adelante para fines de mapeo. Def.10. Un CPN es una tupla σ, p, t, a, n, c, g, e, i donde: (i) σ es un conjunto finito de tipos no vacíos, también llamados conjuntos de color;(ii) P es un conjunto finito de lugares;(iii) t es un conjunto finito de transiciones;(iv) A es un conjunto finito de arcos;(v) n es una función de nodo definida desde A en p × t ∪ t × p;(vi) C es una función de color de P a σ;(vii) G es una función de guardia de t a expresiones;(viii) e es una función de expresión de arco de A en expresiones;(ix) I es una función de inicialización de P a expresiones cerradas;Observe que la explicación informal de las reglas de habilitación y ocurrencia dadas anteriormente proporciona los cimientos para comprender el comportamiento de una CPN. De acuerdo con las redes de Petri ordinarias, el comportamiento concurrente de una CPN se basa en la noción de paso. Formalmente, un paso es un set múltiple no vacío y finito sobre el conjunto de todos los elementos vinculantes. Deje que los pasos s se habiliten en un marcado M. Entonces, S puede ocurrir, cambiando el marcado m a m. Además, decimos que el marcado M es directamente accesible desde la marca M por la aparición de los pasos S, y la denotamos por m [s> m. Una secuencia de ocurrencia finita es una secuencia finita de pasos y marcas: M1 [S1> M2... Mn [sn> mn+1 tal que n ∈ N y mi [si> mi+1 ∀i ∈ {1 ,..., n}. El conjunto de todas las marcas posibles accesibles para una red neta de una marca M se llama su conjunto de accesibilidad, y se denota como R (NET, M).5.1 Mapeo a las redes de Petri coloreadas Nuestra estructura normativa es un gráfico bipartito etiquetado. Lo mismo es cierto para una red de Petri de color. Estamos presentando un mapeo F de uno a otro, para proporcionar semántica para la estructura normativa y probar propiedades al usar resultados teóricos bien conocidos del trabajo en CPN. El mapeo F utiliza correspondencias entre escenas normativas y lugares de CPN, transiciones normativas y transiciones de CPN y finalmente, entre etiquetas de arco y expresiones de arco de CPN. S → P B → T LIN ∪ LOUT → E El conjunto de tipos es el conjunto de singleton que contiene el color NP (es decir, Σ = {np}). Este tipo complejo está estructurado de la siguiente manera (usamos CPN-ML [4] sintaxis): color npt = con obl |Por |PRH |Nomod color ip = con informes |declarar |Oferta color utt = registro illp: ip ag1, rol1, ag2, rol2: contenido de cadena: tiempo de cadena: int color np = registro modo: npt illoc: UTT modelado ilocuciones como normas sin modalidad (nomod) es un truco formal que usamos para garantizarEsas sub-red se pueden combinar como se explica a continuación. Los arcos se asignan casi directamente. A es un conjunto finito de arcos y N es una función de nodo, de modo que ∀a ∈ A ∃a ∈ Ain ∪Aout. N (a) = a. La función de inicialización I se define como i (p) = ΔS (∀s ∈ S donde P se obtiene de S usando el mapeo; recuerde que S = IDS, ΔS). Finalmente, la función de color C asigna el color np a cada lugar: c (p) = np (∀p ∈ P). No estamos haciendo uso de la función de guardia G. En el trabajo futuro, esta función se puede utilizar para modelar restricciones cuando extendemos la expresividad de nuestro lenguaje de norma.5.2 Propiedades de las estructuras normativas que han definido el mapeo de las estructuras normativas a las redes de Petri de color, ahora observamos las propiedades de los CPN que nos ayudan a comprender la complejidad de la detección de conflictos. Una pregunta que nos gustaría responder es que, si en un momento dado, una estructura normativa dada está libre de conflictos. Tal instantánea de una estructura normativa corresponde a una marca en la CPN mapeada. Def.11. Dado un MI de marcado, esta marca es libre de conflictos si ¬∃p ∈ P. ∃np1, np2 ∈ Mi (p) tal que np1.mode = obl y np2.mode = prh y np1.illoc y np2.illoc unify bajo un válidosustitución. Otra pregunta interesante sería si se producirá un conflicto a partir de tal instantánea del sistema al propagar las posiciones normativas. Para responder a esta pregunta, primero traducimos la instantánea de la estructura normativa a la CPN correspondiente y luego ejecutamos la secuencia de marcas y pasos finitos, verificando la libertad de conflicto de cada marca a medida que avanzamos. Def.12. Dado un IM de marcado, una secuencia de ocurrencia finita Si, Si+1, ..., Sn se llama libre de conflictos, si y solo si mi [Si> Mi+1... Mn [Sn> Mn + 1 y MK no tiene conflictos para todos K de tal manera que yo ≤ k ≤ n + 1. Sin embargo, la pregunta principal que nos gustaría investigar es si una estructura normativa determinada es conflictiva o no, es decir, si los agentes que promulgan o no pueden lograr conflictos a través de sus acciones. Tan pronto como uno incluye la posibilidad de acciones (o enunciados) de agentes autónomos, uno pierde el determinismo. Habiendo mapeado la estructura normativa a un CPN, ahora agregamos modelos CPN de las interacciones de los agentes. Cada forma de interacción del agente (es decir, cada actividad) puede modelarse utilizando CPN a lo largo de las líneas de costo et al.[5]. Estos CPN no deterministas alimentan tokens en la CPN que modela la estructura normativa. Esto lleva a la introducción del no determinismo en la CPN combinada. La mitad inferior de la Figura 3 muestra parte de un modelo CPN de un protocolo de agente donde el arco denotado con 1 representa cierta expresión de una ilocución por parte de un agente. La transición objetivo de este arco, no solo mueve un token al siguiente estado de este CPN, sino que también coloca un token en el lugar correspondiente a la escena normativa apropiada en el modelo CPN de la estructura normativa (a través de ARC 2). La transición 3 finalmente podría propagar esa ficha en forma de obligación, por ejemplo. Por lo tanto, a partir de un marcado dado, son posibles muchas secuencias de ocurrencia diferentes dependiendo de las acciones de los agentes. Hacemos uso del conjunto de accesibilidad R para definir una situación en la que los agentes no pueden causar conflictos.640 El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) Figura 3: Construcción de la def. CPN combinado.13. Dada una red n, una marca M es resistente al conflicto si y solo si todas las marcas en R (N, M) no tienen conflictos. Verificar la libertad de conflicto de una marca se puede hacer en el tiempo polinomial verificando todos los lugares de la CPN para fichas en conflicto. La falta de conflicto de una secuencia de ocurrencia en la CPN que representa la estructura normativa también se puede hacer en el tiempo polinomial ya que esta secuencia es determinista dada una instantánea. Si una estructura normativa está diseñada o no corresponde de forma segura para verificar la resistencia al conflicto de la marca inicial M0. Ahora, verificar la resistencia al conflicto de una marca se convierte en una tarea muy difícil. Corresponde al problema de accesibilidad en una CPN: ¿se puede alcanzar un estado o una marca lograda, que contiene un conflicto? Se sabe que este problema de accesibilidad es NP-NP para las redes de Petri ordinarias [22] y dado que las CPN son funcionalmente idénticas, no podemos esperar verificar la resistencia de conflictos de una estructura normativa fuera de línea en un tiempo razonable. Por lo tanto, se necesitan mecanismos distribuidos de tiempo de ejecución para garantizar que una estructura normativa mantenga la consistencia. Presentamos uno de esos mecanismo en la siguiente sección.6. Gestión de estructuras normativas Una vez que se ha detectado un conflicto (como se define en la Sección 4), proponemos emplear el unifier para resolver el conflicto. En nuestro ejemplo, si las variables en PRH (informar (A1, R1, A2, R2, P (Y, D), T)) no obtienen los valores especificados en la sustitución σ, entonces no habrá un conflicto. Sin embargo, en lugar de calcular el conjunto de complementos de una sustitución (que puede ser un conjunto infinito), proponemos anotar la prohibición con el unifier en sí y usarlo para determinar qué las variables de esa prohibición no pueden ser en futuras unificaciones para evitar unconflicto. Por lo tanto, denotamos prohibiciones anotadas como PRH (¯i) σ, donde σ = {σ1 ,..., σn}, es un conjunto de unificadores. Las normas anotadas3 se interpretan como construcciones deoticas con influencias reducidas, es decir, su efecto (en agentes, roles e ilocuciones) ha estado limitado por el conjunto σ de los unificadores. Una prohibición puede estar en conflicto con varias obligaciones en una escena normativa dada s = id, δ y necesitamos registrar (y posiblemente evitar) todos estos conflictos. Definimos debajo de un algoritmo que garantiza que se agregará una posición normativa a una escena normativa de tal manera que no cause ningún conflicto.3 Aunque proponemos reducir las prohibiciones, se puede usar la misma maquinaria para definir la reducción de las obligaciones. Estas diferentes políticas dependen de la semántica y requisitos deónticos previstos de los sistemas abordados. Por ejemplo, alguna masa puede requerir que sus agentes no actúen en presencia de conflictos, es decir, la obligación debe reducirse.6.1 Resolución de conflictos Proponemos una forma de grano fino de resolver conflictos normativos a través de la unificación. Detectamos la superposición de las influencias de las normas, es decir, cómo afectan el comportamiento de los agentes preocupados, y reducimos la influencia de la posición normativa, utilizando adecuadamente las anotaciones al verificar si la norma se aplica a las ilocuciones. El algoritmo que se muestra en la Figura 4 muestra cómo mantenemos un conjunto de normas sin conflictos. Agrega una norma dada n a un estado normativo existente y sin conflicto δ, obteniendo un nuevo estado normativo resultante δ que está libre de conflictos, es decir, sus prohibiciones se anotan con un conjunto de conjuntos de conflictos que indican qué enlaces para variables deben evitarsepara que no se realicen conflictos.algoritmo addnorm (n, δ) Comience 1 marca de tiempo (n) 2 caso n de 3 por (¯i): δ: = δ ∪ {n} 4 prh (i): si n ∈ δ s.t.conflicto (n, n, σ) luego δ: = Δ 5 más δ: = δ ∪ {n} 6 prh (¯i): 7 comienza 8 σ: = ∅ 9 para cada n ∈ δ do 10 if conflicto (n,,, n,,N, σ) Entonces σ: = σ ∪ {σ} 11 δ: = δ ∪ {n σ} 12 End 13 obl (¯i): 14 Comienza 15 Δ1: = ∅;Δ2: = ∅ 16 para cada (n σ) ∈ δ do 17 si n = pRH (i) entonces 18 si conflicto (n, n, σ) entonces Δ1: = Δ1 ∪ {n σ} 19 más nil 20 más 21 siconflicto (n, n, σ) luego 22 comienza 23 Δ1: = Δ1 ∪ {n σ} 24 Δ2: = Δ2 ∪ {n (σ ∪ {σ})} 25 End 26 δ: = (Δ - Δ1) ∪ Δ2∪ {n} 27 final 28 final caso 29 retorno Δ final Figura 4: Algoritmo para preservar el libertad de conflicto El algoritmo utiliza un caso de estructura para diferenciar las diferentes posibilidades para una norma dada N. La línea 3 aborda el caso cuando la norma dada esUn permiso: N simplemente se agrega a δ. Las líneas 4-5 abordan el caso cuando intentamos agregar una prohibición de tierra a un estado normativo: si entra en conflicto con alguna obligación, entonces se descarta;De lo contrario, se agrega al estado normativo. Las líneas 6-12 describen la situación en la que la posición normativa a agregar es una prohibición no inmóvil. En este caso, el algoritmo inicializa σ a un conjunto y bucles vacíos (línea 9-10) a través de las normas N en el estado normativo antiguo δ. Al encontrar uno que entra en conflicto con N, el algoritmo actualiza σ al agregar el conflicto recién encontrado establecido σ (línea 10). Al pasar a través de δ, podemos verificar cualquier conflicto entre la nueva prohibición y las obligaciones existentes, construyendo adecuadamente la anotación σ que se utilizará al agregar n a δ en la línea 11. Las líneas 13-27 describen cómo se acomoda una nueva obligación para un estado normativo existente. Usamos dos conjuntos temporales inicialmente vacíos, Δ1, Δ2. El algoritmo buce a través de δ (líneas 16-25) recogiendo las prohibiciones anotadas n σ que entran en conflicto con la nueva obligación. Sin embargo, hay dos casos con los que lidiar: el que se encuentra en el sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 641 se encuentra la prohibición (línea 17), y su excepción, que cubre las prohibiciones no terrestres (línea 20). En ambos casos, la prohibición anterior se almacena en Δ1 (líneas 18 y 23) que luego se eliminarán de δ (línea 26). Sin embargo, en el caso de una prohibición sin reducción, el algoritmo actualiza su anotación de conjuntos de conflictos (línea 24). El bucle garantiza que se realiza una búsqueda exhaustiva (lineal) a través de un estado normativo, verificando si la nueva obligación está en conflicto con cualquier prohibición existente, posiblemente actualizando las anotaciones de estas prohibiciones contradictorias. En la línea 26, el algoritmo construye el nuevo δ actualizado al eliminar las antiguas prohibiciones almacenadas en Δ1 y agregar las prohibiciones actualizadas almacenadas en Δ2 (si las hay), así como la nueva obligación N. Nuestro algoritmo propuesto es correcto en eso, para un dado.Posición normativa N y un estado normativo δ, proporciona un nuevo estado normativo δ en el que todas las prohibiciones tienen anotaciones registrando cómo unifican con las obligaciones existentes. Sin embargo, las anotaciones pueden estar vacías: este es el caso cuando tenemos una prohibición terrestre o una prohibición que no unifica/entra en conflicto con ninguna obligación. Los permisos no afectan nuestro algoritmo y se tratan adecuadamente (línea 3). Cualquier intento de insertar una prohibición terrestre que entra en conflicto, produce el mismo estado normativo (línea 4). Cuando se agrega una nueva obligación, el algoritmo garantiza que se consideren todas las prohibiciones (líneas 14-27), lo que lleva a la eliminación de prohibiciones de tierra conflictivas o la actualización de anotaciones de prohibiciones no terrestres. El algoritmo siempre termina: los bucles superan un conjunto finito δ y las verificaciones de conflicto y las operaciones establecidas siempre terminan. La complejidad del algoritmo es lineal: el conjunto δ solo se examina una vez para cada posible caso de norma a agregar. Al administrar los estados normativos, también es posible que necesitemos eliminar posiciones normativas. Esto es sencillo: los permisos se pueden eliminar sin ningún problema;Las prohibiciones anotadas también se pueden eliminar sin más consideraciones;Las obligaciones, sin embargo, requieren cierta limpieza. Cuando se debe eliminar una obligación, debemos verificarla con todas las prohibiciones anotadas para actualizar sus anotaciones. Aplicamos la verificación de conflictos y obtenemos un unificador, luego eliminamos este unifier de la anotación de Prohibiciones. Invocamos el algoritmo de eliminación como removenorm (n, δ): devuelve un nuevo estado normativo δ en el que se ha eliminado N, con posibles alteraciones a otras posiciones normativas como se explica.6.2 Administración de una estructura normativa La promulgación de una estructura normativa equivale a la ejecución paralela y distribuida de escenas normativas y transiciones normativas. Para fines ilustrativos, en adelante describiremos la interacción entre las escenas normativas de pago y entrega y la transición normativa que las une en la mitad superior de la Figura 2. Con este objetivo, considere, por ejemplo, OBL (informar (Jules, Cliente, Rod, ACC, Pay (Cobre, 400, 350), T) ∈ Δpayment y que la entrega de servicio contiene PRH (Inform (barra, Wm, Jules, Cliente, entregado(Z, q), t)). Dichos estados indican que el cliente Jules está obligado a pagar £ 400 por 350 kg de cobre a la barra contable de acuerdo con la escena normativa de pago, mientras que Rod, asumiendo el papel de Gerente de almacén esta vez, tiene prohibido entregar algo al cliente Jules de acuerdo con elEntrega escena normativa. Para cada escena normativa, el proceso de promulgación es el siguiente. En primer lugar, procesa su cola de mensajes entrantes que contiene tres tipos de mensajes: expresiones de la actividad a la que está vinculada;y comandos normativos para agregar o eliminar posiciones normativas. Por ejemplo, en nuestro ejemplo, la escena normativa de pago recauda la ilocución i = utt ((informar (Jules, Cliente, Rod, ACC, Pay (Copper, 400, 350), 35)) que se mantiene al cliente Jules en espera de pago por cobre (Vía flecha A en la Figura 2). Las expresiones son de marca de tiempo y posteriormente se agregan al estado normativo. Tendríamos Δpayment = Δpayment ∪ {i}, en nuestro ejemplo. Al recibir comandos normativos para agregar o eliminar una posición normativa, la escena normativa invoca el algoritmo de adición o eliminación correspondiente descrito en la Sección 6.1. En segundo lugar, la escena normativa reconoce su cambio de estado al enviar un mensaje de activación a cada transición normativa saliente a la que está conectado. En nuestro ejemplo, la escena normativa de pago estaría señalando su cambio de estado a la transición normativa NT. Para las transiciones normativas, el proceso funciona de manera diferente. Debido a que cada transición normativa controla el funcionamiento de una sola regla, al recibir un mensaje de activación, encuesta cada escena normativa entrante para sustituciones por los esquemas de ilocución relevantes en el LHS de su regla. En nuestro ejemplo, NT (que es responsable de la regla descrita en la Sección 3.4), encuestaría la escena normativa de pago (a través de Arrow B) por sustituciones. Al recibir respuestas de ellos (en forma de conjuntos de sustituciones junto con sellos de tiempo), tiene que unificar las sustituciones de cada una de estas escenas normativas. Para cada unificación que encuentra, la regla se dispara y, por lo tanto, el comando normativo correspondiente se envía a la escena normativa de salida. La transición normativa realiza un seguimiento del mensaje de disparo en el que envió y de los puestos de tiempo de las posiciones normativas que desencadenaron el disparo. Esto se hace para garantizar que las mismas posiciones normativas en el LHS de una regla solo activen su disparo una vez. En nuestro ejemplo, NT recibiría σ = {x/jules, y/rode, z/cobre, q/350} de la escena normativa de pago. Dado que las subestaciones en σ unifican con la regla NTS, la regla se dispara y el comando normativo agregue (entrega: obl (barra, wm, jules, cliente, entregado (cobre, 350), t)) se envía a la entrega normativaescena para obligar a Rod a entregar al cliente Jules 350 kg de cobre. Después de eso, la escena normativa de entrega invocaría el algoritmo AddNorm de la Figura 4 con ΔDelivery y N = OBL (Rod, Wm, Jules, Cliente, entregado (cobre, 350)) como argumentos.7. Trabajo y conclusiones relacionados Nuestras contribuciones en este documento son triple. En primer lugar, presentamos un enfoque para la gestión y el razonamiento sobre las normas de manera distribuida. Hasta donde sabemos, hay poco trabajo publicado en esta dirección. En [8, 21], se presentan dos idiomas para la aplicación distribuida de las normas en MAS. Sin embargo, en ambos trabajos, cada agente tiene una interfaz de mensajes local que reenvía mensajes legales de acuerdo con un conjunto de normas. Dado que estas interfaces son locales para cada agente, las normas solo se pueden expresar en términos de acciones de ese agente. Esta es una desventaja grave, p.Cuando uno necesita activar una obligación con un agente debido a un cierto mensaje de otro. La segunda contribución es la propuesta de una estructura normativa. La noción es fructífera porque permite la separación de preocupaciones normativas y de procedimiento. La estructura normativa que proponemos hace evidente la similitud entre la propagación de posiciones normativas y la propagación 642 la sexta intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) de tokens en redes de Petri de color. Esa similitud sugiere fácilmente un mapeo entre los dos, y da motivos a un tratamiento analítico conveniente de la estructura normativa, en general, y la complejidad de la detección de conflictos, en particular. La idea de modelar las interacciones (en forma de conversaciones) a través de Petri Nets se ha investigado en [18], donde el medio de interacción y los agentes individuales se modelan como sub-redes de CPN que posteriormente se combinan para el análisis. En [5], las conversaciones se diseñan y analizan primero a nivel de CPN y luego se traducen en protocolos. Lin et al.[20] Mapa de esquemas de conversación a CPNS. Hasta donde sabemos, el uso de esta representación en el apoyo de la detección de conflictos en MAS regulado no se ha informado en otra parte. Finalmente, presentamos un mecanismo distribuido para resolver conflictos normativos. Sartor [25] trata los conflictos normativos desde el punto de vista de la teoría legal y sugiere una forma de ordenar las normas involucradas. Su idea se implementa en [12] pero requiere un recurso central para el mantenimiento de las normas. El enfoque de la detección y resolución de conflictos es una adaptación y extensión del trabajo en gráficos de instanciación reportados en [17] y un algoritmo relacionado en [27]. El algoritmo presentado en el documento actual se puede utilizar para administrar estados normativos distribuidos: las escenas normativas que ocurren en paralelo tienen un estado normativo asociado δ al que el algoritmo se aplica de forma independiente cada vez que se introducirá una nueva norma. Estas tres contribuciones que presentamos en este documento abren muchas posibilidades para el trabajo futuro. Debemos mencionar primero, que, como estrategia amplia, estamos trabajando en una generalización de la noción de estructura normativa para que funcione con diferentes modelos de coordinación, con contenido deóntico más rico y además de diferentes realizaciones computacionales de MAS reguladas. Como primer paso en esta dirección, estamos aprovechando el desacoplamiento entre los protocolos de interacción y la orientación normativa declarativa que la estructura normativa pone a disposición, para proporcionar una capa normativa para las instituciones electrónicas (como se define en [1]). Esperamos que dicho acoplamiento doten a las instituciones electrónicas con un entorno normativo más flexible y más expresivo. Además, queremos extender nuestro modelo a lo largo de varias direcciones: (1) para manejar la negación y las limitaciones como parte del lenguaje de la norma, y en particular la noción de tiempo;(2) Para acomodar múltiples autoridades de normas jerárquicas basadas en roles, en la línea de Cholvy y Cuppens [3] y las relaciones de poder como lo sugieren Carabelea et al.[2];(3) Capturar en el algoritmo de resolución de conflictos diferentes semánticas relacionadas con las nociones deoípicas al apoyar diferentes axiomaciones (por ejemplo, fuerza relativa de prohibición versus obligación, nociones deónticas predeterminadas, inconsistencias deónticas). En el lado teórico, tenemos la intención de utilizar técnicas de análisis de CPN para caracterizar las clases de CPN (por ejemplo, acíclico, simétrico, etc.) correspondientes a familias de estructuras normativas que son susceptibles a la detección de conflictos de la línea acertable. La combinación de estas técnicas junto con nuestros mecanismos de resolución de conflictos en línea está destinada a dotar a los diseñadores de MAS con la capacidad de incorporar las normas en sus sistemas de manera principalmente.8. Referencias [1] J. L. Arcos, M. Esteva, P. Noriega, J. A. Rodr´ıguez y C. Sierra. Ingeniería de entornos abiertos con instituciones electrónicas. Revista sobre aplicaciones de ingeniería de inteligencia artificial, 18 (2): 191-204, 2005. [2] C. carabelea, O. Boissier y C. Castelfranchi. Usar el poder social para permitir que los agentes razonen ser parte de un grupo. En 5th Internat. Taller, ESAW 2004, páginas 166-177, 2004. [3] L. Cholvy y F. Cuppens. Resolver conflictos normativos fusionando roles. En la Quinta Conferencia Internacional sobre Inteligencia y Derecho Artificial, Washington, EE. UU., 1995. [4] S. Christensen y T. B. Haagh. Design CPN - Descripción general de la sintaxis CPN ML. Informe técnico, Universidad de Aarhus, 1996. [5] R. S. Costo, Y. Chen, T. W. Finin, Y. Labrou e Y. Peng. Uso de redes de Petri de color para modelado de conversación. En temas en la comunicación de agentes, páginas 178-192, Londres, Reino Unido, 2000. [6] F. Dignum. Agentes autónomos con normas. INTELIGENCIA ARTIFICAL Y LEY, 7 (1): 69-79, 1999. [7] A. Elhag, J. Breuker y P. Brouwer. Sobre el análisis formal de conflictos normativos. Información y comunicaciones. Tecnología Law, 9 (3): 207-217, octubre de 2000. [8] M. Esteva, W. Vasconcelos, C. Sierra y J. A. Rodr´ıguez-Aguilar. Consistencia de la norma en instituciones electrónicas.Volumen 3171 (LNAi), páginas 494-505. Springer-Verlag, 2004. [9] M. ajuste. Lógica de primer orden y prueba de teorema automatizado. Springer-Verlag, Nueva York, EE. UU., 1990. [10] N. Fornara, F. Vigan`o y M. Colombetti. Un enfoque impulsado por el evento a las normas en las instituciones artificiales. En el taller de AAMAS05: agentes, normas e instituciones para sistemas multiagentes regulados (ANI@REM), Utrecht, 2005. [11] D. Gaertner, P. Noriega y C. Sierra. Extendiendo la arquitectura BDI con compromisos. En Actas de la 9ª Conferencia Internacional de la Asociación Catalana de Inteligencia Artificial, 2006. [12] A. Garc´ıa-Camino, P. Noriega y J.-A. Rodr´ıguez-Aguilar. Un algoritmo para la resolución de conflictos en actividades compuestas reguladas. En 7th Int.Workshop-Esaw 06, 2006. [13] A. Garc´ıa-Camino, J.-A. Rodr´ıguez-Aguilar, C. Sierra y W. Vasconcelos. Una arquitectura distribuida para las sociedades de agentes conscientes de normas. En Dalt III, volumen 3904 (LNAi), páginas 89-105. Springer, 2006. [14] F. Giunchiglia y L. Serafini. Lógicas jerárquicas de varios idiomas o: cómo podemos hacerlo sin lógicas modales. Inteligencia Artificial, 65 (1): 29-70, 1994. [15] J. Habermas. La teoría de la acción de la comunicación, el volumen uno, la razón y la racionalización de la sociedad. Beacon Press, 1984. [16] K. Jensen. Redes de Petri de color: conceptos básicos, métodos de análisis y usos prácticos (Volumen 1). Springer, 1997. [17] M. Kollingbaum y T. Norman. Estrategias para resolver el conflicto de normas en el razonamiento práctico. En la coordinación del taller de ECAI en las sociedades de agentes emergentes 2004, 2004. [18] J.-L.Koning, G. Francois e Y. DeMazeau. Formalización y pre-validación para protocolos de interacción en un sistema de agentes múltiples. En ECAI, páginas 298-307, 1998. [19] B. Kramer y J. Mylopoulos. Representación del conocimiento. En S. C. Shapiro, editor, Enciclopedia de Inteligencia Artificial, Volumen 1, páginas 743-759. John Wiley & Sons, 1992. [20] F. Lin, D. H. Norrie, W. Shen y R. Kremer. Un enfoque basado en esquemas para especificar políticas de conversación. En temas en la comunicación de agentes, páginas 193-204, 2000. [21] N. Minsky. Interacción de la ley regida (LGI): una coordinación distribuida y un mecanismo de control (una introducción y un manual de referencia). Informe técnico, Universidad de Rutgers, 2005. [22] T. Murata. Petri Nets: propiedades, análisis y aplicaciones. Actas del IEEE, 77 (4): 541-580, 1989. [23] S. Parsons, C. Sierra y N. Jennings. Agentes que razonan y negocian discutiendo. Journal of Logic and Computation, 8 (3): 261-292, 1998. [24] A. ricci y M. viroli. Artifactos de coordinación: una abstracción unificadora para la coordinación mediada por el entorno de ingeniería en MAS. Informatica, 29: 433-443, 2005. [25] G. Sartor. Conflictos normativos en el razonamiento legal. Inteligencia y derecho artificial, 1 (2-3): 209-235, junio de 1992. [26] M. Sergot. Una teoría computacional de las posiciones normativas. ACM Trans. Computación. Logic, 2 (4): 581-622, 2001. [27] W. W. Vasconcelos, M. Kollingbaum y T. Norman. Resolución de conflictos e inconsistencia en organizaciones virtuales reguladas por normas. En Actas de Aamas 07, Hawai, EE. UU., 2007. Ifaamas.[28] G. H. von Wright. Norma y acción: una consulta lógica. Routledge y Kegan Paul, Londres, 1963. [29] M. Wooldridge. Una introducción a los sistemas multiagentes. John Wiley & Sons, Chichester, Reino Unido, febrero de 2002. El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 643