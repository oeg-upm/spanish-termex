Evaluación de la gestión de recursos adaptativos para los sistemas distribuidos de tiempo real distribuidos Nishanth Shankaran, ∗ Xenofon Koutsoukos, Douglas C. Schmidt y Aniruddha Gokhale Dept. De las CEE, la Universidad de Vanderbilt, Nashville Resumen Un problema desafiante que enfrentan los investigadores y desarrolladores de sistemas distribuidos en tiempo real y integrados (DRE) está diseñando e implementando estrategias efectivas de gestión de recursos adaptativos que pueden cumplir con la calidad del servicio (QoS) de extremo a extremo (QoS)Requisitos en diferentes condiciones operativas. Este artículo presenta dos contribuciones a la investigación en gestión de recursos adaptativos para sistemas DRE. Primero, describimos la estructura y la funcionalidad del híbrido middleware adaptativo de recursos adaptativos (HYARM), que proporciona administración de recursos adaptativos utilizando técnicas de control híbrido para adaptar a las fluctuaciones de carga de trabajo y disponibilidad de recursos. En segundo lugar, evaluamos el comportamiento adaptativo de HYARM a través de experimentos en un sistema multimedia DRE que distribuye videos en tiempo real. Nuestros resultados indican que HYARM produce un rendimiento predecible, estable y alto del sistema, incluso frente a la carga de trabajo fluctuante y la disponibilidad de recursos. Categorías y descriptores de sujetos c.2.4 [Sistemas distribuidos]: aplicaciones distribuidas;D.4.7 [Organización y diseño]: Sistemas en tiempo real y sistemas integrados 1. Introducción El logro de la calidad del servicio en tiempo real (QoS) de extremo a extremo es particularmente importante para los sistemas abiertos en tiempo real y integrados (DRE) que enfrentan limitaciones de recursos, como potencia informática limitada y ancho de banda de red. La excesiva superalización de estos recursos del sistema puede producir un comportamiento impredecible e inestable, mientras que la subutilización puede generar un costo excesivo del sistema. Por lo tanto, un enfoque prometedor para cumplir con estos requisitos de QoS de extremo a extremo es desarrollar y aplicar el middleware adaptativo [10, 15], que es un software cuyas propiedades funcionales y relacionadas con el QoS pueden modificarse de manera estadí o dinámica. Se llevan a cabo modificaciones estáticas para reducir la huella, aprovechar las capacidades de aprovechamiento que existen en plataformas específicas, habilitar el subconjunto funcional y/o minimizar las dependencias de infraestructura de hardware/software. Los objetivos de las modificaciones dinámicas incluyen optimizar las respuestas del sistema a entornos o requisitos cambiantes, como cambiar las interconexiones de componentes, los niveles de energía, la CPU y la disponibilidad de ancho de banda de red, la latencia/fluctuación de trabajo y la carga de trabajo. En los sistemas Open DRE, el middleware adaptativo debe realizar tales modificaciones de manera confiable, es decir, mientras cumple con los estrictos requisitos de QoS de extremo a extremo, lo que requiere la especificación y la aplicación de los límites superiores e inferiores en la utilización de los recursos del sistema para garantizar el uso efectivo de los recursos del sistema. Para cumplir con estos requisitos, hemos desarrollado el middleware de gestión de recursos adaptativo híbrido (HYARM), que es un middleware de administración de recursos distribuido de código abierto1. HYARM se basa en técnicas teóricas de control híbrido [8], que proporcionan un marco teórico para diseñar el control del sistema complejo con dinámicas continuas y discretas. En nuestro estudio de caso, que implica un sistema de distribución de video en tiempo real distribuido, la tarea de la gestión de recursos adaptativos es controlar la utilización de los diferentes recursos, cuyas utilizaciones se describen mediante variables continuas. Logramos esto adaptando la resolución del video transmitido, que se modela como una variable continua y cambiando la tasa de trama y la compresión, que están modeladas por acciones discretas. Hemos implementado HYARM sobre el orbe ACE (TAO) [13], que es una implementación de la especificación CORBA en tiempo real [12]. Nuestros resultados muestran que (1) HYARM garantiza la utilización efectiva de los recursos del sistema y (2) se cumplen los requisitos de QoS de extremo a extremo de aplicaciones de mayor prioridad, incluso frente a las fluctuaciones en la carga de trabajo. El resto del documento se organiza de la siguiente manera: la Sección 2 describe la arquitectura, la funcionalidad y el modelo de utilización de recursos de nuestro estudio de caso del sistema multimedia DRE;La Sección 3 explica la estructura y la funcionalidad de HYARM;La Sección 4 evalúa el comportamiento adaptativo de HYARM a través de experimentos en el estudio de caso de nuestro sistema multimedia;La Sección 5 compara nuestra investigación sobre HYARM con el trabajo relacionado;y la Sección 6 presenta comentarios finales.1 El código y los ejemplos para HYARM están disponibles en www.dre.vanderbilt.edu/∼nshankar/hyarm/. Artículo 7 2. Estudio de caso: Sistema Multimedia DRE Esta sección describe los requisitos de arquitectura y QoS de nuestro sistema multimedia DRE.2.1 Multimedia Sistema Arquitectura Enlace inalámbrico Enlace inalámbrico Enlace inalámbrico Enlace `` `Enlace físico Enlace físico Enlace físico Estación base Recibidor de receptores Fin del receptor Fin de enlace físico RECEPTOR FINAL RECEPTOR UAV Cámara Video Camera Video Camera Camera Video Camera Cámara Video Video Video Video Camera Camera de codificaciónVideo codificador UAV Cámara Video Camera Camera Camera Video Camera Codificador de video Figura 1: Arquitectura del sistema multimedia DRE La arquitectura de nuestro sistema multimedia DRE se muestra en la Figura 1 y consta de las siguientes entidades: (1) fuente de datos (captura de video por UAV),Donde se captura el video (relacionado con el tema de interés) por la (s) cámara (s) en cada UAV, seguido de la codificación de video sin procesar utilizando un esquema de codificación específico y transmitir el video a la siguiente etapa en la tubería.(2) Distribuidor de datos (estación base), donde el video se procesa para eliminar el ruido, seguido de la retransmisión del video procesado a la siguiente etapa de la tubería.(3) sumideros (centro de comando y control), donde el video recibido se procesa nuevamente para eliminar el ruido, luego decodificado y finalmente renderizado al usuario final a través de pantallas gráficas. Se han realizado mejoras significativas en la codificación/decodificación de video y (DE) técnicas de compresión como resultado de avances recientes en las técnicas de codificación y compresión de video [14]. Los esquemas comunes de compresión de video son MPEG1, MPEG-2, Video Real y MPEG-4. Cada esquema de compresión se caracteriza por su requisito de recursos, por ejemplo, la potencia computacional para (DE) comprimir la señal de video y el ancho de banda de red requerido para transmitir la señal de video comprimida. Las propiedades del video comprimido, como la resolución y la tasa de cuadros, determinan tanto la calidad como los requisitos de recursos del video. Nuestro estudio de caso del sistema multimedia tiene los siguientes requisitos de QoS en tiempo real de extremo: (1) latencia, (2) retraso entre marco (también conoce como jitter), (3) velocidad de cuadro y (4) resolución de imágenes. Estos requisitos de QoS pueden clasificarse como duros o suaves. El sistema subyacente debe cumplir con los requisitos de QoS en todo momento, mientras que los requisitos de QoS blandos se pueden perder ocasionalmente.2 Para nuestro estudio de caso, tratamos los requisitos de QoS, como la latencia y la fluctuación de la fluctuación, como requisitos de QoS más difíciles y nos esforzamos por cumplir con estos requisitos en absolutoveces. Por el contrario, tratamos los requisitos de QoS, como la velocidad de cuadro de video y la resolución de la imagen, ya que los requisitos de QoS más suaves y modificamos estas propiedades de video de forma adaptativa para manejar cambios dinámicos en los recursos disponibles.Dos extremos de un continuo que van desde más suaves hasta más duros en lugar de dos puntos disjuntos.ity efectivamente.2.2 Rresources del sistema multimedia DRE Hay dos tipos principales de recursos en nuestro sistema multimedia DRE: (1) procesadores que proporcionan energía computacional disponible en los UAV, estaciones base y receptores finales y (2) enlaces de red que proporcionan ancho de banda de comunicación entre UAV,estaciones base y receptores finales. La potencia informática requerida por las tareas de captura y codificación de video depende de factores dinámicos, como la velocidad del UAV, la velocidad del sujeto (si el sujeto es móvil) y la distancia entre UAV y el sujeto. El ancho de banda de la red inalámbrica disponible para transmitir videos capturados por UAV a estaciones base también depende de la conectividad inalámbrica entre los UAV y la estación base, que a su vez dependen de factores dinámicos como la velocidad de los UAV y la distancia relativa entre los UAV yestaciones base. El ancho de banda del enlace entre la estación base y el receptor final es limitado, pero más estable que el ancho de banda de la red inalámbrica. Los requisitos de recursos y la disponibilidad de recursos están sujetos a cambios dinámicos. Dos clases de aplicaciones: QoS -habilitado y mejor esfuerzo, usan la infraestructura del sistema multimedia descrita anteriormente para transmitir video a sus respectivos receptores. La clase de aplicaciones habilitadas por QoS tiene mayor prioridad sobre la clase de aplicación de mejor esfuerzo. En nuestro estudio, las aplicaciones de respuesta a emergencias pertenecen a las aplicaciones de QoS y la vigilancia que pertenecen a la clase de mejor esfuerzo. Por ejemplo, dado que una transmisión de una aplicación de respuesta de emergencia es de mayor importancia que una transmisión de video de una aplicación de vigilancia, recibe más recursos de extremo a extremo. Dado que la disponibilidad de recursos afecta significativamente el QOS, utilizamos la utilización actual de los recursos como el indicador principal del rendimiento del sistema. Nos referimos al nivel actual de utilización de recursos del sistema como la condición del sistema. Según esta definición, podemos clasificar las condiciones del sistema como una utilizada o utilizada de manera efectiva. La subutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es menor que el límite inferior deseado en la utilización de recursos. En esta condición del sistema, los recursos residuales del sistema (es decir, ancho de banda de red y energía computacional) están disponibles en grandes cantidades después de cumplir con los requisitos de QoS de extremo a extremo de las aplicaciones. Estos recursos residuales se pueden utilizar para aumentar el QoS de las aplicaciones. Por ejemplo, la CPU residual y el ancho de banda de la red se pueden usar para ofrecer un video de mejor calidad (por ejemplo, con mayor resolución y mayor velocidad de fotogramas) para finalizar los receptores. La sobreutilización de los recursos del sistema ocurre cuando la utilización actual de recursos es más alta que el límite superior deseado en la utilización de recursos. Esta condición puede surgir de la pérdida de recursos (ancho de banda de red y/o potencia informática en la estación base, receptor final o en UAV, o puede deberse a un aumento en las demandas de recursos por parte de las aplicaciones. La sobre-utilización es generalmente indeseable ya que la calidad del video recibido (como la resolución y la velocidad de cuadros) y las propiedades de la puntualidad (como la latencia y la fluctuación de jitter) se degradan y pueden dar como resultado un sistema inestable (y, por lo tanto, ineficaz). La utilización efectiva de los recursos es la condición del sistema deseada, ya que garantiza que los requisitos de QoS de extremo a extremo del sistema multimedia basado en UAV se cumplan y la utilización de ambos recursos del sistema, es decir, ancho de banda de red y potencia computacional, se encuentran dentro de sus límites de utilización deseados. El Artículo 7, la Sección 3 describe las técnicas que aplicamos para lograr una utilización efectiva, incluso frente a la disponibilidad y/o demanda de recursos fluctuantes.3. Descripción general de HYARM Esta sección describe la arquitectura del middleware híbrido de gestión de recursos adaptativos (HYARM). HYARM garantiza un rendimiento eficiente y predecible del sistema al proporcionar una gestión de recursos adaptativos, incluido el monitoreo de los recursos del sistema y la aplicación de los límites en la utilización de recursos de la aplicación.3.1 Estructura y funcionalidad de HYARM Utilización de recursos Legend Asignación de recursos Parámetros de aplicación Figura 2: La arquitectura de HYARM HYARM está compuesta por tres tipos de entidades que se muestran en la Figura 2 y se describen a continuación: Monitores de recursos Observe la utilización general de recursos para cada tipo de recursos y utilización de recursos por aplicación. En nuestro sistema multimedia, hay monitores de recursos para la utilización de la CPU y el ancho de banda de red. Los monitores de la CPU observan la utilización de recursos de la CPU de UAV, estación base y receptores finales. Monitores de ancho de banda de red Observa la utilización de recursos de red de (1) enlace de red inalámbrico entre UAV y la estación base y (2) enlace de red con cable entre la estación base y los receptores finales. El controlador central mantiene la utilización de recursos del sistema debajo de un límite deseado por (1) procesamiento de actualizaciones periódicas que recibe de los monitores de recursos y (2) modificando la ejecución de aplicaciones en consecuencia, por ejemplo, mediante el uso de diferentes algoritmos de ejecución u operación de la aplicación con mayor/disminución.Qos. Este proceso de adaptación garantiza que los recursos del sistema se utilizan de manera eficiente y se cumplan los requisitos de QoS de aplicación de extremo a extremo. En nuestro sistema multimedia, el controlador HYARM determina el valor de los parámetros de aplicación, como (1) esquemas de compresión de video, como el video real y MPEG-4, y/o (2) velocidad de fotogramas, y (3) resolución de imágenes. Desde la perspectiva de las técnicas teóricas de control híbrido [8], los diferentes esquemas de compresión de video y la velocidad de cuadro forman las variables discretas de ejecución de aplicaciones y resolución de imágenes forman las variables continuas. Los adaptadores de aplicación modifican la ejecución de la aplicación de acuerdo con los parámetros recomendados por el controlador y asegura que la operación de la aplicación esté de acuerdo con los parámetros recomendados. En la Mplementación actual de HYARM, el adaptador de aplicación modifica los parámetros de entrada a la aplicación que afectan la aplicación QoS y la utilización de recursos: esquema de compresión, velocidad de fotogramas y resolución de imágenes. En nuestras implementaciones futuras, planeamos utilizar mecanismos de reserva de recursos, como el servicio diferenciado [7, 3] y la gestión de recursos del núcleo basada en clases [4] para provisiones/reservas de redes y recursos de CPU. En nuestro sistema multimedia, el adaptador de aplicación garantiza que el video esté codificado a la velocidad de cuadro y resolución recomendadas utilizando el esquema de compresión especificado.3.2 Aplicación de HYARM al estudio de caso del sistema multimedia HYARM se construye sobre Tao [13], una implementación de código abierto ampliamente utilizada de Corba en tiempo real [12]. Se puede aplicar HYARM para garantizar la gestión eficiente, predecible y adaptable de recursos de cualquier sistema DRE donde la disponibilidad y los requisitos de los recursos estén sujetos a un cambio dinámico. La Figura 3 muestra la interacción de varias partes del sistema multimedia DRE desarrollado con el servicio de transmisión HYARM, TAO y TAOS A/V. El servicio de transmisión Taos A/V es una implementación de la especificación del servicio de transmisión Corba A/V. El servicio de transmisión Taos A/V es un servicio de distribución de video habilitado para QoS que puede transferir videos en tiempo real a uno o más receptores. Utilizamos el servicio de transmisión A/V para transmitir el video de los UAV a los receptores finales a través de la estación base. Tres entidades del receptor UAV TAO Utilización de recursos Hyarm Central Controlador A/V Servicio de transmisión: remitente MPEG1 MPEG4 Real Video HyarM Monitor de recursos A/V Servicio de transmisión: Receptor Video comprimido Aplicación de video Aplicación Hyarm Adaptador Remote Objeto remoto Control de llamadas Control de recursos Utilización de recursos de recursos/Entradas de control Entradas de control Legend Figura 3: Desarrollo del sistema multimedia DRE con HYARM HYARM, a saber, los monitores de recursos, el controlador central y los adaptadores de aplicaciones se construyen como sirvientes de Corba, para que puedan distribuirse en todo un sistema DRE. Los monitores de recursos son objetos CORBA remotos que actualizan periódicamente el controlador central con la utilización actual de recursos. Los adaptadores de aplicación se colocan con aplicaciones ya que los dos interactúan de cerca. Como se muestra en la Figura 3, UAVS comprime los datos utilizando varios esquemas de compresión, como MPEG1, MPEG4 y video real, y utiliza el servicio de transmisión Taos A/V para transmitir el video a los receptores finales. Los monitores de recursos de HYARMS observan continuamente la utilización de recursos del sistema y notifican al controlador central con la utilización actual.3 La interacción entre el controlador y los monitores de recursos utiliza el patrón del observador [5]. Cuando el controlador recibe actualizaciones de utilización de recursos de monitores, calcula las modificaciones necesarias a los parámetros de aplicaciones y notifica a los adaptadores (s) de la aplicación a través de una llamada de operación remota. Los adaptadores (s) de la aplicación, que se colocan con la aplicación, modifican los parámetros de entrada a la aplicación, en nuestro codificador de video de caso, para modificar la utilización de recursos de la aplicación y QoS.3 La estación base no está incluida en la figura, ya que solo retransmite el video recibido de UAV para finalizar los receptores. Artículo 7 4. Resultados y análisis de rendimiento Esta sección describe por primera vez el testbito que proporciona la infraestructura para nuestro sistema multimedia DRE, que se utilizó para evaluar el rendimiento de HYARM. Luego describimos nuestros experimentos y analizamos los resultados obtenidos para evaluar empíricamente cómo Hyarm se comporta durante la uso de los recursos del sistema.4.1 Descripción general del hardware y la prueba de software. Nuestros experimentos se realizaron en el Bed de la Prueba de Emulab en la Universidad de Utah. La configuración de hardware consta de dos nodos que actúan como UAV, uno que actúa como estación base y otro como receptor final. El video de los dos UAV se transmitió a una estación base a través de una LAN configurada con las siguientes propiedades: relación promedio de pérdida de paquetes de 0.3 y ancho de banda 1 Mbps. El ancho de banda de la red se eligió para ser 1 Mbps ya que cada UAV en el sistema multimedia DRE se asigna 250 kbps. Estos parámetros se eligieron para emular una red inalámbrica poco confiable con un ancho de banda limitado entre los UAV y la estación base. Desde la estación base, el video se retransmitió al receptor final a través de un enlace de cable confiable de un ancho de banda de 10 Mbps sin pérdida de paquetes. La configuración de hardware de todos los nodos se eligió de la siguiente manera: procesador Intel Pentium III de 600 MHz, memoria física de 256 MB, 4 puertos Ethernet de 10/100 Mbps de 10/100 y 13 GB de disco duro. Una versión en tiempo real de Linux - Timesys Linux/Net 3.1.214 basada en Redhat Linux 9 se usa como sistema operativo para todos los nodos. Los siguientes paquetes de software también se utilizaron para nuestros experimentos: (1) FFMPEG 0.4.9-PRE1, que es una biblioteca de código abierto (http: //www.ffmpeg.sourceforce.net/download.php) que comprime el video en MPEG-2, MPEG-4, video real y muchos otros formatos de video.(2) IFTOP 0.16, que es una biblioteca OpenSource (http://www.ex-parrot.com/∼pdw/iftop/) utilizamos para monitorear la actividad de la red y la utilización de ancho de banda.(3) ACE 5.4.3 + Tao 1.4.3, que es una implementación de OpenSource (http://www.dre.vanderbilt.edu/tao) de la especificación Corba [12] en tiempo real sobre la cual se construye HYARM. Tao proporciona el servicio de transmisión Corba Audio/Video (A/V) que usamos para transmitir el video desde los UAV para finalizar los receptores a través de la estación base.4.2 Configuración del experimento Nuestro experimento consistió en dos UAV (emulados) que envían simultáneamente el video a la estación base utilizando la configuración de experimentación descrita en la Sección 4.1. En la estación base, el video se retransmitió a los receptores finales (sin ninguna modificación), donde se almacenó en un archivo. Cada UAV alojó dos aplicaciones, una aplicación habilitada por QoS (respuesta de emergencia) y una aplicación de mejor esfuerzo (vigilancia). Dentro de cada UAV, la potencia computacional se comparte entre las aplicaciones, mientras que el ancho de banda de la red se comparte entre todas las aplicaciones. Para evaluar el QoS proporcionado por HYARM, monitoreamos la utilización de la CPU en los dos UAV, y la utilización de ancho de banda de red entre el UAV y la estación base. La utilización de los recursos de la CPU no fue monitoreada en la estación base y el receptor final, ya que no realizaron operaciones computacionales intensivas. La utilización de recursos del vínculo físico de 10 mpbs entre la estación base y el receptor final no afecta a QoS de aplicaciones y no es monitoreado por HYARM, ya que es casi 10 veces el ancho de banda de 1 MB de la LAN entre los UAV y la estación base. El experimento también monitorea las propiedades del video que afectan la QoS de las aplicaciones, como la latencia, la fluctuación de marco, la velocidad de cuadros y la resolución. El punto de ajuste en la utilización de recursos para cada recurso se especificó en 0.69, que es el límite superior generalmente recomendado por técnicas de programación, como el algoritmo monotónico de velocidad [9]. Dado que los estudios [6] han demostrado que los ojos humanos pueden percibir retrasos más de 200 ms, usamos esto como el límite superior en la fluctuación del video recibido. Los requisitos de QoS para cada clase de aplicación se especifican durante la inicialización del sistema y se muestran en la Tabla 1. 4.3 Resultados y análisis empíricos Esta sección presenta los resultados obtenidos de ejecutar el experimento descrito en la Sección 4.2 en nuestro Bed de prueba del sistema multimedia DRE. Utilizamos la utilización de recursos del sistema como una métrica para evaluar las capacidades de gestión de recursos adaptativos de HYARM bajo variables cargas de trabajo de entrada. También utilizamos QoS de aplicación como una métrica para evaluar las capacidades de HYARM para admitir los requisitos de QoS de extremo a extremo de las diversas clases de aplicaciones en el sistema Multimedia DRE. Analizamos estos resultados para explicar las diferencias significativas en el rendimiento del sistema y los QoS de la aplicación. La comparación del rendimiento del sistema se descompone en comparación de la utilización de recursos y los QoS de aplicación. Para la utilización de recursos del sistema, comparamos (1) la utilización de ancho de banda de red de la red de área local y (2) utilización de la CPU en los dos nodos UAV. Para la aplicación de QoS, comparamos los valores medios de los parámetros de video, incluyendo (1) resolución de imágenes, (2) velocidad de fotogramas, (3) latencia y (4) jitter. Comparación de la utilización de recursos. La sobreutilización de los recursos del sistema en los sistemas DRE puede producir un sistema inestable. En contraste, la subutilización de los recursos del sistema aumenta el costo del sistema. La Figura 4 y la Figura 5 comparan la utilización del recurso del sistema con y sin HYARM. La Figura 4 muestra que HYARM mantiene la utilización del sistema cerca del punto de ajuste de utilización deseado durante la fluctuación en la carga de trabajo de entrada al transmitir videos de QoS más altos (o más bajos) para la clase de aplicaciones habilitadas (o de mejor esfuerzo) durante (o debajo).Utilización de recursos del sistema. La Figura 5 muestra que sin HYARM, la utilización de la red fue tan alta como 0.9 durante el aumento en las condiciones de la carga de trabajo, que es mayor que el punto de uso del conjunto de utilización de 0.7 por 0.2. Como resultado de la sobreutilización de los recursos, los QoS del video recibido, como la latencia promedio y la fluctuación de fluctuación, se vio afectado significativamente. Sin HYARM, los recursos del sistema estaban subutilizados o se utilizan demasiado, los cuales son indeseables. Por el contrario, con HYARM, la utilización de recursos del sistema siempre está cerca del punto de ajuste deseado, incluso durante las fluctuaciones en la carga de trabajo de la aplicación. Durante la fluctuación repentina en la carga de trabajo de la aplicación, las condiciones del sistema pueden ser temporalmente indeseables, pero se restauran a la condición deseada dentro de varios períodos de muestreo. La sobreutilización temporal de los recursos está permitida en nuestro sistema multimedia, ya que la calidad del video puede degradarse por un corto período de tiempo, aunque la aplicación QoS se degradará significativamente si el video de baja calidad se transmite por un período de tiempo más largo. Comparación de la aplicación Qos. Las Figuras 6, la Figura 7 y la Tabla 2 comparan la latencia, la fluctuación de fluctuación, resolución y Frameartle 7 de la clase de resolución de resolución de la velocidad de marco (MSEC) Jitter (MSEC) QoS habilitado 1024 x 768 25 200 MEJOR EFECT 320 X 240 15 300 250 Tabla 1: Requisitos de QoS de aplicación Figura 4: Utilización de recursos con HYARM Figura 5: Utilización de recursos sin la tasa de HYARM del video recibido, respectivamente. La Tabla 2 muestra que HYARM aumenta la resolución y el video de cuadro de aplicaciones Qosenleed, pero disminuye la resolución y la velocidad de cuadro de las aplicaciones de mejor esfuerzo. Durante la utilización excesiva de los recursos del sistema, la resolución y la velocidad de cuadros de aplicaciones de menor prioridad se reducen para adaptarse a las fluctuaciones en la carga de trabajo de la aplicación y mantener la utilización de recursos en el punto de conjunto especificado. Se puede ver en la Figura 6 y la Figura 7 que HYARM reduce significativamente la latencia y la fluctuación del video recibido. Estas cifras muestran que el QoS de las aplicaciones habilitadas para QoS está mejorando enormemente por HYARM. Aunque los parámetros de aplicación, como la velocidad de fotogramas y las resoluciones, que afectan los requisitos de QoS blandos de las aplicaciones de mejor esfuerzo pueden verse comprometidos, se cumplen los requisitos de QoS duros, como la latencia y la fluctuación de todas las aplicaciones. HYARM responde a la fluctuación en la disponibilidad de recursos y/o la demanda mediante el monitoreo constante de la utilización de recursos. Como se muestra en la Figura 4, cuando la utilización de recursos aumenta por encima del punto de ajuste deseado, HYARM reduce la utilización al reducir el QoS de las aplicaciones de mejor esfuerzo. Esta adaptación garantiza que hay suficientes recursos disponibles para aplicaciones habilitadas para QoS para satisfacer sus necesidades de QoS. Las Figuras 6 y 7 muestran que los valores de latencia y fluctuación del video recibido del sistema con HYARM son casi la mitad del valor correspondiente del sistema sin HYARM. Con HYARM, los valores de estos parámetros están muy por debajo de los límites especificados, mientras que sin HYARM, estos valores están significativamente por encima de los límites especificados debido a la excesión excesiva del ancho de banda de la red, que conduce a la congestión de la red y da como resultado la pérdida de paquetes. Hyarm evita esto al reducir los parámetros de video, como la resolución, la tasa de cuadros y/o modificar el esquema de compresión utilizado para comprimir el video. Nuestras conclusiones al analizar los resultados descritos anteriormente son que la aplicación de middleware adaptativo a través del control híbrido al sistema DRE ayuda a (1) mejorar los QoS de la aplicación, (2) aumentar la utilización de los recursos del sistema y (3) proporcionar una mejor previsibilidad (menor latencia e entreframeretraso) a las aplicaciones Qosenable. Estas mejoras se logran en gran medida debido al monitoreo de la utilización de recursos del sistema, la gestión eficiente de la carga de trabajo del sistema y el aprovisionamiento de recursos adaptativos mediante monitores de recursos de red/CPU de HYARMS, adaptador de aplicación y controlador central, respectivamente.5. Trabajo relacionado Varios enfoques teóricos de control se han aplicado recientemente a los sistemas DRE. Estas técnicas ayudan a superar las limitaciones con los enfoques de programación tradicionales que manejan mal los cambios dinámicos en la disponibilidad de recursos y dan como resultado un sistema rígidamente programado que se adapta mal al cambio. Una encuesta de estas técnicas se presenta en [1]. Uno de estos enfoques es la programación de control de retroalimentación (FCS) [2, 11]. Los algoritmos FCS ajustan dinámicamente la asignación de recursos mediante bucles de control de retroalimentación de software. Los algoritmos FCS se modelan y diseñan utilizando rigurosas metodologías teóricas de control. Estos algoritmos proporcionan garantías de rendimiento robustas y analíticas a pesar de las incertidumbres en la disponibilidad y/o la demanda de recursos. Aunque los algoritmos FCS existentes han demostrado ser prometedores, estos algoritmos a menudo suponen que el sistema tiene variables de control continuas que pueden ajustarse continuamente. Si bien esta suposición es válida para ciertas clases de sistemas, hay muchas clases de sistemas DRE, como la aviónica y los entornos de computación total que solo admiten un conjunto finito a priori de configuraciones discretas. Por lo tanto, las variables de control en tales sistemas son intrínsecamente discretas. HYARM maneja ambas variables de control continuo, como la resolución de la imagen y la variable de control discreto, como el conjunto discreto de las tasas de cuadros. Por lo tanto, HYARM se puede aplicar al sistema que admite un conjunto continuo y/o discreto de variables de control. El sistema multimedia DRE como se describe en la Sección 2 es un sistema DRE de ejemplo que ofrece tanto continuo (resolución de imágenes) como de conjunto discreto (tasa de trama) de las variables de control. HYARM modifica estas variables para lograr una utilización eficiente de recursos y una mejor calidad de QoS.6. Observaciones finales Artículo 7 Figura 6: Comparación de la latencia de video Figura 7: Comparación del tamaño de la imagen de la fuente de fluctuación de video / velocidad de cuadro con HYARM sin HYARM UAV1 QoS Aplicación habilitada 1122 x 1496 /25 960 x 720 /20 UAV1 Aplicación de mejor esfuerzo 288 x 384/ 15 640 x 480 /20 UAV2 QoS Aplicación habilitada 1126 x 1496/25 960 x 720 /20 UAV2 Aplicación de mejor esfuerzo 288 x 384 /15 640 x 480 /20 Tabla 2: Calidad de video Muchos en tiempo real distribuido e incrustado(DRE) Los sistemas exigen la aplicación de la calidad de servicio de extremo a extremo (QoS) de sus plataformas subyacentes para operar correctamente. Estos sistemas se ejecutan cada vez más en entornos abiertos, donde la disponibilidad de recursos está sujeto a un cambio dinámico. Para cumplir con QoS de extremo a extremo en entornos dinámicos, los sistemas DRE pueden beneficiarse de un middleware adaptativo que monitorea los recursos del sistema, realiza una gestión de carga de trabajo de aplicación eficiente y permite un aprovisionamiento eficiente de recursos para la ejecución de aplicaciones. Este documento describió a HYARM, un middleware adaptativo, que proporciona una gestión efectiva de recursos a los sistemas DRE. HYARM emplea técnicas de control híbridas para proporcionar las capacidades adaptativas de middleware, como el monitoreo de recursos y la adaptación de la aplicación que son clave para proporcionar las capacidades dinámicas de gestión de recursos para los sistemas Open DRE. Empleamos a HYARM para un sistema Multimedia DRE representativo que se implementa utilizando el servicio de transmisión Corba y Corba A/V Corba A/V. Evaluamos el rendimiento de HYARM en un sistema compuesto por tres recursos distribuidos y dos clases de aplicaciones con dos aplicaciones cada una. Nuestros resultados empíricos indican que HYARM garantiza (1) la utilización eficiente de los recursos al mantener la utilización de recursos de los recursos del sistema dentro de los límites de utilización especificados, (2) los requisitos de QoS de las aplicaciones habilitadas para QoS se cumplen en todo momento. En general, HYARM garantiza la gestión de recursos eficiente, predecible y adaptativo para los sistemas DRE.7. Referencias [1] T. F. Abdelzaher, J. Stankovic, C. Lu, R. Zhang e Y. Lu. Comentarios Control de rendimiento en servicios de software. IEEE: Control Systems, 23 (3), junio de 2003. [2] L. Abeni, L. Palopoli, G. Lipari y J. Walpole. Análisis de un programador de comentarios basado en la reserva. En IEEE Real Time Systems Symposium, diciembre de 2002. [3] S. Blake, D. Black, M. Carlson, E. Davies, Z. Wang y W. Weiss. Una arquitectura para servicios diferenciados. Centro de información de red RFC 2475, diciembre de 1998. [4] H. Franke, S. Nagar, C. Seetharaman y V. Kashyap. Habilitando la gestión de la carga de trabajo autónoma en Linux. En Actas de la Conferencia Internacional sobre Computación Autonómica (ICAC), Nueva York, Nueva York, mayo de 2004. IEEE.[5] E. Gamma, R. Helm, R. Johnson y J. Vlissides. Patrones de diseño: elementos de software reutilizable orientado a objetos. Addison-Wesley, Reading, MA, 1995. [6] G. Ghinea y J. P. Thomas. El impacto de QoS en la percepción del usuario y la comprensión de los videos multimedia. En Multimedia 98: Actas de la Sexta Conferencia Internacional de ACM sobre Multimedia, páginas 49-54, Bristol, Reino Unido, 1998. ACM Press.[7] Grupo de trabajo de ingeniería de Internet. Carta del Grupo de Trabajo de Servicios Diferenciados (DiffServ).www.ietf.org/html.charters/diffserv-charter.html, 2000. [8] X. Koutsoukos, R. Tekumalla, B. Natarajan y C. Lu. Control de supervisión híbrida de sistemas en tiempo real. En el 11º Simposio de tecnología y aplicaciones en tiempo real y en tiempo real de IEEE, San Francisco, California, marzo de 2005. [9] J. Lehoczky, L. Sha e Y. Ding. La tasa de algoritmo de programación monotónica: caracterización exacta y comportamiento promedio de casos. En Actas del 10º Simposio de Sistemas de Tiempo Real IEEE (RTSS 1989), páginas 166-171. IEEE Computer Society Press, 1989. [10] J. Loyall, J. Gossett, C. Gill, R. Schantz, J. Zinky, P. Pal, R. Shapiro, C. Rodrigues, M. Atighetchi y D. Karr. Comparación y contraste de soporte de middleware adaptativo en aplicaciones de objetos distribuidos integrados y de área amplia. En Actas de la 21ª Conferencia Internacional sobre Sistemas de Computación distribuida (ICDCS-21), páginas 625-634. IEEE, abril de 2001. [11] C. Lu, J. A. Stankovic, G. Tao y S. H. Son. Control de retroalimentación Programación en tiempo real: marco, modelado y algoritmos. Real Time Systems Journal, 23 (1/2): 85-126, julio de 2002. [12] Grupo de gestión de objetos. Especificación de Corba en tiempo real, Documento OMG Formal/02-08-02 Edición, agosto de 2002. [13] D. C. Schmidt, D. L. Levine y S. Mungee. El diseño y el rendimiento de los corredores de solicitud de objetos en tiempo real. Computer Communications, 21 (4): 294-324, abril de 1998. [14] Thomas Sikora. Tendencias y perspectivas en la codificación de imágenes y videos. En Actas del IEEE, enero de 2005. [15] X. Wang, H.-M.Huang, V. Subramonian, C. Lu y C. Gill. Camrit: middleware adaptativo basado en control para la transmisión de imágenes en tiempo real. En Proc.de la décima tecnología IEEE en tiempo real y integrada.y aplicaciones Symp.(RTA), Toronto, Canadá, mayo de 2004. Artículo 7