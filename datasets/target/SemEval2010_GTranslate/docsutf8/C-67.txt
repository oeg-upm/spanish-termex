Un enfoque holístico para la computación de alto rendimiento: Xgrid Experience David Przybyla Ringling School of Art and Design 2700 North Tamiami Trail Sarasota, Florida 34234 941-309-4720 dprzybyl@ringling.edu Karissa Miller Ringling School of Art and Design 2700 North Tamiami Trail Sarasota, Florida 34234 941-359-7670 kmiller@ringling.edu Mahmoud Pegah Ringling School of Art and Design 2700 North Tamiami Trail Sarasota, Florida 34234 941-359-7625 mpegah@ringling.Edu Resumen La escuela de arte y el diseño es un completamenteAcreditado Fouryear College of Visual Arts and Design. Con una relación estudiante / informática de Better de 2 a 1, la escuela Ringling ha logrado el reconocimiento nacional por su integración a gran escala de la tecnología en la educación universitaria de arte visual y diseño. Hemos descubierto que Mac OS X es el mejor sistema operativo para capacitar a futuros artistas y diseñadores. Además, ahora podemos comprar Macs para ejecutar gráficos de alta gama, edición de video no lineal, animación, multimedia, producción web y aplicaciones de video digital en lugar de costosas estaciones de trabajo de Unix. A medida que los artistas visuales se cruzan desde la pintura en el lienzo hasta la creación en el ámbito digital, crece la demanda de un entorno informático de alto rendimiento. En nuestros laboratorios públicos de computación, los estudiantes usan las computadoras con mayor frecuencia durante la jornada laboral;Por la noche y los fines de semana las computadoras solo ven el uso de luz. Para aprovechar el tiempo de procesamiento perdido para tareas como la representación de video, estamos probando XGRID, un conjunto de aplicaciones Mac OS X desarrolladas recientemente por Apple para la computación de alto rendimiento paralela y distribuida. Al igual que con cualquier nueva implementación de tecnología, los gerentes de TI deben considerar una serie de factores a medida que evalúan, planifican e implementan XGRID. Por lo tanto, nos gustaría compartir información valiosa que aprendimos de nuestra implementación de un entorno XGrid con nuestros colegas. En nuestro informe, abordaremos problemas, como evaluar las necesidades de computación de la red, aplicaciones potenciales, herramientas de gestión, seguridad, autenticación, integración en infraestructura existente, soporte de aplicaciones, capacitación de usuarios y soporte de usuarios. Además, discutiremos los problemas que surgieron y las lecciones aprendidas durante y después del proceso de implementación. Categorías y descriptores de sujetos c.2.4 [Redes de comunicación por computadora]: aplicaciones distribuidas distribuidas de sistemas. Gestión de términos generales, documentación, rendimiento, diseño, economía, confiabilidad, experimentación.1. Introducción La computación de la cuadrícula no tiene una definición única y universalmente aceptada. La tecnología detrás del modelo de computación de la red no es nueva. Sus raíces se encuentran en modelos de computación distribuidos temprano que datan de principios de la década de 1980, donde los científicos aprovecharon el poder informático de las estaciones de trabajo inactivas para permitir calcular aplicaciones intensivas para que se ejecute en múltiples estaciones de trabajo, que acortaron drásticamente los tiempos de procesamiento. Aunque numerosos modelos de computación distribuidos estaban disponibles para aplicaciones científicas específicas de disciplina, solo recientemente las herramientas estuvieron disponibles para usar aplicaciones de propósito general en una cuadrícula. En consecuencia, el modelo de computación de la cuadrícula está ganando popularidad y se ha convertido en una pieza de computación de utilidad. Dado que en la industria de TI, varios modelos de computación se usan indistintamente con la computación de la cuadrícula, primero ordenamos las similitudes y la diferencia entre estos modelos de computación para que la computación de la cuadrícula se pueda colocar en perspectiva.1.1 Clúster Un clúster es un grupo de máquinas en una configuración fija unida para operar y se gestiona como una entidad única para aumentar la robustez y el rendimiento. El clúster aparece como un solo sistema de alta velocidad o un solo sistema altamente disponible. En este modelo, los recursos no pueden ingresar y dejar al grupo según sea necesario. Hay al menos dos tipos de grupos: grupos paralelos y grupos de alta disponibilidad. Las máquinas agrupadas generalmente están en proximidad espacial, como en la misma sala de servidores, y dedicadas exclusivamente a su tarea. En un clúster de alta disponibilidad, cada máquina proporciona el mismo servicio. Si una máquina falla, otra se hace cargo de su carga de trabajo sin problemas. Por ejemplo, cada computadora podría ser un servidor web para un sitio web. Si un servidor web muere, otro proporciona el servicio, de modo que el sitio web rara vez, si alguna vez, disminuye. Un clúster paralelo es un tipo de supercomputadora. Los problemas se dividen en muchas partes, y los miembros individuales del clúster reciben parte del problema para resolver. Un ejemplo de un clúster paralelo se compone de computadoras Apple Power Mac G5 en la Universidad de Virginia Tech [1].1.2 Computación distribuida La computación distribuida expande espacialmente los servicios de red para que los componentes que proporcionan los servicios estén separados. El objetivo principal de este modelo de computación es consolidar la potencia de procesamiento a través de una red. Un ejemplo simple es difundir servicios como archivos e impresiones, porción web y almacenamiento de datos en múltiples máquinas en lugar de una sola máquina que maneja todas las tareas. La computación distribuida también puede ser más de grano fino, donde incluso una sola aplicación se divide en piezas y cada parte ubicada en diferentes máquinas: un procesador de textos en un servidor, un corrector ortográfico en un segundo servidor, etc. 1.3 Computación de utilidad literalmente, utilidadLa informática se asemeja a los servicios públicos comunes, como el teléfono o el servicio eléctrico. Un proveedor de servicios hace que la gestión de recursos informáticos y de infraestructura esté disponible para un cliente según sea necesario, y cobra por uso en lugar de una tarifa plana. Lo importante a tener en cuenta es que los recursos solo se usan según sea necesario y no se dedican a un solo cliente.1.4 Computación de la cuadrícula La computación de la cuadrícula contiene aspectos de grupos, computación distribuida y computación de servicios públicos. En el sentido más básico, Grid convierte a un grupo de sistemas heterogéneos en un entorno informático administrado centralmente pero flexible que puede funcionar en tareas demasiado tiempo para los sistemas individuales. Los miembros de la cuadrícula no están necesariamente en las proximidades, sino que simplemente deben ser accesibles en una red;La cuadrícula puede acceder a las computadoras en una LAN, WAN o en cualquier parte del mundo a través de Internet. Además, las computadoras que comprenden la red no necesitan dedicarse a la cuadrícula;Más bien, pueden funcionar como estaciones de trabajo normales y luego anunciar su disponibilidad a la red cuando no están en uso. La última característica es la más fundamental para la cuadrícula descrita en este documento. Un ejemplo bien conocido de dicha cuadrícula ad hoc es el proyecto Seti@Home [2] de la Universidad de California en Berkeley, que permite a cualquier persona en el mundo una computadora y una conexión a Internet donar tiempo de procesador no utilizado para analizar la radioDatos del telescopio.1.5 Comparación de la cuadrícula y el clúster una cuadrícula de computadora expande las capacidades del clúster perdiendo sus límites espaciales, de modo que cualquier computadora accesible a través de la red gana el potencial de aumentar la cuadrícula. Una característica de la red fundamental es que escala bien. La potencia de procesamiento de cualquier máquina agregada a la cuadrícula está inmediatamente disponible para resolver problemas. Además, las máquinas en la cuadrícula pueden ser estaciones de trabajo de pospose generales, que mantienen bajos el costo de expandir la red.2. Evaluar la necesidad de calcular la cuadrícula El uso efectivo de una cuadrícula requiere un cálculo que se pueda dividir en tareas independientes (es decir, paralelas). Los resultados de cada tarea no pueden depender de los resultados de ninguna otra tarea, por lo que los miembros de la red pueden resolver las tareas en paralelo. Una vez que las tareas se han completado, los resultados se pueden ensamblar en la solución. Ejemplos de cálculos paralelizables son el conjunto de fractales Mandelbrot, los cálculos de Monte Carlo utilizados en disciplinas como la física de estado sólido y los marcos individuales de una animación renderizada. Este documento se refiere al último ejemplo.2.1 Aplicaciones apropiadas para la computación de la red Las aplicaciones utilizadas en la computación de la red deben diseñarse específicamente para uso de la red, o scriptable de tal manera que puedan recibir datos de la red, procesar los datos y luego devolver los resultados. En otras palabras, los mejores candidatos para la computación de la cuadrícula son aplicaciones que ejecutan los mismos cálculos o muy similares en una gran cantidad de datos sin dependencias de los resultados calculados anteriores. Las aplicaciones que dependen en gran medida del manejo de datos en lugar de la potencia de procesamiento generalmente son más adecuadas para ejecutarse en un entorno tradicional que en una plataforma de cuadrícula. Por supuesto, las aplicaciones también deben ejecutarse en la plataforma informática que aloja la cuadrícula. Nuestro interés es usar la aplicación alias maya [3] con manzanas xgrid [4] en Mac OS X. Las aplicaciones comerciales generalmente tienen requisitos estrictos de licencia. Esta es una preocupación importante si instalamos una aplicación comercial como Maya en todos los miembros de nuestra cuadrícula. Por su naturaleza, el tamaño de la cuadrícula puede cambiar a medida que cambia el número de computadoras inactivas. ¿Cuántas licencias se requerirán? Nuestra resolución de este tema se discutirá en una sección posterior.2.2 Integración en la infraestructura existente La cuadrícula requiere un controlador que reconozca cuándo los miembros de la cuadrícula están disponibles, y elimina el trabajo a los miembros disponibles. El controlador debe poder ver miembros en la red. Esto no requiere que los miembros estén en la misma subred que el controlador, pero si no lo son, se deben configurar los firewalls y enrutadores intermedios para permitir el tráfico de la cuadrícula.3. XGRID XGRID es la implementación de la cuadrícula de manzanas. Fue inspirado en Zilla, una aplicación de agrupación de escritorio desarrollada por Next y adquirida por Apple. En este informe describimos el XGRID Technology Preview 2, una descarga gratuita que requiere Mac OS X 10.2.8 o posterior y un mínimo de 128 MB RAM [5]. XGRID, aprovecha las manzanas facilidad tradicional de uso y configuración. Si los miembros de la cuadrícula están en la misma subred, de forma predeterminada, XGrid descubre automáticamente los recursos disponibles a través de Rendezvous [6]. Las tareas se envían a la cuadrícula a través de una interfaz GUI o por la línea de comando. Un panel de preferencia del sistema controla cuando cada computadora está disponible para la cuadrícula. Puede ser mejor ver a XGRID como facilitador. La arquitectura XGRID maneja el software y la distribución de datos, la ejecución del trabajo y la agregación de resultados. Sin embargo, XGRID no realiza los cálculos reales.3.1 Componentes XGRID XGRID tiene tres componentes principales: el cliente, el controlador y el agente. Cada componente se incluye en la instalación predeterminada, y cualquier computadora se puede configurar fácilmente para asumir cualquier rol. En 120 hechos, para fines de prueba, una computadora puede asumir simultáneamente todos los roles en modo local. El uso de producción más típico se llama modo de clúster. El cliente envía trabajos al controlador a través de la GUI XGRID o la línea de comando. El cliente define cómo el trabajo se dividirá en tareas para la cuadrícula. Si se deben enviar algún archivo o ejecutable como parte de un trabajo, deben residir en el cliente o en una ubicación accesible para el cliente. Cuando se completa un trabajo, el cliente puede recuperar los resultados del controlador. Un cliente solo puede conectarse a un solo controlador a la vez. El controlador ejecuta el proceso GridServer. Hace cola las tareas recibidas de los clientes, distribuye esas tareas a los agentes y maneja la conmutación por error si un agente no puede completar una tarea. En la vista previa de la tecnología XGRID 2, un controlador puede manejar un máximo de 10,000 conexiones de agente. Solo puede existir un controlador por cuadrícula lógica. Los agentes ejecutan el proceso gridagente. Cuando comienza el proceso gridagente, se registra con un controlador;Un agente solo se puede conectar a un controlador a la vez. Los agentes reciben tareas de su controlador, realizan los cálculos especificados y luego envían los resultados al controlador. Un agente se puede configurar para aceptar siempre tareas, o simplemente aceptarlas cuando la computadora no está ocupada.3.2 Seguridad y autenticación de forma predeterminada, XGrid requiere dos contraseñas. Primero, un cliente necesita una contraseña para acceder a un controlador. En segundo lugar, el controlador necesita una contraseña para acceder a un agente. Cualquiera de los requisitos de contraseña se puede deshabilitar. XGRID utiliza un protocolo de autenticación mutua en dos vías con hashes MD5. En este momento, el cifrado de datos solo se usa para contraseñas. Como se mencionó anteriormente, un agente se registra con un controlador cuando comienza el proceso gridagente. No existe un método nativo para que el controlador rechace a los agentes, por lo que debe aceptar cualquier agente que se registre. Esto significa que cualquier agente podría enviar un trabajo que consuma un espacio excesivo de procesador y disco en los agentes. Por supuesto, dado que Mac OS X es un sistema operativo basado en BSD, el controlador podría emplear métodos UNIX para restringir las conexiones de red de los agentes. Los Daemons XGrid se ejecutan como el usuario nadie, lo que significa que los demonios pueden leer, escribir o ejecutar cualquier archivo de acuerdo con los permisos mundiales. Por lo tanto, los trabajos XGrid pueden ejecutar muchos comandos y escribir a /tmp y /volúmenes. En general, este no es un riesgo de seguridad importante, pero el IS requiere un nivel de confianza entre todos los miembros de la red.3.3 Uso de XGRID 3.3.1 Instalación La instalación y configuración básica de XGrid se describe tanto en la documentación de Apple [5] como en el sitio web de la Universidad de Utah [8]. La instalación es sencilla y no ofrece opciones de personalización. Esto significa que cada computadora en la que se instala XGRID tiene el potencial de ser un cliente, controlador o agente.3.3.2 Configuración del agente y del controlador Los agentes y controladores se pueden configurar a través del panel de preferencia XGRID en las preferencias del sistema o archivos XML en /biblioteca /preferencias. Aquí se inician los procesos GridServer y Gridagent, se establecen las contraseñas y se selecciona el método de descubrimiento del controlador utilizado por los agentes. Por defecto, los agentes usan Rendezvous para encontrar un controlador, aunque los agentes también se pueden configurar para buscar un host específico. El panel de preferencia XGRID también establece si los agentes siempre aceptarán trabajos o solo aceptarán trabajos cuando se inactiva. En términos XGrid, Idle, ya sea que el ahorro de pantalla XGRID se ha activado, o el mouse y el teclado no se han utilizado durante más de 15 minutos. Incluso si el agente está configurado para aceptar siempre tareas, si la computadora se usa, estas tareas se ejecutarán en segundo plano con una prioridad baja. Sin embargo, si un agente solo acepta trabajos cuando está inactivo, cualquier tarea inacabada que se realiza cuando la computadora deja de estar inactiva se detiene de inmediato y se pierden los resultados intermediarios. Luego, el controlador asigna la tarea a otro miembro disponible de la cuadrícula. La publicidad del controlador a través de Rendezvous se puede deshabilitar editando /library/preferences/com.apple.xgrid.controller.plist. Esto, sin embargo, no evitará que un agente se conecte al controlador por nombre de host.3.3.3 Enviar trabajos desde un cliente XGRID El cliente envía trabajos al controlador, ya sea a través de la GUI XGRID o la línea de comando. La GUI XGRID envía trabajos a través de pequeñas solicitudes llamadas complementos. Apple proporciona complementos de muestra, pero solo son útiles como pruebas simples o como ejemplos de cómo crear un complemento personalizado. Si queremos emplear XGRID para un trabajo útil, requeriremos un complemento personalizado. James Reynolds detalla la creación de complementos personalizados en el sitio web de la Universidad de Utah Mac OS [8]. XGRID almacena complementos en/biblioteca/xgrid/complementos o ~/biblioteca/xgrid/complementos, dependiendo de si el complemento fue instalado con XGRID o creado por un usuario. El parámetro de complemento Core es el comando, que incluye el ejecutable que los agentes ejecutarán. Otro parámetro importante es el directorio de trabajo. Este directorio contiene archivos necesarios que no están instalados en los agentes o disponibles para ellos a través de una red. El directorio de trabajo siempre se copiará en cada agente, por lo que es mejor mantener este directorio pequeño. Si los archivos están instalados en los agentes o están disponibles en una red, el parámetro de directorio de trabajo no es necesario. La línea de comando permite las opciones disponibles con el complemento GUI, pero puede ser un poco más engorroso. Sin embargo, la línea de comando probablemente será el método de elección para un trabajo serio. Los argumentos de comando deben incluirse en un script a menos que sean muy básicos. Esto puede ser un script de Shell, Perl o Python, siempre y cuando el agente pueda interpretarlo.3.3.4 Ejecutando el trabajo XGRID Cuando se inicia el trabajo XGRID, el comando le dice al controlador cómo dividir el trabajo en tareas para los agentes. Entonces el comando es tarred y se gzip y se envía a cada agente;Si hay un directorio de trabajo, esto también es tarred y gzipped y enviado a los agentes.121 Los agentes extraen estos archivos a /tmp y ejecutan la tarea. Recuerde que, dado que el proceso gridagente se ejecuta como el usuario, nadie, todo lo asociado con el comando debe estar disponible para nadie. Los ejecutables llamados por el comando deben instalarse en los agentes a menos que sean muy simples. Si el ejecutable depende de bibliotecas u otros archivos, puede no funcionar correctamente si se transfiere, incluso si los archivos dependientes se hacen referencia en el directorio de trabajo. Cuando la tarea está completa, los resultados están disponibles para el cliente. En principio, los resultados se envían al cliente, pero si esto realmente sucede depende del comando. Si los resultados no se envían al cliente, estarán en /TMP en cada agente. Cuando esté disponible, una mejor solución es dirigir los resultados a un volumen de red accesible para el cliente.3.4 Limitaciones e idiosincrasias Dado que XGRID solo está en su segunda versión previa, hay algunos bordes y limitaciones aproximadas. Apple reconoce algunas limitaciones [7]. Por ejemplo, el controlador no puede determinar si un agente es confiable y el controlador siempre copia el comando y el directorio de trabajo al agente sin verificar para ver si existen en el agente. Es probable que otras limitaciones sean solo un subproducto de un trabajo inacabado. Ni el cliente ni el controlador pueden especificar qué agentes recibirán las tareas, lo cual es particularmente importante si los agentes contienen una variedad de tipos y velocidades de procesadores y el usuario desea optimizar los cálculos. En este momento, la mejor solución a este problema puede ser dividir las computadoras en múltiples cuadrículas lógicas. Tampoco hay una forma estándar de monitorear el progreso de un trabajo en ejecución en cada agente. La GUI XGRID y la línea de comandos indican qué agentes están trabajando en tareas, pero no dan indicación de progreso. Finalmente, en este momento solo los clientes de Mac OS X pueden enviar trabajos a la red. El marco existe para permitir que terceros escriban complementos para otros sabores UNIX, pero Apple no los ha creado.4. Implementación de XGrid Nuestro objetivo es una granja XGRID para alias Maya. La escuela Ringling tiene alrededor de 400 Apple Power Mac G4 y G5 en 13 laboratorios de computación. Las computadoras varían de 733 MHz de procesador único G4S y 500 MHz y 1 GHz G4S de doble procesador a 1.8 GHz G5S de doble procesador. Todas estas computadoras se usan ligeramente por la noche y los fines de semana y representan un enorme recurso de procesamiento para nuestros proyectos de renderizado para estudiantes.4.1 Instalación de software Durante nuestras pruebas XGRID, cargamos software en cada computadora varias veces, incluidos los sistemas operativos. Ahorramos tiempo facilitando nuestras instalaciones con el software de Daemon de Administración Remota (Radmind) desarrollado en la Universidad de Michigan [9], [10]. Todo lo que instalamos para las pruebas se creó por primera vez como una carga base o sobrecarga de radmind. Por lo tanto, Mac OS X, Mac OS X Developer Tools, XGRID, POV-Ray [11] y Alias Maya se almacenaron en un servidor Radmind y luego se instalaron en nuestras computadoras de prueba cuando sea necesario.4.2 Pruebas iniciales Utilizamos seis 1.8 GHz de doble procesador Apple Power Mac G5S para nuestras pruebas XGRID. Cada computadora ejecutaba Mac OS X 10.3.3 y contenía 1 GB de RAM. Como se muestra en la Figura 1, una computadora sirvió como cliente y controlador, mientras que los otros cinco actuaron como agentes. Antes de intentar la representación maya con XGrid, realizamos cálculos básicos para consolidar nuestra comprensión de XGrid. La documentación de manzanas XGrid es escasa, por lo que encontrar sitios web útiles facilitó nuestro aprendizaje. Primero ejecutamos el complemento MandelBrot Set proporcionado por Apple, que nos permitió probar la funcionalidad básica de nuestra cuadrícula. Luego realizamos la representación de referencia con el POV-Ray de aplicación de código abierto, según lo descrito por Daniel Côté [12] y James Reynolds [8]. Nuestros resultados mostraron que un doble procesador G5 que representa la imagen de rayos POV de referencia tomó 104 minutos. Romper la imagen en tres partes iguales y usar XGRID para enviar las partes a tres agentes requirió 47 minutos. Sin embargo, dos agentes terminaron su representación en 30 minutos, mientras que el tercer agente usó 47 minutos;Todo el render fue tan rápido como el agente más lento. Estos resultados nos dieron dos información importante. Primero, el tiempo de representación mucho más largo para una de las tareas indicó que debemos tener cuidado de cómo dividimos los trabajos en tareas para los agentes. Todas las partes de la representación no tomarán cantidades iguales de tiempo, incluso si el tamaño del píxel es el mismo. En segundo lugar, dado que POV-Ray no puede aprovechar ambos procesadores en un G5, tampoco puede una tarea XGRID que ejecute POV-Ray. Alias Maya no tiene esta limitación.4.3 Renderización con alias Maya 6 Primero instalamos alias Maya 6 para Mac OS X en el cliente/controlador y cada agente. Maya 6 requiere licencias para su uso como solicitud de estación de trabajo. Sin embargo, si solo se usa para representar desde la línea de comando o de un script, no se necesita ninguna licencia. Por lo tanto, creamos una instalación mínima de Maya como una sobrecarga de radmind. La aplicación se instaló en un directorio oculto dentro /aplicaciones. Esto se hizo para que los usuarios normales de las estaciones de trabajo no encontraran e intentaran ejecutar maya, lo que fallaría porque estas instalaciones no tienen licencia para dicho uso. Además, Maya requiere la existencia de un directorio que termina en la ruta /maya. El directorio debe ser legible y redactado por el usuario maya. Para un usuario que ejecuta maya en una estación de trabajo Mac OS X, la ruta generalmente sería ~/Documents/Maya. A menos que se especifique lo contrario, este directorio será la ubicación predeterminada para datos mayas y archivos de salida. Si el directorio no tiene la Figura 1. Red de prueba XGrid. Cliente/ Controlador Agente 1 Agente 2 Agente 3 Agente 4 Agente 5 Trabajos de volumen de red Los datos de datos 122 Existen, Maya intentará crearlo, incluso si el usuario especifica que los datos y los archivos de salida existen en otras ubicaciones. Sin embargo, XGrid se ejecuta como el usuario nadie, lo que no tiene un directorio de inicio. Maya no puede crear el directorio necesario y busca en su lugar /alias /maya. Este directorio tampoco existe, y el usuario nadie tiene derechos suficientes para crearlo. Nuestra solución era crear manualmente /alias /maya y dar al usuario que nadie lee y escriba permisos. También creamos un volumen de red para el almacenamiento de los datos de representación y los marcos renderizados resultantes. Esto evitó enviar los archivos mayas y las texturas asociadas a cada agente como parte de un directorio de trabajo. Tal solución funcionó bien para nosotros porque nuestras computadoras están geográficamente cerca en una LAN;Si una mayor distancia hubiera separado a los agentes del cliente/controlador, especificar un directorio de trabajo puede haber sido una mejor solución. Finalmente, creamos un complemento GUI personalizado para XGRID. El comando de complemento llama a un script Perl con tres argumentos. Dos argumentos especifican los cuadros iniciales y finales del render y el tercer argumento el número de marcos en cada trabajo (que llamamos el tamaño del clúster). El script luego calcula el número total de empleos y los analiza a los agentes. Por ejemplo, si comenzamos en el cuadro 201 y finalizamos en el cuadro 225, con 5 cuadros para cada trabajo, el complemento creará 5 empleos y los enviará a los agentes. Una vez que los trabajos se envían a los agentes, el script ejecuta el comando/usr/sbin/render en cada agente con los parámetros apropiados para el trabajo en particular. Los resultados se envían al volumen de red. Con la configuración descrita, pudimos renderizar con Alias Maya 6 en nuestra cuadrícula de prueba. La velocidad de reproducción no era importante en este momento;Nuestro primer objetivo era implementar la cuadrícula, y en eso tuvimos éxito.4.3.1 Código de pseudo para el script Perl en el complemento XGRID personalizado en esta sección. Resumimos en formato de pseudo código simplificado El script Perl utilizado en nuestro complemento XGRIG.agente_jobs {• Leer marco inicial, marco final y tamaño de clúster de renderizado.• Verifique si el render se puede dividir en un número entero de trabajos en función del tamaño del clúster.• Si no hay un número entero de trabajos, reduzca el tamaño del clúster del último trabajo y establezca su último cuadro en el marco final del renderizado.• Determine el marco de inicio y el marco final para cada trabajo.• Ejecutar el comando render.} 4.4 Lecciones aprendidas La representación con maya de la GUI XGRID no era trivial. La falta de documentación de XGrid y los requisitos de Maya se combinaron en una imagen confusa, donde era difícil decidir la verdadera causa de los problemas que encontramos. Se requirió prueba y error para determinar la mejor manera de configurar nuestra cuadrícula. El primer obstáculo fue crear el directorio /alias /maya con permisos de lectura y escritura para el usuario nadie. El segundo obstáculo fue aprender que obtuvimos el mejor rendimiento al almacenar los datos de representación en un volumen de red. El último gran obstáculo fue recuperar nuestros resultados de los agentes. A diferencia de las pruebas de renderizado de POV-ray, nuestros resultados mayas iniciales nunca fueron devueltos al cliente;En cambio, Maya almacenó los resultados en /TMP en cada agente. Especificar en el complemento dónde enviar los resultados no cambiaría este comportamiento. Decidimos que este era probablemente un problema maya en lugar de un problema de XGrid, y la solución era enviar los resultados al volumen de la red a través del script Perl.5. Los planes futuros mayas en XGrid aún no están listos para ser utilizados por los estudiantes de Ringling School. Para hacer esto, debemos abordar al menos las siguientes preocupaciones.• Continúe nuestras pruebas de renderizado a través de la línea de comando en lugar del complemento GUI. Esto será esencial para el siguiente paso.• Desarrolle una interfaz apropiada para que los usuarios envíen trabajos al controlador XGRID. Esto probablemente será una extensión a la interfaz web de nuestra granja de renderización existente, donde el alumno especifica los parámetros que se colocan en un script que emite el comando Render.• Realizar pruebas de representación maya cronometradas con XGRID. Parte de esto debería comparar los tiempos de representación para Power Mac G4 y G5.6. Conclusión La computación de la cuadrícula continúa avanzando. Recientemente, la industria de TI ha sido testigo de la aparición de numerosos tipos de aplicaciones de cuadrícula contemporánea, además del marco de la red tradicional para las aplicaciones intensivas de cálculo. Por ejemplo, las aplicaciones entre pares como Kazaa se basan en redes de almacenamiento que no comparten la potencia de procesamiento, sino un protocolo elegante para intercambiar archivos entre los sistemas. Aunque en nuestros campus desalentamos a los estudiantes de utilizar aplicaciones entre pares de la música compartido, se puede utilizar el mismo protocolo en aplicaciones como el soporte de decisiones y la minería de datos. El proyecto National Virtual Virtual Colaboratory Grid [13] vinculará a los investigadores de terremotos en todo Estados Unidos con recursos informáticos, lo que les permitirá compartir conjuntos de datos extremadamente grandes, equipos de investigación y trabajar juntos como equipos virtuales a través de Internet. Hay una variedad de nuevos jugadores de cuadrícula en el mundo de TI que amplía el modelo de computación de la red y avanzando la tecnología de la red al siguiente nivel. SAP [14] está pilotando un proyecto a las aplicaciones SAP ERP de la red que habilita la red, Dell [15] se ha asociado con la informática de la plataforma para consolidar los recursos informáticos y proporcionar sistemas habilitados para la red para aplicaciones intensivas de cálculo, Oracle tiene soporte integrado para la computación de la red en sus 10GLanzamiento [16], United Devices [17] ofrece un servicio de alojamiento para la demanda de gridones, y Sun Microsystems continúa su investigación y desarrollo del motor de cuadrícula Suns N1 [18] que combina plataformas de red y agrupación. Simplemente, la computación de la cuadrícula está en marcha. Los beneficios potenciales de la computación de la red son colosales en el aprendizaje de la educación superior, mientras que los costos de implementación son bajos. Hoy en día, sería difícil identificar una aplicación con un retorno de la inversión tan alto como la informática de la red en las divisiones de tecnología de la información en las instituciones de educación superior. Es un error pasar por alto esta tecnología con una recuperación tan alta.123 7. Agradecimientos Los autores desean agradecer a Scott Hanselman del equipo de TI en la Ringling School of Art and Design por proporcionar información valiosa en la planificación de nuestras pruebas XGrid. También nos gustaría agradecer a los carteles de la lista de correo XGRID [13] por proporcionar información sobre muchas áreas de XGrid.8. Referencias [1] Apple Academic Research, http://www.apple.com/education/science/profiles/vatech/.[2] Seti@Inicio: Busque inteligencia extraterrestre en casa.http://setiathome.ssl.berkeley.edu/.[3] Alias, http://www.alias.com/.[4] Apple Computer, XGrid, http://www.apple.com/acg/xgrid/.[5] Guía XGrid, http://www.apple.com/acg/xgrid/, 2004. [6] Apple Mac OS X características, http://www.apple.com/macosx/features/rendezvous/.[7] XGRID Manual Page, 2004. [8] James Reynolds, Presentación de XGrid, Universidad de Utah, http://www.macos.utah.edu:16080/xgrid/, 2004. [9] Investigation Systems Unix Group, Radmind, Universidad de Michigan, http://rsug.itd.umich.edu/software/radmind.[10] Utilizando las herramientas de línea de comandos de Radmind para mantener múltiples máquinas Mac OS X, http://rsug.itd.umich.edu/software/radmind/files/radmindtutorial-0.8.1.pdf.[11] Pov-Ray, http://www.povray.org/.[12] Daniel Côté, XGrid Ejemplo: Gráficos paralelos Renderizaciones en povray, http://unu.novajo.ca/simple/, 2004. [13] Neesgrid, http://wwww.neesgrid.org/.[14] SAP, http://www.sap.com/.[15] Computación de plataforma, http://platform.com/.[16] Grid, http://www.oracle.com/technologies/grid/.[17] United Devices, Inc., http://ud.com/.[18] N1 Grid Engine 6, http://www.sun.com/ Software/Gridware/index.html/.[19] Lista de correo de los usuarios de XGRIG, http://www.lists.apple.com/mailman/listinfo/xgridusers/.124