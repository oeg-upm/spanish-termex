{
    "id": "I-68",
    "original_text": "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of agent-coordination problems in domains with uncertainty and time constraints but very difficult to solve. In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs. Our heuristic solution method, called Value Function Propagation (VFP), combines two orthogonal improvements of OC-DEC-MDP. First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval. Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP. We test both improvements independently in a crisis-management domain as well as for other types of domains. Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations. Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1. INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage rescue mission [11] to the coordination of Autonomous Mars Exploration Rovers [2]. Because of the uncertain and dynamic characteristics of such domains, decision-theoretic models have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time. Key decision-theoretic models that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs). Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research. In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses. Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks. To remedy that, locally optimal algorithms have been proposed [12] [4] [5]. In particular, Opportunity Cost DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons. Additionally, OC-DEC-MDP is unique in its ability to address both temporal constraints and uncertain method execution durations, which is an important factor for real-world domains. OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous policy iteration. However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values. The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval. Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods. This reward, also referred to as the opportunity cost, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies. In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with temporal constraints and uncertain method execution durations, that builds on the success of OC-DEC-MDP. VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval. Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions. Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the opportunity cost, and to remedy that, we introduce a set of heuristics, that correct the opportunity cost overestimation problem. This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building. In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers. Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements. Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the opportunity cost overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2. MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome. One example domain is large-scale disaster, like a fire in a skyscraper. Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless. In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations. Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 . General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading. The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B. As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3). Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc. We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B. One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians. If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians. In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan. Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B. Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3. MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 . Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents. Agents cannot communicate during mission execution. Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø. Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time. Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations. In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of temporal constraints in the system. Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints. For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates. In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints. We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system. For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints. Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline. Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi. Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents. Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W). In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + . In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution. Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled. The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a. A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4. SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used. Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}. This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ . Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11]. The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used. However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising. Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods. The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible. At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ]. It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ]. This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration. We call this step a value propagation phase. Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π . It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods. We call this step a probability propagation phase. If policy π does not improve π, the algorithm terminates. There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper. First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed. While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 . Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow. Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods. As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again. As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences. In the next two sections, we address both of these shortcomings. 5. VALUE FUNCTION PROPAGATION (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase. However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the value function propagation phase and the probability function propagation phase. To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. Opportunity Cost Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled. Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future. Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise. We now develop an analytical technique for performing the value function and probability function propagation phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 Value Function Propagation Phase Suppose, that we are performing a value function propagation phase during which the value functions are propagated from the sink methods to the source methods. At any time during this phase we encounter a situation shown in Figure 2, where opportunity cost functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the opportunity cost Vi0 of method mi0 is to be derived. Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ]. The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods. Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t). Assume for now, that Vjn,i0 represents a full opportunity cost, postponing the discussion on different techniques for splitting the opportunity cost Vj0 into [Vj0,ik ]K k=0 until section 6. We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme). Figure 2: Fragment of an MDP of agent Ak. Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left). Let V j0,i0 (t) be the opportunity cost of starting the execution of method mj0 at time t given that method mi0 has been completed. It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 . Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t). Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1. Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable. Therefore the opportunity cost Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 . Furthermore, Vj0,i0 should be non-increasing. Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }. Knowing the opportunity cost Vi0 , we can then easily derive the value function vi0 . Let Ak be an agent assigned to the method mi0 . If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 . Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 . Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored. We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 . In general, the value function propagation scheme starts with sink nodes. It then visits at each time a method m, such that all the methods that m enables have already been marked as visited. The value function propagation phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 Probability Function Propagation Phase Assume now, that value functions and opportunity cost values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified. Since value function propagation phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration. We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived. Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last value function propagation phase. If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise. Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t . We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 . The general, the probability function propagation phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default. We then visit at each time a method m such that all the methods that enable The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited. The probability function propagation phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 . Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1. These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm. Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and probability function propagation without choosing any function representation. In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation. However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions. When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t). If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does. As a result, instead of performing O(Δ2 ) multiplications to compute f(t), VFP only needs to perform O(k · Δ) multiplications to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ). Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P . We now prove that the overall approximation error accumulated during the value function propagation phase can be expressed in terms of P and V : THEOREM 1. Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively. The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of value function propagation phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . PROOF. In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of probability function propagation phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1. Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1. Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1. We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ). Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1. Thus, if opportunity cost functions are not overestimated, they are bounded by P mi∈M ri and the error of a single value function propagation operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri. Since the number of value function propagation operations is |C≺|, the total error π of the value function propagation phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6. SPLITTING THE OPPORTUNITY COST FUNCTIONS In section 5 we left out the discussion about how the opportunity cost function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 . So far, we have taken the same approach as in [4] and [5] in that the opportunity cost function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). We refer to this approach, as heuristic H 1,1 . Before we prove that this heuristic overestimates the opportunity cost, we discuss three problems that might occur when splitting the opportunity cost functions: (i) overestimation, (ii) underestimation and (iii) starvation. Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when value function propagation for methods [mik ]K k=0 is performed. For each k = 0, ..., K, Equation (1) derives the opportunity cost function Vik from immediate reward rk and opportunity cost function Vj0,ik . If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the opportunity cost for completing the method m0 at time t is equal to PK k=0 Vik,0(t). If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later. As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences. Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0. Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences. Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the opportunity cost of enabling method mj0 , and the similar reasoning applies. We call such problem a starvation of method mk. That short discussion shows the importance of splitting the opportunity cost function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided. We now prove that: THEOREM 2. Heuristic H 1,1 can overestimate the opportunity cost. PROOF. We prove the theorem by showing a case where the overestimation occurs. For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively. Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of opportunity cost, we must identify t0 ∈ [0, ..., Δ] such that the opportunity cost PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t). From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing. Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) . Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the opportunity cost PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice. To remedy the problem of opportunity cost overestimation, we propose three alternative heuristics that split the opportunity cost functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 . To avoid opportunity cost overestimation, we normalize the split functions when their sum exceeds the opportunity cost function to be split. Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t). For the new heuristics, we now prove, that: THEOREM 3. Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the opportunity cost. PROOF. When heuristic H 1,0 is used to split the opportunity cost function Vj0 , only one method (e.g. mik ) gets the opportunity cost for enabling method mj0 . Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing. For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t). For heuristic bH 1,1 , the opportunity cost function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t). Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the opportunity cost. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the opportunity cost, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does. However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation. Starvation can be avoided if opportunity cost functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods. However, the sum of split opportunity cost functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split opportunity cost function for the H 1,0 heuristic, which is clearly undesirable. Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7. EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations. Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present. Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100). We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400. We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost. The first graph confirms, that when the opportunity cost function Vj0 was split into opportunity cost functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function. In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%. When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 . We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)). To obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)). We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics. Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward. Part 2: We then chose H 1,1 to split the opportunity cost functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark. We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods. Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200. We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm. We then run both algorithms for a total of 100 policy improvement iterations. Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds). As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%. For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP. We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)). We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached. We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale). As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP. We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)). In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400. We show the results in Figure (7b). Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%. We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1. In particular, we consider 836 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting. Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods. For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially. We therefore vary the time horizons from 3000 to 4000, and then to 5000. We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8. CONCLUSIONS Decentralized Markov Decision Process (DEC-MDP) has been very popular for modeling of agent-coordination problems, it is very difficult to solve, especially for the real-world domains. In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs. Our heuristic solution method, called Value Function Propagation (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the opportunity cost of OC-DEC-MDP. In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4]. Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with temporal constraints [1] [11]. Unfortunately, they fail to scale up to large-scale domains at present time. Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and temporal constraints. Finally, value function techniques have been studied in context of single agent MDPs [7] [9]. However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning. Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No. FA875005C0030. The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9. REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein. Decentralized MDPs with Event-Driven Interactions. In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman. Transition-Independent Decentralized Markov Decision Processes. In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman. The complexity of decentralized control of Markov decision processes. In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib. A polynomial algorithm for decentralized Markov decision processes with temporal constraints. In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib. An iterative algorithm for solving constrained decentralized Markov decision processes. In AAAI, pages 1089-1094, 2006. [6] C. Boutilier. Sequential optimality and coordination in multiagent systems. In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman. Exact solutions to time-dependent MDPs. In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein. Optimizing information exchange in cooperative multi-agent systems, 2003. [9] L. Li and M. Littman. Lazy approximation for solving continuous finite-horizon MDPs. In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig. Risk-sensitive planning with one-switch utility functions: Value iteration. In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy. Coordinated plan management using multiagent MDPs. In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella. Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings. In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo. Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs. In IJCAI, pages 1758-1760, 2005. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837",
    "original_translation": "Sobre técnicas oportunistas para resolver procesos descentralizados de decisión de Markov con restricciones temporales Janusz Marecki y Milind Tambe de Departamento de Ciencias de la Computación Universidad del Sur de California 941 W 37th Place, Los Ángeles, CA 90089 {Marecki, Tambe}@usc.Edu Resumen de la decisión de decenticación de Markov (Dec. (-MDPS) son un modelo popular de problemas de coordinación de agentes en dominios con incertidumbre y limitaciones de tiempo, pero muy difíciles de resolver. En este documento, mejoramos un método de solución heurística de última generación para Dec-MDP, llamado OC-DEC-MDP, que recientemente se ha demostrado que se reduce a Dec-MDPS más grandes. Nuestro método de solución heurística, llamada propagación de la función de valor (VFP), combina dos mejoras ortogonales de OC-DEC-MDP. Primero, acelera OC-DECMDP por un orden de magnitud manteniendo y manipulando una función de valor para cada estado (en función del tiempo) en lugar de un valor separado para cada par de sate e intervalo de tiempo. Además, logra mejores cualidades de solución que OC-DEC-MDP porque, como muestran nuestros resultados analíticos, no sobreestima la recompensa total esperada como OC-DP-DP. Probamos ambas mejoras de forma independiente en un dominio de gestión de crisis, así como para otros tipos de dominios. Nuestros resultados experimentales demuestran una aceleración significativa de VFP sobre OC-DEC-MDP, así como cualidades de solución más altas en una variedad de situaciones. Categorías y descriptores de sujetos I.2.11 [Inteligencia artificial]: Sistemas de inteligencia artificiales distribuidos Algoritmos generales de sistemas generales, Teoría 1. Introducción El desarrollo de algoritmos para la coordinación efectiva de múltiples agentes que actúan como un equipo en dominios inciertos y críticos en el tiempo se ha convertido recientemente en un campo de investigación muy activo con posibles aplicaciones que van desde la coordinación de agentes durante una misión de rescate de rehenes [11] hasta la coordinación de autónomos.Marte Exploration Rovers [2]. Debido a las características inciertas y dinámicas de tales dominios, los modelos teóricos de decisión han recibido mucha atención en los últimos años, principalmente gracias a su expresividad y la capacidad de razonar sobre la utilidad de las acciones a lo largo del tiempo. Los modelos teóricos de decisión clave que se han vuelto populares en la literatura incluyen procesos descentralizados de decisión de Markov (DECMDP) y procesos de decisión de Markov descentralizados y parcialmente observables (DEC-POMDPS). Desafortunadamente, se ha demostrado que resolver estos modelos de manera óptima es completar NEXP [3], por lo tanto, las subclases más manejables de estos modelos han sido objeto de investigaciones intensivas. En particular, la red distribuyó el POMDP [13] que supone que no todos los agentes interactúan entre sí, la transición Dec-MDP independiente [2] que supone que la función de transición se descompone en funciones de transición locales o DEC-MDP con interacciones impulsadas por eventos [1 1] que suponen que las interacciones entre los agentes ocurren en puntos de tiempo fijos constituyen buenos ejemplos de tales subclases. Aunque los algoritmos óptimos a nivel mundial para estas subclases han demostrado resultados prometedores, los dominios en los que se ejecutan estos algoritmos siguen siendo pequeños y los horizontes temporales están limitados a solo unos pocos tiempos. Para remediar eso, se han propuesto algoritmos localmente óptimos [12] [4] [5]. En particular, el costo de oportunidad Dec-MDP [4] [5], denominado OC-DEC-MDP, es particularmente notable, ya que se ha demostrado que se reduce a dominios con cientos de tareas y horizontes temporales de dos dígitos. Además, OC-DEC-MDP es único en su capacidad para abordar las restricciones temporales y las duraciones de ejecución de métodos inciertos, que es un factor importante para los dominios del mundo real. OC-DEC-MDP puede escalar a tales dominios principalmente porque en lugar de buscar la solución globalmente óptima, lleva a cabo una serie de iteraciones de políticas;En cada iteración realiza una iteración de valor que reutiliza los datos calculados durante la iteración de política anterior. Sin embargo, OC-DEC-MDP sigue siendo lento, especialmente porque el horizonte temporal y el número de métodos abordan grandes valores. La razón de los altos tiempos de ejecución de OC-DEC-MDP para dichos dominios es una consecuencia de su enorme espacio de estado, es decir, OC-DEC-MDP introduce un estado separado para cada posible par de intervalo de ejecución de métodos y métodos. Además, OC-DEC-MDP sobreestima la recompensa que un método espera recibir para habilitar la ejecución de métodos futuros. Esta recompensa, también conocida como el costo de oportunidad, juega un papel crucial en la toma de decisiones de los agentes, y como mostramos más adelante, su sobreestimación conduce a políticas altamente subóptimas. En este contexto, presentamos VFP (= valor de la función de valor), una técnica de solución eficiente para el modelo DEC-MDP con restricciones temporales y duraciones de ejecución de métodos inciertos, que se basa en el éxito de OC-DEC-MDP. VFP presenta nuestras dos ideas ortogonales: primero, de manera similar a [7] [9] y [10], mantenemos 830 978-81-904262-7-5 (RPS) c 2007 Ifaamas y manipulamos una función de valor con el tiempo para cada métodoen lugar de un valor separado para cada par de método e intervalo de tiempo. Dicha representación nos permite agrupar los puntos de tiempo para los cuales la función de valor cambia a la misma velocidad (= su pendiente es constante), lo que resulta en una propagación rápida y funcional de las funciones de valor. En segundo lugar, demostramos (tanto teóricamente como empíricamente) que el OC-DP-DP sobreestima el costo de oportunidad, y para remediar eso, presentamos un conjunto de heurísticas que corrigen el problema de sobreestimación del costo de oportunidad. Este documento está organizado de la siguiente manera: en la Sección 2 motivamos esta investigación mediante la introducción de un dominio de rescate civil donde un equipo de brigadas de bomberos debe coordinar para rescatar a los civiles atrapados en un edificio en llamas. En la Sección 3 proporcionamos una descripción detallada de nuestro modelo DEC-MDP con restricciones temporales y en la Sección 4 discutimos cómo se pueden resolver los problemas codificados en nuestro modelo utilizando solucionadores globalmente óptimos y localmente óptimos. Las secciones 5 y 6 discuten las dos mejoras ortogonales al algoritmo OC-DEC-MDP de última generación que implementa nuestro algoritmo VFP. Finalmente, en la sección 7 demostramos empíricamente el impacto de nuestras dos mejoras ortogonales, es decir, mostramos que: (i) las nuevas heurísticas corrigen el problema de sobreestimación de costos de oportunidad que conducen a políticas de mayor calidad y (ii) al permitir una compensación sistemáticaDe calidad de solución para el tiempo, el algoritmo VFP funciona mucho más rápido que el algoritmo OC-DEC-MDP 2. Ejemplo motivador Estamos interesados en dominios donde múltiples agentes deben coordinar sus planes con el tiempo, a pesar de la incertidumbre en la duración y el resultado de la ejecución del plan. Un dominio de ejemplo es el desastre a gran escala, como un fuego en un rascacielos. Debido a que puede haber cientos de civiles dispersos en numerosos pisos, se deben enviar múltiples equipos de rescate, y los canales de comunicación por radio pueden ser saturados e inútiles. En particular, los pequeños equipos de brigadas de bomberos deben enviarse en misiones separadas para rescatar a los civiles atrapados en docenas de diferentes lugares. Imagine un pequeño plan de misión de la Figura (1), donde se les asignó a tres bienes de fuego una tarea para rescatar a los civiles atrapados en el Sitio B, a los que se accede desde el Sitio A (por ejemplo, una oficina a la que se accede desde el piso) 1. Los procedimientos generales de lucha contra incendios implican ambos: (i) sacando las llamas y (ii) ventilar el sitio para dejar que los gases tóxicos y a alta temperatura escapen, con la restricción de que la ventilación no debe realizarse demasiado rápido para evitar el incendioextensión. El equipo estima que los civiles tienen 20 minutos antes de que el incendio en el Sitio B se vuelva insoportable, y que el incendio en el Sitio A tiene que ser presentado para abrir el acceso al Sitio B. Como ha sucedido en el pasado en desastres a gran escala, la comunicación a menudo se descompone;y por lo tanto asumimos en este dominio que no hay comunicación entre las brigadas de fuego 1,2 y 3 (denotadas como FB1, FB2 y FB3). En consecuencia, FB2 no sabe si ya es seguro ventilar el sitio A, FB1 no sabe si ya es seguro ingresar al sitio A y comenzar a combatir el fuego en el Sitio B, etc. Asignamos la recompensa 50 por evacuar a los civiles del sitio B, y una recompensa más pequeña 20 por la ventilación exitosa del Sitio A, ya que los mismos civiles podrían lograr el sitio B. Uno puede ver claramente el dilema, que FB2 enfrenta: solo puede estimar las duraciones del incendio de la lucha en el sitio, un métodos para ser ejecutados por FB1 y FB3, y al mismo tiempo FB2 sabe que el tiempo se está agotando para los civiles. Si FB2 ventila el sitio A demasiado temprano, el fuego se extenderá fuera de control, mientras que si FB2 espera con el método de ventilación durante demasiado tiempo, el fuego en el Sitio B se volverá insoportable para los civiles. En general, los agentes tienen que realizar una secuencia de tales 1, explicamos el EST y dejamos la notación en la Sección 3 Figura 1: Dominio de rescate civil y un plan de misión. Las flechas punteadas representan restricciones de precedencia implícitas dentro de un agente.decisiones difíciles;En particular, el proceso de decisión de FB2 implica primero elegir cuándo comenzar la ventilación del sitio A, y luego (dependiendo del tiempo que llevó ventilar el sitio A), eligiendo cuándo comenzar a evacuar a los civiles del sitio B. Tal secuencia de decisiones constituye la política de un agente, y debe encontrarse rápidamente porque el tiempo se está agotando.3. Descripción del modelo ENCODEDO nuestros problemas de decisión en un modelo al que nos referimos como MDP descentralizado con restricciones temporales 2. Cada instancia de nuestros problemas de decisión puede describirse como una tupla m, a, c, p, r donde m = {mi} | m |i = 1 es el conjunto de métodos, y a = {ak} | a |K = 1 es el conjunto de agentes. Los agentes no pueden comunicarse durante la ejecución de la misión. Cada agente AK se asigna a un conjunto MK de métodos, de modo que s | a |k = 1 mk = my ∀i, j; i = jmi ∩ mj = Ø. Además, cada método de agente AK puede ejecutarse solo una vez, y el agente AK puede ejecutar solo un método a la vez. Los tiempos de ejecución del método son inciertos y p = {pi} | m |i = 1 es el conjunto de distribuciones de duraciones de ejecución de métodos. En particular, Pi (t) es la probabilidad de que la ejecución del método mi consuma tiempo t.C es un conjunto de restricciones temporales en el sistema. Los métodos se ordenan parcialmente y cada método tiene ventanas de tiempo fijas dentro de las cuales se puede ejecutar, es decir, C = C≺ ∪ C [] donde C≺ es el conjunto de restricciones predecesoras y C [] es el conjunto de restricciones de ventana de tiempo. Para c ∈ C≺, c = mi, MJ significa que el método MI precede al método MJ, es decir, la ejecución de MJ no puede comenzar antes de que MI termine. En particular, para un agente AK, todos sus métodos forman una cadena vinculada por restricciones predecesoras. Suponemos que el gráfico G = M, C≺ es acíclico, no tiene nodos desconectados (el problema no puede descomponerse en subproblemas independientes), y sus vértices de origen y sumidero identifican los métodos de fuente y sumidero del sistema. Para c ∈ C [], c = mi, est, medios que la ejecución de MI solo puede comenzar después de la hora de inicio más temprana y debe terminar antes de la última hora de finalización.Permitimos que los métodos tengan múltiples restricciones de ventana de tiempo disjunto. Aunque las distribuciones PI pueden extenderse a los horizontes de tiempo infinitos, dadas las limitaciones de la ventana de tiempo, el horizonte de planificación δ = max m, τ, τ ∈C [] τ se considera como la fecha límite de la misión. Finalmente, r = {ri} | m |i = 1 es el conjunto de recompensas no negativas, es decir, RI se obtiene tras la ejecución exitosa de MI. Dado que no se permite la comunicación, un agente solo puede estimar las probabilidades de que sus métodos ya se habilitan 2 también se podría usar el marco OC-DEC-MDP, que modela las restricciones de tiempo y recursos de la Sexta INTL. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 831 por otros agentes. En consecuencia, si mj ∈ Mk es el siguiente método que el agente es ejecutar y la hora actual es t ∈ [0, Δ], el agente debe tomar una decisión si ejecutar el método MJ (denotado como E), oesperar (denotado como w). En caso de que el agente AK decida esperar, permanece inactivo para un pequeño tiempo arbitrario y reanuda la operación en el mismo lugar (= a punto de ejecutar el método MJ) en el momento t +. En caso de que el agente AK decida ejecutar el siguiente método, son posibles dos resultados: éxito: el agente AK recibe recompensa RJ y avanza a su siguiente método (si dicho método existe) siempre que las siguientes condiciones se mantengan: (i) Todas las todas las condicionesMétodos {mi |mi, mj ∈ C≺} que habilita directamente el método MJ ya se ha completado, (ii) la ejecución del método MJ comenzó en una ventana de tiempo de método MJ, es decir, ∃ Mj, τ, τ ∈C [] tales que t ∈ [τ, τ] y (iii) ejecución del método MJ terminó dentro de la misma ventana de tiempo, es decir, el agente AK Método completado MJ en tiempo menor o igual a τ - t.Falla: si alguna de las condiciones mencionadas anteriormente no se mantiene, el agente AK detiene su ejecución. Otros agentes pueden continuar su ejecución, pero los métodos mk ∈ {m |MJ, M ∈ C≺} nunca se habilitará. La política πk de un agente AK es una función πk: mk × [0, Δ] → {w, e} y πk (m, t) = a medias, que si ak está en el método m en el tiempo t, lo haráElija realizar la acción a. Una política conjunta π = [πk] | a |K = 1 se considera óptimo (denotado como π ∗), si maximiza la suma de las recompensas esperadas para todos los agentes.4. Técnicas de solución 4.1 Algoritmos óptimos Política conjunta óptima π ∗ generalmente se encuentra utilizando el principio de actualización de Bellman, es decir, para determinar la política óptima para el método MJ, las políticas óptimas para los métodos mk ∈ {m |se usan mj, m ∈ C≺}. Desafortunadamente, para nuestro modelo, la política óptima para el método MJ también depende de las políticas para los métodos mI ∈ {m |m, mj ∈ C≺}. Esta doble dependencia resulta del hecho de que la recompensa esperada por comenzar la ejecución del método MJ en el momento t también depende de la probabilidad de que el método MJ se habilite por el tiempo t.En consecuencia, si el tiempo se discretiza, uno debe considerar δ | M |Políticas candidatas para encontrar π ∗. Por lo tanto, los algoritmos óptimos globalmente utilizados para resolver problemas del mundo real es poco probable que terminen en un tiempo razonable [11]. La complejidad de nuestro modelo podría reducirse si consideramos su versión más restringida;En particular, si cada método se permitiera habilitar en los puntos de tiempo t ∈ Tj ⊂ [0, δ], se podría usar el algoritmo de conjunto de cobertura (CSA) [1]. Sin embargo, la complejidad de CSA es doble exponencial en el tamaño de Ti, y para nuestros dominios TJ puede almacenar todos los valores que van desde 0 a δ.4.2 Algoritmos localmente óptimos Después de la aplicabilidad limitada de los algoritmos óptimos globalmente para DEC-MDP con restricciones temporales, los algoritmos localmente óptimos parecen más prometedores. Especialmente, el algoritmo OC-DEC-MDP [4] es particularmente significativo, ya que ha demostrado escalar fácilmente a dominios con cientos de métodos. La idea del algoritmo OC-DECMDP es comenzar con la primera política de tiempo de inicio π0 (según el cual un agente comenzará a ejecutar el método M tan pronto como M tenga una posibilidad no cero de estar habilitado), y luego lo mejorará.iterativamente, hasta que no sea posible una mejora adicional. En cada iteración, el algoritmo comienza con alguna política π, que determina de manera única las probabilidades Pi, [τ, τ] que el método MI se realizará en el intervalo de tiempo [τ, τ]. Luego realiza dos pasos: Paso 1: se propaga de los métodos de sumidero para obtener los métodos de obtención de los valores vi, [τ, τ], que representan la utilidad esperada para ejecutar el método MI en el intervalo de tiempo [τ, τ]. Esta propagación utiliza las probabilidades Pi, [τ, τ] de la iteración de algoritmo anterior. Llamamos a este paso una fase de propagación de valor. Paso 2: Dados los valores vi, [τ, τ] del paso 1, el algoritmo elige los intervalos de ejecución de métodos más rentables que se almacenan en una nueva política π. Luego propaga las nuevas probabilidades Pi, [τ, τ] de los métodos de origen a los métodos de hundimiento. Llamamos a este paso una fase de propagación de probabilidad. Si la política π no mejora π, el algoritmo termina. Hay dos deficiencias del algoritmo OC-DEC-MDP que abordamos en este documento. Primero, cada uno de los estados OC-DEC-MDP es un par MJ, [τ, τ], donde [τ, τ] es un intervalo de tiempo en el que se puede ejecutar el método MJ. Si bien dicha representación estatal es beneficiosa, ya que el problema puede resolverse con un algoritmo de iteración de valor estándar, desdibuja el mapeo intuitivo de la recompensa total esperada por comenzar la ejecución de MJ en el tiempo T.En consecuencia, si algún método MI permite el método MJ, y los valores VJ, [τ, τ] ∀τ, τ ∈ [0, δ] son conocidos, la operación que calcula los valores vi, [τ, τ] ∀τ, τ, τ, τ∈ [0, δ] (durante la fase de propagación del valor), se ejecuta en el tiempo O (I2), donde I es el número de intervalos de tiempo 3. Dado que el tiempo de ejecución de todo el algoritmo es proporcional al tiempo de ejecución de esta operación, especialmente para Big Time Horizons δ, el algoritmo OC-DECMDP funciona lento. En segundo lugar, si bien OC-DEC-MDP enfatiza en el cálculo preciso de los valores VJ, [τ, τ], no aborda un problema crítico que determina cómo los valores VJ, [τ, τ] se dividen dado que el método MJ tiene múltiplesMétodos habilitadores. Como mostramos más adelante, OC-DEC-MDP divide VJ, [τ, τ] en partes que pueden sobreestimar VJ, [τ, τ] cuando se resume nuevamente. Como resultado, los métodos que preceden al método MJ sobreestiman el valor para habilitar MJ que, como mostramos más adelante, pueden tener consecuencias desastrosas. En las siguientes dos secciones, abordamos ambas deficiencias.5. Propagación de la función de valor (VFP) El esquema general del algoritmo VFP es idéntico al algoritmo OCDEC-MDP, ya que realiza una serie de iteraciones de mejora de políticas, cada una implica una fase de propagación de valor y probabilidad. Sin embargo, en lugar de propagar valores separados, VFP mantiene y propaga las funciones completas, por lo tanto, nos referimos a estas fases como la fase de propagación de la función de valor y la fase de propagación de la función de probabilidad. Para este fin, para cada método mi ∈ M, definimos tres nuevas funciones: la función de valor, denotada como vi (t), que mapea el tiempo t ∈ [0, Δ] a la recompensa total esperada para comenzar la ejecución de método mi entiempo t.Función de costo de oportunidad, denotada como VI (t), que mapea el tiempo t ∈ [0, δ] a la recompensa total esperada por comenzar la ejecución del método MI en el momento t suponiendo que MI esté habilitado. Función de probabilidad, denotada como pi (t), que mapea el tiempo t ∈ [0, δ] a la probabilidad de que el método MI se complete antes del tiempo t.Dicha representación funcional nos permite leer fácilmente la política actual, es decir, si un agente AK está en el método MI en el momento t, entonces esperará siempre que la función de valor vi (t) sea mayor en el futuro. Formalmente: πk (mi, t) = j w if ∃t> t tal que vi (t) <vi (t) e de lo contrario. Ahora desarrollamos una técnica analítica para realizar la función de valor y las fases de propagación de la función de probabilidad.3 De manera similar para la fase de propagación de probabilidad 832, la sexta intl. Conf.Suponga que los agentes autónomos y los sistemas de múltiples agentes (AAMAS 07) 5.1 Fase de propagación de la función de valor, que estamos realizando una fase de propagación de la función de valor durante la cual las funciones de valor se propagan desde los métodos de sumidero a los métodos de origen. En cualquier momento durante esta fase, encontramos una situación que se muestra en la Figura 2, donde se conocen las funciones de costo de oportunidad [VJN] n n = 0 de los métodos [mjn] n n = 0, y el costo de oportunidad VI0 de método se deriva. Sea PI0 la función de distribución de probabilidad del método MI0 Duración de ejecución, y ri0 es la recompensa inmediata por comenzar y completar la ejecución del método Mi0 dentro de un intervalo de tiempo [τ, τ] tal que mi0 τ, τ ∈ C []. La función VI0 se deriva de RI0 y los costos de oportunidad Vjn, i0 (t) n = 1, ..., n de los métodos futuros. Formalmente: vi0 (t) = 8 >> <>>: r τ −t 0 pi0 (t) (ri0 + pn n = 0 vjn, i0 (t + t)) dt si ∃ mi0 τ, τ ∈C []tal que t ∈ [τ, τ] 0 de lo contrario (1) Tenga en cuenta que para t ∈ [τ, τ], si h (t): = ri0 + pn n = 0 vjn, i0 (τ −t) entonces vi0 is es is es is esUna convolución de P y H: Vi0 (t) = (PI0 ∗ H) (τ −t). Suponga por ahora que VJN, i0 representa un costo de oportunidad total, posponiendo la discusión sobre diferentes técnicas para dividir el costo de oportunidad VJ0 en [VJ0, Ik] K K = 0 hasta la sección 6. Ahora mostramos cómo derivar VJ0, i0 (derivación de VJN, i0 para n = 0 sigue el mismo esquema). Figura 2: Fragmento de un MDP del agente AK. Las funciones de probabilidad se propagan hacia adelante (de izquierda a derecha) mientras que las funciones de valor se propagan hacia atrás (derecha a izquierda). Sea V j0, i0 (t) el costo de oportunidad de comenzar la ejecución del método MJ0 en el momento t dado que el método MI0 se ha completado. Se deriva multiplicando VI0 por las funciones de probabilidad de todos los métodos que no sean MI0 que permitan MJ0. Formalmente: V J0, i0 (t) = VJ0 (t) · ky k = 1 pik (t). Donde de manera similar a [4] y [5] ignoramos la dependencia de [PLK] K K = 1. Observe que V J0, i0 no tiene que estar disminuyendo monotónicamente, es decir, retrasar la ejecución del método MI0 a veces puede ser rentable. Por lo tanto, el costo de oportunidad VJ0, i0 (t) de método de habilitación MI0 en el momento t debe ser mayor o igual a V j0, i0. Además, VJ0, i0 debería no aumentar. Formalmente: vj0, i0 = min f∈F f (2) donde f = {f |F ≥ V J0, I0 y F (T) ≥ F (t) ∀t <t}. Sabiendo que la oportunidad cuesta VI0, podemos derivar fácilmente la función de valor VI0. Deje que AK sea un agente asignado al método MI0. Si AK está a punto de comenzar la ejecución de MI0, significa que AK debe haber completado su parte del plan de misión hasta el método MI0. Dado que AK no sabe si otros agentes han completado los métodos [mlk] k = k k = 1, para derivar VI0, tiene que multiplicar VI0 por las funciones de probabilidad de todos los métodos de otros agentes que habilitan MI0. Formalmente: vi0 (t) = vi0 (t) · ky k = 1 plk (t) donde también se ignora la dependencia de [plk] k k = 1. En consecuencia, hemos mostrado un esquema general sobre cómo propagar las funciones de valor: saber [vjn] n n = 0 y [vjn] n n = 0 de métodos [mjn] n n = 0 podemos derivar vi0 y vi0 del método mi0. En general, el esquema de propagación de la función de valor comienza con los nodos de sumidero. Luego visita en cada vez un método m, de modo que todos los métodos que M habilitan ya se han marcado como se visitó. La fase de propagación de la función de valor termina cuando todos los métodos de origen se han marcado según lo visitado.5.2 Lectura de la política para determinar la política del agente AK para el método MJ0 Debemos identificar el conjunto ZJ0 de los intervalos [Z, Z] ⊂ [0, ..., δ], de modo que: ∀t∈ [Z,z] πk (MJ0, t) = W. Uno puede identificar fácilmente los intervalos de ZJ0 observando los intervalos de tiempo en los que la función de valor VJ0 no disminuye monotónicamente.5.3 Fase de propagación de la función de probabilidad Suponga ahora que las funciones de valor y los valores de los costos de oportunidad se han propagado de métodos de sumidero a nodos de origen y los conjuntos ZJ para todos los métodos mj ∈ M se han identificado. Dado que la fase de propagación de la función de valor estaba utilizando probabilidades Pi (t) para métodos mi ∈ M y tiempos t ∈ [0, δ] encontrado en la iteración de algoritmo anterior, ahora tenemos que encontrar nuevos valores Pi (t), para preparar el algoritmopara su próxima iteración. Ahora mostramos cómo en el caso general (Figura 2) propagamos las funciones de probabilidad hacia adelante a través de un método, es decir, suponemos que las funciones de probabilidad [pik] k k = 0 de los métodos [mik] k k = 0 son conocidos, y lasFunción de probabilidad PJ0 del método MJ0 debe derivarse. Sea PJ0 la función de distribución de probabilidad de la duración de la ejecución del método MJ0, y ZJ0 sea el conjunto de intervalos de inactividad para el método MJ0, encontrado durante la fase de propagación de la función de último valor. Si ignoramos la dependencia de [pik] k k = 0, entonces la probabilidad pj0 (t) de que la ejecución del método mj0 comienza antes del tiempo t por: pj0 (t) = (qk k = 0 pik (τ) si ∃ ∃(τ, τ) ∈ Zj0 s.t. t ∈ (τ, τ) qk k = 0 pik (t) de lo contrario. Dado pj0 (t), la probabilidad pj0 (t) de ese método mj0 se completará por el tiempo t se deriva por: pj0 (t) = z t 0 z t 0 (∂pj0 ∂t) (t) · pj0 (t −t) dt dt (3) que se puede escribir compactamente como ∂pj0 ∂t = pj0 ∗ ∂p J0 ∂t. En consecuencia, hemos mostrado cómo propagar las funciones de probabilidad [PIK] K K = 0 de los métodos [Mik] K K = 0 para obtener la función de probabilidad PJ0 del método MJ0. El general, la fase de propagación de la función de probabilidad comienza con los métodos de origen MSI para los cuales sabemos que psi = 1 ya que están habilitados de forma predeterminada. Luego visitamos en cada vez un método m de tal manera que todos los métodos que permitan el sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 833 M ya se han marcado como se lo visitó. La fase de propagación de la función de probabilidad termina cuando todos los métodos de sumidero se han marcado según lo visitado.5.4 El algoritmo De manera similar al algoritmo OC-DEC-MDP, VFP comienza las iteraciones de mejora de políticas con la Política de tiempo de inicio más temprana π0. Luego, en cada iteración: (i) propaga las funciones de valor [vi] | m |i = 1 usando las antiguas funciones de probabilidad [PI] | M |i = 1 de la iteración de algoritmo anterior y establece los nuevos conjuntos [Zi] | M |i = 1 de los intervalos de inactividad del método, y (ii) propaga las nuevas funciones de probabilidad [pi] | m |i = 1 usando los conjuntos recién establecidos [Zi] | M |i = 1. Estas nuevas funciones [pi] | m |I = 1 se usan luego en la siguiente iteración del algoritmo. De manera similar a OC-DEC-MDP, VFP termina si una nueva política no mejora la política de la iteración de algoritmo anterior.5.5 Implementación de operaciones de función Hasta ahora, hemos obtenido las operaciones funcionales para la función de la función de valor y la propagación de la función de probabilidad sin elegir ninguna representación de función. En general, nuestras operaciones funcionales pueden manejar el tiempo continuo, y uno tiene libertad para elegir una técnica de aproximación de función deseada, como aproximación lineal por partes [7] o constante por partes [9]. Sin embargo, dado que uno de nuestros objetivos es comparar VFP con el algoritmo OC-DP-DP existente, que funciona solo para un tiempo discreto, también discretizamos el tiempo y elegimos aproximar las funciones de valor y las funciones de probabilidad con funciones lineales por partes (PWL). Cuando el algoritmo VFP propaga las funciones de valor y las funciones de probabilidad, constantemente lleva a cabo operaciones representadas por las ecuaciones (1) y (3) y ya hemos demostrado que estas operaciones son convoluciones de algunas funciones P (T) y H (t). Si el tiempo está discretizado, las funciones P (t) y H (t) son discretas;Sin embargo, H (t) se puede aproximar bien con una función PWL BH (t), que es exactamente lo que hace VFP. Como resultado, en lugar de realizar multiplicaciones O (Δ2) para calcular F (t), VFP solo necesita realizar multiplicaciones O (k · δ) para calcular F (t), donde k es el número de segmentos lineales de BH (t (t) (Tenga en cuenta que dado que h (t) es monotónico, bh (t) generalmente está cerca de h (t) con k δ). Dado que los valores de PI están en rango [0, 1] y los valores de VI están en el rango [0, p mi∈M ri], sugerimos aproximar VI (t) con BVI (t) dentro del error V y PI (t) conBPI (t) dentro del error p. Ahora demostramos que el error de aproximación general acumulado durante la fase de propagación de la función de valor puede expresarse en términos de P y V: Teorema 1. Sea C≺ un conjunto de restricciones de precedencia de un DEC-MDP con restricciones temporales, y P y V sean la función de probabilidad y los errores de aproximación de la función de valor respectivamente. El error general π = maxv supt∈ [0, δ] | V (t) - bv (t) |de la función de propagación de la función de valor se limita a: | C≺ |V + ((1 + P) | C≺ | - 1) P Mi∈M RI. PRUEBA. Para establecer el límite para π, primero probamos mediante la inducción en el tamaño de C≺, que el error general de la fase de propagación de la función de probabilidad, π (p) = maxp supt∈ [0, δ] | p (t) -−BP (t) |está limitado por (1 + P) | C≺ |- 1. Base de inducción: si n = 1 solo hay dos métodos presentes, y realizaremos la operación identificada por la ecuación (3) solo una vez, introduciendo el error π (p) = p = (1 + p) | C≺ |- 1. Paso de inducción: supongamos que π (p) para | c≺ |= n está limitado por (1 + p) n - 1, y queremos demostrar que esta declaración es válida para | c≺ |= n.Sea g = m, c≺ un gráfico con la mayoría de los bordes n + 1, y g = m, c≺ un subgrafio de g, de modo que c≺ = c≺ - {mi, mj}, donde mj ∈ M esUn nodo de sumidero en G. de la suposición de inducción que tenemos, que C≺ introduce el error de fase de propagación de probabilidad limitado por (1 + P) N - 1. Ahora agregamos el enlace {MI, MJ} a C≺, que afecta el error de una sola función de probabilidad, a saber, PJ, por un factor de (1 + P). Dado que el error de fase de propagación de probabilidad en C≺ se limitó por (1 + P) N - 1, en C≺ = C≺ ∪ {mi, MJ} puede ser como máximo ((1 + p) n - 1) (1 +P) <(1 + p) n + 1 - 1. Por lo tanto, si las funciones de costo de oportunidad no se sobreestiman, están limitadas por p mi∈M ri y el error de una operación de propagación de la función de valor único será como máximo z δ 0 p (t) (v + ((1+ p) |C≺ | −1) x mi∈M ri) dt <v + ((1+ p) | c≺ | −1) x mi∈M ri. Dado que el número de operaciones de propagación de la función de valor es | C≺ |, el error total π de la fase de propagación de la función de valor está limitado por: | C≺ |V + ((1 + P) | C≺ | - 1) P Mi∈M RI.6. Dividir las funciones de costos de oportunidad En la Sección 5, dejamos de lado la discusión sobre cómo la función de costo de oportunidad VJ0 del método MJ0 se divide en las funciones de costo de oportunidad [VJ0, IK] K K = 0 enviado de vuelta a los métodos [Mik] K K = 0,que habilitan directamente el método MJ0. Hasta ahora, hemos adoptado el mismo enfoque que en [4] y [5] en que la función de costo de oportunidad VJ0, IK que el método Mik envía al método MJ0 es una función mínima y no aumentable que domina la función V J0, ik (t) = (vj0 · q k ∈ {0, ..., k} k = k pik) (t). Nos referimos a este enfoque, como heurística H 1,1. Antes de demostrar que esta heurística sobreestima el costo de oportunidad, discutimos tres problemas que pueden ocurrir al dividir las funciones del costo de oportunidad: (i) sobreestimación, (ii) subestimación y (iii) inanición. Considere la situación en la Figura 3: división de la función de valor del método MJ0 entre los métodos [mik] k k = 0.(3) Cuando se realiza la propagación de la función de valor para los métodos [mik] k k = 0. Para cada k = 0, ..., k, la ecuación (1) deriva la función de costo de oportunidad VIK de la recompensa inmediata RK y la función de costo de oportunidad VJ0, IK. Si M0 es los únicos métodos que precede al método MK, entonces V ik, 0 = VIK se propaga al método M0 y, en consecuencia, el costo de oportunidad para completar el método M0 en el momento t es igual a PK K = 0 VIK, 0 (t). Si se sobreestima este costo, entonces un agente A0 al método M0 tendrá demasiado incentivo para finalizar la ejecución de M0 en el momento t.En consecuencia, aunque la probabilidad de P (t) de que M0 estará habilitado por otros agentes por el tiempo T es bajo, el agente A0 aún podría encontrar la utilidad esperada de comenzar la ejecución de M0 en el momento T más alto que la utilidad esperada de hacerlo más tarde. Como resultado, elegirá en el momento t comenzar a ejecutar el método M0 en lugar de esperar, lo que puede tener consecuencias desastrosas. Del mismo modo, si se subestima PK K = 0 VIK, 0 (t), el Agente A0 podría perder el interés en habilitar los métodos futuros [Mik] K K = 0 y simplemente centrarse en 834 el Sexto INTL. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) maximizando la posibilidad de obtener su recompensa inmediata R0. Dado que esta posibilidad se incrementa cuando el Agente A0 Waits4, considerará en el momento T más rentable esperar, en lugar de comenzar la ejecución de M0, que puede tener consecuencias igualmente desastrosas. Finalmente, si VJ0 se divide de alguna manera, que para algunos k, vj0, ik = 0, es el método Mik el que subestima el costo de oportunidad de habilitar el método MJ0, y se aplica el razonamiento similar. Llamamos a tal problema un hambre del método MK. Esa breve discusión muestra la importancia de dividir la función de costo de oportunidad VJ0 de tal manera que se evita la sobreestimación, la subestimación y el problema de inanición. Ahora demostramos que: Teorema 2. Heuristic H 1,1 puede sobreestimar el costo de oportunidad. PRUEBA. Probamos el teorema mostrando un caso en el que ocurre la sobreestimación. Para el plan de misión de la figura (3), deje que h 1,1 divida VJ0 en [V j0, ik = vj0 · q k ∈ {0, ..., k} k = k pik] k k = 0 enviado a métodos[mik] k k = 0 respectivamente. Además, suponga que los métodos [mik] k k = 0 no proporcionan recompensa local y tienen las mismas ventanas de tiempo, es decir, rik = 0;Estik = 0, letik = δ para k = 0, ..., k. Para demostrar la sobreestimación del costo de oportunidad, debemos identificar t0 ∈ [0, ..., Δ] de modo que la oportunidad coste PK K = 0 VIK(t) Para los métodos [mik] k k = 0 en el tiempo t ∈ [0, .., δ] es mayor que el costo de oportunidad VJ0 (t). De la ecuación (1) tenemos: VIK (T) = Z δ - T 0 PIK (T) VJ0, IK (T + T) DT suma sobre todos los métodos [Mik] K K = 0 Obtenemos: KX K = 0 VIK(t) = kx k = 0 z Δ - t 0 pik (t) vj0, ik (t + t) dt (4) ≥ kx k = 0 z δ - t 0 pik (t) v j0, ik (t +t) dt = kx k = 0 z δ - t 0 pik (t) vj0 (t + t) y k ∈ {0, ..., k} k = k pik (t + t) dt dejar c ∈ (0, 1] ser constante y t0 ∈ [0, Δ] ser tal que ∀t> t0 y ∀k = 0, .., k tenemos q k ∈ {0, ..., k} k = k pik (t)> C Ahora, supongamos que existe T1 ∈ (T0, δ], de modo que PK K = 0 R T1 - T0 0 PIK (T) DT> VJ0 (T0) C · VJ0 (T1). Dado que disminuir el límite superior de la función integral sobre positiva también disminuye la integral, tenemos: KX K = 0 VIK (T0)> C KX K = 0 Z T1 T0 PIK (T - T0) VJ0 (T) DT y desde VJ0(t) no es creciente: tenemos: kx k = 0 vik (t0)> c · vj0 (t1) kx k = 0 z t1 t0 pik (t-t0) dt (5) = c · vj0 (t1) kxk = 0 z t1 - t0 0 pik (t) dt> c · vj0 (t1) vj (t0) c · vj (t1) = vj (t0) 4 suponiendo que 0 en consecuencia, el costo de oportunidad pk k = 0 VIK (t0) de comenzar la ejecución de métodos [mik] k k = 0 en el tiempo t ∈ [0, .., δ] es mayor que el costo de oportunidad VJ0 (T0) que prueba el teorema. Figura 4 muestra que la sobreestimación de la oportunidadEl costo es fácilmente observable en la práctica. Para remediar el problema de la sobreestimación de los costos de oportunidad, proponemos tres heurísticas alternativas que dividen las funciones del costo de oportunidad: • Heuristic H 1,0: solo un método, Mik obtiene la recompensa completa esperada por habilitar el método MJ0, es decir, V J0, IK (IK (t) = 0 para k ∈ {0, ..., k} \\ {k} y v j0, ik (t) = (vj0 · q k ∈ {0, ..., k} k = k pik) (t).• Heuristic H 1/2,1/2: cada método [Mik] K K = 0 Obtiene el costo de oportunidad total para habilitar el método MJ0 dividido por el número K de métodos que habilitan el método MJ0, es decir, V J0, IK (T)= 1 k (vj0 · q k ∈ {0, ..., k} k = k pik) (t) para k ∈ {0, ..., k}.• Heuristic BH 1,1: Esta es una versión normalizada de la heurística H 1,1 en que cada método [Mik] K K = 0 inicialmente obtiene el costo de oportunidad total para habilitar el método MJ0. Para evitar la sobreestimación de los costos de oportunidad, normalizamos las funciones divididas cuando su suma excede la función de costo de oportunidad a dividirse. Formalmente: V J0, Ik (T) = 8> <>: V H 1,1 J0, Ik (T) si Pk K = 0 V H 1,1 J0, Ik (T) <VJ0 (T) Vj0 (T) V H1,1 J0, Ik (T) Pk K = 0 V H 1,1 J0, Ik (t) De lo contrario, donde v H 1,1 J0, Ik (t) = (VJ0 · Q k ∈ {0, ..., k} k = k pjk) (t). Para la nueva heurística, ahora probamos que: Teorema 3. Heuristics H 1,0, H 1/2,1/2 y BH 1,1 no sobreestiman el costo de oportunidad. PRUEBA. Cuando Heuristic H 1,0 se usa para dividir la función de costo de oportunidad VJ0, solo un método (por ejemplo, Mik) obtiene el costo de oportunidad para habilitar el método MJ0. Por lo tanto: kx k = 0 VIK (t) = z δ-t 0 pik (t) vj0, ik (t + t) dt (6) y dado que vj0 no aumenta ≤ z Δ-t 0 pik (t) vj0(t + t) · y k ∈ {0, ..., k} k = k pjk (t + t) dt ≤ z Δ - t 0 pik (t) vj0 (t + t) dt ≤ vj0 (t)La última desigualdad también es una consecuencia del hecho de que VJ0 no aumenta. Para la heurística H 1/2,1/2, de manera similar, tenemos: kx k = 0 vik (t) ≤ kx k = 0 z Δ - t 0 pik (t) 1 k vj0 (t + t) y k ∈ {0,..., k} k = k pjk (t + t) dt ≤ 1 k kx k = 0 z Δ - t 0 pik (t) vj0 (t + t) dt ≤ 1 k · k · vj0 (t) = =VJ0 (t). Para BH 1,1 heurística, la función de costo de oportunidad VJ0 está, por definición, dividida de tal manera, que Pk K = 0 VIK (t) ≤ VJ0 (t). En consecuencia, hemos demostrado que nuestra nueva heurística H 1,0, H 1/2,1/2 y BH 1,1 evitan la sobreestimación del costo de oportunidad. El sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 835 La razón por la que hemos introducido las tres nuevas heurísticas es la siguiente: dado que H 1,1 sobreestima el costo de oportunidad, uno tiene que elegir qué método recibirá la recompensa por habilitarEl método MJ0, que es exactamente lo que hace la heurística H 1,0. Sin embargo, la heurística H 1,0 deja métodos K - 1 que preceden al método MJ0 sin ninguna recompensa que conduzca a la inanición. Se puede evitar el hambre si las funciones de costo de oportunidad se dividen utilizando H 1/2,1/2 heurística, que proporciona recompensa a todos los métodos habilitadores. Sin embargo, la suma de las funciones de costo de oportunidad dividida para la heurística H 1/2,1/2 puede ser más pequeña que la función de costo de oportunidad de división distinta de cero para la heurística H 1,0, que es claramente indeseable. Dicha situación (Figura 4, Heuristic H 1,0) ocurre porque la media F+G 2 de dos funciones F, G no es más pequeña que F ni G solo si F = G.Es por eso que hemos propuesto la heurística BH 1,1, que por definición evita los problemas de sobreestimación, subestimación y inanición.7. Evaluación de evaluación experimental ya que el algoritmo VFP que presentamos proporciona dos mejoras ortogonales sobre el algoritmo OC-DEC-DP-MDP, la evaluación experimental que realizamos constaba en dos partes: en la Parte 1, probamos empíricamente la calidad de las soluciones queOC-DEC-MDP o VFP) se encuentra, dado que utiliza diferentes funciones de costo de oportunidad dividiendo la heurística, y en la Parte 2, comparamos los tiempos de ejecución de los algoritmos VFP y OC-Dec-MDP para una variedad de configuraciones de planes de misión. Parte 1: Primero ejecutamos el algoritmo VFP en una configuración de plan de misión genérica de la Figura 3, donde solo estaban presentes los métodos MJ0, MI1, MI2 y M0. Las ventanas de tiempo de todos los métodos se establecieron en 400, la duración PJ0 del método MJ0 fue uniforme, es decir, PJ0 (T) = 1 400 y duraciones PI1, PI2 de los métodos MI1, MI2 fueron distribuciones normales, es decir, PI1 = N (μ = 250 = 250, σ = 20), y Pi2 = N (μ = 200, σ = 100). Asumimos que solo el método MJ0 proporcionó recompensa, es decir, RJ0 = 10 fue la recompensa por terminar la ejecución del método MJ0 antes del tiempo t = 400. Mostramos nuestros resultados en la Figura (4) donde el eje X de cada uno de los gráficos representa el tiempo, mientras que el eje y representa el costo de oportunidad. El primer gráfico confirma que cuando la función de costo de oportunidad VJ0 se dividió en las funciones de costo de oportunidad VI1 y VI2 utilizando la heurística H 1,1, la función VI1 +VI2 no siempre estaba por debajo de la función VJ0. En particular, VI1 (280) + VI2 (280) excedió VJ0 (280) en un 69%. Cuando la heurística H 1,0, H 1/2,1/2 y BH 1,1 se usaron (gráficos 2,3 y 4), la función VI1 + VI2 siempre estaba por debajo de VJ0. Luego cambiamos nuestra atención al dominio de rescate civil introducido en la Figura 1 para la cual probamos todas las duraciones de ejecución de acción de la distribución normal n = (μ = 5, σ = 2)). Para obtener la línea de base para el rendimiento heurístico, implementamos un solucionador óptimo globalmente, que encontró una verdadera recompensa total esperada para este dominio (Figura (6a)). Luego comparamos esta recompensa con una recompensa total esperada encontrada por un solucionador localmente óptimo guiado por cada una de las heurísticas discutidas. Figura (6a), que traza sobre el eje Y, la recompensa total esperada de una política complementa nuestros resultados anteriores: H 1,1 Heuristic sobreestimó la recompensa total esperada en un 280%, mientras que las otras heurísticas pudieron guiar el solucionador localmente óptimo.a una verdadera recompensa total esperada. PARTE 2: Luego elegimos H 1,1 para dividir las funciones de costos de oportunidad y realizamos una serie de experimentos destinados a probar la escalabilidad de VFP para varias configuraciones del plan de misión, utilizando el rendimiento del algoritmo OC-DEC-MDP como un punto de referencia. Comenzamos las pruebas de escalabilidad VFP con una configuración de la Figura (5a) asociada con el dominio de rescate civil, para el cual las duraciones de ejecución de métodos se extendieron a distribuciones normales n (μ = Figura 5: Configuraciones del plan de misión: (a) dominio de rescate civil (((b) Cadena de N Métodos, (c) Árbol de N Figura 6: rendimiento de VFP en el dominio de rescate civil.30, σ = 5), y la fecha límite se extendió a δ = 200. Decidimos probar el tiempo de ejecución del algoritmo VFP que se ejecuta con tres niveles diferentes de precisión, es decir, se eligieron diferentes parámetros de aproximación P y V, de modo que el error acumulativo de la solución encontrado por VFP permaneció dentro del 1%, 5% y 10%de la solución encontrada por el algoritmo Oc- DEC-MDP. Luego ejecutamos ambos algoritmos para un total de 100 iteraciones de mejora de políticas. La Figura (6b) muestra el rendimiento del algoritmo VFP en el dominio de rescate civil (el eje Y muestra el tiempo de ejecución en milisegundos). Como vemos, para este pequeño dominio, VFP se ejecuta un 15% más rápido que OCDEC-MDP al calcular la política con un error de menos del 1%. A modo de comparación, la resolución óptima globalmente no terminó dentro de las primeras tres horas de su tiempo de ejecución, lo que muestra la fuerza de los solucionadores oportunistas, como OC-DEC-MDP. Luego decidimos probar cómo se desempeña VFP en un dominio más difícil, es decir, con métodos que forman una cadena larga (Figura (5B)). Probamos cadenas de 10, 20 y 30 métodos, aumentando al mismo tiempo de tiempo en las ventanas de tiempo a 350, 700 y 1050 para garantizar que se puedan alcanzar métodos posteriores. Mostramos los resultados en la Figura (7a), donde variamos en el eje x el número de métodos y trazamos en el eje Y el tiempo de ejecución del algoritmo (observe la escala logarítmica). Como observamos, la ampliación del dominio revela el alto rendimiento de VFP: dentro del error del 1%, se ejecuta hasta 6 veces más rápido que OC-DECMDP. Luego probamos cómo se escala VFP, dado que los métodos están dispuestos en un árbol (Figura (5C)). En particular, consideramos árboles con factor de ramificación de 3, y profundidad de 2, 3 y 4, aumentando al mismo tiempo el horizonte temporal de 200 a 300, y luego a 400. Mostramos los resultados en la figura (7b). Aunque las velocidades son más pequeñas que en el caso de una cadena, el algoritmo VFP todavía funciona hasta 4 veces más rápido que OC-DEC-MDP al calcular la política con un error de menos del 1%. Finalmente probamos cómo VFP maneja los dominios con métodos dispuestos en una malla n × n, es decir, c≺ = {mi, j, mk, j+1} para i = 1, ..., n;k = 1, ..., n;J = 1, ..., n - 1. En particular, consideramos 836 el sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) Figura 4: Visualización de heurísticas para la división de costos de oportunidad. Figura 7: Experimentos de escalabilidad para OC-DEC-MDP y VFP para diferentes configuraciones de red.Métodos de malla de 3 × 3, 4 × 4 y 5 × 5. Para tales configuraciones, debemos aumentar en gran medida el horizonte temporal ya que las probabilidades de habilitar los métodos finales en un tiempo particular disminuyen exponencialmente. Por lo tanto, variamos los horizontes temporales de 3000 a 4000, y luego a 5000. Mostramos los resultados en la Figura (7c) donde, especialmente para mallas más grandes, el algoritmo VFP se extiende hasta un orden de magnitud más rápido que OC-DEC-MDP mientras se encuentra una política que está dentro de menos del 1% de la política encontrada por OC- DECMDP.8. Conclusiones El proceso de decisión descentralizado de Markov (DEC-MDP) ha sido muy popular para el modelado de problemas de coordinación de agentes, es muy difícil de resolver, especialmente para los dominios del mundo real. En este artículo, mejoramos un método de solución heurística de última generación para Dec-MDP, llamado OC-DEC-MDP, que recientemente se ha demostrado que se reduce a grandes Dec-MDP. Nuestro método de solución heurística, llamada propagación de la función de valor (VFP), proporcionó dos mejoras ortogonales de OC-DEC-MDP: (i) aceleró OC-DECMDP por un orden de magnitud al mantener y manipular una función de valor para cada método en lugar deUn valor separado para cada par de método e intervalo de tiempo, y (ii) logró mejores cualidades de solución que OC-DEC-MDP porque corrigió la sobreestimación del costo de oportunidad de OC-DEC-MDP. En términos de trabajo relacionado, hemos discutido ampliamente el algoritmo OCDEC-MDP [4]. Además, como se discutió en la Sección 4, hay algoritmos globalmente óptimos para resolver Dec-MDP con restricciones temporales [1] [11]. Desafortunadamente, no pueden escalar a los dominios a gran escala en la actualidad. Más allá de OC-DEC-MDP, hay otros algoritmos localmente óptimos para Dec-MDPS y DECPOMDPS [8] [12], [13], sin embargo, tradicionalmente no han tratado con tiempos de ejecución inciertos y restricciones temporales. Finalmente, las técnicas de función de valor se han estudiado en el contexto de los MDP de agente único [7] [9]. Sin embargo, de manera similar a [6], no abordan la falta de conocimiento del estado global, que es un tema fundamental en la planificación descentralizada. Agradecimientos Este material se basa en el trabajo respaldado por el Programa de Coordinadores DARPA/IPTO y el Laboratorio de Investigación de la Fuerza Aérea bajo el No. FA875005C0030. Los autores también quieren agradecer a Sven Koenig y a los revisores anónimos por sus valiosos comentarios.9. Referencias [1] R. Becker, V. Lesser y S. Zilberstein. MDP descentralizados con interacciones basadas en eventos. En Aamas, páginas 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser y C. V. Goldman. Procesos de decisión descentralizados de Markov descentralizados independientes de la transición. En Aamas, páginas 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein y N. Inmerman. La complejidad del control descentralizado de los procesos de decisión de Markov. En UAI, páginas 32-37, 2000. [4] A. Beynier y A. Mouaddib. Un algoritmo polinomial para los procesos de decisión de Markov descentralizados con restricciones temporales. En Aamas, páginas 963-969, 2005. [5] A. Beynier y A. Mouaddib. Un algoritmo iterativo para resolver procesos de decisión descentralizados de Markov restringidos. En AAAI, páginas 1089-1094, 2006. [6] C. Boutilier. Optimización y coordinación secuenciales en sistemas múltiples. En IJCAI, páginas 478-485, 1999. [7] J. Boyan y M. Littman. Soluciones exactas para MDP dependientes del tiempo. En NIPS, páginas 1026-1032, 2000. [8] C. Goldman y S. Zilberstein. Optimización del intercambio de información en sistemas cooperativos de múltiples agentes, 2003. [9] L. Li y M. Littman. Aproximación perezosa para resolver MDP continuos de horizón finito. En AAAI, páginas 1175-1180, 2005. [10] Y. Liu y S. Koenig. Planificación sensible al riesgo con funciones de utilidad de un interruptor: iteración de valor. En AAAI, páginas 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman y M. Boddy. Gestión de planes coordinados utilizando MDP multiagentes. En el Simposio de Primavera AAAI, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath y S. Marsella. Taming POMDP descentralizado: hacia un cálculo de políticas eficiente para configuraciones multiagentes. En Ijcai, páginas 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe y M. Yokoo. POMDP distribuidos en red: una sinergia de optimización de restricciones distribuidas y POMDPS. En IJCAI, páginas 1758-1760, 2005. El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 837",
    "original_sentences": [
        "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of agent-coordination problems in domains with uncertainty and time constraints but very difficult to solve.",
        "In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs.",
        "Our heuristic solution method, called Value Function Propagation (VFP), combines two orthogonal improvements of OC-DEC-MDP.",
        "First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval.",
        "Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP.",
        "We test both improvements independently in a crisis-management domain as well as for other types of domains.",
        "Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations.",
        "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
        "INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage rescue mission [11] to the coordination of Autonomous Mars Exploration Rovers [2].",
        "Because of the uncertain and dynamic characteristics of such domains, decision-theoretic models have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time.",
        "Key decision-theoretic models that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs).",
        "Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research.",
        "In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses.",
        "Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks.",
        "To remedy that, locally optimal algorithms have been proposed [12] [4] [5].",
        "In particular, Opportunity Cost DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons.",
        "Additionally, OC-DEC-MDP is unique in its ability to address both temporal constraints and uncertain method execution durations, which is an important factor for real-world domains.",
        "OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous policy iteration.",
        "However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values.",
        "The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval.",
        "Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods.",
        "This reward, also referred to as the opportunity cost, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies.",
        "In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with temporal constraints and uncertain method execution durations, that builds on the success of OC-DEC-MDP.",
        "VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval.",
        "Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions.",
        "Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the opportunity cost, and to remedy that, we introduce a set of heuristics, that correct the opportunity cost overestimation problem.",
        "This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building.",
        "In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers.",
        "Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements.",
        "Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the opportunity cost overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2.",
        "MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome.",
        "One example domain is large-scale disaster, like a fire in a skyscraper.",
        "Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless.",
        "In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations.",
        "Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 .",
        "General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading.",
        "The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B.",
        "As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3).",
        "Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc.",
        "We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B.",
        "One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians.",
        "If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians.",
        "In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan.",
        "Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B.",
        "Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3.",
        "MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 .",
        "Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents.",
        "Agents cannot communicate during mission execution.",
        "Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø.",
        "Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time.",
        "Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations.",
        "In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of temporal constraints in the system.",
        "Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints.",
        "For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates.",
        "In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints.",
        "We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system.",
        "For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints.",
        "Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline.",
        "Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi.",
        "Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents.",
        "Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W).",
        "In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + .",
        "In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution.",
        "Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled.",
        "The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a.",
        "A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4.",
        "SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used.",
        "Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}.",
        "This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ .",
        "Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11].",
        "The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used.",
        "However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising.",
        "Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods.",
        "The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible.",
        "At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ].",
        "It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ].",
        "This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration.",
        "We call this step a value propagation phase.",
        "Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π .",
        "It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods.",
        "We call this step a probability propagation phase.",
        "If policy π does not improve π, the algorithm terminates.",
        "There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper.",
        "First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed.",
        "While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 .",
        "Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow.",
        "Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods.",
        "As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again.",
        "As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences.",
        "In the next two sections, we address both of these shortcomings. 5.",
        "VALUE FUNCTION PROPAGATION (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase.",
        "However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the value function propagation phase and the probability function propagation phase.",
        "To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. Opportunity Cost Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled.",
        "Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future.",
        "Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise.",
        "We now develop an analytical technique for performing the value function and probability function propagation phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 Value Function Propagation Phase Suppose, that we are performing a value function propagation phase during which the value functions are propagated from the sink methods to the source methods.",
        "At any time during this phase we encounter a situation shown in Figure 2, where opportunity cost functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the opportunity cost Vi0 of method mi0 is to be derived.",
        "Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ].",
        "The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods.",
        "Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t).",
        "Assume for now, that Vjn,i0 represents a full opportunity cost, postponing the discussion on different techniques for splitting the opportunity cost Vj0 into [Vj0,ik ]K k=0 until section 6.",
        "We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme).",
        "Figure 2: Fragment of an MDP of agent Ak.",
        "Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left).",
        "Let V j0,i0 (t) be the opportunity cost of starting the execution of method mj0 at time t given that method mi0 has been completed.",
        "It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 .",
        "Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t).",
        "Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1.",
        "Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable.",
        "Therefore the opportunity cost Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 .",
        "Furthermore, Vj0,i0 should be non-increasing.",
        "Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }.",
        "Knowing the opportunity cost Vi0 , we can then easily derive the value function vi0 .",
        "Let Ak be an agent assigned to the method mi0 .",
        "If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 .",
        "Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 .",
        "Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored.",
        "We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 .",
        "In general, the value function propagation scheme starts with sink nodes.",
        "It then visits at each time a method m, such that all the methods that m enables have already been marked as visited.",
        "The value function propagation phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 Probability Function Propagation Phase Assume now, that value functions and opportunity cost values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified.",
        "Since value function propagation phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration.",
        "We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived.",
        "Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last value function propagation phase.",
        "If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise.",
        "Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t .",
        "We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 .",
        "The general, the probability function propagation phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default.",
        "We then visit at each time a method m such that all the methods that enable The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited.",
        "The probability function propagation phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 .",
        "Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1.",
        "These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm.",
        "Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and probability function propagation without choosing any function representation.",
        "In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation.",
        "However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions.",
        "When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t).",
        "If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does.",
        "As a result, instead of performing O(Δ2 ) multiplications to compute f(t), VFP only needs to perform O(k · Δ) multiplications to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ).",
        "Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P .",
        "We now prove that the overall approximation error accumulated during the value function propagation phase can be expressed in terms of P and V : THEOREM 1.",
        "Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively.",
        "The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of value function propagation phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri .",
        "PROOF.",
        "In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of probability function propagation phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1.",
        "Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1.",
        "Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1.",
        "We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ).",
        "Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1.",
        "Thus, if opportunity cost functions are not overestimated, they are bounded by P mi∈M ri and the error of a single value function propagation operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri.",
        "Since the number of value function propagation operations is |C≺|, the total error π of the value function propagation phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6.",
        "SPLITTING THE OPPORTUNITY COST FUNCTIONS In section 5 we left out the discussion about how the opportunity cost function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 .",
        "So far, we have taken the same approach as in [4] and [5] in that the opportunity cost function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t).",
        "We refer to this approach, as heuristic H 1,1 .",
        "Before we prove that this heuristic overestimates the opportunity cost, we discuss three problems that might occur when splitting the opportunity cost functions: (i) overestimation, (ii) underestimation and (iii) starvation.",
        "Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when value function propagation for methods [mik ]K k=0 is performed.",
        "For each k = 0, ..., K, Equation (1) derives the opportunity cost function Vik from immediate reward rk and opportunity cost function Vj0,ik .",
        "If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the opportunity cost for completing the method m0 at time t is equal to PK k=0 Vik,0(t).",
        "If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later.",
        "As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences.",
        "Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0.",
        "Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences.",
        "Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the opportunity cost of enabling method mj0 , and the similar reasoning applies.",
        "We call such problem a starvation of method mk.",
        "That short discussion shows the importance of splitting the opportunity cost function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided.",
        "We now prove that: THEOREM 2.",
        "Heuristic H 1,1 can overestimate the opportunity cost.",
        "PROOF.",
        "We prove the theorem by showing a case where the overestimation occurs.",
        "For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively.",
        "Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of opportunity cost, we must identify t0 ∈ [0, ..., Δ] such that the opportunity cost PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t).",
        "From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing.",
        "Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) .",
        "Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the opportunity cost PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice.",
        "To remedy the problem of opportunity cost overestimation, we propose three alternative heuristics that split the opportunity cost functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 .",
        "To avoid opportunity cost overestimation, we normalize the split functions when their sum exceeds the opportunity cost function to be split.",
        "Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t).",
        "For the new heuristics, we now prove, that: THEOREM 3.",
        "Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the opportunity cost.",
        "PROOF.",
        "When heuristic H 1,0 is used to split the opportunity cost function Vj0 , only one method (e.g. mik ) gets the opportunity cost for enabling method mj0 .",
        "Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing.",
        "For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t).",
        "For heuristic bH 1,1 , the opportunity cost function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t).",
        "Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the opportunity cost.",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the opportunity cost, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does.",
        "However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation.",
        "Starvation can be avoided if opportunity cost functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods.",
        "However, the sum of split opportunity cost functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split opportunity cost function for the H 1,0 heuristic, which is clearly undesirable.",
        "Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7.",
        "EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations.",
        "Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.",
        "Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100).",
        "We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400.",
        "We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost.",
        "The first graph confirms, that when the opportunity cost function Vj0 was split into opportunity cost functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function.",
        "In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%.",
        "When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 .",
        "We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)).",
        "To obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)).",
        "We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.",
        "Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.",
        "Part 2: We then chose H 1,1 to split the opportunity cost functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark.",
        "We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.",
        "Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200.",
        "We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm.",
        "We then run both algorithms for a total of 100 policy improvement iterations.",
        "Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).",
        "As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%.",
        "For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP.",
        "We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)).",
        "We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.",
        "We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).",
        "As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP.",
        "We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)).",
        "In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400.",
        "We show the results in Figure (7b).",
        "Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%.",
        "We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1.",
        "In particular, we consider 836 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting.",
        "Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods.",
        "For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially.",
        "We therefore vary the time horizons from 3000 to 4000, and then to 5000.",
        "We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8.",
        "CONCLUSIONS Decentralized Markov Decision Process (DEC-MDP) has been very popular for modeling of agent-coordination problems, it is very difficult to solve, especially for the real-world domains.",
        "In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs.",
        "Our heuristic solution method, called Value Function Propagation (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the opportunity cost of OC-DEC-MDP.",
        "In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4].",
        "Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with temporal constraints [1] [11].",
        "Unfortunately, they fail to scale up to large-scale domains at present time.",
        "Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and temporal constraints.",
        "Finally, value function techniques have been studied in context of single agent MDPs [7] [9].",
        "However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning.",
        "Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No.",
        "FA875005C0030.",
        "The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9.",
        "REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein.",
        "Decentralized MDPs with Event-Driven Interactions.",
        "In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman.",
        "Transition-Independent Decentralized Markov Decision Processes.",
        "In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
        "The complexity of decentralized control of Markov decision processes.",
        "In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib.",
        "A polynomial algorithm for decentralized Markov decision processes with temporal constraints.",
        "In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib.",
        "An iterative algorithm for solving constrained decentralized Markov decision processes.",
        "In AAAI, pages 1089-1094, 2006. [6] C. Boutilier.",
        "Sequential optimality and coordination in multiagent systems.",
        "In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman.",
        "Exact solutions to time-dependent MDPs.",
        "In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein.",
        "Optimizing information exchange in cooperative multi-agent systems, 2003. [9] L. Li and M. Littman.",
        "Lazy approximation for solving continuous finite-horizon MDPs.",
        "In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig.",
        "Risk-sensitive planning with one-switch utility functions: Value iteration.",
        "In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy.",
        "Coordinated plan management using multiagent MDPs.",
        "In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella.",
        "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
        "In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
        "Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs.",
        "In IJCAI, pages 1758-1760, 2005.",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837"
    ],
    "error_count": 0,
    "keys": {
        "agent-coordination problem": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of <br>agent-coordination problem</br>s in domains with uncertainty and time constraints but very difficult to solve.",
                "In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), combines two orthogonal improvements of OC-DEC-MDP.",
                "First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval.",
                "Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP.",
                "We test both improvements independently in a crisis-management domain as well as for other types of domains.",
                "Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage rescue mission [11] to the coordination of Autonomous Mars Exploration Rovers [2].",
                "Because of the uncertain and dynamic characteristics of such domains, decision-theoretic models have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time.",
                "Key decision-theoretic models that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs).",
                "Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research.",
                "In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses.",
                "Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks.",
                "To remedy that, locally optimal algorithms have been proposed [12] [4] [5].",
                "In particular, Opportunity Cost DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons.",
                "Additionally, OC-DEC-MDP is unique in its ability to address both temporal constraints and uncertain method execution durations, which is an important factor for real-world domains.",
                "OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous policy iteration.",
                "However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values.",
                "The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval.",
                "Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods.",
                "This reward, also referred to as the opportunity cost, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies.",
                "In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with temporal constraints and uncertain method execution durations, that builds on the success of OC-DEC-MDP.",
                "VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval.",
                "Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions.",
                "Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the opportunity cost, and to remedy that, we introduce a set of heuristics, that correct the opportunity cost overestimation problem.",
                "This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building.",
                "In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers.",
                "Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements.",
                "Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the opportunity cost overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2.",
                "MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome.",
                "One example domain is large-scale disaster, like a fire in a skyscraper.",
                "Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless.",
                "In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations.",
                "Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 .",
                "General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading.",
                "The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B.",
                "As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3).",
                "Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc.",
                "We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B.",
                "One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians.",
                "If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians.",
                "In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan.",
                "Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B.",
                "Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3.",
                "MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 .",
                "Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents.",
                "Agents cannot communicate during mission execution.",
                "Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø.",
                "Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time.",
                "Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations.",
                "In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of temporal constraints in the system.",
                "Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints.",
                "For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates.",
                "In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints.",
                "We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system.",
                "For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints.",
                "Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline.",
                "Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi.",
                "Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents.",
                "Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W).",
                "In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + .",
                "In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution.",
                "Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled.",
                "The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a.",
                "A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4.",
                "SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used.",
                "Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}.",
                "This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ .",
                "Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11].",
                "The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used.",
                "However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising.",
                "Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods.",
                "The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible.",
                "At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ].",
                "It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ].",
                "This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration.",
                "We call this step a value propagation phase.",
                "Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π .",
                "It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods.",
                "We call this step a probability propagation phase.",
                "If policy π does not improve π, the algorithm terminates.",
                "There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper.",
                "First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed.",
                "While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 .",
                "Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow.",
                "Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods.",
                "As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again.",
                "As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences.",
                "In the next two sections, we address both of these shortcomings. 5.",
                "VALUE FUNCTION PROPAGATION (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase.",
                "However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the value function propagation phase and the probability function propagation phase.",
                "To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. Opportunity Cost Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled.",
                "Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future.",
                "Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise.",
                "We now develop an analytical technique for performing the value function and probability function propagation phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 Value Function Propagation Phase Suppose, that we are performing a value function propagation phase during which the value functions are propagated from the sink methods to the source methods.",
                "At any time during this phase we encounter a situation shown in Figure 2, where opportunity cost functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the opportunity cost Vi0 of method mi0 is to be derived.",
                "Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ].",
                "The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods.",
                "Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t).",
                "Assume for now, that Vjn,i0 represents a full opportunity cost, postponing the discussion on different techniques for splitting the opportunity cost Vj0 into [Vj0,ik ]K k=0 until section 6.",
                "We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme).",
                "Figure 2: Fragment of an MDP of agent Ak.",
                "Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left).",
                "Let V j0,i0 (t) be the opportunity cost of starting the execution of method mj0 at time t given that method mi0 has been completed.",
                "It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 .",
                "Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t).",
                "Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1.",
                "Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable.",
                "Therefore the opportunity cost Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 .",
                "Furthermore, Vj0,i0 should be non-increasing.",
                "Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }.",
                "Knowing the opportunity cost Vi0 , we can then easily derive the value function vi0 .",
                "Let Ak be an agent assigned to the method mi0 .",
                "If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 .",
                "Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 .",
                "Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored.",
                "We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 .",
                "In general, the value function propagation scheme starts with sink nodes.",
                "It then visits at each time a method m, such that all the methods that m enables have already been marked as visited.",
                "The value function propagation phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 Probability Function Propagation Phase Assume now, that value functions and opportunity cost values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified.",
                "Since value function propagation phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration.",
                "We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived.",
                "Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last value function propagation phase.",
                "If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise.",
                "Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t .",
                "We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 .",
                "The general, the probability function propagation phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default.",
                "We then visit at each time a method m such that all the methods that enable The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited.",
                "The probability function propagation phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 .",
                "Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1.",
                "These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm.",
                "Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and probability function propagation without choosing any function representation.",
                "In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation.",
                "However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions.",
                "When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t).",
                "If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does.",
                "As a result, instead of performing O(Δ2 ) multiplications to compute f(t), VFP only needs to perform O(k · Δ) multiplications to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ).",
                "Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P .",
                "We now prove that the overall approximation error accumulated during the value function propagation phase can be expressed in terms of P and V : THEOREM 1.",
                "Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively.",
                "The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of value function propagation phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri .",
                "PROOF.",
                "In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of probability function propagation phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1.",
                "Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1.",
                "Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1.",
                "We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ).",
                "Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1.",
                "Thus, if opportunity cost functions are not overestimated, they are bounded by P mi∈M ri and the error of a single value function propagation operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri.",
                "Since the number of value function propagation operations is |C≺|, the total error π of the value function propagation phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6.",
                "SPLITTING THE OPPORTUNITY COST FUNCTIONS In section 5 we left out the discussion about how the opportunity cost function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 .",
                "So far, we have taken the same approach as in [4] and [5] in that the opportunity cost function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t).",
                "We refer to this approach, as heuristic H 1,1 .",
                "Before we prove that this heuristic overestimates the opportunity cost, we discuss three problems that might occur when splitting the opportunity cost functions: (i) overestimation, (ii) underestimation and (iii) starvation.",
                "Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when value function propagation for methods [mik ]K k=0 is performed.",
                "For each k = 0, ..., K, Equation (1) derives the opportunity cost function Vik from immediate reward rk and opportunity cost function Vj0,ik .",
                "If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the opportunity cost for completing the method m0 at time t is equal to PK k=0 Vik,0(t).",
                "If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later.",
                "As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences.",
                "Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0.",
                "Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences.",
                "Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the opportunity cost of enabling method mj0 , and the similar reasoning applies.",
                "We call such problem a starvation of method mk.",
                "That short discussion shows the importance of splitting the opportunity cost function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided.",
                "We now prove that: THEOREM 2.",
                "Heuristic H 1,1 can overestimate the opportunity cost.",
                "PROOF.",
                "We prove the theorem by showing a case where the overestimation occurs.",
                "For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively.",
                "Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of opportunity cost, we must identify t0 ∈ [0, ..., Δ] such that the opportunity cost PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t).",
                "From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing.",
                "Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) .",
                "Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the opportunity cost PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice.",
                "To remedy the problem of opportunity cost overestimation, we propose three alternative heuristics that split the opportunity cost functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 .",
                "To avoid opportunity cost overestimation, we normalize the split functions when their sum exceeds the opportunity cost function to be split.",
                "Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t).",
                "For the new heuristics, we now prove, that: THEOREM 3.",
                "Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the opportunity cost.",
                "PROOF.",
                "When heuristic H 1,0 is used to split the opportunity cost function Vj0 , only one method (e.g. mik ) gets the opportunity cost for enabling method mj0 .",
                "Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing.",
                "For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t).",
                "For heuristic bH 1,1 , the opportunity cost function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t).",
                "Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the opportunity cost.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the opportunity cost, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does.",
                "However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation.",
                "Starvation can be avoided if opportunity cost functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods.",
                "However, the sum of split opportunity cost functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split opportunity cost function for the H 1,0 heuristic, which is clearly undesirable.",
                "Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7.",
                "EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations.",
                "Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.",
                "Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100).",
                "We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400.",
                "We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost.",
                "The first graph confirms, that when the opportunity cost function Vj0 was split into opportunity cost functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function.",
                "In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%.",
                "When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 .",
                "We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)).",
                "To obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)).",
                "We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.",
                "Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.",
                "Part 2: We then chose H 1,1 to split the opportunity cost functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark.",
                "We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.",
                "Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200.",
                "We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm.",
                "We then run both algorithms for a total of 100 policy improvement iterations.",
                "Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).",
                "As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%.",
                "For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP.",
                "We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)).",
                "We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.",
                "We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).",
                "As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP.",
                "We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)).",
                "In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400.",
                "We show the results in Figure (7b).",
                "Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%.",
                "We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1.",
                "In particular, we consider 836 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting.",
                "Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods.",
                "For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially.",
                "We therefore vary the time horizons from 3000 to 4000, and then to 5000.",
                "We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8.",
                "CONCLUSIONS Decentralized Markov Decision Process (DEC-MDP) has been very popular for modeling of <br>agent-coordination problem</br>s, it is very difficult to solve, especially for the real-world domains.",
                "In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the opportunity cost of OC-DEC-MDP.",
                "In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4].",
                "Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with temporal constraints [1] [11].",
                "Unfortunately, they fail to scale up to large-scale domains at present time.",
                "Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and temporal constraints.",
                "Finally, value function techniques have been studied in context of single agent MDPs [7] [9].",
                "However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning.",
                "Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No.",
                "FA875005C0030.",
                "The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9.",
                "REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein.",
                "Decentralized MDPs with Event-Driven Interactions.",
                "In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman.",
                "Transition-Independent Decentralized Markov Decision Processes.",
                "In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of Markov decision processes.",
                "In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib.",
                "A polynomial algorithm for decentralized Markov decision processes with temporal constraints.",
                "In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib.",
                "An iterative algorithm for solving constrained decentralized Markov decision processes.",
                "In AAAI, pages 1089-1094, 2006. [6] C. Boutilier.",
                "Sequential optimality and coordination in multiagent systems.",
                "In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman.",
                "Exact solutions to time-dependent MDPs.",
                "In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein.",
                "Optimizing information exchange in cooperative multi-agent systems, 2003. [9] L. Li and M. Littman.",
                "Lazy approximation for solving continuous finite-horizon MDPs.",
                "In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig.",
                "Risk-sensitive planning with one-switch utility functions: Value iteration.",
                "In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy.",
                "Coordinated plan management using multiagent MDPs.",
                "In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs.",
                "In IJCAI, pages 1758-1760, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Sobre técnicas oportunistas para resolver procesos descentralizados de decisión de Markov con restricciones temporales Janusz Marecki y Milind Tambe de Departamento de Ciencias de la Computación Universidad del Sur de California 941 W 37th Place, Los Ángeles, CA 90089 {Marecki, Tambe}@usc.Edu Resumen de la decisión de decenticación de Markov (Dec. (-MDPS) son un modelo popular de \"problema de coordinación de agentes\" en dominios con incertidumbre y limitaciones de tiempo, pero muy difíciles de resolver.Problema de coordinación del agente",
                "Conclusiones El proceso de decisión descentralizado de Markov (DEC-MDP) ha sido muy popular para el modelado de \"problemas de coordinación de agentes\", es muy difícil de resolver, especialmente para los dominios del mundo real.Problema de coordinación del agente"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "value function propagation": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of agent-coordination problems in domains with uncertainty and time constraints but very difficult to solve.",
                "In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs.",
                "Our heuristic solution method, called <br>value function propagation</br> (VFP), combines two orthogonal improvements of OC-DEC-MDP.",
                "First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval.",
                "Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP.",
                "We test both improvements independently in a crisis-management domain as well as for other types of domains.",
                "Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage rescue mission [11] to the coordination of Autonomous Mars Exploration Rovers [2].",
                "Because of the uncertain and dynamic characteristics of such domains, decision-theoretic models have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time.",
                "Key decision-theoretic models that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs).",
                "Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research.",
                "In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses.",
                "Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks.",
                "To remedy that, locally optimal algorithms have been proposed [12] [4] [5].",
                "In particular, Opportunity Cost DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons.",
                "Additionally, OC-DEC-MDP is unique in its ability to address both temporal constraints and uncertain method execution durations, which is an important factor for real-world domains.",
                "OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous policy iteration.",
                "However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values.",
                "The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval.",
                "Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods.",
                "This reward, also referred to as the opportunity cost, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies.",
                "In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with temporal constraints and uncertain method execution durations, that builds on the success of OC-DEC-MDP.",
                "VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval.",
                "Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions.",
                "Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the opportunity cost, and to remedy that, we introduce a set of heuristics, that correct the opportunity cost overestimation problem.",
                "This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building.",
                "In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers.",
                "Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements.",
                "Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the opportunity cost overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2.",
                "MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome.",
                "One example domain is large-scale disaster, like a fire in a skyscraper.",
                "Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless.",
                "In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations.",
                "Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 .",
                "General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading.",
                "The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B.",
                "As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3).",
                "Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc.",
                "We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B.",
                "One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians.",
                "If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians.",
                "In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan.",
                "Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B.",
                "Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3.",
                "MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 .",
                "Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents.",
                "Agents cannot communicate during mission execution.",
                "Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø.",
                "Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time.",
                "Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations.",
                "In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of temporal constraints in the system.",
                "Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints.",
                "For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates.",
                "In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints.",
                "We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system.",
                "For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints.",
                "Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline.",
                "Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi.",
                "Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents.",
                "Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W).",
                "In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + .",
                "In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution.",
                "Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled.",
                "The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a.",
                "A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4.",
                "SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used.",
                "Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}.",
                "This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ .",
                "Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11].",
                "The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used.",
                "However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising.",
                "Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods.",
                "The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible.",
                "At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ].",
                "It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ].",
                "This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration.",
                "We call this step a value propagation phase.",
                "Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π .",
                "It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods.",
                "We call this step a probability propagation phase.",
                "If policy π does not improve π, the algorithm terminates.",
                "There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper.",
                "First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed.",
                "While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 .",
                "Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow.",
                "Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods.",
                "As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again.",
                "As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences.",
                "In the next two sections, we address both of these shortcomings. 5.",
                "<br>value function propagation</br> (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase.",
                "However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the <br>value function propagation</br> phase and the probability function propagation phase.",
                "To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. Opportunity Cost Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled.",
                "Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future.",
                "Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise.",
                "We now develop an analytical technique for performing the value function and probability function propagation phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 <br>value function propagation</br> Phase Suppose, that we are performing a <br>value function propagation</br> phase during which the value functions are propagated from the sink methods to the source methods.",
                "At any time during this phase we encounter a situation shown in Figure 2, where opportunity cost functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the opportunity cost Vi0 of method mi0 is to be derived.",
                "Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ].",
                "The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods.",
                "Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t).",
                "Assume for now, that Vjn,i0 represents a full opportunity cost, postponing the discussion on different techniques for splitting the opportunity cost Vj0 into [Vj0,ik ]K k=0 until section 6.",
                "We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme).",
                "Figure 2: Fragment of an MDP of agent Ak.",
                "Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left).",
                "Let V j0,i0 (t) be the opportunity cost of starting the execution of method mj0 at time t given that method mi0 has been completed.",
                "It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 .",
                "Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t).",
                "Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1.",
                "Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable.",
                "Therefore the opportunity cost Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 .",
                "Furthermore, Vj0,i0 should be non-increasing.",
                "Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }.",
                "Knowing the opportunity cost Vi0 , we can then easily derive the value function vi0 .",
                "Let Ak be an agent assigned to the method mi0 .",
                "If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 .",
                "Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 .",
                "Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored.",
                "We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 .",
                "In general, the <br>value function propagation</br> scheme starts with sink nodes.",
                "It then visits at each time a method m, such that all the methods that m enables have already been marked as visited.",
                "The <br>value function propagation</br> phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 Probability Function Propagation Phase Assume now, that value functions and opportunity cost values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified.",
                "Since <br>value function propagation</br> phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration.",
                "We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived.",
                "Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last <br>value function propagation</br> phase.",
                "If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise.",
                "Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t .",
                "We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 .",
                "The general, the probability function propagation phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default.",
                "We then visit at each time a method m such that all the methods that enable The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited.",
                "The probability function propagation phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 .",
                "Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1.",
                "These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm.",
                "Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and probability function propagation without choosing any function representation.",
                "In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation.",
                "However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions.",
                "When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t).",
                "If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does.",
                "As a result, instead of performing O(Δ2 ) multiplications to compute f(t), VFP only needs to perform O(k · Δ) multiplications to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ).",
                "Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P .",
                "We now prove that the overall approximation error accumulated during the <br>value function propagation</br> phase can be expressed in terms of P and V : THEOREM 1.",
                "Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively.",
                "The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of <br>value function propagation</br> phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri .",
                "PROOF.",
                "In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of probability function propagation phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1.",
                "Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1.",
                "Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1.",
                "We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ).",
                "Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1.",
                "Thus, if opportunity cost functions are not overestimated, they are bounded by P mi∈M ri and the error of a single <br>value function propagation</br> operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri.",
                "Since the number of <br>value function propagation</br> operations is |C≺|, the total error π of the <br>value function propagation</br> phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6.",
                "SPLITTING THE OPPORTUNITY COST FUNCTIONS In section 5 we left out the discussion about how the opportunity cost function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 .",
                "So far, we have taken the same approach as in [4] and [5] in that the opportunity cost function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t).",
                "We refer to this approach, as heuristic H 1,1 .",
                "Before we prove that this heuristic overestimates the opportunity cost, we discuss three problems that might occur when splitting the opportunity cost functions: (i) overestimation, (ii) underestimation and (iii) starvation.",
                "Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when <br>value function propagation</br> for methods [mik ]K k=0 is performed.",
                "For each k = 0, ..., K, Equation (1) derives the opportunity cost function Vik from immediate reward rk and opportunity cost function Vj0,ik .",
                "If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the opportunity cost for completing the method m0 at time t is equal to PK k=0 Vik,0(t).",
                "If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later.",
                "As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences.",
                "Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0.",
                "Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences.",
                "Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the opportunity cost of enabling method mj0 , and the similar reasoning applies.",
                "We call such problem a starvation of method mk.",
                "That short discussion shows the importance of splitting the opportunity cost function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided.",
                "We now prove that: THEOREM 2.",
                "Heuristic H 1,1 can overestimate the opportunity cost.",
                "PROOF.",
                "We prove the theorem by showing a case where the overestimation occurs.",
                "For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively.",
                "Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of opportunity cost, we must identify t0 ∈ [0, ..., Δ] such that the opportunity cost PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t).",
                "From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing.",
                "Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) .",
                "Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the opportunity cost PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice.",
                "To remedy the problem of opportunity cost overestimation, we propose three alternative heuristics that split the opportunity cost functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 .",
                "To avoid opportunity cost overestimation, we normalize the split functions when their sum exceeds the opportunity cost function to be split.",
                "Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t).",
                "For the new heuristics, we now prove, that: THEOREM 3.",
                "Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the opportunity cost.",
                "PROOF.",
                "When heuristic H 1,0 is used to split the opportunity cost function Vj0 , only one method (e.g. mik ) gets the opportunity cost for enabling method mj0 .",
                "Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing.",
                "For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t).",
                "For heuristic bH 1,1 , the opportunity cost function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t).",
                "Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the opportunity cost.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the opportunity cost, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does.",
                "However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation.",
                "Starvation can be avoided if opportunity cost functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods.",
                "However, the sum of split opportunity cost functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split opportunity cost function for the H 1,0 heuristic, which is clearly undesirable.",
                "Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7.",
                "EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations.",
                "Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.",
                "Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100).",
                "We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400.",
                "We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost.",
                "The first graph confirms, that when the opportunity cost function Vj0 was split into opportunity cost functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function.",
                "In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%.",
                "When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 .",
                "We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)).",
                "To obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)).",
                "We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.",
                "Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.",
                "Part 2: We then chose H 1,1 to split the opportunity cost functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark.",
                "We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.",
                "Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200.",
                "We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm.",
                "We then run both algorithms for a total of 100 policy improvement iterations.",
                "Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).",
                "As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%.",
                "For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP.",
                "We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)).",
                "We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.",
                "We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).",
                "As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP.",
                "We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)).",
                "In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400.",
                "We show the results in Figure (7b).",
                "Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%.",
                "We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1.",
                "In particular, we consider 836 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting.",
                "Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods.",
                "For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially.",
                "We therefore vary the time horizons from 3000 to 4000, and then to 5000.",
                "We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8.",
                "CONCLUSIONS Decentralized Markov Decision Process (DEC-MDP) has been very popular for modeling of agent-coordination problems, it is very difficult to solve, especially for the real-world domains.",
                "In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs.",
                "Our heuristic solution method, called <br>value function propagation</br> (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the opportunity cost of OC-DEC-MDP.",
                "In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4].",
                "Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with temporal constraints [1] [11].",
                "Unfortunately, they fail to scale up to large-scale domains at present time.",
                "Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and temporal constraints.",
                "Finally, value function techniques have been studied in context of single agent MDPs [7] [9].",
                "However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning.",
                "Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No.",
                "FA875005C0030.",
                "The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9.",
                "REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein.",
                "Decentralized MDPs with Event-Driven Interactions.",
                "In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman.",
                "Transition-Independent Decentralized Markov Decision Processes.",
                "In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of Markov decision processes.",
                "In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib.",
                "A polynomial algorithm for decentralized Markov decision processes with temporal constraints.",
                "In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib.",
                "An iterative algorithm for solving constrained decentralized Markov decision processes.",
                "In AAAI, pages 1089-1094, 2006. [6] C. Boutilier.",
                "Sequential optimality and coordination in multiagent systems.",
                "In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman.",
                "Exact solutions to time-dependent MDPs.",
                "In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein.",
                "Optimizing information exchange in cooperative multi-agent systems, 2003. [9] L. Li and M. Littman.",
                "Lazy approximation for solving continuous finite-horizon MDPs.",
                "In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig.",
                "Risk-sensitive planning with one-switch utility functions: Value iteration.",
                "In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy.",
                "Coordinated plan management using multiagent MDPs.",
                "In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs.",
                "In IJCAI, pages 1758-1760, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Nuestro método de solución heurística, llamado \"propagación de la función de valor\" (VFP), combina dos mejoras ortogonales de OC-DEC-MDP.Propagación de la función de valor",
                "\"Propagación de la función de valor\" (VFP) El esquema general del algoritmo VFP es idéntico al algoritmo OCDEC-MDP, ya que realiza una serie de iteraciones de mejora de políticas, cada una involucra una fase de propagación de valor y probabilidad.Propagación de la función de valor",
                "Sin embargo, en lugar de propagar valores separados, VFP mantiene y propaga las funciones completas, por lo tanto, nos referimos a estas fases como la fase de \"propagación de la función de valor\" y la fase de propagación de la función de probabilidad.Propagación de la función de valor",
                "Conf.En los agentes autónomos y los sistemas de múltiples agentes (AAMAS 07) 5.1 Suponga la fase de \"propagación de la función de valor\", que estamos realizando una fase de \"propagación de la función de valor\" durante la cual las funciones de valor se propagan de los métodos de sumidero a los métodos de origen.Propagación de la función de valor",
                "En general, el esquema de \"propagación de la función de valor\" comienza con los nodos de sumidero.Propagación de la función de valor",
                "La fase de \"propagación de la función de valor\" termina cuando todos los métodos de origen se han marcado como se ve.5.2 Lectura de la política para determinar la política del agente AK para el método MJ0 Debemos identificar el conjunto ZJ0 de los intervalos [Z, Z] ⊂ [0, ..., δ], de modo que: ∀t∈ [Z,z] πk (MJ0, t) = W. Uno puede identificar fácilmente los intervalos de ZJ0 observando los intervalos de tiempo en los que la función de valor VJ0 no disminuye monotónicamente.5.3 Fase de propagación de la función de probabilidad Suponga ahora que las funciones de valor y los valores de los costos de oportunidad se han propagado de métodos de sumidero a nodos de origen y los conjuntos ZJ para todos los métodos mj ∈ M se han identificado.Propagación de la función de valor",
                "Dado que la fase de \"propagación de la función de valor\" estaba utilizando probabilidades pi (t) para métodos mi ∈ M y tiempos t ∈ [0, δ] encontrado en la iteración de algoritmo anterior, ahora tenemos que encontrar nuevos valores Pi (t), para prepararnosEl algoritmo para su próxima iteración.Propagación de la función de valor",
                "Sea PJ0 la función de distribución de probabilidad del método Duración de ejecución MJ0, y ZJ0 sea el conjunto de intervalos de inactividad para el método MJ0, encontrado durante la última fase de \"propagación de la función de valor\".Propagación de la función de valor",
                "Ahora demostramos que el error de aproximación general acumulado durante la fase de \"propagación de la función de valor\" puede expresarse en términos de P y V: Teorema 1. Propagación de la función de valor",
                "El error general π = maxv supt∈ [0, δ] | V (t) - bv (t) |de la fase de \"propagación de la función de valor\" se limita a: | C≺ |V + ((1 + P) | C≺ | - 1) P Mi∈M RI.Propagación de la función de valor",
                "Por lo tanto, si las funciones de costo de oportunidad no se sobreestiman, están limitadas por p mi∈M ri y el error de una sola operación de \"propagación de la función de valor\" será como máximo z Δ 0 p (t) (v + ((1+ p) | C≺ | −1) x mi∈M ri) dt <v + ((1+ p) | c≺ | −1) x mi∈M ri.Propagación de la función de valor",
                "Dado que el número de operaciones de \"propagación de la función de valor\" es | C≺ |, el error total π de la fase \"Propagación de la función de valor\" está limitada por: | C≺ |V + ((1 + P) | C≺ | - 1) P Mi∈M RI.6. Propagación de la función de valor",
                "Considere la situación en la Figura 3: división de la función de valor del método MJ0 entre los métodos [mik] k k = 0.(3) Cuando se realiza la \"propagación de la función de valor\" para los métodos [mik] k k = 0.Propagación de la función de valor",
                "Nuestro método de solución heurística, llamado \"propagación de la función de valor\" (VFP), proporcionó dos mejoras ortogonales de OC-DEC-MDP: (i) aceleró OC-DECMDP por un orden de magnitud al mantener y manipular una función de valor para cada métodoEn lugar de un valor separado para cada par de método e intervalo de tiempo, y (ii) logró mejores cualidades de solución que OC-DEC-MDP porque corrigió la sobreestimación del costo de oportunidad de OC-DEC-MDP.Propagación de la función de valor"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "decision-theoretic model": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of agent-coordination problems in domains with uncertainty and time constraints but very difficult to solve.",
                "In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), combines two orthogonal improvements of OC-DEC-MDP.",
                "First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval.",
                "Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP.",
                "We test both improvements independently in a crisis-management domain as well as for other types of domains.",
                "Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage rescue mission [11] to the coordination of Autonomous Mars Exploration Rovers [2].",
                "Because of the uncertain and dynamic characteristics of such domains, <br>decision-theoretic model</br>s have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time.",
                "Key <br>decision-theoretic model</br>s that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs).",
                "Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research.",
                "In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses.",
                "Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks.",
                "To remedy that, locally optimal algorithms have been proposed [12] [4] [5].",
                "In particular, Opportunity Cost DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons.",
                "Additionally, OC-DEC-MDP is unique in its ability to address both temporal constraints and uncertain method execution durations, which is an important factor for real-world domains.",
                "OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous policy iteration.",
                "However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values.",
                "The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval.",
                "Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods.",
                "This reward, also referred to as the opportunity cost, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies.",
                "In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with temporal constraints and uncertain method execution durations, that builds on the success of OC-DEC-MDP.",
                "VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval.",
                "Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions.",
                "Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the opportunity cost, and to remedy that, we introduce a set of heuristics, that correct the opportunity cost overestimation problem.",
                "This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building.",
                "In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers.",
                "Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements.",
                "Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the opportunity cost overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2.",
                "MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome.",
                "One example domain is large-scale disaster, like a fire in a skyscraper.",
                "Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless.",
                "In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations.",
                "Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 .",
                "General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading.",
                "The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B.",
                "As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3).",
                "Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc.",
                "We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B.",
                "One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians.",
                "If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians.",
                "In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan.",
                "Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B.",
                "Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3.",
                "MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 .",
                "Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents.",
                "Agents cannot communicate during mission execution.",
                "Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø.",
                "Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time.",
                "Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations.",
                "In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of temporal constraints in the system.",
                "Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints.",
                "For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates.",
                "In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints.",
                "We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system.",
                "For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints.",
                "Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline.",
                "Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi.",
                "Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents.",
                "Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W).",
                "In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + .",
                "In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution.",
                "Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled.",
                "The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a.",
                "A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4.",
                "SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used.",
                "Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}.",
                "This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ .",
                "Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11].",
                "The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used.",
                "However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising.",
                "Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods.",
                "The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible.",
                "At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ].",
                "It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ].",
                "This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration.",
                "We call this step a value propagation phase.",
                "Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π .",
                "It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods.",
                "We call this step a probability propagation phase.",
                "If policy π does not improve π, the algorithm terminates.",
                "There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper.",
                "First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed.",
                "While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 .",
                "Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow.",
                "Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods.",
                "As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again.",
                "As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences.",
                "In the next two sections, we address both of these shortcomings. 5.",
                "VALUE FUNCTION PROPAGATION (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase.",
                "However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the value function propagation phase and the probability function propagation phase.",
                "To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. Opportunity Cost Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled.",
                "Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future.",
                "Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise.",
                "We now develop an analytical technique for performing the value function and probability function propagation phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 Value Function Propagation Phase Suppose, that we are performing a value function propagation phase during which the value functions are propagated from the sink methods to the source methods.",
                "At any time during this phase we encounter a situation shown in Figure 2, where opportunity cost functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the opportunity cost Vi0 of method mi0 is to be derived.",
                "Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ].",
                "The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods.",
                "Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t).",
                "Assume for now, that Vjn,i0 represents a full opportunity cost, postponing the discussion on different techniques for splitting the opportunity cost Vj0 into [Vj0,ik ]K k=0 until section 6.",
                "We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme).",
                "Figure 2: Fragment of an MDP of agent Ak.",
                "Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left).",
                "Let V j0,i0 (t) be the opportunity cost of starting the execution of method mj0 at time t given that method mi0 has been completed.",
                "It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 .",
                "Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t).",
                "Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1.",
                "Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable.",
                "Therefore the opportunity cost Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 .",
                "Furthermore, Vj0,i0 should be non-increasing.",
                "Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }.",
                "Knowing the opportunity cost Vi0 , we can then easily derive the value function vi0 .",
                "Let Ak be an agent assigned to the method mi0 .",
                "If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 .",
                "Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 .",
                "Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored.",
                "We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 .",
                "In general, the value function propagation scheme starts with sink nodes.",
                "It then visits at each time a method m, such that all the methods that m enables have already been marked as visited.",
                "The value function propagation phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 Probability Function Propagation Phase Assume now, that value functions and opportunity cost values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified.",
                "Since value function propagation phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration.",
                "We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived.",
                "Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last value function propagation phase.",
                "If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise.",
                "Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t .",
                "We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 .",
                "The general, the probability function propagation phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default.",
                "We then visit at each time a method m such that all the methods that enable The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited.",
                "The probability function propagation phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 .",
                "Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1.",
                "These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm.",
                "Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and probability function propagation without choosing any function representation.",
                "In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation.",
                "However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions.",
                "When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t).",
                "If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does.",
                "As a result, instead of performing O(Δ2 ) multiplications to compute f(t), VFP only needs to perform O(k · Δ) multiplications to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ).",
                "Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P .",
                "We now prove that the overall approximation error accumulated during the value function propagation phase can be expressed in terms of P and V : THEOREM 1.",
                "Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively.",
                "The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of value function propagation phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri .",
                "PROOF.",
                "In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of probability function propagation phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1.",
                "Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1.",
                "Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1.",
                "We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ).",
                "Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1.",
                "Thus, if opportunity cost functions are not overestimated, they are bounded by P mi∈M ri and the error of a single value function propagation operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri.",
                "Since the number of value function propagation operations is |C≺|, the total error π of the value function propagation phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6.",
                "SPLITTING THE OPPORTUNITY COST FUNCTIONS In section 5 we left out the discussion about how the opportunity cost function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 .",
                "So far, we have taken the same approach as in [4] and [5] in that the opportunity cost function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t).",
                "We refer to this approach, as heuristic H 1,1 .",
                "Before we prove that this heuristic overestimates the opportunity cost, we discuss three problems that might occur when splitting the opportunity cost functions: (i) overestimation, (ii) underestimation and (iii) starvation.",
                "Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when value function propagation for methods [mik ]K k=0 is performed.",
                "For each k = 0, ..., K, Equation (1) derives the opportunity cost function Vik from immediate reward rk and opportunity cost function Vj0,ik .",
                "If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the opportunity cost for completing the method m0 at time t is equal to PK k=0 Vik,0(t).",
                "If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later.",
                "As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences.",
                "Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0.",
                "Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences.",
                "Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the opportunity cost of enabling method mj0 , and the similar reasoning applies.",
                "We call such problem a starvation of method mk.",
                "That short discussion shows the importance of splitting the opportunity cost function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided.",
                "We now prove that: THEOREM 2.",
                "Heuristic H 1,1 can overestimate the opportunity cost.",
                "PROOF.",
                "We prove the theorem by showing a case where the overestimation occurs.",
                "For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively.",
                "Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of opportunity cost, we must identify t0 ∈ [0, ..., Δ] such that the opportunity cost PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t).",
                "From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing.",
                "Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) .",
                "Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the opportunity cost PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice.",
                "To remedy the problem of opportunity cost overestimation, we propose three alternative heuristics that split the opportunity cost functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 .",
                "To avoid opportunity cost overestimation, we normalize the split functions when their sum exceeds the opportunity cost function to be split.",
                "Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t).",
                "For the new heuristics, we now prove, that: THEOREM 3.",
                "Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the opportunity cost.",
                "PROOF.",
                "When heuristic H 1,0 is used to split the opportunity cost function Vj0 , only one method (e.g. mik ) gets the opportunity cost for enabling method mj0 .",
                "Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing.",
                "For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t).",
                "For heuristic bH 1,1 , the opportunity cost function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t).",
                "Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the opportunity cost.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the opportunity cost, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does.",
                "However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation.",
                "Starvation can be avoided if opportunity cost functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods.",
                "However, the sum of split opportunity cost functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split opportunity cost function for the H 1,0 heuristic, which is clearly undesirable.",
                "Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7.",
                "EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations.",
                "Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.",
                "Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100).",
                "We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400.",
                "We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost.",
                "The first graph confirms, that when the opportunity cost function Vj0 was split into opportunity cost functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function.",
                "In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%.",
                "When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 .",
                "We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)).",
                "To obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)).",
                "We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.",
                "Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.",
                "Part 2: We then chose H 1,1 to split the opportunity cost functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark.",
                "We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.",
                "Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200.",
                "We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm.",
                "We then run both algorithms for a total of 100 policy improvement iterations.",
                "Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).",
                "As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%.",
                "For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP.",
                "We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)).",
                "We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.",
                "We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).",
                "As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP.",
                "We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)).",
                "In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400.",
                "We show the results in Figure (7b).",
                "Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%.",
                "We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1.",
                "In particular, we consider 836 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting.",
                "Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods.",
                "For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially.",
                "We therefore vary the time horizons from 3000 to 4000, and then to 5000.",
                "We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8.",
                "CONCLUSIONS Decentralized Markov Decision Process (DEC-MDP) has been very popular for modeling of agent-coordination problems, it is very difficult to solve, especially for the real-world domains.",
                "In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the opportunity cost of OC-DEC-MDP.",
                "In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4].",
                "Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with temporal constraints [1] [11].",
                "Unfortunately, they fail to scale up to large-scale domains at present time.",
                "Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and temporal constraints.",
                "Finally, value function techniques have been studied in context of single agent MDPs [7] [9].",
                "However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning.",
                "Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No.",
                "FA875005C0030.",
                "The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9.",
                "REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein.",
                "Decentralized MDPs with Event-Driven Interactions.",
                "In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman.",
                "Transition-Independent Decentralized Markov Decision Processes.",
                "In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of Markov decision processes.",
                "In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib.",
                "A polynomial algorithm for decentralized Markov decision processes with temporal constraints.",
                "In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib.",
                "An iterative algorithm for solving constrained decentralized Markov decision processes.",
                "In AAAI, pages 1089-1094, 2006. [6] C. Boutilier.",
                "Sequential optimality and coordination in multiagent systems.",
                "In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman.",
                "Exact solutions to time-dependent MDPs.",
                "In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein.",
                "Optimizing information exchange in cooperative multi-agent systems, 2003. [9] L. Li and M. Littman.",
                "Lazy approximation for solving continuous finite-horizon MDPs.",
                "In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig.",
                "Risk-sensitive planning with one-switch utility functions: Value iteration.",
                "In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy.",
                "Coordinated plan management using multiagent MDPs.",
                "In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs.",
                "In IJCAI, pages 1758-1760, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Debido a las características inciertas y dinámicas de tales dominios, el \"modelo teórico de decisión\" ha recibido mucha atención en los últimos años, principalmente gracias a su expresividad y la capacidad de razonar sobre la utilidad de las acciones a lo largo del tiempo.modelo de decisión-teórico",
                "El \"modelo teórico de decisión\" clave que se ha vuelto popular en la literatura incluyen procesos descentralizados de decisión de Markov (DECMDP) y procesos de decisión de Markov descentralizados y parcialmente observables (DEC-POMDPS).modelo de decisión-teórico"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "decentralized partially observable markov decision process": {
            "translated_key": "",
            "is_in_text": false,
            "original_annotated_sentences": [
                "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of agent-coordination problems in domains with uncertainty and time constraints but very difficult to solve.",
                "In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), combines two orthogonal improvements of OC-DEC-MDP.",
                "First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval.",
                "Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP.",
                "We test both improvements independently in a crisis-management domain as well as for other types of domains.",
                "Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage rescue mission [11] to the coordination of Autonomous Mars Exploration Rovers [2].",
                "Because of the uncertain and dynamic characteristics of such domains, decision-theoretic models have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time.",
                "Key decision-theoretic models that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs).",
                "Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research.",
                "In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses.",
                "Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks.",
                "To remedy that, locally optimal algorithms have been proposed [12] [4] [5].",
                "In particular, Opportunity Cost DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons.",
                "Additionally, OC-DEC-MDP is unique in its ability to address both temporal constraints and uncertain method execution durations, which is an important factor for real-world domains.",
                "OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous policy iteration.",
                "However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values.",
                "The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval.",
                "Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods.",
                "This reward, also referred to as the opportunity cost, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies.",
                "In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with temporal constraints and uncertain method execution durations, that builds on the success of OC-DEC-MDP.",
                "VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval.",
                "Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions.",
                "Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the opportunity cost, and to remedy that, we introduce a set of heuristics, that correct the opportunity cost overestimation problem.",
                "This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building.",
                "In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers.",
                "Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements.",
                "Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the opportunity cost overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2.",
                "MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome.",
                "One example domain is large-scale disaster, like a fire in a skyscraper.",
                "Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless.",
                "In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations.",
                "Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 .",
                "General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading.",
                "The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B.",
                "As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3).",
                "Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc.",
                "We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B.",
                "One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians.",
                "If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians.",
                "In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan.",
                "Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B.",
                "Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3.",
                "MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 .",
                "Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents.",
                "Agents cannot communicate during mission execution.",
                "Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø.",
                "Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time.",
                "Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations.",
                "In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of temporal constraints in the system.",
                "Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints.",
                "For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates.",
                "In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints.",
                "We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system.",
                "For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints.",
                "Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline.",
                "Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi.",
                "Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents.",
                "Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W).",
                "In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + .",
                "In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution.",
                "Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled.",
                "The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a.",
                "A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4.",
                "SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used.",
                "Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}.",
                "This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ .",
                "Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11].",
                "The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used.",
                "However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising.",
                "Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods.",
                "The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible.",
                "At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ].",
                "It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ].",
                "This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration.",
                "We call this step a value propagation phase.",
                "Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π .",
                "It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods.",
                "We call this step a probability propagation phase.",
                "If policy π does not improve π, the algorithm terminates.",
                "There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper.",
                "First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed.",
                "While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 .",
                "Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow.",
                "Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods.",
                "As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again.",
                "As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences.",
                "In the next two sections, we address both of these shortcomings. 5.",
                "VALUE FUNCTION PROPAGATION (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase.",
                "However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the value function propagation phase and the probability function propagation phase.",
                "To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. Opportunity Cost Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled.",
                "Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future.",
                "Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise.",
                "We now develop an analytical technique for performing the value function and probability function propagation phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 Value Function Propagation Phase Suppose, that we are performing a value function propagation phase during which the value functions are propagated from the sink methods to the source methods.",
                "At any time during this phase we encounter a situation shown in Figure 2, where opportunity cost functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the opportunity cost Vi0 of method mi0 is to be derived.",
                "Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ].",
                "The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods.",
                "Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t).",
                "Assume for now, that Vjn,i0 represents a full opportunity cost, postponing the discussion on different techniques for splitting the opportunity cost Vj0 into [Vj0,ik ]K k=0 until section 6.",
                "We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme).",
                "Figure 2: Fragment of an MDP of agent Ak.",
                "Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left).",
                "Let V j0,i0 (t) be the opportunity cost of starting the execution of method mj0 at time t given that method mi0 has been completed.",
                "It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 .",
                "Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t).",
                "Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1.",
                "Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable.",
                "Therefore the opportunity cost Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 .",
                "Furthermore, Vj0,i0 should be non-increasing.",
                "Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }.",
                "Knowing the opportunity cost Vi0 , we can then easily derive the value function vi0 .",
                "Let Ak be an agent assigned to the method mi0 .",
                "If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 .",
                "Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 .",
                "Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored.",
                "We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 .",
                "In general, the value function propagation scheme starts with sink nodes.",
                "It then visits at each time a method m, such that all the methods that m enables have already been marked as visited.",
                "The value function propagation phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 Probability Function Propagation Phase Assume now, that value functions and opportunity cost values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified.",
                "Since value function propagation phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration.",
                "We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived.",
                "Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last value function propagation phase.",
                "If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise.",
                "Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t .",
                "We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 .",
                "The general, the probability function propagation phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default.",
                "We then visit at each time a method m such that all the methods that enable The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited.",
                "The probability function propagation phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 .",
                "Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1.",
                "These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm.",
                "Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and probability function propagation without choosing any function representation.",
                "In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation.",
                "However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions.",
                "When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t).",
                "If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does.",
                "As a result, instead of performing O(Δ2 ) multiplications to compute f(t), VFP only needs to perform O(k · Δ) multiplications to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ).",
                "Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P .",
                "We now prove that the overall approximation error accumulated during the value function propagation phase can be expressed in terms of P and V : THEOREM 1.",
                "Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively.",
                "The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of value function propagation phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri .",
                "PROOF.",
                "In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of probability function propagation phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1.",
                "Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1.",
                "Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1.",
                "We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ).",
                "Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1.",
                "Thus, if opportunity cost functions are not overestimated, they are bounded by P mi∈M ri and the error of a single value function propagation operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri.",
                "Since the number of value function propagation operations is |C≺|, the total error π of the value function propagation phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6.",
                "SPLITTING THE OPPORTUNITY COST FUNCTIONS In section 5 we left out the discussion about how the opportunity cost function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 .",
                "So far, we have taken the same approach as in [4] and [5] in that the opportunity cost function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t).",
                "We refer to this approach, as heuristic H 1,1 .",
                "Before we prove that this heuristic overestimates the opportunity cost, we discuss three problems that might occur when splitting the opportunity cost functions: (i) overestimation, (ii) underestimation and (iii) starvation.",
                "Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when value function propagation for methods [mik ]K k=0 is performed.",
                "For each k = 0, ..., K, Equation (1) derives the opportunity cost function Vik from immediate reward rk and opportunity cost function Vj0,ik .",
                "If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the opportunity cost for completing the method m0 at time t is equal to PK k=0 Vik,0(t).",
                "If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later.",
                "As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences.",
                "Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0.",
                "Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences.",
                "Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the opportunity cost of enabling method mj0 , and the similar reasoning applies.",
                "We call such problem a starvation of method mk.",
                "That short discussion shows the importance of splitting the opportunity cost function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided.",
                "We now prove that: THEOREM 2.",
                "Heuristic H 1,1 can overestimate the opportunity cost.",
                "PROOF.",
                "We prove the theorem by showing a case where the overestimation occurs.",
                "For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively.",
                "Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of opportunity cost, we must identify t0 ∈ [0, ..., Δ] such that the opportunity cost PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t).",
                "From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing.",
                "Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) .",
                "Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the opportunity cost PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice.",
                "To remedy the problem of opportunity cost overestimation, we propose three alternative heuristics that split the opportunity cost functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 .",
                "To avoid opportunity cost overestimation, we normalize the split functions when their sum exceeds the opportunity cost function to be split.",
                "Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t).",
                "For the new heuristics, we now prove, that: THEOREM 3.",
                "Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the opportunity cost.",
                "PROOF.",
                "When heuristic H 1,0 is used to split the opportunity cost function Vj0 , only one method (e.g. mik ) gets the opportunity cost for enabling method mj0 .",
                "Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing.",
                "For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t).",
                "For heuristic bH 1,1 , the opportunity cost function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t).",
                "Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the opportunity cost.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the opportunity cost, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does.",
                "However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation.",
                "Starvation can be avoided if opportunity cost functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods.",
                "However, the sum of split opportunity cost functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split opportunity cost function for the H 1,0 heuristic, which is clearly undesirable.",
                "Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7.",
                "EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations.",
                "Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.",
                "Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100).",
                "We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400.",
                "We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost.",
                "The first graph confirms, that when the opportunity cost function Vj0 was split into opportunity cost functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function.",
                "In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%.",
                "When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 .",
                "We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)).",
                "To obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)).",
                "We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.",
                "Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.",
                "Part 2: We then chose H 1,1 to split the opportunity cost functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark.",
                "We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.",
                "Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200.",
                "We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm.",
                "We then run both algorithms for a total of 100 policy improvement iterations.",
                "Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).",
                "As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%.",
                "For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP.",
                "We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)).",
                "We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.",
                "We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).",
                "As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP.",
                "We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)).",
                "In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400.",
                "We show the results in Figure (7b).",
                "Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%.",
                "We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1.",
                "In particular, we consider 836 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting.",
                "Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods.",
                "For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially.",
                "We therefore vary the time horizons from 3000 to 4000, and then to 5000.",
                "We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8.",
                "CONCLUSIONS Decentralized Markov Decision Process (DEC-MDP) has been very popular for modeling of agent-coordination problems, it is very difficult to solve, especially for the real-world domains.",
                "In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the opportunity cost of OC-DEC-MDP.",
                "In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4].",
                "Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with temporal constraints [1] [11].",
                "Unfortunately, they fail to scale up to large-scale domains at present time.",
                "Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and temporal constraints.",
                "Finally, value function techniques have been studied in context of single agent MDPs [7] [9].",
                "However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning.",
                "Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No.",
                "FA875005C0030.",
                "The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9.",
                "REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein.",
                "Decentralized MDPs with Event-Driven Interactions.",
                "In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman.",
                "Transition-Independent Decentralized Markov Decision Processes.",
                "In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of Markov decision processes.",
                "In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib.",
                "A polynomial algorithm for decentralized Markov decision processes with temporal constraints.",
                "In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib.",
                "An iterative algorithm for solving constrained decentralized Markov decision processes.",
                "In AAAI, pages 1089-1094, 2006. [6] C. Boutilier.",
                "Sequential optimality and coordination in multiagent systems.",
                "In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman.",
                "Exact solutions to time-dependent MDPs.",
                "In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein.",
                "Optimizing information exchange in cooperative multi-agent systems, 2003. [9] L. Li and M. Littman.",
                "Lazy approximation for solving continuous finite-horizon MDPs.",
                "In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig.",
                "Risk-sensitive planning with one-switch utility functions: Value iteration.",
                "In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy.",
                "Coordinated plan management using multiagent MDPs.",
                "In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs.",
                "In IJCAI, pages 1758-1760, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "opportunity cost": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of agent-coordination problems in domains with uncertainty and time constraints but very difficult to solve.",
                "In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), combines two orthogonal improvements of OC-DEC-MDP.",
                "First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval.",
                "Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP.",
                "We test both improvements independently in a crisis-management domain as well as for other types of domains.",
                "Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage rescue mission [11] to the coordination of Autonomous Mars Exploration Rovers [2].",
                "Because of the uncertain and dynamic characteristics of such domains, decision-theoretic models have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time.",
                "Key decision-theoretic models that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs).",
                "Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research.",
                "In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses.",
                "Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks.",
                "To remedy that, locally optimal algorithms have been proposed [12] [4] [5].",
                "In particular, <br>opportunity cost</br> DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons.",
                "Additionally, OC-DEC-MDP is unique in its ability to address both temporal constraints and uncertain method execution durations, which is an important factor for real-world domains.",
                "OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous policy iteration.",
                "However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values.",
                "The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval.",
                "Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods.",
                "This reward, also referred to as the <br>opportunity cost</br>, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies.",
                "In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with temporal constraints and uncertain method execution durations, that builds on the success of OC-DEC-MDP.",
                "VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval.",
                "Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions.",
                "Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the <br>opportunity cost</br>, and to remedy that, we introduce a set of heuristics, that correct the <br>opportunity cost</br> overestimation problem.",
                "This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building.",
                "In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers.",
                "Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements.",
                "Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the <br>opportunity cost</br> overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2.",
                "MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome.",
                "One example domain is large-scale disaster, like a fire in a skyscraper.",
                "Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless.",
                "In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations.",
                "Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 .",
                "General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading.",
                "The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B.",
                "As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3).",
                "Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc.",
                "We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B.",
                "One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians.",
                "If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians.",
                "In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan.",
                "Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B.",
                "Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3.",
                "MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 .",
                "Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents.",
                "Agents cannot communicate during mission execution.",
                "Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø.",
                "Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time.",
                "Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations.",
                "In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of temporal constraints in the system.",
                "Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints.",
                "For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates.",
                "In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints.",
                "We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system.",
                "For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints.",
                "Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline.",
                "Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi.",
                "Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents.",
                "Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W).",
                "In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + .",
                "In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution.",
                "Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled.",
                "The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a.",
                "A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4.",
                "SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used.",
                "Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}.",
                "This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ .",
                "Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11].",
                "The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used.",
                "However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising.",
                "Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods.",
                "The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible.",
                "At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ].",
                "It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ].",
                "This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration.",
                "We call this step a value propagation phase.",
                "Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π .",
                "It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods.",
                "We call this step a probability propagation phase.",
                "If policy π does not improve π, the algorithm terminates.",
                "There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper.",
                "First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed.",
                "While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 .",
                "Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow.",
                "Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods.",
                "As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again.",
                "As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences.",
                "In the next two sections, we address both of these shortcomings. 5.",
                "VALUE FUNCTION PROPAGATION (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase.",
                "However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the value function propagation phase and the probability function propagation phase.",
                "To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. <br>opportunity cost</br> Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled.",
                "Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future.",
                "Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise.",
                "We now develop an analytical technique for performing the value function and probability function propagation phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 Value Function Propagation Phase Suppose, that we are performing a value function propagation phase during which the value functions are propagated from the sink methods to the source methods.",
                "At any time during this phase we encounter a situation shown in Figure 2, where <br>opportunity cost</br> functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the <br>opportunity cost</br> Vi0 of method mi0 is to be derived.",
                "Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ].",
                "The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods.",
                "Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t).",
                "Assume for now, that Vjn,i0 represents a full <br>opportunity cost</br>, postponing the discussion on different techniques for splitting the <br>opportunity cost</br> Vj0 into [Vj0,ik ]K k=0 until section 6.",
                "We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme).",
                "Figure 2: Fragment of an MDP of agent Ak.",
                "Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left).",
                "Let V j0,i0 (t) be the <br>opportunity cost</br> of starting the execution of method mj0 at time t given that method mi0 has been completed.",
                "It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 .",
                "Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t).",
                "Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1.",
                "Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable.",
                "Therefore the <br>opportunity cost</br> Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 .",
                "Furthermore, Vj0,i0 should be non-increasing.",
                "Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }.",
                "Knowing the <br>opportunity cost</br> Vi0 , we can then easily derive the value function vi0 .",
                "Let Ak be an agent assigned to the method mi0 .",
                "If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 .",
                "Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 .",
                "Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored.",
                "We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 .",
                "In general, the value function propagation scheme starts with sink nodes.",
                "It then visits at each time a method m, such that all the methods that m enables have already been marked as visited.",
                "The value function propagation phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 Probability Function Propagation Phase Assume now, that value functions and <br>opportunity cost</br> values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified.",
                "Since value function propagation phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration.",
                "We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived.",
                "Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last value function propagation phase.",
                "If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise.",
                "Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t .",
                "We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 .",
                "The general, the probability function propagation phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default.",
                "We then visit at each time a method m such that all the methods that enable The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited.",
                "The probability function propagation phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 .",
                "Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1.",
                "These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm.",
                "Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and probability function propagation without choosing any function representation.",
                "In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation.",
                "However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions.",
                "When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t).",
                "If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does.",
                "As a result, instead of performing O(Δ2 ) multiplications to compute f(t), VFP only needs to perform O(k · Δ) multiplications to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ).",
                "Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P .",
                "We now prove that the overall approximation error accumulated during the value function propagation phase can be expressed in terms of P and V : THEOREM 1.",
                "Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively.",
                "The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of value function propagation phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri .",
                "PROOF.",
                "In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of probability function propagation phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1.",
                "Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1.",
                "Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1.",
                "We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ).",
                "Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1.",
                "Thus, if <br>opportunity cost</br> functions are not overestimated, they are bounded by P mi∈M ri and the error of a single value function propagation operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri.",
                "Since the number of value function propagation operations is |C≺|, the total error π of the value function propagation phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6.",
                "SPLITTING THE <br>opportunity cost</br> FUNCTIONS In section 5 we left out the discussion about how the <br>opportunity cost</br> function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 .",
                "So far, we have taken the same approach as in [4] and [5] in that the <br>opportunity cost</br> function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t).",
                "We refer to this approach, as heuristic H 1,1 .",
                "Before we prove that this heuristic overestimates the <br>opportunity cost</br>, we discuss three problems that might occur when splitting the <br>opportunity cost</br> functions: (i) overestimation, (ii) underestimation and (iii) starvation.",
                "Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when value function propagation for methods [mik ]K k=0 is performed.",
                "For each k = 0, ..., K, Equation (1) derives the <br>opportunity cost</br> function Vik from immediate reward rk and <br>opportunity cost</br> function Vj0,ik .",
                "If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the <br>opportunity cost</br> for completing the method m0 at time t is equal to PK k=0 Vik,0(t).",
                "If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later.",
                "As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences.",
                "Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0.",
                "Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences.",
                "Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the <br>opportunity cost</br> of enabling method mj0 , and the similar reasoning applies.",
                "We call such problem a starvation of method mk.",
                "That short discussion shows the importance of splitting the <br>opportunity cost</br> function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided.",
                "We now prove that: THEOREM 2.",
                "Heuristic H 1,1 can overestimate the <br>opportunity cost</br>.",
                "PROOF.",
                "We prove the theorem by showing a case where the overestimation occurs.",
                "For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively.",
                "Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of <br>opportunity cost</br>, we must identify t0 ∈ [0, ..., Δ] such that the <br>opportunity cost</br> PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t).",
                "From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing.",
                "Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) .",
                "Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the <br>opportunity cost</br> PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the <br>opportunity cost</br> Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice.",
                "To remedy the problem of <br>opportunity cost</br> overestimation, we propose three alternative heuristics that split the <br>opportunity cost</br> functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 .",
                "To avoid <br>opportunity cost</br> overestimation, we normalize the split functions when their sum exceeds the <br>opportunity cost</br> function to be split.",
                "Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t).",
                "For the new heuristics, we now prove, that: THEOREM 3.",
                "Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the <br>opportunity cost</br>.",
                "PROOF.",
                "When heuristic H 1,0 is used to split the <br>opportunity cost</br> function Vj0 , only one method (e.g. mik ) gets the <br>opportunity cost</br> for enabling method mj0 .",
                "Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing.",
                "For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t).",
                "For heuristic bH 1,1 , the <br>opportunity cost</br> function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t).",
                "Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the <br>opportunity cost</br>.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the <br>opportunity cost</br>, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does.",
                "However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation.",
                "Starvation can be avoided if <br>opportunity cost</br> functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods.",
                "However, the sum of split <br>opportunity cost</br> functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split <br>opportunity cost</br> function for the H 1,0 heuristic, which is clearly undesirable.",
                "Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7.",
                "EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different <br>opportunity cost</br> function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations.",
                "Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.",
                "Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100).",
                "We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400.",
                "We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the <br>opportunity cost</br>.",
                "The first graph confirms, that when the <br>opportunity cost</br> function Vj0 was split into <br>opportunity cost</br> functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function.",
                "In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%.",
                "When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 .",
                "We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)).",
                "To obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)).",
                "We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.",
                "Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.",
                "Part 2: We then chose H 1,1 to split the <br>opportunity cost</br> functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark.",
                "We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.",
                "Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200.",
                "We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm.",
                "We then run both algorithms for a total of 100 policy improvement iterations.",
                "Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).",
                "As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%.",
                "For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP.",
                "We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)).",
                "We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.",
                "We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).",
                "As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP.",
                "We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)).",
                "In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400.",
                "We show the results in Figure (7b).",
                "Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%.",
                "We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1.",
                "In particular, we consider 836 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting.",
                "Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods.",
                "For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially.",
                "We therefore vary the time horizons from 3000 to 4000, and then to 5000.",
                "We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8.",
                "CONCLUSIONS Decentralized Markov Decision Process (DEC-MDP) has been very popular for modeling of agent-coordination problems, it is very difficult to solve, especially for the real-world domains.",
                "In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the <br>opportunity cost</br> of OC-DEC-MDP.",
                "In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4].",
                "Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with temporal constraints [1] [11].",
                "Unfortunately, they fail to scale up to large-scale domains at present time.",
                "Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and temporal constraints.",
                "Finally, value function techniques have been studied in context of single agent MDPs [7] [9].",
                "However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning.",
                "Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No.",
                "FA875005C0030.",
                "The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9.",
                "REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein.",
                "Decentralized MDPs with Event-Driven Interactions.",
                "In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman.",
                "Transition-Independent Decentralized Markov Decision Processes.",
                "In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of Markov decision processes.",
                "In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib.",
                "A polynomial algorithm for decentralized Markov decision processes with temporal constraints.",
                "In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib.",
                "An iterative algorithm for solving constrained decentralized Markov decision processes.",
                "In AAAI, pages 1089-1094, 2006. [6] C. Boutilier.",
                "Sequential optimality and coordination in multiagent systems.",
                "In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman.",
                "Exact solutions to time-dependent MDPs.",
                "In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein.",
                "Optimizing information exchange in cooperative multi-agent systems, 2003. [9] L. Li and M. Littman.",
                "Lazy approximation for solving continuous finite-horizon MDPs.",
                "In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig.",
                "Risk-sensitive planning with one-switch utility functions: Value iteration.",
                "In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy.",
                "Coordinated plan management using multiagent MDPs.",
                "In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs.",
                "In IJCAI, pages 1758-1760, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "En particular, el \"costo de oportunidad\" dec-MDP [4] [5], denominado OC-DEC-MDP, es particularmente notable, ya que se ha demostrado que se reduce a dominios con cientos de tareas y horizontes temporales de dos dígitos.costo de oportunidad",
                "Esta recompensa, también conocida como el \"costo de oportunidad\", juega un papel crucial en la toma de decisiones de los agentes, y como mostramos más adelante, su sobreestimación conduce a políticas altamente subóptimas.costo de oportunidad",
                "En segundo lugar, demostramos (tanto teóricamente como empíricamente) que OC-Dicp sobreestima el \"costo de oportunidad\", y para remediar eso, introducimos un conjunto de heurísticas, que corrigen el problema de sobreestimación del \"costo de oportunidad\".costo de oportunidad",
                "Finalmente, en la Sección 7 demostramos empíricamente el impacto de nuestras dos mejoras ortogonales, es decir, mostramos que: (i) las nuevas heurísticas corrigen el problema de sobreestimación del \"costo de oportunidad\" que conduce a políticas de mayor calidad, y (ii) al permitir unLa compensación sistemática de la calidad de la solución para el tiempo, el algoritmo VFP funciona mucho más rápido que el algoritmo OC-DEC-MDP 2. Costo de oportunidad",
                "Para este fin, para cada método mi ∈ M, definimos tres nuevas funciones: la función de valor, denotada como vi (t), que mapea el tiempo t ∈ [0, Δ] a la recompensa total esperada para comenzar la ejecución de método mi entiempo t.Función de \"costo de oportunidad\", denotada como VI (t), que mapea el tiempo t ∈ [0, δ] a la recompensa total esperada por comenzar la ejecución del método MI en el momento t suponiendo que el MI esté habilitado.costo de oportunidad",
                "En cualquier momento durante esta fase, encontramos una situación que se muestra en la Figura 2, donde se conocen las funciones de \"costo de oportunidad\" [VJN] n n = 0 de los métodos [mjn] n n = 0, y el \"costo de oportunidad\" VI0 del método MI0es derivado.costo de oportunidad",
                "Suponga por ahora, que VJN, i0 representa un \"costo de oportunidad\" completo, posponiendo la discusión sobre diferentes técnicas para dividir el \"costo de oportunidad\" VJ0 en [VJ0, Ik] k K = 0 hasta la sección 6. Costo de oportunidad",
                "Sea v j0, i0 (t) el \"costo de oportunidad\" de comenzar la ejecución del método mj0 en el momento t dado que el método MI0 se ha completado.costo de oportunidad",
                "Por lo tanto, el \"costo de oportunidad\" VJ0, i0 (t) de método de habilitación MI0 en el momento t debe ser mayor o igual a v j0, i0.costo de oportunidad",
                "Conociendo el \"costo de oportunidad\" VI0, podemos derivar fácilmente la función de valor VI0.costo de oportunidad",
                "La fase de propagación de la función de valor termina cuando todos los métodos de origen se han marcado según lo visitado.5.2 Lectura de la política para determinar la política del agente AK para el método MJ0 Debemos identificar el conjunto ZJ0 de los intervalos [Z, Z] ⊂ [0, ..., δ], de modo que: ∀t∈ [Z,z] πk (MJ0, t) = W. Uno puede identificar fácilmente los intervalos de ZJ0 observando los intervalos de tiempo en los que la función de valor VJ0 no disminuye monotónicamente.5.3 Fase de propagación de la función de probabilidad Suponga ahora que las funciones de valor y los valores de \"costo de oportunidad\" se han propagado de métodos de sumidero a nodos de origen y los conjuntos ZJ para todos los métodos mj ∈ M se han identificado.costo de oportunidad",
                "Por lo tanto, si las funciones de \"costo de oportunidad\" no se sobreestiman, están limitadas por p mi∈M ri y el error de una operación de propagación de la función de valor único será como máximo z δ 0 p (t) (v + ((1+ p) | C≺ | −1) x mi∈M ri) dt <v + ((1+ p) | c≺ | −1) x mi∈M ri.costo de oportunidad",
                "División de las funciones de \"costo de oportunidad\" En la Sección 5, dejamos de lado la discusión sobre cómo la función de \"costo de oportunidad\" VJ0 del método MJ0 se divide en funciones de costo de oportunidad [VJ0, Ik] k k = 0 enviado de regreso a los métodos [mik] kk = 0, que habilita directamente el método MJ0.costo de oportunidad",
                "Hasta ahora, hemos adoptado el mismo enfoque que en [4] y [5] en que la función de \"costo de oportunidad\" VJ0, IK que el método Mik envía de nuevo al método MJ0 es una función mínima y no aumentable que domina la funciónV j0, ik (t) = (vj0 · q k ∈ {0, ..., k} k = k pik) (t).costo de oportunidad",
                "Antes de demostrar que esta heurística sobreestima el \"costo de oportunidad\", discutimos tres problemas que podrían ocurrir al dividir las funciones de \"costo de oportunidad\": (i) sobreestimación, (ii) subestimación y (iii) inanición.costo de oportunidad",
                "Para cada k = 0, ..., k, la ecuación (1) deriva la función de \"costo de oportunidad\" VIK de la recompensa inmediata RK y la función de \"costo de oportunidad\" VJ0, IK.costo de oportunidad",
                "Si M0 es los únicos métodos que precede al método MK, entonces V ik, 0 = VIK se propaga al método M0 y, en consecuencia, el \"costo de oportunidad\" para completar el método M0 en el tiempo t es igual a PK K = 0 VIK, 0 ((t).costo de oportunidad",
                "Finalmente, si VJ0 se divide de alguna manera, que para algunos k, vj0, ik = 0, es el método Mik el que subestima el \"costo de oportunidad\" de habilitar el método MJ0 y se aplica el razonamiento similar.costo de oportunidad",
                "Esa breve discusión muestra la importancia de dividir la función de \"costo de oportunidad\" VJ0 de tal manera, que se evita la sobreestimación, la subestimación y el problema de inanición.costo de oportunidad",
                "Heuristic H 1,1 puede sobreestimar el \"costo de oportunidad\".costo de oportunidad",
                "Además, suponga que los métodos [mik] k k = 0 no proporcionan recompensa local y tienen las mismas ventanas de tiempo, es decir, rik = 0;Estik = 0, letik = δ para k = 0, ..., k. Para demostrar la sobreestimación del \"costo de oportunidad\", debemos identificar t0 ∈ [0, ..., δ] de modo que el \"costo de oportunidad\" PKk = 0 VIK (t) Para los métodos [mik] k k = 0 en el tiempo t ∈ [0, .., δ] es mayor que el costo de oportunidad VJ0 (t).costo de oportunidad",
                "Dado que disminuir el límite superior de la función integral sobre positiva también disminuye la integral, tenemos: KX K = 0 VIK (T0)> C KX K = 0 Z T1 T0 PIK (T - T0) VJ0 (T) DT y desde VJ0(t) no es creciente: tenemos: kx k = 0 vik (t0)> c · vj0 (t1) kx k = 0 z t1 t0 pik (t-t0) dt (5) = c · vj0 (t1) kxk = 0 z t1 - t0 0 pik (t) dt> c · vj0 (t1) vj (t0) c · vj (t1) = vj (t0) 4 suponiendo que 0 en consecuencia, el \"costo de oportunidad\" pk k = 0VIK (T0) de comenzar la ejecución de métodos [mik] k k = 0 en el tiempo t ∈ [0, .., δ] es mayor que el \"costo de oportunidad\" VJ0 (T0) que prueba el teorema. Figura 4 muestra queLa sobreestimación del costo de oportunidad es fácilmente observable en la práctica.costo de oportunidad",
                "Para remediar el problema de la sobreestimación del \"costo de oportunidad\", proponemos tres heurísticas alternativas que dividen las funciones de \"costo de oportunidad\": • Heuristic H 1,0: solo un método, Mik obtiene la recompensa esperada completa por habilitar el método MJ0, es decir, V, V, V, V, V, Vj0, ik (t) = 0 para k ∈ {0, ..., k} \\ {k} y v j0, ik (t) = (vj0 · q k ∈ {0, ..., k} k =k pik) (t).• Heuristic H 1/2,1/2: cada método [Mik] K K = 0 Obtiene el costo de oportunidad total para habilitar el método MJ0 dividido por el número K de métodos que habilitan el método MJ0, es decir, V J0, IK (T)= 1 k (vj0 · q k ∈ {0, ..., k} k = k pik) (t) para k ∈ {0, ..., k}.• Heuristic BH 1,1: Esta es una versión normalizada de la heurística H 1,1 en que cada método [Mik] K K = 0 inicialmente obtiene el costo de oportunidad total para habilitar el método MJ0.costo de oportunidad",
                "Para evitar la sobreestimación del \"costo de oportunidad\", normalizamos las funciones divididas cuando su suma excede la función de \"costo de oportunidad\" a dividirse.costo de oportunidad",
                "Heuristics H 1,0, H 1/2,1/2 y BH 1,1 no sobreestiman el \"costo de oportunidad\".costo de oportunidad",
                "Cuando Heuristic H 1,0 se usa para dividir la función de \"costo de oportunidad\" VJ0, solo un método (por ejemplo, Mik) obtiene el \"costo de oportunidad\" para habilitar el método MJ0.costo de oportunidad",
                "Para la función heurística de BH 1,1, la función de \"costo de oportunidad\" VJ0 está, por definición, dividida de tal manera, que pk k = 0 vik (t) ≤ vj0 (t).costo de oportunidad",
                "En consecuencia, hemos demostrado que nuestra nueva heurística H 1,0, H 1/2,1/2 y BH 1,1 evitan la sobreestimación del \"costo de oportunidad\".costo de oportunidad",
                "Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 835 La razón por la que hemos introducido las tres nuevas heurísticas es la siguiente: dado que H 1,1 sobreestima el \"costo de oportunidad\", uno tiene que elegir qué método recibirá la recompensa la recompensaAl habilitar el método MJ0, que es exactamente lo que hace la heurística H 1,0.costo de oportunidad",
                "Se puede evitar el hambre si las funciones de \"costo de oportunidad\" se dividen utilizando H 1/2,1/2 heurística, que proporciona recompensa a todos los métodos habilitadores.costo de oportunidad",
                "Sin embargo, la suma de las funciones de \"costo de oportunidad\" dividida para la heurística H 1/2,1/2 puede ser más pequeña que la función de \"costo de oportunidad\" no cero para la heurística H 1,0, que es claramente indeseable.costo de oportunidad",
                "Evaluación de evaluación experimental ya que el algoritmo VFP que presentamos proporciona dos mejoras ortogonales sobre el algoritmo OC-DEC-DP-MDP, la evaluación experimental que realizamos constaba en dos partes: en la Parte 1, probamos empíricamente la calidad de las soluciones queOC-DEC-MDP o VFP) se encuentra, dado que utiliza diferentes funciones de \"costo de oportunidad\" dividiendo la heurística, y en la Parte 2, comparamos los tiempos de ejecución de los algoritmos VFP y OC-Dec-DP para una variedad de configuraciones de planes de misión.costo de oportunidad",
                "Mostramos nuestros resultados en la Figura (4) donde el eje X de cada uno de los gráficos representa el tiempo, mientras que el eje y representa el \"costo de oportunidad\".costo de oportunidad",
                "El primer gráfico confirma que cuando la función de \"costo de oportunidad\" VJ0 se dividió en funciones de \"costo de oportunidad\" VI1 y VI2 utilizando la heurística H 1,1, la función VI1 +VI2 no siempre estaba por debajo de la función VJ0.costo de oportunidad",
                "Parte 2: luego elegimos H 1,1 para dividir las funciones de \"costo de oportunidad\" y realizamos una serie de experimentos destinados a probar la escalabilidad de VFP para diversas configuraciones del plan de misión, utilizando el rendimiento del algoritmo OC-DEC-MDP como unpunto de referencia.costo de oportunidad",
                "Nuestro método de solución heurística, llamada propagación de la función de valor (VFP), proporcionó dos mejoras ortogonales de OC-DEC-MDP: (i) aceleró OC-DECMDP por un orden de magnitud al mantener y manipular una función de valor para cada método en lugar deUn valor separado para cada par de método e intervalo de tiempo, y (ii) logró mejores cualidades de solución que OC-DEC-MDP porque corrigió la sobreestimación del \"costo de oportunidad\" de OC-DEC-MDP.costo de oportunidad"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "policy iteration": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of agent-coordination problems in domains with uncertainty and time constraints but very difficult to solve.",
                "In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), combines two orthogonal improvements of OC-DEC-MDP.",
                "First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval.",
                "Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP.",
                "We test both improvements independently in a crisis-management domain as well as for other types of domains.",
                "Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage rescue mission [11] to the coordination of Autonomous Mars Exploration Rovers [2].",
                "Because of the uncertain and dynamic characteristics of such domains, decision-theoretic models have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time.",
                "Key decision-theoretic models that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs).",
                "Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research.",
                "In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses.",
                "Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks.",
                "To remedy that, locally optimal algorithms have been proposed [12] [4] [5].",
                "In particular, Opportunity Cost DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons.",
                "Additionally, OC-DEC-MDP is unique in its ability to address both temporal constraints and uncertain method execution durations, which is an important factor for real-world domains.",
                "OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous <br>policy iteration</br>.",
                "However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values.",
                "The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval.",
                "Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods.",
                "This reward, also referred to as the opportunity cost, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies.",
                "In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with temporal constraints and uncertain method execution durations, that builds on the success of OC-DEC-MDP.",
                "VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval.",
                "Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions.",
                "Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the opportunity cost, and to remedy that, we introduce a set of heuristics, that correct the opportunity cost overestimation problem.",
                "This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building.",
                "In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers.",
                "Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements.",
                "Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the opportunity cost overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2.",
                "MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome.",
                "One example domain is large-scale disaster, like a fire in a skyscraper.",
                "Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless.",
                "In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations.",
                "Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 .",
                "General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading.",
                "The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B.",
                "As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3).",
                "Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc.",
                "We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B.",
                "One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians.",
                "If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians.",
                "In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan.",
                "Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B.",
                "Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3.",
                "MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 .",
                "Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents.",
                "Agents cannot communicate during mission execution.",
                "Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø.",
                "Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time.",
                "Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations.",
                "In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of temporal constraints in the system.",
                "Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints.",
                "For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates.",
                "In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints.",
                "We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system.",
                "For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints.",
                "Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline.",
                "Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi.",
                "Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents.",
                "Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W).",
                "In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + .",
                "In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution.",
                "Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled.",
                "The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a.",
                "A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4.",
                "SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used.",
                "Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}.",
                "This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ .",
                "Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11].",
                "The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used.",
                "However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising.",
                "Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods.",
                "The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible.",
                "At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ].",
                "It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ].",
                "This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration.",
                "We call this step a value propagation phase.",
                "Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π .",
                "It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods.",
                "We call this step a probability propagation phase.",
                "If policy π does not improve π, the algorithm terminates.",
                "There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper.",
                "First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed.",
                "While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 .",
                "Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow.",
                "Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods.",
                "As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again.",
                "As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences.",
                "In the next two sections, we address both of these shortcomings. 5.",
                "VALUE FUNCTION PROPAGATION (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase.",
                "However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the value function propagation phase and the probability function propagation phase.",
                "To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. Opportunity Cost Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled.",
                "Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future.",
                "Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise.",
                "We now develop an analytical technique for performing the value function and probability function propagation phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 Value Function Propagation Phase Suppose, that we are performing a value function propagation phase during which the value functions are propagated from the sink methods to the source methods.",
                "At any time during this phase we encounter a situation shown in Figure 2, where opportunity cost functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the opportunity cost Vi0 of method mi0 is to be derived.",
                "Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ].",
                "The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods.",
                "Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t).",
                "Assume for now, that Vjn,i0 represents a full opportunity cost, postponing the discussion on different techniques for splitting the opportunity cost Vj0 into [Vj0,ik ]K k=0 until section 6.",
                "We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme).",
                "Figure 2: Fragment of an MDP of agent Ak.",
                "Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left).",
                "Let V j0,i0 (t) be the opportunity cost of starting the execution of method mj0 at time t given that method mi0 has been completed.",
                "It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 .",
                "Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t).",
                "Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1.",
                "Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable.",
                "Therefore the opportunity cost Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 .",
                "Furthermore, Vj0,i0 should be non-increasing.",
                "Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }.",
                "Knowing the opportunity cost Vi0 , we can then easily derive the value function vi0 .",
                "Let Ak be an agent assigned to the method mi0 .",
                "If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 .",
                "Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 .",
                "Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored.",
                "We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 .",
                "In general, the value function propagation scheme starts with sink nodes.",
                "It then visits at each time a method m, such that all the methods that m enables have already been marked as visited.",
                "The value function propagation phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 Probability Function Propagation Phase Assume now, that value functions and opportunity cost values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified.",
                "Since value function propagation phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration.",
                "We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived.",
                "Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last value function propagation phase.",
                "If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise.",
                "Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t .",
                "We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 .",
                "The general, the probability function propagation phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default.",
                "We then visit at each time a method m such that all the methods that enable The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited.",
                "The probability function propagation phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 .",
                "Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1.",
                "These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm.",
                "Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and probability function propagation without choosing any function representation.",
                "In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation.",
                "However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions.",
                "When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t).",
                "If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does.",
                "As a result, instead of performing O(Δ2 ) multiplications to compute f(t), VFP only needs to perform O(k · Δ) multiplications to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ).",
                "Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P .",
                "We now prove that the overall approximation error accumulated during the value function propagation phase can be expressed in terms of P and V : THEOREM 1.",
                "Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively.",
                "The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of value function propagation phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri .",
                "PROOF.",
                "In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of probability function propagation phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1.",
                "Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1.",
                "Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1.",
                "We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ).",
                "Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1.",
                "Thus, if opportunity cost functions are not overestimated, they are bounded by P mi∈M ri and the error of a single value function propagation operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri.",
                "Since the number of value function propagation operations is |C≺|, the total error π of the value function propagation phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6.",
                "SPLITTING THE OPPORTUNITY COST FUNCTIONS In section 5 we left out the discussion about how the opportunity cost function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 .",
                "So far, we have taken the same approach as in [4] and [5] in that the opportunity cost function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t).",
                "We refer to this approach, as heuristic H 1,1 .",
                "Before we prove that this heuristic overestimates the opportunity cost, we discuss three problems that might occur when splitting the opportunity cost functions: (i) overestimation, (ii) underestimation and (iii) starvation.",
                "Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when value function propagation for methods [mik ]K k=0 is performed.",
                "For each k = 0, ..., K, Equation (1) derives the opportunity cost function Vik from immediate reward rk and opportunity cost function Vj0,ik .",
                "If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the opportunity cost for completing the method m0 at time t is equal to PK k=0 Vik,0(t).",
                "If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later.",
                "As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences.",
                "Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0.",
                "Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences.",
                "Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the opportunity cost of enabling method mj0 , and the similar reasoning applies.",
                "We call such problem a starvation of method mk.",
                "That short discussion shows the importance of splitting the opportunity cost function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided.",
                "We now prove that: THEOREM 2.",
                "Heuristic H 1,1 can overestimate the opportunity cost.",
                "PROOF.",
                "We prove the theorem by showing a case where the overestimation occurs.",
                "For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively.",
                "Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of opportunity cost, we must identify t0 ∈ [0, ..., Δ] such that the opportunity cost PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t).",
                "From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing.",
                "Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) .",
                "Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the opportunity cost PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice.",
                "To remedy the problem of opportunity cost overestimation, we propose three alternative heuristics that split the opportunity cost functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 .",
                "To avoid opportunity cost overestimation, we normalize the split functions when their sum exceeds the opportunity cost function to be split.",
                "Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t).",
                "For the new heuristics, we now prove, that: THEOREM 3.",
                "Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the opportunity cost.",
                "PROOF.",
                "When heuristic H 1,0 is used to split the opportunity cost function Vj0 , only one method (e.g. mik ) gets the opportunity cost for enabling method mj0 .",
                "Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing.",
                "For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t).",
                "For heuristic bH 1,1 , the opportunity cost function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t).",
                "Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the opportunity cost.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the opportunity cost, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does.",
                "However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation.",
                "Starvation can be avoided if opportunity cost functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods.",
                "However, the sum of split opportunity cost functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split opportunity cost function for the H 1,0 heuristic, which is clearly undesirable.",
                "Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7.",
                "EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations.",
                "Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.",
                "Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100).",
                "We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400.",
                "We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost.",
                "The first graph confirms, that when the opportunity cost function Vj0 was split into opportunity cost functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function.",
                "In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%.",
                "When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 .",
                "We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)).",
                "To obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)).",
                "We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.",
                "Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.",
                "Part 2: We then chose H 1,1 to split the opportunity cost functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark.",
                "We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.",
                "Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200.",
                "We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm.",
                "We then run both algorithms for a total of 100 policy improvement iterations.",
                "Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).",
                "As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%.",
                "For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP.",
                "We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)).",
                "We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.",
                "We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).",
                "As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP.",
                "We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)).",
                "In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400.",
                "We show the results in Figure (7b).",
                "Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%.",
                "We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1.",
                "In particular, we consider 836 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting.",
                "Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods.",
                "For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially.",
                "We therefore vary the time horizons from 3000 to 4000, and then to 5000.",
                "We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8.",
                "CONCLUSIONS Decentralized Markov Decision Process (DEC-MDP) has been very popular for modeling of agent-coordination problems, it is very difficult to solve, especially for the real-world domains.",
                "In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the opportunity cost of OC-DEC-MDP.",
                "In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4].",
                "Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with temporal constraints [1] [11].",
                "Unfortunately, they fail to scale up to large-scale domains at present time.",
                "Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and temporal constraints.",
                "Finally, value function techniques have been studied in context of single agent MDPs [7] [9].",
                "However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning.",
                "Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No.",
                "FA875005C0030.",
                "The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9.",
                "REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein.",
                "Decentralized MDPs with Event-Driven Interactions.",
                "In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman.",
                "Transition-Independent Decentralized Markov Decision Processes.",
                "In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of Markov decision processes.",
                "In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib.",
                "A polynomial algorithm for decentralized Markov decision processes with temporal constraints.",
                "In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib.",
                "An iterative algorithm for solving constrained decentralized Markov decision processes.",
                "In AAAI, pages 1089-1094, 2006. [6] C. Boutilier.",
                "Sequential optimality and coordination in multiagent systems.",
                "In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman.",
                "Exact solutions to time-dependent MDPs.",
                "In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein.",
                "Optimizing information exchange in cooperative multi-agent systems, 2003. [9] L. Li and M. Littman.",
                "Lazy approximation for solving continuous finite-horizon MDPs.",
                "In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig.",
                "Risk-sensitive planning with one-switch utility functions: Value iteration.",
                "In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy.",
                "Coordinated plan management using multiagent MDPs.",
                "In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs.",
                "In IJCAI, pages 1758-1760, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "OC-DEC-MDP puede escalar a tales dominios principalmente porque en lugar de buscar la solución globalmente óptima, lleva a cabo una serie de iteraciones de políticas;En cada iteración realiza una iteración de valor que reutiliza los datos calculados durante la \"iteración de política\" anterior.iteración de política"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "rescue mission": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of agent-coordination problems in domains with uncertainty and time constraints but very difficult to solve.",
                "In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), combines two orthogonal improvements of OC-DEC-MDP.",
                "First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval.",
                "Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP.",
                "We test both improvements independently in a crisis-management domain as well as for other types of domains.",
                "Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage <br>rescue mission</br> [11] to the coordination of Autonomous Mars Exploration Rovers [2].",
                "Because of the uncertain and dynamic characteristics of such domains, decision-theoretic models have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time.",
                "Key decision-theoretic models that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs).",
                "Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research.",
                "In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses.",
                "Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks.",
                "To remedy that, locally optimal algorithms have been proposed [12] [4] [5].",
                "In particular, Opportunity Cost DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons.",
                "Additionally, OC-DEC-MDP is unique in its ability to address both temporal constraints and uncertain method execution durations, which is an important factor for real-world domains.",
                "OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous policy iteration.",
                "However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values.",
                "The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval.",
                "Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods.",
                "This reward, also referred to as the opportunity cost, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies.",
                "In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with temporal constraints and uncertain method execution durations, that builds on the success of OC-DEC-MDP.",
                "VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval.",
                "Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions.",
                "Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the opportunity cost, and to remedy that, we introduce a set of heuristics, that correct the opportunity cost overestimation problem.",
                "This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building.",
                "In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers.",
                "Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements.",
                "Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the opportunity cost overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2.",
                "MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome.",
                "One example domain is large-scale disaster, like a fire in a skyscraper.",
                "Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless.",
                "In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations.",
                "Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 .",
                "General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading.",
                "The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B.",
                "As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3).",
                "Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc.",
                "We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B.",
                "One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians.",
                "If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians.",
                "In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan.",
                "Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B.",
                "Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3.",
                "MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 .",
                "Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents.",
                "Agents cannot communicate during mission execution.",
                "Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø.",
                "Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time.",
                "Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations.",
                "In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of temporal constraints in the system.",
                "Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints.",
                "For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates.",
                "In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints.",
                "We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system.",
                "For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints.",
                "Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline.",
                "Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi.",
                "Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents.",
                "Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W).",
                "In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + .",
                "In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution.",
                "Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled.",
                "The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a.",
                "A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4.",
                "SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used.",
                "Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}.",
                "This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ .",
                "Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11].",
                "The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used.",
                "However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising.",
                "Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods.",
                "The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible.",
                "At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ].",
                "It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ].",
                "This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration.",
                "We call this step a value propagation phase.",
                "Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π .",
                "It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods.",
                "We call this step a probability propagation phase.",
                "If policy π does not improve π, the algorithm terminates.",
                "There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper.",
                "First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed.",
                "While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 .",
                "Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow.",
                "Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods.",
                "As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again.",
                "As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences.",
                "In the next two sections, we address both of these shortcomings. 5.",
                "VALUE FUNCTION PROPAGATION (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase.",
                "However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the value function propagation phase and the probability function propagation phase.",
                "To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. Opportunity Cost Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled.",
                "Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future.",
                "Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise.",
                "We now develop an analytical technique for performing the value function and probability function propagation phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 Value Function Propagation Phase Suppose, that we are performing a value function propagation phase during which the value functions are propagated from the sink methods to the source methods.",
                "At any time during this phase we encounter a situation shown in Figure 2, where opportunity cost functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the opportunity cost Vi0 of method mi0 is to be derived.",
                "Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ].",
                "The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods.",
                "Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t).",
                "Assume for now, that Vjn,i0 represents a full opportunity cost, postponing the discussion on different techniques for splitting the opportunity cost Vj0 into [Vj0,ik ]K k=0 until section 6.",
                "We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme).",
                "Figure 2: Fragment of an MDP of agent Ak.",
                "Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left).",
                "Let V j0,i0 (t) be the opportunity cost of starting the execution of method mj0 at time t given that method mi0 has been completed.",
                "It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 .",
                "Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t).",
                "Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1.",
                "Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable.",
                "Therefore the opportunity cost Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 .",
                "Furthermore, Vj0,i0 should be non-increasing.",
                "Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }.",
                "Knowing the opportunity cost Vi0 , we can then easily derive the value function vi0 .",
                "Let Ak be an agent assigned to the method mi0 .",
                "If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 .",
                "Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 .",
                "Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored.",
                "We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 .",
                "In general, the value function propagation scheme starts with sink nodes.",
                "It then visits at each time a method m, such that all the methods that m enables have already been marked as visited.",
                "The value function propagation phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 Probability Function Propagation Phase Assume now, that value functions and opportunity cost values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified.",
                "Since value function propagation phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration.",
                "We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived.",
                "Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last value function propagation phase.",
                "If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise.",
                "Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t .",
                "We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 .",
                "The general, the probability function propagation phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default.",
                "We then visit at each time a method m such that all the methods that enable The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited.",
                "The probability function propagation phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 .",
                "Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1.",
                "These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm.",
                "Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and probability function propagation without choosing any function representation.",
                "In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation.",
                "However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions.",
                "When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t).",
                "If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does.",
                "As a result, instead of performing O(Δ2 ) multiplications to compute f(t), VFP only needs to perform O(k · Δ) multiplications to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ).",
                "Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P .",
                "We now prove that the overall approximation error accumulated during the value function propagation phase can be expressed in terms of P and V : THEOREM 1.",
                "Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively.",
                "The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of value function propagation phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri .",
                "PROOF.",
                "In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of probability function propagation phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1.",
                "Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1.",
                "Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1.",
                "We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ).",
                "Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1.",
                "Thus, if opportunity cost functions are not overestimated, they are bounded by P mi∈M ri and the error of a single value function propagation operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri.",
                "Since the number of value function propagation operations is |C≺|, the total error π of the value function propagation phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6.",
                "SPLITTING THE OPPORTUNITY COST FUNCTIONS In section 5 we left out the discussion about how the opportunity cost function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 .",
                "So far, we have taken the same approach as in [4] and [5] in that the opportunity cost function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t).",
                "We refer to this approach, as heuristic H 1,1 .",
                "Before we prove that this heuristic overestimates the opportunity cost, we discuss three problems that might occur when splitting the opportunity cost functions: (i) overestimation, (ii) underestimation and (iii) starvation.",
                "Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when value function propagation for methods [mik ]K k=0 is performed.",
                "For each k = 0, ..., K, Equation (1) derives the opportunity cost function Vik from immediate reward rk and opportunity cost function Vj0,ik .",
                "If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the opportunity cost for completing the method m0 at time t is equal to PK k=0 Vik,0(t).",
                "If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later.",
                "As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences.",
                "Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0.",
                "Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences.",
                "Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the opportunity cost of enabling method mj0 , and the similar reasoning applies.",
                "We call such problem a starvation of method mk.",
                "That short discussion shows the importance of splitting the opportunity cost function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided.",
                "We now prove that: THEOREM 2.",
                "Heuristic H 1,1 can overestimate the opportunity cost.",
                "PROOF.",
                "We prove the theorem by showing a case where the overestimation occurs.",
                "For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively.",
                "Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of opportunity cost, we must identify t0 ∈ [0, ..., Δ] such that the opportunity cost PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t).",
                "From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing.",
                "Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) .",
                "Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the opportunity cost PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice.",
                "To remedy the problem of opportunity cost overestimation, we propose three alternative heuristics that split the opportunity cost functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 .",
                "To avoid opportunity cost overestimation, we normalize the split functions when their sum exceeds the opportunity cost function to be split.",
                "Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t).",
                "For the new heuristics, we now prove, that: THEOREM 3.",
                "Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the opportunity cost.",
                "PROOF.",
                "When heuristic H 1,0 is used to split the opportunity cost function Vj0 , only one method (e.g. mik ) gets the opportunity cost for enabling method mj0 .",
                "Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing.",
                "For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t).",
                "For heuristic bH 1,1 , the opportunity cost function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t).",
                "Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the opportunity cost.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the opportunity cost, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does.",
                "However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation.",
                "Starvation can be avoided if opportunity cost functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods.",
                "However, the sum of split opportunity cost functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split opportunity cost function for the H 1,0 heuristic, which is clearly undesirable.",
                "Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7.",
                "EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations.",
                "Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.",
                "Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100).",
                "We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400.",
                "We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost.",
                "The first graph confirms, that when the opportunity cost function Vj0 was split into opportunity cost functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function.",
                "In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%.",
                "When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 .",
                "We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)).",
                "To obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)).",
                "We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.",
                "Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.",
                "Part 2: We then chose H 1,1 to split the opportunity cost functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark.",
                "We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.",
                "Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200.",
                "We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm.",
                "We then run both algorithms for a total of 100 policy improvement iterations.",
                "Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).",
                "As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%.",
                "For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP.",
                "We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)).",
                "We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.",
                "We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).",
                "As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP.",
                "We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)).",
                "In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400.",
                "We show the results in Figure (7b).",
                "Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%.",
                "We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1.",
                "In particular, we consider 836 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting.",
                "Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods.",
                "For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially.",
                "We therefore vary the time horizons from 3000 to 4000, and then to 5000.",
                "We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8.",
                "CONCLUSIONS Decentralized Markov Decision Process (DEC-MDP) has been very popular for modeling of agent-coordination problems, it is very difficult to solve, especially for the real-world domains.",
                "In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the opportunity cost of OC-DEC-MDP.",
                "In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4].",
                "Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with temporal constraints [1] [11].",
                "Unfortunately, they fail to scale up to large-scale domains at present time.",
                "Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and temporal constraints.",
                "Finally, value function techniques have been studied in context of single agent MDPs [7] [9].",
                "However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning.",
                "Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No.",
                "FA875005C0030.",
                "The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9.",
                "REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein.",
                "Decentralized MDPs with Event-Driven Interactions.",
                "In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman.",
                "Transition-Independent Decentralized Markov Decision Processes.",
                "In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of Markov decision processes.",
                "In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib.",
                "A polynomial algorithm for decentralized Markov decision processes with temporal constraints.",
                "In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib.",
                "An iterative algorithm for solving constrained decentralized Markov decision processes.",
                "In AAAI, pages 1089-1094, 2006. [6] C. Boutilier.",
                "Sequential optimality and coordination in multiagent systems.",
                "In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman.",
                "Exact solutions to time-dependent MDPs.",
                "In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein.",
                "Optimizing information exchange in cooperative multi-agent systems, 2003. [9] L. Li and M. Littman.",
                "Lazy approximation for solving continuous finite-horizon MDPs.",
                "In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig.",
                "Risk-sensitive planning with one-switch utility functions: Value iteration.",
                "In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy.",
                "Coordinated plan management using multiagent MDPs.",
                "In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs.",
                "In IJCAI, pages 1758-1760, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Introducción El desarrollo de algoritmos para la coordinación efectiva de múltiples agentes que actúan como un equipo en dominios inciertos y de tiempo crítico se ha convertido recientemente en un campo de investigación muy activo con posibles aplicaciones que van desde la coordinación de agentes durante una \"misión de rescate\" de rehenes [11] hasta la coordinación de la coordinaciónde Rovers de exploración de Marte autónomo [2].Misión de rescate"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "probability function propagation": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of agent-coordination problems in domains with uncertainty and time constraints but very difficult to solve.",
                "In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), combines two orthogonal improvements of OC-DEC-MDP.",
                "First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval.",
                "Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP.",
                "We test both improvements independently in a crisis-management domain as well as for other types of domains.",
                "Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage rescue mission [11] to the coordination of Autonomous Mars Exploration Rovers [2].",
                "Because of the uncertain and dynamic characteristics of such domains, decision-theoretic models have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time.",
                "Key decision-theoretic models that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs).",
                "Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research.",
                "In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses.",
                "Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks.",
                "To remedy that, locally optimal algorithms have been proposed [12] [4] [5].",
                "In particular, Opportunity Cost DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons.",
                "Additionally, OC-DEC-MDP is unique in its ability to address both temporal constraints and uncertain method execution durations, which is an important factor for real-world domains.",
                "OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous policy iteration.",
                "However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values.",
                "The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval.",
                "Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods.",
                "This reward, also referred to as the opportunity cost, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies.",
                "In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with temporal constraints and uncertain method execution durations, that builds on the success of OC-DEC-MDP.",
                "VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval.",
                "Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions.",
                "Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the opportunity cost, and to remedy that, we introduce a set of heuristics, that correct the opportunity cost overestimation problem.",
                "This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building.",
                "In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers.",
                "Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements.",
                "Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the opportunity cost overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2.",
                "MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome.",
                "One example domain is large-scale disaster, like a fire in a skyscraper.",
                "Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless.",
                "In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations.",
                "Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 .",
                "General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading.",
                "The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B.",
                "As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3).",
                "Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc.",
                "We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B.",
                "One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians.",
                "If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians.",
                "In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan.",
                "Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B.",
                "Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3.",
                "MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 .",
                "Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents.",
                "Agents cannot communicate during mission execution.",
                "Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø.",
                "Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time.",
                "Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations.",
                "In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of temporal constraints in the system.",
                "Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints.",
                "For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates.",
                "In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints.",
                "We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system.",
                "For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints.",
                "Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline.",
                "Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi.",
                "Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents.",
                "Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W).",
                "In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + .",
                "In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution.",
                "Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled.",
                "The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a.",
                "A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4.",
                "SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used.",
                "Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}.",
                "This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ .",
                "Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11].",
                "The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used.",
                "However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising.",
                "Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods.",
                "The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible.",
                "At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ].",
                "It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ].",
                "This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration.",
                "We call this step a value propagation phase.",
                "Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π .",
                "It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods.",
                "We call this step a probability propagation phase.",
                "If policy π does not improve π, the algorithm terminates.",
                "There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper.",
                "First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed.",
                "While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 .",
                "Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow.",
                "Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods.",
                "As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again.",
                "As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences.",
                "In the next two sections, we address both of these shortcomings. 5.",
                "VALUE FUNCTION PROPAGATION (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase.",
                "However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the value function propagation phase and the <br>probability function propagation</br> phase.",
                "To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. Opportunity Cost Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled.",
                "Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future.",
                "Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise.",
                "We now develop an analytical technique for performing the value function and <br>probability function propagation</br> phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 Value Function Propagation Phase Suppose, that we are performing a value function propagation phase during which the value functions are propagated from the sink methods to the source methods.",
                "At any time during this phase we encounter a situation shown in Figure 2, where opportunity cost functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the opportunity cost Vi0 of method mi0 is to be derived.",
                "Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ].",
                "The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods.",
                "Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t).",
                "Assume for now, that Vjn,i0 represents a full opportunity cost, postponing the discussion on different techniques for splitting the opportunity cost Vj0 into [Vj0,ik ]K k=0 until section 6.",
                "We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme).",
                "Figure 2: Fragment of an MDP of agent Ak.",
                "Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left).",
                "Let V j0,i0 (t) be the opportunity cost of starting the execution of method mj0 at time t given that method mi0 has been completed.",
                "It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 .",
                "Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t).",
                "Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1.",
                "Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable.",
                "Therefore the opportunity cost Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 .",
                "Furthermore, Vj0,i0 should be non-increasing.",
                "Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }.",
                "Knowing the opportunity cost Vi0 , we can then easily derive the value function vi0 .",
                "Let Ak be an agent assigned to the method mi0 .",
                "If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 .",
                "Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 .",
                "Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored.",
                "We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 .",
                "In general, the value function propagation scheme starts with sink nodes.",
                "It then visits at each time a method m, such that all the methods that m enables have already been marked as visited.",
                "The value function propagation phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 <br>probability function propagation</br> Phase Assume now, that value functions and opportunity cost values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified.",
                "Since value function propagation phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration.",
                "We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived.",
                "Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last value function propagation phase.",
                "If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise.",
                "Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t .",
                "We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 .",
                "The general, the <br>probability function propagation</br> phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default.",
                "We then visit at each time a method m such that all the methods that enable The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited.",
                "The <br>probability function propagation</br> phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 .",
                "Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1.",
                "These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm.",
                "Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and <br>probability function propagation</br> without choosing any function representation.",
                "In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation.",
                "However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions.",
                "When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t).",
                "If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does.",
                "As a result, instead of performing O(Δ2 ) multiplications to compute f(t), VFP only needs to perform O(k · Δ) multiplications to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ).",
                "Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P .",
                "We now prove that the overall approximation error accumulated during the value function propagation phase can be expressed in terms of P and V : THEOREM 1.",
                "Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively.",
                "The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of value function propagation phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri .",
                "PROOF.",
                "In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of <br>probability function propagation</br> phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1.",
                "Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1.",
                "Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1.",
                "We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ).",
                "Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1.",
                "Thus, if opportunity cost functions are not overestimated, they are bounded by P mi∈M ri and the error of a single value function propagation operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri.",
                "Since the number of value function propagation operations is |C≺|, the total error π of the value function propagation phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6.",
                "SPLITTING THE OPPORTUNITY COST FUNCTIONS In section 5 we left out the discussion about how the opportunity cost function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 .",
                "So far, we have taken the same approach as in [4] and [5] in that the opportunity cost function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t).",
                "We refer to this approach, as heuristic H 1,1 .",
                "Before we prove that this heuristic overestimates the opportunity cost, we discuss three problems that might occur when splitting the opportunity cost functions: (i) overestimation, (ii) underestimation and (iii) starvation.",
                "Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when value function propagation for methods [mik ]K k=0 is performed.",
                "For each k = 0, ..., K, Equation (1) derives the opportunity cost function Vik from immediate reward rk and opportunity cost function Vj0,ik .",
                "If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the opportunity cost for completing the method m0 at time t is equal to PK k=0 Vik,0(t).",
                "If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later.",
                "As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences.",
                "Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0.",
                "Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences.",
                "Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the opportunity cost of enabling method mj0 , and the similar reasoning applies.",
                "We call such problem a starvation of method mk.",
                "That short discussion shows the importance of splitting the opportunity cost function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided.",
                "We now prove that: THEOREM 2.",
                "Heuristic H 1,1 can overestimate the opportunity cost.",
                "PROOF.",
                "We prove the theorem by showing a case where the overestimation occurs.",
                "For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively.",
                "Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of opportunity cost, we must identify t0 ∈ [0, ..., Δ] such that the opportunity cost PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t).",
                "From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing.",
                "Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) .",
                "Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the opportunity cost PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice.",
                "To remedy the problem of opportunity cost overestimation, we propose three alternative heuristics that split the opportunity cost functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 .",
                "To avoid opportunity cost overestimation, we normalize the split functions when their sum exceeds the opportunity cost function to be split.",
                "Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t).",
                "For the new heuristics, we now prove, that: THEOREM 3.",
                "Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the opportunity cost.",
                "PROOF.",
                "When heuristic H 1,0 is used to split the opportunity cost function Vj0 , only one method (e.g. mik ) gets the opportunity cost for enabling method mj0 .",
                "Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing.",
                "For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t).",
                "For heuristic bH 1,1 , the opportunity cost function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t).",
                "Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the opportunity cost.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the opportunity cost, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does.",
                "However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation.",
                "Starvation can be avoided if opportunity cost functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods.",
                "However, the sum of split opportunity cost functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split opportunity cost function for the H 1,0 heuristic, which is clearly undesirable.",
                "Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7.",
                "EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations.",
                "Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.",
                "Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100).",
                "We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400.",
                "We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost.",
                "The first graph confirms, that when the opportunity cost function Vj0 was split into opportunity cost functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function.",
                "In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%.",
                "When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 .",
                "We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)).",
                "To obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)).",
                "We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.",
                "Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.",
                "Part 2: We then chose H 1,1 to split the opportunity cost functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark.",
                "We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.",
                "Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200.",
                "We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm.",
                "We then run both algorithms for a total of 100 policy improvement iterations.",
                "Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).",
                "As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%.",
                "For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP.",
                "We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)).",
                "We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.",
                "We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).",
                "As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP.",
                "We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)).",
                "In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400.",
                "We show the results in Figure (7b).",
                "Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%.",
                "We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1.",
                "In particular, we consider 836 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting.",
                "Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods.",
                "For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially.",
                "We therefore vary the time horizons from 3000 to 4000, and then to 5000.",
                "We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8.",
                "CONCLUSIONS Decentralized Markov Decision Process (DEC-MDP) has been very popular for modeling of agent-coordination problems, it is very difficult to solve, especially for the real-world domains.",
                "In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the opportunity cost of OC-DEC-MDP.",
                "In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4].",
                "Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with temporal constraints [1] [11].",
                "Unfortunately, they fail to scale up to large-scale domains at present time.",
                "Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and temporal constraints.",
                "Finally, value function techniques have been studied in context of single agent MDPs [7] [9].",
                "However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning.",
                "Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No.",
                "FA875005C0030.",
                "The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9.",
                "REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein.",
                "Decentralized MDPs with Event-Driven Interactions.",
                "In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman.",
                "Transition-Independent Decentralized Markov Decision Processes.",
                "In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of Markov decision processes.",
                "In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib.",
                "A polynomial algorithm for decentralized Markov decision processes with temporal constraints.",
                "In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib.",
                "An iterative algorithm for solving constrained decentralized Markov decision processes.",
                "In AAAI, pages 1089-1094, 2006. [6] C. Boutilier.",
                "Sequential optimality and coordination in multiagent systems.",
                "In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman.",
                "Exact solutions to time-dependent MDPs.",
                "In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein.",
                "Optimizing information exchange in cooperative multi-agent systems, 2003. [9] L. Li and M. Littman.",
                "Lazy approximation for solving continuous finite-horizon MDPs.",
                "In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig.",
                "Risk-sensitive planning with one-switch utility functions: Value iteration.",
                "In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy.",
                "Coordinated plan management using multiagent MDPs.",
                "In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs.",
                "In IJCAI, pages 1758-1760, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Sin embargo, en lugar de propagar valores separados, VFP mantiene y propaga las funciones completas, por lo tanto, nos referimos a estas fases como la fase de propagación de la función de valor y la fase de \"propagación de la función de probabilidad\".propagación de la función de probabilidad",
                "Ahora desarrollamos una técnica analítica para realizar la función de valor y las fases de \"propagación de la función de probabilidad\".3 De manera similar para la fase de propagación de probabilidad 832, la sexta intl.propagación de la función de probabilidad",
                "La fase de propagación de la función de valor termina cuando todos los métodos de origen se han marcado según lo visitado.5.2 Lectura de la política para determinar la política del agente AK para el método MJ0 Debemos identificar el conjunto ZJ0 de los intervalos [Z, Z] ⊂ [0, ..., δ], de modo que: ∀t∈ [Z,z] πk (MJ0, t) = W. Uno puede identificar fácilmente los intervalos de ZJ0 observando los intervalos de tiempo en los que la función de valor VJ0 no disminuye monotónicamente.5.3 Fase de \"propagación de la función de probabilidad\" Suponga ahora que las funciones de valor y los valores de costo de oportunidad se han propagado desde métodos de sumidero hasta nodos de origen y los conjuntos ZJ para todos los métodos mj ∈ M se han identificado.propagación de la función de probabilidad",
                "El general, la fase de \"propagación de la función de probabilidad\" comienza con los métodos de origen MSI para los cuales sabemos que psi = 1 ya que están habilitados de forma predeterminada.propagación de la función de probabilidad",
                "La fase de \"propagación de la función de probabilidad\" termina cuando todos los métodos de sumidero se han marcado como se ve.5.4 El algoritmo De manera similar al algoritmo OC-DEC-MDP, VFP comienza las iteraciones de mejora de políticas con la Política de tiempo de inicio más temprana π0.propagación de la función de probabilidad",
                "De manera similar a OC-DEC-MDP, VFP termina si una nueva política no mejora la política de la iteración de algoritmo anterior.5.5 Implementación de operaciones de función Hasta ahora, hemos obtenido las operaciones funcionales para la función de valor y la \"propagación de la función de probabilidad\" sin elegir ninguna representación de función.propagación de la función de probabilidad",
                "Para establecer el límite para π, primero probamos mediante la inducción en el tamaño de C≺, que el error general de la fase de \"propagación de la función de probabilidad\", π (p) = maxp supt∈ [0, δ] | p (t) - bp (t) |está limitado por (1 + P) | C≺ |- 1. Propagación de la función de probabilidad"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "multiplication": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of agent-coordination problems in domains with uncertainty and time constraints but very difficult to solve.",
                "In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), combines two orthogonal improvements of OC-DEC-MDP.",
                "First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval.",
                "Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP.",
                "We test both improvements independently in a crisis-management domain as well as for other types of domains.",
                "Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage rescue mission [11] to the coordination of Autonomous Mars Exploration Rovers [2].",
                "Because of the uncertain and dynamic characteristics of such domains, decision-theoretic models have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time.",
                "Key decision-theoretic models that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs).",
                "Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research.",
                "In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses.",
                "Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks.",
                "To remedy that, locally optimal algorithms have been proposed [12] [4] [5].",
                "In particular, Opportunity Cost DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons.",
                "Additionally, OC-DEC-MDP is unique in its ability to address both temporal constraints and uncertain method execution durations, which is an important factor for real-world domains.",
                "OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous policy iteration.",
                "However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values.",
                "The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval.",
                "Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods.",
                "This reward, also referred to as the opportunity cost, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies.",
                "In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with temporal constraints and uncertain method execution durations, that builds on the success of OC-DEC-MDP.",
                "VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval.",
                "Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions.",
                "Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the opportunity cost, and to remedy that, we introduce a set of heuristics, that correct the opportunity cost overestimation problem.",
                "This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building.",
                "In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers.",
                "Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements.",
                "Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the opportunity cost overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2.",
                "MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome.",
                "One example domain is large-scale disaster, like a fire in a skyscraper.",
                "Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless.",
                "In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations.",
                "Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 .",
                "General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading.",
                "The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B.",
                "As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3).",
                "Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc.",
                "We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B.",
                "One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians.",
                "If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians.",
                "In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan.",
                "Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B.",
                "Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3.",
                "MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 .",
                "Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents.",
                "Agents cannot communicate during mission execution.",
                "Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø.",
                "Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time.",
                "Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations.",
                "In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of temporal constraints in the system.",
                "Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints.",
                "For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates.",
                "In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints.",
                "We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system.",
                "For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints.",
                "Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline.",
                "Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi.",
                "Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents.",
                "Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W).",
                "In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + .",
                "In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution.",
                "Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled.",
                "The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a.",
                "A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4.",
                "SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used.",
                "Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}.",
                "This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ .",
                "Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11].",
                "The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used.",
                "However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising.",
                "Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods.",
                "The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible.",
                "At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ].",
                "It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ].",
                "This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration.",
                "We call this step a value propagation phase.",
                "Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π .",
                "It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods.",
                "We call this step a probability propagation phase.",
                "If policy π does not improve π, the algorithm terminates.",
                "There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper.",
                "First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed.",
                "While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 .",
                "Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow.",
                "Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods.",
                "As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again.",
                "As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences.",
                "In the next two sections, we address both of these shortcomings. 5.",
                "VALUE FUNCTION PROPAGATION (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase.",
                "However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the value function propagation phase and the probability function propagation phase.",
                "To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. Opportunity Cost Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled.",
                "Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future.",
                "Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise.",
                "We now develop an analytical technique for performing the value function and probability function propagation phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 Value Function Propagation Phase Suppose, that we are performing a value function propagation phase during which the value functions are propagated from the sink methods to the source methods.",
                "At any time during this phase we encounter a situation shown in Figure 2, where opportunity cost functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the opportunity cost Vi0 of method mi0 is to be derived.",
                "Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ].",
                "The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods.",
                "Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t).",
                "Assume for now, that Vjn,i0 represents a full opportunity cost, postponing the discussion on different techniques for splitting the opportunity cost Vj0 into [Vj0,ik ]K k=0 until section 6.",
                "We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme).",
                "Figure 2: Fragment of an MDP of agent Ak.",
                "Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left).",
                "Let V j0,i0 (t) be the opportunity cost of starting the execution of method mj0 at time t given that method mi0 has been completed.",
                "It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 .",
                "Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t).",
                "Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1.",
                "Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable.",
                "Therefore the opportunity cost Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 .",
                "Furthermore, Vj0,i0 should be non-increasing.",
                "Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }.",
                "Knowing the opportunity cost Vi0 , we can then easily derive the value function vi0 .",
                "Let Ak be an agent assigned to the method mi0 .",
                "If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 .",
                "Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 .",
                "Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored.",
                "We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 .",
                "In general, the value function propagation scheme starts with sink nodes.",
                "It then visits at each time a method m, such that all the methods that m enables have already been marked as visited.",
                "The value function propagation phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 Probability Function Propagation Phase Assume now, that value functions and opportunity cost values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified.",
                "Since value function propagation phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration.",
                "We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived.",
                "Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last value function propagation phase.",
                "If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise.",
                "Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t .",
                "We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 .",
                "The general, the probability function propagation phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default.",
                "We then visit at each time a method m such that all the methods that enable The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited.",
                "The probability function propagation phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 .",
                "Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1.",
                "These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm.",
                "Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and probability function propagation without choosing any function representation.",
                "In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation.",
                "However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions.",
                "When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t).",
                "If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does.",
                "As a result, instead of performing O(Δ2 ) <br>multiplication</br>s to compute f(t), VFP only needs to perform O(k · Δ) <br>multiplication</br>s to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ).",
                "Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P .",
                "We now prove that the overall approximation error accumulated during the value function propagation phase can be expressed in terms of P and V : THEOREM 1.",
                "Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively.",
                "The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of value function propagation phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri .",
                "PROOF.",
                "In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of probability function propagation phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1.",
                "Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1.",
                "Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1.",
                "We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ).",
                "Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1.",
                "Thus, if opportunity cost functions are not overestimated, they are bounded by P mi∈M ri and the error of a single value function propagation operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri.",
                "Since the number of value function propagation operations is |C≺|, the total error π of the value function propagation phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6.",
                "SPLITTING THE OPPORTUNITY COST FUNCTIONS In section 5 we left out the discussion about how the opportunity cost function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 .",
                "So far, we have taken the same approach as in [4] and [5] in that the opportunity cost function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t).",
                "We refer to this approach, as heuristic H 1,1 .",
                "Before we prove that this heuristic overestimates the opportunity cost, we discuss three problems that might occur when splitting the opportunity cost functions: (i) overestimation, (ii) underestimation and (iii) starvation.",
                "Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when value function propagation for methods [mik ]K k=0 is performed.",
                "For each k = 0, ..., K, Equation (1) derives the opportunity cost function Vik from immediate reward rk and opportunity cost function Vj0,ik .",
                "If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the opportunity cost for completing the method m0 at time t is equal to PK k=0 Vik,0(t).",
                "If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later.",
                "As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences.",
                "Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0.",
                "Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences.",
                "Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the opportunity cost of enabling method mj0 , and the similar reasoning applies.",
                "We call such problem a starvation of method mk.",
                "That short discussion shows the importance of splitting the opportunity cost function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided.",
                "We now prove that: THEOREM 2.",
                "Heuristic H 1,1 can overestimate the opportunity cost.",
                "PROOF.",
                "We prove the theorem by showing a case where the overestimation occurs.",
                "For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively.",
                "Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of opportunity cost, we must identify t0 ∈ [0, ..., Δ] such that the opportunity cost PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t).",
                "From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing.",
                "Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) .",
                "Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the opportunity cost PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice.",
                "To remedy the problem of opportunity cost overestimation, we propose three alternative heuristics that split the opportunity cost functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 .",
                "To avoid opportunity cost overestimation, we normalize the split functions when their sum exceeds the opportunity cost function to be split.",
                "Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t).",
                "For the new heuristics, we now prove, that: THEOREM 3.",
                "Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the opportunity cost.",
                "PROOF.",
                "When heuristic H 1,0 is used to split the opportunity cost function Vj0 , only one method (e.g. mik ) gets the opportunity cost for enabling method mj0 .",
                "Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing.",
                "For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t).",
                "For heuristic bH 1,1 , the opportunity cost function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t).",
                "Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the opportunity cost.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the opportunity cost, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does.",
                "However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation.",
                "Starvation can be avoided if opportunity cost functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods.",
                "However, the sum of split opportunity cost functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split opportunity cost function for the H 1,0 heuristic, which is clearly undesirable.",
                "Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7.",
                "EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations.",
                "Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.",
                "Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100).",
                "We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400.",
                "We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost.",
                "The first graph confirms, that when the opportunity cost function Vj0 was split into opportunity cost functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function.",
                "In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%.",
                "When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 .",
                "We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)).",
                "To obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)).",
                "We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.",
                "Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.",
                "Part 2: We then chose H 1,1 to split the opportunity cost functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark.",
                "We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.",
                "Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200.",
                "We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm.",
                "We then run both algorithms for a total of 100 policy improvement iterations.",
                "Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).",
                "As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%.",
                "For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP.",
                "We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)).",
                "We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.",
                "We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).",
                "As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP.",
                "We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)).",
                "In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400.",
                "We show the results in Figure (7b).",
                "Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%.",
                "We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1.",
                "In particular, we consider 836 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting.",
                "Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods.",
                "For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially.",
                "We therefore vary the time horizons from 3000 to 4000, and then to 5000.",
                "We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8.",
                "CONCLUSIONS Decentralized Markov Decision Process (DEC-MDP) has been very popular for modeling of agent-coordination problems, it is very difficult to solve, especially for the real-world domains.",
                "In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the opportunity cost of OC-DEC-MDP.",
                "In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4].",
                "Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with temporal constraints [1] [11].",
                "Unfortunately, they fail to scale up to large-scale domains at present time.",
                "Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and temporal constraints.",
                "Finally, value function techniques have been studied in context of single agent MDPs [7] [9].",
                "However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning.",
                "Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No.",
                "FA875005C0030.",
                "The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9.",
                "REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein.",
                "Decentralized MDPs with Event-Driven Interactions.",
                "In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman.",
                "Transition-Independent Decentralized Markov Decision Processes.",
                "In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of Markov decision processes.",
                "In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib.",
                "A polynomial algorithm for decentralized Markov decision processes with temporal constraints.",
                "In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib.",
                "An iterative algorithm for solving constrained decentralized Markov decision processes.",
                "In AAAI, pages 1089-1094, 2006. [6] C. Boutilier.",
                "Sequential optimality and coordination in multiagent systems.",
                "In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman.",
                "Exact solutions to time-dependent MDPs.",
                "In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein.",
                "Optimizing information exchange in cooperative multi-agent systems, 2003. [9] L. Li and M. Littman.",
                "Lazy approximation for solving continuous finite-horizon MDPs.",
                "In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig.",
                "Risk-sensitive planning with one-switch utility functions: Value iteration.",
                "In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy.",
                "Coordinated plan management using multiagent MDPs.",
                "In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs.",
                "In IJCAI, pages 1758-1760, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Como resultado, en lugar de realizar O (Δ2) \"multiplicación\" s para calcular F (t), VFP solo necesita realizar O (k · Δ) \"multiplicación\" s para calcular f (t), donde k es el número desegmentos lineales de BH (t) (tenga en cuenta que dado que H (t) es monotónico, BH (t) generalmente está cerca de H (t) con k δ).multiplicación"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "heuristic performance": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of agent-coordination problems in domains with uncertainty and time constraints but very difficult to solve.",
                "In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), combines two orthogonal improvements of OC-DEC-MDP.",
                "First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval.",
                "Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP.",
                "We test both improvements independently in a crisis-management domain as well as for other types of domains.",
                "Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage rescue mission [11] to the coordination of Autonomous Mars Exploration Rovers [2].",
                "Because of the uncertain and dynamic characteristics of such domains, decision-theoretic models have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time.",
                "Key decision-theoretic models that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs).",
                "Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research.",
                "In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses.",
                "Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks.",
                "To remedy that, locally optimal algorithms have been proposed [12] [4] [5].",
                "In particular, Opportunity Cost DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons.",
                "Additionally, OC-DEC-MDP is unique in its ability to address both temporal constraints and uncertain method execution durations, which is an important factor for real-world domains.",
                "OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous policy iteration.",
                "However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values.",
                "The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval.",
                "Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods.",
                "This reward, also referred to as the opportunity cost, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies.",
                "In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with temporal constraints and uncertain method execution durations, that builds on the success of OC-DEC-MDP.",
                "VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval.",
                "Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions.",
                "Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the opportunity cost, and to remedy that, we introduce a set of heuristics, that correct the opportunity cost overestimation problem.",
                "This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building.",
                "In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers.",
                "Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements.",
                "Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the opportunity cost overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2.",
                "MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome.",
                "One example domain is large-scale disaster, like a fire in a skyscraper.",
                "Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless.",
                "In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations.",
                "Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 .",
                "General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading.",
                "The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B.",
                "As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3).",
                "Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc.",
                "We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B.",
                "One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians.",
                "If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians.",
                "In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan.",
                "Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B.",
                "Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3.",
                "MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 .",
                "Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents.",
                "Agents cannot communicate during mission execution.",
                "Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø.",
                "Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time.",
                "Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations.",
                "In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of temporal constraints in the system.",
                "Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints.",
                "For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates.",
                "In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints.",
                "We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system.",
                "For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints.",
                "Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline.",
                "Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi.",
                "Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents.",
                "Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W).",
                "In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + .",
                "In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution.",
                "Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled.",
                "The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a.",
                "A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4.",
                "SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used.",
                "Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}.",
                "This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ .",
                "Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11].",
                "The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used.",
                "However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising.",
                "Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods.",
                "The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible.",
                "At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ].",
                "It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ].",
                "This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration.",
                "We call this step a value propagation phase.",
                "Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π .",
                "It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods.",
                "We call this step a probability propagation phase.",
                "If policy π does not improve π, the algorithm terminates.",
                "There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper.",
                "First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed.",
                "While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 .",
                "Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow.",
                "Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods.",
                "As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again.",
                "As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences.",
                "In the next two sections, we address both of these shortcomings. 5.",
                "VALUE FUNCTION PROPAGATION (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase.",
                "However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the value function propagation phase and the probability function propagation phase.",
                "To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. Opportunity Cost Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled.",
                "Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future.",
                "Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise.",
                "We now develop an analytical technique for performing the value function and probability function propagation phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 Value Function Propagation Phase Suppose, that we are performing a value function propagation phase during which the value functions are propagated from the sink methods to the source methods.",
                "At any time during this phase we encounter a situation shown in Figure 2, where opportunity cost functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the opportunity cost Vi0 of method mi0 is to be derived.",
                "Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ].",
                "The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods.",
                "Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t).",
                "Assume for now, that Vjn,i0 represents a full opportunity cost, postponing the discussion on different techniques for splitting the opportunity cost Vj0 into [Vj0,ik ]K k=0 until section 6.",
                "We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme).",
                "Figure 2: Fragment of an MDP of agent Ak.",
                "Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left).",
                "Let V j0,i0 (t) be the opportunity cost of starting the execution of method mj0 at time t given that method mi0 has been completed.",
                "It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 .",
                "Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t).",
                "Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1.",
                "Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable.",
                "Therefore the opportunity cost Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 .",
                "Furthermore, Vj0,i0 should be non-increasing.",
                "Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }.",
                "Knowing the opportunity cost Vi0 , we can then easily derive the value function vi0 .",
                "Let Ak be an agent assigned to the method mi0 .",
                "If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 .",
                "Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 .",
                "Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored.",
                "We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 .",
                "In general, the value function propagation scheme starts with sink nodes.",
                "It then visits at each time a method m, such that all the methods that m enables have already been marked as visited.",
                "The value function propagation phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 Probability Function Propagation Phase Assume now, that value functions and opportunity cost values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified.",
                "Since value function propagation phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration.",
                "We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived.",
                "Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last value function propagation phase.",
                "If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise.",
                "Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t .",
                "We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 .",
                "The general, the probability function propagation phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default.",
                "We then visit at each time a method m such that all the methods that enable The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited.",
                "The probability function propagation phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 .",
                "Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1.",
                "These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm.",
                "Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and probability function propagation without choosing any function representation.",
                "In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation.",
                "However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions.",
                "When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t).",
                "If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does.",
                "As a result, instead of performing O(Δ2 ) multiplications to compute f(t), VFP only needs to perform O(k · Δ) multiplications to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ).",
                "Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P .",
                "We now prove that the overall approximation error accumulated during the value function propagation phase can be expressed in terms of P and V : THEOREM 1.",
                "Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively.",
                "The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of value function propagation phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri .",
                "PROOF.",
                "In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of probability function propagation phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1.",
                "Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1.",
                "Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1.",
                "We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ).",
                "Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1.",
                "Thus, if opportunity cost functions are not overestimated, they are bounded by P mi∈M ri and the error of a single value function propagation operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri.",
                "Since the number of value function propagation operations is |C≺|, the total error π of the value function propagation phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6.",
                "SPLITTING THE OPPORTUNITY COST FUNCTIONS In section 5 we left out the discussion about how the opportunity cost function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 .",
                "So far, we have taken the same approach as in [4] and [5] in that the opportunity cost function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t).",
                "We refer to this approach, as heuristic H 1,1 .",
                "Before we prove that this heuristic overestimates the opportunity cost, we discuss three problems that might occur when splitting the opportunity cost functions: (i) overestimation, (ii) underestimation and (iii) starvation.",
                "Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when value function propagation for methods [mik ]K k=0 is performed.",
                "For each k = 0, ..., K, Equation (1) derives the opportunity cost function Vik from immediate reward rk and opportunity cost function Vj0,ik .",
                "If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the opportunity cost for completing the method m0 at time t is equal to PK k=0 Vik,0(t).",
                "If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later.",
                "As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences.",
                "Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0.",
                "Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences.",
                "Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the opportunity cost of enabling method mj0 , and the similar reasoning applies.",
                "We call such problem a starvation of method mk.",
                "That short discussion shows the importance of splitting the opportunity cost function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided.",
                "We now prove that: THEOREM 2.",
                "Heuristic H 1,1 can overestimate the opportunity cost.",
                "PROOF.",
                "We prove the theorem by showing a case where the overestimation occurs.",
                "For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively.",
                "Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of opportunity cost, we must identify t0 ∈ [0, ..., Δ] such that the opportunity cost PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t).",
                "From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing.",
                "Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) .",
                "Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the opportunity cost PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice.",
                "To remedy the problem of opportunity cost overestimation, we propose three alternative heuristics that split the opportunity cost functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 .",
                "To avoid opportunity cost overestimation, we normalize the split functions when their sum exceeds the opportunity cost function to be split.",
                "Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t).",
                "For the new heuristics, we now prove, that: THEOREM 3.",
                "Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the opportunity cost.",
                "PROOF.",
                "When heuristic H 1,0 is used to split the opportunity cost function Vj0 , only one method (e.g. mik ) gets the opportunity cost for enabling method mj0 .",
                "Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing.",
                "For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t).",
                "For heuristic bH 1,1 , the opportunity cost function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t).",
                "Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the opportunity cost.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the opportunity cost, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does.",
                "However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation.",
                "Starvation can be avoided if opportunity cost functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods.",
                "However, the sum of split opportunity cost functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split opportunity cost function for the H 1,0 heuristic, which is clearly undesirable.",
                "Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7.",
                "EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations.",
                "Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.",
                "Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100).",
                "We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400.",
                "We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost.",
                "The first graph confirms, that when the opportunity cost function Vj0 was split into opportunity cost functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function.",
                "In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%.",
                "When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 .",
                "We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)).",
                "To obtain the baseline for the <br>heuristic performance</br>, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)).",
                "We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.",
                "Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.",
                "Part 2: We then chose H 1,1 to split the opportunity cost functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark.",
                "We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.",
                "Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200.",
                "We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm.",
                "We then run both algorithms for a total of 100 policy improvement iterations.",
                "Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).",
                "As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%.",
                "For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP.",
                "We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)).",
                "We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.",
                "We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).",
                "As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP.",
                "We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)).",
                "In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400.",
                "We show the results in Figure (7b).",
                "Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%.",
                "We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1.",
                "In particular, we consider 836 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting.",
                "Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods.",
                "For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially.",
                "We therefore vary the time horizons from 3000 to 4000, and then to 5000.",
                "We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8.",
                "CONCLUSIONS Decentralized Markov Decision Process (DEC-MDP) has been very popular for modeling of agent-coordination problems, it is very difficult to solve, especially for the real-world domains.",
                "In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the opportunity cost of OC-DEC-MDP.",
                "In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4].",
                "Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with temporal constraints [1] [11].",
                "Unfortunately, they fail to scale up to large-scale domains at present time.",
                "Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and temporal constraints.",
                "Finally, value function techniques have been studied in context of single agent MDPs [7] [9].",
                "However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning.",
                "Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No.",
                "FA875005C0030.",
                "The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9.",
                "REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein.",
                "Decentralized MDPs with Event-Driven Interactions.",
                "In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman.",
                "Transition-Independent Decentralized Markov Decision Processes.",
                "In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of Markov decision processes.",
                "In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib.",
                "A polynomial algorithm for decentralized Markov decision processes with temporal constraints.",
                "In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib.",
                "An iterative algorithm for solving constrained decentralized Markov decision processes.",
                "In AAAI, pages 1089-1094, 2006. [6] C. Boutilier.",
                "Sequential optimality and coordination in multiagent systems.",
                "In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman.",
                "Exact solutions to time-dependent MDPs.",
                "In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein.",
                "Optimizing information exchange in cooperative multi-agent systems, 2003. [9] L. Li and M. Littman.",
                "Lazy approximation for solving continuous finite-horizon MDPs.",
                "In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig.",
                "Risk-sensitive planning with one-switch utility functions: Value iteration.",
                "In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy.",
                "Coordinated plan management using multiagent MDPs.",
                "In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs.",
                "In IJCAI, pages 1758-1760, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Para obtener la línea de base para el \"rendimiento heurístico\", implementamos un solucionador óptimo globalmente, que encontró una verdadera recompensa total esperada para este dominio (Figura (6a)).rendimiento heurístico"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "multi-agent system": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of agent-coordination problems in domains with uncertainty and time constraints but very difficult to solve.",
                "In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), combines two orthogonal improvements of OC-DEC-MDP.",
                "First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval.",
                "Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP.",
                "We test both improvements independently in a crisis-management domain as well as for other types of domains.",
                "Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage rescue mission [11] to the coordination of Autonomous Mars Exploration Rovers [2].",
                "Because of the uncertain and dynamic characteristics of such domains, decision-theoretic models have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time.",
                "Key decision-theoretic models that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs).",
                "Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research.",
                "In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses.",
                "Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks.",
                "To remedy that, locally optimal algorithms have been proposed [12] [4] [5].",
                "In particular, Opportunity Cost DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons.",
                "Additionally, OC-DEC-MDP is unique in its ability to address both temporal constraints and uncertain method execution durations, which is an important factor for real-world domains.",
                "OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous policy iteration.",
                "However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values.",
                "The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval.",
                "Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods.",
                "This reward, also referred to as the opportunity cost, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies.",
                "In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with temporal constraints and uncertain method execution durations, that builds on the success of OC-DEC-MDP.",
                "VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval.",
                "Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions.",
                "Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the opportunity cost, and to remedy that, we introduce a set of heuristics, that correct the opportunity cost overestimation problem.",
                "This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building.",
                "In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers.",
                "Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements.",
                "Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the opportunity cost overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2.",
                "MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome.",
                "One example domain is large-scale disaster, like a fire in a skyscraper.",
                "Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless.",
                "In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations.",
                "Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 .",
                "General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading.",
                "The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B.",
                "As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3).",
                "Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc.",
                "We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B.",
                "One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians.",
                "If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians.",
                "In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan.",
                "Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B.",
                "Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3.",
                "MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 .",
                "Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents.",
                "Agents cannot communicate during mission execution.",
                "Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø.",
                "Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time.",
                "Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations.",
                "In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of temporal constraints in the system.",
                "Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints.",
                "For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates.",
                "In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints.",
                "We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system.",
                "For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints.",
                "Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline.",
                "Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi.",
                "Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents.",
                "Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W).",
                "In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + .",
                "In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution.",
                "Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled.",
                "The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a.",
                "A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4.",
                "SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used.",
                "Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}.",
                "This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ .",
                "Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11].",
                "The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used.",
                "However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising.",
                "Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods.",
                "The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible.",
                "At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ].",
                "It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ].",
                "This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration.",
                "We call this step a value propagation phase.",
                "Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π .",
                "It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods.",
                "We call this step a probability propagation phase.",
                "If policy π does not improve π, the algorithm terminates.",
                "There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper.",
                "First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed.",
                "While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 .",
                "Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow.",
                "Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods.",
                "As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again.",
                "As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences.",
                "In the next two sections, we address both of these shortcomings. 5.",
                "VALUE FUNCTION PROPAGATION (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase.",
                "However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the value function propagation phase and the probability function propagation phase.",
                "To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. Opportunity Cost Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled.",
                "Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future.",
                "Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise.",
                "We now develop an analytical technique for performing the value function and probability function propagation phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 Value Function Propagation Phase Suppose, that we are performing a value function propagation phase during which the value functions are propagated from the sink methods to the source methods.",
                "At any time during this phase we encounter a situation shown in Figure 2, where opportunity cost functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the opportunity cost Vi0 of method mi0 is to be derived.",
                "Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ].",
                "The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods.",
                "Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t).",
                "Assume for now, that Vjn,i0 represents a full opportunity cost, postponing the discussion on different techniques for splitting the opportunity cost Vj0 into [Vj0,ik ]K k=0 until section 6.",
                "We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme).",
                "Figure 2: Fragment of an MDP of agent Ak.",
                "Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left).",
                "Let V j0,i0 (t) be the opportunity cost of starting the execution of method mj0 at time t given that method mi0 has been completed.",
                "It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 .",
                "Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t).",
                "Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1.",
                "Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable.",
                "Therefore the opportunity cost Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 .",
                "Furthermore, Vj0,i0 should be non-increasing.",
                "Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }.",
                "Knowing the opportunity cost Vi0 , we can then easily derive the value function vi0 .",
                "Let Ak be an agent assigned to the method mi0 .",
                "If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 .",
                "Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 .",
                "Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored.",
                "We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 .",
                "In general, the value function propagation scheme starts with sink nodes.",
                "It then visits at each time a method m, such that all the methods that m enables have already been marked as visited.",
                "The value function propagation phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 Probability Function Propagation Phase Assume now, that value functions and opportunity cost values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified.",
                "Since value function propagation phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration.",
                "We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived.",
                "Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last value function propagation phase.",
                "If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise.",
                "Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t .",
                "We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 .",
                "The general, the probability function propagation phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default.",
                "We then visit at each time a method m such that all the methods that enable The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited.",
                "The probability function propagation phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 .",
                "Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1.",
                "These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm.",
                "Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and probability function propagation without choosing any function representation.",
                "In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation.",
                "However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions.",
                "When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t).",
                "If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does.",
                "As a result, instead of performing O(Δ2 ) multiplications to compute f(t), VFP only needs to perform O(k · Δ) multiplications to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ).",
                "Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P .",
                "We now prove that the overall approximation error accumulated during the value function propagation phase can be expressed in terms of P and V : THEOREM 1.",
                "Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively.",
                "The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of value function propagation phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri .",
                "PROOF.",
                "In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of probability function propagation phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1.",
                "Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1.",
                "Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1.",
                "We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ).",
                "Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1.",
                "Thus, if opportunity cost functions are not overestimated, they are bounded by P mi∈M ri and the error of a single value function propagation operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri.",
                "Since the number of value function propagation operations is |C≺|, the total error π of the value function propagation phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6.",
                "SPLITTING THE OPPORTUNITY COST FUNCTIONS In section 5 we left out the discussion about how the opportunity cost function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 .",
                "So far, we have taken the same approach as in [4] and [5] in that the opportunity cost function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t).",
                "We refer to this approach, as heuristic H 1,1 .",
                "Before we prove that this heuristic overestimates the opportunity cost, we discuss three problems that might occur when splitting the opportunity cost functions: (i) overestimation, (ii) underestimation and (iii) starvation.",
                "Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when value function propagation for methods [mik ]K k=0 is performed.",
                "For each k = 0, ..., K, Equation (1) derives the opportunity cost function Vik from immediate reward rk and opportunity cost function Vj0,ik .",
                "If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the opportunity cost for completing the method m0 at time t is equal to PK k=0 Vik,0(t).",
                "If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later.",
                "As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences.",
                "Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0.",
                "Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences.",
                "Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the opportunity cost of enabling method mj0 , and the similar reasoning applies.",
                "We call such problem a starvation of method mk.",
                "That short discussion shows the importance of splitting the opportunity cost function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided.",
                "We now prove that: THEOREM 2.",
                "Heuristic H 1,1 can overestimate the opportunity cost.",
                "PROOF.",
                "We prove the theorem by showing a case where the overestimation occurs.",
                "For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively.",
                "Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of opportunity cost, we must identify t0 ∈ [0, ..., Δ] such that the opportunity cost PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t).",
                "From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing.",
                "Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) .",
                "Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the opportunity cost PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice.",
                "To remedy the problem of opportunity cost overestimation, we propose three alternative heuristics that split the opportunity cost functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 .",
                "To avoid opportunity cost overestimation, we normalize the split functions when their sum exceeds the opportunity cost function to be split.",
                "Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t).",
                "For the new heuristics, we now prove, that: THEOREM 3.",
                "Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the opportunity cost.",
                "PROOF.",
                "When heuristic H 1,0 is used to split the opportunity cost function Vj0 , only one method (e.g. mik ) gets the opportunity cost for enabling method mj0 .",
                "Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing.",
                "For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t).",
                "For heuristic bH 1,1 , the opportunity cost function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t).",
                "Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the opportunity cost.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the opportunity cost, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does.",
                "However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation.",
                "Starvation can be avoided if opportunity cost functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods.",
                "However, the sum of split opportunity cost functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split opportunity cost function for the H 1,0 heuristic, which is clearly undesirable.",
                "Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7.",
                "EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations.",
                "Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.",
                "Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100).",
                "We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400.",
                "We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost.",
                "The first graph confirms, that when the opportunity cost function Vj0 was split into opportunity cost functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function.",
                "In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%.",
                "When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 .",
                "We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)).",
                "To obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)).",
                "We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.",
                "Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.",
                "Part 2: We then chose H 1,1 to split the opportunity cost functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark.",
                "We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.",
                "Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200.",
                "We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm.",
                "We then run both algorithms for a total of 100 policy improvement iterations.",
                "Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).",
                "As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%.",
                "For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP.",
                "We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)).",
                "We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.",
                "We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).",
                "As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP.",
                "We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)).",
                "In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400.",
                "We show the results in Figure (7b).",
                "Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%.",
                "We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1.",
                "In particular, we consider 836 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting.",
                "Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods.",
                "For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially.",
                "We therefore vary the time horizons from 3000 to 4000, and then to 5000.",
                "We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8.",
                "CONCLUSIONS Decentralized Markov Decision Process (DEC-MDP) has been very popular for modeling of agent-coordination problems, it is very difficult to solve, especially for the real-world domains.",
                "In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the opportunity cost of OC-DEC-MDP.",
                "In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4].",
                "Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with temporal constraints [1] [11].",
                "Unfortunately, they fail to scale up to large-scale domains at present time.",
                "Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and temporal constraints.",
                "Finally, value function techniques have been studied in context of single agent MDPs [7] [9].",
                "However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning.",
                "Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No.",
                "FA875005C0030.",
                "The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9.",
                "REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein.",
                "Decentralized MDPs with Event-Driven Interactions.",
                "In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman.",
                "Transition-Independent Decentralized Markov Decision Processes.",
                "In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of Markov decision processes.",
                "In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib.",
                "A polynomial algorithm for decentralized Markov decision processes with temporal constraints.",
                "In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib.",
                "An iterative algorithm for solving constrained decentralized Markov decision processes.",
                "In AAAI, pages 1089-1094, 2006. [6] C. Boutilier.",
                "Sequential optimality and coordination in multiagent systems.",
                "In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman.",
                "Exact solutions to time-dependent MDPs.",
                "In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein.",
                "Optimizing information exchange in cooperative <br>multi-agent system</br>s, 2003. [9] L. Li and M. Littman.",
                "Lazy approximation for solving continuous finite-horizon MDPs.",
                "In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig.",
                "Risk-sensitive planning with one-switch utility functions: Value iteration.",
                "In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy.",
                "Coordinated plan management using multiagent MDPs.",
                "In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs.",
                "In IJCAI, pages 1758-1760, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Optimización del intercambio de información en el \"sistema de múltiples agentes\" cooperativos S, 2003. [9] L. Li y M. Littman.sistema de múltiples agentes"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "decentralized markov decision process": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of agent-coordination problems in domains with uncertainty and time constraints but very difficult to solve.",
                "In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), combines two orthogonal improvements of OC-DEC-MDP.",
                "First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval.",
                "Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP.",
                "We test both improvements independently in a crisis-management domain as well as for other types of domains.",
                "Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage rescue mission [11] to the coordination of Autonomous Mars Exploration Rovers [2].",
                "Because of the uncertain and dynamic characteristics of such domains, decision-theoretic models have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time.",
                "Key decision-theoretic models that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs).",
                "Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research.",
                "In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses.",
                "Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks.",
                "To remedy that, locally optimal algorithms have been proposed [12] [4] [5].",
                "In particular, Opportunity Cost DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons.",
                "Additionally, OC-DEC-MDP is unique in its ability to address both temporal constraints and uncertain method execution durations, which is an important factor for real-world domains.",
                "OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous policy iteration.",
                "However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values.",
                "The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval.",
                "Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods.",
                "This reward, also referred to as the opportunity cost, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies.",
                "In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with temporal constraints and uncertain method execution durations, that builds on the success of OC-DEC-MDP.",
                "VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval.",
                "Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions.",
                "Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the opportunity cost, and to remedy that, we introduce a set of heuristics, that correct the opportunity cost overestimation problem.",
                "This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building.",
                "In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers.",
                "Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements.",
                "Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the opportunity cost overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2.",
                "MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome.",
                "One example domain is large-scale disaster, like a fire in a skyscraper.",
                "Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless.",
                "In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations.",
                "Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 .",
                "General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading.",
                "The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B.",
                "As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3).",
                "Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc.",
                "We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B.",
                "One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians.",
                "If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians.",
                "In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan.",
                "Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B.",
                "Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3.",
                "MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 .",
                "Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents.",
                "Agents cannot communicate during mission execution.",
                "Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø.",
                "Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time.",
                "Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations.",
                "In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of temporal constraints in the system.",
                "Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints.",
                "For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates.",
                "In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints.",
                "We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system.",
                "For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints.",
                "Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline.",
                "Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi.",
                "Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents.",
                "Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W).",
                "In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + .",
                "In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution.",
                "Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled.",
                "The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a.",
                "A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4.",
                "SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used.",
                "Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}.",
                "This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ .",
                "Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11].",
                "The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used.",
                "However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising.",
                "Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods.",
                "The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible.",
                "At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ].",
                "It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ].",
                "This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration.",
                "We call this step a value propagation phase.",
                "Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π .",
                "It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods.",
                "We call this step a probability propagation phase.",
                "If policy π does not improve π, the algorithm terminates.",
                "There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper.",
                "First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed.",
                "While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 .",
                "Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow.",
                "Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods.",
                "As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again.",
                "As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences.",
                "In the next two sections, we address both of these shortcomings. 5.",
                "VALUE FUNCTION PROPAGATION (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase.",
                "However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the value function propagation phase and the probability function propagation phase.",
                "To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. Opportunity Cost Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled.",
                "Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future.",
                "Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise.",
                "We now develop an analytical technique for performing the value function and probability function propagation phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 Value Function Propagation Phase Suppose, that we are performing a value function propagation phase during which the value functions are propagated from the sink methods to the source methods.",
                "At any time during this phase we encounter a situation shown in Figure 2, where opportunity cost functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the opportunity cost Vi0 of method mi0 is to be derived.",
                "Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ].",
                "The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods.",
                "Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t).",
                "Assume for now, that Vjn,i0 represents a full opportunity cost, postponing the discussion on different techniques for splitting the opportunity cost Vj0 into [Vj0,ik ]K k=0 until section 6.",
                "We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme).",
                "Figure 2: Fragment of an MDP of agent Ak.",
                "Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left).",
                "Let V j0,i0 (t) be the opportunity cost of starting the execution of method mj0 at time t given that method mi0 has been completed.",
                "It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 .",
                "Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t).",
                "Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1.",
                "Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable.",
                "Therefore the opportunity cost Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 .",
                "Furthermore, Vj0,i0 should be non-increasing.",
                "Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }.",
                "Knowing the opportunity cost Vi0 , we can then easily derive the value function vi0 .",
                "Let Ak be an agent assigned to the method mi0 .",
                "If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 .",
                "Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 .",
                "Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored.",
                "We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 .",
                "In general, the value function propagation scheme starts with sink nodes.",
                "It then visits at each time a method m, such that all the methods that m enables have already been marked as visited.",
                "The value function propagation phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 Probability Function Propagation Phase Assume now, that value functions and opportunity cost values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified.",
                "Since value function propagation phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration.",
                "We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived.",
                "Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last value function propagation phase.",
                "If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise.",
                "Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t .",
                "We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 .",
                "The general, the probability function propagation phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default.",
                "We then visit at each time a method m such that all the methods that enable The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited.",
                "The probability function propagation phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 .",
                "Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1.",
                "These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm.",
                "Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and probability function propagation without choosing any function representation.",
                "In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation.",
                "However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions.",
                "When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t).",
                "If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does.",
                "As a result, instead of performing O(Δ2 ) multiplications to compute f(t), VFP only needs to perform O(k · Δ) multiplications to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ).",
                "Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P .",
                "We now prove that the overall approximation error accumulated during the value function propagation phase can be expressed in terms of P and V : THEOREM 1.",
                "Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively.",
                "The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of value function propagation phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri .",
                "PROOF.",
                "In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of probability function propagation phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1.",
                "Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1.",
                "Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1.",
                "We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ).",
                "Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1.",
                "Thus, if opportunity cost functions are not overestimated, they are bounded by P mi∈M ri and the error of a single value function propagation operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri.",
                "Since the number of value function propagation operations is |C≺|, the total error π of the value function propagation phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6.",
                "SPLITTING THE OPPORTUNITY COST FUNCTIONS In section 5 we left out the discussion about how the opportunity cost function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 .",
                "So far, we have taken the same approach as in [4] and [5] in that the opportunity cost function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t).",
                "We refer to this approach, as heuristic H 1,1 .",
                "Before we prove that this heuristic overestimates the opportunity cost, we discuss three problems that might occur when splitting the opportunity cost functions: (i) overestimation, (ii) underestimation and (iii) starvation.",
                "Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when value function propagation for methods [mik ]K k=0 is performed.",
                "For each k = 0, ..., K, Equation (1) derives the opportunity cost function Vik from immediate reward rk and opportunity cost function Vj0,ik .",
                "If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the opportunity cost for completing the method m0 at time t is equal to PK k=0 Vik,0(t).",
                "If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later.",
                "As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences.",
                "Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0.",
                "Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences.",
                "Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the opportunity cost of enabling method mj0 , and the similar reasoning applies.",
                "We call such problem a starvation of method mk.",
                "That short discussion shows the importance of splitting the opportunity cost function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided.",
                "We now prove that: THEOREM 2.",
                "Heuristic H 1,1 can overestimate the opportunity cost.",
                "PROOF.",
                "We prove the theorem by showing a case where the overestimation occurs.",
                "For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively.",
                "Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of opportunity cost, we must identify t0 ∈ [0, ..., Δ] such that the opportunity cost PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t).",
                "From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing.",
                "Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) .",
                "Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the opportunity cost PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice.",
                "To remedy the problem of opportunity cost overestimation, we propose three alternative heuristics that split the opportunity cost functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 .",
                "To avoid opportunity cost overestimation, we normalize the split functions when their sum exceeds the opportunity cost function to be split.",
                "Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t).",
                "For the new heuristics, we now prove, that: THEOREM 3.",
                "Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the opportunity cost.",
                "PROOF.",
                "When heuristic H 1,0 is used to split the opportunity cost function Vj0 , only one method (e.g. mik ) gets the opportunity cost for enabling method mj0 .",
                "Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing.",
                "For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t).",
                "For heuristic bH 1,1 , the opportunity cost function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t).",
                "Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the opportunity cost.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the opportunity cost, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does.",
                "However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation.",
                "Starvation can be avoided if opportunity cost functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods.",
                "However, the sum of split opportunity cost functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split opportunity cost function for the H 1,0 heuristic, which is clearly undesirable.",
                "Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7.",
                "EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations.",
                "Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.",
                "Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100).",
                "We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400.",
                "We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost.",
                "The first graph confirms, that when the opportunity cost function Vj0 was split into opportunity cost functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function.",
                "In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%.",
                "When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 .",
                "We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)).",
                "To obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)).",
                "We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.",
                "Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.",
                "Part 2: We then chose H 1,1 to split the opportunity cost functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark.",
                "We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.",
                "Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200.",
                "We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm.",
                "We then run both algorithms for a total of 100 policy improvement iterations.",
                "Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).",
                "As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%.",
                "For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP.",
                "We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)).",
                "We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.",
                "We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).",
                "As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP.",
                "We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)).",
                "In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400.",
                "We show the results in Figure (7b).",
                "Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%.",
                "We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1.",
                "In particular, we consider 836 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting.",
                "Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods.",
                "For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially.",
                "We therefore vary the time horizons from 3000 to 4000, and then to 5000.",
                "We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8.",
                "CONCLUSIONS <br>decentralized markov decision process</br> (DEC-MDP) has been very popular for modeling of agent-coordination problems, it is very difficult to solve, especially for the real-world domains.",
                "In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the opportunity cost of OC-DEC-MDP.",
                "In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4].",
                "Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with temporal constraints [1] [11].",
                "Unfortunately, they fail to scale up to large-scale domains at present time.",
                "Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and temporal constraints.",
                "Finally, value function techniques have been studied in context of single agent MDPs [7] [9].",
                "However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning.",
                "Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No.",
                "FA875005C0030.",
                "The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9.",
                "REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein.",
                "Decentralized MDPs with Event-Driven Interactions.",
                "In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman.",
                "Transition-Independent Decentralized Markov Decision Processes.",
                "In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of Markov decision processes.",
                "In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib.",
                "A polynomial algorithm for decentralized Markov decision processes with temporal constraints.",
                "In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib.",
                "An iterative algorithm for solving constrained decentralized Markov decision processes.",
                "In AAAI, pages 1089-1094, 2006. [6] C. Boutilier.",
                "Sequential optimality and coordination in multiagent systems.",
                "In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman.",
                "Exact solutions to time-dependent MDPs.",
                "In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein.",
                "Optimizing information exchange in cooperative multi-agent systems, 2003. [9] L. Li and M. Littman.",
                "Lazy approximation for solving continuous finite-horizon MDPs.",
                "In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig.",
                "Risk-sensitive planning with one-switch utility functions: Value iteration.",
                "In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy.",
                "Coordinated plan management using multiagent MDPs.",
                "In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs.",
                "In IJCAI, pages 1758-1760, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Conclusiones \"El proceso de decisión descentralizado de Markov\" (DEC-MDP) ha sido muy popular para el modelado de problemas de coordinación de agentes, es muy difícil de resolver, especialmente para los dominios del mundo real.proceso de decisión descentralizado de Markov"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "temporal constraint": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of agent-coordination problems in domains with uncertainty and time constraints but very difficult to solve.",
                "In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), combines two orthogonal improvements of OC-DEC-MDP.",
                "First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval.",
                "Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP.",
                "We test both improvements independently in a crisis-management domain as well as for other types of domains.",
                "Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage rescue mission [11] to the coordination of Autonomous Mars Exploration Rovers [2].",
                "Because of the uncertain and dynamic characteristics of such domains, decision-theoretic models have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time.",
                "Key decision-theoretic models that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs).",
                "Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research.",
                "In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses.",
                "Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks.",
                "To remedy that, locally optimal algorithms have been proposed [12] [4] [5].",
                "In particular, Opportunity Cost DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons.",
                "Additionally, OC-DEC-MDP is unique in its ability to address both <br>temporal constraint</br>s and uncertain method execution durations, which is an important factor for real-world domains.",
                "OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous policy iteration.",
                "However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values.",
                "The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval.",
                "Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods.",
                "This reward, also referred to as the opportunity cost, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies.",
                "In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with <br>temporal constraint</br>s and uncertain method execution durations, that builds on the success of OC-DEC-MDP.",
                "VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval.",
                "Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions.",
                "Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the opportunity cost, and to remedy that, we introduce a set of heuristics, that correct the opportunity cost overestimation problem.",
                "This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building.",
                "In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers.",
                "Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements.",
                "Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the opportunity cost overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2.",
                "MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome.",
                "One example domain is large-scale disaster, like a fire in a skyscraper.",
                "Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless.",
                "In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations.",
                "Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 .",
                "General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading.",
                "The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B.",
                "As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3).",
                "Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc.",
                "We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B.",
                "One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians.",
                "If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians.",
                "In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan.",
                "Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B.",
                "Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3.",
                "MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 .",
                "Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents.",
                "Agents cannot communicate during mission execution.",
                "Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø.",
                "Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time.",
                "Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations.",
                "In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of <br>temporal constraint</br>s in the system.",
                "Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints.",
                "For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates.",
                "In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints.",
                "We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system.",
                "For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints.",
                "Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline.",
                "Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi.",
                "Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents.",
                "Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W).",
                "In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + .",
                "In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution.",
                "Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled.",
                "The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a.",
                "A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4.",
                "SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used.",
                "Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}.",
                "This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ .",
                "Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11].",
                "The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used.",
                "However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising.",
                "Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods.",
                "The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible.",
                "At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ].",
                "It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ].",
                "This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration.",
                "We call this step a value propagation phase.",
                "Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π .",
                "It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods.",
                "We call this step a probability propagation phase.",
                "If policy π does not improve π, the algorithm terminates.",
                "There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper.",
                "First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed.",
                "While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 .",
                "Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow.",
                "Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods.",
                "As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again.",
                "As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences.",
                "In the next two sections, we address both of these shortcomings. 5.",
                "VALUE FUNCTION PROPAGATION (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase.",
                "However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the value function propagation phase and the probability function propagation phase.",
                "To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. Opportunity Cost Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled.",
                "Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future.",
                "Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise.",
                "We now develop an analytical technique for performing the value function and probability function propagation phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 Value Function Propagation Phase Suppose, that we are performing a value function propagation phase during which the value functions are propagated from the sink methods to the source methods.",
                "At any time during this phase we encounter a situation shown in Figure 2, where opportunity cost functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the opportunity cost Vi0 of method mi0 is to be derived.",
                "Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ].",
                "The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods.",
                "Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t).",
                "Assume for now, that Vjn,i0 represents a full opportunity cost, postponing the discussion on different techniques for splitting the opportunity cost Vj0 into [Vj0,ik ]K k=0 until section 6.",
                "We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme).",
                "Figure 2: Fragment of an MDP of agent Ak.",
                "Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left).",
                "Let V j0,i0 (t) be the opportunity cost of starting the execution of method mj0 at time t given that method mi0 has been completed.",
                "It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 .",
                "Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t).",
                "Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1.",
                "Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable.",
                "Therefore the opportunity cost Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 .",
                "Furthermore, Vj0,i0 should be non-increasing.",
                "Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }.",
                "Knowing the opportunity cost Vi0 , we can then easily derive the value function vi0 .",
                "Let Ak be an agent assigned to the method mi0 .",
                "If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 .",
                "Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 .",
                "Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored.",
                "We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 .",
                "In general, the value function propagation scheme starts with sink nodes.",
                "It then visits at each time a method m, such that all the methods that m enables have already been marked as visited.",
                "The value function propagation phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 Probability Function Propagation Phase Assume now, that value functions and opportunity cost values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified.",
                "Since value function propagation phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration.",
                "We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived.",
                "Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last value function propagation phase.",
                "If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise.",
                "Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t .",
                "We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 .",
                "The general, the probability function propagation phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default.",
                "We then visit at each time a method m such that all the methods that enable The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited.",
                "The probability function propagation phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 .",
                "Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1.",
                "These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm.",
                "Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and probability function propagation without choosing any function representation.",
                "In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation.",
                "However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions.",
                "When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t).",
                "If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does.",
                "As a result, instead of performing O(Δ2 ) multiplications to compute f(t), VFP only needs to perform O(k · Δ) multiplications to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ).",
                "Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P .",
                "We now prove that the overall approximation error accumulated during the value function propagation phase can be expressed in terms of P and V : THEOREM 1.",
                "Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively.",
                "The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of value function propagation phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri .",
                "PROOF.",
                "In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of probability function propagation phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1.",
                "Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1.",
                "Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1.",
                "We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ).",
                "Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1.",
                "Thus, if opportunity cost functions are not overestimated, they are bounded by P mi∈M ri and the error of a single value function propagation operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri.",
                "Since the number of value function propagation operations is |C≺|, the total error π of the value function propagation phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6.",
                "SPLITTING THE OPPORTUNITY COST FUNCTIONS In section 5 we left out the discussion about how the opportunity cost function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 .",
                "So far, we have taken the same approach as in [4] and [5] in that the opportunity cost function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t).",
                "We refer to this approach, as heuristic H 1,1 .",
                "Before we prove that this heuristic overestimates the opportunity cost, we discuss three problems that might occur when splitting the opportunity cost functions: (i) overestimation, (ii) underestimation and (iii) starvation.",
                "Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when value function propagation for methods [mik ]K k=0 is performed.",
                "For each k = 0, ..., K, Equation (1) derives the opportunity cost function Vik from immediate reward rk and opportunity cost function Vj0,ik .",
                "If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the opportunity cost for completing the method m0 at time t is equal to PK k=0 Vik,0(t).",
                "If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later.",
                "As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences.",
                "Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0.",
                "Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences.",
                "Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the opportunity cost of enabling method mj0 , and the similar reasoning applies.",
                "We call such problem a starvation of method mk.",
                "That short discussion shows the importance of splitting the opportunity cost function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided.",
                "We now prove that: THEOREM 2.",
                "Heuristic H 1,1 can overestimate the opportunity cost.",
                "PROOF.",
                "We prove the theorem by showing a case where the overestimation occurs.",
                "For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively.",
                "Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of opportunity cost, we must identify t0 ∈ [0, ..., Δ] such that the opportunity cost PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t).",
                "From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing.",
                "Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) .",
                "Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the opportunity cost PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice.",
                "To remedy the problem of opportunity cost overestimation, we propose three alternative heuristics that split the opportunity cost functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 .",
                "To avoid opportunity cost overestimation, we normalize the split functions when their sum exceeds the opportunity cost function to be split.",
                "Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t).",
                "For the new heuristics, we now prove, that: THEOREM 3.",
                "Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the opportunity cost.",
                "PROOF.",
                "When heuristic H 1,0 is used to split the opportunity cost function Vj0 , only one method (e.g. mik ) gets the opportunity cost for enabling method mj0 .",
                "Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing.",
                "For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t).",
                "For heuristic bH 1,1 , the opportunity cost function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t).",
                "Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the opportunity cost.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the opportunity cost, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does.",
                "However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation.",
                "Starvation can be avoided if opportunity cost functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods.",
                "However, the sum of split opportunity cost functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split opportunity cost function for the H 1,0 heuristic, which is clearly undesirable.",
                "Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7.",
                "EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations.",
                "Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.",
                "Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100).",
                "We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400.",
                "We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost.",
                "The first graph confirms, that when the opportunity cost function Vj0 was split into opportunity cost functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function.",
                "In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%.",
                "When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 .",
                "We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)).",
                "To obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)).",
                "We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.",
                "Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.",
                "Part 2: We then chose H 1,1 to split the opportunity cost functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark.",
                "We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.",
                "Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200.",
                "We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm.",
                "We then run both algorithms for a total of 100 policy improvement iterations.",
                "Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).",
                "As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%.",
                "For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP.",
                "We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)).",
                "We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.",
                "We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).",
                "As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP.",
                "We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)).",
                "In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400.",
                "We show the results in Figure (7b).",
                "Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%.",
                "We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1.",
                "In particular, we consider 836 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting.",
                "Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods.",
                "For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially.",
                "We therefore vary the time horizons from 3000 to 4000, and then to 5000.",
                "We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8.",
                "CONCLUSIONS Decentralized Markov Decision Process (DEC-MDP) has been very popular for modeling of agent-coordination problems, it is very difficult to solve, especially for the real-world domains.",
                "In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the opportunity cost of OC-DEC-MDP.",
                "In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4].",
                "Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with <br>temporal constraint</br>s [1] [11].",
                "Unfortunately, they fail to scale up to large-scale domains at present time.",
                "Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and <br>temporal constraint</br>s.",
                "Finally, value function techniques have been studied in context of single agent MDPs [7] [9].",
                "However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning.",
                "Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No.",
                "FA875005C0030.",
                "The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9.",
                "REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein.",
                "Decentralized MDPs with Event-Driven Interactions.",
                "In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman.",
                "Transition-Independent Decentralized Markov Decision Processes.",
                "In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of Markov decision processes.",
                "In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib.",
                "A polynomial algorithm for decentralized Markov decision processes with <br>temporal constraint</br>s.",
                "In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib.",
                "An iterative algorithm for solving constrained decentralized Markov decision processes.",
                "In AAAI, pages 1089-1094, 2006. [6] C. Boutilier.",
                "Sequential optimality and coordination in multiagent systems.",
                "In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman.",
                "Exact solutions to time-dependent MDPs.",
                "In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein.",
                "Optimizing information exchange in cooperative multi-agent systems, 2003. [9] L. Li and M. Littman.",
                "Lazy approximation for solving continuous finite-horizon MDPs.",
                "In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig.",
                "Risk-sensitive planning with one-switch utility functions: Value iteration.",
                "In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy.",
                "Coordinated plan management using multiagent MDPs.",
                "In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs.",
                "In IJCAI, pages 1758-1760, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Además, OC-DEC-MDP es único en su capacidad para abordar tanto la \"restricción temporal\" como las duraciones de ejecución de métodos inciertos, que es un factor importante para los dominios del mundo real.restricción temporal",
                "En este contexto, presentamos VFP (= valor de la función de valor), una técnica de solución eficiente para el modelo DEC-MDP con \"restricción temporal\" y duraciones de ejecución de métodos inciertos, que se basa en el éxito de OC-DEC-MDP.restricción temporal",
                "En particular, Pi (t) es la probabilidad de que la ejecución del método mi consuma tiempo t.C es un conjunto de \"restricción temporal\" en el sistema.restricción temporal",
                "Además, como se discutió en la Sección 4, hay algoritmos globalmente óptimos para resolver Dec-MDP con \"restricción temporal\" s [1] [11].restricción temporal",
                "Más allá de OC-DEC-MDP, existen otros algoritmos localmente óptimos para DEC-MDP y DECPOMDPS [8] [12], [13], sin embargo, tradicionalmente no han tratado con tiempos de ejecución inciertos y \"restricción temporal\".restricción temporal",
                "Un algoritmo polinomial para los procesos descentralizados de decisión de Markov con \"restricción temporal\" s.restricción temporal"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "locally optimal solution": {
            "translated_key": "",
            "is_in_text": false,
            "original_annotated_sentences": [
                "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of agent-coordination problems in domains with uncertainty and time constraints but very difficult to solve.",
                "In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), combines two orthogonal improvements of OC-DEC-MDP.",
                "First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval.",
                "Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP.",
                "We test both improvements independently in a crisis-management domain as well as for other types of domains.",
                "Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage rescue mission [11] to the coordination of Autonomous Mars Exploration Rovers [2].",
                "Because of the uncertain and dynamic characteristics of such domains, decision-theoretic models have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time.",
                "Key decision-theoretic models that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs).",
                "Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research.",
                "In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses.",
                "Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks.",
                "To remedy that, locally optimal algorithms have been proposed [12] [4] [5].",
                "In particular, Opportunity Cost DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons.",
                "Additionally, OC-DEC-MDP is unique in its ability to address both temporal constraints and uncertain method execution durations, which is an important factor for real-world domains.",
                "OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous policy iteration.",
                "However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values.",
                "The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval.",
                "Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods.",
                "This reward, also referred to as the opportunity cost, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies.",
                "In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with temporal constraints and uncertain method execution durations, that builds on the success of OC-DEC-MDP.",
                "VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval.",
                "Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions.",
                "Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the opportunity cost, and to remedy that, we introduce a set of heuristics, that correct the opportunity cost overestimation problem.",
                "This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building.",
                "In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers.",
                "Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements.",
                "Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the opportunity cost overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2.",
                "MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome.",
                "One example domain is large-scale disaster, like a fire in a skyscraper.",
                "Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless.",
                "In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations.",
                "Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 .",
                "General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading.",
                "The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B.",
                "As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3).",
                "Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc.",
                "We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B.",
                "One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians.",
                "If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians.",
                "In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan.",
                "Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B.",
                "Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3.",
                "MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 .",
                "Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents.",
                "Agents cannot communicate during mission execution.",
                "Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø.",
                "Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time.",
                "Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations.",
                "In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of temporal constraints in the system.",
                "Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints.",
                "For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates.",
                "In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints.",
                "We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system.",
                "For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints.",
                "Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline.",
                "Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi.",
                "Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents.",
                "Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W).",
                "In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + .",
                "In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution.",
                "Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled.",
                "The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a.",
                "A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4.",
                "SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used.",
                "Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}.",
                "This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ .",
                "Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11].",
                "The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used.",
                "However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising.",
                "Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods.",
                "The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible.",
                "At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ].",
                "It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ].",
                "This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration.",
                "We call this step a value propagation phase.",
                "Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π .",
                "It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods.",
                "We call this step a probability propagation phase.",
                "If policy π does not improve π, the algorithm terminates.",
                "There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper.",
                "First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed.",
                "While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 .",
                "Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow.",
                "Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods.",
                "As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again.",
                "As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences.",
                "In the next two sections, we address both of these shortcomings. 5.",
                "VALUE FUNCTION PROPAGATION (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase.",
                "However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the value function propagation phase and the probability function propagation phase.",
                "To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. Opportunity Cost Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled.",
                "Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future.",
                "Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise.",
                "We now develop an analytical technique for performing the value function and probability function propagation phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 Value Function Propagation Phase Suppose, that we are performing a value function propagation phase during which the value functions are propagated from the sink methods to the source methods.",
                "At any time during this phase we encounter a situation shown in Figure 2, where opportunity cost functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the opportunity cost Vi0 of method mi0 is to be derived.",
                "Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ].",
                "The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods.",
                "Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t).",
                "Assume for now, that Vjn,i0 represents a full opportunity cost, postponing the discussion on different techniques for splitting the opportunity cost Vj0 into [Vj0,ik ]K k=0 until section 6.",
                "We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme).",
                "Figure 2: Fragment of an MDP of agent Ak.",
                "Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left).",
                "Let V j0,i0 (t) be the opportunity cost of starting the execution of method mj0 at time t given that method mi0 has been completed.",
                "It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 .",
                "Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t).",
                "Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1.",
                "Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable.",
                "Therefore the opportunity cost Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 .",
                "Furthermore, Vj0,i0 should be non-increasing.",
                "Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }.",
                "Knowing the opportunity cost Vi0 , we can then easily derive the value function vi0 .",
                "Let Ak be an agent assigned to the method mi0 .",
                "If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 .",
                "Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 .",
                "Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored.",
                "We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 .",
                "In general, the value function propagation scheme starts with sink nodes.",
                "It then visits at each time a method m, such that all the methods that m enables have already been marked as visited.",
                "The value function propagation phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 Probability Function Propagation Phase Assume now, that value functions and opportunity cost values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified.",
                "Since value function propagation phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration.",
                "We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived.",
                "Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last value function propagation phase.",
                "If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise.",
                "Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t .",
                "We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 .",
                "The general, the probability function propagation phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default.",
                "We then visit at each time a method m such that all the methods that enable The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited.",
                "The probability function propagation phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 .",
                "Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1.",
                "These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm.",
                "Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and probability function propagation without choosing any function representation.",
                "In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation.",
                "However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions.",
                "When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t).",
                "If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does.",
                "As a result, instead of performing O(Δ2 ) multiplications to compute f(t), VFP only needs to perform O(k · Δ) multiplications to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ).",
                "Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P .",
                "We now prove that the overall approximation error accumulated during the value function propagation phase can be expressed in terms of P and V : THEOREM 1.",
                "Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively.",
                "The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of value function propagation phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri .",
                "PROOF.",
                "In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of probability function propagation phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1.",
                "Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1.",
                "Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1.",
                "We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ).",
                "Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1.",
                "Thus, if opportunity cost functions are not overestimated, they are bounded by P mi∈M ri and the error of a single value function propagation operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri.",
                "Since the number of value function propagation operations is |C≺|, the total error π of the value function propagation phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6.",
                "SPLITTING THE OPPORTUNITY COST FUNCTIONS In section 5 we left out the discussion about how the opportunity cost function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 .",
                "So far, we have taken the same approach as in [4] and [5] in that the opportunity cost function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t).",
                "We refer to this approach, as heuristic H 1,1 .",
                "Before we prove that this heuristic overestimates the opportunity cost, we discuss three problems that might occur when splitting the opportunity cost functions: (i) overestimation, (ii) underestimation and (iii) starvation.",
                "Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when value function propagation for methods [mik ]K k=0 is performed.",
                "For each k = 0, ..., K, Equation (1) derives the opportunity cost function Vik from immediate reward rk and opportunity cost function Vj0,ik .",
                "If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the opportunity cost for completing the method m0 at time t is equal to PK k=0 Vik,0(t).",
                "If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later.",
                "As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences.",
                "Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0.",
                "Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences.",
                "Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the opportunity cost of enabling method mj0 , and the similar reasoning applies.",
                "We call such problem a starvation of method mk.",
                "That short discussion shows the importance of splitting the opportunity cost function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided.",
                "We now prove that: THEOREM 2.",
                "Heuristic H 1,1 can overestimate the opportunity cost.",
                "PROOF.",
                "We prove the theorem by showing a case where the overestimation occurs.",
                "For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively.",
                "Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of opportunity cost, we must identify t0 ∈ [0, ..., Δ] such that the opportunity cost PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t).",
                "From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing.",
                "Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) .",
                "Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the opportunity cost PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice.",
                "To remedy the problem of opportunity cost overestimation, we propose three alternative heuristics that split the opportunity cost functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 .",
                "To avoid opportunity cost overestimation, we normalize the split functions when their sum exceeds the opportunity cost function to be split.",
                "Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t).",
                "For the new heuristics, we now prove, that: THEOREM 3.",
                "Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the opportunity cost.",
                "PROOF.",
                "When heuristic H 1,0 is used to split the opportunity cost function Vj0 , only one method (e.g. mik ) gets the opportunity cost for enabling method mj0 .",
                "Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing.",
                "For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t).",
                "For heuristic bH 1,1 , the opportunity cost function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t).",
                "Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the opportunity cost.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the opportunity cost, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does.",
                "However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation.",
                "Starvation can be avoided if opportunity cost functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods.",
                "However, the sum of split opportunity cost functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split opportunity cost function for the H 1,0 heuristic, which is clearly undesirable.",
                "Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7.",
                "EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations.",
                "Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.",
                "Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100).",
                "We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400.",
                "We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost.",
                "The first graph confirms, that when the opportunity cost function Vj0 was split into opportunity cost functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function.",
                "In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%.",
                "When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 .",
                "We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)).",
                "To obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)).",
                "We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.",
                "Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.",
                "Part 2: We then chose H 1,1 to split the opportunity cost functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark.",
                "We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.",
                "Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200.",
                "We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm.",
                "We then run both algorithms for a total of 100 policy improvement iterations.",
                "Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).",
                "As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%.",
                "For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP.",
                "We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)).",
                "We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.",
                "We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).",
                "As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP.",
                "We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)).",
                "In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400.",
                "We show the results in Figure (7b).",
                "Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%.",
                "We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1.",
                "In particular, we consider 836 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting.",
                "Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods.",
                "For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially.",
                "We therefore vary the time horizons from 3000 to 4000, and then to 5000.",
                "We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8.",
                "CONCLUSIONS Decentralized Markov Decision Process (DEC-MDP) has been very popular for modeling of agent-coordination problems, it is very difficult to solve, especially for the real-world domains.",
                "In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the opportunity cost of OC-DEC-MDP.",
                "In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4].",
                "Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with temporal constraints [1] [11].",
                "Unfortunately, they fail to scale up to large-scale domains at present time.",
                "Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and temporal constraints.",
                "Finally, value function techniques have been studied in context of single agent MDPs [7] [9].",
                "However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning.",
                "Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No.",
                "FA875005C0030.",
                "The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9.",
                "REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein.",
                "Decentralized MDPs with Event-Driven Interactions.",
                "In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman.",
                "Transition-Independent Decentralized Markov Decision Processes.",
                "In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of Markov decision processes.",
                "In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib.",
                "A polynomial algorithm for decentralized Markov decision processes with temporal constraints.",
                "In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib.",
                "An iterative algorithm for solving constrained decentralized Markov decision processes.",
                "In AAAI, pages 1089-1094, 2006. [6] C. Boutilier.",
                "Sequential optimality and coordination in multiagent systems.",
                "In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman.",
                "Exact solutions to time-dependent MDPs.",
                "In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein.",
                "Optimizing information exchange in cooperative multi-agent systems, 2003. [9] L. Li and M. Littman.",
                "Lazy approximation for solving continuous finite-horizon MDPs.",
                "In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig.",
                "Risk-sensitive planning with one-switch utility functions: Value iteration.",
                "In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy.",
                "Coordinated plan management using multiagent MDPs.",
                "In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs.",
                "In IJCAI, pages 1758-1760, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "decentralize markov decision process": {
            "translated_key": "",
            "is_in_text": false,
            "original_annotated_sentences": [
                "On Opportunistic Techniques for Solving Decentralized Markov Decision Processes with Temporal Constraints Janusz Marecki and Milind Tambe Computer Science Department University of Southern California 941 W 37th Place, Los Angeles, CA 90089 {marecki, tambe}@usc.edu ABSTRACT Decentralized Markov Decision Processes (DEC-MDPs) are a popular model of agent-coordination problems in domains with uncertainty and time constraints but very difficult to solve.",
                "In this paper, we improve a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to larger DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), combines two orthogonal improvements of OC-DEC-MDP.",
                "First, it speeds up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each state (as a function of time) rather than a separate value for each pair of sate and time interval.",
                "Furthermore, it achieves better solution qualities than OC-DEC-MDP because, as our analytical results show, it does not overestimate the expected total reward like OC-DEC- MDP.",
                "We test both improvements independently in a crisis-management domain as well as for other types of domains.",
                "Our experimental results demonstrate a significant speedup of VFP over OC-DEC-MDP as well as higher solution qualities in a variety of situations.",
                "Categories and Subject Descriptors I.2.11 [Artificial Intelligence]: Distributed Artificial IntelligenceMulti-agent Systems General Terms Algorithms, Theory 1.",
                "INTRODUCTION The development of algorithms for effective coordination of multiple agents acting as a team in uncertain and time critical domains has recently become a very active research field with potential applications ranging from coordination of agents during a hostage rescue mission [11] to the coordination of Autonomous Mars Exploration Rovers [2].",
                "Because of the uncertain and dynamic characteristics of such domains, decision-theoretic models have received a lot of attention in recent years, mainly thanks to their expressiveness and the ability to reason about the utility of actions over time.",
                "Key decision-theoretic models that have become popular in the literature include Decentralized Markov Decision Processes (DECMDPs) and Decentralized, Partially Observable Markov Decision Processes (DEC-POMDPs).",
                "Unfortunately, solving these models optimally has been proven to be NEXP-complete [3], hence more tractable subclasses of these models have been the subject of intensive research.",
                "In particular, Network Distributed POMDP [13] which assume that not all the agents interact with each other, Transition Independent DEC-MDP [2] which assume that transition function is decomposable into local transition functions or DEC-MDP with Event Driven Interactions [1] which assume that interactions between agents happen at fixed time points constitute good examples of such subclasses.",
                "Although globally optimal algorithms for these subclasses have demonstrated promising results, domains on which these algorithms run are still small and time horizons are limited to only a few time ticks.",
                "To remedy that, locally optimal algorithms have been proposed [12] [4] [5].",
                "In particular, Opportunity Cost DEC-MDP [4] [5], referred to as OC-DEC-MDP, is particularly notable, as it has been shown to scale up to domains with hundreds of tasks and double digit time horizons.",
                "Additionally, OC-DEC-MDP is unique in its ability to address both temporal constraints and uncertain method execution durations, which is an important factor for real-world domains.",
                "OC-DEC-MDP is able to scale up to such domains mainly because instead of searching for the globally optimal solution, it carries out a series of policy iterations; in each iteration it performs a value iteration that reuses the data computed during the previous policy iteration.",
                "However, OC-DEC-MDP is still slow, especially as the time horizon and the number of methods approach large values.",
                "The reason for high runtimes of OC-DEC-MDP for such domains is a consequence of its huge state space, i.e., OC-DEC-MDP introduces a separate state for each possible pair of method and method execution interval.",
                "Furthermore, OC-DEC-MDP overestimates the reward that a method expects to receive for enabling the execution of future methods.",
                "This reward, also referred to as the opportunity cost, plays a crucial role in agent decision making, and as we show later, its overestimation leads to highly suboptimal policies.",
                "In this context, we present VFP (= Value Function P ropagation), an efficient solution technique for the DEC-MDP model with temporal constraints and uncertain method execution durations, that builds on the success of OC-DEC-MDP.",
                "VFP introduces our two orthogonal ideas: First, similarly to [7] [9] and [10], we maintain 830 978-81-904262-7-5 (RPS) c 2007 IFAAMAS and manipulate a value function over time for each method rather than a separate value for each pair of method and time interval.",
                "Such representation allows us to group the time points for which the value function changes at the same rate (= its slope is constant), which results in fast, functional propagation of value functions.",
                "Second, we prove (both theoretically and empirically) that OC-DEC- MDP overestimates the opportunity cost, and to remedy that, we introduce a set of heuristics, that correct the opportunity cost overestimation problem.",
                "This paper is organized as follows: In section 2 we motivate this research by introducing a civilian rescue domain where a team of fire- brigades must coordinate in order to rescue civilians trapped in a burning building.",
                "In section 3 we provide a detailed description of our DEC-MDP model with Temporal Constraints and in section 4 we discuss how one could solve the problems encoded in our model using globally optimal and locally optimal solvers.",
                "Sections 5 and 6 discuss the two orthogonal improvements to the state-of-the-art OC-DEC-MDP algorithm that our VFP algorithm implements.",
                "Finally, in section 7 we demonstrate empirically the impact of our two orthogonal improvements, i.e., we show that: (i) The new heuristics correct the opportunity cost overestimation problem leading to higher quality policies, and (ii) By allowing for a systematic tradeoff of solution quality for time, the VFP algorithm runs much faster than the OC-DEC-MDP algorithm 2.",
                "MOTIVATING EXAMPLE We are interested in domains where multiple agents must coordinate their plans over time, despite uncertainty in plan execution duration and outcome.",
                "One example domain is large-scale disaster, like a fire in a skyscraper.",
                "Because there can be hundreds of civilians scattered across numerous floors, multiple rescue teams have to be dispatched, and radio communication channels can quickly get saturated and useless.",
                "In particular, small teams of fire-brigades must be sent on separate missions to rescue the civilians trapped in dozens of different locations.",
                "Picture a small mission plan from Figure (1), where three firebrigades have been assigned a task to rescue the civilians trapped at site B, accessed from site A (e.g. an office accessed from the floor)1 .",
                "General fire fighting procedures involve both: (i) putting out the flames, and (ii) ventilating the site to let the toxic, high temperature gases escape, with the restriction that ventilation should not be performed too fast in order to prevent the fire from spreading.",
                "The team estimates that the civilians have 20 minutes before the fire at site B becomes unbearable, and that the fire at site A has to be put out in order to open the access to site B.",
                "As has happened in the past in large scale disasters, communication often breaks down; and hence we assume in this domain that there is no communication between the fire-brigades 1,2 and 3 (denoted as FB1, FB2 and FB3).",
                "Consequently, FB2 does not know if it is already safe to ventilate site A, FB1 does not know if it is already safe to enter site A and start fighting fire at site B, etc.",
                "We assign the reward 50 for evacuating the civilians from site B, and a smaller reward 20 for the successful ventilation of site A, since the civilians themselves might succeed in breaking out from site B.",
                "One can clearly see the dilemma, that FB2 faces: It can only estimate the durations of the Fight fire at site A methods to be executed by FB1 and FB3, and at the same time FB2 knows that time is running out for civilians.",
                "If FB2 ventilates site A too early, the fire will spread out of control, whereas if FB2 waits with the ventilation method for too long, fire at site B will become unbearable for the civilians.",
                "In general, agents have to perform a sequence of such 1 We explain the EST and LET notation in section 3 Figure 1: Civilian rescue domain and a mission plan.",
                "Dotted arrows represent implicit precedence constraints within an agent. difficult decisions; in particular, decision process of FB2 involves first choosing when to start ventilating site A, and then (depending on the time it took to ventilate site A), choosing when to start evacuating the civilians from site B.",
                "Such sequence of decisions constitutes the policy of an agent, and it must be found fast because time is running out. 3.",
                "MODEL DESCRIPTION We encode our decision problems in a model which we refer to as Decentralized MDP with Temporal Constraints 2 .",
                "Each instance of our decision problems can be described as a tuple M, A, C, P, R where M = {mi} |M| i=1 is the set of methods, and A = {Ak} |A| k=1 is the set of agents.",
                "Agents cannot communicate during mission execution.",
                "Each agent Ak is assigned to a set Mk of methods, such that S|A| k=1 Mk = M and ∀i,j;i=jMi ∩ Mj = ø.",
                "Also, each method of agent Ak can be executed only once, and agent Ak can execute only one method at a time.",
                "Method execution times are uncertain and P = {pi} |M| i=1 is the set of distributions of method execution durations.",
                "In particular, pi(t) is the probability that the execution of method mi consumes time t. C is a set of temporal constraints in the system.",
                "Methods are partially ordered and each method has fixed time windows inside which it can be executed, i.e., C = C≺ ∪ C[ ] where C≺ is the set of predecessor constraints and C[ ] is the set of time window constraints.",
                "For c ∈ C≺, c = mi, mj means that method mi precedes method mj i.e., execution of mj cannot start before mi terminates.",
                "In particular, for an agent Ak, all its methods form a chain linked by predecessor constraints.",
                "We assume, that the graph G = M, C≺ is acyclic, does not have disconnected nodes (the problem cannot be decomposed into independent subproblems), and its source and sink vertices identify the source and sink methods of the system.",
                "For c ∈ C[ ], c = mi, EST, LET means that execution of mi can only start after the Earliest Starting Time EST and must finish before the Latest End Time LET; we allow methods to have multiple disjoint time window constraints.",
                "Although distributions pi can extend to infinite time horizons, given the time window constraints, the planning horizon Δ = max m,τ,τ ∈C[ ] τ is considered as the mission deadline.",
                "Finally, R = {ri} |M| i=1 is the set of non-negative rewards, i.e., ri is obtained upon successful execution of mi.",
                "Since there is no communication allowed, an agent can only estimate the probabilities that its methods have already been enabled 2 One could also use the OC-DEC-MDP framework, which models both time and resource constraints The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 831 by other agents.",
                "Consequently, if mj ∈ Mk is the next method to be executed by the agent Ak and the current time is t ∈ [0, Δ], the agent has to make a decision whether to Execute the method mj (denoted as E), or to Wait (denoted as W).",
                "In case agent Ak decides to wait, it remains idle for an arbitrary small time , and resumes operation at the same place (= about to execute method mj) at time t + .",
                "In case agent Ak decides to Execute the next method, two outcomes are possible: Success: The agent Ak receives reward rj and moves on to its next method (if such method exists) so long as the following conditions hold: (i) All the methods {mi| mi, mj ∈ C≺} that directly enable method mj have already been completed, (ii) Execution of method mj started in some time window of method mj, i.e., ∃ mj ,τ,τ ∈C[ ] such that t ∈ [τ, τ ], and (iii) Execution of method mj finished inside the same time window, i.e., agent Ak completed method mj in time less than or equal to τ − t. Failure: If any of the above-mentioned conditions does not hold, agent Ak stops its execution.",
                "Other agents may continue their execution, but methods mk ∈ {m| mj, m ∈ C≺} will never become enabled.",
                "The policy πk of an agent Ak is a function πk : Mk × [0, Δ] → {W, E}, and πk( m, t ) = a means, that if Ak is at method m at time t, it will choose to perform the action a.",
                "A joint policy π = [πk] |A| k=1 is considered to be optimal (denoted as π∗ ), if it maximizes the sum of expected rewards for all the agents. 4.",
                "SOLUTION TECHNIQUES 4.1 Optimal Algorithms Optimal joint policy π∗ is usually found by using the Bellman update principle, i.e., in order to determine the optimal policy for method mj, optimal policies for methods mk ∈ {m| mj, m ∈ C≺} are used.",
                "Unfortunately, for our model, the optimal policy for method mj also depends on policies for methods mi ∈ {m| m, mj ∈ C≺}.",
                "This double dependency results from the fact, that the expected reward for starting the execution of method mj at time t also depends on the probability that method mj will be enabled by time t. Consequently, if time is discretized, one needs to consider Δ|M| candidate policies in order to find π∗ .",
                "Thus, globally optimal algorithms used for solving real-world problems are unlikely to terminate in reasonable time [11].",
                "The complexity of our model could be reduced if we considered its more restricted version; in particular, if each method mj was allowed to be enabled at time points t ∈ Tj ⊂ [0, Δ], the Coverage Set Algorithm (CSA) [1] could be used.",
                "However, CSA complexity is double exponential in the size of Ti, and for our domains Tj can store all values ranging from 0 to Δ. 4.2 Locally Optimal Algorithms Following the limited applicability of globally optimal algorithms for DEC-MDPs with Temporal Constraints, locally optimal algorithms appear more promising.",
                "Specially, the OC-DEC-MDP algorithm [4] is particularly significant, as it has shown to easily scale up to domains with hundreds of methods.",
                "The idea of the OC-DECMDP algorithm is to start with the earliest starting time policy π0 (according to which an agent will start executing the method m as soon as m has a non-zero chance of being already enabled), and then improve it iteratively, until no further improvement is possible.",
                "At each iteration, the algorithm starts with some policy π, which uniquely determines the probabilities Pi,[τ,τ ] that method mi will be performed in the time interval [τ, τ ].",
                "It then performs two steps: Step 1: It propagates from sink methods to source methods the values Vi,[τ,τ ], that represent the expected utility for executing method mi in the time interval [τ, τ ].",
                "This propagation uses the probabilities Pi,[τ,τ ] from previous algorithm iteration.",
                "We call this step a value propagation phase.",
                "Step 2: Given the values Vi,[τ,τ ] from Step 1, the algorithm chooses the most profitable method execution intervals which are stored in a new policy π .",
                "It then propagates the new probabilities Pi,[τ,τ ] from source methods to sink methods.",
                "We call this step a probability propagation phase.",
                "If policy π does not improve π, the algorithm terminates.",
                "There are two shortcomings of the OC-DEC-MDP algorithm that we address in this paper.",
                "First, each of OC-DEC-MDP states is a pair mj, [τ, τ ] , where [τ, τ ] is a time interval in which method mj can be executed.",
                "While such state representation is beneficial, in that the problem can be solved with a standard value iteration algorithm, it blurs the intuitive mapping from time t to the expected total reward for starting the execution of mj at time t. Consequently, if some method mi enables method mj, and the values Vj,[τ,τ ]∀τ,τ ∈[0,Δ] are known, the operation that calculates the values Vi,[τ,τ ]∀τ, τ ∈ [0, Δ] (during the value propagation phase), runs in time O(I2 ), where I is the number of time intervals 3 .",
                "Since the runtime of the whole algorithm is proportional to the runtime of this operation, especially for big time horizons Δ, the OC- DECMDP algorithm runs slow.",
                "Second, while OC-DEC-MDP emphasizes on precise calculation of values Vj,[τ,τ ], it fails to address a critical issue that determines how the values Vj,[τ,τ ] are split given that the method mj has multiple enabling methods.",
                "As we show later, OC-DEC-MDP splits Vj,[τ,τ ] into parts that may overestimate Vj,[τ,τ ] when summed up again.",
                "As a result, methods that precede the method mj overestimate the value for enabling mj which, as we show later, can have disastrous consequences.",
                "In the next two sections, we address both of these shortcomings. 5.",
                "VALUE FUNCTION PROPAGATION (VFP) The general scheme of the VFP algorithm is identical to the OCDEC-MDP algorithm, in that it performs a series of policy improvement iterations, each one involving a Value and Probability Propagation Phase.",
                "However, instead of propagating separate values, VFP maintains and propagates the whole functions, we therefore refer to these phases as the value function propagation phase and the probability function propagation phase.",
                "To this end, for each method mi ∈ M, we define three new functions: Value Function, denoted as vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t. Opportunity Cost Function, denoted as Vi(t), that maps time t ∈ [0, Δ] to the expected total reward for starting the execution of method mi at time t assuming that mi is enabled.",
                "Probability Function, denoted as Pi(t), that maps time t ∈ [0, Δ] to the probability that method mi will be completed before time t. Such functional representation allows us to easily read the current policy, i.e., if an agent Ak is at method mi at time t, then it will wait as long as value function vi(t) will be greater in the future.",
                "Formally: πk( mi, t ) = j W if ∃t >t such that vi(t) < vi(t ) E otherwise.",
                "We now develop an analytical technique for performing the value function and probability function propagation phases. 3 Similarly for the probability propagation phase 832 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 5.1 Value Function Propagation Phase Suppose, that we are performing a value function propagation phase during which the value functions are propagated from the sink methods to the source methods.",
                "At any time during this phase we encounter a situation shown in Figure 2, where opportunity cost functions [Vjn ]N n=0 of methods [mjn ]N n=0 are known, and the opportunity cost Vi0 of method mi0 is to be derived.",
                "Let pi0 be the probability distribution function of method mi0 execution duration, and ri0 be the immediate reward for starting and completing the execution of method mi0 inside a time interval [τ, τ ] such that mi0 τ, τ ∈ C[ ].",
                "The function Vi0 is then derived from ri0 and opportunity costs Vjn,i0 (t) n = 1, ..., N from future methods.",
                "Formally: Vi0 (t) = 8 >>< >>: R τ −t 0 pi0 (t )(ri0 + PN n=0 Vjn,i0 (t + t ))dt if ∃ mi0 τ,τ ∈C[ ] such that t ∈ [τ, τ ] 0 otherwise (1) Note, that for t ∈ [τ, τ ], if h(t) := ri0 + PN n=0 Vjn,i0 (τ −t) then Vi0 is a convolution of p and h: vi0 (t) = (pi0 ∗h)(τ −t).",
                "Assume for now, that Vjn,i0 represents a full opportunity cost, postponing the discussion on different techniques for splitting the opportunity cost Vj0 into [Vj0,ik ]K k=0 until section 6.",
                "We now show how to derive Vj0,i0 (derivation of Vjn,i0 for n = 0 follows the same scheme).",
                "Figure 2: Fragment of an MDP of agent Ak.",
                "Probability functions propagate forward (left to right) whereas value functions propagate backward (right to left).",
                "Let V j0,i0 (t) be the opportunity cost of starting the execution of method mj0 at time t given that method mi0 has been completed.",
                "It is derived by multiplying Vi0 by the probability functions of all methods other than mi0 that enable mj0 .",
                "Formally: V j0,i0 (t) = Vj0 (t) · KY k=1 Pik (t).",
                "Where similarly to [4] and [5] we ignored the dependency of [Plk ]K k=1.",
                "Observe that V j0,i0 does not have to be monotonically decreasing, i.e., delaying the execution of the method mi0 can sometimes be profitable.",
                "Therefore the opportunity cost Vj0,i0 (t) of enabling method mi0 at time t must be greater than or equal to V j0,i0 .",
                "Furthermore, Vj0,i0 should be non-increasing.",
                "Formally: Vj0,i0 = min f∈F f (2) Where F = {f | f ≥ V j0,i0 and f(t) ≥ f(t ) ∀t<t }.",
                "Knowing the opportunity cost Vi0 , we can then easily derive the value function vi0 .",
                "Let Ak be an agent assigned to the method mi0 .",
                "If Ak is about to start the execution of mi0 it means, that Ak must have completed its part of the mission plan up to the method mi0 .",
                "Since Ak does not know if other agents have completed methods [mlk ]k=K k=1 , in order to derive vi0 , it has to multiply Vi0 by the probability functions of all methods of other agents that enable mi0 .",
                "Formally: vi0 (t) = Vi0 (t) · KY k=1 Plk (t) Where the dependency of [Plk ]K k=1 is also ignored.",
                "We have consequently shown a general scheme how to propagate the value functions: Knowing [vjn ]N n=0 and [Vjn ]N n=0 of methods [mjn ]N n=0 we can derive vi0 and Vi0 of method mi0 .",
                "In general, the value function propagation scheme starts with sink nodes.",
                "It then visits at each time a method m, such that all the methods that m enables have already been marked as visited.",
                "The value function propagation phase terminates when all the source methods have been marked as visited. 5.2 Reading the Policy In order to determine the policy of agent Ak for the method mj0 we must identify the set Zj0 of intervals [z, z ] ⊂ [0, ..., Δ], such that: ∀t∈[z,z ] πk( mj0 , t ) = W. One can easily identify the intervals of Zj0 by looking at the time intervals in which the value function vj0 does not decrease monotonically. 5.3 Probability Function Propagation Phase Assume now, that value functions and opportunity cost values have all been propagated from sink methods to source nodes and the sets Zj for all methods mj ∈ M have been identified.",
                "Since value function propagation phase was using probabilities Pi(t) for methods mi ∈ M and times t ∈ [0, Δ] found at previous algorithm iteration, we now have to find new values Pi(t), in order to prepare the algorithm for its next iteration.",
                "We now show how in the general case (Figure 2) propagate the probability functions forward through one method, i.e., we assume that the probability functions [Pik ]K k=0 of methods [mik ]K k=0 are known, and the probability function Pj0 of method mj0 must be derived.",
                "Let pj0 be the probability distribution function of method mj0 execution duration, and Zj0 be the set of intervals of inactivity for method mj0 , found during the last value function propagation phase.",
                "If we ignore the dependency of [Pik ]K k=0 then the probability Pj0 (t) that the execution of method mj0 starts before time t is given by: Pj0 (t) = (QK k=0 Pik (τ) if ∃(τ, τ ) ∈ Zj0 s.t. t ∈ (τ, τ ) QK k=0 Pik (t) otherwise.",
                "Given Pj0 (t), the probability Pj0 (t) that method mj0 will be completed by time t is derived by: Pj0 (t) = Z t 0 Z t 0 ( ∂Pj0 ∂t )(t ) · pj0 (t − t )dt dt (3) Which can be written compactly as ∂Pj0 ∂t = pj0 ∗ ∂P j0 ∂t .",
                "We have consequently shown how to propagate the probability functions [Pik ]K k=0 of methods [mik ]K k=0 to obtain the probability function Pj0 of method mj0 .",
                "The general, the probability function propagation phase starts with source methods msi for which we know that Psi = 1 since they are enabled by default.",
                "We then visit at each time a method m such that all the methods that enable The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 833 m have already been marked as visited.",
                "The probability function propagation phase terminates when all the sink methods have been marked as visited. 5.4 The Algorithm Similarly to the OC-DEC-MDP algorithm, VFP starts the policy improvement iterations with the earliest starting time policy π0 .",
                "Then at each iteration it: (i) Propagates the value functions [vi] |M| i=1 using the old probability functions [Pi] |M| i=1 from previous algorithm iteration and establishes the new sets [Zi] |M| i=1 of method inactivity intervals, and (ii) propagates the new probability functions [Pi ] |M| i=1 using the newly established sets [Zi] |M| i=1.",
                "These new functions [Pi ] |M| i=1 are then used in the next iteration of the algorithm.",
                "Similarly to OC-DEC-MDP, VFP terminates if a new policy does not improve the policy from the previous algorithm iteration. 5.5 Implementation of Function Operations So far, we have derived the functional operations for value function and probability function propagation without choosing any function representation.",
                "In general, our functional operations can handle continuous time, and one has freedom to choose a desired function approximation technique, such as piecewise linear [7] or piecewise constant [9] approximation.",
                "However, since one of our goals is to compare VFP with the existing OC-DEC- MDP algorithm, that works only for discrete time, we also discretize time, and choose to approximate value functions and probability functions with piecewise linear (PWL) functions.",
                "When the VFP algorithm propagates the value functions and probability functions, it constantly carries out operations represented by equations (1) and (3) and we have already shown that these operations are convolutions of some functions p(t) and h(t).",
                "If time is discretized, functions p(t) and h(t) are discrete; however, h(t) can be nicely approximated with a PWL function bh(t), which is exactly what VFP does.",
                "As a result, instead of performing O(Δ2 ) multiplications to compute f(t), VFP only needs to perform O(k · Δ) multiplications to compute f(t), where k is the number of linear segments of bh(t) (note, that since h(t) is monotonic, bh(t) is usually close to h(t) with k Δ).",
                "Since Pi values are in range [0, 1] and Vi values are in range [0, P mi∈M ri], we suggest to approximate Vi(t) with bVi(t) within error V , and Pi(t) with bPi(t) within error P .",
                "We now prove that the overall approximation error accumulated during the value function propagation phase can be expressed in terms of P and V : THEOREM 1.",
                "Let C≺ be a set of precedence constraints of a DEC-MDP with Temporal Constraints, and P and V be the probability function and value function approximation errors respectively.",
                "The overall error π = maxV supt∈[0,Δ]|V (t) − bV (t)| of value function propagation phase is then bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri .",
                "PROOF.",
                "In order to establish the bound for π, we first prove by induction on the size of C≺, that the overall error of probability function propagation phase, π(P ) = maxP supt∈[0,Δ]|P(t) − bP(t)| is bounded by (1 + P )|C≺| − 1.",
                "Induction base: If n = 1 only two methods are present, and we will perform the operation identified by Equation (3) only once, introducing the error π(P ) = P = (1 + P )|C≺| − 1.",
                "Induction step: Suppose, that π(P ) for |C≺| = n is bounded by (1 + P )n − 1, and we want to prove that this statement holds for |C≺| = n. Let G = M, C≺ be a graph with at most n + 1 edges, and G = M, C≺ be a subgraph of G, such that C≺ = C≺ − { mi, mj }, where mj ∈ M is a sink node in G. From the induction assumption we have, that C≺ introduces the probability propagation phase error bounded by (1 + P )n − 1.",
                "We now add back the link { mi, mj } to C≺, which affects the error of only one probability function, namely Pj, by a factor of (1 + P ).",
                "Since probability propagation phase error in C≺ was bounded by (1 + P )n − 1, in C≺ = C≺ ∪ { mi, mj } it can be at most ((1 + P )n − 1)(1 + P ) < (1 + P )n+1 − 1.",
                "Thus, if opportunity cost functions are not overestimated, they are bounded by P mi∈M ri and the error of a single value function propagation operation will be at most Z Δ 0 p(t)( V +((1+ P ) |C≺| −1) X mi∈M ri) dt < V +((1+ P ) |C≺| −1) X mi∈M ri.",
                "Since the number of value function propagation operations is |C≺|, the total error π of the value function propagation phase is bounded by: |C≺| V + ((1 + P )|C≺| − 1) P mi∈M ri . 6.",
                "SPLITTING THE OPPORTUNITY COST FUNCTIONS In section 5 we left out the discussion about how the opportunity cost function Vj0 of method mj0 is split into opportunity cost functions [Vj0,ik ]K k=0 sent back to methods [mik ]K k=0 , that directly enable method mj0 .",
                "So far, we have taken the same approach as in [4] and [5] in that the opportunity cost function Vj0,ik that the method mik sends back to the method mj0 is a minimal, non-increasing function that dominates function V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t).",
                "We refer to this approach, as heuristic H 1,1 .",
                "Before we prove that this heuristic overestimates the opportunity cost, we discuss three problems that might occur when splitting the opportunity cost functions: (i) overestimation, (ii) underestimation and (iii) starvation.",
                "Consider the situation in Figure Figure 3: Splitting the value function of method mj0 among methods [mik ]K k=0. (3) when value function propagation for methods [mik ]K k=0 is performed.",
                "For each k = 0, ..., K, Equation (1) derives the opportunity cost function Vik from immediate reward rk and opportunity cost function Vj0,ik .",
                "If m0 is the only methods that precedes method mk, then V ik,0 = Vik is propagated to method m0, and consequently the opportunity cost for completing the method m0 at time t is equal to PK k=0 Vik,0(t).",
                "If this cost is overestimated, then an agent A0 at method m0 will have too much incentive to finish the execution of m0 at time t. Consequently, although the probability P(t) that m0 will be enabled by other agents by time t is low, agent A0 might still find the expected utility of starting the execution of m0 at time t higher than the expected utility of doing it later.",
                "As a result, it will choose at time t to start executing method m0 instead of waiting, which can have disastrous consequences.",
                "Similarly, if PK k=0 Vik,0(t) is underestimated, agent A0 might loose interest in enabling the future methods [mik ]K k=0 and just focus on 834 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) maximizing the chance of obtaining its immediate reward r0.",
                "Since this chance is increased when agent A0 waits4 , it will consider at time t to be more profitable to wait, instead of starting the execution of m0, which can have similarly disastrous consequences.",
                "Finally, if Vj0 is split in a way, that for some k, Vj0,ik = 0, it is the method mik that underestimates the opportunity cost of enabling method mj0 , and the similar reasoning applies.",
                "We call such problem a starvation of method mk.",
                "That short discussion shows the importance of splitting the opportunity cost function Vj0 in such a way, that overestimation, underestimation, and starvation problem is avoided.",
                "We now prove that: THEOREM 2.",
                "Heuristic H 1,1 can overestimate the opportunity cost.",
                "PROOF.",
                "We prove the theorem by showing a case where the overestimation occurs.",
                "For the mission plan from Figure (3), let H 1,1 split Vj0 into [V j0,ik = Vj0 · Q k ∈{0,...,K} k =k Pik ]K k=0 sent to methods [mik ]K k=0 respectively.",
                "Also, assume that methods [mik ]K k=0 provide no local reward and have the same time windows, i.e., rik = 0; ESTik = 0, LETik = Δ for k = 0, ..., K. To prove the overestimation of opportunity cost, we must identify t0 ∈ [0, ..., Δ] such that the opportunity cost PK k=0 Vik (t) for methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t).",
                "From Equation (1) we have: Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt Summing over all methods [mik ]K k=0 we obtain: KX k=0 Vik (t) = KX k=0 Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (4) ≥ KX k=0 Z Δ−t 0 pik (t )V j0,ik (t + t )dt = KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t ) Y k ∈{0,...,K} k =k Pik (t + t )dt Let c ∈ (0, 1] be a constant and t0 ∈ [0, Δ] be such that ∀t>t0 and ∀k=0,..,K we have Q k ∈{0,...,K} k =k Pik (t) > c. Then: KX k=0 Vik (t0) > KX k=0 Z Δ−t0 0 pik (t )Vj0 (t0 + t ) · c dt Because Pjk is non-decreasing.",
                "Now, suppose there exists t1 ∈ (t0, Δ], such that PK k=0 R t1−t0 0 pik (t )dt > Vj0 (t0) c·Vj0 (t1) .",
                "Since decreasing the upper limit of the integral over positive function also decreases the integral, we have: KX k=0 Vik (t0) > c KX k=0 Z t1 t0 pik (t − t0)Vj0 (t )dt And since Vj0 (t ) is non-increasing we have: KX k=0 Vik (t0) > c · Vj0 (t1) KX k=0 Z t1 t0 pik (t − t0)dt (5) = c · Vj0 (t1) KX k=0 Z t1−t0 0 pik (t )dt > c · Vj0 (t1) Vj(t0) c · Vj(t1) = Vj(t0) 4 Assuming LET0 t Consequently, the opportunity cost PK k=0 Vik (t0) of starting the execution of methods [mik ]K k=0 at time t ∈ [0, .., Δ] is greater than the opportunity cost Vj0 (t0) which proves the theorem.Figure 4 shows that the overestimation of opportunity cost is easily observable in practice.",
                "To remedy the problem of opportunity cost overestimation, we propose three alternative heuristics that split the opportunity cost functions: • Heuristic H 1,0 : Only one method, mik gets the full expected reward for enabling method mj0 , i.e., V j0,ik (t) = 0 for k ∈ {0, ..., K}\\{k} and V j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pik )(t). • Heuristic H 1/2,1/2 : Each method [mik ]K k=0 gets the full opportunity cost for enabling method mj0 divided by the number K of methods enabling the method mj0 , i.e., V j0,ik (t) = 1 K (Vj0 · Q k ∈{0,...,K} k =k Pik )(t) for k ∈ {0, ..., K}. • Heuristic bH 1,1 : This is a normalized version of the H 1,1 heuristic in that each method [mik ]K k=0 initially gets the full opportunity cost for enabling the method mj0 .",
                "To avoid opportunity cost overestimation, we normalize the split functions when their sum exceeds the opportunity cost function to be split.",
                "Formally: V j0,ik (t) = 8 >< >: V H 1,1 j0,ik (t) if PK k=0 V H 1,1 j0,ik (t) < Vj0 (t) Vj0 (t) V H 1,1 j0,ik (t) PK k=0 V H 1,1 j0,ik (t) otherwise Where V H 1,1 j0,ik (t) = (Vj0 · Q k ∈{0,...,K} k =k Pjk )(t).",
                "For the new heuristics, we now prove, that: THEOREM 3.",
                "Heuristics H 1,0 , H 1/2,1/2 and bH 1,1 do not overestimate the opportunity cost.",
                "PROOF.",
                "When heuristic H 1,0 is used to split the opportunity cost function Vj0 , only one method (e.g. mik ) gets the opportunity cost for enabling method mj0 .",
                "Thus: KX k =0 Vik (t) = Z Δ−t 0 pik (t )Vj0,ik (t + t )dt (6) And since Vj0 is non-increasing ≤ Z Δ−t 0 pik (t )Vj0 (t + t ) · Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ Vj0 (t) The last inequality is also a consequence of the fact that Vj0 is non-increasing.",
                "For heuristic H 1/2,1/2 we similarly have: KX k=0 Vik (t) ≤ KX k=0 Z Δ−t 0 pik (t ) 1 K Vj0 (t + t ) Y k ∈{0,...,K} k =k Pjk (t + t )dt ≤ 1 K KX k=0 Z Δ−t 0 pik (t )Vj0 (t + t )dt ≤ 1 K · K · Vj0 (t) = Vj0 (t).",
                "For heuristic bH 1,1 , the opportunity cost function Vj0 is by definition split in such manner, that PK k=0 Vik (t) ≤ Vj0 (t).",
                "Consequently, we have proved, that our new heuristics H 1,0 , H 1/2,1/2 and bH 1,1 avoid the overestimation of the opportunity cost.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 835 The reason why we have introduced all three new heuristics is the following: Since H 1,1 overestimates the opportunity cost, one has to choose which method mik will receive the reward from enabling the method mj0 , which is exactly what the heuristic H 1,0 does.",
                "However, heuristic H 1,0 leaves K − 1 methods that precede the method mj0 without any reward which leads to starvation.",
                "Starvation can be avoided if opportunity cost functions are split using heuristic H 1/2,1/2 , that provides reward to all enabling methods.",
                "However, the sum of split opportunity cost functions for the H 1/2,1/2 heuristic can be smaller than the non-zero split opportunity cost function for the H 1,0 heuristic, which is clearly undesirable.",
                "Such situation (Figure 4, heuristic H 1,0 ) occurs because the mean f+g 2 of two functions f, g is not smaller than f nor g only if f = g. This is why we have proposed the bH 1,1 heuristic, which by definition avoids the overestimation, underestimation and starvation problems. 7.",
                "EXPERIMENTAL EVALUATION Since the VFP algorithm that we introduced provides two orthogonal improvements over the OC-DEC-MDP algorithm, the experimental evaluation we performed consisted of two parts: In part 1, we tested empirically the quality of solutions that an locally optimal solver (either OC-DEC-MDP or VFP) finds, given it uses different opportunity cost function splitting heuristic, and in part 2, we compared the runtimes of the VFP and OC-DEC- MDP algorithms for a variety of mission plan configurations.",
                "Part 1: We first ran the VFP algorithm on a generic mission plan configuration from Figure 3 where only methods mj0 , mi1 , mi2 and m0 were present.",
                "Time windows of all methods were set to 400, duration pj0 of method mj0 was uniform, i.e., pj0 (t) = 1 400 and durations pi1 , pi2 of methods mi1 , mi2 were normal distributions, i.e., pi1 = N(μ = 250, σ = 20), and pi2 = N(μ = 200, σ = 100).",
                "We assumed that only method mj0 provided reward, i.e. rj0 = 10 was the reward for finishing the execution of method mj0 before time t = 400.",
                "We show our results in Figure (4) where the x-axis of each of the graphs represents time whereas the y-axis represents the opportunity cost.",
                "The first graph confirms, that when the opportunity cost function Vj0 was split into opportunity cost functions Vi1 and Vi2 using the H 1,1 heuristic, the function Vi1 +Vi2 was not always below the Vj0 function.",
                "In particular, Vi1 (280) + Vi2 (280) exceeded Vj0 (280) by 69%.",
                "When heuristics H 1,0 , H 1/2,1/2 and bH 1,1 were used (graphs 2,3 and 4), the function Vi1 + Vi2 was always below Vj0 .",
                "We then shifted our attention to the civilian rescue domain introduced in Figure 1 for which we sampled all action execution durations from the normal distribution N = (μ = 5, σ = 2)).",
                "To obtain the baseline for the heuristic performance, we implemented a globally optimal solver, that found a true expected total reward for this domain (Figure (6a)).",
                "We then compared this reward with a expected total reward found by a locally optimal solver guided by each of the discussed heuristics.",
                "Figure (6a), which plots on the y-axis the expected total reward of a policy complements our previous results: H 1,1 heuristic overestimated the expected total reward by 280% whereas the other heuristics were able to guide the locally optimal solver close to a true expected total reward.",
                "Part 2: We then chose H 1,1 to split the opportunity cost functions and conducted a series of experiments aimed at testing the scalability of VFP for various mission plan configurations, using the performance of the OC-DEC-MDP algorithm as a benchmark.",
                "We began the VFP scalability tests with a configuration from Figure (5a) associated with the civilian rescue domain, for which method execution durations were extended to normal distributions N(μ = Figure 5: Mission plan configurations: (a) civilian rescue domain, (b) chain of n methods, (c) tree of n methods with branching factor = 3 and (d) square mesh of n methods.",
                "Figure 6: VFP performance in the civilian rescue domain. 30, σ = 5), and the deadline was extended to Δ = 200.",
                "We decided to test the runtime of the VFP algorithm running with three different levels of accuracy, i.e., different approximation parameters P and V were chosen, such that the cumulative error of the solution found by VFP stayed within 1%, 5% and 10% of the solution found by the OC- DEC-MDP algorithm.",
                "We then run both algorithms for a total of 100 policy improvement iterations.",
                "Figure (6b) shows the performance of the VFP algorithm in the civilian rescue domain (y-axis shows the runtime in milliseconds).",
                "As we see, for this small domain, VFP runs 15% faster than OCDEC-MDP when computing the policy with an error of less than 1%.",
                "For comparison, the globally optimal solved did not terminate within the first three hours of its runtime which shows the strength of the opportunistic solvers, like OC-DEC-MDP.",
                "We next decided to test how VFP performs in a more difficult domain, i.e., with methods forming a long chain (Figure (5b)).",
                "We tested chains of 10, 20 and 30 methods, increasing at the same time method time windows to 350, 700 and 1050 to ensure that later methods can be reached.",
                "We show the results in Figure (7a), where we vary on the x-axis the number of methods and plot on the y-axis the algorithm runtime (notice the logarithmic scale).",
                "As we observe, scaling up the domain reveals the high performance of VFP: Within 1% error, it runs up to 6 times faster than OC-DECMDP.",
                "We then tested how VFP scales up, given that the methods are arranged into a tree (Figure (5c)).",
                "In particular, we considered trees with branching factor of 3, and depth of 2, 3 and 4, increasing at the same time the time horizon from 200 to 300, and then to 400.",
                "We show the results in Figure (7b).",
                "Although the speedups are smaller than in case of a chain, the VFP algorithm still runs up to 4 times faster than OC-DEC-MDP when computing the policy with an error of less than 1%.",
                "We finally tested how VFP handles the domains with methods arranged into a n × n mesh, i.e., C≺ = { mi,j, mk,j+1 } for i = 1, ..., n; k = 1, ..., n; j = 1, ..., n − 1.",
                "In particular, we consider 836 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Figure 4: Visualization of heuristics for opportunity costs splitting.",
                "Figure 7: Scalability experiments for OC-DEC-MDP and VFP for different network configurations. meshes of 3×3, 4×4, and 5×5 methods.",
                "For such configurations we have to greatly increase the time horizon since the probabilities of enabling the final methods by a particular time decrease exponentially.",
                "We therefore vary the time horizons from 3000 to 4000, and then to 5000.",
                "We show the results in Figure (7c) where, especially for larger meshes, the VFP algorithm runs up to one order of magnitude faster than OC-DEC-MDP while finding a policy that is within less than 1% from the policy found by OC- DECMDP. 8.",
                "CONCLUSIONS Decentralized Markov Decision Process (DEC-MDP) has been very popular for modeling of agent-coordination problems, it is very difficult to solve, especially for the real-world domains.",
                "In this paper, we improved a state-of-the-art heuristic solution method for DEC-MDPs, called OC-DEC-MDP, that has recently been shown to scale up to large DEC-MDPs.",
                "Our heuristic solution method, called Value Function Propagation (VFP), provided two orthogonal improvements of OC-DEC-MDP: (i) It speeded up OC-DECMDP by an order of magnitude by maintaining and manipulating a value function for each method rather than a separate value for each pair of method and time interval, and (ii) it achieved better solution qualities than OC-DEC-MDP because it corrected the overestimation of the opportunity cost of OC-DEC-MDP.",
                "In terms of related work, we have extensively discussed the OCDEC-MDP algorithm [4].",
                "Furthermore, as discussed in Section 4, there are globally optimal algorithms for solving DEC-MDPs with temporal constraints [1] [11].",
                "Unfortunately, they fail to scale up to large-scale domains at present time.",
                "Beyond OC-DEC-MDP, there are other locally optimal algorithms for DEC-MDPs and DECPOMDPs [8] [12], [13], yet, they have traditionally not dealt with uncertain execution times and temporal constraints.",
                "Finally, value function techniques have been studied in context of single agent MDPs [7] [9].",
                "However, similarly to [6], they fail to address the lack of global state knowledge, which is a fundamental issue in decentralized planning.",
                "Acknowledgments This material is based upon work supported by the DARPA/IPTO COORDINATORS program and the Air Force Research Laboratory under Contract No.",
                "FA875005C0030.",
                "The authors also want to thank Sven Koenig and anonymous reviewers for their valuable comments. 9.",
                "REFERENCES [1] R. Becker, V. Lesser, and S. Zilberstein.",
                "Decentralized MDPs with Event-Driven Interactions.",
                "In AAMAS, pages 302-309, 2004. [2] R. Becker, S. Zilberstein, V. Lesser, and C. V. Goldman.",
                "Transition-Independent Decentralized Markov Decision Processes.",
                "In AAMAS, pages 41-48, 2003. [3] D. S. Bernstein, S. Zilberstein, and N. Immerman.",
                "The complexity of decentralized control of Markov decision processes.",
                "In UAI, pages 32-37, 2000. [4] A. Beynier and A. Mouaddib.",
                "A polynomial algorithm for decentralized Markov decision processes with temporal constraints.",
                "In AAMAS, pages 963-969, 2005. [5] A. Beynier and A. Mouaddib.",
                "An iterative algorithm for solving constrained decentralized Markov decision processes.",
                "In AAAI, pages 1089-1094, 2006. [6] C. Boutilier.",
                "Sequential optimality and coordination in multiagent systems.",
                "In IJCAI, pages 478-485, 1999. [7] J. Boyan and M. Littman.",
                "Exact solutions to time-dependent MDPs.",
                "In NIPS, pages 1026-1032, 2000. [8] C. Goldman and S. Zilberstein.",
                "Optimizing information exchange in cooperative multi-agent systems, 2003. [9] L. Li and M. Littman.",
                "Lazy approximation for solving continuous finite-horizon MDPs.",
                "In AAAI, pages 1175-1180, 2005. [10] Y. Liu and S. Koenig.",
                "Risk-sensitive planning with one-switch utility functions: Value iteration.",
                "In AAAI, pages 993-999, 2005. [11] D. Musliner, E. Durfee, J. Wu, D. Dolgov, R. Goldman, and M. Boddy.",
                "Coordinated plan management using multiagent MDPs.",
                "In AAAI Spring Symposium, 2006. [12] R. Nair, M. Tambe, M. Yokoo, D. Pynadath, and S. Marsella.",
                "Taming decentralized POMDPs: Towards efficient policy computation for multiagent settings.",
                "In IJCAI, pages 705-711, 2003. [13] R. Nair, P. Varakantham, M. Tambe, and M. Yokoo.",
                "Networked distributed POMDPs: A synergy of distributed constraint optimization and POMDPs.",
                "In IJCAI, pages 1758-1760, 2005.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 837"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        }
    }
}