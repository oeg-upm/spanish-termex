{
    "id": "I-1",
    "original_text": "Aborting Tasks in BDI Agents John Thangarajah, James Harland RMIT University Melbourne, Australia {johthan,jah}@cs.rmit.edu.au David Morley, Neil Yorke-Smith Artificial Intelligence Center, SRI International Menlo Park, CA 94025 U.S.A. {morley,nysmith}@ai.sri.com ABSTRACT Intelligent agents that are intended to work in dynamic environments must be able to gracefully handle unsuccessful tasks and plans. In addition, such agents should be able to make rational decisions about an appropriate course of action, which may include aborting a task or plan, either as a result of the agents own deliberations, or potentially at the request of another agent. In this paper we investigate the incorporation of aborts into a BDI-style architecture. We discuss some conditions under which aborting a task or plan is appropriate, and how to determine the consequences of such a decision. We augment each plan with an optional abort-method, analogous to the failure method found in some agent programming languages. We provide an operational semantics for the execution cycle in the presence of aborts in the abstract agent language CAN, which enables us to specify a BDI-based execution model without limiting our attention to a particular agent system (such as JACK, Jadex, Jason, or SPARK). A key technical challenge we address is the presence of parallel execution threads and of sub-tasks, which require the agent to ensure that the abort methods for each plan are carried out in an appropriate sequence. Categories and Subject Descriptors I.2.11 [ARTIFICIAL INTELLIGENCE]: Distributed Artificial Intelligence-Intelligent agents General Terms Design, Reliability, Theory 1. INTRODUCTION Intelligent agents generally work in complex, dynamic environments, such as air traffic control or robot navigation, in which the success of any particular action or plan cannot be guaranteed [13]. Accordingly, dealing with failure is fundamental to agent programming, and is an important element of agent characteristics such as robustness, flexibility, and persistence [21]. In agent architectures inspired by the Belief-Desire-Intention (BDI) model [16], these properties are often characterized by the interactions between beliefs, goals, and plans [2].1 In general, an agent that wishes to achieve a particular set of tasks will pursue a number of plans concurrently. When failures occur, the choice of plans will be reviewed. This may involve seeking alternative plans for a particular task, re-scheduling tasks to better comply with resource constraints, dropping some tasks, or some other decision that will increase the likelihood of success [12, 14]. Failures can occur for a number of reasons, and it is often not possible to predict these in advance, either because of the complexity of the system or because changes in the environment invalidate some earlier decisions. Given this need for deliberation about failed tasks or plans, failure deliberation is commonly built into the agents execution cycle. Besides dealing with failure, an important capability of an intelligent agent is to be able to abort a particular task or plan. This decision may be due to an internal deliberation (such as the agent believing the task can no longer be achieved, or that some conflicting task now has a higher priority) or due to an external factor (such as another agent altering a commitment, or a change in the environment). Aborting a task or plan is distinct from its failure. Failure reflects an inability to perform and does not negate the need to perform - for example, a reasonable response to failure may be to try again. In contrast, aborting says nothing about the ability to perform; it merely eliminates the need. Failure propagates from the bottom up, whereas aborting propagates from the top down. The potential for concurrently executing sub-plans introduces different complexities for aborting and failure. For aborting, it means that multiple concurrent sub-plans may need to be aborted as the abort is propagated down. For failure, it means that parallel-sibling plans may need to be aborted as the failure is propagated up. There has been a considerable amount of work on plan failures (such as detecting and resolving resource conflicts [20, 10]) and most agent systems incorporate some notion of failure handling. However, there has been relatively little work on the development of abort techniques beyond simple dropping of currently intended plans and tasks, which does not deal with the clean-up required. As one consequence, most agent systems are quite limited in their treatment of the situation where one branch of a parallel construct 1 One can consider both tasks to be performed and goals to achieve a certain state of the world. A task can be considered a goal of achieving the state of the task having been performed, and a goal can be considered a task of bringing about that state of the world. We adopt the latter view and use task to also refer to goals. 8 978-81-904262-7-5 (RPS) c 2007 IFAAMAS fails (common approaches include either letting the other branch run to completion unhindered or dropping it completely). In this paper we discuss in detail the incorporation of abort cleanup methods into the agent execution cycle, providing a unified approach to failure and abort. A key feature of our procedure-based approach is that we allow each plan to execute some particular code on a failure and on an abort. This allows a plan to attempt to ensure a stable, known state, and possibly to recover some resources and otherwise clean up before exiting. Accordingly, a central technical challenge is to manage the orderly execution of the appropriate clean-up code. We show how aborts can be smoothly introduced into a BDI-style architecture, and for the first time we give an operational semantics for aborting in the abstract agent language CAN [23, 17]. This allows us to specify an appropriate level of detail for the execution model, without focusing on the specific constructs of any one agent system such as JACK [2], Jadex [14], Jason [6], or SPARK [9]. Our focus is on a single agent, complementary to related work that considers exception handling for single- and multiagent systems (e.g., [22, 5, 6]). This paper is organized as follows. In Section 2 we give an example of the consequences of aborting a task, and in Section 3 we discuss some circumstances under which aborts should occur, and the appropriate representation and invocation procedures. In Section 4 we show how we can use CAN to formally specify the behaviour of an aborted plan. Section 5 discusses related work, and in Section 6 we present our conclusions and future work. 2. MOTIVATING EXAMPLE Alice is a knowledge worker assisted by a learning, personal assistive agent such as CALO [11]. Alice plans to attend the IJCAI conference later in the year, and her CALO agent adopts the task of Support Meeting Submission (SMS) to assist her. CALOs plan for an SMS task in the case of a conference submission consists of the following sub-tasks: 1. Allocate a Paper Number (APN) to be used for administrative purposes in the company. 2. Track Writing Abstract (TWA): keep track of Alices progress in preparing an abstract. 3. Apply For Clearance (AFC) for publication from Alices manager based on the abstract and conference details. 4. Track Writing Paper (TWP): keep track of Alices progress in writing the paper. 5. Handle Paper Submission (HPS): follow company internal procedures for submitting a paper to a conference. These steps must be performed in order, with the exception of steps 3 (AFC) and 4 (TWP), which may be performed in parallel. Similarly, CALO can perform the task Apply For Clearance (AFC) by a plan consisting of: 1. Send Clearance Request (SCR) to Alices manager. 2. Wait For Response (WFR) from the manager. 3. Confirm that the response was positive, and fail otherwise. Now suppose that a change in circumstances causes Alice to reconsider her travel plans while she is writing the paper. Alice will no longer be able to attend IJCAI. She therefore instructs her CALO agent to abort the SMS task. Aborting the task implies aborting both the SMS plan and the AFC subplan. Aborting the first plan requires CALO to notify the paper number registry that the allocated paper number is obsolete, which it can achieve by the Cancel Paper Number (CPN) task.2 Aborting the second plan requires CALO to notify Alices manager that Alice no longer requires clearance for publication, which CALO can achieve by invoking the Cancel Clearance Request (CCR) task. We note a number of important observations from the example. First, the decision to abort a particular course of action can come from the internal deliberations of the agent (such as reasoning about priorities in a conflict over resources), or from external sources (such as another agent cancelling a commitment), as in this example. In this paper we only touch on the problem of determining whether a task or plan should be aborted, instead concentrating on determining the appropriate actions once this decision is made. Hence, our objective is to determine how to incorporate aborting mechanisms into the standard execution cycle rather than determine what should be aborted and when. Second, once the decision is made to abort the attempt to submit a paper, there are some actions the agent should take, such as cancelling the clearance request. In other words, aborting a task is not simply a matter of dropping the task and associated active plans: there are some clean up actions that may need to be done. This is similar to the case for failure, in that there may also be actions to take when a task or plan fails. In both cases, note that it is not simply a matter of the agent undo-ing its actions to date; indeed, this may be neither possible (since the agent acts in a situated world and its actions change world state) nor desirable (depending on the semantics of the task). Rather, cleaning up involves compensation via forward recovery actions [3]. Third, there is a distinction between aborting a task and aborting a plan. In the former case, it is clear that all plans being executed to perform the task should be aborted; in the latter case, it may be that there are better alternatives to the current plan and one of these should be attempted. Hence, plan aborting or failure does not necessarily lead to task aborting or failure. Fourth, given that tasks may contain sub-tasks, which may contain further sub-tasks, it is necessary for a parent task to wait until its children have finished their abort methods. This is the source of one of the technical challenges that we address: determining the precise sequence of actions once a parent task or plan is aborted. 3. ABORTING TASKS AND PLANS As we have alluded to, failure and aborting are related concepts. They both cause the execution of existing plans to cease and, consequentially, the agent to reflect over its current tasks and intentions. Failure and aborting, however, differ in the way they arise. In the case of failure, the trigger to cease execution of a task or plan comes from below, that is, the failure of sub-tasks or lower-level plans. In the case of aborting, the trigger comes from above, that is, the tasks and the parent plans that initiated a plan. In BDI-style systems such as JACK and SPARK, an agents domain knowledge includes a pre-defined plan library of plan clauses. Each plan clause has a plan body, which is a program (i.e., combination of primitive actions, sub-tasks, etc.) that can be executed in response to a task or other event should the plan clauses context condition be satisfied. The agent selects and executes instances of plan clauses to perform its tasks. There can be more than one applicable plan clause and, in the event that one fails, another applicable one may be attempted. Plans may have sub-tasks that must succeed 2 CALO needs only drop the TWA and TWP tasks to abort them: for the sake of simplicity we suppose no explicit clean up of its internal state is necessary. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 9 for the plan to succeed. In such systems, a plan failure occurs if one of the actions or sub-tasks within the plan fails. The agents action upon plan failure depends on its nature: for example, the agent may declare the task to have failed if one plan has been tried and resulted in failure, or it may retry alternate plans and declare (indeed, must declare) task failure only if all possible alternate plans to perform the task have been tried and resulted in failure. Observe that, while task failure can follow from plan failure or a sequence of plan failures, plan failure need not lead to task failure provided the agent can successfully complete an alternate plan. Moreover, task failure can also arise separately from plan failure, if the agent decides to abort the task. Our approach associates an abort-method with each plan. This enables the programmer to specify dedicated compensation actions according to how the agent is attempting to perform the task. Note that our abort-methods can be arbitrary programs and so can invoke tasks that may be performed dynamically in the usual BDI fashion, i.e., the clean-up is not limited to executing a predetermined set of actions. The question remains which abort-method should be invoked, and in what manner. Given the complexity of agent action spaces, it is not possible nor desirable to enumerate a static set of rules. Rather, the agent will invoke its abort-methods dynamically according to the state of execution and its own internal events. An alternative to attaching an abort-method to each plan is to attach such methods to each atomic action. We choose the former because: (1) action-level abort-methods would incur a greater overhead, (2) plans are meant to be designed as single cohesive units and are the unit of deliberation in BDI systems, and (3) the cleanup methods for failure in current systems are attached to plans. In order to understand how the agents abort processing should function, we consider three situations where it is sensible for an agent to consider aborting some of its tasks and plans: 1. When a task succeeds or fails because of an external factor other than the agent itself, the plan currently executed to perform the task should be aborted. For example, suppose company policy changes so that employees of Alices seniority automatically have clearance for publishing papers. Since Alice now has clearance for publishing her paper, CALO can abort the plan for Apply For Clearance. In doing so it must invoke the abort-method, in this case thus performing Cancel Clearance Request.3 2. When two or more sub-programs are executed in parallel, if one fails then the others should be aborted, given that the failure of one branch leads to the failure of the overall task. For example, suppose that part-way through writing the paper, Alice realizes that there is a fatal flaw in her results, and so notifies CALO that she will not be able to complete the paper by the deadline. The failure of the Track Writing Paper task should cause the Apply For Clearance task being executed in parallel to be aborted. 3. When an execution event alters the importance of an existing task or intention, the agent should deliberate over whether the existing plan(s) should continue. For example, suppose that Alice tasks CALO with a new, high-priority task to purchase a replacement laptop, but that Alice lacks enough funds to both purchase the laptop and to attend IJCAI. Reasoning over resource requirements [20, 10] will cause the agent to realize 3 If there is any difference between how to abort a task that is externally performed versus how to abort one that is now known to be impossible, the abort-method can detect the circumstances and handle the situation as appropriate. that it cannot successfully complete both tasks. Given that the new task has greater importance, a rational agent will evaluate its best course of action and may decide to abortor at least suspend - the existing task of submitting a paper and intentions derived from it [12]. The operational semantics we provide in Section 4 for aborting tasks and plans captures the first two situations above. The third situation involves deliberating over the importance of a task, which depends on various factors such as task priority. Although this deliberation is beyond the scope of this paper, it is a complementary topic of our future work. Note that the above situations apply to achievement goals, for which the task is completed when a particular state of the world is brought about (e.g., ensure we have clearance). Different forms of reasoning apply to other goal types [4] such as maintenance goals [1], where the goal is satisfied by maintaining a state of the world for some period of time (e.g., maintain $100 in cash). Abort Method Representation The intent of aborting a task or plan is that the task or plan and all its children cease to execute, and that appropriate clean-up methods are performed as required. In contrast to offline planning systems, BDI agents are situated: they perform online deliberation and their actions change the state of the world. As a result, the effects of many actions cannot be simply undone. Moreover, the undo process may cause adverse effects. Therefore, the clean-up methods that we specify are forward recovery procedures that attempt to ensure a stable state and that also may, if possible, recover resources. The common plan representation in BDI-style systems such as JACK and SPARK includes a failure-method, which is the designated clean-up method invoked when the plan fails. To this, we add the abort-method, which is invoked if the plan is to be aborted. In our example, the abort-method for the plan for Support Meeting Submission consists of invoking the sub-task Cancel Paper Number. The abort-method need not explicitly abort Apply For Clearance, because the agent will invoke the abort-method for the subtask appropriately, as we outline below. The assumption here is that, like the failure-method, the programmer of the agent system has the opportunity to specify a sensible abort-method that takes into consideration the point in the plan at which the abort is to be executed. For any plan, the abort-method is optional: if no abort-method is specified, the agent takes no specific action for this plan. However, the agents default behavioural rules still apply, for example, whether to retry an alternate plan for the parent task. Note that an explicit representation of the clean-up methods for tasks is not required, since tasks are performed by executing some plan or plans. Hence, aborting a task means aborting the current plan that is executed to perform that task, as we next describe. Abort Method Invocation We now informally lay out the agents action upon aborting plans and tasks. When a plan P is aborted: 1. Abort each sub-task that is an active child of P. An active child is one that was triggered by P and is currently in execution. 2. When there are no more active children, invoke the abort method of plan P. 3. Indicate a plan failure to TP , the parent task of P. We note here that if the parent task TP is not to be aborted then the agent may choose another applicable plan to satisfy TP . 10 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) When a task (or sub-task) T is aborted: 1. Abort the current active plan to satisfy T (if any). 2. When there are no more active child processes, drop the task. The agent thus no longer pursues T. 3. Note here that when the current active plan for performing T is aborted, no other applicable plans to perform T should be tried as it is the task that is to be aborted. In order to prevent infinitely cascading clean-up efforts, we assume that abort-methods will never be aborted nor fail. In reality, however, an abort-method may fail. In this case, lacking a more sophisticated handling mechanism, the agent simply stops executing the failed abort-method with no further deliberation. The assumption we make is thus not a reflection of the full complexity of reality, but one that is pragmatic in terms of the agent execution cycle; the approach to failure-handling of [21] makes the same assumption. In systems such as SPARK, the programmer can specify an alternative behaviour for a failed failure- or abort-method by means of meta-level procedures. We also assume that failure- and abort-methods terminate in finite time. 4. OPERATIONAL SEMANTICS We provide the semantics for the task and plan failure and aborting processes outlined above. We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the goal adoption and dropping mechanisms. The extensions also simplified the semantics in the earlier work. We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1. Following a presentation of the operational semantics of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present. 4.1 CAN Language CAN is a high-level agent language, in a spirit similar to that of AgentSpeak [15] and Kinnys Ψ [7], both of which attempt to extract the essence of a class of implemented BDI agent systems. CAN provides an explicit goal construct that captures both the declarative and procedural aspects of a goal. Goals are persistent in CAN in that, when a plan fails, another applicable plan is attempted. This equates to the default failure handling mechanism typically found in implemented BDI systems such as JACK [2]. In practical systems, tasks are typically translated into events that trigger the execution of some plans. This is also true in the CAN language, but, in order to maintain the persistence of goals, a goal construct is introduced. This is denoted by Goal ` φs, P, φf ´ , where φs is the success condition that determines when the goal is considered achieved, φf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once φs or φf become true. An agents behavior is specified by a plan library, denoted by Π, that consists of a collection of plan clauses of the form e : c ← P, where e is an event, c is a context condition (a logical formula over the agents beliefs that must be true in order for the plan to be applicable)4 and P is the plan body. The plan body is a program that is defined recursively as follows: P ::= act | +b | −b | ?φ | !e | P1; P2 | P1 P2 | Goal ` φs, P1, φf ´ | P1 P2 | {ψ1 : P1, . . . , ψn : Pn} | nil 4 An omitted c is equivalent to true. Δ = {ψiθ : Piθ | e : ψi ← Pi ∈ Π ∧ θ = mgu(e, e )} B, !e −→ B, Δ Event ψi : Pi ∈ Δ B |= ψi B, Δ −→ B, Pi Δ \\ {ψi : Pi} Select B, P1 −→ B, (P1 P2) −→ B, P2 fail B, P1 −→ B , P1 B, (P1; P2) −→ B , (P ; P2) Sequence B, P1 −→ B , P B, (P1 P2) −→ B , (P P2) Parallel1 B, P2 −→ B , P B, (P1 P2) −→ B , (P P1) Parallel2 Figure 1: Operational rules of CAN. where P1, . . . , Pn are themselves programs, act is a primitive action that is not further specified, and +b and −b are operations to add and delete beliefs. The belief base contains ground belief atoms in the form of first-order relations but could be orthogonally extended to other logics. It is assumed that well-defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ∪ {b}), and to delete a belief from a belief set (B \\ {b}). ?φ is a test for condition φ, and !e5 is an event6 that is posted from within the program. The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (Goal ` φs, P, φf ´ ). The above defines the user language. In addition, a set of auxiliary compound forms are used internally when assigning semantics to constructs. nil is the basic (terminating) program. When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 : P1, . . . , cn : Pn ). The other auxiliary compound form, , is a choice operator dual to sequencing: P1 P2 executes P1 and then executes P2 only if P1 failed. A summary of the operational semantics for CAN in line with [23] and following some of the simplifications of [17] is as follows. A basic configuration S = B, G, Γ consists of the current belief base B of the agent, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention). A transition S0 −→ S1 specifies that executing S0 for a single step yields configuration S1. S0 −→∗ Sn is the usual reflexive transitive closure of −→: Sn is the result of one or more singlestep transitions. A derivation rule S −→ Sr S −→ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator). Figure 1 gives some of the operational rules. The Event rule handles task events by collecting all relevant plan clauses for the event in question: for each plan clause e : ψi ← Pi, if there is a most general unifier, θ = mgu(e, e ) of e and the event in 5 Where it is obvious that e is an event we will sometimes exclude the exclamation mark for readability. 6 Typically an achievement goal. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 11 B |= φs B, Goal ` φs, P, φf ´ −→ B, true Gs B |= φf B, Goal ` φs, P, φf ´ −→ B, fail Gf P = Goal ` φs, P , φf ´ P = P1 £ P2 B |= φs ∨ φf B, P −→ B, Goal ` φs, P £ P , φf ´ GI P = P1 £ P2 B |= φs ∨ φf B, P1 −→ B , P B, Goal ` φs, P, φf ´ −→ B , Goal ` φs, P £ P2, φf ´ GS P = P1 £ P2 B |= φs ∨ φf P1 ∈ {true, fail} B, Goal ` φs, P, φf ´ −→ B, Goal ` φs, P2 £ P2, φf ´ GR Figure 2: Rules for goals in CAN. question, then the rule constructs a guarded alternative ψiθ : Piθ. The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives: program P Δ states that program P should be tried first, falling back to the remaining alternatives, Δ \\ P, if necessary. This rule and the fail rule together are used for failure handling: if the current program Pi from a plan clause for a task fails, rule fail is applied first, and then if possible, rule Select will choose another applicable alternative for the task if one exists. Rule Sequence handles sequencing of programs in the usual way. Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel. Figure 2 gives simplified rules for dealing with goals, in line with those presented in [17]. The first rule states that a goal succeeds when φs become true; the second rule states that a goal fails when φf become true. The third rule GI initializes the execution of a goal-program by updating the goal base and setting the program in the goal to P £ P; the first P is to be executed and the second P is used to keep track of the original program for the goal. The fourth rule GS executes a single step of the goal-program. The final rule GR restarts the original program (encoded as P2 of pair P1 £ P2) whenever the current program is finished but the desired and still possible goal has not yet been achieved. 4.2 Aborting Intentions and Handling Failure We next introduce the ability to specify handler programs, in the form of failure- and abort-methods, that deal with the clean-up required when a given program respectively fails or is aborted. We do not associate failure- and abort- methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies failure- and abort- methods for an arbitrary program. The FAb(P, PF , PA) construct executes the program P. Should P fail, it executes the failure handling program PF ; should P need to be aborted, it executes the abort handling program PA. Thus to add failure- and abort- methods PF and PA to a plan clause e : c ← P, we write e : c ← FAb(P, PF , PA). With the introduction of the ability to abort programs, we modify the parallel construct to allow the failure of one branch to abort the other. We must take into consideration the possible existence of abort-methods in the aborted branch. Similarly, with the Goal construct we can no longer completely abandon the program the goal contains as soon as the success or failure condition holds; we must now take into consideration the existence of any abort-methods applicable to the program. We provide the semantics of an augmented agent language containing the FAb construct by defining a source transformation, similar to macro-expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN. The one non-standard extension to CAN is a wait-until-condition construct. We explain this simple modification of the parallel construct below when we come to translation of the Goal construct. First we describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases: the FAb, parallel, and Goal constructs. A key issue is that the FAb constructs may be nested, either directly or indirectly. Let us call each instantiation of the construct at execution time a possible abort point (pap). Where these constructs are nested, it is important that before the failure- or abort-method of a parent pap is executed, the failure- or abort-methods programs of the children paps are executed first, as described earlier in Section 3. The need to coordinate the execution of the abort-methods of nested paps requires that there be some way to identify the parents and children of a particular pap. We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e : c ← P with a plan clause e(v) : c ← μv(P) where v is a free variable, not previously present in the plan clause. This variable is used to keep track of the context of execution. The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context. For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1]. We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51. This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v . For most CAN constructs, the context variable is unused or passed unchanged: μv(act) = act μv(+b) = +b μv(−b) = −b μv(nil) = nil μv(!e) = !e(v) μv(P1; P2) = μv(P1); μv(P2) μv(P1 P2) = μv(P1) μv(P2) μv( ψ1 : P1, . . . , ψn : Pn ) = ψ1 : μv(P1), . . . , ψn : μv(Pn) It remains to specify the transformation μv(·) in three cases: the FAb, parallel, and Goal constructs. These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context. Let us introduce the primitive action prependID(v, v ) that creates a new pap identifier and prepends it to list v giving list v . We also introduce the following predicates: • a(v) - the pap v is currently active. • abort(v) - the pap v should be aborted (after aborting all of its descendants). 7 An alternative would be to use meta-level predicates that reflect the current state of the intention structure. 12 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) • f(v) - the program of pap v has failed. • ancestorof(v, v ) ≡ v = v ∨ ancestorof(v, tail(v ))the pap v is an ancestor of pap v . • nac(v) ≡ ¬∃v .(a(v ) ∧ ancestorof(v, v ) ∧ v = v ) - v has no active children. • sa(v) ≡ ∃v .abort(v ) ∧ ancestorof(v , v) - we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active. • san(v) ≡ sa(v) ∧ nac(v) - we should abort v now if we should abort v and v has no active children. First let us consider the case of the FAb construct. The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v. We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context. We need to make sure that we retract the belief that v is active at the end, i.e., −a(v ). We use the Goal construct to allow us to drop the execution of a program within a pap v when it is necessary to abort. While executing the program P, we know that we need to drop P and invoke its abort-method if some ancestor of P has been told to abort. This is represented by the predicate sa(v ) being true. However, we need to make sure that we do this only after every child pap has had the chance to invoke its abort-method and all these abort-methods have completed: if we drop the program too soon, then execution of the abort-methods of the children will also be dropped. Therefore, the condition we actually use in the Goal construct to test when to drop the program is san(v ). This condition relies on the fact that as the children paps complete, they remove the relevant a facts. Our use of the Goal construct is for its ability to drop the execution of a program when conditions are met. To leave aside the repeat execution until a condition is met aspect, we must ensure that the success or failure condition of the construct is satisfied once the execution of the program succeeds or fails. We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on failure, and by having the appropriate success and failure conditions on the Goal. Hence, if the Goal construct fails, then the program either was aborted or it failed. We invoke the relevant failure- or abort- method, retract the a(v ) fact, and then fail. Putting all this together, we formally define μv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agents plan library: prependID(v, v ); +a(v ); Goal ( ¬a(v ), (μv (P); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); μv(PA)) μv(PF )); −a(v ); ?false) Second, we must transform the parallel operator to ensure that the failure of one branch safely aborts the other. Here we construct two new contexts, v and v , from the existing context v. If one branch fails, it must abort the other branch. At the end, if either branch was aborted, then we must fail. Let v and v be new variables distinct from any other in the agents plan library. We define μv(P1 P2) to be: prependID(v, v ); prependID(v, v ); +a(v ); +a(v ); ( Goal (¬a(v ), (μv (P1); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal (¬a(v ), (μv (P2); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ); ?¬abort(v ) ∧ ¬abort(v ) Finally, we need to modify occurrences of the Goal construct in two ways: first, to make sure that the abort handling methods are not bypassed when the success or failure conditions are satisfied, and second, to trigger the aborting of the contained program when either the success or failure conditions are satisfied. To transform the Goal construct we need to extend standard CAN with a wait-until-condition construct. The construct φ : P does not execute P until φ becomes true. We augment the CAN language with the following rules for the guard operator :: B |= φ B, G, (φ : P −→ B, G, P :true B |= φ B, G, (φ : P) −→ B, G, (φ : P) :false In order to specify μv(Goal ` φs, P, φf ´ ), we generate a new pap and execute the program within the Goal construct in this new context. We must ensure that belief a(v ) is removed whether the Goal succeeds or fails. We shift the success and failure condition of the Goal construct into a parallel branch using the wait-until-condition construct, and modify the Goal to use the should abort now condition san(v ) as the success condition. The waiting branch will trigger the abort of the program should either the success or failure condition be met. To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active. Let v be a new variable distinct from any other in the agents plan library. We define μv(Goal ` φs, P, φf ´ ) to be: prependID(v, v ); +a(v ); ( Goal ( san(v ), μv (P), false) ; −a(v ); ?φs ) φs ∨ φf ∨ ¬a(v ) : +abort(v ) ) The program P will be repeatedly executed until san(v ) becomes true. There are two ways this can occur. First, if either the success condition φs or the failure condition φf becomes true, then the second branch of the parallel construct executes. This causes abort(v ) to become true, and, after the descendant paps abortmethods are executed, san(v ) becomes true. In this case, P is now dropped, the a(v ) is removed, and the entire construct succeeds or fails based on φs. The second way for san(v ) to become true is if v or one of its ancestors is aborted. In this case, once the descendant paps abort-methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming φs is false). 4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2. We will express tasks by events, for example, the task Allocate a Paper Number we express as the event APN. Let the output of the Apply For Clearance task be Y or N, indicating the approval or not of Alices manager, respectively. Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively: SMS(m) : isconf(m) ← FAb(!APN; !TWA; (!AFC !TWP); !HPS, !CPN, !CPN) AFC : true ← FAb(!SCR; !WFR(r); ?r = Y, nil, !CCR) Note that Support Meeting Submission has a parameter m, the meeting of interest (IJCAI, in our example), while Apply For Clearance has no parameters. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two. Let v and v denote new variables. Then we have as the translated plan clause: AFC(v ) : true ← prependID(v , v ); +a(v ); Goal ( ¬a(v ), (!SCR(v ); !WFR(r, v ); ?r = Y; −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CCR(v )) nil); −a(v ); ?false) We can see that an extra context parameter has been added to each task and that the old plan body now appears inside a Goal construct. Should the old plan body succeed, belief a(v ) is retracted, causing the Goal to succeed. If the old plan body fails, or if the task is to be aborted, the Goal construct fails. This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and failure. The translation of the first plan clause, for SMS, is more complex, because of the parallel construct that introduces nested paps: SMS(m, v) : isconf(m) ← prependID(v, v ); +a(v ); Goal ( ¬a(v ), ((!APN(v ); !TWA(v ); prependID(v , v ); prependID(v , v ); +a(v ); +a(v ); ( Goal ( ¬a(v ), (!AFC(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal ( ¬a(v ), (!TWP(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ) ; ?¬abort(v ) ∧ ¬abort(v ); !HPS(v ); −a(v )) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CPN(v)) !CPN(v)); −a(v ); ?false) Here we can see that if the task !TWP(v ) fails then f(v ) will be asserted, failing the Goal construct that contains it, and leading to abort(v ) being asserted. If the !WFR(r, v ) task in the expansion of !AFC(v ) is still executing and has no active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true. This set of conditions will cause the Goal construct in the first plan clause to fail, dropping execution of !WFR(r, v ). The task !CCR(v ) will be executed. Once this task completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first Goal construct of the second plan clause to fail. While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely automated, according to the rules set out in Section 4.2. The translated plan clauses, with the semantics of CAN augmented by our waituntil-condition construct, thus specify the operation of the agent to handle both failure and aborting for the example. 5. RELATED WORK Plan failure is handled in the extended version of AgentSpeak found in the Jason system [6]. Failure clean-up plans are triggered from goal deletion events −!g. Such plans, similar to our failure methods, are designed for the agent to effect state changes (act to undo its earlier actions) prior to possibly attempting another plan to achieve the failed goal g. Given Jasons constructs for dropping a goal with an indication of whether or not to try an alternate plan for it, H¨ubner et al. [6] provide an informal description of how a Jason agent modifies its intention structure when a goal failure event occurs. In a goal deletion plan, the programmer can specify any undo actions and whether to attempt the goal again. If no goal deletion plan is provided, Jasons default behaviour is to not reattempt the goal. Failure handling is applied only to plans triggered by addition of an achievement or test goal; in particular, goal deletion events are not posted for failure of a goal deletion plan. Further, the informal semantics of [6] do not consider parallel sub-goals (i.e., the CAN construct), since such execution is not part of Jasons language. The implementation of H¨ubner et al. [6] requires Jasons internal actions. A requirement for implementing our approach is a reflective capability in the BDI agent implementation. Suitable implementations of the BDI formalism are JACK [2], Jadex [14], and SPARK [9]. All three allow meta level methods that are cued by meta events such as goal adoption or plan failure, and offer introspective capabilities over goal and intention states. Such meta level facilities are also required by the approach of Unruh et al. [21], who define goal-based semantic compensation for an agent. Failure-handling goals are invoked according to failurehandling strategy rules, by a dedicated agent Failure Handling Component (FHC) that tracks task execution. These goals are specified by the agent programmer and attached to tasks, much like our FAb(P, PF , PA) construct associates failure and abort methods with a plan P. Note, however, that in contrast to both [6] and our semantics, [21] attach the failure-handling knowledge at the goal, not plan, level. Their failure-handling goals may consist of stabilization goals that perform localized, immediate clean-up to restore the agents state to a known, stable state, and compensation goals that perform undo actions. Compensation goals are triggered on aborting a goal, and so not necessarily on goal failure (i.e., if the FHC directs the agent to retry the failed goal and the retry is successful). The FHC approach is defined at the goal level in order to facilitate abstract specification of failure-handling knowledge; the FHC decides when to address a failure and what to do (i.e., what failurehandling goals to invoke), separating this knowledge from the how of implementing corrective actions (i.e., what plan to execute to meet the adopted failure-handling goal). This contrasts with simplistic plan-level failure handling in which the what and how are intermingled in domain task knowledge. While our approach is defined at the plan level, our extended BDI semantics provides for the separation of execution and failure handling. Further, the FHC explicitly maintains data structures to track agent execution. We leverage the existing execution structures and self-reflective ability of a BDI agent to accomplish both aborting and failure handling without additional overhead. FHCs failure-handling strategy rules (e.g., whether to retry a failed goal) are replaced by instructions in our PF and PA plans, together with meta-level default failure handlers according to the agents nature (e.g., blindly committed). The FHC approach is independent of the architecture of the agent itself, in contrast to our work that is dedicated to the BDI formalism (although not tied to any one agent system). Thus no formal semantics are developed in [21]; the FHCs operation is given as 14 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) a state-based protocol. This approach, together with state checkpointing, is used for multi-agent systems in [22]. The resulting architecture embeds their failure handling approach within a pair processing architecture for agent crash recovery. Other work on multi-agent exception handling includes AOEXs distributed exception handling agents [5], and the similar sentinels of [8]. In both cases, failure-handling logic and knowledge are decoupled from the agents; by contrast, while separating exception handling from domain-specific knowledge, Unruh et al.s FHC and our approach both retain failure-handling logic within an agent. 6. CONCLUSION AND FUTURE WORK The tasks and plans of an agent may not successfully reach completion, either by the choice of the agent to abort them (perhaps at the request of another agent to do so), or by unbidden factors that lead to failure. In this paper we have presented a procedure-based approach that incorporates aborting tasks and plans into the deliberation cycle of a BDI-style agent, thus providing a unified approach to failure and abort. Our primary contribution is an analysis of the requirements on the operation of the agent for aborting tasks and plans, and a corresponding operational semantics for aborting in the abstract agent language CAN. We are planning to implement an instance of our approach in the SPARK agent system [9]; in particular, the work of this paper will be the basis for SPARKs abort handling mechanism. We are also developing an analysis tool for our extended version of CAN as a basis for experimentation. An intelligent agent will not only gracefully handle unsuccessful tasks and plans, but also will deliberate over its cognitive attitudes to decide its next course of action. We have assumed the default behaviour of a BDI-style agent, according to its nature: for instance, to retry alternatives to a failed plan until one succeeds or until no alternative plans remain (in which case to fail the task). Future work is to place our approach in service of more dynamic agent reasoning, such as the introspection that an agent capable of reasoning over task interaction effects and resource requirements can accomplish [19, 12]. Related to this is determining the cost of aborting a task or plan, and using this as an input to the deliberation process. This would in particular influence the commitment the agent has towards a particular task: the higher the cost, the greater the commitment. Our assumption that abort-methods do not fail, as discussed above, is a pragmatic one. However, this is an issue worthy of further exploration, either to develop weaker assumptions that are also practical, or to analyze conditions under which our assumption is realistic. A further item of interest is extending our approach to failure and abort to maintenance goals [1]. For such goals a different operational semantics for abort is necessary than for achievement goals, to match the difference in semantics of the goals themselves. Acknowledgements We thank Lin Padgham and the anonymous reviewers for their comments. The first author acknowledges the support of the Australian Research Council and Agent Oriented Software under grant LP0453486. The work of the two authors at SRI International was supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No. NBCHD030010. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the view of DARPA or the Department of Interior-National Business Center. 7. REFERENCES [1] L. Braubach, A. Pokahr, D. Moldt, and W. Lamersdorf. Goal representation for BDI Agent systems. In Proc. of Second Intl. Workshop on Programming Multi-Agent Systems (ProMAS04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson, and A. Lucas. JACK intelligent agents - components for intelligent agents in Java. AgentLink News, Issue 2, 1999. [3] M. G. Chessell, C. Vines, D. Butler, C. M. Ferreira, and P. Henderson. Extending the concept of transaction compensation. IBM Systems Journal, 41(4), 2002. [4] M. Dastani, M. B. van Riemsdijk, and J.-J. C. Meyer. Goal types in agent programming. In Proc. of AAMAS06, 2006. [5] S. Entwisle, S. Loke, S. Krishnaswamy, and E. Kendall. Aoex: An agent-based exception handling framework for building reliable, distributed, open software systems. In Proc. of Seventh Joint Conf. on Knowledge-Based Software Engineering, 2006. [6] J. F. H¨ubner, R. H. Bordini, and M. Wooldridge. Programming declarative goals using plan patterns. In Proc. of 4th Intl. Workshop on Declarative Agent Languages and Technologies, 2006. [7] D. Kinny. The Psi calculus: an algebraic agent language. In Proc. of ATAL01, 2001. [8] M. Klein, J. A. Rodr´ıguez-Aguilar, and C. Dellarocas. Using domain-independent exception handling services to enable robust open multi-agent systems: The case of agent death. Autonomous Agents and Multi-Agent Systems, 7(1-2):179-189, 2003. [9] D. Morley and K. Myers. The SPARK agent framework. In Proc. of AAMAS04, 2004. [10] D. Morley, K. L. Myers, and N. Yorke-Smith. Continuous refinement of agent resource estimates. In Proc. of AAMAS06, 2006. [11] K. Myers, P. Berry, J. Blythe, K. Conley, M. Gervasio, D. McGuinness, D. Morley, A. Pfeffer, M. Pollack, and M. Tambe. An intelligent personal assistant for task and time management. AI Magazine, 28, 2007. To appear. [12] K. L. Myers and N. Yorke-Smith. A cognitive framework for delegation to an assistive user agent. In Proc. of AAAI 2005 Fall Symposium on Mixed-Initiative Problem-Solving Assistants, 2005. [13] L. Padgham and M. Winikoff. Developing Intelligent Agent Systems: A Practical Guide. John Wiley and Sons, 2004. [14] A. Pokahr, L. Braubach, and W. Lamersdorf. Jadex: A BDI reasoning engine. In R. Bordini, M. Dastani, J. Dix, and A. E. F. Seghrouchni, editors, Multi-Agent Programming. Springer, 2005. [15] A. S. Rao. AgentSpeak(L): BDI agents speak out in a logical computable language. In Proc. of Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World, 1996. [16] A. S. Rao and M. P. Georgeff. An abstract architecture for rational agents. In Proc. of KR92, 1992. [17] S. Sardi˜na, L. de Silva, and L. Padgham. Hierarchical planning in BDI agent programming languages: a formal approach. In Proc. of AAMAS06, 2006. [18] S. Sardina and L. Padgham. Goals in the context of bdi plan failure and planning. In Proc. of AAMAS07, 2007. [19] J. Thangarajah, L. Padgham, and M. Winikoff. Detecting and exploiting positive goal interaction in intelligent agents. In Proc. of AAMAS03, 2003. [20] J. Thangarajah, M. Winikoff, L. Padgham, and K. Fischer. Avoiding resource conflicts in intelligent agents. In Proc. of ECAI-02, 2002. [21] A. Unruh, J. Bailey, and K. Ramamohanarao. A framework for goal-based semantic compensation in agent systems. In Proc. of First Intl. Workshop on Safety and Security in Multi-Agent Systems, 2004. [22] A. Unruh, H. Harjadi, J. Bailey, and K. Ramamohanarao. Semantic-compensation-based recovery management in multi-agent systems. In Proc. of Second IEEE Symposium on Multi-Agent Security and Survivability (IEEE MAS&S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland, and J. Thangarajah. Declarative and procedural goals in intelligent agent systems. In Proc. of KR02, 2002. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 15",
    "original_translation": "Aborto de tareas en los agentes de BDI John Thangarajah, James Harland RMIT University Melbourne, Australia {Johthan, jah}@cs.rmit.edu.au David Morley, Neil Yorke-Smith Centro de Inteligencia Artificial, Sri International Menlo Park, CA 94025 U.S.A. {Morley,,nysmith}@ai.sri.com Resumen Los agentes inteligentes que están destinados a trabajar en entornos dinámicos deben poder manejar con gracia tareas y planes sin éxito. Además, tales agentes deberían poder tomar decisiones racionales sobre un curso de acción apropiado, que puede incluir abortar una tarea o plan, ya sea como resultado de las propias deliberaciones de los agentes, o potencialmente a pedido de otro agente. En este artículo investigamos la incorporación de abortos en una arquitectura de estilo BDI. Discutimos algunas condiciones bajo las cuales es apropiado abortar una tarea o plan, y cómo determinar las consecuencias de dicha decisión. Aumentamos cada plan con un método de aborto opcional, análogo al método de falla que se encuentra en algunos lenguajes de programación de agentes. Proporcionamos una semántica operativa para el ciclo de ejecución en presencia de abortos en el lenguaje de agente abstracto, lo que nos permite especificar un modelo de ejecución basado en BDI sin limitar nuestra atención a un sistema de agente particular (como Jack, Jadex, Jason,o chispa). Un desafío técnico clave que abordamos es la presencia de hilos de ejecución paralela y de sub-tareas, que requieren que el agente garantice que los métodos de aborto para cada plan se lleven a cabo en una secuencia apropiada. Categorías y descriptores de sujetos I.2.11 [Inteligencia artificial]: Agentes de inteligencia artificiales distribuidos-Inteligentes Términos generales Diseño, confiabilidad, teoría 1. Introducción Los agentes inteligentes generalmente trabajan en entornos complejos y dinámicos, como el control del tráfico aéreo o la navegación de robots, en los que no se puede garantizar el éxito de ninguna acción o plan en particular [13]. En consecuencia, tratar con el fracaso es fundamental para la programación de agentes, y es un elemento importante de las características del agente, como la robustez, la flexibilidad y la persistencia [21]. En las arquitecturas de los agentes inspiradas en el modelo de creencia-intención-intención (BDI) [16], estas propiedades a menudo se caracterizan por las interacciones entre creencias, objetivos y planes [2] .1 En general, un agente que desea lograr un particularEl conjunto de tareas buscará varios planes simultáneamente. Cuando ocurran fallas, se revisará la elección de los planes. Esto puede implicar buscar planes alternativos para una tarea en particular, volver a programar tareas para cumplir mejor con las limitaciones de recursos, eliminar algunas tareas o alguna otra decisión que aumente la probabilidad de éxito [12, 14]. Las fallas pueden ocurrir por varias razones, y a menudo no es posible predecirlas por adelantado, ya sea debido a la complejidad del sistema o porque los cambios en el entorno invalidan algunas decisiones anteriores. Dada esta necesidad de deliberación sobre tareas o planes fallidos, la deliberación de fallas se integra comúnmente en el ciclo de ejecución de los agentes. Además de lidiar con el fracaso, una capacidad importante de un agente inteligente es poder abortar una tarea o plan en particular. Esta decisión puede deberse a una deliberación interna (como el agente que cree que la tarea ya no se puede lograr, o que una tarea conflictiva ahora tiene una prioridad más alta) o debido a un factor externo (como otro agente que altere un compromiso o un compromiso oun cambio en el entorno). Abortar una tarea o plan es distinto de su falla. La falla refleja una incapacidad para realizar y no niega la necesidad de funcionar; por ejemplo, una respuesta razonable a la falla puede ser intentarlo nuevamente. En contraste, abortar no dice nada sobre la capacidad de actuar;Simplemente elimina la necesidad. La falla se propaga de abajo hacia arriba, mientras que abortarse se propaga de arriba hacia abajo. El potencial para ejecutar simultáneamente los subplans introduce diferentes complejidades para abortar y fallar. Para abortar, significa que los subplans concurrentes múltiples pueden necesitar ser abortados a medida que el aborto se propaga hacia abajo. Para el fracaso, significa que los planes de hermanas paralelo pueden necesitar ser abortados a medida que se propaga la falla. Ha habido una cantidad considerable de trabajo en fallas del plan (como detectar y resolver conflictos de recursos [20, 10]) y la mayoría de los sistemas de agentes incorporan alguna noción de manejo de fallas. Sin embargo, ha habido relativamente poco trabajo en el desarrollo de técnicas de abortes más allá de la simple caída de planes y tareas actualmente previstos, que no se ocupan de la limpieza requerida. Como consecuencia, la mayoría de los sistemas de agentes son bastante limitados en su tratamiento de la situación en la que una rama de una construcción paralela 1 se puede considerar ambas tareas que se realizarán y los objetivos para lograr un cierto estado del mundo. Una tarea puede considerarse un objetivo de lograr el estado de la tarea que se ha realizado, y un objetivo puede considerarse una tarea de lograr ese estado del mundo. Adoptamos la última vista y usamos la tarea para referirnos también a los objetivos.8 978-81-904262-7-5 (RPS) c 2007 Ifaamas falla (los enfoques comunes incluyen dejar que la otra rama funcione hasta la finalización sin obstáculos o deja caerlo por completo). En este artículo discutimos en detalle la incorporación de los métodos de limpieza de abortes en el ciclo de ejecución del agente, proporcionando un enfoque unificado para la falla y el aborto. Una característica clave de nuestro enfoque basado en el procedimiento es que permitimos que cada plan ejecute algún código particular en una falla y en un aborto. Esto permite que un plan intente garantizar un estado estable y conocido, y posiblemente recuperar algunos recursos y limpiar antes de salir. En consecuencia, un desafío técnico central es administrar la ejecución ordenada del código de limpieza apropiado. Mostramos cómo los abortos pueden introducirse sin problemas en una arquitectura de estilo BDI, y por primera vez damos una semántica operativa para abortar en el lenguaje de agente abstracto. Esto nos permite especificar un nivel de detalle apropiado para el modelo de ejecución, sin centrarnos en las construcciones específicas de cualquier sistema de agente como Jack [2], Jadex [14], Jason [6] o Spark [9]. Nuestro enfoque está en un solo agente, complementario al trabajo relacionado que considera el manejo de excepciones para sistemas individuales y multiagentes (por ejemplo, [22, 5, 6]). Este artículo está organizado de la siguiente forma: En la Sección 2 damos un ejemplo de las consecuencias de abortar una tarea, y en la Sección 3 discutimos algunas circunstancias bajo las cuales deben ocurrir los abortos, y los procedimientos de representación e invocación apropiados. En la Sección 4 mostramos cómo podemos usar Can para especificar formalmente el comportamiento de un plan abortado. La Sección 5 discute el trabajo relacionado, y en la Sección 6 presentamos nuestras conclusiones y trabajo futuro.2. Ejemplo motivador Alice es una trabajadora de conocimiento asistida por un agente de asistencia personal, como CALO [11]. Alice planea asistir a la conferencia IJCAI más adelante en el año, y su agente de CALO adopta la tarea de presentación de la reunión de apoyo (SMS) para ayudarla. El plan CALOS para una tarea de SMS en el caso de una presentación de la conferencia consiste en las siguientes subasinas: 1. Asignar un número de papel (APN) para ser utilizado para fines administrativos en la Compañía.2. Track Writing Resumen (TWA): Realice un seguimiento del progreso de Alices en la preparación de un resumen.3. Solicite la autorización (AFC) para su publicación de Alices Manager en base a los detalles del resumen y la conferencia.4. Papel de escritura de pistas (TWP): Realice un seguimiento del progreso de Alices al escribir el documento.5. Manejar la presentación en papel (HPS): siga los procedimientos internos de la compañía para enviar un documento a una conferencia. Estos pasos deben realizarse en orden, con la excepción de los pasos 3 (AFC) y 4 (TWP), que pueden realizarse en paralelo. Del mismo modo, CALO puede realizar la tarea aplicada para la autorización (AFC) mediante un plan que consiste en: 1. Envíe la solicitud de despacho (SCR) al gerente de Alices.2. Espere la respuesta (WFR) del gerente.3. Confirme que la respuesta fue positiva y falló de lo contrario. Ahora suponga que un cambio en las circunstancias hace que Alice reconsidere sus planes de viaje mientras escribe el periódico. Alice ya no podrá asistir a IJCAI. Por lo tanto, le indica a su agente de CALO que aborte la tarea de SMS. Abortar la tarea implica abortar tanto el plan SMS como el subplan de la AFC. El aborto del primer plan requiere que CALO notifique al registro del número de papel que el número de papel asignado es obsoleto, lo que puede lograr con la tarea de número de papel de cancelación (CPN ).2 El aborto del segundo plan requiere que CALO notifique a Alices que Alice ya no requiereLa autorización para la publicación, que CALO puede lograr invocando la tarea de solicitud de autorización de cancelación (CCR). Observamos una serie de observaciones importantes del ejemplo. Primero, la decisión de abortar un curso de acción particular puede provenir de las deliberaciones internas del agente (como el razonamiento sobre las prioridades en un conflicto sobre los recursos), o de fuentes externas (como otro agente que cancela un compromiso), como en estoejemplo. En este artículo solo tocamos el problema de determinar si una tarea o un plan debe ser abortado, en lugar de concentrarnos en determinar las acciones apropiadas una vez que se toma esta decisión. Por lo tanto, nuestro objetivo es determinar cómo incorporar mecanismos de aborto en el ciclo de ejecución estándar en lugar de determinar qué debe ser abortado y cuándo. En segundo lugar, una vez que se toma la decisión de abortar el intento de enviar un documento, hay algunas acciones que el agente debe tomar, como cancelar la solicitud de autorización. En otras palabras, abortar una tarea no es simplemente una cuestión de eliminar la tarea y los planes activos asociados: hay algunas acciones de limpieza que deben hacerse. Esto es similar al caso de falla, ya que también puede haber acciones que tomar cuando falla una tarea o plan. En ambos casos, tenga en cuenta que no se trata simplemente de que el agente deshace sus acciones hasta la fecha;De hecho, esto no es posible (ya que el agente actúa en un mundo situado y sus acciones cambian el estado mundial) ni deseable (dependiendo de la semántica de la tarea). Más bien, la limpieza implica una compensación a través de acciones de recuperación hacia adelante [3]. Tercero, hay una distinción entre abortar una tarea y abortar un plan. En el primer caso, está claro que todos los planes ejecutados para realizar la tarea deben ser abortados;En el último caso, puede ser que haya mejores alternativas al plan actual y se debe intentar una de ellas. Por lo tanto, el plan de aborto o falla no necesariamente conduce al aborto o al fracaso de la tarea. Cuarto, dado que las tareas pueden contener subtareas, que pueden contener más subcartas, es necesario que una tarea principal espere hasta que sus hijos hayan terminado sus métodos de aborto. Esta es la fuente de uno de los desafíos técnicos que abordamos: determinar la secuencia precisa de acciones una vez que se aborta una tarea o plan principal.3. Abortar tareas y planes a la que hemos aludido, el fracaso y el aborto son conceptos relacionados. Ambos causan la ejecución de los planes existentes para cesar y, en consecuencia, el agente refleja sobre sus tareas e intenciones actuales. La falla y el aborto, sin embargo, difieren en la forma en que surgen. En el caso de la falla, el desencadenante de cesar la ejecución de una tarea o plan viene de abajo, es decir, la falla de las subasinas o los planes de nivel inferior. En el caso de abortar, el desencadenante proviene de arriba, es decir, las tareas y los planes matriz que iniciaron un plan. En los sistemas de estilo BDI como Jack y Spark, un conocimiento de dominio de agentes incluye una biblioteca de planes de plan de planes predefinidos. Cada cláusula del plan tiene un cuerpo del plan, que es un programa (es decir, una combinación de acciones primitivas, sub-tareas, etc.) que se puede ejecutar en respuesta a una tarea u otro evento en caso de que se cumpla la condición de contexto de las cláusulas del plan. El agente selecciona y ejecuta instancias de cláusulas del plan para realizar sus tareas. Puede haber más de una cláusula de plan aplicable y, en el caso de que uno falle, se puede intentar otro aplicable. Los planes pueden tener subasinas que deben tener éxito 2 necesidades de CALO solo deja caer las tareas TWA y TWP para abortarlas: en aras de la simplicidad, suponemos que no es necesaria una limpieza explícita de su estado interno. El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 9 para que el plan tenga éxito. En tales sistemas, se produce una falla del plan si una de las acciones o subasinas dentro del plan falla. La acción de los agentes al falla del plan depende de su naturaleza: por ejemplo, el agente puede declarar que la tarea ha fallado si un plan ha sido juzgado y resultó en una falla, o puede volver a intentar los planes alternativos y declarar (de hecho, debe declarar) falla de la tareaSolo si todos los planes alternativos posibles para realizar la tarea se han probado y han resultado en una falla. Observe que, si bien la falla de la tarea puede seguir de la falla del plan o una secuencia de fallas del plan, la falla del plan no es necesario que la falla de la tarea siempre que el agente pueda completar con éxito un plan alternativo. Además, la falla de la tarea también puede surgir por separado de la falla del plan, si el agente decide abortar la tarea. Nuestro enfoque asocia un método de aborto con cada plan. Esto permite al programador especificar acciones de compensación dedicadas de acuerdo con cómo el agente intenta realizar la tarea. Tenga en cuenta que nuestros métodos de aborto pueden ser programas arbitrarios y, por lo tanto, pueden invocar tareas que pueden realizarse dinámicamente de la manera habitual de BDI, es decir, la limpieza no se limita a ejecutar un conjunto predeterminado de acciones. La pregunta sigue siendo qué método de aborto debe invocarse y de qué manera. Dada la complejidad de los espacios de acción del agente, no es posible ni deseable enumerar un conjunto estático de reglas. Más bien, el agente invocará sus métodos abortados dinámicamente de acuerdo con el estado de ejecución y sus propios eventos internos. Una alternativa a unir un método de aborto a cada plan es adjuntar tales métodos a cada acción atómica. Elegimos el primero porque: (1) los métodos de aborto a nivel de acción incurrirían en una sobrecarga mayor, (2) los planes están destinados a ser diseñados como unidades cohesivas únicas y son la unidad de deliberación en los sistemas BDI, y (3) la limpiezaLos métodos de falla en los sistemas actuales se adjuntan a los planos. Para comprender cómo los agentes abortan el procesamiento, consideramos tres situaciones en las que es sensato que un agente considere abortar algunas de sus tareas y planes: 1. Cuando una tarea tiene éxito o falla debido a un factor externo que no sea el agente en sí, el plan actualmente ejecutado para realizar la tarea debe ser abortado. Por ejemplo, suponga que la política de la compañía cambia para que los empleados de Alices de antigüedad tengan automáticamente la autorización para publicar documentos. Como Alice ahora tiene autorización para publicar su artículo, Calo puede abortar el plan de solicitar autorización. Al hacerlo, debe invocar el método de aborto, en este caso, realizando así una solicitud de autorización de cancelación.3 2. Cuando se ejecutan dos o más subprogramas en paralelo, si uno falla, los otros deben ser abortados, dado que la falla de una rama conduce a la falla de la tarea general. Por ejemplo, supongamos que a la mitad de la escritura del documento, Alice se da cuenta de que hay un defecto fatal en sus resultados, y por lo tanto, notifica a Calo que no podrá completar el documento antes de la fecha límite. La falla de la tarea de papel de escritura de seguimiento debe hacer que la solicitud de autorización se ejecute en paralelo sea abortada.3. Cuando un evento de ejecución altera la importancia de una tarea o intención existente, el agente debe deliberar sobre si los planes existentes deben continuar. Por ejemplo, suponga que Alice asigna a Calo con una nueva tarea de alta prioridad para comprar una computadora portátil de reemplazo, pero que Alice carece de fondos suficientes para comprar la computadora portátil y asistir a IJCAI. El razonamiento sobre los requisitos de recursos [20, 10] hará que el agente se realice 3 si hay alguna diferencia entre cómo abortar una tarea que se realiza externamente versus cómo abortar uno que ahora se sabe que es imposible, el mébalio de abortes puede detectarlas circunstancias y manejar la situación según corresponda.que no puede completar con éxito ambas tareas. Dado que la nueva tarea tiene mayor importancia, un agente racional evaluará su mejor curso de acción y puede decidir abortar al menos suspender, la tarea existente de enviar un documento e intenciones derivadas de él [12]. La semántica operativa que proporcionamos en la Sección 4 para abortar tareas y planes captura las dos primeras situaciones anteriores. La tercera situación implica deliberar sobre la importancia de una tarea, que depende de varios factores, como la prioridad de la tarea. Aunque esta deliberación está más allá del alcance de este documento, es un tema complementario de nuestro trabajo futuro. Tenga en cuenta que las situaciones anteriores se aplican a los objetivos de logro, para lo cual se completa la tarea cuando se produce un estado particular del mundo (por ejemplo, asegúrese de que tengamos autorización). Las diferentes formas de razonamiento se aplican a otros tipos de objetivos [4], como los objetivos de mantenimiento [1], donde el objetivo se cumple mediante el mantenimiento de un estado del mundo durante algún período de tiempo (por ejemplo, mantener $ 100 en efectivo). La representación del método de aborto La intención de abortar una tarea o plan es que la tarea o el plan y todos sus hijos dejen de ejecutar, y que los métodos de limpieza apropiados se realizan según sea necesario. A diferencia de los sistemas de planificación fuera de línea, los agentes de BDI están situados: realizan la deliberación en línea y sus acciones cambian el estado del mundo. Como resultado, los efectos de muchas acciones no se pueden deshacer simplemente. Además, el proceso de deshacer puede causar efectos adversos. Por lo tanto, los métodos de limpieza que especificamos son procedimientos de recuperación a plazo que intentan garantizar un estado estable y que también pueden, si es posible, recuperar recursos. La representación del plan común en sistemas de estilo BDI como Jack y Spark incluye un método de falla, que es el método de limpieza designado invocado cuando el plan falla. A esto, agregamos el método de aborto, que se invoca si el plan debe ser abortado. En nuestro ejemplo, el método de aborto para la presentación de la reunión del plan para el plan de apoyo consiste en invocar el número de papel de cancelación de la sub-tarea. El método de aborto no necesita abortar explícitamente la solicitud de autorización, porque el agente invocará el método de aborto para la subtarea adecuadamente, ya que describimos a continuación. La suposición aquí es que, como el método de falla, el programador del sistema de agentes tiene la oportunidad de especificar un método de aborto sensato que tiene en cuenta el punto en el plan en el que se ejecutará el aborte. Para cualquier plan, el método de aborto es opcional: si no se especifica el método de aborto, el agente no toma medidas específicas para este plan. Sin embargo, las reglas de comportamiento predeterminadas de los agentes aún se aplican, por ejemplo, si volver a intentar un plan alternativo para la tarea principal. Tenga en cuenta que no se requiere una representación explícita de los métodos de limpieza para tareas, ya que las tareas se realizan ejecutando algunos planes o planes. Por lo tanto, abortar una tarea significa abortar el plan actual que se ejecuta para realizar esa tarea, como lo describimos a continuación. Invocación del método de aborto Ahora presentamos informalmente la acción de los agentes al abortar planes y tareas. Cuando se aborta un plan P: 1. Abortar cada subtara que es un niño activo de P. Un niño activo es desencadenado por P y actualmente está en ejecución.2. Cuando no hay más niños activos, invoque el método de aborto del Plan P. 3. Indique una falla del plan para TP, la tarea principal de P. Notamos aquí que si la tarea principal no debe ser abortada, el agente puede elegir otro plan aplicable para satisfacer TP.10 El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) cuando se aborta una tarea (o subtarea) t: 1. Abortar el plan activo actual para satisfacer t (si lo hay).2. Cuando no hay más procesos infantiles activos, elimine la tarea. El agente ya no persigue T. 3. Tenga en cuenta aquí que cuando se aborta el plan activo actual para realizar T, no se debe probar otros planes aplicables para realizar T, ya que es la tarea la que se abortará. Para evitar esfuerzos de limpieza infinitamente en cascada, suponemos que los métodos de aborto nunca serán abortados ni fallarán. En realidad, sin embargo, un método de aborto puede fallar. En este caso, sin un mecanismo de manejo más sofisticado, el agente simplemente deja de ejecutar el método de aborto fallido sin más deliberación. La suposición que hacemos, por lo tanto, no es un reflejo de la completa complejidad de la realidad, sino una pragmática en términos del ciclo de ejecución del agente;El enfoque para el manejo de fallas de [21] hace la misma suposición. En sistemas como Spark, el programador puede especificar un comportamiento alternativo para una falla fallida o método de aborto mediante procedimientos de nivel de metro. También suponemos que los métodos de falla y abortes terminan en tiempo finito.4. Semántica operativa Proporcionamos la semántica para la tarea y la falla del plan y los procesos de aborto se describen anteriormente. Usamos el lenguaje CAN inicialmente definido en [23] y luego se extendió como CanPlan en [17] para incluir un componente de planificación y luego como CanPlan2 en [18] para mejorar los mecanismos de adopción y caída de objetivos. Las extensiones también simplificaron la semántica en el trabajo anterior. Utilizamos algunas de estas simplificaciones para proporcionar un breve resumen del lenguaje CAN en la Sección 4.1. Después de una presentación de la semántica operativa de nuestro enfoque en la Sección 4.2, en la Sección 4.3 proporcionamos un ejemplo trabajado para aclarar la semántica que presentamos.4.1 El lenguaje de Can puede es un lenguaje de agente de alto nivel, en un espíritu similar al de AgentsPeak [15] y Kinnys ψ [7], los cuales intentan extraer la esencia de una clase de sistemas de agentes BDI implementados. Can proporciona una construcción de meta explícita que captura los aspectos declarativos y de procedimiento de un objetivo. Los objetivos son persistentes en la lata en la que, cuando un plan falla, se intenta otro plan aplicable. Esto equivale al mecanismo de manejo de falla predeterminado que se encuentra típicamente en los sistemas BDI implementados como Jack [2]. En los sistemas prácticos, las tareas generalmente se traducen en eventos que desencadenan la ejecución de algunos planes. Esto también es cierto en el lenguaje de la lata, pero, para mantener la persistencia de los objetivos, se introduce una construcción de objetivos. Esto se denota por meta `φs, p, φf ´, donde φs es la condición de éxito que determina cuándo se considera el objetivo, φF es una condición de falla bajo la cual se considera que el objetivo ya no es alcanzable o relevante, y P es ISUn programa para lograr el objetivo, que se abortará una vez que φs o φf se hagan verdaderos. Un comportamiento de los agentes es especificado por una biblioteca de plan, denotada por π, que consiste en una colección de cláusulas de plan de la forma E: C ← P, donde E es un evento, C es una condición de contexto (una fórmula lógica sobre las creencias de los agentesEso debe ser cierto para que el plan sea aplicable) 4 y P son el cuerpo del plan. El cuerpo del plan es un programa que se define recursivamente de la siguiente manera: P :: = ACT |+B |−B |? φ |! E |P1;P2 |P1 P2 |Objetivo `φs, P1, φf ´ |P1 P2 |{ψ1: P1 ,..., ψn: pn} |Nil 4 Una C omitida es equivalente a verdadero. Δ = {ψiθ: Piθ |E: ψi ← Pi ∈ π ∧ θ = mgu (e, e)} b ,! e - → b, δ evento ψi: pi ∈ Δ b | = ψi b, δ - → b, pi Δ \\ {ψi: pi: pi} Seleccione B, P1 - → B, (P1 P2) - → B, P2 Fail B, P1 - → B, P1 B, (P1; P2) - → B, (P2) secuencia B, P1 - → B, P B, (P1 P2) - → B, (P P2) Paralelo1 B, P2 - → B, P B, (P1 P2) - → B, (P P1) Paralelo2 Figura 1: Reglas operativas de CAN.donde p1 ,..., PN son programas en sí mismos, ACT es una acción primitiva que no se especifica más, y +B y −B son operaciones para agregar y eliminar creencias. La base de creencias contiene átomos de creencia de tierra en forma de relaciones de primer orden, pero podría extenderse ortogonalmente a otras lógicas. Se supone que se proporcionan operaciones bien definidas para verificar si una condición se deriva de un conjunto de creencias (b | = c), para agregar una creencia a un conjunto de creencias (b ∪ {b}) y para eliminar una creencia de unConjunto de creencias (b \\ {b}).? φ es una prueba de condición φ, y! E5 es un evento 6 que se publica desde el programa. Las construcciones compuestas son la secuenciación (P1; P2), la ejecución paralela (P1 P2) y los objetivos (Objetivo `φs, P, φf ´). Lo anterior define el idioma de usuario. Además, un conjunto de formularios compuestos auxiliares se usa internamente al asignar semántica a construcciones.nulo es el programa básico (terminación). Cuando un evento coincide con un conjunto de cláusulas de plan, se recogen en un conjunto de alternativas guardadas (C1: P1, ..., CN: PN). La otra forma de compuesto auxiliar, es un operador de elección dual a la secuenciación: P1 P2 ejecuta P1 y luego ejecuta P2 solo si P1 falló. Un resumen de la semántica operativa para Can en línea con [23] y seguir algunas de las simplificaciones de [17] es la siguiente. Una configuración básica S = B, G, γ consiste en la base de creencias actual B del agente, el conjunto actual de los objetivos G que se persigue (es decir, el conjunto de fórmulas) y el programa actual P (es decir, la intención actual). Una transición S0 - → S1 especifica que la ejecución de S0 para un solo paso produce la configuración de la configuración S1. S0 - → ∗ Sn es el cierre transitivo reflexivo habitual de - →: Sn es el resultado de una o más transiciones singlestep. Una regla de derivación S - → Sr S - → Sr consiste en un conjunto de premisas (posiblemente vacías), que son transiciones junto con algunas condiciones auxiliares (numerador), y una única conclusión de transición derivable de estas premisas (denominador). La Figura 1 da algunas de las reglas operativas. La regla del evento maneja los eventos de tareas recopilando todas las cláusulas de plan relevantes para el evento en cuestión: para cada cláusula del plan E: ψi ← Pi, si hay un unifier más general, θ = mgu (e, e) de E y el evento en5 Donde es obvio que E es un evento, a veces excluye el signo de exclamación para la legibilidad.6 Típicamente un objetivo de logro. El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (aamas 07) 11 b | = φs b, objetivo `φS, P, φF ´-→ B, verdadero GS B | = φf B, Objetivo` φS, P, φF ´-→ B, falla gf p = meta `φS, p, φf ´ p = p1 £ p2 b | = φS ∨ φf b, p - → b, objetivo` φs, p £ p, φf ´ gi p = p1 £ p2 b | =φs ∨ φf b, p1 - → b, p b, objetivo `φs, p, φf ´ - → b, objetivo` φs, p £ p2, φf ´ gs p = p1 £ p2 b | = φS ∨ φf p1 ∈ {verdadero, fallas} b, meta `φS, P, φf ´ - → B, meta` φs, p2 £ p2, φf ´ Gr Figura 2: reglas para objetivos en la lata.Pregunta, entonces la regla construye una alternativa protegida ψiθ: Piθ. La regla de selección luego selecciona un cuerpo del plan aplicable de un conjunto de alternativas relevantes (restantes): el programa P δ establece que el programa P debe juzgarse primero, volviendo a las alternativas restantes, δ \\ P, si es necesario. Esta regla y la regla de falla se utilizan para el manejo de fallas: si el programa actual PI de una cláusula de plan para una tarea falla, primero se aplica la regla Fail, y luego, si es posible, la Regla Seleccione elegirá otra alternativa aplicable para la tarea.existe. La secuencia de reglas maneja la secuencia de programas de la manera habitual. Las reglas paralelas1 y paralelas2 definen el posible intercambio al ejecutar dos programas en paralelo. La Figura 2 ofrece reglas simplificadas para lidiar con objetivos, en línea con los presentados en [17]. La primera regla establece que un objetivo tiene éxito cuando los φ se vuelven verdaderos;La segunda regla establece que un objetivo falla cuando φF se vuelve verdadero. La tercera regla GI inicializa la ejecución de un programa de goles actualizando la base de goles y estableciendo el programa en el objetivo de P £ P;La primera P se ejecutará y la segunda P se utiliza para realizar un seguimiento del programa original para el objetivo. La cuarta regla GS ejecuta un solo paso del programa de gol. La regla final GR reinicia el programa original (codificado como P2 del par P1 £ P2) siempre que el programa actual esté terminado, pero el objetivo deseado y aún posible aún no se ha logrado.4.2 Interviones de aborto y falla de manejo A continuación, presentamos la capacidad de especificar programas de controladores, en forma de falla y métodos de aborto, que se ocupan de la limpieza requerida cuando un programa determinado respecta respectivamente o se aborta. No asociamos los métodos de falla y aborto con las cláusulas del plan o con las tareas (eventos), sino que presentamos una nueva construcción del programa que especifica los métodos de falla y aborto para un programa arbitrario. La construcción FAB (P, PF, PA) ejecuta el programa P. debe fallar, ejecuta el programa de manejo de falla PF;Si P necesita ser abortado, ejecuta el programa de manejo de abortes PA. Por lo tanto, para agregar fallas y abortos, métodos PF y PA a una cláusula de plan E: C ← P, escribimos E: C ← Fab (P, PF, PA). Con la introducción de la capacidad de abortar los programas, modificamos la construcción paralela para permitir la falla de una rama para abortar a la otra. Debemos tener en cuenta la posible existencia de métodos abortados en la rama abortada. Del mismo modo, con la construcción de objetivos, ya no podemos abandonar completamente el programa, el objetivo contiene tan pronto como se mantenga la condición de éxito o fracaso;Ahora debemos tener en cuenta la existencia de cualquier método de abortes aplicable al programa. Proporcionamos la semántica de un lenguaje de agente aumentado que contiene la construcción FAB al definir una transformación de origen, similar a la macroexpansión, que mapea una biblioteca de plan que contiene la construcción FAB (P, PF, PA) en (casi) estándar. La única extensión no estándar a la lata es una construcción de espera para esperar. Explicamos esta simple modificación de la construcción paralela a continuación cuando llegamos a la traducción de la construcción de objetivos. Primero describimos la naturaleza general de la transformación de la fuente, que demuestra ser bastante simple para la mayoría de las construcciones del lenguaje, y luego nos concentramos en los tres casos más complejos: las construcciones FAB, paralelas y de objetivos. Una cuestión clave es que las construcciones FAB pueden estar anidadas, ya sea directa o indirectamente. Llamemos a cada instancia de la construcción en el tiempo de ejecución un posible punto de aborto (PAP). Cuando estas construcciones están anidadas, es importante que antes de que se ejecute el método de falla o aborto de un PAP de los padres, los programas de falla de falla o abortes de los PAP de los niños se ejecutan primero, como se describe anteriormente en la Sección 3. La necesidad de coordinar la ejecución de los métodos de aborto de PAP anidados requiere que haya alguna forma de identificar a los padres y los hijos de un PAP en particular. Logramos esto como parte de la transformación de la fuente realizando explícitamente un seguimiento del contexto de la ejecución como un parámetro adicional en los eventos y una variable adicional dentro de cada cuerpo del plan.7 La transformación de la fuente reemplaza cada cláusula del plan de la forma E: C ← PCon una cláusula de plan E (v): c ← μV (p) donde V es una variable libre, no previamente presente en la cláusula del plan. Esta variable se utiliza para realizar un seguimiento del contexto de la ejecución. El valor de la variable de contexto es una lista de identificadores, donde cada PAP nuevo se representa al preparar un nuevo identificador para el contexto. Por ejemplo, si los identificadores son enteros, el contexto de un PAP puede estar representado por una lista [42, 1] y el contexto introducido por un nuevo PAP puede estar representado por [52, 42, 1]. Nos referiremos a PAP por el contexto en lugar de por el nuevo identificador agregado, por ejemplo, por [51, 42, 1] no 51. Esto nos permite equiparar la relación de antepasados entre PAP con la relación de sufijo de la lista en los contextos relevantes, es decir, V es un antepasado de V si y solo si V es un sufijo de V. Para la mayoría de las construcciones de Can, la variable de contexto no se usa o se pasa sin cambios: μV (ACT) = ACT μV ( +B) = +B μV (−B) = −B μV (nil) = nil μV (! E) =! E(v) μV (P1; P2) = μV (P1);μV (P2) μV (P1 P2) = μV (P1) μV (P2) μV (ψ1: P1, ..., ψn: Pn) = ψ1: μV (P1) ,..., ψn: μV (PN) sigue siendo especificar la transformación μV (·) en tres casos: construcciones FAB, paralelas y de meta. Estos son más complejos, ya que la fuente transformada necesita crear un nuevo identificador de PAP dinámicamente, para su uso como un nuevo contexto dentro de la construcción, y para realizar un seguimiento de cuándo el PAP está activo (es decir, actualmente en ejecución) agregando y eliminando las creenciassobre el contexto. Presentemos la acción primitiva prependid (v, v) que crea un nuevo identificador de PAP y lo prepara para la lista de la lista V de la lista v. También presentamos los siguientes predicados: • A (V): el PAP V está actualmente activo.• Abortar (v): el PAP V debe ser abortado (después de abortar a todos sus descendientes).7 Una alternativa sería usar predicados de nivel meta que reflejen el estado actual de la estructura de intención.12 El sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) • F (v): el programa de PAP V ha fallado.• Ancestorof (V, V) ≡ V = V ∨ Ancestorof (V, cola (V)) El PAP V es un antepasado de PAP V.• NAC (V) ≡ ¬∃V.(A (V) ∧ Ancestorof (V, V) ∧ V = V) - V no tiene hijos activos.• Sa (V) ≡ ∃V .Abort (V) ∧ Ancestorof (V, V) - Deberíamos abortar V, es decir, el aborto es cierto de V o algún antepasado;Sin embargo, debemos esperar hasta que no hay hijos de V activos.• SAN (V) ≡ SA (V) ∧ NAC (V) - Deberíamos abortar V ahora si debemos abortar V y V no tienen hijos activos. Primero consideremos el caso de la construcción FAB. La idea es que, cada vez que ocurre un nuevo PAP, la acción prependid (V, V) se usa para crear una nueva lista de identificadores de PAP V de la lista existente v. Luego agregamos la creencia de que V es el contexto activo, es decir, +, +A (v), y comience a procesar el programa dentro del PAP usando V en lugar de V como contexto. Necesitamos asegurarnos de que retraemos la creencia de que V está activo al final, es decir, −a (v). Utilizamos la construcción de objetivos para permitirnos eliminar la ejecución de un programa dentro de un PAP V cuando es necesario abortar. Mientras ejecutamos el programa P, sabemos que necesitamos dejar caer P e invocar su método de aborto si se le ha dicho a algún antepasado de P que aborte. Esto está representado por el predicado SA (V) siendo cierto. Sin embargo, debemos asegurarnos de hacer esto solo después de que cada PAP de niños haya tenido la oportunidad de invocar su método de aborto y todos estos métodos de aborto se hayan completado: si dejamos caer el programa demasiado pronto, entonces la ejecución de los métodos de abortode los niños también se dejarán caer. Por lo tanto, la condición que realmente usamos en la construcción de objetivos para probar cuándo eliminar el programa es SAN (V). Esta condición se basa en el hecho de que a medida que se completan los PAP de los niños, eliminan los hechos A de A. Nuestro uso de la construcción de objetivos es por su capacidad para eliminar la ejecución de un programa cuando se cumplen las condiciones. Para dejar de lado la ejecución repetida hasta que se cumpla una condición, debemos asegurarnos de que la condición de éxito o falla de la construcción se cumpla una vez que la ejecución del programa tiene éxito o falla. Nos aseguramos de esto retrayendo el hecho de (v) sobre el éxito y afirmando el hecho de F (v) sobre el fracaso, y al tener las condiciones apropiadas de éxito y falla sobre el objetivo. Por lo tanto, si la construcción de objetivos falla, entonces el programa fue abortado o falló. Invocamos el método relevante de falla o aborto, retractamos el hecho A (v) y luego fallamos. Al reunir todo esto, definimos formalmente μV (FAB (P, PA, PF)) para que sea lo siguiente, donde V es una nueva variable distinta de cualquier otra Biblioteca del Plan de Agentes: PrependID (V, V);+a (v);Objetivo (¬A (V), (μV (P); −a (V) +F (V)), SAN (V) ∨ F (V)) (((? Sa (V); μV (PA))μV (pf)); −a (v) ;? falso) segundo, debemos transformar el operador paralelo para garantizar que la falla de una rama aborta de manera segura a la otra. Aquí construimos dos nuevos contextos, V y V, a partir del contexto existente v. Si una rama falla, debe abortar la otra rama. Al final, si alguna rama fue abortada, entonces debemos fallar. Deje que V y V sean nuevas variables distintas de cualquier otra en la biblioteca del Plan de Agentes. Definimos μV (P1 P2) para que sea: prependid (V, V);prependid (V, V);+a (v);+a (v);(Objetivo (¬A (V), (μV (P1); −a (V) +F (V)), San (V) ∨ F (V)) ( +Abort (V); −a (V))Objetivo (¬A (V), (μV (P2); −a (V) +F (V)), SAN (V) ∨ F (V)) ( +Abort (V); −a (V))));? ¬abort (v) ∧ ¬abort (v) Finalmente, necesitamos modificar las ocurrencias de la construcción de objetivos de dos maneras: Primero, para asegurarnos de que los métodos de manejo de abortes no se eviten cuando se satisfacen las condiciones de éxito o falla, yEn segundo lugar, para activar el aborto del programa contenido cuando se cumplen las condiciones de éxito o falla. Para transformar la construcción de objetivos, necesitamos extender el estándar CAN con una construcción de espera-acondicionamiento. La construcción φ: P no ejecuta P hasta que φ se vuelve verdadera. Aumentamos el lenguaje de lata con las siguientes reglas para el operador de guardia :: b | = φ b, g, (φ: p - → b, g, p: verdadero b | = φ b, g, (φ: p) − −→ B, G, (φ: P): Falso Para especificar μV (objetivo φs, P, φf ´), generamos un nuevo PAP y ejecutamos el programa dentro de la construcción de objetivos en este nuevo contexto. Debemos asegurarnos de que la creencia A (v) se elimine si el objetivo tiene éxito o falla. Cambiamos la condición de éxito y falla de la construcción de objetivos a una rama paralela utilizando la construcción de espera-hasta la condición, y modificamos el objetivo de usar la condición ahora de la condición de SAN (v) como la condición de éxito. La rama de espera activará el aborto del programa en caso de que se cumpla el éxito o la condición de falla. Para evitar cualquier problema para terminar la condición de espera, también terminamos la espera si el PAP ya no está activo. Sea v una nueva variable distinta de cualquier otra en la biblioteca del plan de agentes. Definimos μV (objetivo `φs, p, φf ´) para ser: prependid (V, V);+a (v);(Objetivo (San (V), μV (P), Falso); −a (V); \"(v) se vuelve verdadero. Hay dos formas en que esto puede ocurrir. Primero, si la condición de éxito φs o la condición de falla φF se vuelve verdadera, entonces se ejecuta la segunda rama de la construcción paralela. Esto hace que el aborto (v) se vuelva verdadero y, después de que se ejecutan los abortos de los PAPS descendientes, San (V) se hace realidad. En este caso, P ahora se cae, se elimina el A (V) y la construcción completa tiene éxito o falla en función de φs. La segunda forma de que San (V) se vuelva verdadera es si V o uno de sus antepasados se aborta. En este caso, una vez que se ejecutan los métodos de aborto de los PAPS descendientes, San (v) se vuelve verdadero, P se cae, se elimina la creencia A (V) (lo que permite que la segunda rama paralela se ejecute, instruye a Vacuosamente a V para que aborte), yLa primera rama paralela falla (suponiendo que φS es falso).4.3 Ejemplo trabajado Veamos la traducción del ejemplo de envío de IJCAI de la Sección 2. Expresaremos tareas por eventos, por ejemplo, la tarea asigna un número de papel que expresamos como el APN del evento. Deje que la salida de la tarea de autorización se aplique o n, lo que indica la aprobación o no del gerente de Alices, respectivamente. Luego tenemos (al menos) las siguientes dos cláusulas del plan en Can, para la presentación de la reunión de soporte y solicitar tareas de autorización, respectivamente: SMS (M): ISconf (M) ← Fab (! APN;! TWA; (! AFC!Twp) ;! hps ,! cpn ,! cpn) afc: verdadero ← fab (! Scr ;! wfr (r);? R = y, nil ,! ccr) Tenga en cuenta que el envío de la reunión tiene una parámetro m, la reunión deInterés (IJCAI, en nuestro ejemplo), si bien la solicitud de autorización no tiene parámetros. El sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 13 Veamos primero la traducción de la segunda cláusula del plan, para AFC, ya que es el más simple de los dos. Deje que V y V denoten nuevas variables. Luego tenemos como la cláusula del plan traducido: AFC (V): Verdadero ← Prependid (V, V);+a (v);Objetivo (¬A (V), (! Scr (V);! Wfr (R, V) ;? R = Y; −a (V) +F (V)), San (V) ∨ F (V)))una construcción de objetivos. Si el antiguo cuerpo del plan tiene éxito, la creencia A (v) se retrae, lo que hace que el objetivo tenga éxito. Si el cuerpo del plan antiguo falla, o si la tarea debe ser abortada, la construcción de objetivos falla. Esto es seguido por la ejecución de CCR (en el caso de un aborto), la retracción de un (v) y la falla. La traducción de la primera cláusula de plan, para SMS, es más compleja, debido a la construcción paralela que introduce PAP anidadas: SMS (M, V): ISconf (M) ← Prependid (V, V);+a (v);Objetivo (¬A (V), ((! APN (V);! Twa (V); Prependid (V, V); Prependid (V, V); +A (V); +A (V); (Objetivo(¬A (v), (! Afc (v); −a (v) +f (v)), san (v) ∨ f (v)) ( +abort (v); −a (v)) objetivo(¬A (V), (! Twp (V); −a (V) +F (V)), San (V) ∨ F (V)) ( +Abort (V); −a (V)))));? ¬abort (v) ∧ ¬abort (V) ;! HPS (V); −a (V)) +F (V)), SAN (V) ∨ F (V)) ((((V (V (V (V (V (V));! Cpn (v))! Cpn (v)); −a (v);? Falso) Aquí podemos ver que si la tarea! Twp (v) falla, entonces f (v) se afirmará, no se afirmará el objetivoConstruya que lo contiene, y lo que hace que aborta (v) se afirme. Si la tarea! Wfr (R, V) en la expansión de! Afc (V) todavía se está ejecutando y no tiene PAPS activos, entonces SA (V) y SA (V) serán verdaderos;Sin embargo, solo San (V) y no San (V) será cierto. Este conjunto de condiciones causará la construcción de objetivos en la primera cláusula del plan para fallar, eliminando la ejecución de! WFR (R, V). La tarea! CCR (v) se ejecutará. Una vez que se completa esta tarea, la creencia A (v) se retrae, lo que hace que San (V) se haga realidad, lo que lleva a la primera construcción de objetivos de la segunda cláusula del plan para fallar. Si bien las cláusulas del plan traducido parecen complicadas, observe que la traducción de las cláusulas del plan inicial está completamente automatizada, de acuerdo con las reglas establecidas en la Sección 4.2. Las cláusulas del plan traducido, con la semántica de Can aumentada por nuestra construcción de condición Waituntil, especifican así la operación del agente para manejar tanto la falla como el aborto para el ejemplo.5. La falla del plan de trabajo relacionado se maneja en la versión extendida de AgentsPeak que se encuentra en el sistema Jason [6]. Los planes de limpieza de fallas se activan de los eventos de eliminación de objetivos-! G. Dichos planes, similares a nuestros métodos de falla, están diseñados para que el agente efectúe los cambios estatales (ACT para deshacer sus acciones anteriores) antes de intentar otro plan para lograr el objetivo fallido g.Dado las construcciones de Jasons para dejar caer un objetivo con una indicación de si probar o no un plan alternativo para ello, H¨ubner et al.[6] Proporcione una descripción informal de cómo un agente Jason modifica su estructura de intención cuando ocurre un evento de falla de objetivo. En un plan de eliminación de objetivos, el programador puede especificar cualquier acción de deshacer y si intentar nuevamente el objetivo. Si no se proporciona un plan de eliminación de objetivos, el comportamiento predeterminado de Jasons es no volver a sumergir el objetivo. El manejo de fallas se aplica solo a los planes desencadenados por la adición de un objetivo de logro o prueba;En particular, los eventos de eliminación de objetivos no se publican para el fracaso de un plan de eliminación de objetivos. Además, la semántica informal de [6] no considera sub-goles paralelos (es decir, la construcción de la lata), ya que dicha ejecución no es parte del lenguaje Jasons. La implementación de H¨ubner et al.[6] Requiere acciones internas de Jasons. Un requisito para implementar nuestro enfoque es una capacidad reflexiva en la implementación del agente BDI. Las implementaciones adecuadas del formalismo BDI son Jack [2], Jadex [14] y Spark [9]. Los tres permiten métodos de meta -nivel que están indicados por meta eventos, como la adopción de objetivos o la falla del plan, y ofrecen capacidades introspectivas sobre los estados de objetivos e intención. Dichas instalaciones de meta nivel también son requeridas por el enfoque de Unruh et al.[21], quienes definen la compensación semántica basada en objetivos para un agente. Los objetivos de manejo de fallas se invocan de acuerdo con las reglas de la estrategia de control de la falla, por un componente de manejo de falla de agente dedicado (FHC) que rastrea la ejecución de la tarea. El programador de agentes especifica estos objetivos y se adjunta a tareas, al igual que nuestro fabuloso (P, PF, PA) construye la falla y aborta los métodos con un plan P. Nota, sin embargo, que en contraste con [6] y nuestra semántica[21] Adjunta el conocimiento de manejo de fallas a nivel, no plan, no plan. Sus objetivos de manejo de fallas pueden consistir en objetivos de estabilización que realizan una limpieza inmediata localizada para restaurar el estado de los agentes a un estado estable conocido y objetivos de compensación que realizan acciones de deshacer. Los objetivos de compensación se activan al abortar un objetivo, por lo que no necesariamente en la falla del objetivo (es decir, si el FHC dirige al agente que vuelva a intentar el objetivo fallido y el reintento sea exitoso). El enfoque FHC se define a nivel de objetivo para facilitar la especificación abstracta del conocimiento de manejo de falla;El FHC decide cuándo abordar una falla y qué hacer (es decir, qué objetivos de control de falla para invocar), separando este conocimiento de cómo implementar acciones correctivas (es decir, qué plan de ejecutar para cumplir con el objetivo de manejo de fallas adoptada). Esto contrasta con el manejo simplista de falla a nivel del plan en el que se entremezcla qué y cómo se entremezcla en el conocimiento de la tarea de dominio. Si bien nuestro enfoque se define a nivel del plan, nuestra semántica BDI extendida proporciona la separación de la ejecución y el manejo de fallas. Además, el FHC mantiene explícitamente estructuras de datos para rastrear la ejecución del agente. Aprovechamos las estructuras de ejecución existentes y la capacidad autorreflexiva de un agente BDI para lograr tanto el aborto como el manejo de fallas sin sobrecarga adicional. Las reglas de la estrategia de manejo de fallas de FHCS (por ejemplo, si volver a intentar un objetivo fallido) se reemplazan por instrucciones en nuestros planes PF y PA, junto con los controladores de falla por defecto de nivel meta de nivel de la naturaleza de los agentes (por ejemplo, cometidos ciegamente). El enfoque FHC es independiente de la arquitectura del agente en sí, en contraste con nuestro trabajo dedicado al formalismo BDI (aunque no está vinculado a ningún sistema de agente). Por lo tanto, no se desarrollan semántica formal en [21];La operación FHCS se administra como 14 el sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) un protocolo basado en el estado. Este enfoque, junto con el punto de control estatal, se utiliza para sistemas de agentes múltiples en [22]. La arquitectura resultante incorpora su enfoque de manejo de fallas dentro de una arquitectura de procesamiento de pares para la recuperación de accidentes de agentes. Otro trabajo sobre el manejo de excepciones de múltiples agentes incluye agentes de manejo de excepciones distribuidas AOEXS [5], y los centinelas similares de [8]. En ambos casos, la lógica y el conocimiento de manejo de fallas se desacoplan de los agentes;Por el contrario, al separar el manejo de excepciones del conocimiento específico del dominio, Unruh et al.s FHC y nuestro enfoque retienen la lógica de manejo de fallas dentro de un agente.6. Conclusión y trabajo futuro Las tareas y planes de un agente pueden no llegar a la finalización con éxito, ni por la elección del agente para abortarlos (tal vez a solicitud de otro agente para que lo hagan), o mediante factores no tristes que conducen al fracaso. En este artículo, hemos presentado un enfoque basado en el procedimiento que incorpora tareas y planes de aborto en el ciclo de deliberación de un agente de estilo BDI, proporcionando así un enfoque unificado para la falla y el aborto. Nuestra contribución principal es un análisis de los requisitos sobre la operación del agente para abortar tareas y planes, y una semántica operativa correspondiente para abortar en el lenguaje del agente abstracto puede. Estamos planeando implementar una instancia de nuestro enfoque en el sistema de agente Spark [9];En particular, el trabajo de este documento será la base del mecanismo de manejo de las chispas. También estamos desarrollando una herramienta de análisis para nuestra versión extendida de CAN como base para la experimentación. Un agente inteligente no solo manejará con gracia tareas y planes sin éxito, sino que también deliberará sobre sus actitudes cognitivas para decidir su próximo curso de acción. Hemos asumido el comportamiento predeterminado de un agente de estilo BDI, según su naturaleza: por ejemplo, volver a intentar las alternativas a un plan fallido hasta que uno tenga éxito o hasta que no queden planes alternativos (en cuyo caso fallar la tarea). El trabajo futuro es colocar nuestro enfoque en el servicio del razonamiento de agentes más dinámicos, como la introspección que un agente capaz de razonar sobre los efectos de interacción de tareas y los requisitos de recursos pueden lograr [19, 12]. Relacionado con esto está determinando el costo de abortar una tarea o plan, y usar esto como una entrada para el proceso de deliberación. En particular, esto influiría en el compromiso que el agente tiene con una tarea particular: cuanto mayor sea el costo, mayor será el compromiso. Nuestra suposición de que los métodos de aborto no fallan, como se discutió anteriormente, es pragmático. Sin embargo, este es un problema digno de una exploración adicional, ya sea para desarrollar suposiciones más débiles que también son prácticas o para analizar las condiciones bajo las cuales nuestra suposición es realista. Otro elemento de interés es extender nuestro enfoque de falla y abortar a los objetivos de mantenimiento [1]. Para tales objetivos, es necesaria una semántica operativa diferente para el aborto que para los objetivos de logro, para igualar la diferencia en la semántica de los objetivos en sí. Agradecimientos Agradecemos a Lin Padgham y a los revisores anónimos por sus comentarios. El primer autor reconoce el apoyo del Consejo de Investigación de Australia y el software orientado al agente bajo Grant LP0453486. El trabajo de los dos autores de SRI International fue apoyado por la Agencia de Proyectos de Investigación Avanzada de Defensa (DARPA) bajo el No. NBCHD030010. Cualquier opinión, hallazgos y conclusiones o recomendaciones expresadas en este material son las de los autores y no reflejan necesariamente la visión de DARPA o del Departamento del Centro de Negocios Interior-Nacionales.7. Referencias [1] L. Braubach, A. Pokahr, D. Moldt y W. Lamersdorf. Representación de objetivos para sistemas de agentes BDI. En Proc.de la segunda intl. Taller sobre programación de sistemas de múltiples agentes (Permas04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson y A. Lucas. Agentes inteligentes de Jack - Componentes para agentes inteligentes en Java. Agentlink News, Número 2, 1999. [3] M. G. Chessell, C. Vines, D. Butler, C. M. Ferreira y P. Henderson. Extendiendo el concepto de compensación de transacciones. IBM Systems Journal, 41 (4), 2002. [4] M. Dastani, M. B. Van Riemsdijk y J.-J. C. Meyer. Tipos de objetivos en la programación de agentes. En Proc.de Aamas06, 2006. [5] S. Entwisle, S. Loke, S. Krishnaswamy y E. Kendall. AOEX: un marco de manejo de excepciones basado en agentes para construir sistemas de software confiables, distribuidos y abiertos. En Proc.de la séptima conf. Conf.Sobre la ingeniería de software basada en el conocimiento, 2006. [6] J. F. H¨ubner, R. H. Bordini y M. Wooldridge. Programación de objetivos declarativos utilizando patrones de plan. En Proc.de 4th intl. Taller sobre lenguas y tecnologías de agentes declarativos, 2006. [7] D. Kinny. El cálculo de PSI: un lenguaje de agente algebraico. En Proc.de Atal01, 2001. [8] M. Klein, J. A. Rodr´ıguez-Aguilar y C. Dellarocas. Uso de servicios de manejo de excepciones independientes del dominio para permitir sistemas robustos de múltiples agentes abiertos: el caso de la muerte del agente. Agentes autónomos y sistemas de múltiples agentes, 7 (1-2): 179-189, 2003. [9] D. Morley y K. Myers. El marco de agente Spark. En Proc.de Aamas04, 2004. [10] D. Morley, K. L. Myers y N. Yorke-Smith. Refinamiento continuo de estimaciones de recursos de agente. En Proc.de Aamas06, 2006. [11] K. Myers, P. Berry, J. Blythe, K. Conley, M. Gervasio, D. McGuinness, D. Morley, A. Pfeffer, M. Pollack y M. Tambe. Un asistente personal inteligente para la gestión de tareas y tiempo. AI Magazine, 28, 2007. A aparecer.[12] K. L. Myers y N. Yorke-Smith. Un marco cognitivo para la delegación a un agente de usuario de asistencia. En Proc.del Simposio de otoño de AAAAI 2005 sobre asistentes de resolución de problemas de inicio mixto, 2005. [13] L. Padgham y M. Winikoff. Desarrollo de sistemas de agentes inteligentes: una guía práctica. John Wiley and Sons, 2004. [14] A. Pokahr, L. Braubach y W. Lamersdorf. Jadex: un motor de razonamiento BDI. En R. Bordini, M. Dastani, J. Dix y A. E. F. Seghrouchni, editores, programación de múltiples agentes. Springer, 2005. [15] A. S. Rao. AgentsPeak (L): los agentes de BDI hablan en un lenguaje computable lógico. En Proc.del séptimo taller europeo sobre modelos de agentes autónomos en un mundo de múltiples agentes, 1996. [16] A. S. Rao y M. P. Georgeff. Una arquitectura abstracta para agentes racionales. En Proc.de KR92, 1992. [17] S. Sardi˜na, L. de Silva y L. Padgham. Planificación jerárquica en lenguajes de programación de agentes BDI: un enfoque formal. En Proc.de Aamas06, 2006. [18] S. Sardina y L. Padgham. Objetivos en el contexto de la falla y la planificación del plan BDI. En Proc.de Aamas07, 2007. [19] J. Thangarajah, L. Padgham y M. Winikoff. Detectar y explotar la interacción de objetivos positivos en agentes inteligentes. En Proc.de Aamas03, 2003. [20] J. Thangarajah, M. Winikoff, L. Padgham y K. Fischer. Evitar conflictos de recursos en agentes inteligentes. En Proc.de ECAI-02, 2002. [21] A. Unruh, J. Bailey y K. Ramamohanarao. Un marco para la compensación semántica basada en objetivos en los sistemas de agentes. En Proc.de First Intl. Taller sobre seguridad en sistemas de múltiples agentes, 2004. [22] A. Unruh, H. Harjadi, J. Bailey y K. Ramamohanarao. Gestión de recuperación basada en compensación semántica en sistemas de agentes múltiples. En Proc.del segundo Simposio IEEE sobre seguridad y supervivencia de múltiples agentes (IEEE MAS y S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland y J. Thangarajah. Objetivos declarativos y de procedimiento en sistemas de agentes inteligentes. En Proc.de KR02, 2002. El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 15",
    "original_sentences": [
        "Aborting Tasks in BDI Agents John Thangarajah, James Harland RMIT University Melbourne, Australia {johthan,jah}@cs.rmit.edu.au David Morley, Neil Yorke-Smith Artificial Intelligence Center, SRI International Menlo Park, CA 94025 U.S.A. {morley,nysmith}@ai.sri.com ABSTRACT Intelligent agents that are intended to work in dynamic environments must be able to gracefully handle unsuccessful tasks and plans.",
        "In addition, such agents should be able to make rational decisions about an appropriate course of action, which may include aborting a task or plan, either as a result of the agents own deliberations, or potentially at the request of another agent.",
        "In this paper we investigate the incorporation of aborts into a BDI-style architecture.",
        "We discuss some conditions under which aborting a task or plan is appropriate, and how to determine the consequences of such a decision.",
        "We augment each plan with an optional abort-method, analogous to the failure method found in some agent programming languages.",
        "We provide an operational semantics for the execution cycle in the presence of aborts in the abstract agent language CAN, which enables us to specify a BDI-based execution model without limiting our attention to a particular agent system (such as JACK, Jadex, Jason, or SPARK).",
        "A key technical challenge we address is the presence of parallel execution threads and of sub-tasks, which require the agent to ensure that the abort methods for each plan are carried out in an appropriate sequence.",
        "Categories and Subject Descriptors I.2.11 [ARTIFICIAL INTELLIGENCE]: Distributed Artificial Intelligence-Intelligent agents General Terms Design, Reliability, Theory 1.",
        "INTRODUCTION Intelligent agents generally work in complex, dynamic environments, such as air traffic control or robot navigation, in which the success of any particular action or plan cannot be guaranteed [13].",
        "Accordingly, dealing with failure is fundamental to agent programming, and is an important element of agent characteristics such as robustness, flexibility, and persistence [21].",
        "In agent architectures inspired by the Belief-Desire-Intention (BDI) model [16], these properties are often characterized by the interactions between beliefs, goals, and plans [2].1 In general, an agent that wishes to achieve a particular set of tasks will pursue a number of plans concurrently.",
        "When failures occur, the choice of plans will be reviewed.",
        "This may involve seeking alternative plans for a particular task, re-scheduling tasks to better comply with resource constraints, dropping some tasks, or some other decision that will increase the likelihood of success [12, 14].",
        "Failures can occur for a number of reasons, and it is often not possible to predict these in advance, either because of the complexity of the system or because changes in the environment invalidate some earlier decisions.",
        "Given this need for deliberation about failed tasks or plans, failure deliberation is commonly built into the agents execution cycle.",
        "Besides dealing with failure, an important capability of an intelligent agent is to be able to abort a particular task or plan.",
        "This decision may be due to an internal deliberation (such as the agent believing the task can no longer be achieved, or that some conflicting task now has a higher priority) or due to an external factor (such as another agent altering a commitment, or a change in the environment).",
        "Aborting a task or plan is distinct from its failure.",
        "Failure reflects an inability to perform and does not negate the need to perform - for example, a reasonable response to failure may be to try again.",
        "In contrast, aborting says nothing about the ability to perform; it merely eliminates the need.",
        "Failure propagates from the bottom up, whereas aborting propagates from the top down.",
        "The potential for concurrently executing sub-plans introduces different complexities for aborting and failure.",
        "For aborting, it means that multiple concurrent sub-plans may need to be aborted as the abort is propagated down.",
        "For failure, it means that parallel-sibling plans may need to be aborted as the failure is propagated up.",
        "There has been a considerable amount of work on plan failures (such as detecting and resolving resource conflicts [20, 10]) and most agent systems incorporate some notion of failure handling.",
        "However, there has been relatively little work on the development of abort techniques beyond simple dropping of currently intended plans and tasks, which does not deal with the clean-up required.",
        "As one consequence, most agent systems are quite limited in their treatment of the situation where one branch of a parallel construct 1 One can consider both tasks to be performed and goals to achieve a certain state of the world.",
        "A task can be considered a goal of achieving the state of the task having been performed, and a goal can be considered a task of bringing about that state of the world.",
        "We adopt the latter view and use task to also refer to goals. 8 978-81-904262-7-5 (RPS) c 2007 IFAAMAS fails (common approaches include either letting the other branch run to completion unhindered or dropping it completely).",
        "In this paper we discuss in detail the incorporation of abort cleanup methods into the agent execution cycle, providing a unified approach to failure and abort.",
        "A key feature of our procedure-based approach is that we allow each plan to execute some particular code on a failure and on an abort.",
        "This allows a plan to attempt to ensure a stable, known state, and possibly to recover some resources and otherwise clean up before exiting.",
        "Accordingly, a central technical challenge is to manage the orderly execution of the appropriate clean-up code.",
        "We show how aborts can be smoothly introduced into a BDI-style architecture, and for the first time we give an operational semantics for aborting in the abstract agent language CAN [23, 17].",
        "This allows us to specify an appropriate level of detail for the execution model, without focusing on the specific constructs of any one agent system such as JACK [2], Jadex [14], Jason [6], or SPARK [9].",
        "Our focus is on a single agent, complementary to related work that considers exception handling for single- and multiagent systems (e.g., [22, 5, 6]).",
        "This paper is organized as follows.",
        "In Section 2 we give an example of the consequences of aborting a task, and in Section 3 we discuss some circumstances under which aborts should occur, and the appropriate representation and invocation procedures.",
        "In Section 4 we show how we can use CAN to formally specify the behaviour of an aborted plan.",
        "Section 5 discusses related work, and in Section 6 we present our conclusions and future work. 2.",
        "MOTIVATING EXAMPLE Alice is a knowledge worker assisted by a learning, personal assistive agent such as CALO [11].",
        "Alice plans to attend the IJCAI conference later in the year, and her CALO agent adopts the task of Support Meeting Submission (SMS) to assist her.",
        "CALOs plan for an SMS task in the case of a conference submission consists of the following sub-tasks: 1.",
        "Allocate a Paper Number (APN) to be used for administrative purposes in the company. 2.",
        "Track Writing Abstract (TWA): keep track of Alices progress in preparing an abstract. 3.",
        "Apply For Clearance (AFC) for publication from Alices manager based on the abstract and conference details. 4.",
        "Track Writing Paper (TWP): keep track of Alices progress in writing the paper. 5.",
        "Handle Paper Submission (HPS): follow company internal procedures for submitting a paper to a conference.",
        "These steps must be performed in order, with the exception of steps 3 (AFC) and 4 (TWP), which may be performed in parallel.",
        "Similarly, CALO can perform the task Apply For Clearance (AFC) by a plan consisting of: 1.",
        "Send Clearance Request (SCR) to Alices manager. 2.",
        "Wait For Response (WFR) from the manager. 3.",
        "Confirm that the response was positive, and fail otherwise.",
        "Now suppose that a change in circumstances causes Alice to reconsider her travel plans while she is writing the paper.",
        "Alice will no longer be able to attend IJCAI.",
        "She therefore instructs her CALO agent to abort the SMS task.",
        "Aborting the task implies aborting both the SMS plan and the AFC subplan.",
        "Aborting the first plan requires CALO to notify the paper number registry that the allocated paper number is obsolete, which it can achieve by the Cancel Paper Number (CPN) task.2 Aborting the second plan requires CALO to notify Alices manager that Alice no longer requires clearance for publication, which CALO can achieve by invoking the Cancel Clearance Request (CCR) task.",
        "We note a number of important observations from the example.",
        "First, the decision to abort a particular course of action can come from the internal deliberations of the agent (such as reasoning about priorities in a conflict over resources), or from external sources (such as another agent cancelling a commitment), as in this example.",
        "In this paper we only touch on the problem of determining whether a task or plan should be aborted, instead concentrating on determining the appropriate actions once this decision is made.",
        "Hence, our objective is to determine how to incorporate aborting mechanisms into the standard execution cycle rather than determine what should be aborted and when.",
        "Second, once the decision is made to abort the attempt to submit a paper, there are some actions the agent should take, such as cancelling the clearance request.",
        "In other words, aborting a task is not simply a matter of dropping the task and associated active plans: there are some clean up actions that may need to be done.",
        "This is similar to the case for failure, in that there may also be actions to take when a task or plan fails.",
        "In both cases, note that it is not simply a matter of the agent undo-ing its actions to date; indeed, this may be neither possible (since the agent acts in a situated world and its actions change world state) nor desirable (depending on the semantics of the task).",
        "Rather, cleaning up involves compensation via forward recovery actions [3].",
        "Third, there is a distinction between aborting a task and aborting a plan.",
        "In the former case, it is clear that all plans being executed to perform the task should be aborted; in the latter case, it may be that there are better alternatives to the current plan and one of these should be attempted.",
        "Hence, plan aborting or failure does not necessarily lead to task aborting or failure.",
        "Fourth, given that tasks may contain sub-tasks, which may contain further sub-tasks, it is necessary for a parent task to wait until its children have finished their abort methods.",
        "This is the source of one of the technical challenges that we address: determining the precise sequence of actions once a parent task or plan is aborted. 3.",
        "ABORTING TASKS AND PLANS As we have alluded to, failure and aborting are related concepts.",
        "They both cause the execution of existing plans to cease and, consequentially, the agent to reflect over its current tasks and intentions.",
        "Failure and aborting, however, differ in the way they arise.",
        "In the case of failure, the trigger to cease execution of a task or plan comes from below, that is, the failure of sub-tasks or lower-level plans.",
        "In the case of aborting, the trigger comes from above, that is, the tasks and the parent plans that initiated a plan.",
        "In BDI-style systems such as JACK and SPARK, an agents domain knowledge includes a pre-defined plan library of plan clauses.",
        "Each plan clause has a plan body, which is a program (i.e., combination of primitive actions, sub-tasks, etc.) that can be executed in response to a task or other event should the plan clauses context condition be satisfied.",
        "The agent selects and executes instances of plan clauses to perform its tasks.",
        "There can be more than one applicable plan clause and, in the event that one fails, another applicable one may be attempted.",
        "Plans may have sub-tasks that must succeed 2 CALO needs only drop the TWA and TWP tasks to abort them: for the sake of simplicity we suppose no explicit clean up of its internal state is necessary.",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 9 for the plan to succeed.",
        "In such systems, a plan failure occurs if one of the actions or sub-tasks within the plan fails.",
        "The agents action upon plan failure depends on its nature: for example, the agent may declare the task to have failed if one plan has been tried and resulted in failure, or it may retry alternate plans and declare (indeed, must declare) task failure only if all possible alternate plans to perform the task have been tried and resulted in failure.",
        "Observe that, while task failure can follow from plan failure or a sequence of plan failures, plan failure need not lead to task failure provided the agent can successfully complete an alternate plan.",
        "Moreover, task failure can also arise separately from plan failure, if the agent decides to abort the task.",
        "Our approach associates an abort-method with each plan.",
        "This enables the programmer to specify dedicated compensation actions according to how the agent is attempting to perform the task.",
        "Note that our abort-methods can be arbitrary programs and so can invoke tasks that may be performed dynamically in the usual BDI fashion, i.e., the clean-up is not limited to executing a predetermined set of actions.",
        "The question remains which abort-method should be invoked, and in what manner.",
        "Given the complexity of agent action spaces, it is not possible nor desirable to enumerate a static set of rules.",
        "Rather, the agent will invoke its abort-methods dynamically according to the state of execution and its own internal events.",
        "An alternative to attaching an abort-method to each plan is to attach such methods to each atomic action.",
        "We choose the former because: (1) action-level abort-methods would incur a greater overhead, (2) plans are meant to be designed as single cohesive units and are the unit of deliberation in BDI systems, and (3) the cleanup methods for failure in current systems are attached to plans.",
        "In order to understand how the agents abort processing should function, we consider three situations where it is sensible for an agent to consider aborting some of its tasks and plans: 1.",
        "When a task succeeds or fails because of an external factor other than the agent itself, the plan currently executed to perform the task should be aborted.",
        "For example, suppose company policy changes so that employees of Alices seniority automatically have clearance for publishing papers.",
        "Since Alice now has clearance for publishing her paper, CALO can abort the plan for Apply For Clearance.",
        "In doing so it must invoke the abort-method, in this case thus performing Cancel Clearance Request.3 2.",
        "When two or more sub-programs are executed in parallel, if one fails then the others should be aborted, given that the failure of one branch leads to the failure of the overall task.",
        "For example, suppose that part-way through writing the paper, Alice realizes that there is a fatal flaw in her results, and so notifies CALO that she will not be able to complete the paper by the deadline.",
        "The failure of the Track Writing Paper task should cause the Apply For Clearance task being executed in parallel to be aborted. 3.",
        "When an execution event alters the importance of an existing task or intention, the agent should deliberate over whether the existing plan(s) should continue.",
        "For example, suppose that Alice tasks CALO with a new, high-priority task to purchase a replacement laptop, but that Alice lacks enough funds to both purchase the laptop and to attend IJCAI.",
        "Reasoning over resource requirements [20, 10] will cause the agent to realize 3 If there is any difference between how to abort a task that is externally performed versus how to abort one that is now known to be impossible, the abort-method can detect the circumstances and handle the situation as appropriate. that it cannot successfully complete both tasks.",
        "Given that the new task has greater importance, a rational agent will evaluate its best course of action and may decide to abortor at least suspend - the existing task of submitting a paper and intentions derived from it [12].",
        "The operational semantics we provide in Section 4 for aborting tasks and plans captures the first two situations above.",
        "The third situation involves deliberating over the importance of a task, which depends on various factors such as task priority.",
        "Although this deliberation is beyond the scope of this paper, it is a complementary topic of our future work.",
        "Note that the above situations apply to achievement goals, for which the task is completed when a particular state of the world is brought about (e.g., ensure we have clearance).",
        "Different forms of reasoning apply to other goal types [4] such as maintenance goals [1], where the goal is satisfied by maintaining a state of the world for some period of time (e.g., maintain $100 in cash).",
        "Abort Method Representation The intent of aborting a task or plan is that the task or plan and all its children cease to execute, and that appropriate clean-up methods are performed as required.",
        "In contrast to offline planning systems, BDI agents are situated: they perform online deliberation and their actions change the state of the world.",
        "As a result, the effects of many actions cannot be simply undone.",
        "Moreover, the undo process may cause adverse effects.",
        "Therefore, the clean-up methods that we specify are forward recovery procedures that attempt to ensure a stable state and that also may, if possible, recover resources.",
        "The common plan representation in BDI-style systems such as JACK and SPARK includes a failure-method, which is the designated clean-up method invoked when the plan fails.",
        "To this, we add the abort-method, which is invoked if the plan is to be aborted.",
        "In our example, the abort-method for the plan for Support Meeting Submission consists of invoking the sub-task Cancel Paper Number.",
        "The abort-method need not explicitly abort Apply For Clearance, because the agent will invoke the abort-method for the subtask appropriately, as we outline below.",
        "The assumption here is that, like the failure-method, the programmer of the agent system has the opportunity to specify a sensible abort-method that takes into consideration the point in the plan at which the abort is to be executed.",
        "For any plan, the abort-method is optional: if no abort-method is specified, the agent takes no specific action for this plan.",
        "However, the agents default behavioural rules still apply, for example, whether to retry an alternate plan for the parent task.",
        "Note that an explicit representation of the clean-up methods for tasks is not required, since tasks are performed by executing some plan or plans.",
        "Hence, aborting a task means aborting the current plan that is executed to perform that task, as we next describe.",
        "Abort Method Invocation We now informally lay out the agents action upon aborting plans and tasks.",
        "When a plan P is aborted: 1.",
        "Abort each sub-task that is an active child of P. An active child is one that was triggered by P and is currently in execution. 2.",
        "When there are no more active children, invoke the abort method of plan P. 3.",
        "Indicate a plan failure to TP , the parent task of P. We note here that if the parent task TP is not to be aborted then the agent may choose another applicable plan to satisfy TP . 10 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) When a task (or sub-task) T is aborted: 1.",
        "Abort the current active plan to satisfy T (if any). 2.",
        "When there are no more active child processes, drop the task.",
        "The agent thus no longer pursues T. 3.",
        "Note here that when the current active plan for performing T is aborted, no other applicable plans to perform T should be tried as it is the task that is to be aborted.",
        "In order to prevent infinitely cascading clean-up efforts, we assume that abort-methods will never be aborted nor fail.",
        "In reality, however, an abort-method may fail.",
        "In this case, lacking a more sophisticated handling mechanism, the agent simply stops executing the failed abort-method with no further deliberation.",
        "The assumption we make is thus not a reflection of the full complexity of reality, but one that is pragmatic in terms of the agent execution cycle; the approach to failure-handling of [21] makes the same assumption.",
        "In systems such as SPARK, the programmer can specify an alternative behaviour for a failed failure- or abort-method by means of meta-level procedures.",
        "We also assume that failure- and abort-methods terminate in finite time. 4.",
        "OPERATIONAL SEMANTICS We provide the semantics for the task and plan failure and aborting processes outlined above.",
        "We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the goal adoption and dropping mechanisms.",
        "The extensions also simplified the semantics in the earlier work.",
        "We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1.",
        "Following a presentation of the operational semantics of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present. 4.1 CAN Language CAN is a high-level agent language, in a spirit similar to that of AgentSpeak [15] and Kinnys Ψ [7], both of which attempt to extract the essence of a class of implemented BDI agent systems.",
        "CAN provides an explicit goal construct that captures both the declarative and procedural aspects of a goal.",
        "Goals are persistent in CAN in that, when a plan fails, another applicable plan is attempted.",
        "This equates to the default failure handling mechanism typically found in implemented BDI systems such as JACK [2].",
        "In practical systems, tasks are typically translated into events that trigger the execution of some plans.",
        "This is also true in the CAN language, but, in order to maintain the persistence of goals, a goal construct is introduced.",
        "This is denoted by Goal ` φs, P, φf ´ , where φs is the success condition that determines when the goal is considered achieved, φf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once φs or φf become true.",
        "An agents behavior is specified by a plan library, denoted by Π, that consists of a collection of plan clauses of the form e : c ← P, where e is an event, c is a context condition (a logical formula over the agents beliefs that must be true in order for the plan to be applicable)4 and P is the plan body.",
        "The plan body is a program that is defined recursively as follows: P ::= act | +b | −b | ?φ | !e | P1; P2 | P1 P2 | Goal ` φs, P1, φf ´ | P1 P2 | {ψ1 : P1, . . . , ψn : Pn} | nil 4 An omitted c is equivalent to true.",
        "Δ = {ψiθ : Piθ | e : ψi ← Pi ∈ Π ∧ θ = mgu(e, e )} B, !e −→ B, Δ Event ψi : Pi ∈ Δ B |= ψi B, Δ −→ B, Pi Δ \\ {ψi : Pi} Select B, P1 −→ B, (P1 P2) −→ B, P2 fail B, P1 −→ B , P1 B, (P1; P2) −→ B , (P ; P2) Sequence B, P1 −→ B , P B, (P1 P2) −→ B , (P P2) Parallel1 B, P2 −→ B , P B, (P1 P2) −→ B , (P P1) Parallel2 Figure 1: Operational rules of CAN. where P1, . . . , Pn are themselves programs, act is a primitive action that is not further specified, and +b and −b are operations to add and delete beliefs.",
        "The belief base contains ground belief atoms in the form of first-order relations but could be orthogonally extended to other logics.",
        "It is assumed that well-defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ∪ {b}), and to delete a belief from a belief set (B \\ {b}). ?φ is a test for condition φ, and !e5 is an event6 that is posted from within the program.",
        "The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (Goal ` φs, P, φf ´ ).",
        "The above defines the user language.",
        "In addition, a set of auxiliary compound forms are used internally when assigning semantics to constructs. nil is the basic (terminating) program.",
        "When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 : P1, . . . , cn : Pn ).",
        "The other auxiliary compound form, , is a choice operator dual to sequencing: P1 P2 executes P1 and then executes P2 only if P1 failed.",
        "A summary of the operational semantics for CAN in line with [23] and following some of the simplifications of [17] is as follows.",
        "A basic configuration S = B, G, Γ consists of the current belief base B of the agent, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention).",
        "A transition S0 −→ S1 specifies that executing S0 for a single step yields configuration S1.",
        "S0 −→∗ Sn is the usual reflexive transitive closure of −→: Sn is the result of one or more singlestep transitions.",
        "A derivation rule S −→ Sr S −→ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator).",
        "Figure 1 gives some of the operational rules.",
        "The Event rule handles task events by collecting all relevant plan clauses for the event in question: for each plan clause e : ψi ← Pi, if there is a most general unifier, θ = mgu(e, e ) of e and the event in 5 Where it is obvious that e is an event we will sometimes exclude the exclamation mark for readability. 6 Typically an achievement goal.",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 11 B |= φs B, Goal ` φs, P, φf ´ −→ B, true Gs B |= φf B, Goal ` φs, P, φf ´ −→ B, fail Gf P = Goal ` φs, P , φf ´ P = P1 £ P2 B |= φs ∨ φf B, P −→ B, Goal ` φs, P £ P , φf ´ GI P = P1 £ P2 B |= φs ∨ φf B, P1 −→ B , P B, Goal ` φs, P, φf ´ −→ B , Goal ` φs, P £ P2, φf ´ GS P = P1 £ P2 B |= φs ∨ φf P1 ∈ {true, fail} B, Goal ` φs, P, φf ´ −→ B, Goal ` φs, P2 £ P2, φf ´ GR Figure 2: Rules for goals in CAN. question, then the rule constructs a guarded alternative ψiθ : Piθ.",
        "The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives: program P Δ states that program P should be tried first, falling back to the remaining alternatives, Δ \\ P, if necessary.",
        "This rule and the fail rule together are used for failure handling: if the current program Pi from a plan clause for a task fails, rule fail is applied first, and then if possible, rule Select will choose another applicable alternative for the task if one exists.",
        "Rule Sequence handles sequencing of programs in the usual way.",
        "Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel.",
        "Figure 2 gives simplified rules for dealing with goals, in line with those presented in [17].",
        "The first rule states that a goal succeeds when φs become true; the second rule states that a goal fails when φf become true.",
        "The third rule GI initializes the execution of a goal-program by updating the goal base and setting the program in the goal to P £ P; the first P is to be executed and the second P is used to keep track of the original program for the goal.",
        "The fourth rule GS executes a single step of the goal-program.",
        "The final rule GR restarts the original program (encoded as P2 of pair P1 £ P2) whenever the current program is finished but the desired and still possible goal has not yet been achieved. 4.2 Aborting Intentions and Handling Failure We next introduce the ability to specify handler programs, in the form of failure- and abort-methods, that deal with the clean-up required when a given program respectively fails or is aborted.",
        "We do not associate failure- and abort- methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies failure- and abort- methods for an arbitrary program.",
        "The FAb(P, PF , PA) construct executes the program P. Should P fail, it executes the failure handling program PF ; should P need to be aborted, it executes the abort handling program PA.",
        "Thus to add failure- and abort- methods PF and PA to a plan clause e : c ← P, we write e : c ← FAb(P, PF , PA).",
        "With the introduction of the ability to abort programs, we modify the parallel construct to allow the failure of one branch to abort the other.",
        "We must take into consideration the possible existence of abort-methods in the aborted branch.",
        "Similarly, with the Goal construct we can no longer completely abandon the program the goal contains as soon as the success or failure condition holds; we must now take into consideration the existence of any abort-methods applicable to the program.",
        "We provide the semantics of an augmented agent language containing the FAb construct by defining a source transformation, similar to macro-expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN.",
        "The one non-standard extension to CAN is a wait-until-condition construct.",
        "We explain this simple modification of the parallel construct below when we come to translation of the Goal construct.",
        "First we describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases: the FAb, parallel, and Goal constructs.",
        "A key issue is that the FAb constructs may be nested, either directly or indirectly.",
        "Let us call each instantiation of the construct at execution time a possible abort point (pap).",
        "Where these constructs are nested, it is important that before the failure- or abort-method of a parent pap is executed, the failure- or abort-methods programs of the children paps are executed first, as described earlier in Section 3.",
        "The need to coordinate the execution of the abort-methods of nested paps requires that there be some way to identify the parents and children of a particular pap.",
        "We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e : c ← P with a plan clause e(v) : c ← μv(P) where v is a free variable, not previously present in the plan clause.",
        "This variable is used to keep track of the context of execution.",
        "The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context.",
        "For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1].",
        "We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51.",
        "This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v .",
        "For most CAN constructs, the context variable is unused or passed unchanged: μv(act) = act μv(+b) = +b μv(−b) = −b μv(nil) = nil μv(!e) = !e(v) μv(P1; P2) = μv(P1); μv(P2) μv(P1 P2) = μv(P1) μv(P2) μv( ψ1 : P1, . . . , ψn : Pn ) = ψ1 : μv(P1), . . . , ψn : μv(Pn) It remains to specify the transformation μv(·) in three cases: the FAb, parallel, and Goal constructs.",
        "These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context.",
        "Let us introduce the primitive action prependID(v, v ) that creates a new pap identifier and prepends it to list v giving list v .",
        "We also introduce the following predicates: • a(v) - the pap v is currently active. • abort(v) - the pap v should be aborted (after aborting all of its descendants). 7 An alternative would be to use meta-level predicates that reflect the current state of the intention structure. 12 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) • f(v) - the program of pap v has failed. • ancestorof(v, v ) ≡ v = v ∨ ancestorof(v, tail(v ))the pap v is an ancestor of pap v . • nac(v) ≡ ¬∃v . (a(v ) ∧ ancestorof(v, v ) ∧ v = v ) - v has no active children. • sa(v) ≡ ∃v .abort(v ) ∧ ancestorof(v , v) - we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active. • san(v) ≡ sa(v) ∧ nac(v) - we should abort v now if we should abort v and v has no active children.",
        "First let us consider the case of the FAb construct.",
        "The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v. We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context.",
        "We need to make sure that we retract the belief that v is active at the end, i.e., −a(v ).",
        "We use the Goal construct to allow us to drop the execution of a program within a pap v when it is necessary to abort.",
        "While executing the program P, we know that we need to drop P and invoke its abort-method if some ancestor of P has been told to abort.",
        "This is represented by the predicate sa(v ) being true.",
        "However, we need to make sure that we do this only after every child pap has had the chance to invoke its abort-method and all these abort-methods have completed: if we drop the program too soon, then execution of the abort-methods of the children will also be dropped.",
        "Therefore, the condition we actually use in the Goal construct to test when to drop the program is san(v ).",
        "This condition relies on the fact that as the children paps complete, they remove the relevant a facts.",
        "Our use of the Goal construct is for its ability to drop the execution of a program when conditions are met.",
        "To leave aside the repeat execution until a condition is met aspect, we must ensure that the success or failure condition of the construct is satisfied once the execution of the program succeeds or fails.",
        "We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on failure, and by having the appropriate success and failure conditions on the Goal.",
        "Hence, if the Goal construct fails, then the program either was aborted or it failed.",
        "We invoke the relevant failure- or abort- method, retract the a(v ) fact, and then fail.",
        "Putting all this together, we formally define μv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agents plan library: prependID(v, v ); +a(v ); Goal ( ¬a(v ), (μv (P); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); μv(PA)) μv(PF )); −a(v ); ?false) Second, we must transform the parallel operator to ensure that the failure of one branch safely aborts the other.",
        "Here we construct two new contexts, v and v , from the existing context v. If one branch fails, it must abort the other branch.",
        "At the end, if either branch was aborted, then we must fail.",
        "Let v and v be new variables distinct from any other in the agents plan library.",
        "We define μv(P1 P2) to be: prependID(v, v ); prependID(v, v ); +a(v ); +a(v ); ( Goal (¬a(v ), (μv (P1); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal (¬a(v ), (μv (P2); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ); ?¬abort(v ) ∧ ¬abort(v ) Finally, we need to modify occurrences of the Goal construct in two ways: first, to make sure that the abort handling methods are not bypassed when the success or failure conditions are satisfied, and second, to trigger the aborting of the contained program when either the success or failure conditions are satisfied.",
        "To transform the Goal construct we need to extend standard CAN with a wait-until-condition construct.",
        "The construct φ : P does not execute P until φ becomes true.",
        "We augment the CAN language with the following rules for the guard operator :: B |= φ B, G, (φ : P −→ B, G, P :true B |= φ B, G, (φ : P) −→ B, G, (φ : P) :false In order to specify μv(Goal ` φs, P, φf ´ ), we generate a new pap and execute the program within the Goal construct in this new context.",
        "We must ensure that belief a(v ) is removed whether the Goal succeeds or fails.",
        "We shift the success and failure condition of the Goal construct into a parallel branch using the wait-until-condition construct, and modify the Goal to use the should abort now condition san(v ) as the success condition.",
        "The waiting branch will trigger the abort of the program should either the success or failure condition be met.",
        "To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active.",
        "Let v be a new variable distinct from any other in the agents plan library.",
        "We define μv(Goal ` φs, P, φf ´ ) to be: prependID(v, v ); +a(v ); ( Goal ( san(v ), μv (P), false) ; −a(v ); ?φs ) φs ∨ φf ∨ ¬a(v ) : +abort(v ) ) The program P will be repeatedly executed until san(v ) becomes true.",
        "There are two ways this can occur.",
        "First, if either the success condition φs or the failure condition φf becomes true, then the second branch of the parallel construct executes.",
        "This causes abort(v ) to become true, and, after the descendant paps abortmethods are executed, san(v ) becomes true.",
        "In this case, P is now dropped, the a(v ) is removed, and the entire construct succeeds or fails based on φs.",
        "The second way for san(v ) to become true is if v or one of its ancestors is aborted.",
        "In this case, once the descendant paps abort-methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming φs is false). 4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2.",
        "We will express tasks by events, for example, the task Allocate a Paper Number we express as the event APN.",
        "Let the output of the Apply For Clearance task be Y or N, indicating the approval or not of Alices manager, respectively.",
        "Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively: SMS(m) : isconf(m) ← FAb(!APN; !TWA; (!AFC !TWP); !HPS, !CPN, !CPN) AFC : true ← FAb(!SCR; !WFR(r); ?r = Y, nil, !CCR) Note that Support Meeting Submission has a parameter m, the meeting of interest (IJCAI, in our example), while Apply For Clearance has no parameters.",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two.",
        "Let v and v denote new variables.",
        "Then we have as the translated plan clause: AFC(v ) : true ← prependID(v , v ); +a(v ); Goal ( ¬a(v ), (!SCR(v ); !WFR(r, v ); ?r = Y; −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CCR(v )) nil); −a(v ); ?false) We can see that an extra context parameter has been added to each task and that the old plan body now appears inside a Goal construct.",
        "Should the old plan body succeed, belief a(v ) is retracted, causing the Goal to succeed.",
        "If the old plan body fails, or if the task is to be aborted, the Goal construct fails.",
        "This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and failure.",
        "The translation of the first plan clause, for SMS, is more complex, because of the parallel construct that introduces nested paps: SMS(m, v) : isconf(m) ← prependID(v, v ); +a(v ); Goal ( ¬a(v ), ((!APN(v ); !TWA(v ); prependID(v , v ); prependID(v , v ); +a(v ); +a(v ); ( Goal ( ¬a(v ), (!AFC(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal ( ¬a(v ), (!TWP(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ) ; ?¬abort(v ) ∧ ¬abort(v ); !HPS(v ); −a(v )) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CPN(v)) !CPN(v)); −a(v ); ?false) Here we can see that if the task !TWP(v ) fails then f(v ) will be asserted, failing the Goal construct that contains it, and leading to abort(v ) being asserted.",
        "If the !WFR(r, v ) task in the expansion of !AFC(v ) is still executing and has no active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true.",
        "This set of conditions will cause the Goal construct in the first plan clause to fail, dropping execution of !WFR(r, v ).",
        "The task !CCR(v ) will be executed.",
        "Once this task completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first Goal construct of the second plan clause to fail.",
        "While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely automated, according to the rules set out in Section 4.2.",
        "The translated plan clauses, with the semantics of CAN augmented by our waituntil-condition construct, thus specify the operation of the agent to handle both failure and aborting for the example. 5.",
        "RELATED WORK Plan failure is handled in the extended version of AgentSpeak found in the Jason system [6].",
        "Failure clean-up plans are triggered from goal deletion events −!g.",
        "Such plans, similar to our failure methods, are designed for the agent to effect state changes (act to undo its earlier actions) prior to possibly attempting another plan to achieve the failed goal g. Given Jasons constructs for dropping a goal with an indication of whether or not to try an alternate plan for it, H¨ubner et al. [6] provide an informal description of how a Jason agent modifies its intention structure when a goal failure event occurs.",
        "In a goal deletion plan, the programmer can specify any undo actions and whether to attempt the goal again.",
        "If no goal deletion plan is provided, Jasons default behaviour is to not reattempt the goal.",
        "Failure handling is applied only to plans triggered by addition of an achievement or test goal; in particular, goal deletion events are not posted for failure of a goal deletion plan.",
        "Further, the informal semantics of [6] do not consider parallel sub-goals (i.e., the CAN construct), since such execution is not part of Jasons language.",
        "The implementation of H¨ubner et al. [6] requires Jasons internal actions.",
        "A requirement for implementing our approach is a reflective capability in the BDI agent implementation.",
        "Suitable implementations of the BDI formalism are JACK [2], Jadex [14], and SPARK [9].",
        "All three allow meta level methods that are cued by meta events such as goal adoption or plan failure, and offer introspective capabilities over goal and intention states.",
        "Such meta level facilities are also required by the approach of Unruh et al. [21], who define goal-based semantic compensation for an agent.",
        "Failure-handling goals are invoked according to failurehandling strategy rules, by a dedicated agent Failure Handling Component (FHC) that tracks task execution.",
        "These goals are specified by the agent programmer and attached to tasks, much like our FAb(P, PF , PA) construct associates failure and abort methods with a plan P. Note, however, that in contrast to both [6] and our semantics, [21] attach the failure-handling knowledge at the goal, not plan, level.",
        "Their failure-handling goals may consist of stabilization goals that perform localized, immediate clean-up to restore the agents state to a known, stable state, and compensation goals that perform undo actions.",
        "Compensation goals are triggered on aborting a goal, and so not necessarily on goal failure (i.e., if the FHC directs the agent to retry the failed goal and the retry is successful).",
        "The FHC approach is defined at the goal level in order to facilitate abstract specification of failure-handling knowledge; the FHC decides when to address a failure and what to do (i.e., what failurehandling goals to invoke), separating this knowledge from the how of implementing corrective actions (i.e., what plan to execute to meet the adopted failure-handling goal).",
        "This contrasts with simplistic plan-level failure handling in which the what and how are intermingled in domain task knowledge.",
        "While our approach is defined at the plan level, our extended BDI semantics provides for the separation of execution and failure handling.",
        "Further, the FHC explicitly maintains data structures to track agent execution.",
        "We leverage the existing execution structures and self-reflective ability of a BDI agent to accomplish both aborting and failure handling without additional overhead.",
        "FHCs failure-handling strategy rules (e.g., whether to retry a failed goal) are replaced by instructions in our PF and PA plans, together with meta-level default failure handlers according to the agents nature (e.g., blindly committed).",
        "The FHC approach is independent of the architecture of the agent itself, in contrast to our work that is dedicated to the BDI formalism (although not tied to any one agent system).",
        "Thus no formal semantics are developed in [21]; the FHCs operation is given as 14 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) a state-based protocol.",
        "This approach, together with state checkpointing, is used for multi-agent systems in [22].",
        "The resulting architecture embeds their failure handling approach within a pair processing architecture for agent crash recovery.",
        "Other work on multi-agent exception handling includes AOEXs distributed exception handling agents [5], and the similar sentinels of [8].",
        "In both cases, failure-handling logic and knowledge are decoupled from the agents; by contrast, while separating exception handling from domain-specific knowledge, Unruh et al.s FHC and our approach both retain failure-handling logic within an agent. 6.",
        "CONCLUSION AND FUTURE WORK The tasks and plans of an agent may not successfully reach completion, either by the choice of the agent to abort them (perhaps at the request of another agent to do so), or by unbidden factors that lead to failure.",
        "In this paper we have presented a procedure-based approach that incorporates aborting tasks and plans into the deliberation cycle of a BDI-style agent, thus providing a unified approach to failure and abort.",
        "Our primary contribution is an analysis of the requirements on the operation of the agent for aborting tasks and plans, and a corresponding operational semantics for aborting in the abstract agent language CAN.",
        "We are planning to implement an instance of our approach in the SPARK agent system [9]; in particular, the work of this paper will be the basis for SPARKs abort handling mechanism.",
        "We are also developing an analysis tool for our extended version of CAN as a basis for experimentation.",
        "An intelligent agent will not only gracefully handle unsuccessful tasks and plans, but also will deliberate over its cognitive attitudes to decide its next course of action.",
        "We have assumed the default behaviour of a BDI-style agent, according to its nature: for instance, to retry alternatives to a failed plan until one succeeds or until no alternative plans remain (in which case to fail the task).",
        "Future work is to place our approach in service of more dynamic agent reasoning, such as the introspection that an agent capable of reasoning over task interaction effects and resource requirements can accomplish [19, 12].",
        "Related to this is determining the cost of aborting a task or plan, and using this as an input to the deliberation process.",
        "This would in particular influence the commitment the agent has towards a particular task: the higher the cost, the greater the commitment.",
        "Our assumption that abort-methods do not fail, as discussed above, is a pragmatic one.",
        "However, this is an issue worthy of further exploration, either to develop weaker assumptions that are also practical, or to analyze conditions under which our assumption is realistic.",
        "A further item of interest is extending our approach to failure and abort to maintenance goals [1].",
        "For such goals a different operational semantics for abort is necessary than for achievement goals, to match the difference in semantics of the goals themselves.",
        "Acknowledgements We thank Lin Padgham and the anonymous reviewers for their comments.",
        "The first author acknowledges the support of the Australian Research Council and Agent Oriented Software under grant LP0453486.",
        "The work of the two authors at SRI International was supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No.",
        "NBCHD030010.",
        "Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the view of DARPA or the Department of Interior-National Business Center. 7.",
        "REFERENCES [1] L. Braubach, A. Pokahr, D. Moldt, and W. Lamersdorf.",
        "Goal representation for BDI Agent systems.",
        "In Proc. of Second Intl.",
        "Workshop on Programming Multi-Agent Systems (ProMAS04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson, and A. Lucas.",
        "JACK intelligent agents - components for intelligent agents in Java.",
        "AgentLink News, Issue 2, 1999. [3] M. G. Chessell, C. Vines, D. Butler, C. M. Ferreira, and P. Henderson.",
        "Extending the concept of transaction compensation.",
        "IBM Systems Journal, 41(4), 2002. [4] M. Dastani, M. B. van Riemsdijk, and J.-J.",
        "C. Meyer.",
        "Goal types in agent programming.",
        "In Proc. of AAMAS06, 2006. [5] S. Entwisle, S. Loke, S. Krishnaswamy, and E. Kendall.",
        "Aoex: An agent-based exception handling framework for building reliable, distributed, open software systems.",
        "In Proc. of Seventh Joint Conf. on Knowledge-Based Software Engineering, 2006. [6] J. F. H¨ubner, R. H. Bordini, and M. Wooldridge.",
        "Programming declarative goals using plan patterns.",
        "In Proc. of 4th Intl.",
        "Workshop on Declarative Agent Languages and Technologies, 2006. [7] D. Kinny.",
        "The Psi calculus: an algebraic agent language.",
        "In Proc. of ATAL01, 2001. [8] M. Klein, J.",
        "A. Rodr´ıguez-Aguilar, and C. Dellarocas.",
        "Using domain-independent exception handling services to enable robust open multi-agent systems: The case of agent death.",
        "Autonomous Agents and Multi-Agent Systems, 7(1-2):179-189, 2003. [9] D. Morley and K. Myers.",
        "The SPARK agent framework.",
        "In Proc. of AAMAS04, 2004. [10] D. Morley, K. L. Myers, and N. Yorke-Smith.",
        "Continuous refinement of agent resource estimates.",
        "In Proc. of AAMAS06, 2006. [11] K. Myers, P. Berry, J. Blythe, K. Conley, M. Gervasio, D. McGuinness, D. Morley, A. Pfeffer, M. Pollack, and M. Tambe.",
        "An intelligent personal assistant for task and time management.",
        "AI Magazine, 28, 2007.",
        "To appear. [12] K. L. Myers and N. Yorke-Smith.",
        "A cognitive framework for delegation to an assistive user agent.",
        "In Proc. of AAAI 2005 Fall Symposium on Mixed-Initiative Problem-Solving Assistants, 2005. [13] L. Padgham and M. Winikoff.",
        "Developing Intelligent Agent Systems: A Practical Guide.",
        "John Wiley and Sons, 2004. [14] A. Pokahr, L. Braubach, and W. Lamersdorf.",
        "Jadex: A BDI reasoning engine.",
        "In R. Bordini, M. Dastani, J. Dix, and A. E. F. Seghrouchni, editors, Multi-Agent Programming.",
        "Springer, 2005. [15] A. S. Rao.",
        "AgentSpeak(L): BDI agents speak out in a logical computable language.",
        "In Proc. of Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World, 1996. [16] A. S. Rao and M. P. Georgeff.",
        "An abstract architecture for rational agents.",
        "In Proc. of KR92, 1992. [17] S. Sardi˜na, L. de Silva, and L. Padgham.",
        "Hierarchical planning in BDI agent programming languages: a formal approach.",
        "In Proc. of AAMAS06, 2006. [18] S. Sardina and L. Padgham.",
        "Goals in the context of bdi plan failure and planning.",
        "In Proc. of AAMAS07, 2007. [19] J. Thangarajah, L. Padgham, and M. Winikoff.",
        "Detecting and exploiting positive goal interaction in intelligent agents.",
        "In Proc. of AAMAS03, 2003. [20] J. Thangarajah, M. Winikoff, L. Padgham, and K. Fischer.",
        "Avoiding resource conflicts in intelligent agents.",
        "In Proc. of ECAI-02, 2002. [21] A. Unruh, J. Bailey, and K. Ramamohanarao.",
        "A framework for goal-based semantic compensation in agent systems.",
        "In Proc. of First Intl.",
        "Workshop on Safety and Security in Multi-Agent Systems, 2004. [22] A. Unruh, H. Harjadi, J. Bailey, and K. Ramamohanarao.",
        "Semantic-compensation-based recovery management in multi-agent systems.",
        "In Proc. of Second IEEE Symposium on Multi-Agent Security and Survivability (IEEE MAS&S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland, and J. Thangarajah.",
        "Declarative and procedural goals in intelligent agent systems.",
        "In Proc. of KR02, 2002.",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 15"
    ],
    "error_count": 0,
    "keys": {
        "intelligent agent": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Aborting Tasks in BDI Agents John Thangarajah, James Harland RMIT University Melbourne, Australia {johthan,jah}@cs.rmit.edu.au David Morley, Neil Yorke-Smith Artificial Intelligence Center, SRI International Menlo Park, CA 94025 U.S.A. {morley,nysmith}@ai.sri.com ABSTRACT Intelligent agents that are intended to work in dynamic environments must be able to gracefully handle unsuccessful tasks and plans.",
                "In addition, such agents should be able to make rational decisions about an appropriate course of action, which may include aborting a task or plan, either as a result of the agents own deliberations, or potentially at the request of another agent.",
                "In this paper we investigate the incorporation of aborts into a BDI-style architecture.",
                "We discuss some conditions under which aborting a task or plan is appropriate, and how to determine the consequences of such a decision.",
                "We augment each plan with an optional abort-method, analogous to the failure method found in some agent programming languages.",
                "We provide an operational semantics for the execution cycle in the presence of aborts in the abstract agent language CAN, which enables us to specify a BDI-based execution model without limiting our attention to a particular agent system (such as JACK, Jadex, Jason, or SPARK).",
                "A key technical challenge we address is the presence of parallel execution threads and of sub-tasks, which require the agent to ensure that the abort methods for each plan are carried out in an appropriate sequence.",
                "Categories and Subject Descriptors I.2.11 [ARTIFICIAL INTELLIGENCE]: Distributed Artificial Intelligence-Intelligent agents General Terms Design, Reliability, Theory 1.",
                "INTRODUCTION Intelligent agents generally work in complex, dynamic environments, such as air traffic control or robot navigation, in which the success of any particular action or plan cannot be guaranteed [13].",
                "Accordingly, dealing with failure is fundamental to agent programming, and is an important element of agent characteristics such as robustness, flexibility, and persistence [21].",
                "In agent architectures inspired by the Belief-Desire-Intention (BDI) model [16], these properties are often characterized by the interactions between beliefs, goals, and plans [2].1 In general, an agent that wishes to achieve a particular set of tasks will pursue a number of plans concurrently.",
                "When failures occur, the choice of plans will be reviewed.",
                "This may involve seeking alternative plans for a particular task, re-scheduling tasks to better comply with resource constraints, dropping some tasks, or some other decision that will increase the likelihood of success [12, 14].",
                "Failures can occur for a number of reasons, and it is often not possible to predict these in advance, either because of the complexity of the system or because changes in the environment invalidate some earlier decisions.",
                "Given this need for deliberation about failed tasks or plans, failure deliberation is commonly built into the agents execution cycle.",
                "Besides dealing with failure, an important capability of an <br>intelligent agent</br> is to be able to abort a particular task or plan.",
                "This decision may be due to an internal deliberation (such as the agent believing the task can no longer be achieved, or that some conflicting task now has a higher priority) or due to an external factor (such as another agent altering a commitment, or a change in the environment).",
                "Aborting a task or plan is distinct from its failure.",
                "Failure reflects an inability to perform and does not negate the need to perform - for example, a reasonable response to failure may be to try again.",
                "In contrast, aborting says nothing about the ability to perform; it merely eliminates the need.",
                "Failure propagates from the bottom up, whereas aborting propagates from the top down.",
                "The potential for concurrently executing sub-plans introduces different complexities for aborting and failure.",
                "For aborting, it means that multiple concurrent sub-plans may need to be aborted as the abort is propagated down.",
                "For failure, it means that parallel-sibling plans may need to be aborted as the failure is propagated up.",
                "There has been a considerable amount of work on plan failures (such as detecting and resolving resource conflicts [20, 10]) and most agent systems incorporate some notion of failure handling.",
                "However, there has been relatively little work on the development of abort techniques beyond simple dropping of currently intended plans and tasks, which does not deal with the clean-up required.",
                "As one consequence, most agent systems are quite limited in their treatment of the situation where one branch of a parallel construct 1 One can consider both tasks to be performed and goals to achieve a certain state of the world.",
                "A task can be considered a goal of achieving the state of the task having been performed, and a goal can be considered a task of bringing about that state of the world.",
                "We adopt the latter view and use task to also refer to goals. 8 978-81-904262-7-5 (RPS) c 2007 IFAAMAS fails (common approaches include either letting the other branch run to completion unhindered or dropping it completely).",
                "In this paper we discuss in detail the incorporation of abort cleanup methods into the agent execution cycle, providing a unified approach to failure and abort.",
                "A key feature of our procedure-based approach is that we allow each plan to execute some particular code on a failure and on an abort.",
                "This allows a plan to attempt to ensure a stable, known state, and possibly to recover some resources and otherwise clean up before exiting.",
                "Accordingly, a central technical challenge is to manage the orderly execution of the appropriate clean-up code.",
                "We show how aborts can be smoothly introduced into a BDI-style architecture, and for the first time we give an operational semantics for aborting in the abstract agent language CAN [23, 17].",
                "This allows us to specify an appropriate level of detail for the execution model, without focusing on the specific constructs of any one agent system such as JACK [2], Jadex [14], Jason [6], or SPARK [9].",
                "Our focus is on a single agent, complementary to related work that considers exception handling for single- and multiagent systems (e.g., [22, 5, 6]).",
                "This paper is organized as follows.",
                "In Section 2 we give an example of the consequences of aborting a task, and in Section 3 we discuss some circumstances under which aborts should occur, and the appropriate representation and invocation procedures.",
                "In Section 4 we show how we can use CAN to formally specify the behaviour of an aborted plan.",
                "Section 5 discusses related work, and in Section 6 we present our conclusions and future work. 2.",
                "MOTIVATING EXAMPLE Alice is a knowledge worker assisted by a learning, personal assistive agent such as CALO [11].",
                "Alice plans to attend the IJCAI conference later in the year, and her CALO agent adopts the task of Support Meeting Submission (SMS) to assist her.",
                "CALOs plan for an SMS task in the case of a conference submission consists of the following sub-tasks: 1.",
                "Allocate a Paper Number (APN) to be used for administrative purposes in the company. 2.",
                "Track Writing Abstract (TWA): keep track of Alices progress in preparing an abstract. 3.",
                "Apply For Clearance (AFC) for publication from Alices manager based on the abstract and conference details. 4.",
                "Track Writing Paper (TWP): keep track of Alices progress in writing the paper. 5.",
                "Handle Paper Submission (HPS): follow company internal procedures for submitting a paper to a conference.",
                "These steps must be performed in order, with the exception of steps 3 (AFC) and 4 (TWP), which may be performed in parallel.",
                "Similarly, CALO can perform the task Apply For Clearance (AFC) by a plan consisting of: 1.",
                "Send Clearance Request (SCR) to Alices manager. 2.",
                "Wait For Response (WFR) from the manager. 3.",
                "Confirm that the response was positive, and fail otherwise.",
                "Now suppose that a change in circumstances causes Alice to reconsider her travel plans while she is writing the paper.",
                "Alice will no longer be able to attend IJCAI.",
                "She therefore instructs her CALO agent to abort the SMS task.",
                "Aborting the task implies aborting both the SMS plan and the AFC subplan.",
                "Aborting the first plan requires CALO to notify the paper number registry that the allocated paper number is obsolete, which it can achieve by the Cancel Paper Number (CPN) task.2 Aborting the second plan requires CALO to notify Alices manager that Alice no longer requires clearance for publication, which CALO can achieve by invoking the Cancel Clearance Request (CCR) task.",
                "We note a number of important observations from the example.",
                "First, the decision to abort a particular course of action can come from the internal deliberations of the agent (such as reasoning about priorities in a conflict over resources), or from external sources (such as another agent cancelling a commitment), as in this example.",
                "In this paper we only touch on the problem of determining whether a task or plan should be aborted, instead concentrating on determining the appropriate actions once this decision is made.",
                "Hence, our objective is to determine how to incorporate aborting mechanisms into the standard execution cycle rather than determine what should be aborted and when.",
                "Second, once the decision is made to abort the attempt to submit a paper, there are some actions the agent should take, such as cancelling the clearance request.",
                "In other words, aborting a task is not simply a matter of dropping the task and associated active plans: there are some clean up actions that may need to be done.",
                "This is similar to the case for failure, in that there may also be actions to take when a task or plan fails.",
                "In both cases, note that it is not simply a matter of the agent undo-ing its actions to date; indeed, this may be neither possible (since the agent acts in a situated world and its actions change world state) nor desirable (depending on the semantics of the task).",
                "Rather, cleaning up involves compensation via forward recovery actions [3].",
                "Third, there is a distinction between aborting a task and aborting a plan.",
                "In the former case, it is clear that all plans being executed to perform the task should be aborted; in the latter case, it may be that there are better alternatives to the current plan and one of these should be attempted.",
                "Hence, plan aborting or failure does not necessarily lead to task aborting or failure.",
                "Fourth, given that tasks may contain sub-tasks, which may contain further sub-tasks, it is necessary for a parent task to wait until its children have finished their abort methods.",
                "This is the source of one of the technical challenges that we address: determining the precise sequence of actions once a parent task or plan is aborted. 3.",
                "ABORTING TASKS AND PLANS As we have alluded to, failure and aborting are related concepts.",
                "They both cause the execution of existing plans to cease and, consequentially, the agent to reflect over its current tasks and intentions.",
                "Failure and aborting, however, differ in the way they arise.",
                "In the case of failure, the trigger to cease execution of a task or plan comes from below, that is, the failure of sub-tasks or lower-level plans.",
                "In the case of aborting, the trigger comes from above, that is, the tasks and the parent plans that initiated a plan.",
                "In BDI-style systems such as JACK and SPARK, an agents domain knowledge includes a pre-defined plan library of plan clauses.",
                "Each plan clause has a plan body, which is a program (i.e., combination of primitive actions, sub-tasks, etc.) that can be executed in response to a task or other event should the plan clauses context condition be satisfied.",
                "The agent selects and executes instances of plan clauses to perform its tasks.",
                "There can be more than one applicable plan clause and, in the event that one fails, another applicable one may be attempted.",
                "Plans may have sub-tasks that must succeed 2 CALO needs only drop the TWA and TWP tasks to abort them: for the sake of simplicity we suppose no explicit clean up of its internal state is necessary.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 9 for the plan to succeed.",
                "In such systems, a plan failure occurs if one of the actions or sub-tasks within the plan fails.",
                "The agents action upon plan failure depends on its nature: for example, the agent may declare the task to have failed if one plan has been tried and resulted in failure, or it may retry alternate plans and declare (indeed, must declare) task failure only if all possible alternate plans to perform the task have been tried and resulted in failure.",
                "Observe that, while task failure can follow from plan failure or a sequence of plan failures, plan failure need not lead to task failure provided the agent can successfully complete an alternate plan.",
                "Moreover, task failure can also arise separately from plan failure, if the agent decides to abort the task.",
                "Our approach associates an abort-method with each plan.",
                "This enables the programmer to specify dedicated compensation actions according to how the agent is attempting to perform the task.",
                "Note that our abort-methods can be arbitrary programs and so can invoke tasks that may be performed dynamically in the usual BDI fashion, i.e., the clean-up is not limited to executing a predetermined set of actions.",
                "The question remains which abort-method should be invoked, and in what manner.",
                "Given the complexity of agent action spaces, it is not possible nor desirable to enumerate a static set of rules.",
                "Rather, the agent will invoke its abort-methods dynamically according to the state of execution and its own internal events.",
                "An alternative to attaching an abort-method to each plan is to attach such methods to each atomic action.",
                "We choose the former because: (1) action-level abort-methods would incur a greater overhead, (2) plans are meant to be designed as single cohesive units and are the unit of deliberation in BDI systems, and (3) the cleanup methods for failure in current systems are attached to plans.",
                "In order to understand how the agents abort processing should function, we consider three situations where it is sensible for an agent to consider aborting some of its tasks and plans: 1.",
                "When a task succeeds or fails because of an external factor other than the agent itself, the plan currently executed to perform the task should be aborted.",
                "For example, suppose company policy changes so that employees of Alices seniority automatically have clearance for publishing papers.",
                "Since Alice now has clearance for publishing her paper, CALO can abort the plan for Apply For Clearance.",
                "In doing so it must invoke the abort-method, in this case thus performing Cancel Clearance Request.3 2.",
                "When two or more sub-programs are executed in parallel, if one fails then the others should be aborted, given that the failure of one branch leads to the failure of the overall task.",
                "For example, suppose that part-way through writing the paper, Alice realizes that there is a fatal flaw in her results, and so notifies CALO that she will not be able to complete the paper by the deadline.",
                "The failure of the Track Writing Paper task should cause the Apply For Clearance task being executed in parallel to be aborted. 3.",
                "When an execution event alters the importance of an existing task or intention, the agent should deliberate over whether the existing plan(s) should continue.",
                "For example, suppose that Alice tasks CALO with a new, high-priority task to purchase a replacement laptop, but that Alice lacks enough funds to both purchase the laptop and to attend IJCAI.",
                "Reasoning over resource requirements [20, 10] will cause the agent to realize 3 If there is any difference between how to abort a task that is externally performed versus how to abort one that is now known to be impossible, the abort-method can detect the circumstances and handle the situation as appropriate. that it cannot successfully complete both tasks.",
                "Given that the new task has greater importance, a rational agent will evaluate its best course of action and may decide to abortor at least suspend - the existing task of submitting a paper and intentions derived from it [12].",
                "The operational semantics we provide in Section 4 for aborting tasks and plans captures the first two situations above.",
                "The third situation involves deliberating over the importance of a task, which depends on various factors such as task priority.",
                "Although this deliberation is beyond the scope of this paper, it is a complementary topic of our future work.",
                "Note that the above situations apply to achievement goals, for which the task is completed when a particular state of the world is brought about (e.g., ensure we have clearance).",
                "Different forms of reasoning apply to other goal types [4] such as maintenance goals [1], where the goal is satisfied by maintaining a state of the world for some period of time (e.g., maintain $100 in cash).",
                "Abort Method Representation The intent of aborting a task or plan is that the task or plan and all its children cease to execute, and that appropriate clean-up methods are performed as required.",
                "In contrast to offline planning systems, BDI agents are situated: they perform online deliberation and their actions change the state of the world.",
                "As a result, the effects of many actions cannot be simply undone.",
                "Moreover, the undo process may cause adverse effects.",
                "Therefore, the clean-up methods that we specify are forward recovery procedures that attempt to ensure a stable state and that also may, if possible, recover resources.",
                "The common plan representation in BDI-style systems such as JACK and SPARK includes a failure-method, which is the designated clean-up method invoked when the plan fails.",
                "To this, we add the abort-method, which is invoked if the plan is to be aborted.",
                "In our example, the abort-method for the plan for Support Meeting Submission consists of invoking the sub-task Cancel Paper Number.",
                "The abort-method need not explicitly abort Apply For Clearance, because the agent will invoke the abort-method for the subtask appropriately, as we outline below.",
                "The assumption here is that, like the failure-method, the programmer of the agent system has the opportunity to specify a sensible abort-method that takes into consideration the point in the plan at which the abort is to be executed.",
                "For any plan, the abort-method is optional: if no abort-method is specified, the agent takes no specific action for this plan.",
                "However, the agents default behavioural rules still apply, for example, whether to retry an alternate plan for the parent task.",
                "Note that an explicit representation of the clean-up methods for tasks is not required, since tasks are performed by executing some plan or plans.",
                "Hence, aborting a task means aborting the current plan that is executed to perform that task, as we next describe.",
                "Abort Method Invocation We now informally lay out the agents action upon aborting plans and tasks.",
                "When a plan P is aborted: 1.",
                "Abort each sub-task that is an active child of P. An active child is one that was triggered by P and is currently in execution. 2.",
                "When there are no more active children, invoke the abort method of plan P. 3.",
                "Indicate a plan failure to TP , the parent task of P. We note here that if the parent task TP is not to be aborted then the agent may choose another applicable plan to satisfy TP . 10 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) When a task (or sub-task) T is aborted: 1.",
                "Abort the current active plan to satisfy T (if any). 2.",
                "When there are no more active child processes, drop the task.",
                "The agent thus no longer pursues T. 3.",
                "Note here that when the current active plan for performing T is aborted, no other applicable plans to perform T should be tried as it is the task that is to be aborted.",
                "In order to prevent infinitely cascading clean-up efforts, we assume that abort-methods will never be aborted nor fail.",
                "In reality, however, an abort-method may fail.",
                "In this case, lacking a more sophisticated handling mechanism, the agent simply stops executing the failed abort-method with no further deliberation.",
                "The assumption we make is thus not a reflection of the full complexity of reality, but one that is pragmatic in terms of the agent execution cycle; the approach to failure-handling of [21] makes the same assumption.",
                "In systems such as SPARK, the programmer can specify an alternative behaviour for a failed failure- or abort-method by means of meta-level procedures.",
                "We also assume that failure- and abort-methods terminate in finite time. 4.",
                "OPERATIONAL SEMANTICS We provide the semantics for the task and plan failure and aborting processes outlined above.",
                "We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the goal adoption and dropping mechanisms.",
                "The extensions also simplified the semantics in the earlier work.",
                "We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1.",
                "Following a presentation of the operational semantics of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present. 4.1 CAN Language CAN is a high-level agent language, in a spirit similar to that of AgentSpeak [15] and Kinnys Ψ [7], both of which attempt to extract the essence of a class of implemented BDI agent systems.",
                "CAN provides an explicit goal construct that captures both the declarative and procedural aspects of a goal.",
                "Goals are persistent in CAN in that, when a plan fails, another applicable plan is attempted.",
                "This equates to the default failure handling mechanism typically found in implemented BDI systems such as JACK [2].",
                "In practical systems, tasks are typically translated into events that trigger the execution of some plans.",
                "This is also true in the CAN language, but, in order to maintain the persistence of goals, a goal construct is introduced.",
                "This is denoted by Goal ` φs, P, φf ´ , where φs is the success condition that determines when the goal is considered achieved, φf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once φs or φf become true.",
                "An agents behavior is specified by a plan library, denoted by Π, that consists of a collection of plan clauses of the form e : c ← P, where e is an event, c is a context condition (a logical formula over the agents beliefs that must be true in order for the plan to be applicable)4 and P is the plan body.",
                "The plan body is a program that is defined recursively as follows: P ::= act | +b | −b | ?φ | !e | P1; P2 | P1 P2 | Goal ` φs, P1, φf ´ | P1 P2 | {ψ1 : P1, . . . , ψn : Pn} | nil 4 An omitted c is equivalent to true.",
                "Δ = {ψiθ : Piθ | e : ψi ← Pi ∈ Π ∧ θ = mgu(e, e )} B, !e −→ B, Δ Event ψi : Pi ∈ Δ B |= ψi B, Δ −→ B, Pi Δ \\ {ψi : Pi} Select B, P1 −→ B, (P1 P2) −→ B, P2 fail B, P1 −→ B , P1 B, (P1; P2) −→ B , (P ; P2) Sequence B, P1 −→ B , P B, (P1 P2) −→ B , (P P2) Parallel1 B, P2 −→ B , P B, (P1 P2) −→ B , (P P1) Parallel2 Figure 1: Operational rules of CAN. where P1, . . . , Pn are themselves programs, act is a primitive action that is not further specified, and +b and −b are operations to add and delete beliefs.",
                "The belief base contains ground belief atoms in the form of first-order relations but could be orthogonally extended to other logics.",
                "It is assumed that well-defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ∪ {b}), and to delete a belief from a belief set (B \\ {b}). ?φ is a test for condition φ, and !e5 is an event6 that is posted from within the program.",
                "The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (Goal ` φs, P, φf ´ ).",
                "The above defines the user language.",
                "In addition, a set of auxiliary compound forms are used internally when assigning semantics to constructs. nil is the basic (terminating) program.",
                "When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 : P1, . . . , cn : Pn ).",
                "The other auxiliary compound form, , is a choice operator dual to sequencing: P1 P2 executes P1 and then executes P2 only if P1 failed.",
                "A summary of the operational semantics for CAN in line with [23] and following some of the simplifications of [17] is as follows.",
                "A basic configuration S = B, G, Γ consists of the current belief base B of the agent, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention).",
                "A transition S0 −→ S1 specifies that executing S0 for a single step yields configuration S1.",
                "S0 −→∗ Sn is the usual reflexive transitive closure of −→: Sn is the result of one or more singlestep transitions.",
                "A derivation rule S −→ Sr S −→ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator).",
                "Figure 1 gives some of the operational rules.",
                "The Event rule handles task events by collecting all relevant plan clauses for the event in question: for each plan clause e : ψi ← Pi, if there is a most general unifier, θ = mgu(e, e ) of e and the event in 5 Where it is obvious that e is an event we will sometimes exclude the exclamation mark for readability. 6 Typically an achievement goal.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 11 B |= φs B, Goal ` φs, P, φf ´ −→ B, true Gs B |= φf B, Goal ` φs, P, φf ´ −→ B, fail Gf P = Goal ` φs, P , φf ´ P = P1 £ P2 B |= φs ∨ φf B, P −→ B, Goal ` φs, P £ P , φf ´ GI P = P1 £ P2 B |= φs ∨ φf B, P1 −→ B , P B, Goal ` φs, P, φf ´ −→ B , Goal ` φs, P £ P2, φf ´ GS P = P1 £ P2 B |= φs ∨ φf P1 ∈ {true, fail} B, Goal ` φs, P, φf ´ −→ B, Goal ` φs, P2 £ P2, φf ´ GR Figure 2: Rules for goals in CAN. question, then the rule constructs a guarded alternative ψiθ : Piθ.",
                "The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives: program P Δ states that program P should be tried first, falling back to the remaining alternatives, Δ \\ P, if necessary.",
                "This rule and the fail rule together are used for failure handling: if the current program Pi from a plan clause for a task fails, rule fail is applied first, and then if possible, rule Select will choose another applicable alternative for the task if one exists.",
                "Rule Sequence handles sequencing of programs in the usual way.",
                "Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel.",
                "Figure 2 gives simplified rules for dealing with goals, in line with those presented in [17].",
                "The first rule states that a goal succeeds when φs become true; the second rule states that a goal fails when φf become true.",
                "The third rule GI initializes the execution of a goal-program by updating the goal base and setting the program in the goal to P £ P; the first P is to be executed and the second P is used to keep track of the original program for the goal.",
                "The fourth rule GS executes a single step of the goal-program.",
                "The final rule GR restarts the original program (encoded as P2 of pair P1 £ P2) whenever the current program is finished but the desired and still possible goal has not yet been achieved. 4.2 Aborting Intentions and Handling Failure We next introduce the ability to specify handler programs, in the form of failure- and abort-methods, that deal with the clean-up required when a given program respectively fails or is aborted.",
                "We do not associate failure- and abort- methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies failure- and abort- methods for an arbitrary program.",
                "The FAb(P, PF , PA) construct executes the program P. Should P fail, it executes the failure handling program PF ; should P need to be aborted, it executes the abort handling program PA.",
                "Thus to add failure- and abort- methods PF and PA to a plan clause e : c ← P, we write e : c ← FAb(P, PF , PA).",
                "With the introduction of the ability to abort programs, we modify the parallel construct to allow the failure of one branch to abort the other.",
                "We must take into consideration the possible existence of abort-methods in the aborted branch.",
                "Similarly, with the Goal construct we can no longer completely abandon the program the goal contains as soon as the success or failure condition holds; we must now take into consideration the existence of any abort-methods applicable to the program.",
                "We provide the semantics of an augmented agent language containing the FAb construct by defining a source transformation, similar to macro-expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN.",
                "The one non-standard extension to CAN is a wait-until-condition construct.",
                "We explain this simple modification of the parallel construct below when we come to translation of the Goal construct.",
                "First we describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases: the FAb, parallel, and Goal constructs.",
                "A key issue is that the FAb constructs may be nested, either directly or indirectly.",
                "Let us call each instantiation of the construct at execution time a possible abort point (pap).",
                "Where these constructs are nested, it is important that before the failure- or abort-method of a parent pap is executed, the failure- or abort-methods programs of the children paps are executed first, as described earlier in Section 3.",
                "The need to coordinate the execution of the abort-methods of nested paps requires that there be some way to identify the parents and children of a particular pap.",
                "We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e : c ← P with a plan clause e(v) : c ← μv(P) where v is a free variable, not previously present in the plan clause.",
                "This variable is used to keep track of the context of execution.",
                "The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context.",
                "For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1].",
                "We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51.",
                "This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v .",
                "For most CAN constructs, the context variable is unused or passed unchanged: μv(act) = act μv(+b) = +b μv(−b) = −b μv(nil) = nil μv(!e) = !e(v) μv(P1; P2) = μv(P1); μv(P2) μv(P1 P2) = μv(P1) μv(P2) μv( ψ1 : P1, . . . , ψn : Pn ) = ψ1 : μv(P1), . . . , ψn : μv(Pn) It remains to specify the transformation μv(·) in three cases: the FAb, parallel, and Goal constructs.",
                "These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context.",
                "Let us introduce the primitive action prependID(v, v ) that creates a new pap identifier and prepends it to list v giving list v .",
                "We also introduce the following predicates: • a(v) - the pap v is currently active. • abort(v) - the pap v should be aborted (after aborting all of its descendants). 7 An alternative would be to use meta-level predicates that reflect the current state of the intention structure. 12 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) • f(v) - the program of pap v has failed. • ancestorof(v, v ) ≡ v = v ∨ ancestorof(v, tail(v ))the pap v is an ancestor of pap v . • nac(v) ≡ ¬∃v . (a(v ) ∧ ancestorof(v, v ) ∧ v = v ) - v has no active children. • sa(v) ≡ ∃v .abort(v ) ∧ ancestorof(v , v) - we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active. • san(v) ≡ sa(v) ∧ nac(v) - we should abort v now if we should abort v and v has no active children.",
                "First let us consider the case of the FAb construct.",
                "The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v. We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context.",
                "We need to make sure that we retract the belief that v is active at the end, i.e., −a(v ).",
                "We use the Goal construct to allow us to drop the execution of a program within a pap v when it is necessary to abort.",
                "While executing the program P, we know that we need to drop P and invoke its abort-method if some ancestor of P has been told to abort.",
                "This is represented by the predicate sa(v ) being true.",
                "However, we need to make sure that we do this only after every child pap has had the chance to invoke its abort-method and all these abort-methods have completed: if we drop the program too soon, then execution of the abort-methods of the children will also be dropped.",
                "Therefore, the condition we actually use in the Goal construct to test when to drop the program is san(v ).",
                "This condition relies on the fact that as the children paps complete, they remove the relevant a facts.",
                "Our use of the Goal construct is for its ability to drop the execution of a program when conditions are met.",
                "To leave aside the repeat execution until a condition is met aspect, we must ensure that the success or failure condition of the construct is satisfied once the execution of the program succeeds or fails.",
                "We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on failure, and by having the appropriate success and failure conditions on the Goal.",
                "Hence, if the Goal construct fails, then the program either was aborted or it failed.",
                "We invoke the relevant failure- or abort- method, retract the a(v ) fact, and then fail.",
                "Putting all this together, we formally define μv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agents plan library: prependID(v, v ); +a(v ); Goal ( ¬a(v ), (μv (P); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); μv(PA)) μv(PF )); −a(v ); ?false) Second, we must transform the parallel operator to ensure that the failure of one branch safely aborts the other.",
                "Here we construct two new contexts, v and v , from the existing context v. If one branch fails, it must abort the other branch.",
                "At the end, if either branch was aborted, then we must fail.",
                "Let v and v be new variables distinct from any other in the agents plan library.",
                "We define μv(P1 P2) to be: prependID(v, v ); prependID(v, v ); +a(v ); +a(v ); ( Goal (¬a(v ), (μv (P1); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal (¬a(v ), (μv (P2); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ); ?¬abort(v ) ∧ ¬abort(v ) Finally, we need to modify occurrences of the Goal construct in two ways: first, to make sure that the abort handling methods are not bypassed when the success or failure conditions are satisfied, and second, to trigger the aborting of the contained program when either the success or failure conditions are satisfied.",
                "To transform the Goal construct we need to extend standard CAN with a wait-until-condition construct.",
                "The construct φ : P does not execute P until φ becomes true.",
                "We augment the CAN language with the following rules for the guard operator :: B |= φ B, G, (φ : P −→ B, G, P :true B |= φ B, G, (φ : P) −→ B, G, (φ : P) :false In order to specify μv(Goal ` φs, P, φf ´ ), we generate a new pap and execute the program within the Goal construct in this new context.",
                "We must ensure that belief a(v ) is removed whether the Goal succeeds or fails.",
                "We shift the success and failure condition of the Goal construct into a parallel branch using the wait-until-condition construct, and modify the Goal to use the should abort now condition san(v ) as the success condition.",
                "The waiting branch will trigger the abort of the program should either the success or failure condition be met.",
                "To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active.",
                "Let v be a new variable distinct from any other in the agents plan library.",
                "We define μv(Goal ` φs, P, φf ´ ) to be: prependID(v, v ); +a(v ); ( Goal ( san(v ), μv (P), false) ; −a(v ); ?φs ) φs ∨ φf ∨ ¬a(v ) : +abort(v ) ) The program P will be repeatedly executed until san(v ) becomes true.",
                "There are two ways this can occur.",
                "First, if either the success condition φs or the failure condition φf becomes true, then the second branch of the parallel construct executes.",
                "This causes abort(v ) to become true, and, after the descendant paps abortmethods are executed, san(v ) becomes true.",
                "In this case, P is now dropped, the a(v ) is removed, and the entire construct succeeds or fails based on φs.",
                "The second way for san(v ) to become true is if v or one of its ancestors is aborted.",
                "In this case, once the descendant paps abort-methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming φs is false). 4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2.",
                "We will express tasks by events, for example, the task Allocate a Paper Number we express as the event APN.",
                "Let the output of the Apply For Clearance task be Y or N, indicating the approval or not of Alices manager, respectively.",
                "Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively: SMS(m) : isconf(m) ← FAb(!APN; !TWA; (!AFC !TWP); !HPS, !CPN, !CPN) AFC : true ← FAb(!SCR; !WFR(r); ?r = Y, nil, !CCR) Note that Support Meeting Submission has a parameter m, the meeting of interest (IJCAI, in our example), while Apply For Clearance has no parameters.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two.",
                "Let v and v denote new variables.",
                "Then we have as the translated plan clause: AFC(v ) : true ← prependID(v , v ); +a(v ); Goal ( ¬a(v ), (!SCR(v ); !WFR(r, v ); ?r = Y; −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CCR(v )) nil); −a(v ); ?false) We can see that an extra context parameter has been added to each task and that the old plan body now appears inside a Goal construct.",
                "Should the old plan body succeed, belief a(v ) is retracted, causing the Goal to succeed.",
                "If the old plan body fails, or if the task is to be aborted, the Goal construct fails.",
                "This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and failure.",
                "The translation of the first plan clause, for SMS, is more complex, because of the parallel construct that introduces nested paps: SMS(m, v) : isconf(m) ← prependID(v, v ); +a(v ); Goal ( ¬a(v ), ((!APN(v ); !TWA(v ); prependID(v , v ); prependID(v , v ); +a(v ); +a(v ); ( Goal ( ¬a(v ), (!AFC(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal ( ¬a(v ), (!TWP(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ) ; ?¬abort(v ) ∧ ¬abort(v ); !HPS(v ); −a(v )) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CPN(v)) !CPN(v)); −a(v ); ?false) Here we can see that if the task !TWP(v ) fails then f(v ) will be asserted, failing the Goal construct that contains it, and leading to abort(v ) being asserted.",
                "If the !WFR(r, v ) task in the expansion of !AFC(v ) is still executing and has no active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true.",
                "This set of conditions will cause the Goal construct in the first plan clause to fail, dropping execution of !WFR(r, v ).",
                "The task !CCR(v ) will be executed.",
                "Once this task completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first Goal construct of the second plan clause to fail.",
                "While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely automated, according to the rules set out in Section 4.2.",
                "The translated plan clauses, with the semantics of CAN augmented by our waituntil-condition construct, thus specify the operation of the agent to handle both failure and aborting for the example. 5.",
                "RELATED WORK Plan failure is handled in the extended version of AgentSpeak found in the Jason system [6].",
                "Failure clean-up plans are triggered from goal deletion events −!g.",
                "Such plans, similar to our failure methods, are designed for the agent to effect state changes (act to undo its earlier actions) prior to possibly attempting another plan to achieve the failed goal g. Given Jasons constructs for dropping a goal with an indication of whether or not to try an alternate plan for it, H¨ubner et al. [6] provide an informal description of how a Jason agent modifies its intention structure when a goal failure event occurs.",
                "In a goal deletion plan, the programmer can specify any undo actions and whether to attempt the goal again.",
                "If no goal deletion plan is provided, Jasons default behaviour is to not reattempt the goal.",
                "Failure handling is applied only to plans triggered by addition of an achievement or test goal; in particular, goal deletion events are not posted for failure of a goal deletion plan.",
                "Further, the informal semantics of [6] do not consider parallel sub-goals (i.e., the CAN construct), since such execution is not part of Jasons language.",
                "The implementation of H¨ubner et al. [6] requires Jasons internal actions.",
                "A requirement for implementing our approach is a reflective capability in the BDI agent implementation.",
                "Suitable implementations of the BDI formalism are JACK [2], Jadex [14], and SPARK [9].",
                "All three allow meta level methods that are cued by meta events such as goal adoption or plan failure, and offer introspective capabilities over goal and intention states.",
                "Such meta level facilities are also required by the approach of Unruh et al. [21], who define goal-based semantic compensation for an agent.",
                "Failure-handling goals are invoked according to failurehandling strategy rules, by a dedicated agent Failure Handling Component (FHC) that tracks task execution.",
                "These goals are specified by the agent programmer and attached to tasks, much like our FAb(P, PF , PA) construct associates failure and abort methods with a plan P. Note, however, that in contrast to both [6] and our semantics, [21] attach the failure-handling knowledge at the goal, not plan, level.",
                "Their failure-handling goals may consist of stabilization goals that perform localized, immediate clean-up to restore the agents state to a known, stable state, and compensation goals that perform undo actions.",
                "Compensation goals are triggered on aborting a goal, and so not necessarily on goal failure (i.e., if the FHC directs the agent to retry the failed goal and the retry is successful).",
                "The FHC approach is defined at the goal level in order to facilitate abstract specification of failure-handling knowledge; the FHC decides when to address a failure and what to do (i.e., what failurehandling goals to invoke), separating this knowledge from the how of implementing corrective actions (i.e., what plan to execute to meet the adopted failure-handling goal).",
                "This contrasts with simplistic plan-level failure handling in which the what and how are intermingled in domain task knowledge.",
                "While our approach is defined at the plan level, our extended BDI semantics provides for the separation of execution and failure handling.",
                "Further, the FHC explicitly maintains data structures to track agent execution.",
                "We leverage the existing execution structures and self-reflective ability of a BDI agent to accomplish both aborting and failure handling without additional overhead.",
                "FHCs failure-handling strategy rules (e.g., whether to retry a failed goal) are replaced by instructions in our PF and PA plans, together with meta-level default failure handlers according to the agents nature (e.g., blindly committed).",
                "The FHC approach is independent of the architecture of the agent itself, in contrast to our work that is dedicated to the BDI formalism (although not tied to any one agent system).",
                "Thus no formal semantics are developed in [21]; the FHCs operation is given as 14 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) a state-based protocol.",
                "This approach, together with state checkpointing, is used for multi-agent systems in [22].",
                "The resulting architecture embeds their failure handling approach within a pair processing architecture for agent crash recovery.",
                "Other work on multi-agent exception handling includes AOEXs distributed exception handling agents [5], and the similar sentinels of [8].",
                "In both cases, failure-handling logic and knowledge are decoupled from the agents; by contrast, while separating exception handling from domain-specific knowledge, Unruh et al.s FHC and our approach both retain failure-handling logic within an agent. 6.",
                "CONCLUSION AND FUTURE WORK The tasks and plans of an agent may not successfully reach completion, either by the choice of the agent to abort them (perhaps at the request of another agent to do so), or by unbidden factors that lead to failure.",
                "In this paper we have presented a procedure-based approach that incorporates aborting tasks and plans into the deliberation cycle of a BDI-style agent, thus providing a unified approach to failure and abort.",
                "Our primary contribution is an analysis of the requirements on the operation of the agent for aborting tasks and plans, and a corresponding operational semantics for aborting in the abstract agent language CAN.",
                "We are planning to implement an instance of our approach in the SPARK agent system [9]; in particular, the work of this paper will be the basis for SPARKs abort handling mechanism.",
                "We are also developing an analysis tool for our extended version of CAN as a basis for experimentation.",
                "An <br>intelligent agent</br> will not only gracefully handle unsuccessful tasks and plans, but also will deliberate over its cognitive attitudes to decide its next course of action.",
                "We have assumed the default behaviour of a BDI-style agent, according to its nature: for instance, to retry alternatives to a failed plan until one succeeds or until no alternative plans remain (in which case to fail the task).",
                "Future work is to place our approach in service of more dynamic agent reasoning, such as the introspection that an agent capable of reasoning over task interaction effects and resource requirements can accomplish [19, 12].",
                "Related to this is determining the cost of aborting a task or plan, and using this as an input to the deliberation process.",
                "This would in particular influence the commitment the agent has towards a particular task: the higher the cost, the greater the commitment.",
                "Our assumption that abort-methods do not fail, as discussed above, is a pragmatic one.",
                "However, this is an issue worthy of further exploration, either to develop weaker assumptions that are also practical, or to analyze conditions under which our assumption is realistic.",
                "A further item of interest is extending our approach to failure and abort to maintenance goals [1].",
                "For such goals a different operational semantics for abort is necessary than for achievement goals, to match the difference in semantics of the goals themselves.",
                "Acknowledgements We thank Lin Padgham and the anonymous reviewers for their comments.",
                "The first author acknowledges the support of the Australian Research Council and Agent Oriented Software under grant LP0453486.",
                "The work of the two authors at SRI International was supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No.",
                "NBCHD030010.",
                "Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the view of DARPA or the Department of Interior-National Business Center. 7.",
                "REFERENCES [1] L. Braubach, A. Pokahr, D. Moldt, and W. Lamersdorf.",
                "Goal representation for BDI Agent systems.",
                "In Proc. of Second Intl.",
                "Workshop on Programming Multi-Agent Systems (ProMAS04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson, and A. Lucas.",
                "JACK intelligent agents - components for intelligent agents in Java.",
                "AgentLink News, Issue 2, 1999. [3] M. G. Chessell, C. Vines, D. Butler, C. M. Ferreira, and P. Henderson.",
                "Extending the concept of transaction compensation.",
                "IBM Systems Journal, 41(4), 2002. [4] M. Dastani, M. B. van Riemsdijk, and J.-J.",
                "C. Meyer.",
                "Goal types in agent programming.",
                "In Proc. of AAMAS06, 2006. [5] S. Entwisle, S. Loke, S. Krishnaswamy, and E. Kendall.",
                "Aoex: An agent-based exception handling framework for building reliable, distributed, open software systems.",
                "In Proc. of Seventh Joint Conf. on Knowledge-Based Software Engineering, 2006. [6] J. F. H¨ubner, R. H. Bordini, and M. Wooldridge.",
                "Programming declarative goals using plan patterns.",
                "In Proc. of 4th Intl.",
                "Workshop on Declarative Agent Languages and Technologies, 2006. [7] D. Kinny.",
                "The Psi calculus: an algebraic agent language.",
                "In Proc. of ATAL01, 2001. [8] M. Klein, J.",
                "A. Rodr´ıguez-Aguilar, and C. Dellarocas.",
                "Using domain-independent exception handling services to enable robust open multi-agent systems: The case of agent death.",
                "Autonomous Agents and Multi-Agent Systems, 7(1-2):179-189, 2003. [9] D. Morley and K. Myers.",
                "The SPARK agent framework.",
                "In Proc. of AAMAS04, 2004. [10] D. Morley, K. L. Myers, and N. Yorke-Smith.",
                "Continuous refinement of agent resource estimates.",
                "In Proc. of AAMAS06, 2006. [11] K. Myers, P. Berry, J. Blythe, K. Conley, M. Gervasio, D. McGuinness, D. Morley, A. Pfeffer, M. Pollack, and M. Tambe.",
                "An intelligent personal assistant for task and time management.",
                "AI Magazine, 28, 2007.",
                "To appear. [12] K. L. Myers and N. Yorke-Smith.",
                "A cognitive framework for delegation to an assistive user agent.",
                "In Proc. of AAAI 2005 Fall Symposium on Mixed-Initiative Problem-Solving Assistants, 2005. [13] L. Padgham and M. Winikoff.",
                "Developing <br>intelligent agent</br> Systems: A Practical Guide.",
                "John Wiley and Sons, 2004. [14] A. Pokahr, L. Braubach, and W. Lamersdorf.",
                "Jadex: A BDI reasoning engine.",
                "In R. Bordini, M. Dastani, J. Dix, and A. E. F. Seghrouchni, editors, Multi-Agent Programming.",
                "Springer, 2005. [15] A. S. Rao.",
                "AgentSpeak(L): BDI agents speak out in a logical computable language.",
                "In Proc. of Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World, 1996. [16] A. S. Rao and M. P. Georgeff.",
                "An abstract architecture for rational agents.",
                "In Proc. of KR92, 1992. [17] S. Sardi˜na, L. de Silva, and L. Padgham.",
                "Hierarchical planning in BDI agent programming languages: a formal approach.",
                "In Proc. of AAMAS06, 2006. [18] S. Sardina and L. Padgham.",
                "Goals in the context of bdi plan failure and planning.",
                "In Proc. of AAMAS07, 2007. [19] J. Thangarajah, L. Padgham, and M. Winikoff.",
                "Detecting and exploiting positive goal interaction in intelligent agents.",
                "In Proc. of AAMAS03, 2003. [20] J. Thangarajah, M. Winikoff, L. Padgham, and K. Fischer.",
                "Avoiding resource conflicts in intelligent agents.",
                "In Proc. of ECAI-02, 2002. [21] A. Unruh, J. Bailey, and K. Ramamohanarao.",
                "A framework for goal-based semantic compensation in agent systems.",
                "In Proc. of First Intl.",
                "Workshop on Safety and Security in Multi-Agent Systems, 2004. [22] A. Unruh, H. Harjadi, J. Bailey, and K. Ramamohanarao.",
                "Semantic-compensation-based recovery management in multi-agent systems.",
                "In Proc. of Second IEEE Symposium on Multi-Agent Security and Survivability (IEEE MAS&S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland, and J. Thangarajah.",
                "Declarative and procedural goals in <br>intelligent agent</br> systems.",
                "In Proc. of KR02, 2002.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 15"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Además de lidiar con el fracaso, una capacidad importante de un \"agente inteligente\" es poder abortar una tarea o plan en particular.agente inteligente",
                "Un \"agente inteligente\" no solo manejará con gracia tareas y planes sin éxito, sino que también deliberará sobre sus actitudes cognitivas para decidir su próximo curso de acción.agente inteligente",
                "Desarrollo de sistemas de \"agente inteligente\": una guía práctica.agente inteligente",
                "Objetivos declarativos y de procedimiento en sistemas de \"agente inteligente\".agente inteligente"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "failure": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Aborting Tasks in BDI Agents John Thangarajah, James Harland RMIT University Melbourne, Australia {johthan,jah}@cs.rmit.edu.au David Morley, Neil Yorke-Smith Artificial Intelligence Center, SRI International Menlo Park, CA 94025 U.S.A. {morley,nysmith}@ai.sri.com ABSTRACT Intelligent agents that are intended to work in dynamic environments must be able to gracefully handle unsuccessful tasks and plans.",
                "In addition, such agents should be able to make rational decisions about an appropriate course of action, which may include aborting a task or plan, either as a result of the agents own deliberations, or potentially at the request of another agent.",
                "In this paper we investigate the incorporation of aborts into a BDI-style architecture.",
                "We discuss some conditions under which aborting a task or plan is appropriate, and how to determine the consequences of such a decision.",
                "We augment each plan with an optional abort-method, analogous to the <br>failure</br> method found in some agent programming languages.",
                "We provide an operational semantics for the execution cycle in the presence of aborts in the abstract agent language CAN, which enables us to specify a BDI-based execution model without limiting our attention to a particular agent system (such as JACK, Jadex, Jason, or SPARK).",
                "A key technical challenge we address is the presence of parallel execution threads and of sub-tasks, which require the agent to ensure that the abort methods for each plan are carried out in an appropriate sequence.",
                "Categories and Subject Descriptors I.2.11 [ARTIFICIAL INTELLIGENCE]: Distributed Artificial Intelligence-Intelligent agents General Terms Design, Reliability, Theory 1.",
                "INTRODUCTION Intelligent agents generally work in complex, dynamic environments, such as air traffic control or robot navigation, in which the success of any particular action or plan cannot be guaranteed [13].",
                "Accordingly, dealing with <br>failure</br> is fundamental to agent programming, and is an important element of agent characteristics such as robustness, flexibility, and persistence [21].",
                "In agent architectures inspired by the Belief-Desire-Intention (BDI) model [16], these properties are often characterized by the interactions between beliefs, goals, and plans [2].1 In general, an agent that wishes to achieve a particular set of tasks will pursue a number of plans concurrently.",
                "When failures occur, the choice of plans will be reviewed.",
                "This may involve seeking alternative plans for a particular task, re-scheduling tasks to better comply with resource constraints, dropping some tasks, or some other decision that will increase the likelihood of success [12, 14].",
                "Failures can occur for a number of reasons, and it is often not possible to predict these in advance, either because of the complexity of the system or because changes in the environment invalidate some earlier decisions.",
                "Given this need for deliberation about failed tasks or plans, <br>failure</br> deliberation is commonly built into the agents execution cycle.",
                "Besides dealing with <br>failure</br>, an important capability of an intelligent agent is to be able to abort a particular task or plan.",
                "This decision may be due to an internal deliberation (such as the agent believing the task can no longer be achieved, or that some conflicting task now has a higher priority) or due to an external factor (such as another agent altering a commitment, or a change in the environment).",
                "Aborting a task or plan is distinct from its <br>failure</br>.",
                "<br>failure</br> reflects an inability to perform and does not negate the need to perform - for example, a reasonable response to <br>failure</br> may be to try again.",
                "In contrast, aborting says nothing about the ability to perform; it merely eliminates the need.",
                "<br>failure</br> propagates from the bottom up, whereas aborting propagates from the top down.",
                "The potential for concurrently executing sub-plans introduces different complexities for aborting and <br>failure</br>.",
                "For aborting, it means that multiple concurrent sub-plans may need to be aborted as the abort is propagated down.",
                "For <br>failure</br>, it means that parallel-sibling plans may need to be aborted as the <br>failure</br> is propagated up.",
                "There has been a considerable amount of work on plan failures (such as detecting and resolving resource conflicts [20, 10]) and most agent systems incorporate some notion of <br>failure</br> handling.",
                "However, there has been relatively little work on the development of abort techniques beyond simple dropping of currently intended plans and tasks, which does not deal with the clean-up required.",
                "As one consequence, most agent systems are quite limited in their treatment of the situation where one branch of a parallel construct 1 One can consider both tasks to be performed and goals to achieve a certain state of the world.",
                "A task can be considered a goal of achieving the state of the task having been performed, and a goal can be considered a task of bringing about that state of the world.",
                "We adopt the latter view and use task to also refer to goals. 8 978-81-904262-7-5 (RPS) c 2007 IFAAMAS fails (common approaches include either letting the other branch run to completion unhindered or dropping it completely).",
                "In this paper we discuss in detail the incorporation of abort cleanup methods into the agent execution cycle, providing a unified approach to <br>failure</br> and abort.",
                "A key feature of our procedure-based approach is that we allow each plan to execute some particular code on a <br>failure</br> and on an abort.",
                "This allows a plan to attempt to ensure a stable, known state, and possibly to recover some resources and otherwise clean up before exiting.",
                "Accordingly, a central technical challenge is to manage the orderly execution of the appropriate clean-up code.",
                "We show how aborts can be smoothly introduced into a BDI-style architecture, and for the first time we give an operational semantics for aborting in the abstract agent language CAN [23, 17].",
                "This allows us to specify an appropriate level of detail for the execution model, without focusing on the specific constructs of any one agent system such as JACK [2], Jadex [14], Jason [6], or SPARK [9].",
                "Our focus is on a single agent, complementary to related work that considers exception handling for single- and multiagent systems (e.g., [22, 5, 6]).",
                "This paper is organized as follows.",
                "In Section 2 we give an example of the consequences of aborting a task, and in Section 3 we discuss some circumstances under which aborts should occur, and the appropriate representation and invocation procedures.",
                "In Section 4 we show how we can use CAN to formally specify the behaviour of an aborted plan.",
                "Section 5 discusses related work, and in Section 6 we present our conclusions and future work. 2.",
                "MOTIVATING EXAMPLE Alice is a knowledge worker assisted by a learning, personal assistive agent such as CALO [11].",
                "Alice plans to attend the IJCAI conference later in the year, and her CALO agent adopts the task of Support Meeting Submission (SMS) to assist her.",
                "CALOs plan for an SMS task in the case of a conference submission consists of the following sub-tasks: 1.",
                "Allocate a Paper Number (APN) to be used for administrative purposes in the company. 2.",
                "Track Writing Abstract (TWA): keep track of Alices progress in preparing an abstract. 3.",
                "Apply For Clearance (AFC) for publication from Alices manager based on the abstract and conference details. 4.",
                "Track Writing Paper (TWP): keep track of Alices progress in writing the paper. 5.",
                "Handle Paper Submission (HPS): follow company internal procedures for submitting a paper to a conference.",
                "These steps must be performed in order, with the exception of steps 3 (AFC) and 4 (TWP), which may be performed in parallel.",
                "Similarly, CALO can perform the task Apply For Clearance (AFC) by a plan consisting of: 1.",
                "Send Clearance Request (SCR) to Alices manager. 2.",
                "Wait For Response (WFR) from the manager. 3.",
                "Confirm that the response was positive, and fail otherwise.",
                "Now suppose that a change in circumstances causes Alice to reconsider her travel plans while she is writing the paper.",
                "Alice will no longer be able to attend IJCAI.",
                "She therefore instructs her CALO agent to abort the SMS task.",
                "Aborting the task implies aborting both the SMS plan and the AFC subplan.",
                "Aborting the first plan requires CALO to notify the paper number registry that the allocated paper number is obsolete, which it can achieve by the Cancel Paper Number (CPN) task.2 Aborting the second plan requires CALO to notify Alices manager that Alice no longer requires clearance for publication, which CALO can achieve by invoking the Cancel Clearance Request (CCR) task.",
                "We note a number of important observations from the example.",
                "First, the decision to abort a particular course of action can come from the internal deliberations of the agent (such as reasoning about priorities in a conflict over resources), or from external sources (such as another agent cancelling a commitment), as in this example.",
                "In this paper we only touch on the problem of determining whether a task or plan should be aborted, instead concentrating on determining the appropriate actions once this decision is made.",
                "Hence, our objective is to determine how to incorporate aborting mechanisms into the standard execution cycle rather than determine what should be aborted and when.",
                "Second, once the decision is made to abort the attempt to submit a paper, there are some actions the agent should take, such as cancelling the clearance request.",
                "In other words, aborting a task is not simply a matter of dropping the task and associated active plans: there are some clean up actions that may need to be done.",
                "This is similar to the case for <br>failure</br>, in that there may also be actions to take when a task or plan fails.",
                "In both cases, note that it is not simply a matter of the agent undo-ing its actions to date; indeed, this may be neither possible (since the agent acts in a situated world and its actions change world state) nor desirable (depending on the semantics of the task).",
                "Rather, cleaning up involves compensation via forward recovery actions [3].",
                "Third, there is a distinction between aborting a task and aborting a plan.",
                "In the former case, it is clear that all plans being executed to perform the task should be aborted; in the latter case, it may be that there are better alternatives to the current plan and one of these should be attempted.",
                "Hence, plan aborting or <br>failure</br> does not necessarily lead to task aborting or <br>failure</br>.",
                "Fourth, given that tasks may contain sub-tasks, which may contain further sub-tasks, it is necessary for a parent task to wait until its children have finished their abort methods.",
                "This is the source of one of the technical challenges that we address: determining the precise sequence of actions once a parent task or plan is aborted. 3.",
                "ABORTING TASKS AND PLANS As we have alluded to, <br>failure</br> and aborting are related concepts.",
                "They both cause the execution of existing plans to cease and, consequentially, the agent to reflect over its current tasks and intentions.",
                "<br>failure</br> and aborting, however, differ in the way they arise.",
                "In the case of <br>failure</br>, the trigger to cease execution of a task or plan comes from below, that is, the <br>failure</br> of sub-tasks or lower-level plans.",
                "In the case of aborting, the trigger comes from above, that is, the tasks and the parent plans that initiated a plan.",
                "In BDI-style systems such as JACK and SPARK, an agents domain knowledge includes a pre-defined plan library of plan clauses.",
                "Each plan clause has a plan body, which is a program (i.e., combination of primitive actions, sub-tasks, etc.) that can be executed in response to a task or other event should the plan clauses context condition be satisfied.",
                "The agent selects and executes instances of plan clauses to perform its tasks.",
                "There can be more than one applicable plan clause and, in the event that one fails, another applicable one may be attempted.",
                "Plans may have sub-tasks that must succeed 2 CALO needs only drop the TWA and TWP tasks to abort them: for the sake of simplicity we suppose no explicit clean up of its internal state is necessary.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 9 for the plan to succeed.",
                "In such systems, a plan <br>failure</br> occurs if one of the actions or sub-tasks within the plan fails.",
                "The agents action upon plan <br>failure</br> depends on its nature: for example, the agent may declare the task to have failed if one plan has been tried and resulted in <br>failure</br>, or it may retry alternate plans and declare (indeed, must declare) task failure only if all possible alternate plans to perform the task have been tried and resulted in failure.",
                "Observe that, while task <br>failure</br> can follow from plan <br>failure</br> or a sequence of plan failures, plan failure need not lead to task failure provided the agent can successfully complete an alternate plan.",
                "Moreover, task <br>failure</br> can also arise separately from plan <br>failure</br>, if the agent decides to abort the task.",
                "Our approach associates an abort-method with each plan.",
                "This enables the programmer to specify dedicated compensation actions according to how the agent is attempting to perform the task.",
                "Note that our abort-methods can be arbitrary programs and so can invoke tasks that may be performed dynamically in the usual BDI fashion, i.e., the clean-up is not limited to executing a predetermined set of actions.",
                "The question remains which abort-method should be invoked, and in what manner.",
                "Given the complexity of agent action spaces, it is not possible nor desirable to enumerate a static set of rules.",
                "Rather, the agent will invoke its abort-methods dynamically according to the state of execution and its own internal events.",
                "An alternative to attaching an abort-method to each plan is to attach such methods to each atomic action.",
                "We choose the former because: (1) action-level abort-methods would incur a greater overhead, (2) plans are meant to be designed as single cohesive units and are the unit of deliberation in BDI systems, and (3) the cleanup methods for <br>failure</br> in current systems are attached to plans.",
                "In order to understand how the agents abort processing should function, we consider three situations where it is sensible for an agent to consider aborting some of its tasks and plans: 1.",
                "When a task succeeds or fails because of an external factor other than the agent itself, the plan currently executed to perform the task should be aborted.",
                "For example, suppose company policy changes so that employees of Alices seniority automatically have clearance for publishing papers.",
                "Since Alice now has clearance for publishing her paper, CALO can abort the plan for Apply For Clearance.",
                "In doing so it must invoke the abort-method, in this case thus performing Cancel Clearance Request.3 2.",
                "When two or more sub-programs are executed in parallel, if one fails then the others should be aborted, given that the <br>failure</br> of one branch leads to the <br>failure</br> of the overall task.",
                "For example, suppose that part-way through writing the paper, Alice realizes that there is a fatal flaw in her results, and so notifies CALO that she will not be able to complete the paper by the deadline.",
                "The <br>failure</br> of the Track Writing Paper task should cause the Apply For Clearance task being executed in parallel to be aborted. 3.",
                "When an execution event alters the importance of an existing task or intention, the agent should deliberate over whether the existing plan(s) should continue.",
                "For example, suppose that Alice tasks CALO with a new, high-priority task to purchase a replacement laptop, but that Alice lacks enough funds to both purchase the laptop and to attend IJCAI.",
                "Reasoning over resource requirements [20, 10] will cause the agent to realize 3 If there is any difference between how to abort a task that is externally performed versus how to abort one that is now known to be impossible, the abort-method can detect the circumstances and handle the situation as appropriate. that it cannot successfully complete both tasks.",
                "Given that the new task has greater importance, a rational agent will evaluate its best course of action and may decide to abortor at least suspend - the existing task of submitting a paper and intentions derived from it [12].",
                "The operational semantics we provide in Section 4 for aborting tasks and plans captures the first two situations above.",
                "The third situation involves deliberating over the importance of a task, which depends on various factors such as task priority.",
                "Although this deliberation is beyond the scope of this paper, it is a complementary topic of our future work.",
                "Note that the above situations apply to achievement goals, for which the task is completed when a particular state of the world is brought about (e.g., ensure we have clearance).",
                "Different forms of reasoning apply to other goal types [4] such as maintenance goals [1], where the goal is satisfied by maintaining a state of the world for some period of time (e.g., maintain $100 in cash).",
                "Abort Method Representation The intent of aborting a task or plan is that the task or plan and all its children cease to execute, and that appropriate clean-up methods are performed as required.",
                "In contrast to offline planning systems, BDI agents are situated: they perform online deliberation and their actions change the state of the world.",
                "As a result, the effects of many actions cannot be simply undone.",
                "Moreover, the undo process may cause adverse effects.",
                "Therefore, the clean-up methods that we specify are forward recovery procedures that attempt to ensure a stable state and that also may, if possible, recover resources.",
                "The common plan representation in BDI-style systems such as JACK and SPARK includes a <br>failure</br>-method, which is the designated clean-up method invoked when the plan fails.",
                "To this, we add the abort-method, which is invoked if the plan is to be aborted.",
                "In our example, the abort-method for the plan for Support Meeting Submission consists of invoking the sub-task Cancel Paper Number.",
                "The abort-method need not explicitly abort Apply For Clearance, because the agent will invoke the abort-method for the subtask appropriately, as we outline below.",
                "The assumption here is that, like the <br>failure</br>-method, the programmer of the agent system has the opportunity to specify a sensible abort-method that takes into consideration the point in the plan at which the abort is to be executed.",
                "For any plan, the abort-method is optional: if no abort-method is specified, the agent takes no specific action for this plan.",
                "However, the agents default behavioural rules still apply, for example, whether to retry an alternate plan for the parent task.",
                "Note that an explicit representation of the clean-up methods for tasks is not required, since tasks are performed by executing some plan or plans.",
                "Hence, aborting a task means aborting the current plan that is executed to perform that task, as we next describe.",
                "Abort Method Invocation We now informally lay out the agents action upon aborting plans and tasks.",
                "When a plan P is aborted: 1.",
                "Abort each sub-task that is an active child of P. An active child is one that was triggered by P and is currently in execution. 2.",
                "When there are no more active children, invoke the abort method of plan P. 3.",
                "Indicate a plan <br>failure</br> to TP , the parent task of P. We note here that if the parent task TP is not to be aborted then the agent may choose another applicable plan to satisfy TP . 10 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) When a task (or sub-task) T is aborted: 1.",
                "Abort the current active plan to satisfy T (if any). 2.",
                "When there are no more active child processes, drop the task.",
                "The agent thus no longer pursues T. 3.",
                "Note here that when the current active plan for performing T is aborted, no other applicable plans to perform T should be tried as it is the task that is to be aborted.",
                "In order to prevent infinitely cascading clean-up efforts, we assume that abort-methods will never be aborted nor fail.",
                "In reality, however, an abort-method may fail.",
                "In this case, lacking a more sophisticated handling mechanism, the agent simply stops executing the failed abort-method with no further deliberation.",
                "The assumption we make is thus not a reflection of the full complexity of reality, but one that is pragmatic in terms of the agent execution cycle; the approach to <br>failure</br>-handling of [21] makes the same assumption.",
                "In systems such as SPARK, the programmer can specify an alternative behaviour for a failed <br>failure</br>- or abort-method by means of meta-level procedures.",
                "We also assume that <br>failure</br>- and abort-methods terminate in finite time. 4.",
                "OPERATIONAL SEMANTICS We provide the semantics for the task and plan <br>failure</br> and aborting processes outlined above.",
                "We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the goal adoption and dropping mechanisms.",
                "The extensions also simplified the semantics in the earlier work.",
                "We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1.",
                "Following a presentation of the operational semantics of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present. 4.1 CAN Language CAN is a high-level agent language, in a spirit similar to that of AgentSpeak [15] and Kinnys Ψ [7], both of which attempt to extract the essence of a class of implemented BDI agent systems.",
                "CAN provides an explicit goal construct that captures both the declarative and procedural aspects of a goal.",
                "Goals are persistent in CAN in that, when a plan fails, another applicable plan is attempted.",
                "This equates to the default <br>failure</br> handling mechanism typically found in implemented BDI systems such as JACK [2].",
                "In practical systems, tasks are typically translated into events that trigger the execution of some plans.",
                "This is also true in the CAN language, but, in order to maintain the persistence of goals, a goal construct is introduced.",
                "This is denoted by Goal ` φs, P, φf ´ , where φs is the success condition that determines when the goal is considered achieved, φf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once φs or φf become true.",
                "An agents behavior is specified by a plan library, denoted by Π, that consists of a collection of plan clauses of the form e : c ← P, where e is an event, c is a context condition (a logical formula over the agents beliefs that must be true in order for the plan to be applicable)4 and P is the plan body.",
                "The plan body is a program that is defined recursively as follows: P ::= act | +b | −b | ?φ | !e | P1; P2 | P1 P2 | Goal ` φs, P1, φf ´ | P1 P2 | {ψ1 : P1, . . . , ψn : Pn} | nil 4 An omitted c is equivalent to true.",
                "Δ = {ψiθ : Piθ | e : ψi ← Pi ∈ Π ∧ θ = mgu(e, e )} B, !e −→ B, Δ Event ψi : Pi ∈ Δ B |= ψi B, Δ −→ B, Pi Δ \\ {ψi : Pi} Select B, P1 −→ B, (P1 P2) −→ B, P2 fail B, P1 −→ B , P1 B, (P1; P2) −→ B , (P ; P2) Sequence B, P1 −→ B , P B, (P1 P2) −→ B , (P P2) Parallel1 B, P2 −→ B , P B, (P1 P2) −→ B , (P P1) Parallel2 Figure 1: Operational rules of CAN. where P1, . . . , Pn are themselves programs, act is a primitive action that is not further specified, and +b and −b are operations to add and delete beliefs.",
                "The belief base contains ground belief atoms in the form of first-order relations but could be orthogonally extended to other logics.",
                "It is assumed that well-defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ∪ {b}), and to delete a belief from a belief set (B \\ {b}). ?φ is a test for condition φ, and !e5 is an event6 that is posted from within the program.",
                "The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (Goal ` φs, P, φf ´ ).",
                "The above defines the user language.",
                "In addition, a set of auxiliary compound forms are used internally when assigning semantics to constructs. nil is the basic (terminating) program.",
                "When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 : P1, . . . , cn : Pn ).",
                "The other auxiliary compound form, , is a choice operator dual to sequencing: P1 P2 executes P1 and then executes P2 only if P1 failed.",
                "A summary of the operational semantics for CAN in line with [23] and following some of the simplifications of [17] is as follows.",
                "A basic configuration S = B, G, Γ consists of the current belief base B of the agent, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention).",
                "A transition S0 −→ S1 specifies that executing S0 for a single step yields configuration S1.",
                "S0 −→∗ Sn is the usual reflexive transitive closure of −→: Sn is the result of one or more singlestep transitions.",
                "A derivation rule S −→ Sr S −→ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator).",
                "Figure 1 gives some of the operational rules.",
                "The Event rule handles task events by collecting all relevant plan clauses for the event in question: for each plan clause e : ψi ← Pi, if there is a most general unifier, θ = mgu(e, e ) of e and the event in 5 Where it is obvious that e is an event we will sometimes exclude the exclamation mark for readability. 6 Typically an achievement goal.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 11 B |= φs B, Goal ` φs, P, φf ´ −→ B, true Gs B |= φf B, Goal ` φs, P, φf ´ −→ B, fail Gf P = Goal ` φs, P , φf ´ P = P1 £ P2 B |= φs ∨ φf B, P −→ B, Goal ` φs, P £ P , φf ´ GI P = P1 £ P2 B |= φs ∨ φf B, P1 −→ B , P B, Goal ` φs, P, φf ´ −→ B , Goal ` φs, P £ P2, φf ´ GS P = P1 £ P2 B |= φs ∨ φf P1 ∈ {true, fail} B, Goal ` φs, P, φf ´ −→ B, Goal ` φs, P2 £ P2, φf ´ GR Figure 2: Rules for goals in CAN. question, then the rule constructs a guarded alternative ψiθ : Piθ.",
                "The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives: program P Δ states that program P should be tried first, falling back to the remaining alternatives, Δ \\ P, if necessary.",
                "This rule and the fail rule together are used for <br>failure</br> handling: if the current program Pi from a plan clause for a task fails, rule fail is applied first, and then if possible, rule Select will choose another applicable alternative for the task if one exists.",
                "Rule Sequence handles sequencing of programs in the usual way.",
                "Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel.",
                "Figure 2 gives simplified rules for dealing with goals, in line with those presented in [17].",
                "The first rule states that a goal succeeds when φs become true; the second rule states that a goal fails when φf become true.",
                "The third rule GI initializes the execution of a goal-program by updating the goal base and setting the program in the goal to P £ P; the first P is to be executed and the second P is used to keep track of the original program for the goal.",
                "The fourth rule GS executes a single step of the goal-program.",
                "The final rule GR restarts the original program (encoded as P2 of pair P1 £ P2) whenever the current program is finished but the desired and still possible goal has not yet been achieved. 4.2 Aborting Intentions and Handling <br>failure</br> We next introduce the ability to specify handler programs, in the form of <br>failure</br>- and abort-methods, that deal with the clean-up required when a given program respectively fails or is aborted.",
                "We do not associate <br>failure</br>- and abort- methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies <br>failure</br>- and abort- methods for an arbitrary program.",
                "The FAb(P, PF , PA) construct executes the program P. Should P fail, it executes the <br>failure</br> handling program PF ; should P need to be aborted, it executes the abort handling program PA.",
                "Thus to add <br>failure</br>- and abort- methods PF and PA to a plan clause e : c ← P, we write e : c ← FAb(P, PF , PA).",
                "With the introduction of the ability to abort programs, we modify the parallel construct to allow the <br>failure</br> of one branch to abort the other.",
                "We must take into consideration the possible existence of abort-methods in the aborted branch.",
                "Similarly, with the Goal construct we can no longer completely abandon the program the goal contains as soon as the success or <br>failure</br> condition holds; we must now take into consideration the existence of any abort-methods applicable to the program.",
                "We provide the semantics of an augmented agent language containing the FAb construct by defining a source transformation, similar to macro-expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN.",
                "The one non-standard extension to CAN is a wait-until-condition construct.",
                "We explain this simple modification of the parallel construct below when we come to translation of the Goal construct.",
                "First we describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases: the FAb, parallel, and Goal constructs.",
                "A key issue is that the FAb constructs may be nested, either directly or indirectly.",
                "Let us call each instantiation of the construct at execution time a possible abort point (pap).",
                "Where these constructs are nested, it is important that before the <br>failure</br>- or abort-method of a parent pap is executed, the <br>failure</br>- or abort-methods programs of the children paps are executed first, as described earlier in Section 3.",
                "The need to coordinate the execution of the abort-methods of nested paps requires that there be some way to identify the parents and children of a particular pap.",
                "We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e : c ← P with a plan clause e(v) : c ← μv(P) where v is a free variable, not previously present in the plan clause.",
                "This variable is used to keep track of the context of execution.",
                "The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context.",
                "For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1].",
                "We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51.",
                "This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v .",
                "For most CAN constructs, the context variable is unused or passed unchanged: μv(act) = act μv(+b) = +b μv(−b) = −b μv(nil) = nil μv(!e) = !e(v) μv(P1; P2) = μv(P1); μv(P2) μv(P1 P2) = μv(P1) μv(P2) μv( ψ1 : P1, . . . , ψn : Pn ) = ψ1 : μv(P1), . . . , ψn : μv(Pn) It remains to specify the transformation μv(·) in three cases: the FAb, parallel, and Goal constructs.",
                "These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context.",
                "Let us introduce the primitive action prependID(v, v ) that creates a new pap identifier and prepends it to list v giving list v .",
                "We also introduce the following predicates: • a(v) - the pap v is currently active. • abort(v) - the pap v should be aborted (after aborting all of its descendants). 7 An alternative would be to use meta-level predicates that reflect the current state of the intention structure. 12 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) • f(v) - the program of pap v has failed. • ancestorof(v, v ) ≡ v = v ∨ ancestorof(v, tail(v ))the pap v is an ancestor of pap v . • nac(v) ≡ ¬∃v . (a(v ) ∧ ancestorof(v, v ) ∧ v = v ) - v has no active children. • sa(v) ≡ ∃v .abort(v ) ∧ ancestorof(v , v) - we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active. • san(v) ≡ sa(v) ∧ nac(v) - we should abort v now if we should abort v and v has no active children.",
                "First let us consider the case of the FAb construct.",
                "The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v. We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context.",
                "We need to make sure that we retract the belief that v is active at the end, i.e., −a(v ).",
                "We use the Goal construct to allow us to drop the execution of a program within a pap v when it is necessary to abort.",
                "While executing the program P, we know that we need to drop P and invoke its abort-method if some ancestor of P has been told to abort.",
                "This is represented by the predicate sa(v ) being true.",
                "However, we need to make sure that we do this only after every child pap has had the chance to invoke its abort-method and all these abort-methods have completed: if we drop the program too soon, then execution of the abort-methods of the children will also be dropped.",
                "Therefore, the condition we actually use in the Goal construct to test when to drop the program is san(v ).",
                "This condition relies on the fact that as the children paps complete, they remove the relevant a facts.",
                "Our use of the Goal construct is for its ability to drop the execution of a program when conditions are met.",
                "To leave aside the repeat execution until a condition is met aspect, we must ensure that the success or <br>failure</br> condition of the construct is satisfied once the execution of the program succeeds or fails.",
                "We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on <br>failure</br>, and by having the appropriate success and <br>failure</br> conditions on the Goal.",
                "Hence, if the Goal construct fails, then the program either was aborted or it failed.",
                "We invoke the relevant <br>failure</br>- or abort- method, retract the a(v ) fact, and then fail.",
                "Putting all this together, we formally define μv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agents plan library: prependID(v, v ); +a(v ); Goal ( ¬a(v ), (μv (P); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); μv(PA)) μv(PF )); −a(v ); ?false) Second, we must transform the parallel operator to ensure that the <br>failure</br> of one branch safely aborts the other.",
                "Here we construct two new contexts, v and v , from the existing context v. If one branch fails, it must abort the other branch.",
                "At the end, if either branch was aborted, then we must fail.",
                "Let v and v be new variables distinct from any other in the agents plan library.",
                "We define μv(P1 P2) to be: prependID(v, v ); prependID(v, v ); +a(v ); +a(v ); ( Goal (¬a(v ), (μv (P1); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal (¬a(v ), (μv (P2); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ); ?¬abort(v ) ∧ ¬abort(v ) Finally, we need to modify occurrences of the Goal construct in two ways: first, to make sure that the abort handling methods are not bypassed when the success or <br>failure</br> conditions are satisfied, and second, to trigger the aborting of the contained program when either the success or <br>failure</br> conditions are satisfied.",
                "To transform the Goal construct we need to extend standard CAN with a wait-until-condition construct.",
                "The construct φ : P does not execute P until φ becomes true.",
                "We augment the CAN language with the following rules for the guard operator :: B |= φ B, G, (φ : P −→ B, G, P :true B |= φ B, G, (φ : P) −→ B, G, (φ : P) :false In order to specify μv(Goal ` φs, P, φf ´ ), we generate a new pap and execute the program within the Goal construct in this new context.",
                "We must ensure that belief a(v ) is removed whether the Goal succeeds or fails.",
                "We shift the success and <br>failure</br> condition of the Goal construct into a parallel branch using the wait-until-condition construct, and modify the Goal to use the should abort now condition san(v ) as the success condition.",
                "The waiting branch will trigger the abort of the program should either the success or <br>failure</br> condition be met.",
                "To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active.",
                "Let v be a new variable distinct from any other in the agents plan library.",
                "We define μv(Goal ` φs, P, φf ´ ) to be: prependID(v, v ); +a(v ); ( Goal ( san(v ), μv (P), false) ; −a(v ); ?φs ) φs ∨ φf ∨ ¬a(v ) : +abort(v ) ) The program P will be repeatedly executed until san(v ) becomes true.",
                "There are two ways this can occur.",
                "First, if either the success condition φs or the <br>failure</br> condition φf becomes true, then the second branch of the parallel construct executes.",
                "This causes abort(v ) to become true, and, after the descendant paps abortmethods are executed, san(v ) becomes true.",
                "In this case, P is now dropped, the a(v ) is removed, and the entire construct succeeds or fails based on φs.",
                "The second way for san(v ) to become true is if v or one of its ancestors is aborted.",
                "In this case, once the descendant paps abort-methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming φs is false). 4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2.",
                "We will express tasks by events, for example, the task Allocate a Paper Number we express as the event APN.",
                "Let the output of the Apply For Clearance task be Y or N, indicating the approval or not of Alices manager, respectively.",
                "Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively: SMS(m) : isconf(m) ← FAb(!APN; !TWA; (!AFC !TWP); !HPS, !CPN, !CPN) AFC : true ← FAb(!SCR; !WFR(r); ?r = Y, nil, !CCR) Note that Support Meeting Submission has a parameter m, the meeting of interest (IJCAI, in our example), while Apply For Clearance has no parameters.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two.",
                "Let v and v denote new variables.",
                "Then we have as the translated plan clause: AFC(v ) : true ← prependID(v , v ); +a(v ); Goal ( ¬a(v ), (!SCR(v ); !WFR(r, v ); ?r = Y; −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CCR(v )) nil); −a(v ); ?false) We can see that an extra context parameter has been added to each task and that the old plan body now appears inside a Goal construct.",
                "Should the old plan body succeed, belief a(v ) is retracted, causing the Goal to succeed.",
                "If the old plan body fails, or if the task is to be aborted, the Goal construct fails.",
                "This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and <br>failure</br>.",
                "The translation of the first plan clause, for SMS, is more complex, because of the parallel construct that introduces nested paps: SMS(m, v) : isconf(m) ← prependID(v, v ); +a(v ); Goal ( ¬a(v ), ((!APN(v ); !TWA(v ); prependID(v , v ); prependID(v , v ); +a(v ); +a(v ); ( Goal ( ¬a(v ), (!AFC(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal ( ¬a(v ), (!TWP(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ) ; ?¬abort(v ) ∧ ¬abort(v ); !HPS(v ); −a(v )) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CPN(v)) !CPN(v)); −a(v ); ?false) Here we can see that if the task !TWP(v ) fails then f(v ) will be asserted, failing the Goal construct that contains it, and leading to abort(v ) being asserted.",
                "If the !WFR(r, v ) task in the expansion of !AFC(v ) is still executing and has no active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true.",
                "This set of conditions will cause the Goal construct in the first plan clause to fail, dropping execution of !WFR(r, v ).",
                "The task !CCR(v ) will be executed.",
                "Once this task completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first Goal construct of the second plan clause to fail.",
                "While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely automated, according to the rules set out in Section 4.2.",
                "The translated plan clauses, with the semantics of CAN augmented by our waituntil-condition construct, thus specify the operation of the agent to handle both <br>failure</br> and aborting for the example. 5.",
                "RELATED WORK Plan <br>failure</br> is handled in the extended version of AgentSpeak found in the Jason system [6].",
                "<br>failure</br> clean-up plans are triggered from goal deletion events −!g.",
                "Such plans, similar to our <br>failure</br> methods, are designed for the agent to effect state changes (act to undo its earlier actions) prior to possibly attempting another plan to achieve the failed goal g. Given Jasons constructs for dropping a goal with an indication of whether or not to try an alternate plan for it, H¨ubner et al. [6] provide an informal description of how a Jason agent modifies its intention structure when a goal <br>failure</br> event occurs.",
                "In a goal deletion plan, the programmer can specify any undo actions and whether to attempt the goal again.",
                "If no goal deletion plan is provided, Jasons default behaviour is to not reattempt the goal.",
                "<br>failure</br> handling is applied only to plans triggered by addition of an achievement or test goal; in particular, goal deletion events are not posted for <br>failure</br> of a goal deletion plan.",
                "Further, the informal semantics of [6] do not consider parallel sub-goals (i.e., the CAN construct), since such execution is not part of Jasons language.",
                "The implementation of H¨ubner et al. [6] requires Jasons internal actions.",
                "A requirement for implementing our approach is a reflective capability in the BDI agent implementation.",
                "Suitable implementations of the BDI formalism are JACK [2], Jadex [14], and SPARK [9].",
                "All three allow meta level methods that are cued by meta events such as goal adoption or plan <br>failure</br>, and offer introspective capabilities over goal and intention states.",
                "Such meta level facilities are also required by the approach of Unruh et al. [21], who define goal-based semantic compensation for an agent.",
                "<br>failure</br>-handling goals are invoked according to failurehandling strategy rules, by a dedicated agent <br>failure</br> Handling Component (FHC) that tracks task execution.",
                "These goals are specified by the agent programmer and attached to tasks, much like our FAb(P, PF , PA) construct associates <br>failure</br> and abort methods with a plan P. Note, however, that in contrast to both [6] and our semantics, [21] attach the <br>failure</br>-handling knowledge at the goal, not plan, level.",
                "Their <br>failure</br>-handling goals may consist of stabilization goals that perform localized, immediate clean-up to restore the agents state to a known, stable state, and compensation goals that perform undo actions.",
                "Compensation goals are triggered on aborting a goal, and so not necessarily on goal <br>failure</br> (i.e., if the FHC directs the agent to retry the failed goal and the retry is successful).",
                "The FHC approach is defined at the goal level in order to facilitate abstract specification of <br>failure</br>-handling knowledge; the FHC decides when to address a <br>failure</br> and what to do (i.e., what failurehandling goals to invoke), separating this knowledge from the how of implementing corrective actions (i.e., what plan to execute to meet the adopted failure-handling goal).",
                "This contrasts with simplistic plan-level <br>failure</br> handling in which the what and how are intermingled in domain task knowledge.",
                "While our approach is defined at the plan level, our extended BDI semantics provides for the separation of execution and <br>failure</br> handling.",
                "Further, the FHC explicitly maintains data structures to track agent execution.",
                "We leverage the existing execution structures and self-reflective ability of a BDI agent to accomplish both aborting and <br>failure</br> handling without additional overhead.",
                "FHCs <br>failure</br>-handling strategy rules (e.g., whether to retry a failed goal) are replaced by instructions in our PF and PA plans, together with meta-level default <br>failure</br> handlers according to the agents nature (e.g., blindly committed).",
                "The FHC approach is independent of the architecture of the agent itself, in contrast to our work that is dedicated to the BDI formalism (although not tied to any one agent system).",
                "Thus no formal semantics are developed in [21]; the FHCs operation is given as 14 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) a state-based protocol.",
                "This approach, together with state checkpointing, is used for multi-agent systems in [22].",
                "The resulting architecture embeds their <br>failure</br> handling approach within a pair processing architecture for agent crash recovery.",
                "Other work on multi-agent exception handling includes AOEXs distributed exception handling agents [5], and the similar sentinels of [8].",
                "In both cases, <br>failure</br>-handling logic and knowledge are decoupled from the agents; by contrast, while separating exception handling from domain-specific knowledge, Unruh et al.s FHC and our approach both retain <br>failure</br>-handling logic within an agent. 6.",
                "CONCLUSION AND FUTURE WORK The tasks and plans of an agent may not successfully reach completion, either by the choice of the agent to abort them (perhaps at the request of another agent to do so), or by unbidden factors that lead to <br>failure</br>.",
                "In this paper we have presented a procedure-based approach that incorporates aborting tasks and plans into the deliberation cycle of a BDI-style agent, thus providing a unified approach to <br>failure</br> and abort.",
                "Our primary contribution is an analysis of the requirements on the operation of the agent for aborting tasks and plans, and a corresponding operational semantics for aborting in the abstract agent language CAN.",
                "We are planning to implement an instance of our approach in the SPARK agent system [9]; in particular, the work of this paper will be the basis for SPARKs abort handling mechanism.",
                "We are also developing an analysis tool for our extended version of CAN as a basis for experimentation.",
                "An intelligent agent will not only gracefully handle unsuccessful tasks and plans, but also will deliberate over its cognitive attitudes to decide its next course of action.",
                "We have assumed the default behaviour of a BDI-style agent, according to its nature: for instance, to retry alternatives to a failed plan until one succeeds or until no alternative plans remain (in which case to fail the task).",
                "Future work is to place our approach in service of more dynamic agent reasoning, such as the introspection that an agent capable of reasoning over task interaction effects and resource requirements can accomplish [19, 12].",
                "Related to this is determining the cost of aborting a task or plan, and using this as an input to the deliberation process.",
                "This would in particular influence the commitment the agent has towards a particular task: the higher the cost, the greater the commitment.",
                "Our assumption that abort-methods do not fail, as discussed above, is a pragmatic one.",
                "However, this is an issue worthy of further exploration, either to develop weaker assumptions that are also practical, or to analyze conditions under which our assumption is realistic.",
                "A further item of interest is extending our approach to <br>failure</br> and abort to maintenance goals [1].",
                "For such goals a different operational semantics for abort is necessary than for achievement goals, to match the difference in semantics of the goals themselves.",
                "Acknowledgements We thank Lin Padgham and the anonymous reviewers for their comments.",
                "The first author acknowledges the support of the Australian Research Council and Agent Oriented Software under grant LP0453486.",
                "The work of the two authors at SRI International was supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No.",
                "NBCHD030010.",
                "Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the view of DARPA or the Department of Interior-National Business Center. 7.",
                "REFERENCES [1] L. Braubach, A. Pokahr, D. Moldt, and W. Lamersdorf.",
                "Goal representation for BDI Agent systems.",
                "In Proc. of Second Intl.",
                "Workshop on Programming Multi-Agent Systems (ProMAS04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson, and A. Lucas.",
                "JACK intelligent agents - components for intelligent agents in Java.",
                "AgentLink News, Issue 2, 1999. [3] M. G. Chessell, C. Vines, D. Butler, C. M. Ferreira, and P. Henderson.",
                "Extending the concept of transaction compensation.",
                "IBM Systems Journal, 41(4), 2002. [4] M. Dastani, M. B. van Riemsdijk, and J.-J.",
                "C. Meyer.",
                "Goal types in agent programming.",
                "In Proc. of AAMAS06, 2006. [5] S. Entwisle, S. Loke, S. Krishnaswamy, and E. Kendall.",
                "Aoex: An agent-based exception handling framework for building reliable, distributed, open software systems.",
                "In Proc. of Seventh Joint Conf. on Knowledge-Based Software Engineering, 2006. [6] J. F. H¨ubner, R. H. Bordini, and M. Wooldridge.",
                "Programming declarative goals using plan patterns.",
                "In Proc. of 4th Intl.",
                "Workshop on Declarative Agent Languages and Technologies, 2006. [7] D. Kinny.",
                "The Psi calculus: an algebraic agent language.",
                "In Proc. of ATAL01, 2001. [8] M. Klein, J.",
                "A. Rodr´ıguez-Aguilar, and C. Dellarocas.",
                "Using domain-independent exception handling services to enable robust open multi-agent systems: The case of agent death.",
                "Autonomous Agents and Multi-Agent Systems, 7(1-2):179-189, 2003. [9] D. Morley and K. Myers.",
                "The SPARK agent framework.",
                "In Proc. of AAMAS04, 2004. [10] D. Morley, K. L. Myers, and N. Yorke-Smith.",
                "Continuous refinement of agent resource estimates.",
                "In Proc. of AAMAS06, 2006. [11] K. Myers, P. Berry, J. Blythe, K. Conley, M. Gervasio, D. McGuinness, D. Morley, A. Pfeffer, M. Pollack, and M. Tambe.",
                "An intelligent personal assistant for task and time management.",
                "AI Magazine, 28, 2007.",
                "To appear. [12] K. L. Myers and N. Yorke-Smith.",
                "A cognitive framework for delegation to an assistive user agent.",
                "In Proc. of AAAI 2005 Fall Symposium on Mixed-Initiative Problem-Solving Assistants, 2005. [13] L. Padgham and M. Winikoff.",
                "Developing Intelligent Agent Systems: A Practical Guide.",
                "John Wiley and Sons, 2004. [14] A. Pokahr, L. Braubach, and W. Lamersdorf.",
                "Jadex: A BDI reasoning engine.",
                "In R. Bordini, M. Dastani, J. Dix, and A. E. F. Seghrouchni, editors, Multi-Agent Programming.",
                "Springer, 2005. [15] A. S. Rao.",
                "AgentSpeak(L): BDI agents speak out in a logical computable language.",
                "In Proc. of Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World, 1996. [16] A. S. Rao and M. P. Georgeff.",
                "An abstract architecture for rational agents.",
                "In Proc. of KR92, 1992. [17] S. Sardi˜na, L. de Silva, and L. Padgham.",
                "Hierarchical planning in BDI agent programming languages: a formal approach.",
                "In Proc. of AAMAS06, 2006. [18] S. Sardina and L. Padgham.",
                "Goals in the context of bdi plan <br>failure</br> and planning.",
                "In Proc. of AAMAS07, 2007. [19] J. Thangarajah, L. Padgham, and M. Winikoff.",
                "Detecting and exploiting positive goal interaction in intelligent agents.",
                "In Proc. of AAMAS03, 2003. [20] J. Thangarajah, M. Winikoff, L. Padgham, and K. Fischer.",
                "Avoiding resource conflicts in intelligent agents.",
                "In Proc. of ECAI-02, 2002. [21] A. Unruh, J. Bailey, and K. Ramamohanarao.",
                "A framework for goal-based semantic compensation in agent systems.",
                "In Proc. of First Intl.",
                "Workshop on Safety and Security in Multi-Agent Systems, 2004. [22] A. Unruh, H. Harjadi, J. Bailey, and K. Ramamohanarao.",
                "Semantic-compensation-based recovery management in multi-agent systems.",
                "In Proc. of Second IEEE Symposium on Multi-Agent Security and Survivability (IEEE MAS&S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland, and J. Thangarajah.",
                "Declarative and procedural goals in intelligent agent systems.",
                "In Proc. of KR02, 2002.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 15"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Aumentamos cada plan con un método de aborto opcional, análogo al método de \"falla\" que se encuentra en algunos lenguajes de programación de agentes.falla",
                "En consecuencia, tratar con el \"fracaso\" es fundamental para la programación de agentes, y es un elemento importante de las características de los agentes, como la robustez, la flexibilidad y la persistencia [21].falla",
                "Dada esta necesidad de deliberación sobre tareas o planes fallidos, la deliberación de \"fracaso\" se incorpora comúnmente en el ciclo de ejecución de los agentes.falla",
                "Además de lidiar con el \"fracaso\", una capacidad importante de un agente inteligente es poder abortar una tarea o plan en particular.falla",
                "Abortar una tarea o plan es distinto de su \"fracaso\".falla",
                "El \"fracaso\" refleja una incapacidad para realizar y no niega la necesidad de realizar, por ejemplo, una respuesta razonable a la \"falla\" puede ser intentarlo nuevamente.falla",
                "El \"fracaso\" se propaga de abajo hacia arriba, mientras que abortar se propaga de arriba hacia abajo.falla",
                "El potencial para ejecutar simultáneamente subplans introduce diferentes complejidades para abortar y \"falla\".falla",
                "Para el \"fracaso\", significa que los planes de calzoncillo paralelo pueden necesitar ser abortados a medida que se propaga el \"fracaso\".falla",
                "Ha habido una cantidad considerable de trabajo sobre fallas del plan (como detectar y resolver conflictos de recursos [20, 10]) y la mayoría de los sistemas de agentes incorporan alguna noción de manejo de \"falla\".falla",
                "En este artículo discutimos en detalle la incorporación de los métodos de limpieza de abortes en el ciclo de ejecución del agente, proporcionando un enfoque unificado de \"falla\" y aborta.falla",
                "Una característica clave de nuestro enfoque basado en el procedimiento es que permitimos que cada plan ejecute algún código particular en una \"falla\" y en un aborto.falla",
                "Esto es similar al caso de \"falla\", ya que también puede haber acciones que tomar cuando falla una tarea o plan.falla",
                "Por lo tanto, el plan de aborto o \"falla\" no necesariamente conduce al aborto de la tarea o al \"fracaso\".falla",
                "Abortar tareas y planes a la que hemos aludido, \"fracaso\" y aborto son conceptos relacionados.falla",
                "Sin embargo, el \"fracaso\" y el aborto difieren en la forma en que surgen.falla",
                "En el caso de \"falla\", el desencadenante de cesar la ejecución de una tarea o plan viene de abajo, es decir, el \"fracaso\" de las subasinas o los planes de nivel inferior.falla",
                "En tales sistemas, se produce un plan \"falla\" si falla una de las acciones o subestamaciones dentro del plan.falla",
                "La acción de los agentes sobre el \"falla\" del plan depende de su naturaleza: por ejemplo, el agente puede declarar la tarea de haber fallado si un plan ha sido juzgado y dado en \"falla\", o puede volver a intentar los planes alternativos y declarar (de hecho, debedeclarar) falla de la tarea solo si todos los planes alternativos posibles para realizar la tarea se han probado y han resultado en una falla.falla",
                "Observe que, si bien la \"falla\" de la tarea puede seguir de la \"falla\" del plan o una secuencia de fallas del plan, la falla del plan no es necesario que la falla de la tarea siempre que el agente pueda completar con éxito un plan alternativo.falla",
                "Además, la \"falla\" de la tarea también puede surgir por separado del \"falla\" del plan, si el agente decide abortar la tarea.falla",
                "Elegimos el primero porque: (1) los métodos de aborto a nivel de acción incurrirían en una sobrecarga mayor, (2) los planes están destinados a ser diseñados como unidades cohesivas únicas y son la unidad de deliberación en los sistemas BDI, y (3) la limpiezaLos métodos para la \"falla\" en los sistemas actuales se adjuntan a los planos.falla",
                "Cuando se ejecutan dos o más subprogramas en paralelo, si uno falla, los otros deben ser abortados, dado que el \"fracaso\" de una rama conduce a la \"falla\" de la tarea general.falla",
                "El \"fracaso\" de la tarea de papel de escritura de pista debe causar que la tarea de autorización se ejecute en paralelo sea abortada.3. Falla",
                "La representación del plan común en sistemas de estilo BDI como Jack y Spark incluye un metro de \"falla\", que es el método de limpieza designado invocado cuando el plan falla.falla",
                "La suposición aquí es que, como el método de \"falla\", el programador del sistema de agentes tiene la oportunidad de especificar un método de aborto sensato que tenga en cuenta el punto en el plan en el que se ejecutará el aborto.falla",
                "Indique un plan \"falla\" para TP, la tarea principal de P. Notamos aquí que si la tarea principal no debe ser abortada, el agente puede elegir otro plan aplicable para satisfacer TP.10 El sexto intl.falla",
                "La suposición que hacemos, por lo tanto, no es un reflejo de la completa complejidad de la realidad, sino una pragmática en términos del ciclo de ejecución del agente;El enfoque de \"falla\"-manejo de [21] hace la misma suposición.falla",
                "En sistemas como Spark, el programador puede especificar un comportamiento alternativo para una \"falla\" fallida, o abortar método por medio de procedimientos de nivel de metro.falla",
                "También suponemos que el \"fracaso\", y los métodos de aborto terminan en un tiempo finito.4. Falla",
                "Semántica operativa Proporcionamos la semántica para la tarea y el plan \"falla\" y los procesos de aborto descritos anteriormente.falla",
                "Esto equivale al mecanismo de manejo de \"falla\" predeterminado que se encuentra típicamente en los sistemas BDI implementados como Jack [2].falla",
                "Esta regla y la regla de falla se usan para el manejo de \"falla\": si el programa actual PI de una cláusula de plan para una tarea falla, primero se aplica la regla se aplica primero, y luego, si es posible, la regla seleccione elegir otra alternativa aplicable para la tareaSi existe uno.falla",
                "La regla final GR reinicia el programa original (codificado como P2 del par P1 £ P2) siempre que el programa actual esté terminado, pero el objetivo deseado y aún posible aún no se ha logrado.4.2 Aborto de intenciones y manejo de \"falla\" A continuación, presentamos la capacidad de especificar programas de controladores, en forma de \"falla\", y los métodos de aborto, que se ocupan de la limpieza requerida cuando un programa determinado respectivamente falla o se aborta.falla",
                "No asociamos los métodos de \"falla\" y abortos con cláusulas del plan o con tareas (eventos), sino que presentamos una nueva construcción del programa que especifica los métodos de \"falla\" y abortes para un programa arbitrario.falla",
                "La construcción FAB (P, PF, PA) ejecuta el programa P. debe fallar, ejecuta el programa de \"falla\" de manejo PF;Si P necesita ser abortado, ejecuta el programa de manejo de abortes PA.falla",
                "Por lo tanto, para agregar \"falla\"- y abort-falla",
                "Con la introducción de la capacidad de abortar los programas, modificamos la construcción paralela para permitir que la \"falla\" de una rama aborte a la otra.falla",
                "Del mismo modo, con la construcción de objetivos, ya no podemos abandonar completamente el programa, el objetivo contiene tan pronto como se mantenga la condición de éxito o \"falla\";Ahora debemos tener en cuenta la existencia de cualquier método de abortes aplicable al programa.falla",
                "Cuando estas construcciones están anidadas, es importante que antes de que se ejecute el \"fracaso\", o el método de aborto de un PAP de los padres, el \"fracaso\", o los programas de métodos de aborto de los niños, los PAP se ejecutan primero, como se describió anteriormente en la sección3. Falla",
                "Para dejar de lado la ejecución repetida hasta que se cumpla una condición, debemos asegurarnos de que el éxito o la condición de \"falla\" de la construcción se satisfagan una vez que la ejecución del programa tiene éxito o falla.falla",
                "Nos aseguramos de esto retrayendo el hecho de A (v) sobre el éxito y afirmando el hecho de F (v) sobre el \"fracaso\", y al tener el éxito apropiado y las condiciones de \"falla\" en el objetivo.falla",
                "Invocamos la \"falla\" relevante, o el método de aborto, retractamos el hecho A (v) y luego fallamos.falla",
                "Al reunir todo esto, definimos formalmente μV (FAB (P, PA, PF)) para que sea lo siguiente, donde V es una nueva variable distinta de cualquier otra Biblioteca del Plan de Agentes: PrependID (V, V);+a (v);Objetivo (¬A (V), (μV (P); −a (V) +F (V)), SAN (V) ∨ F (V)) (((? Sa (V); μV (PA))μV (Pf)); −a (v) ;? False) Segundo, debemos transformar el operador paralelo para garantizar que la \"falla\" de una rama aborta de manera segura a la otra.falla",
                "Definimos μV (P1 P2) para que sea: prependid (V, V);prependid (V, V);+a (v);+a (v);(Objetivo (¬A (V), (μV (P1); −a (V) +F (V)), San (V) ∨ F (V)) ( +Abort (V); −a (V))Objetivo (¬A (V), (μV (P2); −a (V) +F (V)), SAN (V) ∨ F (V)) ( +Abort (V); −a (V))));? ¬abort (v) ∧ ¬abort (v) Finalmente, necesitamos modificar las ocurrencias de la construcción de objetivos de dos maneras: Primero, para asegurarnos de que los métodos de manejo de abortes no se eviten cuando el éxito o las condiciones de \"falla\" están satisfechos, y segundo, para activar el aborto del programa contenido cuando se cumplen las condiciones de éxito o \"falla\".falla",
                "Cambiamos el éxito y la condición de \"falla\" de la construcción de objetivos a una rama paralela utilizando la construcción Wait-to-Condition, y modificamos el objetivo de usar la condición de SERLO AHORA SAN (V) como la condición de éxito.falla",
                "La rama de espera activará el aborto del programa en caso de que se cumpla el éxito o la condición de \"falla\".falla",
                "Primero, si la condición de éxito φ o la condición de \"falla\" φF se vuelve verdadera, entonces se ejecuta la segunda rama de la construcción paralela.falla",
                "Esto es seguido por la ejecución de CCR (en el caso de un aborto), la retracción de un (v) y \"falla\".falla",
                "Las cláusulas del plan traducido, con la semántica de Can aumentada mediante nuestra construcción de condición Waituntil, especifican así la operación del agente para manejar tanto la \"falla\" como para abortar para el ejemplo.5. Falla",
                "El plan de trabajo relacionado \"falla\" se maneja en la versión extendida de AgentsPeak que se encuentra en el sistema Jason [6].falla",
                "Los planes de limpieza de \"fracaso\" se activan de los eventos de eliminación de objetivos,! G.falla",
                "Dichos planes, similares a nuestros métodos de \"falla\", están diseñados para que el agente efectúe los cambios estatales (ACT para deshacer sus acciones anteriores) antes de intentar otro plan para lograr el objetivo fallido g.Dado las construcciones de Jasons para dejar caer un objetivo con una indicación de si probar o no un plan alternativo para ello, H¨ubner et al.[6] Proporcione una descripción informal de cómo un agente Jason modifica su estructura de intención cuando ocurre un evento de \"falla\" de objetivo.falla",
                "El manejo de \"fracaso\" se aplica solo a los planes activados por la adición de un objetivo de logro o prueba;En particular, los eventos de eliminación de objetivos no se publican para el \"fracaso\" de un plan de eliminación de objetivos.falla",
                "Los tres permiten métodos de meta nivelados indicados por meta eventos, como la adopción de objetivos o la \"falla\" del plan, y ofrecen capacidades introspectivas sobre los estados de objetivos e intención.falla",
                "Los objetivos de control de \"falla\" se invocan de acuerdo con las reglas de la estrategia de control de la falla, por un agente dedicado \"falla\" de manejo del componente (FHC) que rastrea la ejecución de la tarea.falla",
                "El programador de agentes especifica estos objetivos y se adjunta a tareas, al igual que nuestro fabuloso (P, PF, PA) construye los asociados \"falla\" y aborta los métodos con un plan P. Nota, sin embargo, que en contraste con [6] y conNuestra semántica, [21] adjunta el \"fracaso\", el conocimiento de manejo a nivel de meta, no plan.falla",
                "Sus objetivos de control de \"fracaso\" pueden consistir en objetivos de estabilización que realizan una limpieza localizada e inmediata para restaurar el estado de los agentes a un estado estable conocido y objetivos de compensación que realizan acciones de deshacer.falla",
                "Los objetivos de compensación se activan al abortar un objetivo, por lo que no necesariamente en el \"fracaso\" de la meta (es decir, si el FHC dirige al agente que vuelva a intentar el objetivo fallido y el reintento sea exitoso).falla",
                "El enfoque FHC se define a nivel de objetivo para facilitar la especificación abstracta de \"falla\", controlando el conocimiento;El FHC decide cuándo abordar un \"fracaso\" y qué hacer (es decir, qué objetivos de control de falla para invocar), separando este conocimiento de cómo implementar acciones correctivas (es decir, qué plan de ejecutar para cumplir con el objetivo de manejo de fallas adoptada).falla",
                "Esto contrasta con el manejo simplista de \"falla\" a nivel de plan en el que se entremezcla qué y cómo se entremezcla en el conocimiento de la tarea de dominio.falla",
                "Si bien nuestro enfoque se define a nivel del plan, nuestra semántica BDI extendida proporciona la separación de la ejecución y el manejo de \"falla\".falla",
                "Aprovechamos las estructuras de ejecución existentes y la capacidad autorreflexiva de un agente de BDI para lograr tanto el manejo y el manejo de \"falla\" sin sobrecarga adicional.falla",
                "Las reglas de estrategia de control de \"falla\" de FHCS (por ejemplo, si volver a intentar un objetivo fallido) se reemplazan por instrucciones en nuestros planes PF y PA, junto con los manejadores de \"falla\" de nivel predeterminado de nivel meta según la naturaleza de los agentes (por ejemplo, cometidos ciegamente).falla",
                "La arquitectura resultante incorpora su enfoque de manejo de \"falla\" dentro de una arquitectura de procesamiento de pares para la recuperación de accidentes de agentes.falla",
                "En ambos casos, la lógica y el conocimiento de control de \"falla\" están desacoplados de los agentes;Por el contrario, al separar el manejo de excepciones del conocimiento específico del dominio, Unruh et al.s FHC y nuestro enfoque retienen la lógica de control de \"falla\" dentro de un agente.6. Falla",
                "Conclusión y trabajo futuro Las tareas y planes de un agente pueden no llegar a la finalización con éxito, ni por la elección del agente para abortarlos (tal vez a solicitud de otro agente para que lo hagan), o por factores no muy tarde que conduzcan al \"fracaso\".falla",
                "En este artículo, hemos presentado un enfoque basado en el procedimiento que incorpora tareas y planes de aborto en el ciclo de deliberación de un agente de estilo BDI, proporcionando así un enfoque unificado para \"falla\" y abortar.falla",
                "Otro elemento de interés es extender nuestro enfoque de \"falla\" y abortar a los objetivos de mantenimiento [1].falla",
                "Objetivos en el contexto del plan BDI \"fracaso\" y planificación.falla"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "dealing": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Aborting Tasks in BDI Agents John Thangarajah, James Harland RMIT University Melbourne, Australia {johthan,jah}@cs.rmit.edu.au David Morley, Neil Yorke-Smith Artificial Intelligence Center, SRI International Menlo Park, CA 94025 U.S.A. {morley,nysmith}@ai.sri.com ABSTRACT Intelligent agents that are intended to work in dynamic environments must be able to gracefully handle unsuccessful tasks and plans.",
                "In addition, such agents should be able to make rational decisions about an appropriate course of action, which may include aborting a task or plan, either as a result of the agents own deliberations, or potentially at the request of another agent.",
                "In this paper we investigate the incorporation of aborts into a BDI-style architecture.",
                "We discuss some conditions under which aborting a task or plan is appropriate, and how to determine the consequences of such a decision.",
                "We augment each plan with an optional abort-method, analogous to the failure method found in some agent programming languages.",
                "We provide an operational semantics for the execution cycle in the presence of aborts in the abstract agent language CAN, which enables us to specify a BDI-based execution model without limiting our attention to a particular agent system (such as JACK, Jadex, Jason, or SPARK).",
                "A key technical challenge we address is the presence of parallel execution threads and of sub-tasks, which require the agent to ensure that the abort methods for each plan are carried out in an appropriate sequence.",
                "Categories and Subject Descriptors I.2.11 [ARTIFICIAL INTELLIGENCE]: Distributed Artificial Intelligence-Intelligent agents General Terms Design, Reliability, Theory 1.",
                "INTRODUCTION Intelligent agents generally work in complex, dynamic environments, such as air traffic control or robot navigation, in which the success of any particular action or plan cannot be guaranteed [13].",
                "Accordingly, <br>dealing</br> with failure is fundamental to agent programming, and is an important element of agent characteristics such as robustness, flexibility, and persistence [21].",
                "In agent architectures inspired by the Belief-Desire-Intention (BDI) model [16], these properties are often characterized by the interactions between beliefs, goals, and plans [2].1 In general, an agent that wishes to achieve a particular set of tasks will pursue a number of plans concurrently.",
                "When failures occur, the choice of plans will be reviewed.",
                "This may involve seeking alternative plans for a particular task, re-scheduling tasks to better comply with resource constraints, dropping some tasks, or some other decision that will increase the likelihood of success [12, 14].",
                "Failures can occur for a number of reasons, and it is often not possible to predict these in advance, either because of the complexity of the system or because changes in the environment invalidate some earlier decisions.",
                "Given this need for deliberation about failed tasks or plans, failure deliberation is commonly built into the agents execution cycle.",
                "Besides <br>dealing</br> with failure, an important capability of an intelligent agent is to be able to abort a particular task or plan.",
                "This decision may be due to an internal deliberation (such as the agent believing the task can no longer be achieved, or that some conflicting task now has a higher priority) or due to an external factor (such as another agent altering a commitment, or a change in the environment).",
                "Aborting a task or plan is distinct from its failure.",
                "Failure reflects an inability to perform and does not negate the need to perform - for example, a reasonable response to failure may be to try again.",
                "In contrast, aborting says nothing about the ability to perform; it merely eliminates the need.",
                "Failure propagates from the bottom up, whereas aborting propagates from the top down.",
                "The potential for concurrently executing sub-plans introduces different complexities for aborting and failure.",
                "For aborting, it means that multiple concurrent sub-plans may need to be aborted as the abort is propagated down.",
                "For failure, it means that parallel-sibling plans may need to be aborted as the failure is propagated up.",
                "There has been a considerable amount of work on plan failures (such as detecting and resolving resource conflicts [20, 10]) and most agent systems incorporate some notion of failure handling.",
                "However, there has been relatively little work on the development of abort techniques beyond simple dropping of currently intended plans and tasks, which does not deal with the clean-up required.",
                "As one consequence, most agent systems are quite limited in their treatment of the situation where one branch of a parallel construct 1 One can consider both tasks to be performed and goals to achieve a certain state of the world.",
                "A task can be considered a goal of achieving the state of the task having been performed, and a goal can be considered a task of bringing about that state of the world.",
                "We adopt the latter view and use task to also refer to goals. 8 978-81-904262-7-5 (RPS) c 2007 IFAAMAS fails (common approaches include either letting the other branch run to completion unhindered or dropping it completely).",
                "In this paper we discuss in detail the incorporation of abort cleanup methods into the agent execution cycle, providing a unified approach to failure and abort.",
                "A key feature of our procedure-based approach is that we allow each plan to execute some particular code on a failure and on an abort.",
                "This allows a plan to attempt to ensure a stable, known state, and possibly to recover some resources and otherwise clean up before exiting.",
                "Accordingly, a central technical challenge is to manage the orderly execution of the appropriate clean-up code.",
                "We show how aborts can be smoothly introduced into a BDI-style architecture, and for the first time we give an operational semantics for aborting in the abstract agent language CAN [23, 17].",
                "This allows us to specify an appropriate level of detail for the execution model, without focusing on the specific constructs of any one agent system such as JACK [2], Jadex [14], Jason [6], or SPARK [9].",
                "Our focus is on a single agent, complementary to related work that considers exception handling for single- and multiagent systems (e.g., [22, 5, 6]).",
                "This paper is organized as follows.",
                "In Section 2 we give an example of the consequences of aborting a task, and in Section 3 we discuss some circumstances under which aborts should occur, and the appropriate representation and invocation procedures.",
                "In Section 4 we show how we can use CAN to formally specify the behaviour of an aborted plan.",
                "Section 5 discusses related work, and in Section 6 we present our conclusions and future work. 2.",
                "MOTIVATING EXAMPLE Alice is a knowledge worker assisted by a learning, personal assistive agent such as CALO [11].",
                "Alice plans to attend the IJCAI conference later in the year, and her CALO agent adopts the task of Support Meeting Submission (SMS) to assist her.",
                "CALOs plan for an SMS task in the case of a conference submission consists of the following sub-tasks: 1.",
                "Allocate a Paper Number (APN) to be used for administrative purposes in the company. 2.",
                "Track Writing Abstract (TWA): keep track of Alices progress in preparing an abstract. 3.",
                "Apply For Clearance (AFC) for publication from Alices manager based on the abstract and conference details. 4.",
                "Track Writing Paper (TWP): keep track of Alices progress in writing the paper. 5.",
                "Handle Paper Submission (HPS): follow company internal procedures for submitting a paper to a conference.",
                "These steps must be performed in order, with the exception of steps 3 (AFC) and 4 (TWP), which may be performed in parallel.",
                "Similarly, CALO can perform the task Apply For Clearance (AFC) by a plan consisting of: 1.",
                "Send Clearance Request (SCR) to Alices manager. 2.",
                "Wait For Response (WFR) from the manager. 3.",
                "Confirm that the response was positive, and fail otherwise.",
                "Now suppose that a change in circumstances causes Alice to reconsider her travel plans while she is writing the paper.",
                "Alice will no longer be able to attend IJCAI.",
                "She therefore instructs her CALO agent to abort the SMS task.",
                "Aborting the task implies aborting both the SMS plan and the AFC subplan.",
                "Aborting the first plan requires CALO to notify the paper number registry that the allocated paper number is obsolete, which it can achieve by the Cancel Paper Number (CPN) task.2 Aborting the second plan requires CALO to notify Alices manager that Alice no longer requires clearance for publication, which CALO can achieve by invoking the Cancel Clearance Request (CCR) task.",
                "We note a number of important observations from the example.",
                "First, the decision to abort a particular course of action can come from the internal deliberations of the agent (such as reasoning about priorities in a conflict over resources), or from external sources (such as another agent cancelling a commitment), as in this example.",
                "In this paper we only touch on the problem of determining whether a task or plan should be aborted, instead concentrating on determining the appropriate actions once this decision is made.",
                "Hence, our objective is to determine how to incorporate aborting mechanisms into the standard execution cycle rather than determine what should be aborted and when.",
                "Second, once the decision is made to abort the attempt to submit a paper, there are some actions the agent should take, such as cancelling the clearance request.",
                "In other words, aborting a task is not simply a matter of dropping the task and associated active plans: there are some clean up actions that may need to be done.",
                "This is similar to the case for failure, in that there may also be actions to take when a task or plan fails.",
                "In both cases, note that it is not simply a matter of the agent undo-ing its actions to date; indeed, this may be neither possible (since the agent acts in a situated world and its actions change world state) nor desirable (depending on the semantics of the task).",
                "Rather, cleaning up involves compensation via forward recovery actions [3].",
                "Third, there is a distinction between aborting a task and aborting a plan.",
                "In the former case, it is clear that all plans being executed to perform the task should be aborted; in the latter case, it may be that there are better alternatives to the current plan and one of these should be attempted.",
                "Hence, plan aborting or failure does not necessarily lead to task aborting or failure.",
                "Fourth, given that tasks may contain sub-tasks, which may contain further sub-tasks, it is necessary for a parent task to wait until its children have finished their abort methods.",
                "This is the source of one of the technical challenges that we address: determining the precise sequence of actions once a parent task or plan is aborted. 3.",
                "ABORTING TASKS AND PLANS As we have alluded to, failure and aborting are related concepts.",
                "They both cause the execution of existing plans to cease and, consequentially, the agent to reflect over its current tasks and intentions.",
                "Failure and aborting, however, differ in the way they arise.",
                "In the case of failure, the trigger to cease execution of a task or plan comes from below, that is, the failure of sub-tasks or lower-level plans.",
                "In the case of aborting, the trigger comes from above, that is, the tasks and the parent plans that initiated a plan.",
                "In BDI-style systems such as JACK and SPARK, an agents domain knowledge includes a pre-defined plan library of plan clauses.",
                "Each plan clause has a plan body, which is a program (i.e., combination of primitive actions, sub-tasks, etc.) that can be executed in response to a task or other event should the plan clauses context condition be satisfied.",
                "The agent selects and executes instances of plan clauses to perform its tasks.",
                "There can be more than one applicable plan clause and, in the event that one fails, another applicable one may be attempted.",
                "Plans may have sub-tasks that must succeed 2 CALO needs only drop the TWA and TWP tasks to abort them: for the sake of simplicity we suppose no explicit clean up of its internal state is necessary.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 9 for the plan to succeed.",
                "In such systems, a plan failure occurs if one of the actions or sub-tasks within the plan fails.",
                "The agents action upon plan failure depends on its nature: for example, the agent may declare the task to have failed if one plan has been tried and resulted in failure, or it may retry alternate plans and declare (indeed, must declare) task failure only if all possible alternate plans to perform the task have been tried and resulted in failure.",
                "Observe that, while task failure can follow from plan failure or a sequence of plan failures, plan failure need not lead to task failure provided the agent can successfully complete an alternate plan.",
                "Moreover, task failure can also arise separately from plan failure, if the agent decides to abort the task.",
                "Our approach associates an abort-method with each plan.",
                "This enables the programmer to specify dedicated compensation actions according to how the agent is attempting to perform the task.",
                "Note that our abort-methods can be arbitrary programs and so can invoke tasks that may be performed dynamically in the usual BDI fashion, i.e., the clean-up is not limited to executing a predetermined set of actions.",
                "The question remains which abort-method should be invoked, and in what manner.",
                "Given the complexity of agent action spaces, it is not possible nor desirable to enumerate a static set of rules.",
                "Rather, the agent will invoke its abort-methods dynamically according to the state of execution and its own internal events.",
                "An alternative to attaching an abort-method to each plan is to attach such methods to each atomic action.",
                "We choose the former because: (1) action-level abort-methods would incur a greater overhead, (2) plans are meant to be designed as single cohesive units and are the unit of deliberation in BDI systems, and (3) the cleanup methods for failure in current systems are attached to plans.",
                "In order to understand how the agents abort processing should function, we consider three situations where it is sensible for an agent to consider aborting some of its tasks and plans: 1.",
                "When a task succeeds or fails because of an external factor other than the agent itself, the plan currently executed to perform the task should be aborted.",
                "For example, suppose company policy changes so that employees of Alices seniority automatically have clearance for publishing papers.",
                "Since Alice now has clearance for publishing her paper, CALO can abort the plan for Apply For Clearance.",
                "In doing so it must invoke the abort-method, in this case thus performing Cancel Clearance Request.3 2.",
                "When two or more sub-programs are executed in parallel, if one fails then the others should be aborted, given that the failure of one branch leads to the failure of the overall task.",
                "For example, suppose that part-way through writing the paper, Alice realizes that there is a fatal flaw in her results, and so notifies CALO that she will not be able to complete the paper by the deadline.",
                "The failure of the Track Writing Paper task should cause the Apply For Clearance task being executed in parallel to be aborted. 3.",
                "When an execution event alters the importance of an existing task or intention, the agent should deliberate over whether the existing plan(s) should continue.",
                "For example, suppose that Alice tasks CALO with a new, high-priority task to purchase a replacement laptop, but that Alice lacks enough funds to both purchase the laptop and to attend IJCAI.",
                "Reasoning over resource requirements [20, 10] will cause the agent to realize 3 If there is any difference between how to abort a task that is externally performed versus how to abort one that is now known to be impossible, the abort-method can detect the circumstances and handle the situation as appropriate. that it cannot successfully complete both tasks.",
                "Given that the new task has greater importance, a rational agent will evaluate its best course of action and may decide to abortor at least suspend - the existing task of submitting a paper and intentions derived from it [12].",
                "The operational semantics we provide in Section 4 for aborting tasks and plans captures the first two situations above.",
                "The third situation involves deliberating over the importance of a task, which depends on various factors such as task priority.",
                "Although this deliberation is beyond the scope of this paper, it is a complementary topic of our future work.",
                "Note that the above situations apply to achievement goals, for which the task is completed when a particular state of the world is brought about (e.g., ensure we have clearance).",
                "Different forms of reasoning apply to other goal types [4] such as maintenance goals [1], where the goal is satisfied by maintaining a state of the world for some period of time (e.g., maintain $100 in cash).",
                "Abort Method Representation The intent of aborting a task or plan is that the task or plan and all its children cease to execute, and that appropriate clean-up methods are performed as required.",
                "In contrast to offline planning systems, BDI agents are situated: they perform online deliberation and their actions change the state of the world.",
                "As a result, the effects of many actions cannot be simply undone.",
                "Moreover, the undo process may cause adverse effects.",
                "Therefore, the clean-up methods that we specify are forward recovery procedures that attempt to ensure a stable state and that also may, if possible, recover resources.",
                "The common plan representation in BDI-style systems such as JACK and SPARK includes a failure-method, which is the designated clean-up method invoked when the plan fails.",
                "To this, we add the abort-method, which is invoked if the plan is to be aborted.",
                "In our example, the abort-method for the plan for Support Meeting Submission consists of invoking the sub-task Cancel Paper Number.",
                "The abort-method need not explicitly abort Apply For Clearance, because the agent will invoke the abort-method for the subtask appropriately, as we outline below.",
                "The assumption here is that, like the failure-method, the programmer of the agent system has the opportunity to specify a sensible abort-method that takes into consideration the point in the plan at which the abort is to be executed.",
                "For any plan, the abort-method is optional: if no abort-method is specified, the agent takes no specific action for this plan.",
                "However, the agents default behavioural rules still apply, for example, whether to retry an alternate plan for the parent task.",
                "Note that an explicit representation of the clean-up methods for tasks is not required, since tasks are performed by executing some plan or plans.",
                "Hence, aborting a task means aborting the current plan that is executed to perform that task, as we next describe.",
                "Abort Method Invocation We now informally lay out the agents action upon aborting plans and tasks.",
                "When a plan P is aborted: 1.",
                "Abort each sub-task that is an active child of P. An active child is one that was triggered by P and is currently in execution. 2.",
                "When there are no more active children, invoke the abort method of plan P. 3.",
                "Indicate a plan failure to TP , the parent task of P. We note here that if the parent task TP is not to be aborted then the agent may choose another applicable plan to satisfy TP . 10 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) When a task (or sub-task) T is aborted: 1.",
                "Abort the current active plan to satisfy T (if any). 2.",
                "When there are no more active child processes, drop the task.",
                "The agent thus no longer pursues T. 3.",
                "Note here that when the current active plan for performing T is aborted, no other applicable plans to perform T should be tried as it is the task that is to be aborted.",
                "In order to prevent infinitely cascading clean-up efforts, we assume that abort-methods will never be aborted nor fail.",
                "In reality, however, an abort-method may fail.",
                "In this case, lacking a more sophisticated handling mechanism, the agent simply stops executing the failed abort-method with no further deliberation.",
                "The assumption we make is thus not a reflection of the full complexity of reality, but one that is pragmatic in terms of the agent execution cycle; the approach to failure-handling of [21] makes the same assumption.",
                "In systems such as SPARK, the programmer can specify an alternative behaviour for a failed failure- or abort-method by means of meta-level procedures.",
                "We also assume that failure- and abort-methods terminate in finite time. 4.",
                "OPERATIONAL SEMANTICS We provide the semantics for the task and plan failure and aborting processes outlined above.",
                "We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the goal adoption and dropping mechanisms.",
                "The extensions also simplified the semantics in the earlier work.",
                "We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1.",
                "Following a presentation of the operational semantics of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present. 4.1 CAN Language CAN is a high-level agent language, in a spirit similar to that of AgentSpeak [15] and Kinnys Ψ [7], both of which attempt to extract the essence of a class of implemented BDI agent systems.",
                "CAN provides an explicit goal construct that captures both the declarative and procedural aspects of a goal.",
                "Goals are persistent in CAN in that, when a plan fails, another applicable plan is attempted.",
                "This equates to the default failure handling mechanism typically found in implemented BDI systems such as JACK [2].",
                "In practical systems, tasks are typically translated into events that trigger the execution of some plans.",
                "This is also true in the CAN language, but, in order to maintain the persistence of goals, a goal construct is introduced.",
                "This is denoted by Goal ` φs, P, φf ´ , where φs is the success condition that determines when the goal is considered achieved, φf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once φs or φf become true.",
                "An agents behavior is specified by a plan library, denoted by Π, that consists of a collection of plan clauses of the form e : c ← P, where e is an event, c is a context condition (a logical formula over the agents beliefs that must be true in order for the plan to be applicable)4 and P is the plan body.",
                "The plan body is a program that is defined recursively as follows: P ::= act | +b | −b | ?φ | !e | P1; P2 | P1 P2 | Goal ` φs, P1, φf ´ | P1 P2 | {ψ1 : P1, . . . , ψn : Pn} | nil 4 An omitted c is equivalent to true.",
                "Δ = {ψiθ : Piθ | e : ψi ← Pi ∈ Π ∧ θ = mgu(e, e )} B, !e −→ B, Δ Event ψi : Pi ∈ Δ B |= ψi B, Δ −→ B, Pi Δ \\ {ψi : Pi} Select B, P1 −→ B, (P1 P2) −→ B, P2 fail B, P1 −→ B , P1 B, (P1; P2) −→ B , (P ; P2) Sequence B, P1 −→ B , P B, (P1 P2) −→ B , (P P2) Parallel1 B, P2 −→ B , P B, (P1 P2) −→ B , (P P1) Parallel2 Figure 1: Operational rules of CAN. where P1, . . . , Pn are themselves programs, act is a primitive action that is not further specified, and +b and −b are operations to add and delete beliefs.",
                "The belief base contains ground belief atoms in the form of first-order relations but could be orthogonally extended to other logics.",
                "It is assumed that well-defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ∪ {b}), and to delete a belief from a belief set (B \\ {b}). ?φ is a test for condition φ, and !e5 is an event6 that is posted from within the program.",
                "The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (Goal ` φs, P, φf ´ ).",
                "The above defines the user language.",
                "In addition, a set of auxiliary compound forms are used internally when assigning semantics to constructs. nil is the basic (terminating) program.",
                "When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 : P1, . . . , cn : Pn ).",
                "The other auxiliary compound form, , is a choice operator dual to sequencing: P1 P2 executes P1 and then executes P2 only if P1 failed.",
                "A summary of the operational semantics for CAN in line with [23] and following some of the simplifications of [17] is as follows.",
                "A basic configuration S = B, G, Γ consists of the current belief base B of the agent, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention).",
                "A transition S0 −→ S1 specifies that executing S0 for a single step yields configuration S1.",
                "S0 −→∗ Sn is the usual reflexive transitive closure of −→: Sn is the result of one or more singlestep transitions.",
                "A derivation rule S −→ Sr S −→ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator).",
                "Figure 1 gives some of the operational rules.",
                "The Event rule handles task events by collecting all relevant plan clauses for the event in question: for each plan clause e : ψi ← Pi, if there is a most general unifier, θ = mgu(e, e ) of e and the event in 5 Where it is obvious that e is an event we will sometimes exclude the exclamation mark for readability. 6 Typically an achievement goal.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 11 B |= φs B, Goal ` φs, P, φf ´ −→ B, true Gs B |= φf B, Goal ` φs, P, φf ´ −→ B, fail Gf P = Goal ` φs, P , φf ´ P = P1 £ P2 B |= φs ∨ φf B, P −→ B, Goal ` φs, P £ P , φf ´ GI P = P1 £ P2 B |= φs ∨ φf B, P1 −→ B , P B, Goal ` φs, P, φf ´ −→ B , Goal ` φs, P £ P2, φf ´ GS P = P1 £ P2 B |= φs ∨ φf P1 ∈ {true, fail} B, Goal ` φs, P, φf ´ −→ B, Goal ` φs, P2 £ P2, φf ´ GR Figure 2: Rules for goals in CAN. question, then the rule constructs a guarded alternative ψiθ : Piθ.",
                "The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives: program P Δ states that program P should be tried first, falling back to the remaining alternatives, Δ \\ P, if necessary.",
                "This rule and the fail rule together are used for failure handling: if the current program Pi from a plan clause for a task fails, rule fail is applied first, and then if possible, rule Select will choose another applicable alternative for the task if one exists.",
                "Rule Sequence handles sequencing of programs in the usual way.",
                "Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel.",
                "Figure 2 gives simplified rules for <br>dealing</br> with goals, in line with those presented in [17].",
                "The first rule states that a goal succeeds when φs become true; the second rule states that a goal fails when φf become true.",
                "The third rule GI initializes the execution of a goal-program by updating the goal base and setting the program in the goal to P £ P; the first P is to be executed and the second P is used to keep track of the original program for the goal.",
                "The fourth rule GS executes a single step of the goal-program.",
                "The final rule GR restarts the original program (encoded as P2 of pair P1 £ P2) whenever the current program is finished but the desired and still possible goal has not yet been achieved. 4.2 Aborting Intentions and Handling Failure We next introduce the ability to specify handler programs, in the form of failure- and abort-methods, that deal with the clean-up required when a given program respectively fails or is aborted.",
                "We do not associate failure- and abort- methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies failure- and abort- methods for an arbitrary program.",
                "The FAb(P, PF , PA) construct executes the program P. Should P fail, it executes the failure handling program PF ; should P need to be aborted, it executes the abort handling program PA.",
                "Thus to add failure- and abort- methods PF and PA to a plan clause e : c ← P, we write e : c ← FAb(P, PF , PA).",
                "With the introduction of the ability to abort programs, we modify the parallel construct to allow the failure of one branch to abort the other.",
                "We must take into consideration the possible existence of abort-methods in the aborted branch.",
                "Similarly, with the Goal construct we can no longer completely abandon the program the goal contains as soon as the success or failure condition holds; we must now take into consideration the existence of any abort-methods applicable to the program.",
                "We provide the semantics of an augmented agent language containing the FAb construct by defining a source transformation, similar to macro-expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN.",
                "The one non-standard extension to CAN is a wait-until-condition construct.",
                "We explain this simple modification of the parallel construct below when we come to translation of the Goal construct.",
                "First we describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases: the FAb, parallel, and Goal constructs.",
                "A key issue is that the FAb constructs may be nested, either directly or indirectly.",
                "Let us call each instantiation of the construct at execution time a possible abort point (pap).",
                "Where these constructs are nested, it is important that before the failure- or abort-method of a parent pap is executed, the failure- or abort-methods programs of the children paps are executed first, as described earlier in Section 3.",
                "The need to coordinate the execution of the abort-methods of nested paps requires that there be some way to identify the parents and children of a particular pap.",
                "We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e : c ← P with a plan clause e(v) : c ← μv(P) where v is a free variable, not previously present in the plan clause.",
                "This variable is used to keep track of the context of execution.",
                "The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context.",
                "For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1].",
                "We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51.",
                "This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v .",
                "For most CAN constructs, the context variable is unused or passed unchanged: μv(act) = act μv(+b) = +b μv(−b) = −b μv(nil) = nil μv(!e) = !e(v) μv(P1; P2) = μv(P1); μv(P2) μv(P1 P2) = μv(P1) μv(P2) μv( ψ1 : P1, . . . , ψn : Pn ) = ψ1 : μv(P1), . . . , ψn : μv(Pn) It remains to specify the transformation μv(·) in three cases: the FAb, parallel, and Goal constructs.",
                "These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context.",
                "Let us introduce the primitive action prependID(v, v ) that creates a new pap identifier and prepends it to list v giving list v .",
                "We also introduce the following predicates: • a(v) - the pap v is currently active. • abort(v) - the pap v should be aborted (after aborting all of its descendants). 7 An alternative would be to use meta-level predicates that reflect the current state of the intention structure. 12 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) • f(v) - the program of pap v has failed. • ancestorof(v, v ) ≡ v = v ∨ ancestorof(v, tail(v ))the pap v is an ancestor of pap v . • nac(v) ≡ ¬∃v . (a(v ) ∧ ancestorof(v, v ) ∧ v = v ) - v has no active children. • sa(v) ≡ ∃v .abort(v ) ∧ ancestorof(v , v) - we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active. • san(v) ≡ sa(v) ∧ nac(v) - we should abort v now if we should abort v and v has no active children.",
                "First let us consider the case of the FAb construct.",
                "The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v. We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context.",
                "We need to make sure that we retract the belief that v is active at the end, i.e., −a(v ).",
                "We use the Goal construct to allow us to drop the execution of a program within a pap v when it is necessary to abort.",
                "While executing the program P, we know that we need to drop P and invoke its abort-method if some ancestor of P has been told to abort.",
                "This is represented by the predicate sa(v ) being true.",
                "However, we need to make sure that we do this only after every child pap has had the chance to invoke its abort-method and all these abort-methods have completed: if we drop the program too soon, then execution of the abort-methods of the children will also be dropped.",
                "Therefore, the condition we actually use in the Goal construct to test when to drop the program is san(v ).",
                "This condition relies on the fact that as the children paps complete, they remove the relevant a facts.",
                "Our use of the Goal construct is for its ability to drop the execution of a program when conditions are met.",
                "To leave aside the repeat execution until a condition is met aspect, we must ensure that the success or failure condition of the construct is satisfied once the execution of the program succeeds or fails.",
                "We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on failure, and by having the appropriate success and failure conditions on the Goal.",
                "Hence, if the Goal construct fails, then the program either was aborted or it failed.",
                "We invoke the relevant failure- or abort- method, retract the a(v ) fact, and then fail.",
                "Putting all this together, we formally define μv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agents plan library: prependID(v, v ); +a(v ); Goal ( ¬a(v ), (μv (P); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); μv(PA)) μv(PF )); −a(v ); ?false) Second, we must transform the parallel operator to ensure that the failure of one branch safely aborts the other.",
                "Here we construct two new contexts, v and v , from the existing context v. If one branch fails, it must abort the other branch.",
                "At the end, if either branch was aborted, then we must fail.",
                "Let v and v be new variables distinct from any other in the agents plan library.",
                "We define μv(P1 P2) to be: prependID(v, v ); prependID(v, v ); +a(v ); +a(v ); ( Goal (¬a(v ), (μv (P1); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal (¬a(v ), (μv (P2); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ); ?¬abort(v ) ∧ ¬abort(v ) Finally, we need to modify occurrences of the Goal construct in two ways: first, to make sure that the abort handling methods are not bypassed when the success or failure conditions are satisfied, and second, to trigger the aborting of the contained program when either the success or failure conditions are satisfied.",
                "To transform the Goal construct we need to extend standard CAN with a wait-until-condition construct.",
                "The construct φ : P does not execute P until φ becomes true.",
                "We augment the CAN language with the following rules for the guard operator :: B |= φ B, G, (φ : P −→ B, G, P :true B |= φ B, G, (φ : P) −→ B, G, (φ : P) :false In order to specify μv(Goal ` φs, P, φf ´ ), we generate a new pap and execute the program within the Goal construct in this new context.",
                "We must ensure that belief a(v ) is removed whether the Goal succeeds or fails.",
                "We shift the success and failure condition of the Goal construct into a parallel branch using the wait-until-condition construct, and modify the Goal to use the should abort now condition san(v ) as the success condition.",
                "The waiting branch will trigger the abort of the program should either the success or failure condition be met.",
                "To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active.",
                "Let v be a new variable distinct from any other in the agents plan library.",
                "We define μv(Goal ` φs, P, φf ´ ) to be: prependID(v, v ); +a(v ); ( Goal ( san(v ), μv (P), false) ; −a(v ); ?φs ) φs ∨ φf ∨ ¬a(v ) : +abort(v ) ) The program P will be repeatedly executed until san(v ) becomes true.",
                "There are two ways this can occur.",
                "First, if either the success condition φs or the failure condition φf becomes true, then the second branch of the parallel construct executes.",
                "This causes abort(v ) to become true, and, after the descendant paps abortmethods are executed, san(v ) becomes true.",
                "In this case, P is now dropped, the a(v ) is removed, and the entire construct succeeds or fails based on φs.",
                "The second way for san(v ) to become true is if v or one of its ancestors is aborted.",
                "In this case, once the descendant paps abort-methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming φs is false). 4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2.",
                "We will express tasks by events, for example, the task Allocate a Paper Number we express as the event APN.",
                "Let the output of the Apply For Clearance task be Y or N, indicating the approval or not of Alices manager, respectively.",
                "Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively: SMS(m) : isconf(m) ← FAb(!APN; !TWA; (!AFC !TWP); !HPS, !CPN, !CPN) AFC : true ← FAb(!SCR; !WFR(r); ?r = Y, nil, !CCR) Note that Support Meeting Submission has a parameter m, the meeting of interest (IJCAI, in our example), while Apply For Clearance has no parameters.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two.",
                "Let v and v denote new variables.",
                "Then we have as the translated plan clause: AFC(v ) : true ← prependID(v , v ); +a(v ); Goal ( ¬a(v ), (!SCR(v ); !WFR(r, v ); ?r = Y; −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CCR(v )) nil); −a(v ); ?false) We can see that an extra context parameter has been added to each task and that the old plan body now appears inside a Goal construct.",
                "Should the old plan body succeed, belief a(v ) is retracted, causing the Goal to succeed.",
                "If the old plan body fails, or if the task is to be aborted, the Goal construct fails.",
                "This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and failure.",
                "The translation of the first plan clause, for SMS, is more complex, because of the parallel construct that introduces nested paps: SMS(m, v) : isconf(m) ← prependID(v, v ); +a(v ); Goal ( ¬a(v ), ((!APN(v ); !TWA(v ); prependID(v , v ); prependID(v , v ); +a(v ); +a(v ); ( Goal ( ¬a(v ), (!AFC(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal ( ¬a(v ), (!TWP(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ) ; ?¬abort(v ) ∧ ¬abort(v ); !HPS(v ); −a(v )) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CPN(v)) !CPN(v)); −a(v ); ?false) Here we can see that if the task !TWP(v ) fails then f(v ) will be asserted, failing the Goal construct that contains it, and leading to abort(v ) being asserted.",
                "If the !WFR(r, v ) task in the expansion of !AFC(v ) is still executing and has no active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true.",
                "This set of conditions will cause the Goal construct in the first plan clause to fail, dropping execution of !WFR(r, v ).",
                "The task !CCR(v ) will be executed.",
                "Once this task completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first Goal construct of the second plan clause to fail.",
                "While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely automated, according to the rules set out in Section 4.2.",
                "The translated plan clauses, with the semantics of CAN augmented by our waituntil-condition construct, thus specify the operation of the agent to handle both failure and aborting for the example. 5.",
                "RELATED WORK Plan failure is handled in the extended version of AgentSpeak found in the Jason system [6].",
                "Failure clean-up plans are triggered from goal deletion events −!g.",
                "Such plans, similar to our failure methods, are designed for the agent to effect state changes (act to undo its earlier actions) prior to possibly attempting another plan to achieve the failed goal g. Given Jasons constructs for dropping a goal with an indication of whether or not to try an alternate plan for it, H¨ubner et al. [6] provide an informal description of how a Jason agent modifies its intention structure when a goal failure event occurs.",
                "In a goal deletion plan, the programmer can specify any undo actions and whether to attempt the goal again.",
                "If no goal deletion plan is provided, Jasons default behaviour is to not reattempt the goal.",
                "Failure handling is applied only to plans triggered by addition of an achievement or test goal; in particular, goal deletion events are not posted for failure of a goal deletion plan.",
                "Further, the informal semantics of [6] do not consider parallel sub-goals (i.e., the CAN construct), since such execution is not part of Jasons language.",
                "The implementation of H¨ubner et al. [6] requires Jasons internal actions.",
                "A requirement for implementing our approach is a reflective capability in the BDI agent implementation.",
                "Suitable implementations of the BDI formalism are JACK [2], Jadex [14], and SPARK [9].",
                "All three allow meta level methods that are cued by meta events such as goal adoption or plan failure, and offer introspective capabilities over goal and intention states.",
                "Such meta level facilities are also required by the approach of Unruh et al. [21], who define goal-based semantic compensation for an agent.",
                "Failure-handling goals are invoked according to failurehandling strategy rules, by a dedicated agent Failure Handling Component (FHC) that tracks task execution.",
                "These goals are specified by the agent programmer and attached to tasks, much like our FAb(P, PF , PA) construct associates failure and abort methods with a plan P. Note, however, that in contrast to both [6] and our semantics, [21] attach the failure-handling knowledge at the goal, not plan, level.",
                "Their failure-handling goals may consist of stabilization goals that perform localized, immediate clean-up to restore the agents state to a known, stable state, and compensation goals that perform undo actions.",
                "Compensation goals are triggered on aborting a goal, and so not necessarily on goal failure (i.e., if the FHC directs the agent to retry the failed goal and the retry is successful).",
                "The FHC approach is defined at the goal level in order to facilitate abstract specification of failure-handling knowledge; the FHC decides when to address a failure and what to do (i.e., what failurehandling goals to invoke), separating this knowledge from the how of implementing corrective actions (i.e., what plan to execute to meet the adopted failure-handling goal).",
                "This contrasts with simplistic plan-level failure handling in which the what and how are intermingled in domain task knowledge.",
                "While our approach is defined at the plan level, our extended BDI semantics provides for the separation of execution and failure handling.",
                "Further, the FHC explicitly maintains data structures to track agent execution.",
                "We leverage the existing execution structures and self-reflective ability of a BDI agent to accomplish both aborting and failure handling without additional overhead.",
                "FHCs failure-handling strategy rules (e.g., whether to retry a failed goal) are replaced by instructions in our PF and PA plans, together with meta-level default failure handlers according to the agents nature (e.g., blindly committed).",
                "The FHC approach is independent of the architecture of the agent itself, in contrast to our work that is dedicated to the BDI formalism (although not tied to any one agent system).",
                "Thus no formal semantics are developed in [21]; the FHCs operation is given as 14 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) a state-based protocol.",
                "This approach, together with state checkpointing, is used for multi-agent systems in [22].",
                "The resulting architecture embeds their failure handling approach within a pair processing architecture for agent crash recovery.",
                "Other work on multi-agent exception handling includes AOEXs distributed exception handling agents [5], and the similar sentinels of [8].",
                "In both cases, failure-handling logic and knowledge are decoupled from the agents; by contrast, while separating exception handling from domain-specific knowledge, Unruh et al.s FHC and our approach both retain failure-handling logic within an agent. 6.",
                "CONCLUSION AND FUTURE WORK The tasks and plans of an agent may not successfully reach completion, either by the choice of the agent to abort them (perhaps at the request of another agent to do so), or by unbidden factors that lead to failure.",
                "In this paper we have presented a procedure-based approach that incorporates aborting tasks and plans into the deliberation cycle of a BDI-style agent, thus providing a unified approach to failure and abort.",
                "Our primary contribution is an analysis of the requirements on the operation of the agent for aborting tasks and plans, and a corresponding operational semantics for aborting in the abstract agent language CAN.",
                "We are planning to implement an instance of our approach in the SPARK agent system [9]; in particular, the work of this paper will be the basis for SPARKs abort handling mechanism.",
                "We are also developing an analysis tool for our extended version of CAN as a basis for experimentation.",
                "An intelligent agent will not only gracefully handle unsuccessful tasks and plans, but also will deliberate over its cognitive attitudes to decide its next course of action.",
                "We have assumed the default behaviour of a BDI-style agent, according to its nature: for instance, to retry alternatives to a failed plan until one succeeds or until no alternative plans remain (in which case to fail the task).",
                "Future work is to place our approach in service of more dynamic agent reasoning, such as the introspection that an agent capable of reasoning over task interaction effects and resource requirements can accomplish [19, 12].",
                "Related to this is determining the cost of aborting a task or plan, and using this as an input to the deliberation process.",
                "This would in particular influence the commitment the agent has towards a particular task: the higher the cost, the greater the commitment.",
                "Our assumption that abort-methods do not fail, as discussed above, is a pragmatic one.",
                "However, this is an issue worthy of further exploration, either to develop weaker assumptions that are also practical, or to analyze conditions under which our assumption is realistic.",
                "A further item of interest is extending our approach to failure and abort to maintenance goals [1].",
                "For such goals a different operational semantics for abort is necessary than for achievement goals, to match the difference in semantics of the goals themselves.",
                "Acknowledgements We thank Lin Padgham and the anonymous reviewers for their comments.",
                "The first author acknowledges the support of the Australian Research Council and Agent Oriented Software under grant LP0453486.",
                "The work of the two authors at SRI International was supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No.",
                "NBCHD030010.",
                "Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the view of DARPA or the Department of Interior-National Business Center. 7.",
                "REFERENCES [1] L. Braubach, A. Pokahr, D. Moldt, and W. Lamersdorf.",
                "Goal representation for BDI Agent systems.",
                "In Proc. of Second Intl.",
                "Workshop on Programming Multi-Agent Systems (ProMAS04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson, and A. Lucas.",
                "JACK intelligent agents - components for intelligent agents in Java.",
                "AgentLink News, Issue 2, 1999. [3] M. G. Chessell, C. Vines, D. Butler, C. M. Ferreira, and P. Henderson.",
                "Extending the concept of transaction compensation.",
                "IBM Systems Journal, 41(4), 2002. [4] M. Dastani, M. B. van Riemsdijk, and J.-J.",
                "C. Meyer.",
                "Goal types in agent programming.",
                "In Proc. of AAMAS06, 2006. [5] S. Entwisle, S. Loke, S. Krishnaswamy, and E. Kendall.",
                "Aoex: An agent-based exception handling framework for building reliable, distributed, open software systems.",
                "In Proc. of Seventh Joint Conf. on Knowledge-Based Software Engineering, 2006. [6] J. F. H¨ubner, R. H. Bordini, and M. Wooldridge.",
                "Programming declarative goals using plan patterns.",
                "In Proc. of 4th Intl.",
                "Workshop on Declarative Agent Languages and Technologies, 2006. [7] D. Kinny.",
                "The Psi calculus: an algebraic agent language.",
                "In Proc. of ATAL01, 2001. [8] M. Klein, J.",
                "A. Rodr´ıguez-Aguilar, and C. Dellarocas.",
                "Using domain-independent exception handling services to enable robust open multi-agent systems: The case of agent death.",
                "Autonomous Agents and Multi-Agent Systems, 7(1-2):179-189, 2003. [9] D. Morley and K. Myers.",
                "The SPARK agent framework.",
                "In Proc. of AAMAS04, 2004. [10] D. Morley, K. L. Myers, and N. Yorke-Smith.",
                "Continuous refinement of agent resource estimates.",
                "In Proc. of AAMAS06, 2006. [11] K. Myers, P. Berry, J. Blythe, K. Conley, M. Gervasio, D. McGuinness, D. Morley, A. Pfeffer, M. Pollack, and M. Tambe.",
                "An intelligent personal assistant for task and time management.",
                "AI Magazine, 28, 2007.",
                "To appear. [12] K. L. Myers and N. Yorke-Smith.",
                "A cognitive framework for delegation to an assistive user agent.",
                "In Proc. of AAAI 2005 Fall Symposium on Mixed-Initiative Problem-Solving Assistants, 2005. [13] L. Padgham and M. Winikoff.",
                "Developing Intelligent Agent Systems: A Practical Guide.",
                "John Wiley and Sons, 2004. [14] A. Pokahr, L. Braubach, and W. Lamersdorf.",
                "Jadex: A BDI reasoning engine.",
                "In R. Bordini, M. Dastani, J. Dix, and A. E. F. Seghrouchni, editors, Multi-Agent Programming.",
                "Springer, 2005. [15] A. S. Rao.",
                "AgentSpeak(L): BDI agents speak out in a logical computable language.",
                "In Proc. of Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World, 1996. [16] A. S. Rao and M. P. Georgeff.",
                "An abstract architecture for rational agents.",
                "In Proc. of KR92, 1992. [17] S. Sardi˜na, L. de Silva, and L. Padgham.",
                "Hierarchical planning in BDI agent programming languages: a formal approach.",
                "In Proc. of AAMAS06, 2006. [18] S. Sardina and L. Padgham.",
                "Goals in the context of bdi plan failure and planning.",
                "In Proc. of AAMAS07, 2007. [19] J. Thangarajah, L. Padgham, and M. Winikoff.",
                "Detecting and exploiting positive goal interaction in intelligent agents.",
                "In Proc. of AAMAS03, 2003. [20] J. Thangarajah, M. Winikoff, L. Padgham, and K. Fischer.",
                "Avoiding resource conflicts in intelligent agents.",
                "In Proc. of ECAI-02, 2002. [21] A. Unruh, J. Bailey, and K. Ramamohanarao.",
                "A framework for goal-based semantic compensation in agent systems.",
                "In Proc. of First Intl.",
                "Workshop on Safety and Security in Multi-Agent Systems, 2004. [22] A. Unruh, H. Harjadi, J. Bailey, and K. Ramamohanarao.",
                "Semantic-compensation-based recovery management in multi-agent systems.",
                "In Proc. of Second IEEE Symposium on Multi-Agent Security and Survivability (IEEE MAS&S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland, and J. Thangarajah.",
                "Declarative and procedural goals in intelligent agent systems.",
                "In Proc. of KR02, 2002.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 15"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "En consecuencia, \"tratar\" con el fracaso es fundamental para la programación de agentes, y es un elemento importante de las características de los agentes, como la robustez, la flexibilidad y la persistencia [21].relación comercial",
                "Además de \"tratar\" con el fracaso, una capacidad importante de un agente inteligente es poder abortar una tarea o plan en particular.relación comercial",
                "La Figura 2 ofrece reglas simplificadas para \"tratar\" con objetivos, en línea con los presentados en [17].relación comercial"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "cleanup method": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Aborting Tasks in BDI Agents John Thangarajah, James Harland RMIT University Melbourne, Australia {johthan,jah}@cs.rmit.edu.au David Morley, Neil Yorke-Smith Artificial Intelligence Center, SRI International Menlo Park, CA 94025 U.S.A. {morley,nysmith}@ai.sri.com ABSTRACT Intelligent agents that are intended to work in dynamic environments must be able to gracefully handle unsuccessful tasks and plans.",
                "In addition, such agents should be able to make rational decisions about an appropriate course of action, which may include aborting a task or plan, either as a result of the agents own deliberations, or potentially at the request of another agent.",
                "In this paper we investigate the incorporation of aborts into a BDI-style architecture.",
                "We discuss some conditions under which aborting a task or plan is appropriate, and how to determine the consequences of such a decision.",
                "We augment each plan with an optional abort-method, analogous to the failure method found in some agent programming languages.",
                "We provide an operational semantics for the execution cycle in the presence of aborts in the abstract agent language CAN, which enables us to specify a BDI-based execution model without limiting our attention to a particular agent system (such as JACK, Jadex, Jason, or SPARK).",
                "A key technical challenge we address is the presence of parallel execution threads and of sub-tasks, which require the agent to ensure that the abort methods for each plan are carried out in an appropriate sequence.",
                "Categories and Subject Descriptors I.2.11 [ARTIFICIAL INTELLIGENCE]: Distributed Artificial Intelligence-Intelligent agents General Terms Design, Reliability, Theory 1.",
                "INTRODUCTION Intelligent agents generally work in complex, dynamic environments, such as air traffic control or robot navigation, in which the success of any particular action or plan cannot be guaranteed [13].",
                "Accordingly, dealing with failure is fundamental to agent programming, and is an important element of agent characteristics such as robustness, flexibility, and persistence [21].",
                "In agent architectures inspired by the Belief-Desire-Intention (BDI) model [16], these properties are often characterized by the interactions between beliefs, goals, and plans [2].1 In general, an agent that wishes to achieve a particular set of tasks will pursue a number of plans concurrently.",
                "When failures occur, the choice of plans will be reviewed.",
                "This may involve seeking alternative plans for a particular task, re-scheduling tasks to better comply with resource constraints, dropping some tasks, or some other decision that will increase the likelihood of success [12, 14].",
                "Failures can occur for a number of reasons, and it is often not possible to predict these in advance, either because of the complexity of the system or because changes in the environment invalidate some earlier decisions.",
                "Given this need for deliberation about failed tasks or plans, failure deliberation is commonly built into the agents execution cycle.",
                "Besides dealing with failure, an important capability of an intelligent agent is to be able to abort a particular task or plan.",
                "This decision may be due to an internal deliberation (such as the agent believing the task can no longer be achieved, or that some conflicting task now has a higher priority) or due to an external factor (such as another agent altering a commitment, or a change in the environment).",
                "Aborting a task or plan is distinct from its failure.",
                "Failure reflects an inability to perform and does not negate the need to perform - for example, a reasonable response to failure may be to try again.",
                "In contrast, aborting says nothing about the ability to perform; it merely eliminates the need.",
                "Failure propagates from the bottom up, whereas aborting propagates from the top down.",
                "The potential for concurrently executing sub-plans introduces different complexities for aborting and failure.",
                "For aborting, it means that multiple concurrent sub-plans may need to be aborted as the abort is propagated down.",
                "For failure, it means that parallel-sibling plans may need to be aborted as the failure is propagated up.",
                "There has been a considerable amount of work on plan failures (such as detecting and resolving resource conflicts [20, 10]) and most agent systems incorporate some notion of failure handling.",
                "However, there has been relatively little work on the development of abort techniques beyond simple dropping of currently intended plans and tasks, which does not deal with the clean-up required.",
                "As one consequence, most agent systems are quite limited in their treatment of the situation where one branch of a parallel construct 1 One can consider both tasks to be performed and goals to achieve a certain state of the world.",
                "A task can be considered a goal of achieving the state of the task having been performed, and a goal can be considered a task of bringing about that state of the world.",
                "We adopt the latter view and use task to also refer to goals. 8 978-81-904262-7-5 (RPS) c 2007 IFAAMAS fails (common approaches include either letting the other branch run to completion unhindered or dropping it completely).",
                "In this paper we discuss in detail the incorporation of abort <br>cleanup method</br>s into the agent execution cycle, providing a unified approach to failure and abort.",
                "A key feature of our procedure-based approach is that we allow each plan to execute some particular code on a failure and on an abort.",
                "This allows a plan to attempt to ensure a stable, known state, and possibly to recover some resources and otherwise clean up before exiting.",
                "Accordingly, a central technical challenge is to manage the orderly execution of the appropriate clean-up code.",
                "We show how aborts can be smoothly introduced into a BDI-style architecture, and for the first time we give an operational semantics for aborting in the abstract agent language CAN [23, 17].",
                "This allows us to specify an appropriate level of detail for the execution model, without focusing on the specific constructs of any one agent system such as JACK [2], Jadex [14], Jason [6], or SPARK [9].",
                "Our focus is on a single agent, complementary to related work that considers exception handling for single- and multiagent systems (e.g., [22, 5, 6]).",
                "This paper is organized as follows.",
                "In Section 2 we give an example of the consequences of aborting a task, and in Section 3 we discuss some circumstances under which aborts should occur, and the appropriate representation and invocation procedures.",
                "In Section 4 we show how we can use CAN to formally specify the behaviour of an aborted plan.",
                "Section 5 discusses related work, and in Section 6 we present our conclusions and future work. 2.",
                "MOTIVATING EXAMPLE Alice is a knowledge worker assisted by a learning, personal assistive agent such as CALO [11].",
                "Alice plans to attend the IJCAI conference later in the year, and her CALO agent adopts the task of Support Meeting Submission (SMS) to assist her.",
                "CALOs plan for an SMS task in the case of a conference submission consists of the following sub-tasks: 1.",
                "Allocate a Paper Number (APN) to be used for administrative purposes in the company. 2.",
                "Track Writing Abstract (TWA): keep track of Alices progress in preparing an abstract. 3.",
                "Apply For Clearance (AFC) for publication from Alices manager based on the abstract and conference details. 4.",
                "Track Writing Paper (TWP): keep track of Alices progress in writing the paper. 5.",
                "Handle Paper Submission (HPS): follow company internal procedures for submitting a paper to a conference.",
                "These steps must be performed in order, with the exception of steps 3 (AFC) and 4 (TWP), which may be performed in parallel.",
                "Similarly, CALO can perform the task Apply For Clearance (AFC) by a plan consisting of: 1.",
                "Send Clearance Request (SCR) to Alices manager. 2.",
                "Wait For Response (WFR) from the manager. 3.",
                "Confirm that the response was positive, and fail otherwise.",
                "Now suppose that a change in circumstances causes Alice to reconsider her travel plans while she is writing the paper.",
                "Alice will no longer be able to attend IJCAI.",
                "She therefore instructs her CALO agent to abort the SMS task.",
                "Aborting the task implies aborting both the SMS plan and the AFC subplan.",
                "Aborting the first plan requires CALO to notify the paper number registry that the allocated paper number is obsolete, which it can achieve by the Cancel Paper Number (CPN) task.2 Aborting the second plan requires CALO to notify Alices manager that Alice no longer requires clearance for publication, which CALO can achieve by invoking the Cancel Clearance Request (CCR) task.",
                "We note a number of important observations from the example.",
                "First, the decision to abort a particular course of action can come from the internal deliberations of the agent (such as reasoning about priorities in a conflict over resources), or from external sources (such as another agent cancelling a commitment), as in this example.",
                "In this paper we only touch on the problem of determining whether a task or plan should be aborted, instead concentrating on determining the appropriate actions once this decision is made.",
                "Hence, our objective is to determine how to incorporate aborting mechanisms into the standard execution cycle rather than determine what should be aborted and when.",
                "Second, once the decision is made to abort the attempt to submit a paper, there are some actions the agent should take, such as cancelling the clearance request.",
                "In other words, aborting a task is not simply a matter of dropping the task and associated active plans: there are some clean up actions that may need to be done.",
                "This is similar to the case for failure, in that there may also be actions to take when a task or plan fails.",
                "In both cases, note that it is not simply a matter of the agent undo-ing its actions to date; indeed, this may be neither possible (since the agent acts in a situated world and its actions change world state) nor desirable (depending on the semantics of the task).",
                "Rather, cleaning up involves compensation via forward recovery actions [3].",
                "Third, there is a distinction between aborting a task and aborting a plan.",
                "In the former case, it is clear that all plans being executed to perform the task should be aborted; in the latter case, it may be that there are better alternatives to the current plan and one of these should be attempted.",
                "Hence, plan aborting or failure does not necessarily lead to task aborting or failure.",
                "Fourth, given that tasks may contain sub-tasks, which may contain further sub-tasks, it is necessary for a parent task to wait until its children have finished their abort methods.",
                "This is the source of one of the technical challenges that we address: determining the precise sequence of actions once a parent task or plan is aborted. 3.",
                "ABORTING TASKS AND PLANS As we have alluded to, failure and aborting are related concepts.",
                "They both cause the execution of existing plans to cease and, consequentially, the agent to reflect over its current tasks and intentions.",
                "Failure and aborting, however, differ in the way they arise.",
                "In the case of failure, the trigger to cease execution of a task or plan comes from below, that is, the failure of sub-tasks or lower-level plans.",
                "In the case of aborting, the trigger comes from above, that is, the tasks and the parent plans that initiated a plan.",
                "In BDI-style systems such as JACK and SPARK, an agents domain knowledge includes a pre-defined plan library of plan clauses.",
                "Each plan clause has a plan body, which is a program (i.e., combination of primitive actions, sub-tasks, etc.) that can be executed in response to a task or other event should the plan clauses context condition be satisfied.",
                "The agent selects and executes instances of plan clauses to perform its tasks.",
                "There can be more than one applicable plan clause and, in the event that one fails, another applicable one may be attempted.",
                "Plans may have sub-tasks that must succeed 2 CALO needs only drop the TWA and TWP tasks to abort them: for the sake of simplicity we suppose no explicit clean up of its internal state is necessary.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 9 for the plan to succeed.",
                "In such systems, a plan failure occurs if one of the actions or sub-tasks within the plan fails.",
                "The agents action upon plan failure depends on its nature: for example, the agent may declare the task to have failed if one plan has been tried and resulted in failure, or it may retry alternate plans and declare (indeed, must declare) task failure only if all possible alternate plans to perform the task have been tried and resulted in failure.",
                "Observe that, while task failure can follow from plan failure or a sequence of plan failures, plan failure need not lead to task failure provided the agent can successfully complete an alternate plan.",
                "Moreover, task failure can also arise separately from plan failure, if the agent decides to abort the task.",
                "Our approach associates an abort-method with each plan.",
                "This enables the programmer to specify dedicated compensation actions according to how the agent is attempting to perform the task.",
                "Note that our abort-methods can be arbitrary programs and so can invoke tasks that may be performed dynamically in the usual BDI fashion, i.e., the clean-up is not limited to executing a predetermined set of actions.",
                "The question remains which abort-method should be invoked, and in what manner.",
                "Given the complexity of agent action spaces, it is not possible nor desirable to enumerate a static set of rules.",
                "Rather, the agent will invoke its abort-methods dynamically according to the state of execution and its own internal events.",
                "An alternative to attaching an abort-method to each plan is to attach such methods to each atomic action.",
                "We choose the former because: (1) action-level abort-methods would incur a greater overhead, (2) plans are meant to be designed as single cohesive units and are the unit of deliberation in BDI systems, and (3) the <br>cleanup method</br>s for failure in current systems are attached to plans.",
                "In order to understand how the agents abort processing should function, we consider three situations where it is sensible for an agent to consider aborting some of its tasks and plans: 1.",
                "When a task succeeds or fails because of an external factor other than the agent itself, the plan currently executed to perform the task should be aborted.",
                "For example, suppose company policy changes so that employees of Alices seniority automatically have clearance for publishing papers.",
                "Since Alice now has clearance for publishing her paper, CALO can abort the plan for Apply For Clearance.",
                "In doing so it must invoke the abort-method, in this case thus performing Cancel Clearance Request.3 2.",
                "When two or more sub-programs are executed in parallel, if one fails then the others should be aborted, given that the failure of one branch leads to the failure of the overall task.",
                "For example, suppose that part-way through writing the paper, Alice realizes that there is a fatal flaw in her results, and so notifies CALO that she will not be able to complete the paper by the deadline.",
                "The failure of the Track Writing Paper task should cause the Apply For Clearance task being executed in parallel to be aborted. 3.",
                "When an execution event alters the importance of an existing task or intention, the agent should deliberate over whether the existing plan(s) should continue.",
                "For example, suppose that Alice tasks CALO with a new, high-priority task to purchase a replacement laptop, but that Alice lacks enough funds to both purchase the laptop and to attend IJCAI.",
                "Reasoning over resource requirements [20, 10] will cause the agent to realize 3 If there is any difference between how to abort a task that is externally performed versus how to abort one that is now known to be impossible, the abort-method can detect the circumstances and handle the situation as appropriate. that it cannot successfully complete both tasks.",
                "Given that the new task has greater importance, a rational agent will evaluate its best course of action and may decide to abortor at least suspend - the existing task of submitting a paper and intentions derived from it [12].",
                "The operational semantics we provide in Section 4 for aborting tasks and plans captures the first two situations above.",
                "The third situation involves deliberating over the importance of a task, which depends on various factors such as task priority.",
                "Although this deliberation is beyond the scope of this paper, it is a complementary topic of our future work.",
                "Note that the above situations apply to achievement goals, for which the task is completed when a particular state of the world is brought about (e.g., ensure we have clearance).",
                "Different forms of reasoning apply to other goal types [4] such as maintenance goals [1], where the goal is satisfied by maintaining a state of the world for some period of time (e.g., maintain $100 in cash).",
                "Abort Method Representation The intent of aborting a task or plan is that the task or plan and all its children cease to execute, and that appropriate clean-up methods are performed as required.",
                "In contrast to offline planning systems, BDI agents are situated: they perform online deliberation and their actions change the state of the world.",
                "As a result, the effects of many actions cannot be simply undone.",
                "Moreover, the undo process may cause adverse effects.",
                "Therefore, the clean-up methods that we specify are forward recovery procedures that attempt to ensure a stable state and that also may, if possible, recover resources.",
                "The common plan representation in BDI-style systems such as JACK and SPARK includes a failure-method, which is the designated clean-up method invoked when the plan fails.",
                "To this, we add the abort-method, which is invoked if the plan is to be aborted.",
                "In our example, the abort-method for the plan for Support Meeting Submission consists of invoking the sub-task Cancel Paper Number.",
                "The abort-method need not explicitly abort Apply For Clearance, because the agent will invoke the abort-method for the subtask appropriately, as we outline below.",
                "The assumption here is that, like the failure-method, the programmer of the agent system has the opportunity to specify a sensible abort-method that takes into consideration the point in the plan at which the abort is to be executed.",
                "For any plan, the abort-method is optional: if no abort-method is specified, the agent takes no specific action for this plan.",
                "However, the agents default behavioural rules still apply, for example, whether to retry an alternate plan for the parent task.",
                "Note that an explicit representation of the clean-up methods for tasks is not required, since tasks are performed by executing some plan or plans.",
                "Hence, aborting a task means aborting the current plan that is executed to perform that task, as we next describe.",
                "Abort Method Invocation We now informally lay out the agents action upon aborting plans and tasks.",
                "When a plan P is aborted: 1.",
                "Abort each sub-task that is an active child of P. An active child is one that was triggered by P and is currently in execution. 2.",
                "When there are no more active children, invoke the abort method of plan P. 3.",
                "Indicate a plan failure to TP , the parent task of P. We note here that if the parent task TP is not to be aborted then the agent may choose another applicable plan to satisfy TP . 10 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) When a task (or sub-task) T is aborted: 1.",
                "Abort the current active plan to satisfy T (if any). 2.",
                "When there are no more active child processes, drop the task.",
                "The agent thus no longer pursues T. 3.",
                "Note here that when the current active plan for performing T is aborted, no other applicable plans to perform T should be tried as it is the task that is to be aborted.",
                "In order to prevent infinitely cascading clean-up efforts, we assume that abort-methods will never be aborted nor fail.",
                "In reality, however, an abort-method may fail.",
                "In this case, lacking a more sophisticated handling mechanism, the agent simply stops executing the failed abort-method with no further deliberation.",
                "The assumption we make is thus not a reflection of the full complexity of reality, but one that is pragmatic in terms of the agent execution cycle; the approach to failure-handling of [21] makes the same assumption.",
                "In systems such as SPARK, the programmer can specify an alternative behaviour for a failed failure- or abort-method by means of meta-level procedures.",
                "We also assume that failure- and abort-methods terminate in finite time. 4.",
                "OPERATIONAL SEMANTICS We provide the semantics for the task and plan failure and aborting processes outlined above.",
                "We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the goal adoption and dropping mechanisms.",
                "The extensions also simplified the semantics in the earlier work.",
                "We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1.",
                "Following a presentation of the operational semantics of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present. 4.1 CAN Language CAN is a high-level agent language, in a spirit similar to that of AgentSpeak [15] and Kinnys Ψ [7], both of which attempt to extract the essence of a class of implemented BDI agent systems.",
                "CAN provides an explicit goal construct that captures both the declarative and procedural aspects of a goal.",
                "Goals are persistent in CAN in that, when a plan fails, another applicable plan is attempted.",
                "This equates to the default failure handling mechanism typically found in implemented BDI systems such as JACK [2].",
                "In practical systems, tasks are typically translated into events that trigger the execution of some plans.",
                "This is also true in the CAN language, but, in order to maintain the persistence of goals, a goal construct is introduced.",
                "This is denoted by Goal ` φs, P, φf ´ , where φs is the success condition that determines when the goal is considered achieved, φf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once φs or φf become true.",
                "An agents behavior is specified by a plan library, denoted by Π, that consists of a collection of plan clauses of the form e : c ← P, where e is an event, c is a context condition (a logical formula over the agents beliefs that must be true in order for the plan to be applicable)4 and P is the plan body.",
                "The plan body is a program that is defined recursively as follows: P ::= act | +b | −b | ?φ | !e | P1; P2 | P1 P2 | Goal ` φs, P1, φf ´ | P1 P2 | {ψ1 : P1, . . . , ψn : Pn} | nil 4 An omitted c is equivalent to true.",
                "Δ = {ψiθ : Piθ | e : ψi ← Pi ∈ Π ∧ θ = mgu(e, e )} B, !e −→ B, Δ Event ψi : Pi ∈ Δ B |= ψi B, Δ −→ B, Pi Δ \\ {ψi : Pi} Select B, P1 −→ B, (P1 P2) −→ B, P2 fail B, P1 −→ B , P1 B, (P1; P2) −→ B , (P ; P2) Sequence B, P1 −→ B , P B, (P1 P2) −→ B , (P P2) Parallel1 B, P2 −→ B , P B, (P1 P2) −→ B , (P P1) Parallel2 Figure 1: Operational rules of CAN. where P1, . . . , Pn are themselves programs, act is a primitive action that is not further specified, and +b and −b are operations to add and delete beliefs.",
                "The belief base contains ground belief atoms in the form of first-order relations but could be orthogonally extended to other logics.",
                "It is assumed that well-defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ∪ {b}), and to delete a belief from a belief set (B \\ {b}). ?φ is a test for condition φ, and !e5 is an event6 that is posted from within the program.",
                "The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (Goal ` φs, P, φf ´ ).",
                "The above defines the user language.",
                "In addition, a set of auxiliary compound forms are used internally when assigning semantics to constructs. nil is the basic (terminating) program.",
                "When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 : P1, . . . , cn : Pn ).",
                "The other auxiliary compound form, , is a choice operator dual to sequencing: P1 P2 executes P1 and then executes P2 only if P1 failed.",
                "A summary of the operational semantics for CAN in line with [23] and following some of the simplifications of [17] is as follows.",
                "A basic configuration S = B, G, Γ consists of the current belief base B of the agent, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention).",
                "A transition S0 −→ S1 specifies that executing S0 for a single step yields configuration S1.",
                "S0 −→∗ Sn is the usual reflexive transitive closure of −→: Sn is the result of one or more singlestep transitions.",
                "A derivation rule S −→ Sr S −→ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator).",
                "Figure 1 gives some of the operational rules.",
                "The Event rule handles task events by collecting all relevant plan clauses for the event in question: for each plan clause e : ψi ← Pi, if there is a most general unifier, θ = mgu(e, e ) of e and the event in 5 Where it is obvious that e is an event we will sometimes exclude the exclamation mark for readability. 6 Typically an achievement goal.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 11 B |= φs B, Goal ` φs, P, φf ´ −→ B, true Gs B |= φf B, Goal ` φs, P, φf ´ −→ B, fail Gf P = Goal ` φs, P , φf ´ P = P1 £ P2 B |= φs ∨ φf B, P −→ B, Goal ` φs, P £ P , φf ´ GI P = P1 £ P2 B |= φs ∨ φf B, P1 −→ B , P B, Goal ` φs, P, φf ´ −→ B , Goal ` φs, P £ P2, φf ´ GS P = P1 £ P2 B |= φs ∨ φf P1 ∈ {true, fail} B, Goal ` φs, P, φf ´ −→ B, Goal ` φs, P2 £ P2, φf ´ GR Figure 2: Rules for goals in CAN. question, then the rule constructs a guarded alternative ψiθ : Piθ.",
                "The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives: program P Δ states that program P should be tried first, falling back to the remaining alternatives, Δ \\ P, if necessary.",
                "This rule and the fail rule together are used for failure handling: if the current program Pi from a plan clause for a task fails, rule fail is applied first, and then if possible, rule Select will choose another applicable alternative for the task if one exists.",
                "Rule Sequence handles sequencing of programs in the usual way.",
                "Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel.",
                "Figure 2 gives simplified rules for dealing with goals, in line with those presented in [17].",
                "The first rule states that a goal succeeds when φs become true; the second rule states that a goal fails when φf become true.",
                "The third rule GI initializes the execution of a goal-program by updating the goal base and setting the program in the goal to P £ P; the first P is to be executed and the second P is used to keep track of the original program for the goal.",
                "The fourth rule GS executes a single step of the goal-program.",
                "The final rule GR restarts the original program (encoded as P2 of pair P1 £ P2) whenever the current program is finished but the desired and still possible goal has not yet been achieved. 4.2 Aborting Intentions and Handling Failure We next introduce the ability to specify handler programs, in the form of failure- and abort-methods, that deal with the clean-up required when a given program respectively fails or is aborted.",
                "We do not associate failure- and abort- methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies failure- and abort- methods for an arbitrary program.",
                "The FAb(P, PF , PA) construct executes the program P. Should P fail, it executes the failure handling program PF ; should P need to be aborted, it executes the abort handling program PA.",
                "Thus to add failure- and abort- methods PF and PA to a plan clause e : c ← P, we write e : c ← FAb(P, PF , PA).",
                "With the introduction of the ability to abort programs, we modify the parallel construct to allow the failure of one branch to abort the other.",
                "We must take into consideration the possible existence of abort-methods in the aborted branch.",
                "Similarly, with the Goal construct we can no longer completely abandon the program the goal contains as soon as the success or failure condition holds; we must now take into consideration the existence of any abort-methods applicable to the program.",
                "We provide the semantics of an augmented agent language containing the FAb construct by defining a source transformation, similar to macro-expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN.",
                "The one non-standard extension to CAN is a wait-until-condition construct.",
                "We explain this simple modification of the parallel construct below when we come to translation of the Goal construct.",
                "First we describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases: the FAb, parallel, and Goal constructs.",
                "A key issue is that the FAb constructs may be nested, either directly or indirectly.",
                "Let us call each instantiation of the construct at execution time a possible abort point (pap).",
                "Where these constructs are nested, it is important that before the failure- or abort-method of a parent pap is executed, the failure- or abort-methods programs of the children paps are executed first, as described earlier in Section 3.",
                "The need to coordinate the execution of the abort-methods of nested paps requires that there be some way to identify the parents and children of a particular pap.",
                "We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e : c ← P with a plan clause e(v) : c ← μv(P) where v is a free variable, not previously present in the plan clause.",
                "This variable is used to keep track of the context of execution.",
                "The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context.",
                "For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1].",
                "We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51.",
                "This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v .",
                "For most CAN constructs, the context variable is unused or passed unchanged: μv(act) = act μv(+b) = +b μv(−b) = −b μv(nil) = nil μv(!e) = !e(v) μv(P1; P2) = μv(P1); μv(P2) μv(P1 P2) = μv(P1) μv(P2) μv( ψ1 : P1, . . . , ψn : Pn ) = ψ1 : μv(P1), . . . , ψn : μv(Pn) It remains to specify the transformation μv(·) in three cases: the FAb, parallel, and Goal constructs.",
                "These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context.",
                "Let us introduce the primitive action prependID(v, v ) that creates a new pap identifier and prepends it to list v giving list v .",
                "We also introduce the following predicates: • a(v) - the pap v is currently active. • abort(v) - the pap v should be aborted (after aborting all of its descendants). 7 An alternative would be to use meta-level predicates that reflect the current state of the intention structure. 12 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) • f(v) - the program of pap v has failed. • ancestorof(v, v ) ≡ v = v ∨ ancestorof(v, tail(v ))the pap v is an ancestor of pap v . • nac(v) ≡ ¬∃v . (a(v ) ∧ ancestorof(v, v ) ∧ v = v ) - v has no active children. • sa(v) ≡ ∃v .abort(v ) ∧ ancestorof(v , v) - we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active. • san(v) ≡ sa(v) ∧ nac(v) - we should abort v now if we should abort v and v has no active children.",
                "First let us consider the case of the FAb construct.",
                "The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v. We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context.",
                "We need to make sure that we retract the belief that v is active at the end, i.e., −a(v ).",
                "We use the Goal construct to allow us to drop the execution of a program within a pap v when it is necessary to abort.",
                "While executing the program P, we know that we need to drop P and invoke its abort-method if some ancestor of P has been told to abort.",
                "This is represented by the predicate sa(v ) being true.",
                "However, we need to make sure that we do this only after every child pap has had the chance to invoke its abort-method and all these abort-methods have completed: if we drop the program too soon, then execution of the abort-methods of the children will also be dropped.",
                "Therefore, the condition we actually use in the Goal construct to test when to drop the program is san(v ).",
                "This condition relies on the fact that as the children paps complete, they remove the relevant a facts.",
                "Our use of the Goal construct is for its ability to drop the execution of a program when conditions are met.",
                "To leave aside the repeat execution until a condition is met aspect, we must ensure that the success or failure condition of the construct is satisfied once the execution of the program succeeds or fails.",
                "We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on failure, and by having the appropriate success and failure conditions on the Goal.",
                "Hence, if the Goal construct fails, then the program either was aborted or it failed.",
                "We invoke the relevant failure- or abort- method, retract the a(v ) fact, and then fail.",
                "Putting all this together, we formally define μv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agents plan library: prependID(v, v ); +a(v ); Goal ( ¬a(v ), (μv (P); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); μv(PA)) μv(PF )); −a(v ); ?false) Second, we must transform the parallel operator to ensure that the failure of one branch safely aborts the other.",
                "Here we construct two new contexts, v and v , from the existing context v. If one branch fails, it must abort the other branch.",
                "At the end, if either branch was aborted, then we must fail.",
                "Let v and v be new variables distinct from any other in the agents plan library.",
                "We define μv(P1 P2) to be: prependID(v, v ); prependID(v, v ); +a(v ); +a(v ); ( Goal (¬a(v ), (μv (P1); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal (¬a(v ), (μv (P2); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ); ?¬abort(v ) ∧ ¬abort(v ) Finally, we need to modify occurrences of the Goal construct in two ways: first, to make sure that the abort handling methods are not bypassed when the success or failure conditions are satisfied, and second, to trigger the aborting of the contained program when either the success or failure conditions are satisfied.",
                "To transform the Goal construct we need to extend standard CAN with a wait-until-condition construct.",
                "The construct φ : P does not execute P until φ becomes true.",
                "We augment the CAN language with the following rules for the guard operator :: B |= φ B, G, (φ : P −→ B, G, P :true B |= φ B, G, (φ : P) −→ B, G, (φ : P) :false In order to specify μv(Goal ` φs, P, φf ´ ), we generate a new pap and execute the program within the Goal construct in this new context.",
                "We must ensure that belief a(v ) is removed whether the Goal succeeds or fails.",
                "We shift the success and failure condition of the Goal construct into a parallel branch using the wait-until-condition construct, and modify the Goal to use the should abort now condition san(v ) as the success condition.",
                "The waiting branch will trigger the abort of the program should either the success or failure condition be met.",
                "To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active.",
                "Let v be a new variable distinct from any other in the agents plan library.",
                "We define μv(Goal ` φs, P, φf ´ ) to be: prependID(v, v ); +a(v ); ( Goal ( san(v ), μv (P), false) ; −a(v ); ?φs ) φs ∨ φf ∨ ¬a(v ) : +abort(v ) ) The program P will be repeatedly executed until san(v ) becomes true.",
                "There are two ways this can occur.",
                "First, if either the success condition φs or the failure condition φf becomes true, then the second branch of the parallel construct executes.",
                "This causes abort(v ) to become true, and, after the descendant paps abortmethods are executed, san(v ) becomes true.",
                "In this case, P is now dropped, the a(v ) is removed, and the entire construct succeeds or fails based on φs.",
                "The second way for san(v ) to become true is if v or one of its ancestors is aborted.",
                "In this case, once the descendant paps abort-methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming φs is false). 4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2.",
                "We will express tasks by events, for example, the task Allocate a Paper Number we express as the event APN.",
                "Let the output of the Apply For Clearance task be Y or N, indicating the approval or not of Alices manager, respectively.",
                "Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively: SMS(m) : isconf(m) ← FAb(!APN; !TWA; (!AFC !TWP); !HPS, !CPN, !CPN) AFC : true ← FAb(!SCR; !WFR(r); ?r = Y, nil, !CCR) Note that Support Meeting Submission has a parameter m, the meeting of interest (IJCAI, in our example), while Apply For Clearance has no parameters.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two.",
                "Let v and v denote new variables.",
                "Then we have as the translated plan clause: AFC(v ) : true ← prependID(v , v ); +a(v ); Goal ( ¬a(v ), (!SCR(v ); !WFR(r, v ); ?r = Y; −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CCR(v )) nil); −a(v ); ?false) We can see that an extra context parameter has been added to each task and that the old plan body now appears inside a Goal construct.",
                "Should the old plan body succeed, belief a(v ) is retracted, causing the Goal to succeed.",
                "If the old plan body fails, or if the task is to be aborted, the Goal construct fails.",
                "This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and failure.",
                "The translation of the first plan clause, for SMS, is more complex, because of the parallel construct that introduces nested paps: SMS(m, v) : isconf(m) ← prependID(v, v ); +a(v ); Goal ( ¬a(v ), ((!APN(v ); !TWA(v ); prependID(v , v ); prependID(v , v ); +a(v ); +a(v ); ( Goal ( ¬a(v ), (!AFC(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal ( ¬a(v ), (!TWP(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ) ; ?¬abort(v ) ∧ ¬abort(v ); !HPS(v ); −a(v )) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CPN(v)) !CPN(v)); −a(v ); ?false) Here we can see that if the task !TWP(v ) fails then f(v ) will be asserted, failing the Goal construct that contains it, and leading to abort(v ) being asserted.",
                "If the !WFR(r, v ) task in the expansion of !AFC(v ) is still executing and has no active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true.",
                "This set of conditions will cause the Goal construct in the first plan clause to fail, dropping execution of !WFR(r, v ).",
                "The task !CCR(v ) will be executed.",
                "Once this task completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first Goal construct of the second plan clause to fail.",
                "While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely automated, according to the rules set out in Section 4.2.",
                "The translated plan clauses, with the semantics of CAN augmented by our waituntil-condition construct, thus specify the operation of the agent to handle both failure and aborting for the example. 5.",
                "RELATED WORK Plan failure is handled in the extended version of AgentSpeak found in the Jason system [6].",
                "Failure clean-up plans are triggered from goal deletion events −!g.",
                "Such plans, similar to our failure methods, are designed for the agent to effect state changes (act to undo its earlier actions) prior to possibly attempting another plan to achieve the failed goal g. Given Jasons constructs for dropping a goal with an indication of whether or not to try an alternate plan for it, H¨ubner et al. [6] provide an informal description of how a Jason agent modifies its intention structure when a goal failure event occurs.",
                "In a goal deletion plan, the programmer can specify any undo actions and whether to attempt the goal again.",
                "If no goal deletion plan is provided, Jasons default behaviour is to not reattempt the goal.",
                "Failure handling is applied only to plans triggered by addition of an achievement or test goal; in particular, goal deletion events are not posted for failure of a goal deletion plan.",
                "Further, the informal semantics of [6] do not consider parallel sub-goals (i.e., the CAN construct), since such execution is not part of Jasons language.",
                "The implementation of H¨ubner et al. [6] requires Jasons internal actions.",
                "A requirement for implementing our approach is a reflective capability in the BDI agent implementation.",
                "Suitable implementations of the BDI formalism are JACK [2], Jadex [14], and SPARK [9].",
                "All three allow meta level methods that are cued by meta events such as goal adoption or plan failure, and offer introspective capabilities over goal and intention states.",
                "Such meta level facilities are also required by the approach of Unruh et al. [21], who define goal-based semantic compensation for an agent.",
                "Failure-handling goals are invoked according to failurehandling strategy rules, by a dedicated agent Failure Handling Component (FHC) that tracks task execution.",
                "These goals are specified by the agent programmer and attached to tasks, much like our FAb(P, PF , PA) construct associates failure and abort methods with a plan P. Note, however, that in contrast to both [6] and our semantics, [21] attach the failure-handling knowledge at the goal, not plan, level.",
                "Their failure-handling goals may consist of stabilization goals that perform localized, immediate clean-up to restore the agents state to a known, stable state, and compensation goals that perform undo actions.",
                "Compensation goals are triggered on aborting a goal, and so not necessarily on goal failure (i.e., if the FHC directs the agent to retry the failed goal and the retry is successful).",
                "The FHC approach is defined at the goal level in order to facilitate abstract specification of failure-handling knowledge; the FHC decides when to address a failure and what to do (i.e., what failurehandling goals to invoke), separating this knowledge from the how of implementing corrective actions (i.e., what plan to execute to meet the adopted failure-handling goal).",
                "This contrasts with simplistic plan-level failure handling in which the what and how are intermingled in domain task knowledge.",
                "While our approach is defined at the plan level, our extended BDI semantics provides for the separation of execution and failure handling.",
                "Further, the FHC explicitly maintains data structures to track agent execution.",
                "We leverage the existing execution structures and self-reflective ability of a BDI agent to accomplish both aborting and failure handling without additional overhead.",
                "FHCs failure-handling strategy rules (e.g., whether to retry a failed goal) are replaced by instructions in our PF and PA plans, together with meta-level default failure handlers according to the agents nature (e.g., blindly committed).",
                "The FHC approach is independent of the architecture of the agent itself, in contrast to our work that is dedicated to the BDI formalism (although not tied to any one agent system).",
                "Thus no formal semantics are developed in [21]; the FHCs operation is given as 14 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) a state-based protocol.",
                "This approach, together with state checkpointing, is used for multi-agent systems in [22].",
                "The resulting architecture embeds their failure handling approach within a pair processing architecture for agent crash recovery.",
                "Other work on multi-agent exception handling includes AOEXs distributed exception handling agents [5], and the similar sentinels of [8].",
                "In both cases, failure-handling logic and knowledge are decoupled from the agents; by contrast, while separating exception handling from domain-specific knowledge, Unruh et al.s FHC and our approach both retain failure-handling logic within an agent. 6.",
                "CONCLUSION AND FUTURE WORK The tasks and plans of an agent may not successfully reach completion, either by the choice of the agent to abort them (perhaps at the request of another agent to do so), or by unbidden factors that lead to failure.",
                "In this paper we have presented a procedure-based approach that incorporates aborting tasks and plans into the deliberation cycle of a BDI-style agent, thus providing a unified approach to failure and abort.",
                "Our primary contribution is an analysis of the requirements on the operation of the agent for aborting tasks and plans, and a corresponding operational semantics for aborting in the abstract agent language CAN.",
                "We are planning to implement an instance of our approach in the SPARK agent system [9]; in particular, the work of this paper will be the basis for SPARKs abort handling mechanism.",
                "We are also developing an analysis tool for our extended version of CAN as a basis for experimentation.",
                "An intelligent agent will not only gracefully handle unsuccessful tasks and plans, but also will deliberate over its cognitive attitudes to decide its next course of action.",
                "We have assumed the default behaviour of a BDI-style agent, according to its nature: for instance, to retry alternatives to a failed plan until one succeeds or until no alternative plans remain (in which case to fail the task).",
                "Future work is to place our approach in service of more dynamic agent reasoning, such as the introspection that an agent capable of reasoning over task interaction effects and resource requirements can accomplish [19, 12].",
                "Related to this is determining the cost of aborting a task or plan, and using this as an input to the deliberation process.",
                "This would in particular influence the commitment the agent has towards a particular task: the higher the cost, the greater the commitment.",
                "Our assumption that abort-methods do not fail, as discussed above, is a pragmatic one.",
                "However, this is an issue worthy of further exploration, either to develop weaker assumptions that are also practical, or to analyze conditions under which our assumption is realistic.",
                "A further item of interest is extending our approach to failure and abort to maintenance goals [1].",
                "For such goals a different operational semantics for abort is necessary than for achievement goals, to match the difference in semantics of the goals themselves.",
                "Acknowledgements We thank Lin Padgham and the anonymous reviewers for their comments.",
                "The first author acknowledges the support of the Australian Research Council and Agent Oriented Software under grant LP0453486.",
                "The work of the two authors at SRI International was supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No.",
                "NBCHD030010.",
                "Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the view of DARPA or the Department of Interior-National Business Center. 7.",
                "REFERENCES [1] L. Braubach, A. Pokahr, D. Moldt, and W. Lamersdorf.",
                "Goal representation for BDI Agent systems.",
                "In Proc. of Second Intl.",
                "Workshop on Programming Multi-Agent Systems (ProMAS04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson, and A. Lucas.",
                "JACK intelligent agents - components for intelligent agents in Java.",
                "AgentLink News, Issue 2, 1999. [3] M. G. Chessell, C. Vines, D. Butler, C. M. Ferreira, and P. Henderson.",
                "Extending the concept of transaction compensation.",
                "IBM Systems Journal, 41(4), 2002. [4] M. Dastani, M. B. van Riemsdijk, and J.-J.",
                "C. Meyer.",
                "Goal types in agent programming.",
                "In Proc. of AAMAS06, 2006. [5] S. Entwisle, S. Loke, S. Krishnaswamy, and E. Kendall.",
                "Aoex: An agent-based exception handling framework for building reliable, distributed, open software systems.",
                "In Proc. of Seventh Joint Conf. on Knowledge-Based Software Engineering, 2006. [6] J. F. H¨ubner, R. H. Bordini, and M. Wooldridge.",
                "Programming declarative goals using plan patterns.",
                "In Proc. of 4th Intl.",
                "Workshop on Declarative Agent Languages and Technologies, 2006. [7] D. Kinny.",
                "The Psi calculus: an algebraic agent language.",
                "In Proc. of ATAL01, 2001. [8] M. Klein, J.",
                "A. Rodr´ıguez-Aguilar, and C. Dellarocas.",
                "Using domain-independent exception handling services to enable robust open multi-agent systems: The case of agent death.",
                "Autonomous Agents and Multi-Agent Systems, 7(1-2):179-189, 2003. [9] D. Morley and K. Myers.",
                "The SPARK agent framework.",
                "In Proc. of AAMAS04, 2004. [10] D. Morley, K. L. Myers, and N. Yorke-Smith.",
                "Continuous refinement of agent resource estimates.",
                "In Proc. of AAMAS06, 2006. [11] K. Myers, P. Berry, J. Blythe, K. Conley, M. Gervasio, D. McGuinness, D. Morley, A. Pfeffer, M. Pollack, and M. Tambe.",
                "An intelligent personal assistant for task and time management.",
                "AI Magazine, 28, 2007.",
                "To appear. [12] K. L. Myers and N. Yorke-Smith.",
                "A cognitive framework for delegation to an assistive user agent.",
                "In Proc. of AAAI 2005 Fall Symposium on Mixed-Initiative Problem-Solving Assistants, 2005. [13] L. Padgham and M. Winikoff.",
                "Developing Intelligent Agent Systems: A Practical Guide.",
                "John Wiley and Sons, 2004. [14] A. Pokahr, L. Braubach, and W. Lamersdorf.",
                "Jadex: A BDI reasoning engine.",
                "In R. Bordini, M. Dastani, J. Dix, and A. E. F. Seghrouchni, editors, Multi-Agent Programming.",
                "Springer, 2005. [15] A. S. Rao.",
                "AgentSpeak(L): BDI agents speak out in a logical computable language.",
                "In Proc. of Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World, 1996. [16] A. S. Rao and M. P. Georgeff.",
                "An abstract architecture for rational agents.",
                "In Proc. of KR92, 1992. [17] S. Sardi˜na, L. de Silva, and L. Padgham.",
                "Hierarchical planning in BDI agent programming languages: a formal approach.",
                "In Proc. of AAMAS06, 2006. [18] S. Sardina and L. Padgham.",
                "Goals in the context of bdi plan failure and planning.",
                "In Proc. of AAMAS07, 2007. [19] J. Thangarajah, L. Padgham, and M. Winikoff.",
                "Detecting and exploiting positive goal interaction in intelligent agents.",
                "In Proc. of AAMAS03, 2003. [20] J. Thangarajah, M. Winikoff, L. Padgham, and K. Fischer.",
                "Avoiding resource conflicts in intelligent agents.",
                "In Proc. of ECAI-02, 2002. [21] A. Unruh, J. Bailey, and K. Ramamohanarao.",
                "A framework for goal-based semantic compensation in agent systems.",
                "In Proc. of First Intl.",
                "Workshop on Safety and Security in Multi-Agent Systems, 2004. [22] A. Unruh, H. Harjadi, J. Bailey, and K. Ramamohanarao.",
                "Semantic-compensation-based recovery management in multi-agent systems.",
                "In Proc. of Second IEEE Symposium on Multi-Agent Security and Survivability (IEEE MAS&S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland, and J. Thangarajah.",
                "Declarative and procedural goals in intelligent agent systems.",
                "In Proc. of KR02, 2002.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 15"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "En este artículo discutimos en detalle la incorporación del \"método de limpieza\" de aborto en el ciclo de ejecución del agente, proporcionando un enfoque unificado para la falla y el aborto.método de limpieza",
                "Elegimos el primero porque: (1) los métodos de aborto a nivel de acción incurrirían en una sobrecarga mayor, (2) los planes están destinados a ser diseñados como unidades cohesivas únicas y son la unidad de deliberación en los sistemas BDI, y (3) los \"Método de limpieza \"S para la falla en los sistemas actuales se adjunta a los planos.método de limpieza"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "abort-method": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Aborting Tasks in BDI Agents John Thangarajah, James Harland RMIT University Melbourne, Australia {johthan,jah}@cs.rmit.edu.au David Morley, Neil Yorke-Smith Artificial Intelligence Center, SRI International Menlo Park, CA 94025 U.S.A. {morley,nysmith}@ai.sri.com ABSTRACT Intelligent agents that are intended to work in dynamic environments must be able to gracefully handle unsuccessful tasks and plans.",
                "In addition, such agents should be able to make rational decisions about an appropriate course of action, which may include aborting a task or plan, either as a result of the agents own deliberations, or potentially at the request of another agent.",
                "In this paper we investigate the incorporation of aborts into a BDI-style architecture.",
                "We discuss some conditions under which aborting a task or plan is appropriate, and how to determine the consequences of such a decision.",
                "We augment each plan with an optional <br>abort-method</br>, analogous to the failure method found in some agent programming languages.",
                "We provide an operational semantics for the execution cycle in the presence of aborts in the abstract agent language CAN, which enables us to specify a BDI-based execution model without limiting our attention to a particular agent system (such as JACK, Jadex, Jason, or SPARK).",
                "A key technical challenge we address is the presence of parallel execution threads and of sub-tasks, which require the agent to ensure that the abort methods for each plan are carried out in an appropriate sequence.",
                "Categories and Subject Descriptors I.2.11 [ARTIFICIAL INTELLIGENCE]: Distributed Artificial Intelligence-Intelligent agents General Terms Design, Reliability, Theory 1.",
                "INTRODUCTION Intelligent agents generally work in complex, dynamic environments, such as air traffic control or robot navigation, in which the success of any particular action or plan cannot be guaranteed [13].",
                "Accordingly, dealing with failure is fundamental to agent programming, and is an important element of agent characteristics such as robustness, flexibility, and persistence [21].",
                "In agent architectures inspired by the Belief-Desire-Intention (BDI) model [16], these properties are often characterized by the interactions between beliefs, goals, and plans [2].1 In general, an agent that wishes to achieve a particular set of tasks will pursue a number of plans concurrently.",
                "When failures occur, the choice of plans will be reviewed.",
                "This may involve seeking alternative plans for a particular task, re-scheduling tasks to better comply with resource constraints, dropping some tasks, or some other decision that will increase the likelihood of success [12, 14].",
                "Failures can occur for a number of reasons, and it is often not possible to predict these in advance, either because of the complexity of the system or because changes in the environment invalidate some earlier decisions.",
                "Given this need for deliberation about failed tasks or plans, failure deliberation is commonly built into the agents execution cycle.",
                "Besides dealing with failure, an important capability of an intelligent agent is to be able to abort a particular task or plan.",
                "This decision may be due to an internal deliberation (such as the agent believing the task can no longer be achieved, or that some conflicting task now has a higher priority) or due to an external factor (such as another agent altering a commitment, or a change in the environment).",
                "Aborting a task or plan is distinct from its failure.",
                "Failure reflects an inability to perform and does not negate the need to perform - for example, a reasonable response to failure may be to try again.",
                "In contrast, aborting says nothing about the ability to perform; it merely eliminates the need.",
                "Failure propagates from the bottom up, whereas aborting propagates from the top down.",
                "The potential for concurrently executing sub-plans introduces different complexities for aborting and failure.",
                "For aborting, it means that multiple concurrent sub-plans may need to be aborted as the abort is propagated down.",
                "For failure, it means that parallel-sibling plans may need to be aborted as the failure is propagated up.",
                "There has been a considerable amount of work on plan failures (such as detecting and resolving resource conflicts [20, 10]) and most agent systems incorporate some notion of failure handling.",
                "However, there has been relatively little work on the development of abort techniques beyond simple dropping of currently intended plans and tasks, which does not deal with the clean-up required.",
                "As one consequence, most agent systems are quite limited in their treatment of the situation where one branch of a parallel construct 1 One can consider both tasks to be performed and goals to achieve a certain state of the world.",
                "A task can be considered a goal of achieving the state of the task having been performed, and a goal can be considered a task of bringing about that state of the world.",
                "We adopt the latter view and use task to also refer to goals. 8 978-81-904262-7-5 (RPS) c 2007 IFAAMAS fails (common approaches include either letting the other branch run to completion unhindered or dropping it completely).",
                "In this paper we discuss in detail the incorporation of abort cleanup methods into the agent execution cycle, providing a unified approach to failure and abort.",
                "A key feature of our procedure-based approach is that we allow each plan to execute some particular code on a failure and on an abort.",
                "This allows a plan to attempt to ensure a stable, known state, and possibly to recover some resources and otherwise clean up before exiting.",
                "Accordingly, a central technical challenge is to manage the orderly execution of the appropriate clean-up code.",
                "We show how aborts can be smoothly introduced into a BDI-style architecture, and for the first time we give an operational semantics for aborting in the abstract agent language CAN [23, 17].",
                "This allows us to specify an appropriate level of detail for the execution model, without focusing on the specific constructs of any one agent system such as JACK [2], Jadex [14], Jason [6], or SPARK [9].",
                "Our focus is on a single agent, complementary to related work that considers exception handling for single- and multiagent systems (e.g., [22, 5, 6]).",
                "This paper is organized as follows.",
                "In Section 2 we give an example of the consequences of aborting a task, and in Section 3 we discuss some circumstances under which aborts should occur, and the appropriate representation and invocation procedures.",
                "In Section 4 we show how we can use CAN to formally specify the behaviour of an aborted plan.",
                "Section 5 discusses related work, and in Section 6 we present our conclusions and future work. 2.",
                "MOTIVATING EXAMPLE Alice is a knowledge worker assisted by a learning, personal assistive agent such as CALO [11].",
                "Alice plans to attend the IJCAI conference later in the year, and her CALO agent adopts the task of Support Meeting Submission (SMS) to assist her.",
                "CALOs plan for an SMS task in the case of a conference submission consists of the following sub-tasks: 1.",
                "Allocate a Paper Number (APN) to be used for administrative purposes in the company. 2.",
                "Track Writing Abstract (TWA): keep track of Alices progress in preparing an abstract. 3.",
                "Apply For Clearance (AFC) for publication from Alices manager based on the abstract and conference details. 4.",
                "Track Writing Paper (TWP): keep track of Alices progress in writing the paper. 5.",
                "Handle Paper Submission (HPS): follow company internal procedures for submitting a paper to a conference.",
                "These steps must be performed in order, with the exception of steps 3 (AFC) and 4 (TWP), which may be performed in parallel.",
                "Similarly, CALO can perform the task Apply For Clearance (AFC) by a plan consisting of: 1.",
                "Send Clearance Request (SCR) to Alices manager. 2.",
                "Wait For Response (WFR) from the manager. 3.",
                "Confirm that the response was positive, and fail otherwise.",
                "Now suppose that a change in circumstances causes Alice to reconsider her travel plans while she is writing the paper.",
                "Alice will no longer be able to attend IJCAI.",
                "She therefore instructs her CALO agent to abort the SMS task.",
                "Aborting the task implies aborting both the SMS plan and the AFC subplan.",
                "Aborting the first plan requires CALO to notify the paper number registry that the allocated paper number is obsolete, which it can achieve by the Cancel Paper Number (CPN) task.2 Aborting the second plan requires CALO to notify Alices manager that Alice no longer requires clearance for publication, which CALO can achieve by invoking the Cancel Clearance Request (CCR) task.",
                "We note a number of important observations from the example.",
                "First, the decision to abort a particular course of action can come from the internal deliberations of the agent (such as reasoning about priorities in a conflict over resources), or from external sources (such as another agent cancelling a commitment), as in this example.",
                "In this paper we only touch on the problem of determining whether a task or plan should be aborted, instead concentrating on determining the appropriate actions once this decision is made.",
                "Hence, our objective is to determine how to incorporate aborting mechanisms into the standard execution cycle rather than determine what should be aborted and when.",
                "Second, once the decision is made to abort the attempt to submit a paper, there are some actions the agent should take, such as cancelling the clearance request.",
                "In other words, aborting a task is not simply a matter of dropping the task and associated active plans: there are some clean up actions that may need to be done.",
                "This is similar to the case for failure, in that there may also be actions to take when a task or plan fails.",
                "In both cases, note that it is not simply a matter of the agent undo-ing its actions to date; indeed, this may be neither possible (since the agent acts in a situated world and its actions change world state) nor desirable (depending on the semantics of the task).",
                "Rather, cleaning up involves compensation via forward recovery actions [3].",
                "Third, there is a distinction between aborting a task and aborting a plan.",
                "In the former case, it is clear that all plans being executed to perform the task should be aborted; in the latter case, it may be that there are better alternatives to the current plan and one of these should be attempted.",
                "Hence, plan aborting or failure does not necessarily lead to task aborting or failure.",
                "Fourth, given that tasks may contain sub-tasks, which may contain further sub-tasks, it is necessary for a parent task to wait until its children have finished their abort methods.",
                "This is the source of one of the technical challenges that we address: determining the precise sequence of actions once a parent task or plan is aborted. 3.",
                "ABORTING TASKS AND PLANS As we have alluded to, failure and aborting are related concepts.",
                "They both cause the execution of existing plans to cease and, consequentially, the agent to reflect over its current tasks and intentions.",
                "Failure and aborting, however, differ in the way they arise.",
                "In the case of failure, the trigger to cease execution of a task or plan comes from below, that is, the failure of sub-tasks or lower-level plans.",
                "In the case of aborting, the trigger comes from above, that is, the tasks and the parent plans that initiated a plan.",
                "In BDI-style systems such as JACK and SPARK, an agents domain knowledge includes a pre-defined plan library of plan clauses.",
                "Each plan clause has a plan body, which is a program (i.e., combination of primitive actions, sub-tasks, etc.) that can be executed in response to a task or other event should the plan clauses context condition be satisfied.",
                "The agent selects and executes instances of plan clauses to perform its tasks.",
                "There can be more than one applicable plan clause and, in the event that one fails, another applicable one may be attempted.",
                "Plans may have sub-tasks that must succeed 2 CALO needs only drop the TWA and TWP tasks to abort them: for the sake of simplicity we suppose no explicit clean up of its internal state is necessary.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 9 for the plan to succeed.",
                "In such systems, a plan failure occurs if one of the actions or sub-tasks within the plan fails.",
                "The agents action upon plan failure depends on its nature: for example, the agent may declare the task to have failed if one plan has been tried and resulted in failure, or it may retry alternate plans and declare (indeed, must declare) task failure only if all possible alternate plans to perform the task have been tried and resulted in failure.",
                "Observe that, while task failure can follow from plan failure or a sequence of plan failures, plan failure need not lead to task failure provided the agent can successfully complete an alternate plan.",
                "Moreover, task failure can also arise separately from plan failure, if the agent decides to abort the task.",
                "Our approach associates an <br>abort-method</br> with each plan.",
                "This enables the programmer to specify dedicated compensation actions according to how the agent is attempting to perform the task.",
                "Note that our abort-methods can be arbitrary programs and so can invoke tasks that may be performed dynamically in the usual BDI fashion, i.e., the clean-up is not limited to executing a predetermined set of actions.",
                "The question remains which <br>abort-method</br> should be invoked, and in what manner.",
                "Given the complexity of agent action spaces, it is not possible nor desirable to enumerate a static set of rules.",
                "Rather, the agent will invoke its abort-methods dynamically according to the state of execution and its own internal events.",
                "An alternative to attaching an <br>abort-method</br> to each plan is to attach such methods to each atomic action.",
                "We choose the former because: (1) action-level abort-methods would incur a greater overhead, (2) plans are meant to be designed as single cohesive units and are the unit of deliberation in BDI systems, and (3) the cleanup methods for failure in current systems are attached to plans.",
                "In order to understand how the agents abort processing should function, we consider three situations where it is sensible for an agent to consider aborting some of its tasks and plans: 1.",
                "When a task succeeds or fails because of an external factor other than the agent itself, the plan currently executed to perform the task should be aborted.",
                "For example, suppose company policy changes so that employees of Alices seniority automatically have clearance for publishing papers.",
                "Since Alice now has clearance for publishing her paper, CALO can abort the plan for Apply For Clearance.",
                "In doing so it must invoke the <br>abort-method</br>, in this case thus performing Cancel Clearance Request.3 2.",
                "When two or more sub-programs are executed in parallel, if one fails then the others should be aborted, given that the failure of one branch leads to the failure of the overall task.",
                "For example, suppose that part-way through writing the paper, Alice realizes that there is a fatal flaw in her results, and so notifies CALO that she will not be able to complete the paper by the deadline.",
                "The failure of the Track Writing Paper task should cause the Apply For Clearance task being executed in parallel to be aborted. 3.",
                "When an execution event alters the importance of an existing task or intention, the agent should deliberate over whether the existing plan(s) should continue.",
                "For example, suppose that Alice tasks CALO with a new, high-priority task to purchase a replacement laptop, but that Alice lacks enough funds to both purchase the laptop and to attend IJCAI.",
                "Reasoning over resource requirements [20, 10] will cause the agent to realize 3 If there is any difference between how to abort a task that is externally performed versus how to abort one that is now known to be impossible, the <br>abort-method</br> can detect the circumstances and handle the situation as appropriate. that it cannot successfully complete both tasks.",
                "Given that the new task has greater importance, a rational agent will evaluate its best course of action and may decide to abortor at least suspend - the existing task of submitting a paper and intentions derived from it [12].",
                "The operational semantics we provide in Section 4 for aborting tasks and plans captures the first two situations above.",
                "The third situation involves deliberating over the importance of a task, which depends on various factors such as task priority.",
                "Although this deliberation is beyond the scope of this paper, it is a complementary topic of our future work.",
                "Note that the above situations apply to achievement goals, for which the task is completed when a particular state of the world is brought about (e.g., ensure we have clearance).",
                "Different forms of reasoning apply to other goal types [4] such as maintenance goals [1], where the goal is satisfied by maintaining a state of the world for some period of time (e.g., maintain $100 in cash).",
                "Abort Method Representation The intent of aborting a task or plan is that the task or plan and all its children cease to execute, and that appropriate clean-up methods are performed as required.",
                "In contrast to offline planning systems, BDI agents are situated: they perform online deliberation and their actions change the state of the world.",
                "As a result, the effects of many actions cannot be simply undone.",
                "Moreover, the undo process may cause adverse effects.",
                "Therefore, the clean-up methods that we specify are forward recovery procedures that attempt to ensure a stable state and that also may, if possible, recover resources.",
                "The common plan representation in BDI-style systems such as JACK and SPARK includes a failure-method, which is the designated clean-up method invoked when the plan fails.",
                "To this, we add the <br>abort-method</br>, which is invoked if the plan is to be aborted.",
                "In our example, the <br>abort-method</br> for the plan for Support Meeting Submission consists of invoking the sub-task Cancel Paper Number.",
                "The <br>abort-method</br> need not explicitly abort Apply For Clearance, because the agent will invoke the <br>abort-method</br> for the subtask appropriately, as we outline below.",
                "The assumption here is that, like the failure-method, the programmer of the agent system has the opportunity to specify a sensible <br>abort-method</br> that takes into consideration the point in the plan at which the abort is to be executed.",
                "For any plan, the <br>abort-method</br> is optional: if no <br>abort-method</br> is specified, the agent takes no specific action for this plan.",
                "However, the agents default behavioural rules still apply, for example, whether to retry an alternate plan for the parent task.",
                "Note that an explicit representation of the clean-up methods for tasks is not required, since tasks are performed by executing some plan or plans.",
                "Hence, aborting a task means aborting the current plan that is executed to perform that task, as we next describe.",
                "Abort Method Invocation We now informally lay out the agents action upon aborting plans and tasks.",
                "When a plan P is aborted: 1.",
                "Abort each sub-task that is an active child of P. An active child is one that was triggered by P and is currently in execution. 2.",
                "When there are no more active children, invoke the abort method of plan P. 3.",
                "Indicate a plan failure to TP , the parent task of P. We note here that if the parent task TP is not to be aborted then the agent may choose another applicable plan to satisfy TP . 10 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) When a task (or sub-task) T is aborted: 1.",
                "Abort the current active plan to satisfy T (if any). 2.",
                "When there are no more active child processes, drop the task.",
                "The agent thus no longer pursues T. 3.",
                "Note here that when the current active plan for performing T is aborted, no other applicable plans to perform T should be tried as it is the task that is to be aborted.",
                "In order to prevent infinitely cascading clean-up efforts, we assume that abort-methods will never be aborted nor fail.",
                "In reality, however, an <br>abort-method</br> may fail.",
                "In this case, lacking a more sophisticated handling mechanism, the agent simply stops executing the failed <br>abort-method</br> with no further deliberation.",
                "The assumption we make is thus not a reflection of the full complexity of reality, but one that is pragmatic in terms of the agent execution cycle; the approach to failure-handling of [21] makes the same assumption.",
                "In systems such as SPARK, the programmer can specify an alternative behaviour for a failed failure- or <br>abort-method</br> by means of meta-level procedures.",
                "We also assume that failure- and abort-methods terminate in finite time. 4.",
                "OPERATIONAL SEMANTICS We provide the semantics for the task and plan failure and aborting processes outlined above.",
                "We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the goal adoption and dropping mechanisms.",
                "The extensions also simplified the semantics in the earlier work.",
                "We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1.",
                "Following a presentation of the operational semantics of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present. 4.1 CAN Language CAN is a high-level agent language, in a spirit similar to that of AgentSpeak [15] and Kinnys Ψ [7], both of which attempt to extract the essence of a class of implemented BDI agent systems.",
                "CAN provides an explicit goal construct that captures both the declarative and procedural aspects of a goal.",
                "Goals are persistent in CAN in that, when a plan fails, another applicable plan is attempted.",
                "This equates to the default failure handling mechanism typically found in implemented BDI systems such as JACK [2].",
                "In practical systems, tasks are typically translated into events that trigger the execution of some plans.",
                "This is also true in the CAN language, but, in order to maintain the persistence of goals, a goal construct is introduced.",
                "This is denoted by Goal ` φs, P, φf ´ , where φs is the success condition that determines when the goal is considered achieved, φf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once φs or φf become true.",
                "An agents behavior is specified by a plan library, denoted by Π, that consists of a collection of plan clauses of the form e : c ← P, where e is an event, c is a context condition (a logical formula over the agents beliefs that must be true in order for the plan to be applicable)4 and P is the plan body.",
                "The plan body is a program that is defined recursively as follows: P ::= act | +b | −b | ?φ | !e | P1; P2 | P1 P2 | Goal ` φs, P1, φf ´ | P1 P2 | {ψ1 : P1, . . . , ψn : Pn} | nil 4 An omitted c is equivalent to true.",
                "Δ = {ψiθ : Piθ | e : ψi ← Pi ∈ Π ∧ θ = mgu(e, e )} B, !e −→ B, Δ Event ψi : Pi ∈ Δ B |= ψi B, Δ −→ B, Pi Δ \\ {ψi : Pi} Select B, P1 −→ B, (P1 P2) −→ B, P2 fail B, P1 −→ B , P1 B, (P1; P2) −→ B , (P ; P2) Sequence B, P1 −→ B , P B, (P1 P2) −→ B , (P P2) Parallel1 B, P2 −→ B , P B, (P1 P2) −→ B , (P P1) Parallel2 Figure 1: Operational rules of CAN. where P1, . . . , Pn are themselves programs, act is a primitive action that is not further specified, and +b and −b are operations to add and delete beliefs.",
                "The belief base contains ground belief atoms in the form of first-order relations but could be orthogonally extended to other logics.",
                "It is assumed that well-defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ∪ {b}), and to delete a belief from a belief set (B \\ {b}). ?φ is a test for condition φ, and !e5 is an event6 that is posted from within the program.",
                "The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (Goal ` φs, P, φf ´ ).",
                "The above defines the user language.",
                "In addition, a set of auxiliary compound forms are used internally when assigning semantics to constructs. nil is the basic (terminating) program.",
                "When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 : P1, . . . , cn : Pn ).",
                "The other auxiliary compound form, , is a choice operator dual to sequencing: P1 P2 executes P1 and then executes P2 only if P1 failed.",
                "A summary of the operational semantics for CAN in line with [23] and following some of the simplifications of [17] is as follows.",
                "A basic configuration S = B, G, Γ consists of the current belief base B of the agent, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention).",
                "A transition S0 −→ S1 specifies that executing S0 for a single step yields configuration S1.",
                "S0 −→∗ Sn is the usual reflexive transitive closure of −→: Sn is the result of one or more singlestep transitions.",
                "A derivation rule S −→ Sr S −→ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator).",
                "Figure 1 gives some of the operational rules.",
                "The Event rule handles task events by collecting all relevant plan clauses for the event in question: for each plan clause e : ψi ← Pi, if there is a most general unifier, θ = mgu(e, e ) of e and the event in 5 Where it is obvious that e is an event we will sometimes exclude the exclamation mark for readability. 6 Typically an achievement goal.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 11 B |= φs B, Goal ` φs, P, φf ´ −→ B, true Gs B |= φf B, Goal ` φs, P, φf ´ −→ B, fail Gf P = Goal ` φs, P , φf ´ P = P1 £ P2 B |= φs ∨ φf B, P −→ B, Goal ` φs, P £ P , φf ´ GI P = P1 £ P2 B |= φs ∨ φf B, P1 −→ B , P B, Goal ` φs, P, φf ´ −→ B , Goal ` φs, P £ P2, φf ´ GS P = P1 £ P2 B |= φs ∨ φf P1 ∈ {true, fail} B, Goal ` φs, P, φf ´ −→ B, Goal ` φs, P2 £ P2, φf ´ GR Figure 2: Rules for goals in CAN. question, then the rule constructs a guarded alternative ψiθ : Piθ.",
                "The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives: program P Δ states that program P should be tried first, falling back to the remaining alternatives, Δ \\ P, if necessary.",
                "This rule and the fail rule together are used for failure handling: if the current program Pi from a plan clause for a task fails, rule fail is applied first, and then if possible, rule Select will choose another applicable alternative for the task if one exists.",
                "Rule Sequence handles sequencing of programs in the usual way.",
                "Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel.",
                "Figure 2 gives simplified rules for dealing with goals, in line with those presented in [17].",
                "The first rule states that a goal succeeds when φs become true; the second rule states that a goal fails when φf become true.",
                "The third rule GI initializes the execution of a goal-program by updating the goal base and setting the program in the goal to P £ P; the first P is to be executed and the second P is used to keep track of the original program for the goal.",
                "The fourth rule GS executes a single step of the goal-program.",
                "The final rule GR restarts the original program (encoded as P2 of pair P1 £ P2) whenever the current program is finished but the desired and still possible goal has not yet been achieved. 4.2 Aborting Intentions and Handling Failure We next introduce the ability to specify handler programs, in the form of failure- and abort-methods, that deal with the clean-up required when a given program respectively fails or is aborted.",
                "We do not associate failure- and abort- methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies failure- and abort- methods for an arbitrary program.",
                "The FAb(P, PF , PA) construct executes the program P. Should P fail, it executes the failure handling program PF ; should P need to be aborted, it executes the abort handling program PA.",
                "Thus to add failure- and abort- methods PF and PA to a plan clause e : c ← P, we write e : c ← FAb(P, PF , PA).",
                "With the introduction of the ability to abort programs, we modify the parallel construct to allow the failure of one branch to abort the other.",
                "We must take into consideration the possible existence of abort-methods in the aborted branch.",
                "Similarly, with the Goal construct we can no longer completely abandon the program the goal contains as soon as the success or failure condition holds; we must now take into consideration the existence of any abort-methods applicable to the program.",
                "We provide the semantics of an augmented agent language containing the FAb construct by defining a source transformation, similar to macro-expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN.",
                "The one non-standard extension to CAN is a wait-until-condition construct.",
                "We explain this simple modification of the parallel construct below when we come to translation of the Goal construct.",
                "First we describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases: the FAb, parallel, and Goal constructs.",
                "A key issue is that the FAb constructs may be nested, either directly or indirectly.",
                "Let us call each instantiation of the construct at execution time a possible abort point (pap).",
                "Where these constructs are nested, it is important that before the failure- or <br>abort-method</br> of a parent pap is executed, the failure- or abort-methods programs of the children paps are executed first, as described earlier in Section 3.",
                "The need to coordinate the execution of the abort-methods of nested paps requires that there be some way to identify the parents and children of a particular pap.",
                "We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e : c ← P with a plan clause e(v) : c ← μv(P) where v is a free variable, not previously present in the plan clause.",
                "This variable is used to keep track of the context of execution.",
                "The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context.",
                "For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1].",
                "We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51.",
                "This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v .",
                "For most CAN constructs, the context variable is unused or passed unchanged: μv(act) = act μv(+b) = +b μv(−b) = −b μv(nil) = nil μv(!e) = !e(v) μv(P1; P2) = μv(P1); μv(P2) μv(P1 P2) = μv(P1) μv(P2) μv( ψ1 : P1, . . . , ψn : Pn ) = ψ1 : μv(P1), . . . , ψn : μv(Pn) It remains to specify the transformation μv(·) in three cases: the FAb, parallel, and Goal constructs.",
                "These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context.",
                "Let us introduce the primitive action prependID(v, v ) that creates a new pap identifier and prepends it to list v giving list v .",
                "We also introduce the following predicates: • a(v) - the pap v is currently active. • abort(v) - the pap v should be aborted (after aborting all of its descendants). 7 An alternative would be to use meta-level predicates that reflect the current state of the intention structure. 12 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) • f(v) - the program of pap v has failed. • ancestorof(v, v ) ≡ v = v ∨ ancestorof(v, tail(v ))the pap v is an ancestor of pap v . • nac(v) ≡ ¬∃v . (a(v ) ∧ ancestorof(v, v ) ∧ v = v ) - v has no active children. • sa(v) ≡ ∃v .abort(v ) ∧ ancestorof(v , v) - we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active. • san(v) ≡ sa(v) ∧ nac(v) - we should abort v now if we should abort v and v has no active children.",
                "First let us consider the case of the FAb construct.",
                "The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v. We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context.",
                "We need to make sure that we retract the belief that v is active at the end, i.e., −a(v ).",
                "We use the Goal construct to allow us to drop the execution of a program within a pap v when it is necessary to abort.",
                "While executing the program P, we know that we need to drop P and invoke its <br>abort-method</br> if some ancestor of P has been told to abort.",
                "This is represented by the predicate sa(v ) being true.",
                "However, we need to make sure that we do this only after every child pap has had the chance to invoke its <br>abort-method</br> and all these abort-methods have completed: if we drop the program too soon, then execution of the abort-methods of the children will also be dropped.",
                "Therefore, the condition we actually use in the Goal construct to test when to drop the program is san(v ).",
                "This condition relies on the fact that as the children paps complete, they remove the relevant a facts.",
                "Our use of the Goal construct is for its ability to drop the execution of a program when conditions are met.",
                "To leave aside the repeat execution until a condition is met aspect, we must ensure that the success or failure condition of the construct is satisfied once the execution of the program succeeds or fails.",
                "We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on failure, and by having the appropriate success and failure conditions on the Goal.",
                "Hence, if the Goal construct fails, then the program either was aborted or it failed.",
                "We invoke the relevant failure- or abort- method, retract the a(v ) fact, and then fail.",
                "Putting all this together, we formally define μv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agents plan library: prependID(v, v ); +a(v ); Goal ( ¬a(v ), (μv (P); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); μv(PA)) μv(PF )); −a(v ); ?false) Second, we must transform the parallel operator to ensure that the failure of one branch safely aborts the other.",
                "Here we construct two new contexts, v and v , from the existing context v. If one branch fails, it must abort the other branch.",
                "At the end, if either branch was aborted, then we must fail.",
                "Let v and v be new variables distinct from any other in the agents plan library.",
                "We define μv(P1 P2) to be: prependID(v, v ); prependID(v, v ); +a(v ); +a(v ); ( Goal (¬a(v ), (μv (P1); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal (¬a(v ), (μv (P2); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ); ?¬abort(v ) ∧ ¬abort(v ) Finally, we need to modify occurrences of the Goal construct in two ways: first, to make sure that the abort handling methods are not bypassed when the success or failure conditions are satisfied, and second, to trigger the aborting of the contained program when either the success or failure conditions are satisfied.",
                "To transform the Goal construct we need to extend standard CAN with a wait-until-condition construct.",
                "The construct φ : P does not execute P until φ becomes true.",
                "We augment the CAN language with the following rules for the guard operator :: B |= φ B, G, (φ : P −→ B, G, P :true B |= φ B, G, (φ : P) −→ B, G, (φ : P) :false In order to specify μv(Goal ` φs, P, φf ´ ), we generate a new pap and execute the program within the Goal construct in this new context.",
                "We must ensure that belief a(v ) is removed whether the Goal succeeds or fails.",
                "We shift the success and failure condition of the Goal construct into a parallel branch using the wait-until-condition construct, and modify the Goal to use the should abort now condition san(v ) as the success condition.",
                "The waiting branch will trigger the abort of the program should either the success or failure condition be met.",
                "To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active.",
                "Let v be a new variable distinct from any other in the agents plan library.",
                "We define μv(Goal ` φs, P, φf ´ ) to be: prependID(v, v ); +a(v ); ( Goal ( san(v ), μv (P), false) ; −a(v ); ?φs ) φs ∨ φf ∨ ¬a(v ) : +abort(v ) ) The program P will be repeatedly executed until san(v ) becomes true.",
                "There are two ways this can occur.",
                "First, if either the success condition φs or the failure condition φf becomes true, then the second branch of the parallel construct executes.",
                "This causes abort(v ) to become true, and, after the descendant paps abortmethods are executed, san(v ) becomes true.",
                "In this case, P is now dropped, the a(v ) is removed, and the entire construct succeeds or fails based on φs.",
                "The second way for san(v ) to become true is if v or one of its ancestors is aborted.",
                "In this case, once the descendant paps abort-methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming φs is false). 4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2.",
                "We will express tasks by events, for example, the task Allocate a Paper Number we express as the event APN.",
                "Let the output of the Apply For Clearance task be Y or N, indicating the approval or not of Alices manager, respectively.",
                "Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively: SMS(m) : isconf(m) ← FAb(!APN; !TWA; (!AFC !TWP); !HPS, !CPN, !CPN) AFC : true ← FAb(!SCR; !WFR(r); ?r = Y, nil, !CCR) Note that Support Meeting Submission has a parameter m, the meeting of interest (IJCAI, in our example), while Apply For Clearance has no parameters.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two.",
                "Let v and v denote new variables.",
                "Then we have as the translated plan clause: AFC(v ) : true ← prependID(v , v ); +a(v ); Goal ( ¬a(v ), (!SCR(v ); !WFR(r, v ); ?r = Y; −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CCR(v )) nil); −a(v ); ?false) We can see that an extra context parameter has been added to each task and that the old plan body now appears inside a Goal construct.",
                "Should the old plan body succeed, belief a(v ) is retracted, causing the Goal to succeed.",
                "If the old plan body fails, or if the task is to be aborted, the Goal construct fails.",
                "This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and failure.",
                "The translation of the first plan clause, for SMS, is more complex, because of the parallel construct that introduces nested paps: SMS(m, v) : isconf(m) ← prependID(v, v ); +a(v ); Goal ( ¬a(v ), ((!APN(v ); !TWA(v ); prependID(v , v ); prependID(v , v ); +a(v ); +a(v ); ( Goal ( ¬a(v ), (!AFC(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal ( ¬a(v ), (!TWP(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ) ; ?¬abort(v ) ∧ ¬abort(v ); !HPS(v ); −a(v )) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CPN(v)) !CPN(v)); −a(v ); ?false) Here we can see that if the task !TWP(v ) fails then f(v ) will be asserted, failing the Goal construct that contains it, and leading to abort(v ) being asserted.",
                "If the !WFR(r, v ) task in the expansion of !AFC(v ) is still executing and has no active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true.",
                "This set of conditions will cause the Goal construct in the first plan clause to fail, dropping execution of !WFR(r, v ).",
                "The task !CCR(v ) will be executed.",
                "Once this task completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first Goal construct of the second plan clause to fail.",
                "While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely automated, according to the rules set out in Section 4.2.",
                "The translated plan clauses, with the semantics of CAN augmented by our waituntil-condition construct, thus specify the operation of the agent to handle both failure and aborting for the example. 5.",
                "RELATED WORK Plan failure is handled in the extended version of AgentSpeak found in the Jason system [6].",
                "Failure clean-up plans are triggered from goal deletion events −!g.",
                "Such plans, similar to our failure methods, are designed for the agent to effect state changes (act to undo its earlier actions) prior to possibly attempting another plan to achieve the failed goal g. Given Jasons constructs for dropping a goal with an indication of whether or not to try an alternate plan for it, H¨ubner et al. [6] provide an informal description of how a Jason agent modifies its intention structure when a goal failure event occurs.",
                "In a goal deletion plan, the programmer can specify any undo actions and whether to attempt the goal again.",
                "If no goal deletion plan is provided, Jasons default behaviour is to not reattempt the goal.",
                "Failure handling is applied only to plans triggered by addition of an achievement or test goal; in particular, goal deletion events are not posted for failure of a goal deletion plan.",
                "Further, the informal semantics of [6] do not consider parallel sub-goals (i.e., the CAN construct), since such execution is not part of Jasons language.",
                "The implementation of H¨ubner et al. [6] requires Jasons internal actions.",
                "A requirement for implementing our approach is a reflective capability in the BDI agent implementation.",
                "Suitable implementations of the BDI formalism are JACK [2], Jadex [14], and SPARK [9].",
                "All three allow meta level methods that are cued by meta events such as goal adoption or plan failure, and offer introspective capabilities over goal and intention states.",
                "Such meta level facilities are also required by the approach of Unruh et al. [21], who define goal-based semantic compensation for an agent.",
                "Failure-handling goals are invoked according to failurehandling strategy rules, by a dedicated agent Failure Handling Component (FHC) that tracks task execution.",
                "These goals are specified by the agent programmer and attached to tasks, much like our FAb(P, PF , PA) construct associates failure and abort methods with a plan P. Note, however, that in contrast to both [6] and our semantics, [21] attach the failure-handling knowledge at the goal, not plan, level.",
                "Their failure-handling goals may consist of stabilization goals that perform localized, immediate clean-up to restore the agents state to a known, stable state, and compensation goals that perform undo actions.",
                "Compensation goals are triggered on aborting a goal, and so not necessarily on goal failure (i.e., if the FHC directs the agent to retry the failed goal and the retry is successful).",
                "The FHC approach is defined at the goal level in order to facilitate abstract specification of failure-handling knowledge; the FHC decides when to address a failure and what to do (i.e., what failurehandling goals to invoke), separating this knowledge from the how of implementing corrective actions (i.e., what plan to execute to meet the adopted failure-handling goal).",
                "This contrasts with simplistic plan-level failure handling in which the what and how are intermingled in domain task knowledge.",
                "While our approach is defined at the plan level, our extended BDI semantics provides for the separation of execution and failure handling.",
                "Further, the FHC explicitly maintains data structures to track agent execution.",
                "We leverage the existing execution structures and self-reflective ability of a BDI agent to accomplish both aborting and failure handling without additional overhead.",
                "FHCs failure-handling strategy rules (e.g., whether to retry a failed goal) are replaced by instructions in our PF and PA plans, together with meta-level default failure handlers according to the agents nature (e.g., blindly committed).",
                "The FHC approach is independent of the architecture of the agent itself, in contrast to our work that is dedicated to the BDI formalism (although not tied to any one agent system).",
                "Thus no formal semantics are developed in [21]; the FHCs operation is given as 14 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) a state-based protocol.",
                "This approach, together with state checkpointing, is used for multi-agent systems in [22].",
                "The resulting architecture embeds their failure handling approach within a pair processing architecture for agent crash recovery.",
                "Other work on multi-agent exception handling includes AOEXs distributed exception handling agents [5], and the similar sentinels of [8].",
                "In both cases, failure-handling logic and knowledge are decoupled from the agents; by contrast, while separating exception handling from domain-specific knowledge, Unruh et al.s FHC and our approach both retain failure-handling logic within an agent. 6.",
                "CONCLUSION AND FUTURE WORK The tasks and plans of an agent may not successfully reach completion, either by the choice of the agent to abort them (perhaps at the request of another agent to do so), or by unbidden factors that lead to failure.",
                "In this paper we have presented a procedure-based approach that incorporates aborting tasks and plans into the deliberation cycle of a BDI-style agent, thus providing a unified approach to failure and abort.",
                "Our primary contribution is an analysis of the requirements on the operation of the agent for aborting tasks and plans, and a corresponding operational semantics for aborting in the abstract agent language CAN.",
                "We are planning to implement an instance of our approach in the SPARK agent system [9]; in particular, the work of this paper will be the basis for SPARKs abort handling mechanism.",
                "We are also developing an analysis tool for our extended version of CAN as a basis for experimentation.",
                "An intelligent agent will not only gracefully handle unsuccessful tasks and plans, but also will deliberate over its cognitive attitudes to decide its next course of action.",
                "We have assumed the default behaviour of a BDI-style agent, according to its nature: for instance, to retry alternatives to a failed plan until one succeeds or until no alternative plans remain (in which case to fail the task).",
                "Future work is to place our approach in service of more dynamic agent reasoning, such as the introspection that an agent capable of reasoning over task interaction effects and resource requirements can accomplish [19, 12].",
                "Related to this is determining the cost of aborting a task or plan, and using this as an input to the deliberation process.",
                "This would in particular influence the commitment the agent has towards a particular task: the higher the cost, the greater the commitment.",
                "Our assumption that abort-methods do not fail, as discussed above, is a pragmatic one.",
                "However, this is an issue worthy of further exploration, either to develop weaker assumptions that are also practical, or to analyze conditions under which our assumption is realistic.",
                "A further item of interest is extending our approach to failure and abort to maintenance goals [1].",
                "For such goals a different operational semantics for abort is necessary than for achievement goals, to match the difference in semantics of the goals themselves.",
                "Acknowledgements We thank Lin Padgham and the anonymous reviewers for their comments.",
                "The first author acknowledges the support of the Australian Research Council and Agent Oriented Software under grant LP0453486.",
                "The work of the two authors at SRI International was supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No.",
                "NBCHD030010.",
                "Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the view of DARPA or the Department of Interior-National Business Center. 7.",
                "REFERENCES [1] L. Braubach, A. Pokahr, D. Moldt, and W. Lamersdorf.",
                "Goal representation for BDI Agent systems.",
                "In Proc. of Second Intl.",
                "Workshop on Programming Multi-Agent Systems (ProMAS04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson, and A. Lucas.",
                "JACK intelligent agents - components for intelligent agents in Java.",
                "AgentLink News, Issue 2, 1999. [3] M. G. Chessell, C. Vines, D. Butler, C. M. Ferreira, and P. Henderson.",
                "Extending the concept of transaction compensation.",
                "IBM Systems Journal, 41(4), 2002. [4] M. Dastani, M. B. van Riemsdijk, and J.-J.",
                "C. Meyer.",
                "Goal types in agent programming.",
                "In Proc. of AAMAS06, 2006. [5] S. Entwisle, S. Loke, S. Krishnaswamy, and E. Kendall.",
                "Aoex: An agent-based exception handling framework for building reliable, distributed, open software systems.",
                "In Proc. of Seventh Joint Conf. on Knowledge-Based Software Engineering, 2006. [6] J. F. H¨ubner, R. H. Bordini, and M. Wooldridge.",
                "Programming declarative goals using plan patterns.",
                "In Proc. of 4th Intl.",
                "Workshop on Declarative Agent Languages and Technologies, 2006. [7] D. Kinny.",
                "The Psi calculus: an algebraic agent language.",
                "In Proc. of ATAL01, 2001. [8] M. Klein, J.",
                "A. Rodr´ıguez-Aguilar, and C. Dellarocas.",
                "Using domain-independent exception handling services to enable robust open multi-agent systems: The case of agent death.",
                "Autonomous Agents and Multi-Agent Systems, 7(1-2):179-189, 2003. [9] D. Morley and K. Myers.",
                "The SPARK agent framework.",
                "In Proc. of AAMAS04, 2004. [10] D. Morley, K. L. Myers, and N. Yorke-Smith.",
                "Continuous refinement of agent resource estimates.",
                "In Proc. of AAMAS06, 2006. [11] K. Myers, P. Berry, J. Blythe, K. Conley, M. Gervasio, D. McGuinness, D. Morley, A. Pfeffer, M. Pollack, and M. Tambe.",
                "An intelligent personal assistant for task and time management.",
                "AI Magazine, 28, 2007.",
                "To appear. [12] K. L. Myers and N. Yorke-Smith.",
                "A cognitive framework for delegation to an assistive user agent.",
                "In Proc. of AAAI 2005 Fall Symposium on Mixed-Initiative Problem-Solving Assistants, 2005. [13] L. Padgham and M. Winikoff.",
                "Developing Intelligent Agent Systems: A Practical Guide.",
                "John Wiley and Sons, 2004. [14] A. Pokahr, L. Braubach, and W. Lamersdorf.",
                "Jadex: A BDI reasoning engine.",
                "In R. Bordini, M. Dastani, J. Dix, and A. E. F. Seghrouchni, editors, Multi-Agent Programming.",
                "Springer, 2005. [15] A. S. Rao.",
                "AgentSpeak(L): BDI agents speak out in a logical computable language.",
                "In Proc. of Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World, 1996. [16] A. S. Rao and M. P. Georgeff.",
                "An abstract architecture for rational agents.",
                "In Proc. of KR92, 1992. [17] S. Sardi˜na, L. de Silva, and L. Padgham.",
                "Hierarchical planning in BDI agent programming languages: a formal approach.",
                "In Proc. of AAMAS06, 2006. [18] S. Sardina and L. Padgham.",
                "Goals in the context of bdi plan failure and planning.",
                "In Proc. of AAMAS07, 2007. [19] J. Thangarajah, L. Padgham, and M. Winikoff.",
                "Detecting and exploiting positive goal interaction in intelligent agents.",
                "In Proc. of AAMAS03, 2003. [20] J. Thangarajah, M. Winikoff, L. Padgham, and K. Fischer.",
                "Avoiding resource conflicts in intelligent agents.",
                "In Proc. of ECAI-02, 2002. [21] A. Unruh, J. Bailey, and K. Ramamohanarao.",
                "A framework for goal-based semantic compensation in agent systems.",
                "In Proc. of First Intl.",
                "Workshop on Safety and Security in Multi-Agent Systems, 2004. [22] A. Unruh, H. Harjadi, J. Bailey, and K. Ramamohanarao.",
                "Semantic-compensation-based recovery management in multi-agent systems.",
                "In Proc. of Second IEEE Symposium on Multi-Agent Security and Survivability (IEEE MAS&S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland, and J. Thangarajah.",
                "Declarative and procedural goals in intelligent agent systems.",
                "In Proc. of KR02, 2002.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 15"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Aumentamos cada plan con un \"método de aborto\" opcional, análogo al método de falla que se encuentra en algunos lenguajes de programación de agentes.abortar el método",
                "Nuestro enfoque asocia un \"método de aborto\" con cada plan.abortar el método",
                "La pregunta sigue siendo qué \"método de aborto\" debe ser invocado y de qué manera.abortar el método",
                "Una alternativa a unir un \"método de aborto\" a cada plan es adjuntar tales métodos a cada acción atómica.abortar el método",
                "Al hacerlo, debe invocar el \"método de aborto\", en este caso, realizando así la solicitud de autorización de cancelación.3 2. Abort Method",
                "El razonamiento sobre los requisitos de recursos [20, 10] hará que el agente se realice 3 si hay alguna diferencia entre cómo abortar una tarea que se realiza externamente versus cómo abortar una que ahora se sabe que es imposible, el \"método de aborto\"puede detectar las circunstancias y manejar la situación según corresponda.que no puede completar con éxito ambas tareas.abortar el método",
                "A esto, agregamos el \"método de aborto\", que se invoca para que el plan sea abortado.abortar el método",
                "En nuestro ejemplo, el \"método de aborto\" para el envío de reuniones de planes para el plan de apoyo consiste en invocar el número de papel de cancelación de la sub-tarea.abortar el método",
                "El \"método de aborto\" no necesita abortar explícitamente la solicitud de autorización, porque el agente invocará el \"método de aborto\" para la subtarea adecuadamente, ya que describimos a continuación.abortar el método",
                "La suposición aquí es que, al igual que el método de falla, el programador del sistema de agentes tiene la oportunidad de especificar un \"método de aborto\" sensible que tenga en cuenta el punto en el plan en el que se debe ejecutar el aborto.abortar el método",
                "Para cualquier plan, el \"método de aborto\" es opcional: si no se especifica el \"método de aborto\", el agente no toma medidas específicas para este plan.abortar el método",
                "En realidad, sin embargo, un \"método de aborto\" puede fallar.abortar el método",
                "En este caso, sin un mecanismo de manejo más sofisticado, el agente simplemente deja de ejecutar el \"método de aborto\" fallido sin más deliberación.abortar el método",
                "En sistemas como Spark, el programador puede especificar un comportamiento alternativo para una falla fallida o \"método de aborto\" por medio de procedimientos de nivel de metro.abortar el método",
                "Cuando estas construcciones están anidadas, es importante que antes de que se ejecute el fracaso o el \"método de aborto\" de un PAP de los padres, los programas de falla de falla o abortes de los PAP de los niños se ejecutan primero, como se describe anteriormente en la Sección 3.abortar el método",
                "Mientras ejecutamos el Programa P, sabemos que necesitamos lanzar P e invocar su \"método de aborto\" si se le ha dicho a algún antepasado de P que aborte.abortar el método",
                "Sin embargo, debemos asegurarnos de hacer esto solo después de que cada PAP de niños haya tenido la oportunidad de invocar su \"método de aborto\" y todos estos métodos de aborto se hayan completado: si dejamos caer el programa demasiado pronto, entonces la ejecución del aborto-Los métodos de los niños también serán abandonados.abortar el método"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "operational semantics": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Aborting Tasks in BDI Agents John Thangarajah, James Harland RMIT University Melbourne, Australia {johthan,jah}@cs.rmit.edu.au David Morley, Neil Yorke-Smith Artificial Intelligence Center, SRI International Menlo Park, CA 94025 U.S.A. {morley,nysmith}@ai.sri.com ABSTRACT Intelligent agents that are intended to work in dynamic environments must be able to gracefully handle unsuccessful tasks and plans.",
                "In addition, such agents should be able to make rational decisions about an appropriate course of action, which may include aborting a task or plan, either as a result of the agents own deliberations, or potentially at the request of another agent.",
                "In this paper we investigate the incorporation of aborts into a BDI-style architecture.",
                "We discuss some conditions under which aborting a task or plan is appropriate, and how to determine the consequences of such a decision.",
                "We augment each plan with an optional abort-method, analogous to the failure method found in some agent programming languages.",
                "We provide an <br>operational semantics</br> for the execution cycle in the presence of aborts in the abstract agent language CAN, which enables us to specify a BDI-based execution model without limiting our attention to a particular agent system (such as JACK, Jadex, Jason, or SPARK).",
                "A key technical challenge we address is the presence of parallel execution threads and of sub-tasks, which require the agent to ensure that the abort methods for each plan are carried out in an appropriate sequence.",
                "Categories and Subject Descriptors I.2.11 [ARTIFICIAL INTELLIGENCE]: Distributed Artificial Intelligence-Intelligent agents General Terms Design, Reliability, Theory 1.",
                "INTRODUCTION Intelligent agents generally work in complex, dynamic environments, such as air traffic control or robot navigation, in which the success of any particular action or plan cannot be guaranteed [13].",
                "Accordingly, dealing with failure is fundamental to agent programming, and is an important element of agent characteristics such as robustness, flexibility, and persistence [21].",
                "In agent architectures inspired by the Belief-Desire-Intention (BDI) model [16], these properties are often characterized by the interactions between beliefs, goals, and plans [2].1 In general, an agent that wishes to achieve a particular set of tasks will pursue a number of plans concurrently.",
                "When failures occur, the choice of plans will be reviewed.",
                "This may involve seeking alternative plans for a particular task, re-scheduling tasks to better comply with resource constraints, dropping some tasks, or some other decision that will increase the likelihood of success [12, 14].",
                "Failures can occur for a number of reasons, and it is often not possible to predict these in advance, either because of the complexity of the system or because changes in the environment invalidate some earlier decisions.",
                "Given this need for deliberation about failed tasks or plans, failure deliberation is commonly built into the agents execution cycle.",
                "Besides dealing with failure, an important capability of an intelligent agent is to be able to abort a particular task or plan.",
                "This decision may be due to an internal deliberation (such as the agent believing the task can no longer be achieved, or that some conflicting task now has a higher priority) or due to an external factor (such as another agent altering a commitment, or a change in the environment).",
                "Aborting a task or plan is distinct from its failure.",
                "Failure reflects an inability to perform and does not negate the need to perform - for example, a reasonable response to failure may be to try again.",
                "In contrast, aborting says nothing about the ability to perform; it merely eliminates the need.",
                "Failure propagates from the bottom up, whereas aborting propagates from the top down.",
                "The potential for concurrently executing sub-plans introduces different complexities for aborting and failure.",
                "For aborting, it means that multiple concurrent sub-plans may need to be aborted as the abort is propagated down.",
                "For failure, it means that parallel-sibling plans may need to be aborted as the failure is propagated up.",
                "There has been a considerable amount of work on plan failures (such as detecting and resolving resource conflicts [20, 10]) and most agent systems incorporate some notion of failure handling.",
                "However, there has been relatively little work on the development of abort techniques beyond simple dropping of currently intended plans and tasks, which does not deal with the clean-up required.",
                "As one consequence, most agent systems are quite limited in their treatment of the situation where one branch of a parallel construct 1 One can consider both tasks to be performed and goals to achieve a certain state of the world.",
                "A task can be considered a goal of achieving the state of the task having been performed, and a goal can be considered a task of bringing about that state of the world.",
                "We adopt the latter view and use task to also refer to goals. 8 978-81-904262-7-5 (RPS) c 2007 IFAAMAS fails (common approaches include either letting the other branch run to completion unhindered or dropping it completely).",
                "In this paper we discuss in detail the incorporation of abort cleanup methods into the agent execution cycle, providing a unified approach to failure and abort.",
                "A key feature of our procedure-based approach is that we allow each plan to execute some particular code on a failure and on an abort.",
                "This allows a plan to attempt to ensure a stable, known state, and possibly to recover some resources and otherwise clean up before exiting.",
                "Accordingly, a central technical challenge is to manage the orderly execution of the appropriate clean-up code.",
                "We show how aborts can be smoothly introduced into a BDI-style architecture, and for the first time we give an <br>operational semantics</br> for aborting in the abstract agent language CAN [23, 17].",
                "This allows us to specify an appropriate level of detail for the execution model, without focusing on the specific constructs of any one agent system such as JACK [2], Jadex [14], Jason [6], or SPARK [9].",
                "Our focus is on a single agent, complementary to related work that considers exception handling for single- and multiagent systems (e.g., [22, 5, 6]).",
                "This paper is organized as follows.",
                "In Section 2 we give an example of the consequences of aborting a task, and in Section 3 we discuss some circumstances under which aborts should occur, and the appropriate representation and invocation procedures.",
                "In Section 4 we show how we can use CAN to formally specify the behaviour of an aborted plan.",
                "Section 5 discusses related work, and in Section 6 we present our conclusions and future work. 2.",
                "MOTIVATING EXAMPLE Alice is a knowledge worker assisted by a learning, personal assistive agent such as CALO [11].",
                "Alice plans to attend the IJCAI conference later in the year, and her CALO agent adopts the task of Support Meeting Submission (SMS) to assist her.",
                "CALOs plan for an SMS task in the case of a conference submission consists of the following sub-tasks: 1.",
                "Allocate a Paper Number (APN) to be used for administrative purposes in the company. 2.",
                "Track Writing Abstract (TWA): keep track of Alices progress in preparing an abstract. 3.",
                "Apply For Clearance (AFC) for publication from Alices manager based on the abstract and conference details. 4.",
                "Track Writing Paper (TWP): keep track of Alices progress in writing the paper. 5.",
                "Handle Paper Submission (HPS): follow company internal procedures for submitting a paper to a conference.",
                "These steps must be performed in order, with the exception of steps 3 (AFC) and 4 (TWP), which may be performed in parallel.",
                "Similarly, CALO can perform the task Apply For Clearance (AFC) by a plan consisting of: 1.",
                "Send Clearance Request (SCR) to Alices manager. 2.",
                "Wait For Response (WFR) from the manager. 3.",
                "Confirm that the response was positive, and fail otherwise.",
                "Now suppose that a change in circumstances causes Alice to reconsider her travel plans while she is writing the paper.",
                "Alice will no longer be able to attend IJCAI.",
                "She therefore instructs her CALO agent to abort the SMS task.",
                "Aborting the task implies aborting both the SMS plan and the AFC subplan.",
                "Aborting the first plan requires CALO to notify the paper number registry that the allocated paper number is obsolete, which it can achieve by the Cancel Paper Number (CPN) task.2 Aborting the second plan requires CALO to notify Alices manager that Alice no longer requires clearance for publication, which CALO can achieve by invoking the Cancel Clearance Request (CCR) task.",
                "We note a number of important observations from the example.",
                "First, the decision to abort a particular course of action can come from the internal deliberations of the agent (such as reasoning about priorities in a conflict over resources), or from external sources (such as another agent cancelling a commitment), as in this example.",
                "In this paper we only touch on the problem of determining whether a task or plan should be aborted, instead concentrating on determining the appropriate actions once this decision is made.",
                "Hence, our objective is to determine how to incorporate aborting mechanisms into the standard execution cycle rather than determine what should be aborted and when.",
                "Second, once the decision is made to abort the attempt to submit a paper, there are some actions the agent should take, such as cancelling the clearance request.",
                "In other words, aborting a task is not simply a matter of dropping the task and associated active plans: there are some clean up actions that may need to be done.",
                "This is similar to the case for failure, in that there may also be actions to take when a task or plan fails.",
                "In both cases, note that it is not simply a matter of the agent undo-ing its actions to date; indeed, this may be neither possible (since the agent acts in a situated world and its actions change world state) nor desirable (depending on the semantics of the task).",
                "Rather, cleaning up involves compensation via forward recovery actions [3].",
                "Third, there is a distinction between aborting a task and aborting a plan.",
                "In the former case, it is clear that all plans being executed to perform the task should be aborted; in the latter case, it may be that there are better alternatives to the current plan and one of these should be attempted.",
                "Hence, plan aborting or failure does not necessarily lead to task aborting or failure.",
                "Fourth, given that tasks may contain sub-tasks, which may contain further sub-tasks, it is necessary for a parent task to wait until its children have finished their abort methods.",
                "This is the source of one of the technical challenges that we address: determining the precise sequence of actions once a parent task or plan is aborted. 3.",
                "ABORTING TASKS AND PLANS As we have alluded to, failure and aborting are related concepts.",
                "They both cause the execution of existing plans to cease and, consequentially, the agent to reflect over its current tasks and intentions.",
                "Failure and aborting, however, differ in the way they arise.",
                "In the case of failure, the trigger to cease execution of a task or plan comes from below, that is, the failure of sub-tasks or lower-level plans.",
                "In the case of aborting, the trigger comes from above, that is, the tasks and the parent plans that initiated a plan.",
                "In BDI-style systems such as JACK and SPARK, an agents domain knowledge includes a pre-defined plan library of plan clauses.",
                "Each plan clause has a plan body, which is a program (i.e., combination of primitive actions, sub-tasks, etc.) that can be executed in response to a task or other event should the plan clauses context condition be satisfied.",
                "The agent selects and executes instances of plan clauses to perform its tasks.",
                "There can be more than one applicable plan clause and, in the event that one fails, another applicable one may be attempted.",
                "Plans may have sub-tasks that must succeed 2 CALO needs only drop the TWA and TWP tasks to abort them: for the sake of simplicity we suppose no explicit clean up of its internal state is necessary.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 9 for the plan to succeed.",
                "In such systems, a plan failure occurs if one of the actions or sub-tasks within the plan fails.",
                "The agents action upon plan failure depends on its nature: for example, the agent may declare the task to have failed if one plan has been tried and resulted in failure, or it may retry alternate plans and declare (indeed, must declare) task failure only if all possible alternate plans to perform the task have been tried and resulted in failure.",
                "Observe that, while task failure can follow from plan failure or a sequence of plan failures, plan failure need not lead to task failure provided the agent can successfully complete an alternate plan.",
                "Moreover, task failure can also arise separately from plan failure, if the agent decides to abort the task.",
                "Our approach associates an abort-method with each plan.",
                "This enables the programmer to specify dedicated compensation actions according to how the agent is attempting to perform the task.",
                "Note that our abort-methods can be arbitrary programs and so can invoke tasks that may be performed dynamically in the usual BDI fashion, i.e., the clean-up is not limited to executing a predetermined set of actions.",
                "The question remains which abort-method should be invoked, and in what manner.",
                "Given the complexity of agent action spaces, it is not possible nor desirable to enumerate a static set of rules.",
                "Rather, the agent will invoke its abort-methods dynamically according to the state of execution and its own internal events.",
                "An alternative to attaching an abort-method to each plan is to attach such methods to each atomic action.",
                "We choose the former because: (1) action-level abort-methods would incur a greater overhead, (2) plans are meant to be designed as single cohesive units and are the unit of deliberation in BDI systems, and (3) the cleanup methods for failure in current systems are attached to plans.",
                "In order to understand how the agents abort processing should function, we consider three situations where it is sensible for an agent to consider aborting some of its tasks and plans: 1.",
                "When a task succeeds or fails because of an external factor other than the agent itself, the plan currently executed to perform the task should be aborted.",
                "For example, suppose company policy changes so that employees of Alices seniority automatically have clearance for publishing papers.",
                "Since Alice now has clearance for publishing her paper, CALO can abort the plan for Apply For Clearance.",
                "In doing so it must invoke the abort-method, in this case thus performing Cancel Clearance Request.3 2.",
                "When two or more sub-programs are executed in parallel, if one fails then the others should be aborted, given that the failure of one branch leads to the failure of the overall task.",
                "For example, suppose that part-way through writing the paper, Alice realizes that there is a fatal flaw in her results, and so notifies CALO that she will not be able to complete the paper by the deadline.",
                "The failure of the Track Writing Paper task should cause the Apply For Clearance task being executed in parallel to be aborted. 3.",
                "When an execution event alters the importance of an existing task or intention, the agent should deliberate over whether the existing plan(s) should continue.",
                "For example, suppose that Alice tasks CALO with a new, high-priority task to purchase a replacement laptop, but that Alice lacks enough funds to both purchase the laptop and to attend IJCAI.",
                "Reasoning over resource requirements [20, 10] will cause the agent to realize 3 If there is any difference between how to abort a task that is externally performed versus how to abort one that is now known to be impossible, the abort-method can detect the circumstances and handle the situation as appropriate. that it cannot successfully complete both tasks.",
                "Given that the new task has greater importance, a rational agent will evaluate its best course of action and may decide to abortor at least suspend - the existing task of submitting a paper and intentions derived from it [12].",
                "The <br>operational semantics</br> we provide in Section 4 for aborting tasks and plans captures the first two situations above.",
                "The third situation involves deliberating over the importance of a task, which depends on various factors such as task priority.",
                "Although this deliberation is beyond the scope of this paper, it is a complementary topic of our future work.",
                "Note that the above situations apply to achievement goals, for which the task is completed when a particular state of the world is brought about (e.g., ensure we have clearance).",
                "Different forms of reasoning apply to other goal types [4] such as maintenance goals [1], where the goal is satisfied by maintaining a state of the world for some period of time (e.g., maintain $100 in cash).",
                "Abort Method Representation The intent of aborting a task or plan is that the task or plan and all its children cease to execute, and that appropriate clean-up methods are performed as required.",
                "In contrast to offline planning systems, BDI agents are situated: they perform online deliberation and their actions change the state of the world.",
                "As a result, the effects of many actions cannot be simply undone.",
                "Moreover, the undo process may cause adverse effects.",
                "Therefore, the clean-up methods that we specify are forward recovery procedures that attempt to ensure a stable state and that also may, if possible, recover resources.",
                "The common plan representation in BDI-style systems such as JACK and SPARK includes a failure-method, which is the designated clean-up method invoked when the plan fails.",
                "To this, we add the abort-method, which is invoked if the plan is to be aborted.",
                "In our example, the abort-method for the plan for Support Meeting Submission consists of invoking the sub-task Cancel Paper Number.",
                "The abort-method need not explicitly abort Apply For Clearance, because the agent will invoke the abort-method for the subtask appropriately, as we outline below.",
                "The assumption here is that, like the failure-method, the programmer of the agent system has the opportunity to specify a sensible abort-method that takes into consideration the point in the plan at which the abort is to be executed.",
                "For any plan, the abort-method is optional: if no abort-method is specified, the agent takes no specific action for this plan.",
                "However, the agents default behavioural rules still apply, for example, whether to retry an alternate plan for the parent task.",
                "Note that an explicit representation of the clean-up methods for tasks is not required, since tasks are performed by executing some plan or plans.",
                "Hence, aborting a task means aborting the current plan that is executed to perform that task, as we next describe.",
                "Abort Method Invocation We now informally lay out the agents action upon aborting plans and tasks.",
                "When a plan P is aborted: 1.",
                "Abort each sub-task that is an active child of P. An active child is one that was triggered by P and is currently in execution. 2.",
                "When there are no more active children, invoke the abort method of plan P. 3.",
                "Indicate a plan failure to TP , the parent task of P. We note here that if the parent task TP is not to be aborted then the agent may choose another applicable plan to satisfy TP . 10 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) When a task (or sub-task) T is aborted: 1.",
                "Abort the current active plan to satisfy T (if any). 2.",
                "When there are no more active child processes, drop the task.",
                "The agent thus no longer pursues T. 3.",
                "Note here that when the current active plan for performing T is aborted, no other applicable plans to perform T should be tried as it is the task that is to be aborted.",
                "In order to prevent infinitely cascading clean-up efforts, we assume that abort-methods will never be aborted nor fail.",
                "In reality, however, an abort-method may fail.",
                "In this case, lacking a more sophisticated handling mechanism, the agent simply stops executing the failed abort-method with no further deliberation.",
                "The assumption we make is thus not a reflection of the full complexity of reality, but one that is pragmatic in terms of the agent execution cycle; the approach to failure-handling of [21] makes the same assumption.",
                "In systems such as SPARK, the programmer can specify an alternative behaviour for a failed failure- or abort-method by means of meta-level procedures.",
                "We also assume that failure- and abort-methods terminate in finite time. 4.",
                "<br>operational semantics</br> We provide the semantics for the task and plan failure and aborting processes outlined above.",
                "We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the goal adoption and dropping mechanisms.",
                "The extensions also simplified the semantics in the earlier work.",
                "We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1.",
                "Following a presentation of the <br>operational semantics</br> of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present. 4.1 CAN Language CAN is a high-level agent language, in a spirit similar to that of AgentSpeak [15] and Kinnys Ψ [7], both of which attempt to extract the essence of a class of implemented BDI agent systems.",
                "CAN provides an explicit goal construct that captures both the declarative and procedural aspects of a goal.",
                "Goals are persistent in CAN in that, when a plan fails, another applicable plan is attempted.",
                "This equates to the default failure handling mechanism typically found in implemented BDI systems such as JACK [2].",
                "In practical systems, tasks are typically translated into events that trigger the execution of some plans.",
                "This is also true in the CAN language, but, in order to maintain the persistence of goals, a goal construct is introduced.",
                "This is denoted by Goal ` φs, P, φf ´ , where φs is the success condition that determines when the goal is considered achieved, φf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once φs or φf become true.",
                "An agents behavior is specified by a plan library, denoted by Π, that consists of a collection of plan clauses of the form e : c ← P, where e is an event, c is a context condition (a logical formula over the agents beliefs that must be true in order for the plan to be applicable)4 and P is the plan body.",
                "The plan body is a program that is defined recursively as follows: P ::= act | +b | −b | ?φ | !e | P1; P2 | P1 P2 | Goal ` φs, P1, φf ´ | P1 P2 | {ψ1 : P1, . . . , ψn : Pn} | nil 4 An omitted c is equivalent to true.",
                "Δ = {ψiθ : Piθ | e : ψi ← Pi ∈ Π ∧ θ = mgu(e, e )} B, !e −→ B, Δ Event ψi : Pi ∈ Δ B |= ψi B, Δ −→ B, Pi Δ \\ {ψi : Pi} Select B, P1 −→ B, (P1 P2) −→ B, P2 fail B, P1 −→ B , P1 B, (P1; P2) −→ B , (P ; P2) Sequence B, P1 −→ B , P B, (P1 P2) −→ B , (P P2) Parallel1 B, P2 −→ B , P B, (P1 P2) −→ B , (P P1) Parallel2 Figure 1: Operational rules of CAN. where P1, . . . , Pn are themselves programs, act is a primitive action that is not further specified, and +b and −b are operations to add and delete beliefs.",
                "The belief base contains ground belief atoms in the form of first-order relations but could be orthogonally extended to other logics.",
                "It is assumed that well-defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ∪ {b}), and to delete a belief from a belief set (B \\ {b}). ?φ is a test for condition φ, and !e5 is an event6 that is posted from within the program.",
                "The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (Goal ` φs, P, φf ´ ).",
                "The above defines the user language.",
                "In addition, a set of auxiliary compound forms are used internally when assigning semantics to constructs. nil is the basic (terminating) program.",
                "When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 : P1, . . . , cn : Pn ).",
                "The other auxiliary compound form, , is a choice operator dual to sequencing: P1 P2 executes P1 and then executes P2 only if P1 failed.",
                "A summary of the <br>operational semantics</br> for CAN in line with [23] and following some of the simplifications of [17] is as follows.",
                "A basic configuration S = B, G, Γ consists of the current belief base B of the agent, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention).",
                "A transition S0 −→ S1 specifies that executing S0 for a single step yields configuration S1.",
                "S0 −→∗ Sn is the usual reflexive transitive closure of −→: Sn is the result of one or more singlestep transitions.",
                "A derivation rule S −→ Sr S −→ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator).",
                "Figure 1 gives some of the operational rules.",
                "The Event rule handles task events by collecting all relevant plan clauses for the event in question: for each plan clause e : ψi ← Pi, if there is a most general unifier, θ = mgu(e, e ) of e and the event in 5 Where it is obvious that e is an event we will sometimes exclude the exclamation mark for readability. 6 Typically an achievement goal.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 11 B |= φs B, Goal ` φs, P, φf ´ −→ B, true Gs B |= φf B, Goal ` φs, P, φf ´ −→ B, fail Gf P = Goal ` φs, P , φf ´ P = P1 £ P2 B |= φs ∨ φf B, P −→ B, Goal ` φs, P £ P , φf ´ GI P = P1 £ P2 B |= φs ∨ φf B, P1 −→ B , P B, Goal ` φs, P, φf ´ −→ B , Goal ` φs, P £ P2, φf ´ GS P = P1 £ P2 B |= φs ∨ φf P1 ∈ {true, fail} B, Goal ` φs, P, φf ´ −→ B, Goal ` φs, P2 £ P2, φf ´ GR Figure 2: Rules for goals in CAN. question, then the rule constructs a guarded alternative ψiθ : Piθ.",
                "The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives: program P Δ states that program P should be tried first, falling back to the remaining alternatives, Δ \\ P, if necessary.",
                "This rule and the fail rule together are used for failure handling: if the current program Pi from a plan clause for a task fails, rule fail is applied first, and then if possible, rule Select will choose another applicable alternative for the task if one exists.",
                "Rule Sequence handles sequencing of programs in the usual way.",
                "Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel.",
                "Figure 2 gives simplified rules for dealing with goals, in line with those presented in [17].",
                "The first rule states that a goal succeeds when φs become true; the second rule states that a goal fails when φf become true.",
                "The third rule GI initializes the execution of a goal-program by updating the goal base and setting the program in the goal to P £ P; the first P is to be executed and the second P is used to keep track of the original program for the goal.",
                "The fourth rule GS executes a single step of the goal-program.",
                "The final rule GR restarts the original program (encoded as P2 of pair P1 £ P2) whenever the current program is finished but the desired and still possible goal has not yet been achieved. 4.2 Aborting Intentions and Handling Failure We next introduce the ability to specify handler programs, in the form of failure- and abort-methods, that deal with the clean-up required when a given program respectively fails or is aborted.",
                "We do not associate failure- and abort- methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies failure- and abort- methods for an arbitrary program.",
                "The FAb(P, PF , PA) construct executes the program P. Should P fail, it executes the failure handling program PF ; should P need to be aborted, it executes the abort handling program PA.",
                "Thus to add failure- and abort- methods PF and PA to a plan clause e : c ← P, we write e : c ← FAb(P, PF , PA).",
                "With the introduction of the ability to abort programs, we modify the parallel construct to allow the failure of one branch to abort the other.",
                "We must take into consideration the possible existence of abort-methods in the aborted branch.",
                "Similarly, with the Goal construct we can no longer completely abandon the program the goal contains as soon as the success or failure condition holds; we must now take into consideration the existence of any abort-methods applicable to the program.",
                "We provide the semantics of an augmented agent language containing the FAb construct by defining a source transformation, similar to macro-expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN.",
                "The one non-standard extension to CAN is a wait-until-condition construct.",
                "We explain this simple modification of the parallel construct below when we come to translation of the Goal construct.",
                "First we describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases: the FAb, parallel, and Goal constructs.",
                "A key issue is that the FAb constructs may be nested, either directly or indirectly.",
                "Let us call each instantiation of the construct at execution time a possible abort point (pap).",
                "Where these constructs are nested, it is important that before the failure- or abort-method of a parent pap is executed, the failure- or abort-methods programs of the children paps are executed first, as described earlier in Section 3.",
                "The need to coordinate the execution of the abort-methods of nested paps requires that there be some way to identify the parents and children of a particular pap.",
                "We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e : c ← P with a plan clause e(v) : c ← μv(P) where v is a free variable, not previously present in the plan clause.",
                "This variable is used to keep track of the context of execution.",
                "The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context.",
                "For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1].",
                "We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51.",
                "This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v .",
                "For most CAN constructs, the context variable is unused or passed unchanged: μv(act) = act μv(+b) = +b μv(−b) = −b μv(nil) = nil μv(!e) = !e(v) μv(P1; P2) = μv(P1); μv(P2) μv(P1 P2) = μv(P1) μv(P2) μv( ψ1 : P1, . . . , ψn : Pn ) = ψ1 : μv(P1), . . . , ψn : μv(Pn) It remains to specify the transformation μv(·) in three cases: the FAb, parallel, and Goal constructs.",
                "These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context.",
                "Let us introduce the primitive action prependID(v, v ) that creates a new pap identifier and prepends it to list v giving list v .",
                "We also introduce the following predicates: • a(v) - the pap v is currently active. • abort(v) - the pap v should be aborted (after aborting all of its descendants). 7 An alternative would be to use meta-level predicates that reflect the current state of the intention structure. 12 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) • f(v) - the program of pap v has failed. • ancestorof(v, v ) ≡ v = v ∨ ancestorof(v, tail(v ))the pap v is an ancestor of pap v . • nac(v) ≡ ¬∃v . (a(v ) ∧ ancestorof(v, v ) ∧ v = v ) - v has no active children. • sa(v) ≡ ∃v .abort(v ) ∧ ancestorof(v , v) - we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active. • san(v) ≡ sa(v) ∧ nac(v) - we should abort v now if we should abort v and v has no active children.",
                "First let us consider the case of the FAb construct.",
                "The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v. We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context.",
                "We need to make sure that we retract the belief that v is active at the end, i.e., −a(v ).",
                "We use the Goal construct to allow us to drop the execution of a program within a pap v when it is necessary to abort.",
                "While executing the program P, we know that we need to drop P and invoke its abort-method if some ancestor of P has been told to abort.",
                "This is represented by the predicate sa(v ) being true.",
                "However, we need to make sure that we do this only after every child pap has had the chance to invoke its abort-method and all these abort-methods have completed: if we drop the program too soon, then execution of the abort-methods of the children will also be dropped.",
                "Therefore, the condition we actually use in the Goal construct to test when to drop the program is san(v ).",
                "This condition relies on the fact that as the children paps complete, they remove the relevant a facts.",
                "Our use of the Goal construct is for its ability to drop the execution of a program when conditions are met.",
                "To leave aside the repeat execution until a condition is met aspect, we must ensure that the success or failure condition of the construct is satisfied once the execution of the program succeeds or fails.",
                "We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on failure, and by having the appropriate success and failure conditions on the Goal.",
                "Hence, if the Goal construct fails, then the program either was aborted or it failed.",
                "We invoke the relevant failure- or abort- method, retract the a(v ) fact, and then fail.",
                "Putting all this together, we formally define μv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agents plan library: prependID(v, v ); +a(v ); Goal ( ¬a(v ), (μv (P); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); μv(PA)) μv(PF )); −a(v ); ?false) Second, we must transform the parallel operator to ensure that the failure of one branch safely aborts the other.",
                "Here we construct two new contexts, v and v , from the existing context v. If one branch fails, it must abort the other branch.",
                "At the end, if either branch was aborted, then we must fail.",
                "Let v and v be new variables distinct from any other in the agents plan library.",
                "We define μv(P1 P2) to be: prependID(v, v ); prependID(v, v ); +a(v ); +a(v ); ( Goal (¬a(v ), (μv (P1); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal (¬a(v ), (μv (P2); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ); ?¬abort(v ) ∧ ¬abort(v ) Finally, we need to modify occurrences of the Goal construct in two ways: first, to make sure that the abort handling methods are not bypassed when the success or failure conditions are satisfied, and second, to trigger the aborting of the contained program when either the success or failure conditions are satisfied.",
                "To transform the Goal construct we need to extend standard CAN with a wait-until-condition construct.",
                "The construct φ : P does not execute P until φ becomes true.",
                "We augment the CAN language with the following rules for the guard operator :: B |= φ B, G, (φ : P −→ B, G, P :true B |= φ B, G, (φ : P) −→ B, G, (φ : P) :false In order to specify μv(Goal ` φs, P, φf ´ ), we generate a new pap and execute the program within the Goal construct in this new context.",
                "We must ensure that belief a(v ) is removed whether the Goal succeeds or fails.",
                "We shift the success and failure condition of the Goal construct into a parallel branch using the wait-until-condition construct, and modify the Goal to use the should abort now condition san(v ) as the success condition.",
                "The waiting branch will trigger the abort of the program should either the success or failure condition be met.",
                "To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active.",
                "Let v be a new variable distinct from any other in the agents plan library.",
                "We define μv(Goal ` φs, P, φf ´ ) to be: prependID(v, v ); +a(v ); ( Goal ( san(v ), μv (P), false) ; −a(v ); ?φs ) φs ∨ φf ∨ ¬a(v ) : +abort(v ) ) The program P will be repeatedly executed until san(v ) becomes true.",
                "There are two ways this can occur.",
                "First, if either the success condition φs or the failure condition φf becomes true, then the second branch of the parallel construct executes.",
                "This causes abort(v ) to become true, and, after the descendant paps abortmethods are executed, san(v ) becomes true.",
                "In this case, P is now dropped, the a(v ) is removed, and the entire construct succeeds or fails based on φs.",
                "The second way for san(v ) to become true is if v or one of its ancestors is aborted.",
                "In this case, once the descendant paps abort-methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming φs is false). 4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2.",
                "We will express tasks by events, for example, the task Allocate a Paper Number we express as the event APN.",
                "Let the output of the Apply For Clearance task be Y or N, indicating the approval or not of Alices manager, respectively.",
                "Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively: SMS(m) : isconf(m) ← FAb(!APN; !TWA; (!AFC !TWP); !HPS, !CPN, !CPN) AFC : true ← FAb(!SCR; !WFR(r); ?r = Y, nil, !CCR) Note that Support Meeting Submission has a parameter m, the meeting of interest (IJCAI, in our example), while Apply For Clearance has no parameters.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two.",
                "Let v and v denote new variables.",
                "Then we have as the translated plan clause: AFC(v ) : true ← prependID(v , v ); +a(v ); Goal ( ¬a(v ), (!SCR(v ); !WFR(r, v ); ?r = Y; −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CCR(v )) nil); −a(v ); ?false) We can see that an extra context parameter has been added to each task and that the old plan body now appears inside a Goal construct.",
                "Should the old plan body succeed, belief a(v ) is retracted, causing the Goal to succeed.",
                "If the old plan body fails, or if the task is to be aborted, the Goal construct fails.",
                "This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and failure.",
                "The translation of the first plan clause, for SMS, is more complex, because of the parallel construct that introduces nested paps: SMS(m, v) : isconf(m) ← prependID(v, v ); +a(v ); Goal ( ¬a(v ), ((!APN(v ); !TWA(v ); prependID(v , v ); prependID(v , v ); +a(v ); +a(v ); ( Goal ( ¬a(v ), (!AFC(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal ( ¬a(v ), (!TWP(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ) ; ?¬abort(v ) ∧ ¬abort(v ); !HPS(v ); −a(v )) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CPN(v)) !CPN(v)); −a(v ); ?false) Here we can see that if the task !TWP(v ) fails then f(v ) will be asserted, failing the Goal construct that contains it, and leading to abort(v ) being asserted.",
                "If the !WFR(r, v ) task in the expansion of !AFC(v ) is still executing and has no active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true.",
                "This set of conditions will cause the Goal construct in the first plan clause to fail, dropping execution of !WFR(r, v ).",
                "The task !CCR(v ) will be executed.",
                "Once this task completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first Goal construct of the second plan clause to fail.",
                "While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely automated, according to the rules set out in Section 4.2.",
                "The translated plan clauses, with the semantics of CAN augmented by our waituntil-condition construct, thus specify the operation of the agent to handle both failure and aborting for the example. 5.",
                "RELATED WORK Plan failure is handled in the extended version of AgentSpeak found in the Jason system [6].",
                "Failure clean-up plans are triggered from goal deletion events −!g.",
                "Such plans, similar to our failure methods, are designed for the agent to effect state changes (act to undo its earlier actions) prior to possibly attempting another plan to achieve the failed goal g. Given Jasons constructs for dropping a goal with an indication of whether or not to try an alternate plan for it, H¨ubner et al. [6] provide an informal description of how a Jason agent modifies its intention structure when a goal failure event occurs.",
                "In a goal deletion plan, the programmer can specify any undo actions and whether to attempt the goal again.",
                "If no goal deletion plan is provided, Jasons default behaviour is to not reattempt the goal.",
                "Failure handling is applied only to plans triggered by addition of an achievement or test goal; in particular, goal deletion events are not posted for failure of a goal deletion plan.",
                "Further, the informal semantics of [6] do not consider parallel sub-goals (i.e., the CAN construct), since such execution is not part of Jasons language.",
                "The implementation of H¨ubner et al. [6] requires Jasons internal actions.",
                "A requirement for implementing our approach is a reflective capability in the BDI agent implementation.",
                "Suitable implementations of the BDI formalism are JACK [2], Jadex [14], and SPARK [9].",
                "All three allow meta level methods that are cued by meta events such as goal adoption or plan failure, and offer introspective capabilities over goal and intention states.",
                "Such meta level facilities are also required by the approach of Unruh et al. [21], who define goal-based semantic compensation for an agent.",
                "Failure-handling goals are invoked according to failurehandling strategy rules, by a dedicated agent Failure Handling Component (FHC) that tracks task execution.",
                "These goals are specified by the agent programmer and attached to tasks, much like our FAb(P, PF , PA) construct associates failure and abort methods with a plan P. Note, however, that in contrast to both [6] and our semantics, [21] attach the failure-handling knowledge at the goal, not plan, level.",
                "Their failure-handling goals may consist of stabilization goals that perform localized, immediate clean-up to restore the agents state to a known, stable state, and compensation goals that perform undo actions.",
                "Compensation goals are triggered on aborting a goal, and so not necessarily on goal failure (i.e., if the FHC directs the agent to retry the failed goal and the retry is successful).",
                "The FHC approach is defined at the goal level in order to facilitate abstract specification of failure-handling knowledge; the FHC decides when to address a failure and what to do (i.e., what failurehandling goals to invoke), separating this knowledge from the how of implementing corrective actions (i.e., what plan to execute to meet the adopted failure-handling goal).",
                "This contrasts with simplistic plan-level failure handling in which the what and how are intermingled in domain task knowledge.",
                "While our approach is defined at the plan level, our extended BDI semantics provides for the separation of execution and failure handling.",
                "Further, the FHC explicitly maintains data structures to track agent execution.",
                "We leverage the existing execution structures and self-reflective ability of a BDI agent to accomplish both aborting and failure handling without additional overhead.",
                "FHCs failure-handling strategy rules (e.g., whether to retry a failed goal) are replaced by instructions in our PF and PA plans, together with meta-level default failure handlers according to the agents nature (e.g., blindly committed).",
                "The FHC approach is independent of the architecture of the agent itself, in contrast to our work that is dedicated to the BDI formalism (although not tied to any one agent system).",
                "Thus no formal semantics are developed in [21]; the FHCs operation is given as 14 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) a state-based protocol.",
                "This approach, together with state checkpointing, is used for multi-agent systems in [22].",
                "The resulting architecture embeds their failure handling approach within a pair processing architecture for agent crash recovery.",
                "Other work on multi-agent exception handling includes AOEXs distributed exception handling agents [5], and the similar sentinels of [8].",
                "In both cases, failure-handling logic and knowledge are decoupled from the agents; by contrast, while separating exception handling from domain-specific knowledge, Unruh et al.s FHC and our approach both retain failure-handling logic within an agent. 6.",
                "CONCLUSION AND FUTURE WORK The tasks and plans of an agent may not successfully reach completion, either by the choice of the agent to abort them (perhaps at the request of another agent to do so), or by unbidden factors that lead to failure.",
                "In this paper we have presented a procedure-based approach that incorporates aborting tasks and plans into the deliberation cycle of a BDI-style agent, thus providing a unified approach to failure and abort.",
                "Our primary contribution is an analysis of the requirements on the operation of the agent for aborting tasks and plans, and a corresponding <br>operational semantics</br> for aborting in the abstract agent language CAN.",
                "We are planning to implement an instance of our approach in the SPARK agent system [9]; in particular, the work of this paper will be the basis for SPARKs abort handling mechanism.",
                "We are also developing an analysis tool for our extended version of CAN as a basis for experimentation.",
                "An intelligent agent will not only gracefully handle unsuccessful tasks and plans, but also will deliberate over its cognitive attitudes to decide its next course of action.",
                "We have assumed the default behaviour of a BDI-style agent, according to its nature: for instance, to retry alternatives to a failed plan until one succeeds or until no alternative plans remain (in which case to fail the task).",
                "Future work is to place our approach in service of more dynamic agent reasoning, such as the introspection that an agent capable of reasoning over task interaction effects and resource requirements can accomplish [19, 12].",
                "Related to this is determining the cost of aborting a task or plan, and using this as an input to the deliberation process.",
                "This would in particular influence the commitment the agent has towards a particular task: the higher the cost, the greater the commitment.",
                "Our assumption that abort-methods do not fail, as discussed above, is a pragmatic one.",
                "However, this is an issue worthy of further exploration, either to develop weaker assumptions that are also practical, or to analyze conditions under which our assumption is realistic.",
                "A further item of interest is extending our approach to failure and abort to maintenance goals [1].",
                "For such goals a different <br>operational semantics</br> for abort is necessary than for achievement goals, to match the difference in semantics of the goals themselves.",
                "Acknowledgements We thank Lin Padgham and the anonymous reviewers for their comments.",
                "The first author acknowledges the support of the Australian Research Council and Agent Oriented Software under grant LP0453486.",
                "The work of the two authors at SRI International was supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No.",
                "NBCHD030010.",
                "Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the view of DARPA or the Department of Interior-National Business Center. 7.",
                "REFERENCES [1] L. Braubach, A. Pokahr, D. Moldt, and W. Lamersdorf.",
                "Goal representation for BDI Agent systems.",
                "In Proc. of Second Intl.",
                "Workshop on Programming Multi-Agent Systems (ProMAS04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson, and A. Lucas.",
                "JACK intelligent agents - components for intelligent agents in Java.",
                "AgentLink News, Issue 2, 1999. [3] M. G. Chessell, C. Vines, D. Butler, C. M. Ferreira, and P. Henderson.",
                "Extending the concept of transaction compensation.",
                "IBM Systems Journal, 41(4), 2002. [4] M. Dastani, M. B. van Riemsdijk, and J.-J.",
                "C. Meyer.",
                "Goal types in agent programming.",
                "In Proc. of AAMAS06, 2006. [5] S. Entwisle, S. Loke, S. Krishnaswamy, and E. Kendall.",
                "Aoex: An agent-based exception handling framework for building reliable, distributed, open software systems.",
                "In Proc. of Seventh Joint Conf. on Knowledge-Based Software Engineering, 2006. [6] J. F. H¨ubner, R. H. Bordini, and M. Wooldridge.",
                "Programming declarative goals using plan patterns.",
                "In Proc. of 4th Intl.",
                "Workshop on Declarative Agent Languages and Technologies, 2006. [7] D. Kinny.",
                "The Psi calculus: an algebraic agent language.",
                "In Proc. of ATAL01, 2001. [8] M. Klein, J.",
                "A. Rodr´ıguez-Aguilar, and C. Dellarocas.",
                "Using domain-independent exception handling services to enable robust open multi-agent systems: The case of agent death.",
                "Autonomous Agents and Multi-Agent Systems, 7(1-2):179-189, 2003. [9] D. Morley and K. Myers.",
                "The SPARK agent framework.",
                "In Proc. of AAMAS04, 2004. [10] D. Morley, K. L. Myers, and N. Yorke-Smith.",
                "Continuous refinement of agent resource estimates.",
                "In Proc. of AAMAS06, 2006. [11] K. Myers, P. Berry, J. Blythe, K. Conley, M. Gervasio, D. McGuinness, D. Morley, A. Pfeffer, M. Pollack, and M. Tambe.",
                "An intelligent personal assistant for task and time management.",
                "AI Magazine, 28, 2007.",
                "To appear. [12] K. L. Myers and N. Yorke-Smith.",
                "A cognitive framework for delegation to an assistive user agent.",
                "In Proc. of AAAI 2005 Fall Symposium on Mixed-Initiative Problem-Solving Assistants, 2005. [13] L. Padgham and M. Winikoff.",
                "Developing Intelligent Agent Systems: A Practical Guide.",
                "John Wiley and Sons, 2004. [14] A. Pokahr, L. Braubach, and W. Lamersdorf.",
                "Jadex: A BDI reasoning engine.",
                "In R. Bordini, M. Dastani, J. Dix, and A. E. F. Seghrouchni, editors, Multi-Agent Programming.",
                "Springer, 2005. [15] A. S. Rao.",
                "AgentSpeak(L): BDI agents speak out in a logical computable language.",
                "In Proc. of Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World, 1996. [16] A. S. Rao and M. P. Georgeff.",
                "An abstract architecture for rational agents.",
                "In Proc. of KR92, 1992. [17] S. Sardi˜na, L. de Silva, and L. Padgham.",
                "Hierarchical planning in BDI agent programming languages: a formal approach.",
                "In Proc. of AAMAS06, 2006. [18] S. Sardina and L. Padgham.",
                "Goals in the context of bdi plan failure and planning.",
                "In Proc. of AAMAS07, 2007. [19] J. Thangarajah, L. Padgham, and M. Winikoff.",
                "Detecting and exploiting positive goal interaction in intelligent agents.",
                "In Proc. of AAMAS03, 2003. [20] J. Thangarajah, M. Winikoff, L. Padgham, and K. Fischer.",
                "Avoiding resource conflicts in intelligent agents.",
                "In Proc. of ECAI-02, 2002. [21] A. Unruh, J. Bailey, and K. Ramamohanarao.",
                "A framework for goal-based semantic compensation in agent systems.",
                "In Proc. of First Intl.",
                "Workshop on Safety and Security in Multi-Agent Systems, 2004. [22] A. Unruh, H. Harjadi, J. Bailey, and K. Ramamohanarao.",
                "Semantic-compensation-based recovery management in multi-agent systems.",
                "In Proc. of Second IEEE Symposium on Multi-Agent Security and Survivability (IEEE MAS&S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland, and J. Thangarajah.",
                "Declarative and procedural goals in intelligent agent systems.",
                "In Proc. of KR02, 2002.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 15"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Proporcionamos una \"semántica operativa\" para el ciclo de ejecución en presencia de abortos en el lenguaje de agente abstracto, lo que nos permite especificar un modelo de ejecución basado en BDI sin limitar nuestra atención a un sistema de agente particular (como Jack, Jadex,Jason, o chispa).semántica operativa",
                "Mostramos cómo los abortos pueden introducirse sin problemas en una arquitectura de estilo BDI, y por primera vez damos una \"semántica operativa\" para abortar en el lenguaje de agente abstracto.semántica operativa",
                "La \"semántica operativa\" que proporcionamos en la Sección 4 para abortar tareas y planes captura las dos primeras situaciones anteriores.semántica operativa",
                "\"Semántica operativa\" Proporcionamos la semántica para la tarea y la falla del plan y los procesos de aborto descritos anteriormente.semántica operativa",
                "Después de una presentación de la \"semántica operativa\" de nuestro enfoque en la Sección 4.2, en la Sección 4.3 proporcionamos un ejemplo trabajado para aclarar la semántica que presentamos.4.1 El lenguaje de Can puede es un lenguaje de agente de alto nivel, en un espíritu similar al de AgentsPeak [15] y Kinnys ψ [7], los cuales intentan extraer la esencia de una clase de sistemas de agentes BDI implementados.semántica operativa",
                "Un resumen de la \"semántica operativa\" para Can en línea con [23] y seguir algunas de las simplificaciones de [17] es la siguiente.semántica operativa",
                "Nuestra contribución principal es un análisis de los requisitos sobre la operación del agente para abortar tareas y planes, y una \"semántica operativa\" correspondiente para abortar en el lenguaje del agente abstracto puede.semántica operativa",
                "Para tales objetivos, es necesaria una \"semántica operativa\" diferente para el aborto que para los objetivos de logro, para igualar la diferencia en la semántica de los objetivos en sí.semántica operativa"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "task": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Aborting Tasks in BDI Agents John Thangarajah, James Harland RMIT University Melbourne, Australia {johthan,jah}@cs.rmit.edu.au David Morley, Neil Yorke-Smith Artificial Intelligence Center, SRI International Menlo Park, CA 94025 U.S.A. {morley,nysmith}@ai.sri.com ABSTRACT Intelligent agents that are intended to work in dynamic environments must be able to gracefully handle unsuccessful tasks and plans.",
                "In addition, such agents should be able to make rational decisions about an appropriate course of action, which may include aborting a <br>task</br> or plan, either as a result of the agents own deliberations, or potentially at the request of another agent.",
                "In this paper we investigate the incorporation of aborts into a BDI-style architecture.",
                "We discuss some conditions under which aborting a <br>task</br> or plan is appropriate, and how to determine the consequences of such a decision.",
                "We augment each plan with an optional abort-method, analogous to the failure method found in some agent programming languages.",
                "We provide an operational semantics for the execution cycle in the presence of aborts in the abstract agent language CAN, which enables us to specify a BDI-based execution model without limiting our attention to a particular agent system (such as JACK, Jadex, Jason, or SPARK).",
                "A key technical challenge we address is the presence of parallel execution threads and of sub-tasks, which require the agent to ensure that the abort methods for each plan are carried out in an appropriate sequence.",
                "Categories and Subject Descriptors I.2.11 [ARTIFICIAL INTELLIGENCE]: Distributed Artificial Intelligence-Intelligent agents General Terms Design, Reliability, Theory 1.",
                "INTRODUCTION Intelligent agents generally work in complex, dynamic environments, such as air traffic control or robot navigation, in which the success of any particular action or plan cannot be guaranteed [13].",
                "Accordingly, dealing with failure is fundamental to agent programming, and is an important element of agent characteristics such as robustness, flexibility, and persistence [21].",
                "In agent architectures inspired by the Belief-Desire-Intention (BDI) model [16], these properties are often characterized by the interactions between beliefs, goals, and plans [2].1 In general, an agent that wishes to achieve a particular set of tasks will pursue a number of plans concurrently.",
                "When failures occur, the choice of plans will be reviewed.",
                "This may involve seeking alternative plans for a particular <br>task</br>, re-scheduling tasks to better comply with resource constraints, dropping some tasks, or some other decision that will increase the likelihood of success [12, 14].",
                "Failures can occur for a number of reasons, and it is often not possible to predict these in advance, either because of the complexity of the system or because changes in the environment invalidate some earlier decisions.",
                "Given this need for deliberation about failed tasks or plans, failure deliberation is commonly built into the agents execution cycle.",
                "Besides dealing with failure, an important capability of an intelligent agent is to be able to abort a particular <br>task</br> or plan.",
                "This decision may be due to an internal deliberation (such as the agent believing the <br>task</br> can no longer be achieved, or that some conflicting <br>task</br> now has a higher priority) or due to an external factor (such as another agent altering a commitment, or a change in the environment).",
                "Aborting a <br>task</br> or plan is distinct from its failure.",
                "Failure reflects an inability to perform and does not negate the need to perform - for example, a reasonable response to failure may be to try again.",
                "In contrast, aborting says nothing about the ability to perform; it merely eliminates the need.",
                "Failure propagates from the bottom up, whereas aborting propagates from the top down.",
                "The potential for concurrently executing sub-plans introduces different complexities for aborting and failure.",
                "For aborting, it means that multiple concurrent sub-plans may need to be aborted as the abort is propagated down.",
                "For failure, it means that parallel-sibling plans may need to be aborted as the failure is propagated up.",
                "There has been a considerable amount of work on plan failures (such as detecting and resolving resource conflicts [20, 10]) and most agent systems incorporate some notion of failure handling.",
                "However, there has been relatively little work on the development of abort techniques beyond simple dropping of currently intended plans and tasks, which does not deal with the clean-up required.",
                "As one consequence, most agent systems are quite limited in their treatment of the situation where one branch of a parallel construct 1 One can consider both tasks to be performed and goals to achieve a certain state of the world.",
                "A <br>task</br> can be considered a goal of achieving the state of the <br>task</br> having been performed, and a goal can be considered a task of bringing about that state of the world.",
                "We adopt the latter view and use <br>task</br> to also refer to goals. 8 978-81-904262-7-5 (RPS) c 2007 IFAAMAS fails (common approaches include either letting the other branch run to completion unhindered or dropping it completely).",
                "In this paper we discuss in detail the incorporation of abort cleanup methods into the agent execution cycle, providing a unified approach to failure and abort.",
                "A key feature of our procedure-based approach is that we allow each plan to execute some particular code on a failure and on an abort.",
                "This allows a plan to attempt to ensure a stable, known state, and possibly to recover some resources and otherwise clean up before exiting.",
                "Accordingly, a central technical challenge is to manage the orderly execution of the appropriate clean-up code.",
                "We show how aborts can be smoothly introduced into a BDI-style architecture, and for the first time we give an operational semantics for aborting in the abstract agent language CAN [23, 17].",
                "This allows us to specify an appropriate level of detail for the execution model, without focusing on the specific constructs of any one agent system such as JACK [2], Jadex [14], Jason [6], or SPARK [9].",
                "Our focus is on a single agent, complementary to related work that considers exception handling for single- and multiagent systems (e.g., [22, 5, 6]).",
                "This paper is organized as follows.",
                "In Section 2 we give an example of the consequences of aborting a <br>task</br>, and in Section 3 we discuss some circumstances under which aborts should occur, and the appropriate representation and invocation procedures.",
                "In Section 4 we show how we can use CAN to formally specify the behaviour of an aborted plan.",
                "Section 5 discusses related work, and in Section 6 we present our conclusions and future work. 2.",
                "MOTIVATING EXAMPLE Alice is a knowledge worker assisted by a learning, personal assistive agent such as CALO [11].",
                "Alice plans to attend the IJCAI conference later in the year, and her CALO agent adopts the <br>task</br> of Support Meeting Submission (SMS) to assist her.",
                "CALOs plan for an SMS <br>task</br> in the case of a conference submission consists of the following sub-tasks: 1.",
                "Allocate a Paper Number (APN) to be used for administrative purposes in the company. 2.",
                "Track Writing Abstract (TWA): keep track of Alices progress in preparing an abstract. 3.",
                "Apply For Clearance (AFC) for publication from Alices manager based on the abstract and conference details. 4.",
                "Track Writing Paper (TWP): keep track of Alices progress in writing the paper. 5.",
                "Handle Paper Submission (HPS): follow company internal procedures for submitting a paper to a conference.",
                "These steps must be performed in order, with the exception of steps 3 (AFC) and 4 (TWP), which may be performed in parallel.",
                "Similarly, CALO can perform the <br>task</br> Apply For Clearance (AFC) by a plan consisting of: 1.",
                "Send Clearance Request (SCR) to Alices manager. 2.",
                "Wait For Response (WFR) from the manager. 3.",
                "Confirm that the response was positive, and fail otherwise.",
                "Now suppose that a change in circumstances causes Alice to reconsider her travel plans while she is writing the paper.",
                "Alice will no longer be able to attend IJCAI.",
                "She therefore instructs her CALO agent to abort the SMS <br>task</br>.",
                "Aborting the <br>task</br> implies aborting both the SMS plan and the AFC subplan.",
                "Aborting the first plan requires CALO to notify the paper number registry that the allocated paper number is obsolete, which it can achieve by the Cancel Paper Number (CPN) <br>task</br>2 Aborting the second plan requires CALO to notify Alices manager that Alice no longer requires clearance for publication, which CALO can achieve by invoking the Cancel Clearance Request (CCR) <br>task</br>.",
                "We note a number of important observations from the example.",
                "First, the decision to abort a particular course of action can come from the internal deliberations of the agent (such as reasoning about priorities in a conflict over resources), or from external sources (such as another agent cancelling a commitment), as in this example.",
                "In this paper we only touch on the problem of determining whether a <br>task</br> or plan should be aborted, instead concentrating on determining the appropriate actions once this decision is made.",
                "Hence, our objective is to determine how to incorporate aborting mechanisms into the standard execution cycle rather than determine what should be aborted and when.",
                "Second, once the decision is made to abort the attempt to submit a paper, there are some actions the agent should take, such as cancelling the clearance request.",
                "In other words, aborting a <br>task</br> is not simply a matter of dropping the <br>task</br> and associated active plans: there are some clean up actions that may need to be done.",
                "This is similar to the case for failure, in that there may also be actions to take when a <br>task</br> or plan fails.",
                "In both cases, note that it is not simply a matter of the agent undo-ing its actions to date; indeed, this may be neither possible (since the agent acts in a situated world and its actions change world state) nor desirable (depending on the semantics of the <br>task</br>).",
                "Rather, cleaning up involves compensation via forward recovery actions [3].",
                "Third, there is a distinction between aborting a <br>task</br> and aborting a plan.",
                "In the former case, it is clear that all plans being executed to perform the <br>task</br> should be aborted; in the latter case, it may be that there are better alternatives to the current plan and one of these should be attempted.",
                "Hence, plan aborting or failure does not necessarily lead to <br>task</br> aborting or failure.",
                "Fourth, given that tasks may contain sub-tasks, which may contain further sub-tasks, it is necessary for a parent <br>task</br> to wait until its children have finished their abort methods.",
                "This is the source of one of the technical challenges that we address: determining the precise sequence of actions once a parent <br>task</br> or plan is aborted. 3.",
                "ABORTING TASKS AND PLANS As we have alluded to, failure and aborting are related concepts.",
                "They both cause the execution of existing plans to cease and, consequentially, the agent to reflect over its current tasks and intentions.",
                "Failure and aborting, however, differ in the way they arise.",
                "In the case of failure, the trigger to cease execution of a <br>task</br> or plan comes from below, that is, the failure of sub-tasks or lower-level plans.",
                "In the case of aborting, the trigger comes from above, that is, the tasks and the parent plans that initiated a plan.",
                "In BDI-style systems such as JACK and SPARK, an agents domain knowledge includes a pre-defined plan library of plan clauses.",
                "Each plan clause has a plan body, which is a program (i.e., combination of primitive actions, sub-tasks, etc.) that can be executed in response to a <br>task</br> or other event should the plan clauses context condition be satisfied.",
                "The agent selects and executes instances of plan clauses to perform its tasks.",
                "There can be more than one applicable plan clause and, in the event that one fails, another applicable one may be attempted.",
                "Plans may have sub-tasks that must succeed 2 CALO needs only drop the TWA and TWP tasks to abort them: for the sake of simplicity we suppose no explicit clean up of its internal state is necessary.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 9 for the plan to succeed.",
                "In such systems, a plan failure occurs if one of the actions or sub-tasks within the plan fails.",
                "The agents action upon plan failure depends on its nature: for example, the agent may declare the <br>task</br> to have failed if one plan has been tried and resulted in failure, or it may retry alternate plans and declare (indeed, must declare) <br>task</br> failure only if all possible alternate plans to perform the task have been tried and resulted in failure.",
                "Observe that, while <br>task</br> failure can follow from plan failure or a sequence of plan failures, plan failure need not lead to <br>task</br> failure provided the agent can successfully complete an alternate plan.",
                "Moreover, <br>task</br> failure can also arise separately from plan failure, if the agent decides to abort the <br>task</br>.",
                "Our approach associates an abort-method with each plan.",
                "This enables the programmer to specify dedicated compensation actions according to how the agent is attempting to perform the <br>task</br>.",
                "Note that our abort-methods can be arbitrary programs and so can invoke tasks that may be performed dynamically in the usual BDI fashion, i.e., the clean-up is not limited to executing a predetermined set of actions.",
                "The question remains which abort-method should be invoked, and in what manner.",
                "Given the complexity of agent action spaces, it is not possible nor desirable to enumerate a static set of rules.",
                "Rather, the agent will invoke its abort-methods dynamically according to the state of execution and its own internal events.",
                "An alternative to attaching an abort-method to each plan is to attach such methods to each atomic action.",
                "We choose the former because: (1) action-level abort-methods would incur a greater overhead, (2) plans are meant to be designed as single cohesive units and are the unit of deliberation in BDI systems, and (3) the cleanup methods for failure in current systems are attached to plans.",
                "In order to understand how the agents abort processing should function, we consider three situations where it is sensible for an agent to consider aborting some of its tasks and plans: 1.",
                "When a <br>task</br> succeeds or fails because of an external factor other than the agent itself, the plan currently executed to perform the <br>task</br> should be aborted.",
                "For example, suppose company policy changes so that employees of Alices seniority automatically have clearance for publishing papers.",
                "Since Alice now has clearance for publishing her paper, CALO can abort the plan for Apply For Clearance.",
                "In doing so it must invoke the abort-method, in this case thus performing Cancel Clearance Request.3 2.",
                "When two or more sub-programs are executed in parallel, if one fails then the others should be aborted, given that the failure of one branch leads to the failure of the overall <br>task</br>.",
                "For example, suppose that part-way through writing the paper, Alice realizes that there is a fatal flaw in her results, and so notifies CALO that she will not be able to complete the paper by the deadline.",
                "The failure of the Track Writing Paper <br>task</br> should cause the Apply For Clearance <br>task</br> being executed in parallel to be aborted. 3.",
                "When an execution event alters the importance of an existing <br>task</br> or intention, the agent should deliberate over whether the existing plan(s) should continue.",
                "For example, suppose that Alice tasks CALO with a new, high-priority <br>task</br> to purchase a replacement laptop, but that Alice lacks enough funds to both purchase the laptop and to attend IJCAI.",
                "Reasoning over resource requirements [20, 10] will cause the agent to realize 3 If there is any difference between how to abort a <br>task</br> that is externally performed versus how to abort one that is now known to be impossible, the abort-method can detect the circumstances and handle the situation as appropriate. that it cannot successfully complete both tasks.",
                "Given that the new <br>task</br> has greater importance, a rational agent will evaluate its best course of action and may decide to abortor at least suspend - the existing <br>task</br> of submitting a paper and intentions derived from it [12].",
                "The operational semantics we provide in Section 4 for aborting tasks and plans captures the first two situations above.",
                "The third situation involves deliberating over the importance of a <br>task</br>, which depends on various factors such as <br>task</br> priority.",
                "Although this deliberation is beyond the scope of this paper, it is a complementary topic of our future work.",
                "Note that the above situations apply to achievement goals, for which the <br>task</br> is completed when a particular state of the world is brought about (e.g., ensure we have clearance).",
                "Different forms of reasoning apply to other goal types [4] such as maintenance goals [1], where the goal is satisfied by maintaining a state of the world for some period of time (e.g., maintain $100 in cash).",
                "Abort Method Representation The intent of aborting a <br>task</br> or plan is that the <br>task</br> or plan and all its children cease to execute, and that appropriate clean-up methods are performed as required.",
                "In contrast to offline planning systems, BDI agents are situated: they perform online deliberation and their actions change the state of the world.",
                "As a result, the effects of many actions cannot be simply undone.",
                "Moreover, the undo process may cause adverse effects.",
                "Therefore, the clean-up methods that we specify are forward recovery procedures that attempt to ensure a stable state and that also may, if possible, recover resources.",
                "The common plan representation in BDI-style systems such as JACK and SPARK includes a failure-method, which is the designated clean-up method invoked when the plan fails.",
                "To this, we add the abort-method, which is invoked if the plan is to be aborted.",
                "In our example, the abort-method for the plan for Support Meeting Submission consists of invoking the sub-<br>task</br> Cancel Paper Number.",
                "The abort-method need not explicitly abort Apply For Clearance, because the agent will invoke the abort-method for the subtask appropriately, as we outline below.",
                "The assumption here is that, like the failure-method, the programmer of the agent system has the opportunity to specify a sensible abort-method that takes into consideration the point in the plan at which the abort is to be executed.",
                "For any plan, the abort-method is optional: if no abort-method is specified, the agent takes no specific action for this plan.",
                "However, the agents default behavioural rules still apply, for example, whether to retry an alternate plan for the parent <br>task</br>.",
                "Note that an explicit representation of the clean-up methods for tasks is not required, since tasks are performed by executing some plan or plans.",
                "Hence, aborting a <br>task</br> means aborting the current plan that is executed to perform that <br>task</br>, as we next describe.",
                "Abort Method Invocation We now informally lay out the agents action upon aborting plans and tasks.",
                "When a plan P is aborted: 1.",
                "Abort each sub-<br>task</br> that is an active child of P. An active child is one that was triggered by P and is currently in execution. 2.",
                "When there are no more active children, invoke the abort method of plan P. 3.",
                "Indicate a plan failure to TP , the parent <br>task</br> of P. We note here that if the parent <br>task</br> TP is not to be aborted then the agent may choose another applicable plan to satisfy TP . 10 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) When a <br>task</br> (or sub-<br>task</br>) T is aborted: 1.",
                "Abort the current active plan to satisfy T (if any). 2.",
                "When there are no more active child processes, drop the <br>task</br>.",
                "The agent thus no longer pursues T. 3.",
                "Note here that when the current active plan for performing T is aborted, no other applicable plans to perform T should be tried as it is the <br>task</br> that is to be aborted.",
                "In order to prevent infinitely cascading clean-up efforts, we assume that abort-methods will never be aborted nor fail.",
                "In reality, however, an abort-method may fail.",
                "In this case, lacking a more sophisticated handling mechanism, the agent simply stops executing the failed abort-method with no further deliberation.",
                "The assumption we make is thus not a reflection of the full complexity of reality, but one that is pragmatic in terms of the agent execution cycle; the approach to failure-handling of [21] makes the same assumption.",
                "In systems such as SPARK, the programmer can specify an alternative behaviour for a failed failure- or abort-method by means of meta-level procedures.",
                "We also assume that failure- and abort-methods terminate in finite time. 4.",
                "OPERATIONAL SEMANTICS We provide the semantics for the <br>task</br> and plan failure and aborting processes outlined above.",
                "We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the goal adoption and dropping mechanisms.",
                "The extensions also simplified the semantics in the earlier work.",
                "We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1.",
                "Following a presentation of the operational semantics of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present. 4.1 CAN Language CAN is a high-level agent language, in a spirit similar to that of AgentSpeak [15] and Kinnys Ψ [7], both of which attempt to extract the essence of a class of implemented BDI agent systems.",
                "CAN provides an explicit goal construct that captures both the declarative and procedural aspects of a goal.",
                "Goals are persistent in CAN in that, when a plan fails, another applicable plan is attempted.",
                "This equates to the default failure handling mechanism typically found in implemented BDI systems such as JACK [2].",
                "In practical systems, tasks are typically translated into events that trigger the execution of some plans.",
                "This is also true in the CAN language, but, in order to maintain the persistence of goals, a goal construct is introduced.",
                "This is denoted by Goal ` φs, P, φf ´ , where φs is the success condition that determines when the goal is considered achieved, φf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once φs or φf become true.",
                "An agents behavior is specified by a plan library, denoted by Π, that consists of a collection of plan clauses of the form e : c ← P, where e is an event, c is a context condition (a logical formula over the agents beliefs that must be true in order for the plan to be applicable)4 and P is the plan body.",
                "The plan body is a program that is defined recursively as follows: P ::= act | +b | −b | ?φ | !e | P1; P2 | P1 P2 | Goal ` φs, P1, φf ´ | P1 P2 | {ψ1 : P1, . . . , ψn : Pn} | nil 4 An omitted c is equivalent to true.",
                "Δ = {ψiθ : Piθ | e : ψi ← Pi ∈ Π ∧ θ = mgu(e, e )} B, !e −→ B, Δ Event ψi : Pi ∈ Δ B |= ψi B, Δ −→ B, Pi Δ \\ {ψi : Pi} Select B, P1 −→ B, (P1 P2) −→ B, P2 fail B, P1 −→ B , P1 B, (P1; P2) −→ B , (P ; P2) Sequence B, P1 −→ B , P B, (P1 P2) −→ B , (P P2) Parallel1 B, P2 −→ B , P B, (P1 P2) −→ B , (P P1) Parallel2 Figure 1: Operational rules of CAN. where P1, . . . , Pn are themselves programs, act is a primitive action that is not further specified, and +b and −b are operations to add and delete beliefs.",
                "The belief base contains ground belief atoms in the form of first-order relations but could be orthogonally extended to other logics.",
                "It is assumed that well-defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ∪ {b}), and to delete a belief from a belief set (B \\ {b}). ?φ is a test for condition φ, and !e5 is an event6 that is posted from within the program.",
                "The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (Goal ` φs, P, φf ´ ).",
                "The above defines the user language.",
                "In addition, a set of auxiliary compound forms are used internally when assigning semantics to constructs. nil is the basic (terminating) program.",
                "When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 : P1, . . . , cn : Pn ).",
                "The other auxiliary compound form, , is a choice operator dual to sequencing: P1 P2 executes P1 and then executes P2 only if P1 failed.",
                "A summary of the operational semantics for CAN in line with [23] and following some of the simplifications of [17] is as follows.",
                "A basic configuration S = B, G, Γ consists of the current belief base B of the agent, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention).",
                "A transition S0 −→ S1 specifies that executing S0 for a single step yields configuration S1.",
                "S0 −→∗ Sn is the usual reflexive transitive closure of −→: Sn is the result of one or more singlestep transitions.",
                "A derivation rule S −→ Sr S −→ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator).",
                "Figure 1 gives some of the operational rules.",
                "The Event rule handles <br>task</br> events by collecting all relevant plan clauses for the event in question: for each plan clause e : ψi ← Pi, if there is a most general unifier, θ = mgu(e, e ) of e and the event in 5 Where it is obvious that e is an event we will sometimes exclude the exclamation mark for readability. 6 Typically an achievement goal.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 11 B |= φs B, Goal ` φs, P, φf ´ −→ B, true Gs B |= φf B, Goal ` φs, P, φf ´ −→ B, fail Gf P = Goal ` φs, P , φf ´ P = P1 £ P2 B |= φs ∨ φf B, P −→ B, Goal ` φs, P £ P , φf ´ GI P = P1 £ P2 B |= φs ∨ φf B, P1 −→ B , P B, Goal ` φs, P, φf ´ −→ B , Goal ` φs, P £ P2, φf ´ GS P = P1 £ P2 B |= φs ∨ φf P1 ∈ {true, fail} B, Goal ` φs, P, φf ´ −→ B, Goal ` φs, P2 £ P2, φf ´ GR Figure 2: Rules for goals in CAN. question, then the rule constructs a guarded alternative ψiθ : Piθ.",
                "The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives: program P Δ states that program P should be tried first, falling back to the remaining alternatives, Δ \\ P, if necessary.",
                "This rule and the fail rule together are used for failure handling: if the current program Pi from a plan clause for a <br>task</br> fails, rule fail is applied first, and then if possible, rule Select will choose another applicable alternative for the <br>task</br> if one exists.",
                "Rule Sequence handles sequencing of programs in the usual way.",
                "Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel.",
                "Figure 2 gives simplified rules for dealing with goals, in line with those presented in [17].",
                "The first rule states that a goal succeeds when φs become true; the second rule states that a goal fails when φf become true.",
                "The third rule GI initializes the execution of a goal-program by updating the goal base and setting the program in the goal to P £ P; the first P is to be executed and the second P is used to keep track of the original program for the goal.",
                "The fourth rule GS executes a single step of the goal-program.",
                "The final rule GR restarts the original program (encoded as P2 of pair P1 £ P2) whenever the current program is finished but the desired and still possible goal has not yet been achieved. 4.2 Aborting Intentions and Handling Failure We next introduce the ability to specify handler programs, in the form of failure- and abort-methods, that deal with the clean-up required when a given program respectively fails or is aborted.",
                "We do not associate failure- and abort- methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies failure- and abort- methods for an arbitrary program.",
                "The FAb(P, PF , PA) construct executes the program P. Should P fail, it executes the failure handling program PF ; should P need to be aborted, it executes the abort handling program PA.",
                "Thus to add failure- and abort- methods PF and PA to a plan clause e : c ← P, we write e : c ← FAb(P, PF , PA).",
                "With the introduction of the ability to abort programs, we modify the parallel construct to allow the failure of one branch to abort the other.",
                "We must take into consideration the possible existence of abort-methods in the aborted branch.",
                "Similarly, with the Goal construct we can no longer completely abandon the program the goal contains as soon as the success or failure condition holds; we must now take into consideration the existence of any abort-methods applicable to the program.",
                "We provide the semantics of an augmented agent language containing the FAb construct by defining a source transformation, similar to macro-expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN.",
                "The one non-standard extension to CAN is a wait-until-condition construct.",
                "We explain this simple modification of the parallel construct below when we come to translation of the Goal construct.",
                "First we describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases: the FAb, parallel, and Goal constructs.",
                "A key issue is that the FAb constructs may be nested, either directly or indirectly.",
                "Let us call each instantiation of the construct at execution time a possible abort point (pap).",
                "Where these constructs are nested, it is important that before the failure- or abort-method of a parent pap is executed, the failure- or abort-methods programs of the children paps are executed first, as described earlier in Section 3.",
                "The need to coordinate the execution of the abort-methods of nested paps requires that there be some way to identify the parents and children of a particular pap.",
                "We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e : c ← P with a plan clause e(v) : c ← μv(P) where v is a free variable, not previously present in the plan clause.",
                "This variable is used to keep track of the context of execution.",
                "The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context.",
                "For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1].",
                "We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51.",
                "This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v .",
                "For most CAN constructs, the context variable is unused or passed unchanged: μv(act) = act μv(+b) = +b μv(−b) = −b μv(nil) = nil μv(!e) = !e(v) μv(P1; P2) = μv(P1); μv(P2) μv(P1 P2) = μv(P1) μv(P2) μv( ψ1 : P1, . . . , ψn : Pn ) = ψ1 : μv(P1), . . . , ψn : μv(Pn) It remains to specify the transformation μv(·) in three cases: the FAb, parallel, and Goal constructs.",
                "These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context.",
                "Let us introduce the primitive action prependID(v, v ) that creates a new pap identifier and prepends it to list v giving list v .",
                "We also introduce the following predicates: • a(v) - the pap v is currently active. • abort(v) - the pap v should be aborted (after aborting all of its descendants). 7 An alternative would be to use meta-level predicates that reflect the current state of the intention structure. 12 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) • f(v) - the program of pap v has failed. • ancestorof(v, v ) ≡ v = v ∨ ancestorof(v, tail(v ))the pap v is an ancestor of pap v . • nac(v) ≡ ¬∃v . (a(v ) ∧ ancestorof(v, v ) ∧ v = v ) - v has no active children. • sa(v) ≡ ∃v .abort(v ) ∧ ancestorof(v , v) - we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active. • san(v) ≡ sa(v) ∧ nac(v) - we should abort v now if we should abort v and v has no active children.",
                "First let us consider the case of the FAb construct.",
                "The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v. We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context.",
                "We need to make sure that we retract the belief that v is active at the end, i.e., −a(v ).",
                "We use the Goal construct to allow us to drop the execution of a program within a pap v when it is necessary to abort.",
                "While executing the program P, we know that we need to drop P and invoke its abort-method if some ancestor of P has been told to abort.",
                "This is represented by the predicate sa(v ) being true.",
                "However, we need to make sure that we do this only after every child pap has had the chance to invoke its abort-method and all these abort-methods have completed: if we drop the program too soon, then execution of the abort-methods of the children will also be dropped.",
                "Therefore, the condition we actually use in the Goal construct to test when to drop the program is san(v ).",
                "This condition relies on the fact that as the children paps complete, they remove the relevant a facts.",
                "Our use of the Goal construct is for its ability to drop the execution of a program when conditions are met.",
                "To leave aside the repeat execution until a condition is met aspect, we must ensure that the success or failure condition of the construct is satisfied once the execution of the program succeeds or fails.",
                "We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on failure, and by having the appropriate success and failure conditions on the Goal.",
                "Hence, if the Goal construct fails, then the program either was aborted or it failed.",
                "We invoke the relevant failure- or abort- method, retract the a(v ) fact, and then fail.",
                "Putting all this together, we formally define μv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agents plan library: prependID(v, v ); +a(v ); Goal ( ¬a(v ), (μv (P); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); μv(PA)) μv(PF )); −a(v ); ?false) Second, we must transform the parallel operator to ensure that the failure of one branch safely aborts the other.",
                "Here we construct two new contexts, v and v , from the existing context v. If one branch fails, it must abort the other branch.",
                "At the end, if either branch was aborted, then we must fail.",
                "Let v and v be new variables distinct from any other in the agents plan library.",
                "We define μv(P1 P2) to be: prependID(v, v ); prependID(v, v ); +a(v ); +a(v ); ( Goal (¬a(v ), (μv (P1); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal (¬a(v ), (μv (P2); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ); ?¬abort(v ) ∧ ¬abort(v ) Finally, we need to modify occurrences of the Goal construct in two ways: first, to make sure that the abort handling methods are not bypassed when the success or failure conditions are satisfied, and second, to trigger the aborting of the contained program when either the success or failure conditions are satisfied.",
                "To transform the Goal construct we need to extend standard CAN with a wait-until-condition construct.",
                "The construct φ : P does not execute P until φ becomes true.",
                "We augment the CAN language with the following rules for the guard operator :: B |= φ B, G, (φ : P −→ B, G, P :true B |= φ B, G, (φ : P) −→ B, G, (φ : P) :false In order to specify μv(Goal ` φs, P, φf ´ ), we generate a new pap and execute the program within the Goal construct in this new context.",
                "We must ensure that belief a(v ) is removed whether the Goal succeeds or fails.",
                "We shift the success and failure condition of the Goal construct into a parallel branch using the wait-until-condition construct, and modify the Goal to use the should abort now condition san(v ) as the success condition.",
                "The waiting branch will trigger the abort of the program should either the success or failure condition be met.",
                "To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active.",
                "Let v be a new variable distinct from any other in the agents plan library.",
                "We define μv(Goal ` φs, P, φf ´ ) to be: prependID(v, v ); +a(v ); ( Goal ( san(v ), μv (P), false) ; −a(v ); ?φs ) φs ∨ φf ∨ ¬a(v ) : +abort(v ) ) The program P will be repeatedly executed until san(v ) becomes true.",
                "There are two ways this can occur.",
                "First, if either the success condition φs or the failure condition φf becomes true, then the second branch of the parallel construct executes.",
                "This causes abort(v ) to become true, and, after the descendant paps abortmethods are executed, san(v ) becomes true.",
                "In this case, P is now dropped, the a(v ) is removed, and the entire construct succeeds or fails based on φs.",
                "The second way for san(v ) to become true is if v or one of its ancestors is aborted.",
                "In this case, once the descendant paps abort-methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming φs is false). 4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2.",
                "We will express tasks by events, for example, the <br>task</br> Allocate a Paper Number we express as the event APN.",
                "Let the output of the Apply For Clearance <br>task</br> be Y or N, indicating the approval or not of Alices manager, respectively.",
                "Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively: SMS(m) : isconf(m) ← FAb(!APN; !TWA; (!AFC !TWP); !HPS, !CPN, !CPN) AFC : true ← FAb(!SCR; !WFR(r); ?r = Y, nil, !CCR) Note that Support Meeting Submission has a parameter m, the meeting of interest (IJCAI, in our example), while Apply For Clearance has no parameters.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two.",
                "Let v and v denote new variables.",
                "Then we have as the translated plan clause: AFC(v ) : true ← prependID(v , v ); +a(v ); Goal ( ¬a(v ), (!SCR(v ); !WFR(r, v ); ?r = Y; −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CCR(v )) nil); −a(v ); ?false) We can see that an extra context parameter has been added to each <br>task</br> and that the old plan body now appears inside a Goal construct.",
                "Should the old plan body succeed, belief a(v ) is retracted, causing the Goal to succeed.",
                "If the old plan body fails, or if the <br>task</br> is to be aborted, the Goal construct fails.",
                "This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and failure.",
                "The translation of the first plan clause, for SMS, is more complex, because of the parallel construct that introduces nested paps: SMS(m, v) : isconf(m) ← prependID(v, v ); +a(v ); Goal ( ¬a(v ), ((!APN(v ); !TWA(v ); prependID(v , v ); prependID(v , v ); +a(v ); +a(v ); ( Goal ( ¬a(v ), (!AFC(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal ( ¬a(v ), (!TWP(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ) ; ?¬abort(v ) ∧ ¬abort(v ); !HPS(v ); −a(v )) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CPN(v)) !CPN(v)); −a(v ); ?false) Here we can see that if the <br>task</br> !TWP(v ) fails then f(v ) will be asserted, failing the Goal construct that contains it, and leading to abort(v ) being asserted.",
                "If the !WFR(r, v ) <br>task</br> in the expansion of !AFC(v ) is still executing and has no active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true.",
                "This set of conditions will cause the Goal construct in the first plan clause to fail, dropping execution of !WFR(r, v ).",
                "The <br>task</br> !CCR(v ) will be executed.",
                "Once this <br>task</br> completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first Goal construct of the second plan clause to fail.",
                "While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely automated, according to the rules set out in Section 4.2.",
                "The translated plan clauses, with the semantics of CAN augmented by our waituntil-condition construct, thus specify the operation of the agent to handle both failure and aborting for the example. 5.",
                "RELATED WORK Plan failure is handled in the extended version of AgentSpeak found in the Jason system [6].",
                "Failure clean-up plans are triggered from goal deletion events −!g.",
                "Such plans, similar to our failure methods, are designed for the agent to effect state changes (act to undo its earlier actions) prior to possibly attempting another plan to achieve the failed goal g. Given Jasons constructs for dropping a goal with an indication of whether or not to try an alternate plan for it, H¨ubner et al. [6] provide an informal description of how a Jason agent modifies its intention structure when a goal failure event occurs.",
                "In a goal deletion plan, the programmer can specify any undo actions and whether to attempt the goal again.",
                "If no goal deletion plan is provided, Jasons default behaviour is to not reattempt the goal.",
                "Failure handling is applied only to plans triggered by addition of an achievement or test goal; in particular, goal deletion events are not posted for failure of a goal deletion plan.",
                "Further, the informal semantics of [6] do not consider parallel sub-goals (i.e., the CAN construct), since such execution is not part of Jasons language.",
                "The implementation of H¨ubner et al. [6] requires Jasons internal actions.",
                "A requirement for implementing our approach is a reflective capability in the BDI agent implementation.",
                "Suitable implementations of the BDI formalism are JACK [2], Jadex [14], and SPARK [9].",
                "All three allow meta level methods that are cued by meta events such as goal adoption or plan failure, and offer introspective capabilities over goal and intention states.",
                "Such meta level facilities are also required by the approach of Unruh et al. [21], who define goal-based semantic compensation for an agent.",
                "Failure-handling goals are invoked according to failurehandling strategy rules, by a dedicated agent Failure Handling Component (FHC) that tracks <br>task</br> execution.",
                "These goals are specified by the agent programmer and attached to tasks, much like our FAb(P, PF , PA) construct associates failure and abort methods with a plan P. Note, however, that in contrast to both [6] and our semantics, [21] attach the failure-handling knowledge at the goal, not plan, level.",
                "Their failure-handling goals may consist of stabilization goals that perform localized, immediate clean-up to restore the agents state to a known, stable state, and compensation goals that perform undo actions.",
                "Compensation goals are triggered on aborting a goal, and so not necessarily on goal failure (i.e., if the FHC directs the agent to retry the failed goal and the retry is successful).",
                "The FHC approach is defined at the goal level in order to facilitate abstract specification of failure-handling knowledge; the FHC decides when to address a failure and what to do (i.e., what failurehandling goals to invoke), separating this knowledge from the how of implementing corrective actions (i.e., what plan to execute to meet the adopted failure-handling goal).",
                "This contrasts with simplistic plan-level failure handling in which the what and how are intermingled in domain <br>task</br> knowledge.",
                "While our approach is defined at the plan level, our extended BDI semantics provides for the separation of execution and failure handling.",
                "Further, the FHC explicitly maintains data structures to track agent execution.",
                "We leverage the existing execution structures and self-reflective ability of a BDI agent to accomplish both aborting and failure handling without additional overhead.",
                "FHCs failure-handling strategy rules (e.g., whether to retry a failed goal) are replaced by instructions in our PF and PA plans, together with meta-level default failure handlers according to the agents nature (e.g., blindly committed).",
                "The FHC approach is independent of the architecture of the agent itself, in contrast to our work that is dedicated to the BDI formalism (although not tied to any one agent system).",
                "Thus no formal semantics are developed in [21]; the FHCs operation is given as 14 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) a state-based protocol.",
                "This approach, together with state checkpointing, is used for multi-agent systems in [22].",
                "The resulting architecture embeds their failure handling approach within a pair processing architecture for agent crash recovery.",
                "Other work on multi-agent exception handling includes AOEXs distributed exception handling agents [5], and the similar sentinels of [8].",
                "In both cases, failure-handling logic and knowledge are decoupled from the agents; by contrast, while separating exception handling from domain-specific knowledge, Unruh et al.s FHC and our approach both retain failure-handling logic within an agent. 6.",
                "CONCLUSION AND FUTURE WORK The tasks and plans of an agent may not successfully reach completion, either by the choice of the agent to abort them (perhaps at the request of another agent to do so), or by unbidden factors that lead to failure.",
                "In this paper we have presented a procedure-based approach that incorporates aborting tasks and plans into the deliberation cycle of a BDI-style agent, thus providing a unified approach to failure and abort.",
                "Our primary contribution is an analysis of the requirements on the operation of the agent for aborting tasks and plans, and a corresponding operational semantics for aborting in the abstract agent language CAN.",
                "We are planning to implement an instance of our approach in the SPARK agent system [9]; in particular, the work of this paper will be the basis for SPARKs abort handling mechanism.",
                "We are also developing an analysis tool for our extended version of CAN as a basis for experimentation.",
                "An intelligent agent will not only gracefully handle unsuccessful tasks and plans, but also will deliberate over its cognitive attitudes to decide its next course of action.",
                "We have assumed the default behaviour of a BDI-style agent, according to its nature: for instance, to retry alternatives to a failed plan until one succeeds or until no alternative plans remain (in which case to fail the <br>task</br>).",
                "Future work is to place our approach in service of more dynamic agent reasoning, such as the introspection that an agent capable of reasoning over <br>task</br> interaction effects and resource requirements can accomplish [19, 12].",
                "Related to this is determining the cost of aborting a <br>task</br> or plan, and using this as an input to the deliberation process.",
                "This would in particular influence the commitment the agent has towards a particular <br>task</br>: the higher the cost, the greater the commitment.",
                "Our assumption that abort-methods do not fail, as discussed above, is a pragmatic one.",
                "However, this is an issue worthy of further exploration, either to develop weaker assumptions that are also practical, or to analyze conditions under which our assumption is realistic.",
                "A further item of interest is extending our approach to failure and abort to maintenance goals [1].",
                "For such goals a different operational semantics for abort is necessary than for achievement goals, to match the difference in semantics of the goals themselves.",
                "Acknowledgements We thank Lin Padgham and the anonymous reviewers for their comments.",
                "The first author acknowledges the support of the Australian Research Council and Agent Oriented Software under grant LP0453486.",
                "The work of the two authors at SRI International was supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No.",
                "NBCHD030010.",
                "Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the view of DARPA or the Department of Interior-National Business Center. 7.",
                "REFERENCES [1] L. Braubach, A. Pokahr, D. Moldt, and W. Lamersdorf.",
                "Goal representation for BDI Agent systems.",
                "In Proc. of Second Intl.",
                "Workshop on Programming Multi-Agent Systems (ProMAS04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson, and A. Lucas.",
                "JACK intelligent agents - components for intelligent agents in Java.",
                "AgentLink News, Issue 2, 1999. [3] M. G. Chessell, C. Vines, D. Butler, C. M. Ferreira, and P. Henderson.",
                "Extending the concept of transaction compensation.",
                "IBM Systems Journal, 41(4), 2002. [4] M. Dastani, M. B. van Riemsdijk, and J.-J.",
                "C. Meyer.",
                "Goal types in agent programming.",
                "In Proc. of AAMAS06, 2006. [5] S. Entwisle, S. Loke, S. Krishnaswamy, and E. Kendall.",
                "Aoex: An agent-based exception handling framework for building reliable, distributed, open software systems.",
                "In Proc. of Seventh Joint Conf. on Knowledge-Based Software Engineering, 2006. [6] J. F. H¨ubner, R. H. Bordini, and M. Wooldridge.",
                "Programming declarative goals using plan patterns.",
                "In Proc. of 4th Intl.",
                "Workshop on Declarative Agent Languages and Technologies, 2006. [7] D. Kinny.",
                "The Psi calculus: an algebraic agent language.",
                "In Proc. of ATAL01, 2001. [8] M. Klein, J.",
                "A. Rodr´ıguez-Aguilar, and C. Dellarocas.",
                "Using domain-independent exception handling services to enable robust open multi-agent systems: The case of agent death.",
                "Autonomous Agents and Multi-Agent Systems, 7(1-2):179-189, 2003. [9] D. Morley and K. Myers.",
                "The SPARK agent framework.",
                "In Proc. of AAMAS04, 2004. [10] D. Morley, K. L. Myers, and N. Yorke-Smith.",
                "Continuous refinement of agent resource estimates.",
                "In Proc. of AAMAS06, 2006. [11] K. Myers, P. Berry, J. Blythe, K. Conley, M. Gervasio, D. McGuinness, D. Morley, A. Pfeffer, M. Pollack, and M. Tambe.",
                "An intelligent personal assistant for <br>task</br> and time management.",
                "AI Magazine, 28, 2007.",
                "To appear. [12] K. L. Myers and N. Yorke-Smith.",
                "A cognitive framework for delegation to an assistive user agent.",
                "In Proc. of AAAI 2005 Fall Symposium on Mixed-Initiative Problem-Solving Assistants, 2005. [13] L. Padgham and M. Winikoff.",
                "Developing Intelligent Agent Systems: A Practical Guide.",
                "John Wiley and Sons, 2004. [14] A. Pokahr, L. Braubach, and W. Lamersdorf.",
                "Jadex: A BDI reasoning engine.",
                "In R. Bordini, M. Dastani, J. Dix, and A. E. F. Seghrouchni, editors, Multi-Agent Programming.",
                "Springer, 2005. [15] A. S. Rao.",
                "AgentSpeak(L): BDI agents speak out in a logical computable language.",
                "In Proc. of Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World, 1996. [16] A. S. Rao and M. P. Georgeff.",
                "An abstract architecture for rational agents.",
                "In Proc. of KR92, 1992. [17] S. Sardi˜na, L. de Silva, and L. Padgham.",
                "Hierarchical planning in BDI agent programming languages: a formal approach.",
                "In Proc. of AAMAS06, 2006. [18] S. Sardina and L. Padgham.",
                "Goals in the context of bdi plan failure and planning.",
                "In Proc. of AAMAS07, 2007. [19] J. Thangarajah, L. Padgham, and M. Winikoff.",
                "Detecting and exploiting positive goal interaction in intelligent agents.",
                "In Proc. of AAMAS03, 2003. [20] J. Thangarajah, M. Winikoff, L. Padgham, and K. Fischer.",
                "Avoiding resource conflicts in intelligent agents.",
                "In Proc. of ECAI-02, 2002. [21] A. Unruh, J. Bailey, and K. Ramamohanarao.",
                "A framework for goal-based semantic compensation in agent systems.",
                "In Proc. of First Intl.",
                "Workshop on Safety and Security in Multi-Agent Systems, 2004. [22] A. Unruh, H. Harjadi, J. Bailey, and K. Ramamohanarao.",
                "Semantic-compensation-based recovery management in multi-agent systems.",
                "In Proc. of Second IEEE Symposium on Multi-Agent Security and Survivability (IEEE MAS&S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland, and J. Thangarajah.",
                "Declarative and procedural goals in intelligent agent systems.",
                "In Proc. of KR02, 2002.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 15"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Además, tales agentes deberían poder tomar decisiones racionales sobre un curso de acción apropiado, que puede incluir abortar una \"tarea\" o plan, ya sea como resultado de las deliberaciones de los agentes o potencialmente a pedido de otro agente.tarea",
                "Discutimos algunas condiciones bajo las cuales abortar una \"tarea o plan es apropiado, y cómo determinar las consecuencias de dicha decisión.tarea",
                "Esto puede implicar buscar planes alternativos para una \"tarea\" particular, volver a programar tareas para cumplir mejor con las limitaciones de recursos, eliminar algunas tareas o alguna otra decisión que aumentará la probabilidad de éxito [12, 14].tarea",
                "Además de lidiar con el fracaso, una capacidad importante de un agente inteligente es poder abortar una \"tarea\" o plan particular.tarea",
                "Esta decisión puede deberse a una deliberación interna (como el agente que cree que la \"tarea\" ya no se puede lograr, o que una \"tarea\" conflictiva ahora tiene una prioridad más alta) o debido a un factor externo (como otro agente que altereun compromiso o un cambio en el medio ambiente).tarea",
                "Abortar una \"tarea\" o plan es distinto de su falla.tarea",
                "Una \"tarea\" puede considerarse un objetivo de lograr el estado de la \"tarea\" que se ha realizado, y un objetivo puede considerarse una tarea de lograr ese estado del mundo.tarea",
                "Adoptamos la última vista y usamos \"tarea\" para referirnos también a los objetivos.8 978-81-904262-7-5 (RPS) c 2007 Ifaamas falla (los enfoques comunes incluyen dejar que la otra rama funcione hasta la finalización sin obstáculos o deja caerlo por completo).tarea",
                "En la Sección 2 damos un ejemplo de las consecuencias de abortar una \"tarea\", y en la Sección 3 discutimos algunas circunstancias bajo las cuales deben ocurrir los abortos, y los procedimientos de representación e invocación apropiados.tarea",
                "Alice planea asistir a la conferencia IJCAI más adelante en el año, y su agente de CALO adopta la \"tarea\" de presentación de la reunión de apoyo (SMS) para ayudarla.tarea",
                "El plan CALOS para una \"tarea\" de SMS en el caso de la presentación de una conferencia consiste en las siguientes subasinas: 1. Tarea",
                "Del mismo modo, CALO puede realizar la \"tarea\" solicitar la autorización (AFC) mediante un plan que consiste en: 1. Tarea",
                "Por lo tanto, le indica a su agente de CALO a abortar la \"tarea\" de SMS.tarea",
                "Abortar la \"tarea\" implica abortar tanto el plan SMS como el subplan de la AFC.tarea",
                "El aborto del primer plan requiere que CALO notifique al registro del número de papel que el número de papel asignado es obsoleto, lo que puede lograr mediante el número de papel de cancelación (Tarea \"de la\" tarea \"2 que aborta el segundo plan requiere que CALO notifique a Alices que Alice ya noRequiere autorización para la publicación, que CALO puede lograr invocando la \"tarea\" de la solicitud de autorización de cancelación (CCR).tarea",
                "En este artículo solo tocamos el problema de determinar si una \"tarea\" o un plan debe ser abortado, en lugar de concentrarnos en determinar las acciones apropiadas una vez que se toma esta decisión.tarea",
                "En otras palabras, abortar una \"tarea\" no es simplemente una cuestión de eliminar la \"tarea\" y los planes activos asociados: hay algunas acciones de limpieza que deben hacerse.tarea",
                "Esto es similar al caso del fracaso, ya que también puede haber acciones que tomar cuando falla una \"tarea\" o plan.tarea",
                "En ambos casos, tenga en cuenta que no se trata simplemente de que el agente deshace sus acciones hasta la fecha;De hecho, esto no es posible (ya que el agente actúa en un mundo situado y sus acciones cambian el estado mundial) ni deseable (dependiendo de la semántica de la \"tarea\").tarea",
                "Tercero, hay una distinción entre abortar una \"tarea\" y abortar un plan.tarea",
                "En el primer caso, está claro que todos los planes ejecutados para realizar la \"tarea\" deben ser abortados;En el último caso, puede ser que haya mejores alternativas al plan actual y se debe intentar una de ellas.tarea",
                "Por lo tanto, el plan de aborto o falla no necesariamente conduce a la \"tarea\" que aborta o falla.tarea",
                "Cuarto, dado que las tareas pueden contener subtareas, que pueden contener más subcartas, es necesario que una \"tarea\" de los padres espere hasta que sus hijos hayan terminado sus métodos de aborto.tarea",
                "Esta es la fuente de uno de los desafíos técnicos que abordamos: determinar la secuencia precisa de acciones una vez que se aborta una \"tarea o plan\" de los padres.3. Tarea",
                "En el caso de la falla, el desencadenante de cesar la ejecución de una \"tarea\" o plan viene de abajo, es decir, la falla de las subasinas o los planes de nivel inferior.tarea",
                "Cada cláusula del plan tiene un cuerpo del plan, que es un programa (es decir, una combinación de acciones primitivas, sub-tareas, etc.) que se puede ejecutar en respuesta a una \"tarea\" u otro evento en caso de que se satisfaga la condición de contexto de las cláusulas del plan.tarea",
                "La acción de los agentes al falla del plan depende de su naturaleza: por ejemplo, el agente puede declarar que la \"tarea\" ha fallado si un plan ha sido juzgado y ha resultado en una falla, o puede volver a intentar los planes alternativos y declarar (de hecho, debe declarar)Falla de \"tarea\" solo si todos los planes alternativos posibles para realizar la tarea se han probado y han resultado en una falla.tarea",
                "Observe que, mientras que la falla de la \"tarea\" puede seguir de la falla del plan o una secuencia de fallas del plan, la falla del plan no es necesario que la falla de la \"tarea\" siempre que el agente pueda completar con éxito un plan alternativo.tarea",
                "Además, la falla de la \"tarea\" también puede surgir por separado de la falla del plan, si el agente decide abortar la \"tarea\".tarea",
                "Esto permite al programador especificar acciones de compensación dedicadas de acuerdo con cómo el agente intenta realizar la \"tarea\".tarea",
                "Cuando una \"tarea\" tiene éxito o falla debido a un factor externo que no sea el agente mismo, el plan actualmente ejecutado para realizar la \"tarea\" debe ser abortado.tarea",
                "Cuando se ejecutan dos o más subprogramas en paralelo, si uno falla, los otros deben ser abortados, dado que la falla de una rama conduce a la falla de la \"tarea\" general.tarea",
                "La falla del documento de escritura de pista \"Tarea\" debe causar que la \"tarea\" de autorización se ejecute en paralelo para ser abortada.3. Tarea",
                "Cuando un evento de ejecución altera la importancia de una \"tarea\" o intención existente, el agente debe deliberar sobre si los planes existentes deben continuar.tarea",
                "Por ejemplo, suponga que Alice asigna a Calo con una nueva \"tarea\" de alta prioridad para comprar una computadora portátil de reemplazo, pero que Alice carece de fondos suficientes para comprar la computadora portátil y asistir a IJCAI.tarea",
                "El razonamiento sobre los requisitos de recursos [20, 10] hará que el agente se realice 3 si hay alguna diferencia entre cómo abortar una \"tarea\" que se realiza externamente versus cómo abortar uno que ahora se sabe que es imposible, el método de abortopuede detectar las circunstancias y manejar la situación según corresponda.que no puede completar con éxito ambas tareas.tarea",
                "Dado que la nueva \"tarea\" tiene mayor importancia, un agente racional evaluará su mejor curso de acción y puede decidir abortar al menos suspender, la \"tarea\" existente de enviar un documento e intenciones derivadas de él [12].tarea",
                "La tercera situación implica deliberar sobre la importancia de una \"tarea\", que depende de varios factores como la prioridad de \"tarea\".tarea",
                "Tenga en cuenta que las situaciones anteriores se aplican a los objetivos de logro, para lo cual se completa la \"tarea\" cuando se produce un estado particular del mundo (por ejemplo, asegúrese de que tengamos autorización).tarea",
                "La representación del método de aborto La intención de abortar una \"tarea\" o plan es que la \"tarea o plan y todos sus hijos dejen de ejecutar, y que los métodos de limpieza apropiados se realizan según sea necesario.tarea",
                "En nuestro ejemplo, el método de aborto para la presentación de la reunión del plan para el plan de apoyo consiste en invocar el número de papel de cancelación de la \"tarea\".tarea",
                "Sin embargo, las reglas de comportamiento predeterminadas de los agentes aún se aplican, por ejemplo, si volver a intentar un plan alternativo para la \"tarea\" principal.tarea",
                "Por lo tanto, abortar una \"tarea\" significa abortar el plan actual que se ejecuta para realizar esa \"tarea\", como describimos a continuación.tarea",
                "Abortar cada sub-\"tarea\" que es un niño activo de P. Un niño activo es desencadenado por P y actualmente está en ejecución.2. Tarea",
                "Indique una falla del plan para TP, la \"tarea\" principal de P. Notamos aquí que si la \"tarea\" de los padres no debe ser abortado, el agente puede elegir otro plan aplicable para satisfacer TP.10 El sexto intl.tarea",
                "Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) cuando se aborta una \"tarea\" (o sub- \"tarea) t: 1. Tarea",
                "Cuando no hay más procesos infantiles activos, deje caer la \"tarea\".tarea",
                "Tenga en cuenta aquí que cuando se aborta el plan activo actual para realizar T, no se debe probar otros planes aplicables para realizar T, ya que es la \"tarea\" que se abortará.tarea",
                "Semántica operativa Proporcionamos la semántica para la \"tarea\" y los procesos de falla y aborto del plan y aborto se describen anteriormente.tarea",
                "La regla del evento maneja los eventos de \"tarea\" mediante la recopilación de todas las cláusulas de plan relevantes para el evento en cuestión: para cada plan de la cláusula E: ψi ← Pi, si hay un unificador más general, θ = mgu (e, e) de e y elEvento en 5, donde es obvio que E es un evento, a veces excluye el signo de exclamación para la legibilidad.6 Típicamente un objetivo de logro.tarea",
                "Esta regla y la regla de falla se usan para el manejo de fallas: si el programa actual PI de una cláusula de plan para una \"tarea\" falla, primero se aplica la regla se aplica primero, y luego, si es posible, la regla seleccione elegir otra alternativa aplicable para el \"Tarea \"Si existe uno.tarea",
                "Expresaremos tareas por eventos, por ejemplo, la \"tarea\" asigna un número de papel que expresamos como el APN del evento.tarea",
                "Deje que la salida de la \"tarea\" de autorización se aplique o n o n, lo que indica la aprobación o no del gerente de alices, respectivamente.tarea",
                "Luego tenemos como la cláusula del plan traducido: AFC (V): Verdadero ← Prependid (V, V);+a (v);Objetivo (¬A (V), (! Scr (V);! Wfr (R, V) ;? R = Y; −a (V) +F (V)), San (V) ∨ F (V))(((? Sa (V);! Ccr (v)) nil); −a (v) ;? falso) Podemos ver que se ha agregado un parámetro de contexto adicional a cada \"tarea\" y que el cuerpo del plan anterior ahoraaparece dentro de una construcción de meta.tarea",
                "Si el cuerpo del plan antiguo falla, o si la \"tarea\" debe ser abortada, la construcción de objetivos falla.tarea",
                "La traducción de la primera cláusula de plan, para SMS, es más compleja, debido a la construcción paralela que introduce PAP anidadas: SMS (M, V): ISconf (M) ← Prependid (V, V);+a (v);Objetivo (¬A (V), ((! APN (V);! Twa (V); Prependid (V, V); Prependid (V, V); +A (V); +A (V); (Objetivo(¬A (v), (! Afc (v); −a (v) +f (v)), san (v) ∨ f (v)) ( +abort (v); −a (v)) objetivo(¬A (V), (! Twp (V); −a (V) +F (V)), San (V) ∨ F (V)) ( +Abort (V); −a (V)))));? ¬abort (v) ∧ ¬abort (V) ;! HPS (V); −a (V)) +F (V)), SAN (V) ∨ F (V)) ((((V (V (V (V (V (V));! Cpn (v))! Cpn (v)); −a (v);? Falso) Aquí podemos ver que si la \"tarea\"! Twp (v) falla, entonces f (v) se afirmará, fallaLa construcción de objetivos que lo contiene y hace que se aborta (v).tarea",
                "Si la \"tarea\" de! Wfr (R, V) en la expansión de! Afc (V) todavía se está ejecutando y no tiene PAPS activos, entonces SA (V) y SA (V) serán verdaderos;Sin embargo, solo San (V) y no San (V) será cierto.tarea",
                "Se ejecutará la \"Tarea\"! CCR (V).tarea",
                "Una vez que se completa esta \"tarea\", la creencia A (V) se retrae, lo que hace que San (V) se haga realidad, lo que lleva a la primera construcción de objetivos de la segunda cláusula del plan para fallar.tarea",
                "Los objetivos de manejo de fallas se invocan de acuerdo con las reglas de la estrategia de control de la falla, por un componente de manejo de falla de agente dedicado (FHC) que rastrea la ejecución de la \"tarea\".tarea",
                "Esto contrasta con el manejo simplista de falla a nivel de plan en el que se entremezcla el conocimiento de \"tarea\" de dominio.tarea",
                "Hemos asumido el comportamiento predeterminado de un agente de estilo BDI, de acuerdo con su naturaleza: por ejemplo, volver a intentar las alternativas a un plan fallido hasta que uno tenga éxito o hasta que no queden planes alternativos (en cuyo caso fallar la \"tarea\").tarea",
                "El trabajo futuro es colocar nuestro enfoque en el servicio del razonamiento de agentes más dinámicos, como la introspección que un agente capaz de razonar sobre los efectos de interacción de \"tarea\" y los requisitos de recursos pueden lograr [19, 12].tarea",
                "Relacionado con esto está determinando el costo de abortar una \"tarea\" o plan, y usar esto como una entrada al proceso de deliberación.tarea",
                "En particular, esto influiría en el compromiso que el agente tiene con una \"tarea\" particular: cuanto mayor sea el costo, mayor será el compromiso.tarea",
                "Un asistente personal inteligente para la \"tarea\" y la gestión del tiempo.tarea"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "goal": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Aborting Tasks in BDI Agents John Thangarajah, James Harland RMIT University Melbourne, Australia {johthan,jah}@cs.rmit.edu.au David Morley, Neil Yorke-Smith Artificial Intelligence Center, SRI International Menlo Park, CA 94025 U.S.A. {morley,nysmith}@ai.sri.com ABSTRACT Intelligent agents that are intended to work in dynamic environments must be able to gracefully handle unsuccessful tasks and plans.",
                "In addition, such agents should be able to make rational decisions about an appropriate course of action, which may include aborting a task or plan, either as a result of the agents own deliberations, or potentially at the request of another agent.",
                "In this paper we investigate the incorporation of aborts into a BDI-style architecture.",
                "We discuss some conditions under which aborting a task or plan is appropriate, and how to determine the consequences of such a decision.",
                "We augment each plan with an optional abort-method, analogous to the failure method found in some agent programming languages.",
                "We provide an operational semantics for the execution cycle in the presence of aborts in the abstract agent language CAN, which enables us to specify a BDI-based execution model without limiting our attention to a particular agent system (such as JACK, Jadex, Jason, or SPARK).",
                "A key technical challenge we address is the presence of parallel execution threads and of sub-tasks, which require the agent to ensure that the abort methods for each plan are carried out in an appropriate sequence.",
                "Categories and Subject Descriptors I.2.11 [ARTIFICIAL INTELLIGENCE]: Distributed Artificial Intelligence-Intelligent agents General Terms Design, Reliability, Theory 1.",
                "INTRODUCTION Intelligent agents generally work in complex, dynamic environments, such as air traffic control or robot navigation, in which the success of any particular action or plan cannot be guaranteed [13].",
                "Accordingly, dealing with failure is fundamental to agent programming, and is an important element of agent characteristics such as robustness, flexibility, and persistence [21].",
                "In agent architectures inspired by the Belief-Desire-Intention (BDI) model [16], these properties are often characterized by the interactions between beliefs, goals, and plans [2].1 In general, an agent that wishes to achieve a particular set of tasks will pursue a number of plans concurrently.",
                "When failures occur, the choice of plans will be reviewed.",
                "This may involve seeking alternative plans for a particular task, re-scheduling tasks to better comply with resource constraints, dropping some tasks, or some other decision that will increase the likelihood of success [12, 14].",
                "Failures can occur for a number of reasons, and it is often not possible to predict these in advance, either because of the complexity of the system or because changes in the environment invalidate some earlier decisions.",
                "Given this need for deliberation about failed tasks or plans, failure deliberation is commonly built into the agents execution cycle.",
                "Besides dealing with failure, an important capability of an intelligent agent is to be able to abort a particular task or plan.",
                "This decision may be due to an internal deliberation (such as the agent believing the task can no longer be achieved, or that some conflicting task now has a higher priority) or due to an external factor (such as another agent altering a commitment, or a change in the environment).",
                "Aborting a task or plan is distinct from its failure.",
                "Failure reflects an inability to perform and does not negate the need to perform - for example, a reasonable response to failure may be to try again.",
                "In contrast, aborting says nothing about the ability to perform; it merely eliminates the need.",
                "Failure propagates from the bottom up, whereas aborting propagates from the top down.",
                "The potential for concurrently executing sub-plans introduces different complexities for aborting and failure.",
                "For aborting, it means that multiple concurrent sub-plans may need to be aborted as the abort is propagated down.",
                "For failure, it means that parallel-sibling plans may need to be aborted as the failure is propagated up.",
                "There has been a considerable amount of work on plan failures (such as detecting and resolving resource conflicts [20, 10]) and most agent systems incorporate some notion of failure handling.",
                "However, there has been relatively little work on the development of abort techniques beyond simple dropping of currently intended plans and tasks, which does not deal with the clean-up required.",
                "As one consequence, most agent systems are quite limited in their treatment of the situation where one branch of a parallel construct 1 One can consider both tasks to be performed and goals to achieve a certain state of the world.",
                "A task can be considered a <br>goal</br> of achieving the state of the task having been performed, and a <br>goal</br> can be considered a task of bringing about that state of the world.",
                "We adopt the latter view and use task to also refer to goals. 8 978-81-904262-7-5 (RPS) c 2007 IFAAMAS fails (common approaches include either letting the other branch run to completion unhindered or dropping it completely).",
                "In this paper we discuss in detail the incorporation of abort cleanup methods into the agent execution cycle, providing a unified approach to failure and abort.",
                "A key feature of our procedure-based approach is that we allow each plan to execute some particular code on a failure and on an abort.",
                "This allows a plan to attempt to ensure a stable, known state, and possibly to recover some resources and otherwise clean up before exiting.",
                "Accordingly, a central technical challenge is to manage the orderly execution of the appropriate clean-up code.",
                "We show how aborts can be smoothly introduced into a BDI-style architecture, and for the first time we give an operational semantics for aborting in the abstract agent language CAN [23, 17].",
                "This allows us to specify an appropriate level of detail for the execution model, without focusing on the specific constructs of any one agent system such as JACK [2], Jadex [14], Jason [6], or SPARK [9].",
                "Our focus is on a single agent, complementary to related work that considers exception handling for single- and multiagent systems (e.g., [22, 5, 6]).",
                "This paper is organized as follows.",
                "In Section 2 we give an example of the consequences of aborting a task, and in Section 3 we discuss some circumstances under which aborts should occur, and the appropriate representation and invocation procedures.",
                "In Section 4 we show how we can use CAN to formally specify the behaviour of an aborted plan.",
                "Section 5 discusses related work, and in Section 6 we present our conclusions and future work. 2.",
                "MOTIVATING EXAMPLE Alice is a knowledge worker assisted by a learning, personal assistive agent such as CALO [11].",
                "Alice plans to attend the IJCAI conference later in the year, and her CALO agent adopts the task of Support Meeting Submission (SMS) to assist her.",
                "CALOs plan for an SMS task in the case of a conference submission consists of the following sub-tasks: 1.",
                "Allocate a Paper Number (APN) to be used for administrative purposes in the company. 2.",
                "Track Writing Abstract (TWA): keep track of Alices progress in preparing an abstract. 3.",
                "Apply For Clearance (AFC) for publication from Alices manager based on the abstract and conference details. 4.",
                "Track Writing Paper (TWP): keep track of Alices progress in writing the paper. 5.",
                "Handle Paper Submission (HPS): follow company internal procedures for submitting a paper to a conference.",
                "These steps must be performed in order, with the exception of steps 3 (AFC) and 4 (TWP), which may be performed in parallel.",
                "Similarly, CALO can perform the task Apply For Clearance (AFC) by a plan consisting of: 1.",
                "Send Clearance Request (SCR) to Alices manager. 2.",
                "Wait For Response (WFR) from the manager. 3.",
                "Confirm that the response was positive, and fail otherwise.",
                "Now suppose that a change in circumstances causes Alice to reconsider her travel plans while she is writing the paper.",
                "Alice will no longer be able to attend IJCAI.",
                "She therefore instructs her CALO agent to abort the SMS task.",
                "Aborting the task implies aborting both the SMS plan and the AFC subplan.",
                "Aborting the first plan requires CALO to notify the paper number registry that the allocated paper number is obsolete, which it can achieve by the Cancel Paper Number (CPN) task.2 Aborting the second plan requires CALO to notify Alices manager that Alice no longer requires clearance for publication, which CALO can achieve by invoking the Cancel Clearance Request (CCR) task.",
                "We note a number of important observations from the example.",
                "First, the decision to abort a particular course of action can come from the internal deliberations of the agent (such as reasoning about priorities in a conflict over resources), or from external sources (such as another agent cancelling a commitment), as in this example.",
                "In this paper we only touch on the problem of determining whether a task or plan should be aborted, instead concentrating on determining the appropriate actions once this decision is made.",
                "Hence, our objective is to determine how to incorporate aborting mechanisms into the standard execution cycle rather than determine what should be aborted and when.",
                "Second, once the decision is made to abort the attempt to submit a paper, there are some actions the agent should take, such as cancelling the clearance request.",
                "In other words, aborting a task is not simply a matter of dropping the task and associated active plans: there are some clean up actions that may need to be done.",
                "This is similar to the case for failure, in that there may also be actions to take when a task or plan fails.",
                "In both cases, note that it is not simply a matter of the agent undo-ing its actions to date; indeed, this may be neither possible (since the agent acts in a situated world and its actions change world state) nor desirable (depending on the semantics of the task).",
                "Rather, cleaning up involves compensation via forward recovery actions [3].",
                "Third, there is a distinction between aborting a task and aborting a plan.",
                "In the former case, it is clear that all plans being executed to perform the task should be aborted; in the latter case, it may be that there are better alternatives to the current plan and one of these should be attempted.",
                "Hence, plan aborting or failure does not necessarily lead to task aborting or failure.",
                "Fourth, given that tasks may contain sub-tasks, which may contain further sub-tasks, it is necessary for a parent task to wait until its children have finished their abort methods.",
                "This is the source of one of the technical challenges that we address: determining the precise sequence of actions once a parent task or plan is aborted. 3.",
                "ABORTING TASKS AND PLANS As we have alluded to, failure and aborting are related concepts.",
                "They both cause the execution of existing plans to cease and, consequentially, the agent to reflect over its current tasks and intentions.",
                "Failure and aborting, however, differ in the way they arise.",
                "In the case of failure, the trigger to cease execution of a task or plan comes from below, that is, the failure of sub-tasks or lower-level plans.",
                "In the case of aborting, the trigger comes from above, that is, the tasks and the parent plans that initiated a plan.",
                "In BDI-style systems such as JACK and SPARK, an agents domain knowledge includes a pre-defined plan library of plan clauses.",
                "Each plan clause has a plan body, which is a program (i.e., combination of primitive actions, sub-tasks, etc.) that can be executed in response to a task or other event should the plan clauses context condition be satisfied.",
                "The agent selects and executes instances of plan clauses to perform its tasks.",
                "There can be more than one applicable plan clause and, in the event that one fails, another applicable one may be attempted.",
                "Plans may have sub-tasks that must succeed 2 CALO needs only drop the TWA and TWP tasks to abort them: for the sake of simplicity we suppose no explicit clean up of its internal state is necessary.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 9 for the plan to succeed.",
                "In such systems, a plan failure occurs if one of the actions or sub-tasks within the plan fails.",
                "The agents action upon plan failure depends on its nature: for example, the agent may declare the task to have failed if one plan has been tried and resulted in failure, or it may retry alternate plans and declare (indeed, must declare) task failure only if all possible alternate plans to perform the task have been tried and resulted in failure.",
                "Observe that, while task failure can follow from plan failure or a sequence of plan failures, plan failure need not lead to task failure provided the agent can successfully complete an alternate plan.",
                "Moreover, task failure can also arise separately from plan failure, if the agent decides to abort the task.",
                "Our approach associates an abort-method with each plan.",
                "This enables the programmer to specify dedicated compensation actions according to how the agent is attempting to perform the task.",
                "Note that our abort-methods can be arbitrary programs and so can invoke tasks that may be performed dynamically in the usual BDI fashion, i.e., the clean-up is not limited to executing a predetermined set of actions.",
                "The question remains which abort-method should be invoked, and in what manner.",
                "Given the complexity of agent action spaces, it is not possible nor desirable to enumerate a static set of rules.",
                "Rather, the agent will invoke its abort-methods dynamically according to the state of execution and its own internal events.",
                "An alternative to attaching an abort-method to each plan is to attach such methods to each atomic action.",
                "We choose the former because: (1) action-level abort-methods would incur a greater overhead, (2) plans are meant to be designed as single cohesive units and are the unit of deliberation in BDI systems, and (3) the cleanup methods for failure in current systems are attached to plans.",
                "In order to understand how the agents abort processing should function, we consider three situations where it is sensible for an agent to consider aborting some of its tasks and plans: 1.",
                "When a task succeeds or fails because of an external factor other than the agent itself, the plan currently executed to perform the task should be aborted.",
                "For example, suppose company policy changes so that employees of Alices seniority automatically have clearance for publishing papers.",
                "Since Alice now has clearance for publishing her paper, CALO can abort the plan for Apply For Clearance.",
                "In doing so it must invoke the abort-method, in this case thus performing Cancel Clearance Request.3 2.",
                "When two or more sub-programs are executed in parallel, if one fails then the others should be aborted, given that the failure of one branch leads to the failure of the overall task.",
                "For example, suppose that part-way through writing the paper, Alice realizes that there is a fatal flaw in her results, and so notifies CALO that she will not be able to complete the paper by the deadline.",
                "The failure of the Track Writing Paper task should cause the Apply For Clearance task being executed in parallel to be aborted. 3.",
                "When an execution event alters the importance of an existing task or intention, the agent should deliberate over whether the existing plan(s) should continue.",
                "For example, suppose that Alice tasks CALO with a new, high-priority task to purchase a replacement laptop, but that Alice lacks enough funds to both purchase the laptop and to attend IJCAI.",
                "Reasoning over resource requirements [20, 10] will cause the agent to realize 3 If there is any difference between how to abort a task that is externally performed versus how to abort one that is now known to be impossible, the abort-method can detect the circumstances and handle the situation as appropriate. that it cannot successfully complete both tasks.",
                "Given that the new task has greater importance, a rational agent will evaluate its best course of action and may decide to abortor at least suspend - the existing task of submitting a paper and intentions derived from it [12].",
                "The operational semantics we provide in Section 4 for aborting tasks and plans captures the first two situations above.",
                "The third situation involves deliberating over the importance of a task, which depends on various factors such as task priority.",
                "Although this deliberation is beyond the scope of this paper, it is a complementary topic of our future work.",
                "Note that the above situations apply to achievement goals, for which the task is completed when a particular state of the world is brought about (e.g., ensure we have clearance).",
                "Different forms of reasoning apply to other <br>goal</br> types [4] such as maintenance goals [1], where the <br>goal</br> is satisfied by maintaining a state of the world for some period of time (e.g., maintain $100 in cash).",
                "Abort Method Representation The intent of aborting a task or plan is that the task or plan and all its children cease to execute, and that appropriate clean-up methods are performed as required.",
                "In contrast to offline planning systems, BDI agents are situated: they perform online deliberation and their actions change the state of the world.",
                "As a result, the effects of many actions cannot be simply undone.",
                "Moreover, the undo process may cause adverse effects.",
                "Therefore, the clean-up methods that we specify are forward recovery procedures that attempt to ensure a stable state and that also may, if possible, recover resources.",
                "The common plan representation in BDI-style systems such as JACK and SPARK includes a failure-method, which is the designated clean-up method invoked when the plan fails.",
                "To this, we add the abort-method, which is invoked if the plan is to be aborted.",
                "In our example, the abort-method for the plan for Support Meeting Submission consists of invoking the sub-task Cancel Paper Number.",
                "The abort-method need not explicitly abort Apply For Clearance, because the agent will invoke the abort-method for the subtask appropriately, as we outline below.",
                "The assumption here is that, like the failure-method, the programmer of the agent system has the opportunity to specify a sensible abort-method that takes into consideration the point in the plan at which the abort is to be executed.",
                "For any plan, the abort-method is optional: if no abort-method is specified, the agent takes no specific action for this plan.",
                "However, the agents default behavioural rules still apply, for example, whether to retry an alternate plan for the parent task.",
                "Note that an explicit representation of the clean-up methods for tasks is not required, since tasks are performed by executing some plan or plans.",
                "Hence, aborting a task means aborting the current plan that is executed to perform that task, as we next describe.",
                "Abort Method Invocation We now informally lay out the agents action upon aborting plans and tasks.",
                "When a plan P is aborted: 1.",
                "Abort each sub-task that is an active child of P. An active child is one that was triggered by P and is currently in execution. 2.",
                "When there are no more active children, invoke the abort method of plan P. 3.",
                "Indicate a plan failure to TP , the parent task of P. We note here that if the parent task TP is not to be aborted then the agent may choose another applicable plan to satisfy TP . 10 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) When a task (or sub-task) T is aborted: 1.",
                "Abort the current active plan to satisfy T (if any). 2.",
                "When there are no more active child processes, drop the task.",
                "The agent thus no longer pursues T. 3.",
                "Note here that when the current active plan for performing T is aborted, no other applicable plans to perform T should be tried as it is the task that is to be aborted.",
                "In order to prevent infinitely cascading clean-up efforts, we assume that abort-methods will never be aborted nor fail.",
                "In reality, however, an abort-method may fail.",
                "In this case, lacking a more sophisticated handling mechanism, the agent simply stops executing the failed abort-method with no further deliberation.",
                "The assumption we make is thus not a reflection of the full complexity of reality, but one that is pragmatic in terms of the agent execution cycle; the approach to failure-handling of [21] makes the same assumption.",
                "In systems such as SPARK, the programmer can specify an alternative behaviour for a failed failure- or abort-method by means of meta-level procedures.",
                "We also assume that failure- and abort-methods terminate in finite time. 4.",
                "OPERATIONAL SEMANTICS We provide the semantics for the task and plan failure and aborting processes outlined above.",
                "We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the <br>goal</br> adoption and dropping mechanisms.",
                "The extensions also simplified the semantics in the earlier work.",
                "We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1.",
                "Following a presentation of the operational semantics of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present. 4.1 CAN Language CAN is a high-level agent language, in a spirit similar to that of AgentSpeak [15] and Kinnys Ψ [7], both of which attempt to extract the essence of a class of implemented BDI agent systems.",
                "CAN provides an explicit <br>goal</br> construct that captures both the declarative and procedural aspects of a <br>goal</br>.",
                "Goals are persistent in CAN in that, when a plan fails, another applicable plan is attempted.",
                "This equates to the default failure handling mechanism typically found in implemented BDI systems such as JACK [2].",
                "In practical systems, tasks are typically translated into events that trigger the execution of some plans.",
                "This is also true in the CAN language, but, in order to maintain the persistence of goals, a <br>goal</br> construct is introduced.",
                "This is denoted by <br>goal</br> ` φs, P, φf ´ , where φs is the success condition that determines when the <br>goal</br> is considered achieved, φf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once φs or φf become true.",
                "An agents behavior is specified by a plan library, denoted by Π, that consists of a collection of plan clauses of the form e : c ← P, where e is an event, c is a context condition (a logical formula over the agents beliefs that must be true in order for the plan to be applicable)4 and P is the plan body.",
                "The plan body is a program that is defined recursively as follows: P ::= act | +b | −b | ?φ | !e | P1; P2 | P1 P2 | <br>goal</br> ` φs, P1, φf ´ | P1 P2 | {ψ1 : P1, . . . , ψn : Pn} | nil 4 An omitted c is equivalent to true.",
                "Δ = {ψiθ : Piθ | e : ψi ← Pi ∈ Π ∧ θ = mgu(e, e )} B, !e −→ B, Δ Event ψi : Pi ∈ Δ B |= ψi B, Δ −→ B, Pi Δ \\ {ψi : Pi} Select B, P1 −→ B, (P1 P2) −→ B, P2 fail B, P1 −→ B , P1 B, (P1; P2) −→ B , (P ; P2) Sequence B, P1 −→ B , P B, (P1 P2) −→ B , (P P2) Parallel1 B, P2 −→ B , P B, (P1 P2) −→ B , (P P1) Parallel2 Figure 1: Operational rules of CAN. where P1, . . . , Pn are themselves programs, act is a primitive action that is not further specified, and +b and −b are operations to add and delete beliefs.",
                "The belief base contains ground belief atoms in the form of first-order relations but could be orthogonally extended to other logics.",
                "It is assumed that well-defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ∪ {b}), and to delete a belief from a belief set (B \\ {b}). ?φ is a test for condition φ, and !e5 is an event6 that is posted from within the program.",
                "The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (<br>goal</br> ` φs, P, φf ´ ).",
                "The above defines the user language.",
                "In addition, a set of auxiliary compound forms are used internally when assigning semantics to constructs. nil is the basic (terminating) program.",
                "When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 : P1, . . . , cn : Pn ).",
                "The other auxiliary compound form, , is a choice operator dual to sequencing: P1 P2 executes P1 and then executes P2 only if P1 failed.",
                "A summary of the operational semantics for CAN in line with [23] and following some of the simplifications of [17] is as follows.",
                "A basic configuration S = B, G, Γ consists of the current belief base B of the agent, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention).",
                "A transition S0 −→ S1 specifies that executing S0 for a single step yields configuration S1.",
                "S0 −→∗ Sn is the usual reflexive transitive closure of −→: Sn is the result of one or more singlestep transitions.",
                "A derivation rule S −→ Sr S −→ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator).",
                "Figure 1 gives some of the operational rules.",
                "The Event rule handles task events by collecting all relevant plan clauses for the event in question: for each plan clause e : ψi ← Pi, if there is a most general unifier, θ = mgu(e, e ) of e and the event in 5 Where it is obvious that e is an event we will sometimes exclude the exclamation mark for readability. 6 Typically an achievement <br>goal</br>.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 11 B |= φs B, <br>goal</br> ` φs, P, φf ´ −→ B, true Gs B |= φf B, <br>goal</br> ` φs, P, φf ´ −→ B, fail Gf P = Goal ` φs, P , φf ´ P = P1 £ P2 B |= φs ∨ φf B, P −→ B, Goal ` φs, P £ P , φf ´ GI P = P1 £ P2 B |= φs ∨ φf B, P1 −→ B , P B, Goal ` φs, P, φf ´ −→ B , Goal ` φs, P £ P2, φf ´ GS P = P1 £ P2 B |= φs ∨ φf P1 ∈ {true, fail} B, Goal ` φs, P, φf ´ −→ B, Goal ` φs, P2 £ P2, φf ´ GR Figure 2: Rules for goals in CAN. question, then the rule constructs a guarded alternative ψiθ : Piθ.",
                "The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives: program P Δ states that program P should be tried first, falling back to the remaining alternatives, Δ \\ P, if necessary.",
                "This rule and the fail rule together are used for failure handling: if the current program Pi from a plan clause for a task fails, rule fail is applied first, and then if possible, rule Select will choose another applicable alternative for the task if one exists.",
                "Rule Sequence handles sequencing of programs in the usual way.",
                "Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel.",
                "Figure 2 gives simplified rules for dealing with goals, in line with those presented in [17].",
                "The first rule states that a <br>goal</br> succeeds when φs become true; the second rule states that a <br>goal</br> fails when φf become true.",
                "The third rule GI initializes the execution of a <br>goal</br>-program by updating the <br>goal</br> base and setting the program in the goal to P £ P; the first P is to be executed and the second P is used to keep track of the original program for the goal.",
                "The fourth rule GS executes a single step of the <br>goal</br>-program.",
                "The final rule GR restarts the original program (encoded as P2 of pair P1 £ P2) whenever the current program is finished but the desired and still possible <br>goal</br> has not yet been achieved. 4.2 Aborting Intentions and Handling Failure We next introduce the ability to specify handler programs, in the form of failure- and abort-methods, that deal with the clean-up required when a given program respectively fails or is aborted.",
                "We do not associate failure- and abort- methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies failure- and abort- methods for an arbitrary program.",
                "The FAb(P, PF , PA) construct executes the program P. Should P fail, it executes the failure handling program PF ; should P need to be aborted, it executes the abort handling program PA.",
                "Thus to add failure- and abort- methods PF and PA to a plan clause e : c ← P, we write e : c ← FAb(P, PF , PA).",
                "With the introduction of the ability to abort programs, we modify the parallel construct to allow the failure of one branch to abort the other.",
                "We must take into consideration the possible existence of abort-methods in the aborted branch.",
                "Similarly, with the <br>goal</br> construct we can no longer completely abandon the program the <br>goal</br> contains as soon as the success or failure condition holds; we must now take into consideration the existence of any abort-methods applicable to the program.",
                "We provide the semantics of an augmented agent language containing the FAb construct by defining a source transformation, similar to macro-expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN.",
                "The one non-standard extension to CAN is a wait-until-condition construct.",
                "We explain this simple modification of the parallel construct below when we come to translation of the <br>goal</br> construct.",
                "First we describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases: the FAb, parallel, and <br>goal</br> constructs.",
                "A key issue is that the FAb constructs may be nested, either directly or indirectly.",
                "Let us call each instantiation of the construct at execution time a possible abort point (pap).",
                "Where these constructs are nested, it is important that before the failure- or abort-method of a parent pap is executed, the failure- or abort-methods programs of the children paps are executed first, as described earlier in Section 3.",
                "The need to coordinate the execution of the abort-methods of nested paps requires that there be some way to identify the parents and children of a particular pap.",
                "We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e : c ← P with a plan clause e(v) : c ← μv(P) where v is a free variable, not previously present in the plan clause.",
                "This variable is used to keep track of the context of execution.",
                "The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context.",
                "For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1].",
                "We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51.",
                "This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v .",
                "For most CAN constructs, the context variable is unused or passed unchanged: μv(act) = act μv(+b) = +b μv(−b) = −b μv(nil) = nil μv(!e) = !e(v) μv(P1; P2) = μv(P1); μv(P2) μv(P1 P2) = μv(P1) μv(P2) μv( ψ1 : P1, . . . , ψn : Pn ) = ψ1 : μv(P1), . . . , ψn : μv(Pn) It remains to specify the transformation μv(·) in three cases: the FAb, parallel, and <br>goal</br> constructs.",
                "These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context.",
                "Let us introduce the primitive action prependID(v, v ) that creates a new pap identifier and prepends it to list v giving list v .",
                "We also introduce the following predicates: • a(v) - the pap v is currently active. • abort(v) - the pap v should be aborted (after aborting all of its descendants). 7 An alternative would be to use meta-level predicates that reflect the current state of the intention structure. 12 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) • f(v) - the program of pap v has failed. • ancestorof(v, v ) ≡ v = v ∨ ancestorof(v, tail(v ))the pap v is an ancestor of pap v . • nac(v) ≡ ¬∃v . (a(v ) ∧ ancestorof(v, v ) ∧ v = v ) - v has no active children. • sa(v) ≡ ∃v .abort(v ) ∧ ancestorof(v , v) - we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active. • san(v) ≡ sa(v) ∧ nac(v) - we should abort v now if we should abort v and v has no active children.",
                "First let us consider the case of the FAb construct.",
                "The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v. We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context.",
                "We need to make sure that we retract the belief that v is active at the end, i.e., −a(v ).",
                "We use the <br>goal</br> construct to allow us to drop the execution of a program within a pap v when it is necessary to abort.",
                "While executing the program P, we know that we need to drop P and invoke its abort-method if some ancestor of P has been told to abort.",
                "This is represented by the predicate sa(v ) being true.",
                "However, we need to make sure that we do this only after every child pap has had the chance to invoke its abort-method and all these abort-methods have completed: if we drop the program too soon, then execution of the abort-methods of the children will also be dropped.",
                "Therefore, the condition we actually use in the <br>goal</br> construct to test when to drop the program is san(v ).",
                "This condition relies on the fact that as the children paps complete, they remove the relevant a facts.",
                "Our use of the <br>goal</br> construct is for its ability to drop the execution of a program when conditions are met.",
                "To leave aside the repeat execution until a condition is met aspect, we must ensure that the success or failure condition of the construct is satisfied once the execution of the program succeeds or fails.",
                "We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on failure, and by having the appropriate success and failure conditions on the <br>goal</br>.",
                "Hence, if the <br>goal</br> construct fails, then the program either was aborted or it failed.",
                "We invoke the relevant failure- or abort- method, retract the a(v ) fact, and then fail.",
                "Putting all this together, we formally define μv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agents plan library: prependID(v, v ); +a(v ); <br>goal</br> ( ¬a(v ), (μv (P); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); μv(PA)) μv(PF )); −a(v ); ?false) Second, we must transform the parallel operator to ensure that the failure of one branch safely aborts the other.",
                "Here we construct two new contexts, v and v , from the existing context v. If one branch fails, it must abort the other branch.",
                "At the end, if either branch was aborted, then we must fail.",
                "Let v and v be new variables distinct from any other in the agents plan library.",
                "We define μv(P1 P2) to be: prependID(v, v ); prependID(v, v ); +a(v ); +a(v ); ( <br>goal</br> (¬a(v ), (μv (P1); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) <br>goal</br> (¬a(v ), (μv (P2); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ); ?¬abort(v ) ∧ ¬abort(v ) Finally, we need to modify occurrences of the Goal construct in two ways: first, to make sure that the abort handling methods are not bypassed when the success or failure conditions are satisfied, and second, to trigger the aborting of the contained program when either the success or failure conditions are satisfied.",
                "To transform the <br>goal</br> construct we need to extend standard CAN with a wait-until-condition construct.",
                "The construct φ : P does not execute P until φ becomes true.",
                "We augment the CAN language with the following rules for the guard operator :: B |= φ B, G, (φ : P −→ B, G, P :true B |= φ B, G, (φ : P) −→ B, G, (φ : P) :false In order to specify μv(<br>goal</br> ` φs, P, φf ´ ), we generate a new pap and execute the program within the <br>goal</br> construct in this new context.",
                "We must ensure that belief a(v ) is removed whether the <br>goal</br> succeeds or fails.",
                "We shift the success and failure condition of the <br>goal</br> construct into a parallel branch using the wait-until-condition construct, and modify the <br>goal</br> to use the should abort now condition san(v ) as the success condition.",
                "The waiting branch will trigger the abort of the program should either the success or failure condition be met.",
                "To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active.",
                "Let v be a new variable distinct from any other in the agents plan library.",
                "We define μv(<br>goal</br> ` φs, P, φf ´ ) to be: prependID(v, v ); +a(v ); ( <br>goal</br> ( san(v ), μv (P), false) ; −a(v ); ?φs ) φs ∨ φf ∨ ¬a(v ) : +abort(v ) ) The program P will be repeatedly executed until san(v ) becomes true.",
                "There are two ways this can occur.",
                "First, if either the success condition φs or the failure condition φf becomes true, then the second branch of the parallel construct executes.",
                "This causes abort(v ) to become true, and, after the descendant paps abortmethods are executed, san(v ) becomes true.",
                "In this case, P is now dropped, the a(v ) is removed, and the entire construct succeeds or fails based on φs.",
                "The second way for san(v ) to become true is if v or one of its ancestors is aborted.",
                "In this case, once the descendant paps abort-methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming φs is false). 4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2.",
                "We will express tasks by events, for example, the task Allocate a Paper Number we express as the event APN.",
                "Let the output of the Apply For Clearance task be Y or N, indicating the approval or not of Alices manager, respectively.",
                "Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively: SMS(m) : isconf(m) ← FAb(!APN; !TWA; (!AFC !TWP); !HPS, !CPN, !CPN) AFC : true ← FAb(!SCR; !WFR(r); ?r = Y, nil, !CCR) Note that Support Meeting Submission has a parameter m, the meeting of interest (IJCAI, in our example), while Apply For Clearance has no parameters.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two.",
                "Let v and v denote new variables.",
                "Then we have as the translated plan clause: AFC(v ) : true ← prependID(v , v ); +a(v ); <br>goal</br> ( ¬a(v ), (!SCR(v ); !WFR(r, v ); ?r = Y; −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CCR(v )) nil); −a(v ); ?false) We can see that an extra context parameter has been added to each task and that the old plan body now appears inside a <br>goal</br> construct.",
                "Should the old plan body succeed, belief a(v ) is retracted, causing the <br>goal</br> to succeed.",
                "If the old plan body fails, or if the task is to be aborted, the <br>goal</br> construct fails.",
                "This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and failure.",
                "The translation of the first plan clause, for SMS, is more complex, because of the parallel construct that introduces nested paps: SMS(m, v) : isconf(m) ← prependID(v, v ); +a(v ); <br>goal</br> ( ¬a(v ), ((!APN(v ); !TWA(v ); prependID(v , v ); prependID(v , v ); +a(v ); +a(v ); ( <br>goal</br> ( ¬a(v ), (!AFC(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal ( ¬a(v ), (!TWP(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ) ; ?¬abort(v ) ∧ ¬abort(v ); !HPS(v ); −a(v )) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CPN(v)) !CPN(v)); −a(v ); ?false) Here we can see that if the task !TWP(v ) fails then f(v ) will be asserted, failing the Goal construct that contains it, and leading to abort(v ) being asserted.",
                "If the !WFR(r, v ) task in the expansion of !AFC(v ) is still executing and has no active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true.",
                "This set of conditions will cause the <br>goal</br> construct in the first plan clause to fail, dropping execution of !WFR(r, v ).",
                "The task !CCR(v ) will be executed.",
                "Once this task completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first <br>goal</br> construct of the second plan clause to fail.",
                "While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely automated, according to the rules set out in Section 4.2.",
                "The translated plan clauses, with the semantics of CAN augmented by our waituntil-condition construct, thus specify the operation of the agent to handle both failure and aborting for the example. 5.",
                "RELATED WORK Plan failure is handled in the extended version of AgentSpeak found in the Jason system [6].",
                "Failure clean-up plans are triggered from <br>goal</br> deletion events −!g.",
                "Such plans, similar to our failure methods, are designed for the agent to effect state changes (act to undo its earlier actions) prior to possibly attempting another plan to achieve the failed <br>goal</br> g. Given Jasons constructs for dropping a <br>goal</br> with an indication of whether or not to try an alternate plan for it, H¨ubner et al. [6] provide an informal description of how a Jason agent modifies its intention structure when a goal failure event occurs.",
                "In a <br>goal</br> deletion plan, the programmer can specify any undo actions and whether to attempt the <br>goal</br> again.",
                "If no <br>goal</br> deletion plan is provided, Jasons default behaviour is to not reattempt the <br>goal</br>.",
                "Failure handling is applied only to plans triggered by addition of an achievement or test <br>goal</br>; in particular, <br>goal</br> deletion events are not posted for failure of a goal deletion plan.",
                "Further, the informal semantics of [6] do not consider parallel sub-goals (i.e., the CAN construct), since such execution is not part of Jasons language.",
                "The implementation of H¨ubner et al. [6] requires Jasons internal actions.",
                "A requirement for implementing our approach is a reflective capability in the BDI agent implementation.",
                "Suitable implementations of the BDI formalism are JACK [2], Jadex [14], and SPARK [9].",
                "All three allow meta level methods that are cued by meta events such as <br>goal</br> adoption or plan failure, and offer introspective capabilities over <br>goal</br> and intention states.",
                "Such meta level facilities are also required by the approach of Unruh et al. [21], who define <br>goal</br>-based semantic compensation for an agent.",
                "Failure-handling goals are invoked according to failurehandling strategy rules, by a dedicated agent Failure Handling Component (FHC) that tracks task execution.",
                "These goals are specified by the agent programmer and attached to tasks, much like our FAb(P, PF , PA) construct associates failure and abort methods with a plan P. Note, however, that in contrast to both [6] and our semantics, [21] attach the failure-handling knowledge at the <br>goal</br>, not plan, level.",
                "Their failure-handling goals may consist of stabilization goals that perform localized, immediate clean-up to restore the agents state to a known, stable state, and compensation goals that perform undo actions.",
                "Compensation goals are triggered on aborting a <br>goal</br>, and so not necessarily on <br>goal</br> failure (i.e., if the FHC directs the agent to retry the failed goal and the retry is successful).",
                "The FHC approach is defined at the <br>goal</br> level in order to facilitate abstract specification of failure-handling knowledge; the FHC decides when to address a failure and what to do (i.e., what failurehandling goals to invoke), separating this knowledge from the how of implementing corrective actions (i.e., what plan to execute to meet the adopted failure-handling <br>goal</br>).",
                "This contrasts with simplistic plan-level failure handling in which the what and how are intermingled in domain task knowledge.",
                "While our approach is defined at the plan level, our extended BDI semantics provides for the separation of execution and failure handling.",
                "Further, the FHC explicitly maintains data structures to track agent execution.",
                "We leverage the existing execution structures and self-reflective ability of a BDI agent to accomplish both aborting and failure handling without additional overhead.",
                "FHCs failure-handling strategy rules (e.g., whether to retry a failed <br>goal</br>) are replaced by instructions in our PF and PA plans, together with meta-level default failure handlers according to the agents nature (e.g., blindly committed).",
                "The FHC approach is independent of the architecture of the agent itself, in contrast to our work that is dedicated to the BDI formalism (although not tied to any one agent system).",
                "Thus no formal semantics are developed in [21]; the FHCs operation is given as 14 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) a state-based protocol.",
                "This approach, together with state checkpointing, is used for multi-agent systems in [22].",
                "The resulting architecture embeds their failure handling approach within a pair processing architecture for agent crash recovery.",
                "Other work on multi-agent exception handling includes AOEXs distributed exception handling agents [5], and the similar sentinels of [8].",
                "In both cases, failure-handling logic and knowledge are decoupled from the agents; by contrast, while separating exception handling from domain-specific knowledge, Unruh et al.s FHC and our approach both retain failure-handling logic within an agent. 6.",
                "CONCLUSION AND FUTURE WORK The tasks and plans of an agent may not successfully reach completion, either by the choice of the agent to abort them (perhaps at the request of another agent to do so), or by unbidden factors that lead to failure.",
                "In this paper we have presented a procedure-based approach that incorporates aborting tasks and plans into the deliberation cycle of a BDI-style agent, thus providing a unified approach to failure and abort.",
                "Our primary contribution is an analysis of the requirements on the operation of the agent for aborting tasks and plans, and a corresponding operational semantics for aborting in the abstract agent language CAN.",
                "We are planning to implement an instance of our approach in the SPARK agent system [9]; in particular, the work of this paper will be the basis for SPARKs abort handling mechanism.",
                "We are also developing an analysis tool for our extended version of CAN as a basis for experimentation.",
                "An intelligent agent will not only gracefully handle unsuccessful tasks and plans, but also will deliberate over its cognitive attitudes to decide its next course of action.",
                "We have assumed the default behaviour of a BDI-style agent, according to its nature: for instance, to retry alternatives to a failed plan until one succeeds or until no alternative plans remain (in which case to fail the task).",
                "Future work is to place our approach in service of more dynamic agent reasoning, such as the introspection that an agent capable of reasoning over task interaction effects and resource requirements can accomplish [19, 12].",
                "Related to this is determining the cost of aborting a task or plan, and using this as an input to the deliberation process.",
                "This would in particular influence the commitment the agent has towards a particular task: the higher the cost, the greater the commitment.",
                "Our assumption that abort-methods do not fail, as discussed above, is a pragmatic one.",
                "However, this is an issue worthy of further exploration, either to develop weaker assumptions that are also practical, or to analyze conditions under which our assumption is realistic.",
                "A further item of interest is extending our approach to failure and abort to maintenance goals [1].",
                "For such goals a different operational semantics for abort is necessary than for achievement goals, to match the difference in semantics of the goals themselves.",
                "Acknowledgements We thank Lin Padgham and the anonymous reviewers for their comments.",
                "The first author acknowledges the support of the Australian Research Council and Agent Oriented Software under grant LP0453486.",
                "The work of the two authors at SRI International was supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No.",
                "NBCHD030010.",
                "Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the view of DARPA or the Department of Interior-National Business Center. 7.",
                "REFERENCES [1] L. Braubach, A. Pokahr, D. Moldt, and W. Lamersdorf.",
                "<br>goal</br> representation for BDI Agent systems.",
                "In Proc. of Second Intl.",
                "Workshop on Programming Multi-Agent Systems (ProMAS04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson, and A. Lucas.",
                "JACK intelligent agents - components for intelligent agents in Java.",
                "AgentLink News, Issue 2, 1999. [3] M. G. Chessell, C. Vines, D. Butler, C. M. Ferreira, and P. Henderson.",
                "Extending the concept of transaction compensation.",
                "IBM Systems Journal, 41(4), 2002. [4] M. Dastani, M. B. van Riemsdijk, and J.-J.",
                "C. Meyer.",
                "<br>goal</br> types in agent programming.",
                "In Proc. of AAMAS06, 2006. [5] S. Entwisle, S. Loke, S. Krishnaswamy, and E. Kendall.",
                "Aoex: An agent-based exception handling framework for building reliable, distributed, open software systems.",
                "In Proc. of Seventh Joint Conf. on Knowledge-Based Software Engineering, 2006. [6] J. F. H¨ubner, R. H. Bordini, and M. Wooldridge.",
                "Programming declarative goals using plan patterns.",
                "In Proc. of 4th Intl.",
                "Workshop on Declarative Agent Languages and Technologies, 2006. [7] D. Kinny.",
                "The Psi calculus: an algebraic agent language.",
                "In Proc. of ATAL01, 2001. [8] M. Klein, J.",
                "A. Rodr´ıguez-Aguilar, and C. Dellarocas.",
                "Using domain-independent exception handling services to enable robust open multi-agent systems: The case of agent death.",
                "Autonomous Agents and Multi-Agent Systems, 7(1-2):179-189, 2003. [9] D. Morley and K. Myers.",
                "The SPARK agent framework.",
                "In Proc. of AAMAS04, 2004. [10] D. Morley, K. L. Myers, and N. Yorke-Smith.",
                "Continuous refinement of agent resource estimates.",
                "In Proc. of AAMAS06, 2006. [11] K. Myers, P. Berry, J. Blythe, K. Conley, M. Gervasio, D. McGuinness, D. Morley, A. Pfeffer, M. Pollack, and M. Tambe.",
                "An intelligent personal assistant for task and time management.",
                "AI Magazine, 28, 2007.",
                "To appear. [12] K. L. Myers and N. Yorke-Smith.",
                "A cognitive framework for delegation to an assistive user agent.",
                "In Proc. of AAAI 2005 Fall Symposium on Mixed-Initiative Problem-Solving Assistants, 2005. [13] L. Padgham and M. Winikoff.",
                "Developing Intelligent Agent Systems: A Practical Guide.",
                "John Wiley and Sons, 2004. [14] A. Pokahr, L. Braubach, and W. Lamersdorf.",
                "Jadex: A BDI reasoning engine.",
                "In R. Bordini, M. Dastani, J. Dix, and A. E. F. Seghrouchni, editors, Multi-Agent Programming.",
                "Springer, 2005. [15] A. S. Rao.",
                "AgentSpeak(L): BDI agents speak out in a logical computable language.",
                "In Proc. of Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World, 1996. [16] A. S. Rao and M. P. Georgeff.",
                "An abstract architecture for rational agents.",
                "In Proc. of KR92, 1992. [17] S. Sardi˜na, L. de Silva, and L. Padgham.",
                "Hierarchical planning in BDI agent programming languages: a formal approach.",
                "In Proc. of AAMAS06, 2006. [18] S. Sardina and L. Padgham.",
                "Goals in the context of bdi plan failure and planning.",
                "In Proc. of AAMAS07, 2007. [19] J. Thangarajah, L. Padgham, and M. Winikoff.",
                "Detecting and exploiting positive <br>goal</br> interaction in intelligent agents.",
                "In Proc. of AAMAS03, 2003. [20] J. Thangarajah, M. Winikoff, L. Padgham, and K. Fischer.",
                "Avoiding resource conflicts in intelligent agents.",
                "In Proc. of ECAI-02, 2002. [21] A. Unruh, J. Bailey, and K. Ramamohanarao.",
                "A framework for <br>goal</br>-based semantic compensation in agent systems.",
                "In Proc. of First Intl.",
                "Workshop on Safety and Security in Multi-Agent Systems, 2004. [22] A. Unruh, H. Harjadi, J. Bailey, and K. Ramamohanarao.",
                "Semantic-compensation-based recovery management in multi-agent systems.",
                "In Proc. of Second IEEE Symposium on Multi-Agent Security and Survivability (IEEE MAS&S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland, and J. Thangarajah.",
                "Declarative and procedural goals in intelligent agent systems.",
                "In Proc. of KR02, 2002.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 15"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Una tarea puede considerarse un \"objetivo\" de lograr el estado de la tarea que se ha realizado, y un \"objetivo\" puede considerarse una tarea de lograr ese estado del mundo.meta",
                "Diferentes formas de razonamiento se aplican a otros tipos de \"objetivo\" [4], como los objetivos de mantenimiento [1], donde el \"objetivo\" se satisface al mantener un estado del mundo durante algún período de tiempo (por ejemplo, mantener $ 100 en efectivo).meta",
                "Usamos el lenguaje CAN inicialmente definido en [23] y luego se extendió como CanPlan en [17] para incluir un componente de planificación y luego como Canplan2 en [18] para mejorar los mecanismos de adopción y caída de \"objetivo\".meta",
                "Can proporciona una construcción explícita de \"objetivo\" que captura los aspectos declarativos y de procedimiento de un \"objetivo\".meta",
                "Esto también es cierto en el lenguaje de lata, pero, para mantener la persistencia de los objetivos, se introduce una construcción de \"objetivo\".meta",
                "Esto se denota por \"objetivo\" `φs, p, φf ´, donde φs es la condición de éxito que determina cuándo se considera el\" objetivo \", φF es una condición de falla bajo la cual se considera que el objetivo ya no es alcanzable o relevante o relevante, y P es un programa para lograr el objetivo, que se abortará una vez que φs o φf se vuelvan verdadero.meta",
                "El cuerpo del plan es un programa que se define recursivamente de la siguiente manera: P :: = ACT |+B |−B |? φ |! E |P1;P2 |P1 P2 |\"Objetivo\" `φS, P1, φf ´ |P1 P2 |{ψ1: P1 ,..., ψn: pn} |Nil 4 Una C omitida es equivalente a verdadero.meta",
                "Las construcciones compuestas son secuenciación (p1; p2), ejecución paralela (p1 p2) y objetivos (\"meta\" `φs, p, φf ´).meta",
                "La regla del evento maneja los eventos de tareas recopilando todas las cláusulas de plan relevantes para el evento en cuestión: para cada cláusula del plan E: ψi ← Pi, si hay un unifier más general, θ = mgu (e, e) de E y el evento en5 Donde es obvio que E es un evento, a veces excluye el signo de exclamación para la legibilidad.6 Típicamente un logro \"objetivo\".meta",
                "Conf.en agentes autónomos y sistemas de múltiples agentes (aamas 07) 11 b | = φs b, \"objetivo\" `φS, P, φF ´-→ B, verdadero GS B | = φf B,\" Objetivo \"` φS, P, φF´ - → B, falla gf p = objetivo `φs, p, φf ´ p = p1 £ p2 b | = φS ∨ φf b, p - → b, objetivo` φs, p £ p, φf ´ gi p = p1 £P2 b | = φS ∨ φf b, p1 - → b, p b, objetivo `φS, P, φF ´ - → B, objetivo` φS, P £ P2, φf ´ GS P = P1 £ P2 B | = φS ∨ φfP1 ∈ {verdadero, falla} b, meta `φs, p, φf ´ - → b, meta` φs, p2 £ p2, φf ´ Gr Figura 2: Reglas para objetivos en Can.Pregunta, entonces la regla construye una alternativa protegida ψiθ: Piθ.meta",
                "La primera regla establece que un \"objetivo\" tiene éxito cuando los φ se vuelven verdaderos;La segunda regla establece que un \"objetivo\" falla cuando φF se vuelve verdadero.meta",
                "La tercera regla GI inicializa la ejecución de un programa de \"objetivo\" actualizando la base de \"objetivo\" y estableciendo el programa en el objetivo de P £ P;La primera P se ejecutará y la segunda P se utiliza para realizar un seguimiento del programa original para el objetivo.meta",
                "La cuarta regla GS ejecuta un solo paso del programa de \"objetivo\".meta",
                "La regla final GR reinicia el programa original (codificado como P2 del par P1 £ P2) cada vez que el programa actual está terminado, pero aún no se ha logrado el \"objetivo\" deseado y aún posible.4.2 Interviones de aborto y falla de manejo A continuación, presentamos la capacidad de especificar programas de controladores, en forma de falla y métodos de aborto, que se ocupan de la limpieza requerida cuando un programa determinado respecta respectivamente o se aborta.meta",
                "Del mismo modo, con la construcción de \"objetivo\", ya no podemos abandonar completamente el programa que el \"objetivo\" contiene tan pronto como se mantenga el éxito o la condición de fracaso;Ahora debemos tener en cuenta la existencia de cualquier método de abortes aplicable al programa.meta",
                "Explicamos esta simple modificación de la construcción paralela a continuación cuando llegamos a la traducción de la construcción de \"objetivo\".meta",
                "Primero describimos la naturaleza general de la transformación de la fuente, que demuestra ser bastante simple para la mayoría de las construcciones del lenguaje, y luego nos concentramos en los tres casos más complejos: construcciones FAB, paralelas y de \"objetivo\".meta",
                "Para la mayoría de las construcciones de Can, la variable de contexto no se usa o se pasa sin cambios: μV (ACT) = ACT μV ( +B) = +B μV (−B) = −B μV (nil) = nil μV (! E) =! E(v) μV (P1; P2) = μV (P1);μV (P2) μV (P1 P2) = μV (P1) μV (P2) μV (ψ1: P1, ..., ψn: Pn) = ψ1: μV (P1) ,..., ψn: μV (PN) sigue siendo especificar la transformación μV (·) en tres casos: construcciones FAB, paralelas y de \"objetivo\".meta",
                "Utilizamos la construcción de \"objetivo\" para permitirnos eliminar la ejecución de un programa dentro de un PAP V cuando es necesario abortar.meta",
                "Por lo tanto, la condición que realmente usamos en la construcción de \"objetivo\" para probar cuándo eliminar el programa es SAN (V).meta",
                "Nuestro uso de la construcción de \"objetivo\" es por su capacidad para eliminar la ejecución de un programa cuando se cumplen las condiciones.meta",
                "Nos aseguramos de esto retrayendo el hecho de (v) sobre el éxito y afirmando el hecho de F (v) sobre el fracaso, y al tener las condiciones apropiadas de éxito y falla sobre el \"objetivo\".meta",
                "Por lo tanto, si la construcción de \"objetivo\" falla, entonces el programa fue abortado o falló.meta",
                "Al reunir todo esto, definimos formalmente μV (FAB (P, PA, PF)) para que sea lo siguiente, donde V es una nueva variable distinta de cualquier otra Biblioteca del Plan de Agentes: PrependID (V, V);+a (v);\"Objetivo\" (¬A (V), (μV (P); −a (V) +F (V)), San (V) ∨ F (V)) ((((? Sa (V); μV (PA)) μV (pf)); −a (v);? falso) segundo, debemos transformar el operador paralelo para garantizar que la falla de una rama aborta de manera segura a la otra.meta",
                "Definimos μV (P1 P2) para que sea: prependid (V, V);prependid (V, V);+a (v);+a (v);(\"Objetivo\" (¬A (V), (μV (P1); −a (V) +F (V)), San (V) ∨ F (V)) ( +Abort (V); −a (V))) \"Objetivo\" (¬A (V), (μV (P2); −a (V) +F (V)), San (V) ∨ F (V)) ( +Abort (V); −a (v)));? ¬abort (v) ∧ ¬abort (v) Finalmente, necesitamos modificar las ocurrencias de la construcción de objetivos de dos maneras: Primero, para asegurarnos de que los métodos de manejo de abortes no se eviten cuando se satisfacen las condiciones de éxito o falla, yEn segundo lugar, para activar el aborto del programa contenido cuando se cumplen las condiciones de éxito o falla.meta",
                "Para transformar la construcción de \"objetivo\", necesitamos extender el estándar CAN con una construcción de espera y condición.meta",
                "Aumentamos el lenguaje de lata con las siguientes reglas para el operador de guardia :: b | = φ b, g, (φ: p - → b, g, p: verdadero b | = φ b, g, (φ: p) − −→ B, G, (φ: P): Falso Para especificar μV (\"Objetivo\" `φs, P, φF ´), generamos un nuevo PAP y ejecutamos el programa dentro de la construcción de\" objetivo \"en este nuevo contexto.meta",
                "Debemos asegurarnos de que la creencia A (v) se elimine si el \"objetivo\" tiene éxito o falla.meta",
                "Cambiamos la condición de éxito y falla de la construcción de \"objetivo\" a una rama paralela utilizando la construcción de espera y condición, y modificamos el \"objetivo\" para usar la condición de debería abortar ahora SAN (v) como la condición de éxito.meta",
                "Definimos μV (\"meta\" `φs, p, φf ´) para ser: prependid (V, V);+a (v);(\"objetivo\" (san (v), μV (p), falso); −a (v);? φs) φs ∨ φf ∨ ¬A (v): +abort (v)) El programa P se ejecutará repetidamenteHasta que San (V) se haga realidad.meta",
                "Luego tenemos como la cláusula del plan traducido: AFC (V): Verdadero ← Prependid (V, V);+a (v);\"Objetivo\" (¬A (V), (! Scr (V);! Wfr (R, V) ;? R = Y; −a (V) +F (V)), San (V) ∨ F (V) (((?aparece dentro de una construcción de \"objetivo\".meta",
                "Si el antiguo cuerpo del plan tiene éxito, la creencia A (v) se retrae, lo que hace que el \"objetivo\" tenga éxito.meta",
                "Si el cuerpo del plan antiguo falla, o si la tarea debe ser abortada, la construcción de \"objetivo\" falla.meta",
                "La traducción de la primera cláusula de plan, para SMS, es más compleja, debido a la construcción paralela que introduce PAP anidadas: SMS (M, V): ISconf (M) ← Prependid (V, V);+a (v);\"Objetivo\" (¬A (V), ((! APN (V);! Twa (V); Prependid (V, V); Prependid (V, V); +A (V); +A (V);(\"Objetivo\" (¬A (V), (! Afc (V); −a (V) +F (V)), San (V) ∨ F (V)) ( +Abort (V); −a (v)) Objetivo (¬A (V), (! Twp (V); −a (V) +F (V)), San (V) ∨ F (V)) ( +Abort (V); −a (v)));? ¬abort (v) ∧ ¬abort (v) ;! HPS (v); −a (v)) +f (v)), san (v) ∨ f (v)) (((((((?, en falla la construcción de objetivos que lo contiene y lo que hace que se aborta (v).meta",
                "Este conjunto de condiciones causará la construcción de \"objetivo\" en la primera cláusula del plan para fallar, eliminando la ejecución de! WFR (R, V).meta",
                "Una vez que se completa esta tarea, la creencia A (V) se retrae, lo que hace que San (V) se haga realidad, lo que lleva a la primera construcción de \"objetivo\" de la segunda cláusula del plan para fallar.meta",
                "Los planes de limpieza de fallas se activan de eventos de eliminación de \"objetivo\"-! G.meta",
                "Dichos planes, similares a nuestros métodos de falla, están diseñados para que el agente efectúe los cambios estatales (ACT para deshacer sus acciones anteriores) antes de intentar otro plan para lograr el \"objetivo\" fallido G.Dado que Jasons construye para dejar caer un \"objetivo\" con una indicación de si probar o no un plan alternativo para ello, H¨ubner et al.[6] Proporcione una descripción informal de cómo un agente Jason modifica su estructura de intención cuando ocurre un evento de falla de objetivo.meta",
                "En un plan de eliminación de \"objetivo\", el programador puede especificar cualquier acción de deshacer y si intentar el \"objetivo\" nuevamente.meta",
                "Si no se proporciona ningún plan de eliminación de \"objetivo\", el comportamiento predeterminado de Jasons es no volver a intentar el \"objetivo\".meta",
                "El manejo de fallas se aplica solo a los planes desencadenados por la adición de un logro o prueba de \"objetivo\";En particular, los eventos de eliminación de \"objetivo\" no se publican para el fracaso de un plan de eliminación de objetivos.meta",
                "Los tres permiten métodos de meta nivelados indicados por meta eventos, como la adopción de \"objetivo\" o la falla del plan, y ofrecen capacidades introspectivas sobre los estados de \"meta\" e intención.meta",
                "Dichas instalaciones de meta nivel también son requeridas por el enfoque de Unruh et al.[21], que definen la compensación semántica basada en el \"objetivo\" para un agente.meta",
                "El programador de agentes especifica estos objetivos y se adjunta a tareas, al igual que nuestro fabuloso (P, PF, PA) construye la falla y aborta los métodos con un plan P. Nota, sin embargo, que en contraste con [6] y nuestra semántica, [21] adjunte el conocimiento de manejo de fallas en el \"objetivo\", no el plan, el nivel.meta",
                "Los objetivos de compensación se activan al abortar un \"objetivo\", por lo que no necesariamente en la falla de \"objetivo\" (es decir, si el FHC dirige al agente que vuelva a intentar el objetivo fallido y el reintento sea exitoso).meta",
                "El enfoque FHC se define en el nivel de \"objetivo\" para facilitar la especificación abstracta del conocimiento de manejo de falla;El FHC decide cuándo abordar una falla y qué hacer (es decir, qué objetivos de control de falla para invocar), separando este conocimiento de cómo implementar acciones correctivas (es decir, qué plan de ejecutar para cumplir con el \"objetivo\" adoptado de manejo de fallas).meta",
                "Las reglas de la estrategia de manejo de fallas de FHCS (por ejemplo, si volver a intentar un \"objetivo\" fallido) se reemplazan por instrucciones en nuestros planes PF y PA, junto con los controladores de falla por defecto de nivel meta de acuerdo con la naturaleza de los agentes (por ejemplo, cometidos ciegamente).meta",
                "Representación de \"objetivo\" para los sistemas de agentes BDI.meta",
                "Tipos de \"objetivo\" en la programación de agentes.meta",
                "Detectar y explotar la interacción positiva de \"objetivo\" en agentes inteligentes.meta",
                "Un marco para la compensación semántica basada en el \"objetivo\" en los sistemas de agentes.meta"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "goal construct": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Aborting Tasks in BDI Agents John Thangarajah, James Harland RMIT University Melbourne, Australia {johthan,jah}@cs.rmit.edu.au David Morley, Neil Yorke-Smith Artificial Intelligence Center, SRI International Menlo Park, CA 94025 U.S.A. {morley,nysmith}@ai.sri.com ABSTRACT Intelligent agents that are intended to work in dynamic environments must be able to gracefully handle unsuccessful tasks and plans.",
                "In addition, such agents should be able to make rational decisions about an appropriate course of action, which may include aborting a task or plan, either as a result of the agents own deliberations, or potentially at the request of another agent.",
                "In this paper we investigate the incorporation of aborts into a BDI-style architecture.",
                "We discuss some conditions under which aborting a task or plan is appropriate, and how to determine the consequences of such a decision.",
                "We augment each plan with an optional abort-method, analogous to the failure method found in some agent programming languages.",
                "We provide an operational semantics for the execution cycle in the presence of aborts in the abstract agent language CAN, which enables us to specify a BDI-based execution model without limiting our attention to a particular agent system (such as JACK, Jadex, Jason, or SPARK).",
                "A key technical challenge we address is the presence of parallel execution threads and of sub-tasks, which require the agent to ensure that the abort methods for each plan are carried out in an appropriate sequence.",
                "Categories and Subject Descriptors I.2.11 [ARTIFICIAL INTELLIGENCE]: Distributed Artificial Intelligence-Intelligent agents General Terms Design, Reliability, Theory 1.",
                "INTRODUCTION Intelligent agents generally work in complex, dynamic environments, such as air traffic control or robot navigation, in which the success of any particular action or plan cannot be guaranteed [13].",
                "Accordingly, dealing with failure is fundamental to agent programming, and is an important element of agent characteristics such as robustness, flexibility, and persistence [21].",
                "In agent architectures inspired by the Belief-Desire-Intention (BDI) model [16], these properties are often characterized by the interactions between beliefs, goals, and plans [2].1 In general, an agent that wishes to achieve a particular set of tasks will pursue a number of plans concurrently.",
                "When failures occur, the choice of plans will be reviewed.",
                "This may involve seeking alternative plans for a particular task, re-scheduling tasks to better comply with resource constraints, dropping some tasks, or some other decision that will increase the likelihood of success [12, 14].",
                "Failures can occur for a number of reasons, and it is often not possible to predict these in advance, either because of the complexity of the system or because changes in the environment invalidate some earlier decisions.",
                "Given this need for deliberation about failed tasks or plans, failure deliberation is commonly built into the agents execution cycle.",
                "Besides dealing with failure, an important capability of an intelligent agent is to be able to abort a particular task or plan.",
                "This decision may be due to an internal deliberation (such as the agent believing the task can no longer be achieved, or that some conflicting task now has a higher priority) or due to an external factor (such as another agent altering a commitment, or a change in the environment).",
                "Aborting a task or plan is distinct from its failure.",
                "Failure reflects an inability to perform and does not negate the need to perform - for example, a reasonable response to failure may be to try again.",
                "In contrast, aborting says nothing about the ability to perform; it merely eliminates the need.",
                "Failure propagates from the bottom up, whereas aborting propagates from the top down.",
                "The potential for concurrently executing sub-plans introduces different complexities for aborting and failure.",
                "For aborting, it means that multiple concurrent sub-plans may need to be aborted as the abort is propagated down.",
                "For failure, it means that parallel-sibling plans may need to be aborted as the failure is propagated up.",
                "There has been a considerable amount of work on plan failures (such as detecting and resolving resource conflicts [20, 10]) and most agent systems incorporate some notion of failure handling.",
                "However, there has been relatively little work on the development of abort techniques beyond simple dropping of currently intended plans and tasks, which does not deal with the clean-up required.",
                "As one consequence, most agent systems are quite limited in their treatment of the situation where one branch of a parallel construct 1 One can consider both tasks to be performed and goals to achieve a certain state of the world.",
                "A task can be considered a goal of achieving the state of the task having been performed, and a goal can be considered a task of bringing about that state of the world.",
                "We adopt the latter view and use task to also refer to goals. 8 978-81-904262-7-5 (RPS) c 2007 IFAAMAS fails (common approaches include either letting the other branch run to completion unhindered or dropping it completely).",
                "In this paper we discuss in detail the incorporation of abort cleanup methods into the agent execution cycle, providing a unified approach to failure and abort.",
                "A key feature of our procedure-based approach is that we allow each plan to execute some particular code on a failure and on an abort.",
                "This allows a plan to attempt to ensure a stable, known state, and possibly to recover some resources and otherwise clean up before exiting.",
                "Accordingly, a central technical challenge is to manage the orderly execution of the appropriate clean-up code.",
                "We show how aborts can be smoothly introduced into a BDI-style architecture, and for the first time we give an operational semantics for aborting in the abstract agent language CAN [23, 17].",
                "This allows us to specify an appropriate level of detail for the execution model, without focusing on the specific constructs of any one agent system such as JACK [2], Jadex [14], Jason [6], or SPARK [9].",
                "Our focus is on a single agent, complementary to related work that considers exception handling for single- and multiagent systems (e.g., [22, 5, 6]).",
                "This paper is organized as follows.",
                "In Section 2 we give an example of the consequences of aborting a task, and in Section 3 we discuss some circumstances under which aborts should occur, and the appropriate representation and invocation procedures.",
                "In Section 4 we show how we can use CAN to formally specify the behaviour of an aborted plan.",
                "Section 5 discusses related work, and in Section 6 we present our conclusions and future work. 2.",
                "MOTIVATING EXAMPLE Alice is a knowledge worker assisted by a learning, personal assistive agent such as CALO [11].",
                "Alice plans to attend the IJCAI conference later in the year, and her CALO agent adopts the task of Support Meeting Submission (SMS) to assist her.",
                "CALOs plan for an SMS task in the case of a conference submission consists of the following sub-tasks: 1.",
                "Allocate a Paper Number (APN) to be used for administrative purposes in the company. 2.",
                "Track Writing Abstract (TWA): keep track of Alices progress in preparing an abstract. 3.",
                "Apply For Clearance (AFC) for publication from Alices manager based on the abstract and conference details. 4.",
                "Track Writing Paper (TWP): keep track of Alices progress in writing the paper. 5.",
                "Handle Paper Submission (HPS): follow company internal procedures for submitting a paper to a conference.",
                "These steps must be performed in order, with the exception of steps 3 (AFC) and 4 (TWP), which may be performed in parallel.",
                "Similarly, CALO can perform the task Apply For Clearance (AFC) by a plan consisting of: 1.",
                "Send Clearance Request (SCR) to Alices manager. 2.",
                "Wait For Response (WFR) from the manager. 3.",
                "Confirm that the response was positive, and fail otherwise.",
                "Now suppose that a change in circumstances causes Alice to reconsider her travel plans while she is writing the paper.",
                "Alice will no longer be able to attend IJCAI.",
                "She therefore instructs her CALO agent to abort the SMS task.",
                "Aborting the task implies aborting both the SMS plan and the AFC subplan.",
                "Aborting the first plan requires CALO to notify the paper number registry that the allocated paper number is obsolete, which it can achieve by the Cancel Paper Number (CPN) task.2 Aborting the second plan requires CALO to notify Alices manager that Alice no longer requires clearance for publication, which CALO can achieve by invoking the Cancel Clearance Request (CCR) task.",
                "We note a number of important observations from the example.",
                "First, the decision to abort a particular course of action can come from the internal deliberations of the agent (such as reasoning about priorities in a conflict over resources), or from external sources (such as another agent cancelling a commitment), as in this example.",
                "In this paper we only touch on the problem of determining whether a task or plan should be aborted, instead concentrating on determining the appropriate actions once this decision is made.",
                "Hence, our objective is to determine how to incorporate aborting mechanisms into the standard execution cycle rather than determine what should be aborted and when.",
                "Second, once the decision is made to abort the attempt to submit a paper, there are some actions the agent should take, such as cancelling the clearance request.",
                "In other words, aborting a task is not simply a matter of dropping the task and associated active plans: there are some clean up actions that may need to be done.",
                "This is similar to the case for failure, in that there may also be actions to take when a task or plan fails.",
                "In both cases, note that it is not simply a matter of the agent undo-ing its actions to date; indeed, this may be neither possible (since the agent acts in a situated world and its actions change world state) nor desirable (depending on the semantics of the task).",
                "Rather, cleaning up involves compensation via forward recovery actions [3].",
                "Third, there is a distinction between aborting a task and aborting a plan.",
                "In the former case, it is clear that all plans being executed to perform the task should be aborted; in the latter case, it may be that there are better alternatives to the current plan and one of these should be attempted.",
                "Hence, plan aborting or failure does not necessarily lead to task aborting or failure.",
                "Fourth, given that tasks may contain sub-tasks, which may contain further sub-tasks, it is necessary for a parent task to wait until its children have finished their abort methods.",
                "This is the source of one of the technical challenges that we address: determining the precise sequence of actions once a parent task or plan is aborted. 3.",
                "ABORTING TASKS AND PLANS As we have alluded to, failure and aborting are related concepts.",
                "They both cause the execution of existing plans to cease and, consequentially, the agent to reflect over its current tasks and intentions.",
                "Failure and aborting, however, differ in the way they arise.",
                "In the case of failure, the trigger to cease execution of a task or plan comes from below, that is, the failure of sub-tasks or lower-level plans.",
                "In the case of aborting, the trigger comes from above, that is, the tasks and the parent plans that initiated a plan.",
                "In BDI-style systems such as JACK and SPARK, an agents domain knowledge includes a pre-defined plan library of plan clauses.",
                "Each plan clause has a plan body, which is a program (i.e., combination of primitive actions, sub-tasks, etc.) that can be executed in response to a task or other event should the plan clauses context condition be satisfied.",
                "The agent selects and executes instances of plan clauses to perform its tasks.",
                "There can be more than one applicable plan clause and, in the event that one fails, another applicable one may be attempted.",
                "Plans may have sub-tasks that must succeed 2 CALO needs only drop the TWA and TWP tasks to abort them: for the sake of simplicity we suppose no explicit clean up of its internal state is necessary.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 9 for the plan to succeed.",
                "In such systems, a plan failure occurs if one of the actions or sub-tasks within the plan fails.",
                "The agents action upon plan failure depends on its nature: for example, the agent may declare the task to have failed if one plan has been tried and resulted in failure, or it may retry alternate plans and declare (indeed, must declare) task failure only if all possible alternate plans to perform the task have been tried and resulted in failure.",
                "Observe that, while task failure can follow from plan failure or a sequence of plan failures, plan failure need not lead to task failure provided the agent can successfully complete an alternate plan.",
                "Moreover, task failure can also arise separately from plan failure, if the agent decides to abort the task.",
                "Our approach associates an abort-method with each plan.",
                "This enables the programmer to specify dedicated compensation actions according to how the agent is attempting to perform the task.",
                "Note that our abort-methods can be arbitrary programs and so can invoke tasks that may be performed dynamically in the usual BDI fashion, i.e., the clean-up is not limited to executing a predetermined set of actions.",
                "The question remains which abort-method should be invoked, and in what manner.",
                "Given the complexity of agent action spaces, it is not possible nor desirable to enumerate a static set of rules.",
                "Rather, the agent will invoke its abort-methods dynamically according to the state of execution and its own internal events.",
                "An alternative to attaching an abort-method to each plan is to attach such methods to each atomic action.",
                "We choose the former because: (1) action-level abort-methods would incur a greater overhead, (2) plans are meant to be designed as single cohesive units and are the unit of deliberation in BDI systems, and (3) the cleanup methods for failure in current systems are attached to plans.",
                "In order to understand how the agents abort processing should function, we consider three situations where it is sensible for an agent to consider aborting some of its tasks and plans: 1.",
                "When a task succeeds or fails because of an external factor other than the agent itself, the plan currently executed to perform the task should be aborted.",
                "For example, suppose company policy changes so that employees of Alices seniority automatically have clearance for publishing papers.",
                "Since Alice now has clearance for publishing her paper, CALO can abort the plan for Apply For Clearance.",
                "In doing so it must invoke the abort-method, in this case thus performing Cancel Clearance Request.3 2.",
                "When two or more sub-programs are executed in parallel, if one fails then the others should be aborted, given that the failure of one branch leads to the failure of the overall task.",
                "For example, suppose that part-way through writing the paper, Alice realizes that there is a fatal flaw in her results, and so notifies CALO that she will not be able to complete the paper by the deadline.",
                "The failure of the Track Writing Paper task should cause the Apply For Clearance task being executed in parallel to be aborted. 3.",
                "When an execution event alters the importance of an existing task or intention, the agent should deliberate over whether the existing plan(s) should continue.",
                "For example, suppose that Alice tasks CALO with a new, high-priority task to purchase a replacement laptop, but that Alice lacks enough funds to both purchase the laptop and to attend IJCAI.",
                "Reasoning over resource requirements [20, 10] will cause the agent to realize 3 If there is any difference between how to abort a task that is externally performed versus how to abort one that is now known to be impossible, the abort-method can detect the circumstances and handle the situation as appropriate. that it cannot successfully complete both tasks.",
                "Given that the new task has greater importance, a rational agent will evaluate its best course of action and may decide to abortor at least suspend - the existing task of submitting a paper and intentions derived from it [12].",
                "The operational semantics we provide in Section 4 for aborting tasks and plans captures the first two situations above.",
                "The third situation involves deliberating over the importance of a task, which depends on various factors such as task priority.",
                "Although this deliberation is beyond the scope of this paper, it is a complementary topic of our future work.",
                "Note that the above situations apply to achievement goals, for which the task is completed when a particular state of the world is brought about (e.g., ensure we have clearance).",
                "Different forms of reasoning apply to other goal types [4] such as maintenance goals [1], where the goal is satisfied by maintaining a state of the world for some period of time (e.g., maintain $100 in cash).",
                "Abort Method Representation The intent of aborting a task or plan is that the task or plan and all its children cease to execute, and that appropriate clean-up methods are performed as required.",
                "In contrast to offline planning systems, BDI agents are situated: they perform online deliberation and their actions change the state of the world.",
                "As a result, the effects of many actions cannot be simply undone.",
                "Moreover, the undo process may cause adverse effects.",
                "Therefore, the clean-up methods that we specify are forward recovery procedures that attempt to ensure a stable state and that also may, if possible, recover resources.",
                "The common plan representation in BDI-style systems such as JACK and SPARK includes a failure-method, which is the designated clean-up method invoked when the plan fails.",
                "To this, we add the abort-method, which is invoked if the plan is to be aborted.",
                "In our example, the abort-method for the plan for Support Meeting Submission consists of invoking the sub-task Cancel Paper Number.",
                "The abort-method need not explicitly abort Apply For Clearance, because the agent will invoke the abort-method for the subtask appropriately, as we outline below.",
                "The assumption here is that, like the failure-method, the programmer of the agent system has the opportunity to specify a sensible abort-method that takes into consideration the point in the plan at which the abort is to be executed.",
                "For any plan, the abort-method is optional: if no abort-method is specified, the agent takes no specific action for this plan.",
                "However, the agents default behavioural rules still apply, for example, whether to retry an alternate plan for the parent task.",
                "Note that an explicit representation of the clean-up methods for tasks is not required, since tasks are performed by executing some plan or plans.",
                "Hence, aborting a task means aborting the current plan that is executed to perform that task, as we next describe.",
                "Abort Method Invocation We now informally lay out the agents action upon aborting plans and tasks.",
                "When a plan P is aborted: 1.",
                "Abort each sub-task that is an active child of P. An active child is one that was triggered by P and is currently in execution. 2.",
                "When there are no more active children, invoke the abort method of plan P. 3.",
                "Indicate a plan failure to TP , the parent task of P. We note here that if the parent task TP is not to be aborted then the agent may choose another applicable plan to satisfy TP . 10 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) When a task (or sub-task) T is aborted: 1.",
                "Abort the current active plan to satisfy T (if any). 2.",
                "When there are no more active child processes, drop the task.",
                "The agent thus no longer pursues T. 3.",
                "Note here that when the current active plan for performing T is aborted, no other applicable plans to perform T should be tried as it is the task that is to be aborted.",
                "In order to prevent infinitely cascading clean-up efforts, we assume that abort-methods will never be aborted nor fail.",
                "In reality, however, an abort-method may fail.",
                "In this case, lacking a more sophisticated handling mechanism, the agent simply stops executing the failed abort-method with no further deliberation.",
                "The assumption we make is thus not a reflection of the full complexity of reality, but one that is pragmatic in terms of the agent execution cycle; the approach to failure-handling of [21] makes the same assumption.",
                "In systems such as SPARK, the programmer can specify an alternative behaviour for a failed failure- or abort-method by means of meta-level procedures.",
                "We also assume that failure- and abort-methods terminate in finite time. 4.",
                "OPERATIONAL SEMANTICS We provide the semantics for the task and plan failure and aborting processes outlined above.",
                "We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the goal adoption and dropping mechanisms.",
                "The extensions also simplified the semantics in the earlier work.",
                "We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1.",
                "Following a presentation of the operational semantics of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present. 4.1 CAN Language CAN is a high-level agent language, in a spirit similar to that of AgentSpeak [15] and Kinnys Ψ [7], both of which attempt to extract the essence of a class of implemented BDI agent systems.",
                "CAN provides an explicit <br>goal construct</br> that captures both the declarative and procedural aspects of a goal.",
                "Goals are persistent in CAN in that, when a plan fails, another applicable plan is attempted.",
                "This equates to the default failure handling mechanism typically found in implemented BDI systems such as JACK [2].",
                "In practical systems, tasks are typically translated into events that trigger the execution of some plans.",
                "This is also true in the CAN language, but, in order to maintain the persistence of goals, a <br>goal construct</br> is introduced.",
                "This is denoted by Goal ` φs, P, φf ´ , where φs is the success condition that determines when the goal is considered achieved, φf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once φs or φf become true.",
                "An agents behavior is specified by a plan library, denoted by Π, that consists of a collection of plan clauses of the form e : c ← P, where e is an event, c is a context condition (a logical formula over the agents beliefs that must be true in order for the plan to be applicable)4 and P is the plan body.",
                "The plan body is a program that is defined recursively as follows: P ::= act | +b | −b | ?φ | !e | P1; P2 | P1 P2 | Goal ` φs, P1, φf ´ | P1 P2 | {ψ1 : P1, . . . , ψn : Pn} | nil 4 An omitted c is equivalent to true.",
                "Δ = {ψiθ : Piθ | e : ψi ← Pi ∈ Π ∧ θ = mgu(e, e )} B, !e −→ B, Δ Event ψi : Pi ∈ Δ B |= ψi B, Δ −→ B, Pi Δ \\ {ψi : Pi} Select B, P1 −→ B, (P1 P2) −→ B, P2 fail B, P1 −→ B , P1 B, (P1; P2) −→ B , (P ; P2) Sequence B, P1 −→ B , P B, (P1 P2) −→ B , (P P2) Parallel1 B, P2 −→ B , P B, (P1 P2) −→ B , (P P1) Parallel2 Figure 1: Operational rules of CAN. where P1, . . . , Pn are themselves programs, act is a primitive action that is not further specified, and +b and −b are operations to add and delete beliefs.",
                "The belief base contains ground belief atoms in the form of first-order relations but could be orthogonally extended to other logics.",
                "It is assumed that well-defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ∪ {b}), and to delete a belief from a belief set (B \\ {b}). ?φ is a test for condition φ, and !e5 is an event6 that is posted from within the program.",
                "The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (Goal ` φs, P, φf ´ ).",
                "The above defines the user language.",
                "In addition, a set of auxiliary compound forms are used internally when assigning semantics to constructs. nil is the basic (terminating) program.",
                "When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 : P1, . . . , cn : Pn ).",
                "The other auxiliary compound form, , is a choice operator dual to sequencing: P1 P2 executes P1 and then executes P2 only if P1 failed.",
                "A summary of the operational semantics for CAN in line with [23] and following some of the simplifications of [17] is as follows.",
                "A basic configuration S = B, G, Γ consists of the current belief base B of the agent, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention).",
                "A transition S0 −→ S1 specifies that executing S0 for a single step yields configuration S1.",
                "S0 −→∗ Sn is the usual reflexive transitive closure of −→: Sn is the result of one or more singlestep transitions.",
                "A derivation rule S −→ Sr S −→ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator).",
                "Figure 1 gives some of the operational rules.",
                "The Event rule handles task events by collecting all relevant plan clauses for the event in question: for each plan clause e : ψi ← Pi, if there is a most general unifier, θ = mgu(e, e ) of e and the event in 5 Where it is obvious that e is an event we will sometimes exclude the exclamation mark for readability. 6 Typically an achievement goal.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 11 B |= φs B, Goal ` φs, P, φf ´ −→ B, true Gs B |= φf B, Goal ` φs, P, φf ´ −→ B, fail Gf P = Goal ` φs, P , φf ´ P = P1 £ P2 B |= φs ∨ φf B, P −→ B, Goal ` φs, P £ P , φf ´ GI P = P1 £ P2 B |= φs ∨ φf B, P1 −→ B , P B, Goal ` φs, P, φf ´ −→ B , Goal ` φs, P £ P2, φf ´ GS P = P1 £ P2 B |= φs ∨ φf P1 ∈ {true, fail} B, Goal ` φs, P, φf ´ −→ B, Goal ` φs, P2 £ P2, φf ´ GR Figure 2: Rules for goals in CAN. question, then the rule constructs a guarded alternative ψiθ : Piθ.",
                "The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives: program P Δ states that program P should be tried first, falling back to the remaining alternatives, Δ \\ P, if necessary.",
                "This rule and the fail rule together are used for failure handling: if the current program Pi from a plan clause for a task fails, rule fail is applied first, and then if possible, rule Select will choose another applicable alternative for the task if one exists.",
                "Rule Sequence handles sequencing of programs in the usual way.",
                "Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel.",
                "Figure 2 gives simplified rules for dealing with goals, in line with those presented in [17].",
                "The first rule states that a goal succeeds when φs become true; the second rule states that a goal fails when φf become true.",
                "The third rule GI initializes the execution of a goal-program by updating the goal base and setting the program in the goal to P £ P; the first P is to be executed and the second P is used to keep track of the original program for the goal.",
                "The fourth rule GS executes a single step of the goal-program.",
                "The final rule GR restarts the original program (encoded as P2 of pair P1 £ P2) whenever the current program is finished but the desired and still possible goal has not yet been achieved. 4.2 Aborting Intentions and Handling Failure We next introduce the ability to specify handler programs, in the form of failure- and abort-methods, that deal with the clean-up required when a given program respectively fails or is aborted.",
                "We do not associate failure- and abort- methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies failure- and abort- methods for an arbitrary program.",
                "The FAb(P, PF , PA) construct executes the program P. Should P fail, it executes the failure handling program PF ; should P need to be aborted, it executes the abort handling program PA.",
                "Thus to add failure- and abort- methods PF and PA to a plan clause e : c ← P, we write e : c ← FAb(P, PF , PA).",
                "With the introduction of the ability to abort programs, we modify the parallel construct to allow the failure of one branch to abort the other.",
                "We must take into consideration the possible existence of abort-methods in the aborted branch.",
                "Similarly, with the <br>goal construct</br> we can no longer completely abandon the program the goal contains as soon as the success or failure condition holds; we must now take into consideration the existence of any abort-methods applicable to the program.",
                "We provide the semantics of an augmented agent language containing the FAb construct by defining a source transformation, similar to macro-expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN.",
                "The one non-standard extension to CAN is a wait-until-condition construct.",
                "We explain this simple modification of the parallel construct below when we come to translation of the <br>goal construct</br>.",
                "First we describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases: the FAb, parallel, and Goal constructs.",
                "A key issue is that the FAb constructs may be nested, either directly or indirectly.",
                "Let us call each instantiation of the construct at execution time a possible abort point (pap).",
                "Where these constructs are nested, it is important that before the failure- or abort-method of a parent pap is executed, the failure- or abort-methods programs of the children paps are executed first, as described earlier in Section 3.",
                "The need to coordinate the execution of the abort-methods of nested paps requires that there be some way to identify the parents and children of a particular pap.",
                "We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e : c ← P with a plan clause e(v) : c ← μv(P) where v is a free variable, not previously present in the plan clause.",
                "This variable is used to keep track of the context of execution.",
                "The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context.",
                "For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1].",
                "We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51.",
                "This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v .",
                "For most CAN constructs, the context variable is unused or passed unchanged: μv(act) = act μv(+b) = +b μv(−b) = −b μv(nil) = nil μv(!e) = !e(v) μv(P1; P2) = μv(P1); μv(P2) μv(P1 P2) = μv(P1) μv(P2) μv( ψ1 : P1, . . . , ψn : Pn ) = ψ1 : μv(P1), . . . , ψn : μv(Pn) It remains to specify the transformation μv(·) in three cases: the FAb, parallel, and Goal constructs.",
                "These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context.",
                "Let us introduce the primitive action prependID(v, v ) that creates a new pap identifier and prepends it to list v giving list v .",
                "We also introduce the following predicates: • a(v) - the pap v is currently active. • abort(v) - the pap v should be aborted (after aborting all of its descendants). 7 An alternative would be to use meta-level predicates that reflect the current state of the intention structure. 12 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) • f(v) - the program of pap v has failed. • ancestorof(v, v ) ≡ v = v ∨ ancestorof(v, tail(v ))the pap v is an ancestor of pap v . • nac(v) ≡ ¬∃v . (a(v ) ∧ ancestorof(v, v ) ∧ v = v ) - v has no active children. • sa(v) ≡ ∃v .abort(v ) ∧ ancestorof(v , v) - we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active. • san(v) ≡ sa(v) ∧ nac(v) - we should abort v now if we should abort v and v has no active children.",
                "First let us consider the case of the FAb construct.",
                "The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v. We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context.",
                "We need to make sure that we retract the belief that v is active at the end, i.e., −a(v ).",
                "We use the <br>goal construct</br> to allow us to drop the execution of a program within a pap v when it is necessary to abort.",
                "While executing the program P, we know that we need to drop P and invoke its abort-method if some ancestor of P has been told to abort.",
                "This is represented by the predicate sa(v ) being true.",
                "However, we need to make sure that we do this only after every child pap has had the chance to invoke its abort-method and all these abort-methods have completed: if we drop the program too soon, then execution of the abort-methods of the children will also be dropped.",
                "Therefore, the condition we actually use in the <br>goal construct</br> to test when to drop the program is san(v ).",
                "This condition relies on the fact that as the children paps complete, they remove the relevant a facts.",
                "Our use of the <br>goal construct</br> is for its ability to drop the execution of a program when conditions are met.",
                "To leave aside the repeat execution until a condition is met aspect, we must ensure that the success or failure condition of the construct is satisfied once the execution of the program succeeds or fails.",
                "We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on failure, and by having the appropriate success and failure conditions on the Goal.",
                "Hence, if the <br>goal construct</br> fails, then the program either was aborted or it failed.",
                "We invoke the relevant failure- or abort- method, retract the a(v ) fact, and then fail.",
                "Putting all this together, we formally define μv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agents plan library: prependID(v, v ); +a(v ); Goal ( ¬a(v ), (μv (P); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); μv(PA)) μv(PF )); −a(v ); ?false) Second, we must transform the parallel operator to ensure that the failure of one branch safely aborts the other.",
                "Here we construct two new contexts, v and v , from the existing context v. If one branch fails, it must abort the other branch.",
                "At the end, if either branch was aborted, then we must fail.",
                "Let v and v be new variables distinct from any other in the agents plan library.",
                "We define μv(P1 P2) to be: prependID(v, v ); prependID(v, v ); +a(v ); +a(v ); ( Goal (¬a(v ), (μv (P1); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal (¬a(v ), (μv (P2); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ); ?¬abort(v ) ∧ ¬abort(v ) Finally, we need to modify occurrences of the <br>goal construct</br> in two ways: first, to make sure that the abort handling methods are not bypassed when the success or failure conditions are satisfied, and second, to trigger the aborting of the contained program when either the success or failure conditions are satisfied.",
                "To transform the <br>goal construct</br> we need to extend standard CAN with a wait-until-condition construct.",
                "The construct φ : P does not execute P until φ becomes true.",
                "We augment the CAN language with the following rules for the guard operator :: B |= φ B, G, (φ : P −→ B, G, P :true B |= φ B, G, (φ : P) −→ B, G, (φ : P) :false In order to specify μv(Goal ` φs, P, φf ´ ), we generate a new pap and execute the program within the <br>goal construct</br> in this new context.",
                "We must ensure that belief a(v ) is removed whether the Goal succeeds or fails.",
                "We shift the success and failure condition of the <br>goal construct</br> into a parallel branch using the wait-until-condition construct, and modify the Goal to use the should abort now condition san(v ) as the success condition.",
                "The waiting branch will trigger the abort of the program should either the success or failure condition be met.",
                "To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active.",
                "Let v be a new variable distinct from any other in the agents plan library.",
                "We define μv(Goal ` φs, P, φf ´ ) to be: prependID(v, v ); +a(v ); ( Goal ( san(v ), μv (P), false) ; −a(v ); ?φs ) φs ∨ φf ∨ ¬a(v ) : +abort(v ) ) The program P will be repeatedly executed until san(v ) becomes true.",
                "There are two ways this can occur.",
                "First, if either the success condition φs or the failure condition φf becomes true, then the second branch of the parallel construct executes.",
                "This causes abort(v ) to become true, and, after the descendant paps abortmethods are executed, san(v ) becomes true.",
                "In this case, P is now dropped, the a(v ) is removed, and the entire construct succeeds or fails based on φs.",
                "The second way for san(v ) to become true is if v or one of its ancestors is aborted.",
                "In this case, once the descendant paps abort-methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming φs is false). 4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2.",
                "We will express tasks by events, for example, the task Allocate a Paper Number we express as the event APN.",
                "Let the output of the Apply For Clearance task be Y or N, indicating the approval or not of Alices manager, respectively.",
                "Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively: SMS(m) : isconf(m) ← FAb(!APN; !TWA; (!AFC !TWP); !HPS, !CPN, !CPN) AFC : true ← FAb(!SCR; !WFR(r); ?r = Y, nil, !CCR) Note that Support Meeting Submission has a parameter m, the meeting of interest (IJCAI, in our example), while Apply For Clearance has no parameters.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two.",
                "Let v and v denote new variables.",
                "Then we have as the translated plan clause: AFC(v ) : true ← prependID(v , v ); +a(v ); Goal ( ¬a(v ), (!SCR(v ); !WFR(r, v ); ?r = Y; −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CCR(v )) nil); −a(v ); ?false) We can see that an extra context parameter has been added to each task and that the old plan body now appears inside a <br>goal construct</br>.",
                "Should the old plan body succeed, belief a(v ) is retracted, causing the Goal to succeed.",
                "If the old plan body fails, or if the task is to be aborted, the <br>goal construct</br> fails.",
                "This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and failure.",
                "The translation of the first plan clause, for SMS, is more complex, because of the parallel construct that introduces nested paps: SMS(m, v) : isconf(m) ← prependID(v, v ); +a(v ); Goal ( ¬a(v ), ((!APN(v ); !TWA(v ); prependID(v , v ); prependID(v , v ); +a(v ); +a(v ); ( Goal ( ¬a(v ), (!AFC(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal ( ¬a(v ), (!TWP(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ) ; ?¬abort(v ) ∧ ¬abort(v ); !HPS(v ); −a(v )) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CPN(v)) !CPN(v)); −a(v ); ?false) Here we can see that if the task !TWP(v ) fails then f(v ) will be asserted, failing the <br>goal construct</br> that contains it, and leading to abort(v ) being asserted.",
                "If the !WFR(r, v ) task in the expansion of !AFC(v ) is still executing and has no active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true.",
                "This set of conditions will cause the <br>goal construct</br> in the first plan clause to fail, dropping execution of !WFR(r, v ).",
                "The task !CCR(v ) will be executed.",
                "Once this task completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first <br>goal construct</br> of the second plan clause to fail.",
                "While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely automated, according to the rules set out in Section 4.2.",
                "The translated plan clauses, with the semantics of CAN augmented by our waituntil-condition construct, thus specify the operation of the agent to handle both failure and aborting for the example. 5.",
                "RELATED WORK Plan failure is handled in the extended version of AgentSpeak found in the Jason system [6].",
                "Failure clean-up plans are triggered from goal deletion events −!g.",
                "Such plans, similar to our failure methods, are designed for the agent to effect state changes (act to undo its earlier actions) prior to possibly attempting another plan to achieve the failed goal g. Given Jasons constructs for dropping a goal with an indication of whether or not to try an alternate plan for it, H¨ubner et al. [6] provide an informal description of how a Jason agent modifies its intention structure when a goal failure event occurs.",
                "In a goal deletion plan, the programmer can specify any undo actions and whether to attempt the goal again.",
                "If no goal deletion plan is provided, Jasons default behaviour is to not reattempt the goal.",
                "Failure handling is applied only to plans triggered by addition of an achievement or test goal; in particular, goal deletion events are not posted for failure of a goal deletion plan.",
                "Further, the informal semantics of [6] do not consider parallel sub-goals (i.e., the CAN construct), since such execution is not part of Jasons language.",
                "The implementation of H¨ubner et al. [6] requires Jasons internal actions.",
                "A requirement for implementing our approach is a reflective capability in the BDI agent implementation.",
                "Suitable implementations of the BDI formalism are JACK [2], Jadex [14], and SPARK [9].",
                "All three allow meta level methods that are cued by meta events such as goal adoption or plan failure, and offer introspective capabilities over goal and intention states.",
                "Such meta level facilities are also required by the approach of Unruh et al. [21], who define goal-based semantic compensation for an agent.",
                "Failure-handling goals are invoked according to failurehandling strategy rules, by a dedicated agent Failure Handling Component (FHC) that tracks task execution.",
                "These goals are specified by the agent programmer and attached to tasks, much like our FAb(P, PF , PA) construct associates failure and abort methods with a plan P. Note, however, that in contrast to both [6] and our semantics, [21] attach the failure-handling knowledge at the goal, not plan, level.",
                "Their failure-handling goals may consist of stabilization goals that perform localized, immediate clean-up to restore the agents state to a known, stable state, and compensation goals that perform undo actions.",
                "Compensation goals are triggered on aborting a goal, and so not necessarily on goal failure (i.e., if the FHC directs the agent to retry the failed goal and the retry is successful).",
                "The FHC approach is defined at the goal level in order to facilitate abstract specification of failure-handling knowledge; the FHC decides when to address a failure and what to do (i.e., what failurehandling goals to invoke), separating this knowledge from the how of implementing corrective actions (i.e., what plan to execute to meet the adopted failure-handling goal).",
                "This contrasts with simplistic plan-level failure handling in which the what and how are intermingled in domain task knowledge.",
                "While our approach is defined at the plan level, our extended BDI semantics provides for the separation of execution and failure handling.",
                "Further, the FHC explicitly maintains data structures to track agent execution.",
                "We leverage the existing execution structures and self-reflective ability of a BDI agent to accomplish both aborting and failure handling without additional overhead.",
                "FHCs failure-handling strategy rules (e.g., whether to retry a failed goal) are replaced by instructions in our PF and PA plans, together with meta-level default failure handlers according to the agents nature (e.g., blindly committed).",
                "The FHC approach is independent of the architecture of the agent itself, in contrast to our work that is dedicated to the BDI formalism (although not tied to any one agent system).",
                "Thus no formal semantics are developed in [21]; the FHCs operation is given as 14 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) a state-based protocol.",
                "This approach, together with state checkpointing, is used for multi-agent systems in [22].",
                "The resulting architecture embeds their failure handling approach within a pair processing architecture for agent crash recovery.",
                "Other work on multi-agent exception handling includes AOEXs distributed exception handling agents [5], and the similar sentinels of [8].",
                "In both cases, failure-handling logic and knowledge are decoupled from the agents; by contrast, while separating exception handling from domain-specific knowledge, Unruh et al.s FHC and our approach both retain failure-handling logic within an agent. 6.",
                "CONCLUSION AND FUTURE WORK The tasks and plans of an agent may not successfully reach completion, either by the choice of the agent to abort them (perhaps at the request of another agent to do so), or by unbidden factors that lead to failure.",
                "In this paper we have presented a procedure-based approach that incorporates aborting tasks and plans into the deliberation cycle of a BDI-style agent, thus providing a unified approach to failure and abort.",
                "Our primary contribution is an analysis of the requirements on the operation of the agent for aborting tasks and plans, and a corresponding operational semantics for aborting in the abstract agent language CAN.",
                "We are planning to implement an instance of our approach in the SPARK agent system [9]; in particular, the work of this paper will be the basis for SPARKs abort handling mechanism.",
                "We are also developing an analysis tool for our extended version of CAN as a basis for experimentation.",
                "An intelligent agent will not only gracefully handle unsuccessful tasks and plans, but also will deliberate over its cognitive attitudes to decide its next course of action.",
                "We have assumed the default behaviour of a BDI-style agent, according to its nature: for instance, to retry alternatives to a failed plan until one succeeds or until no alternative plans remain (in which case to fail the task).",
                "Future work is to place our approach in service of more dynamic agent reasoning, such as the introspection that an agent capable of reasoning over task interaction effects and resource requirements can accomplish [19, 12].",
                "Related to this is determining the cost of aborting a task or plan, and using this as an input to the deliberation process.",
                "This would in particular influence the commitment the agent has towards a particular task: the higher the cost, the greater the commitment.",
                "Our assumption that abort-methods do not fail, as discussed above, is a pragmatic one.",
                "However, this is an issue worthy of further exploration, either to develop weaker assumptions that are also practical, or to analyze conditions under which our assumption is realistic.",
                "A further item of interest is extending our approach to failure and abort to maintenance goals [1].",
                "For such goals a different operational semantics for abort is necessary than for achievement goals, to match the difference in semantics of the goals themselves.",
                "Acknowledgements We thank Lin Padgham and the anonymous reviewers for their comments.",
                "The first author acknowledges the support of the Australian Research Council and Agent Oriented Software under grant LP0453486.",
                "The work of the two authors at SRI International was supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No.",
                "NBCHD030010.",
                "Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the view of DARPA or the Department of Interior-National Business Center. 7.",
                "REFERENCES [1] L. Braubach, A. Pokahr, D. Moldt, and W. Lamersdorf.",
                "Goal representation for BDI Agent systems.",
                "In Proc. of Second Intl.",
                "Workshop on Programming Multi-Agent Systems (ProMAS04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson, and A. Lucas.",
                "JACK intelligent agents - components for intelligent agents in Java.",
                "AgentLink News, Issue 2, 1999. [3] M. G. Chessell, C. Vines, D. Butler, C. M. Ferreira, and P. Henderson.",
                "Extending the concept of transaction compensation.",
                "IBM Systems Journal, 41(4), 2002. [4] M. Dastani, M. B. van Riemsdijk, and J.-J.",
                "C. Meyer.",
                "Goal types in agent programming.",
                "In Proc. of AAMAS06, 2006. [5] S. Entwisle, S. Loke, S. Krishnaswamy, and E. Kendall.",
                "Aoex: An agent-based exception handling framework for building reliable, distributed, open software systems.",
                "In Proc. of Seventh Joint Conf. on Knowledge-Based Software Engineering, 2006. [6] J. F. H¨ubner, R. H. Bordini, and M. Wooldridge.",
                "Programming declarative goals using plan patterns.",
                "In Proc. of 4th Intl.",
                "Workshop on Declarative Agent Languages and Technologies, 2006. [7] D. Kinny.",
                "The Psi calculus: an algebraic agent language.",
                "In Proc. of ATAL01, 2001. [8] M. Klein, J.",
                "A. Rodr´ıguez-Aguilar, and C. Dellarocas.",
                "Using domain-independent exception handling services to enable robust open multi-agent systems: The case of agent death.",
                "Autonomous Agents and Multi-Agent Systems, 7(1-2):179-189, 2003. [9] D. Morley and K. Myers.",
                "The SPARK agent framework.",
                "In Proc. of AAMAS04, 2004. [10] D. Morley, K. L. Myers, and N. Yorke-Smith.",
                "Continuous refinement of agent resource estimates.",
                "In Proc. of AAMAS06, 2006. [11] K. Myers, P. Berry, J. Blythe, K. Conley, M. Gervasio, D. McGuinness, D. Morley, A. Pfeffer, M. Pollack, and M. Tambe.",
                "An intelligent personal assistant for task and time management.",
                "AI Magazine, 28, 2007.",
                "To appear. [12] K. L. Myers and N. Yorke-Smith.",
                "A cognitive framework for delegation to an assistive user agent.",
                "In Proc. of AAAI 2005 Fall Symposium on Mixed-Initiative Problem-Solving Assistants, 2005. [13] L. Padgham and M. Winikoff.",
                "Developing Intelligent Agent Systems: A Practical Guide.",
                "John Wiley and Sons, 2004. [14] A. Pokahr, L. Braubach, and W. Lamersdorf.",
                "Jadex: A BDI reasoning engine.",
                "In R. Bordini, M. Dastani, J. Dix, and A. E. F. Seghrouchni, editors, Multi-Agent Programming.",
                "Springer, 2005. [15] A. S. Rao.",
                "AgentSpeak(L): BDI agents speak out in a logical computable language.",
                "In Proc. of Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World, 1996. [16] A. S. Rao and M. P. Georgeff.",
                "An abstract architecture for rational agents.",
                "In Proc. of KR92, 1992. [17] S. Sardi˜na, L. de Silva, and L. Padgham.",
                "Hierarchical planning in BDI agent programming languages: a formal approach.",
                "In Proc. of AAMAS06, 2006. [18] S. Sardina and L. Padgham.",
                "Goals in the context of bdi plan failure and planning.",
                "In Proc. of AAMAS07, 2007. [19] J. Thangarajah, L. Padgham, and M. Winikoff.",
                "Detecting and exploiting positive goal interaction in intelligent agents.",
                "In Proc. of AAMAS03, 2003. [20] J. Thangarajah, M. Winikoff, L. Padgham, and K. Fischer.",
                "Avoiding resource conflicts in intelligent agents.",
                "In Proc. of ECAI-02, 2002. [21] A. Unruh, J. Bailey, and K. Ramamohanarao.",
                "A framework for goal-based semantic compensation in agent systems.",
                "In Proc. of First Intl.",
                "Workshop on Safety and Security in Multi-Agent Systems, 2004. [22] A. Unruh, H. Harjadi, J. Bailey, and K. Ramamohanarao.",
                "Semantic-compensation-based recovery management in multi-agent systems.",
                "In Proc. of Second IEEE Symposium on Multi-Agent Security and Survivability (IEEE MAS&S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland, and J. Thangarajah.",
                "Declarative and procedural goals in intelligent agent systems.",
                "In Proc. of KR02, 2002.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 15"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Can proporciona una \"construcción de objetivos\" explícita que captura los aspectos declarativos y de procedimiento de un objetivo.construcción de objetivos",
                "Esto también es cierto en el lenguaje de la lata, pero, para mantener la persistencia de los objetivos, se introduce una \"construcción de objetivos\".construcción de objetivos",
                "Del mismo modo, con la \"construcción de objetivos\" ya no podemos abandonar completamente el programa, el objetivo contiene tan pronto como se mantenga la condición de éxito o fracaso;Ahora debemos tener en cuenta la existencia de cualquier método de abortes aplicable al programa.construcción de objetivos",
                "Explicamos esta simple modificación de la construcción paralela a continuación cuando llegamos a la traducción de la \"construcción de objetivos\".construcción de objetivos",
                "Utilizamos la \"construcción de objetivos\" para permitirnos eliminar la ejecución de un programa dentro de un PAP V cuando es necesario abortar.construcción de objetivos",
                "Por lo tanto, la condición que realmente usamos en la \"construcción de objetivos\" para probar cuándo eliminar el programa es SAN (V).construcción de objetivos",
                "Nuestro uso del \"construcción de objetivos\" es por su capacidad para eliminar la ejecución de un programa cuando se cumplen las condiciones.construcción de objetivos",
                "Por lo tanto, si la \"construcción de objetivos\" falla, entonces el programa fue abortado o falló.construcción de objetivos",
                "Definimos μV (P1 P2) para que sea: prependid (V, V);prependid (V, V);+a (v);+a (v);(Objetivo (¬A (V), (μV (P1); −a (V) +F (V)), San (V) ∨ F (V)) ( +Abort (V); −a (V))Objetivo (¬A (V), (μV (P2); −a (V) +F (V)), SAN (V) ∨ F (V)) ( +Abort (V); −a (V))));? ¬abort (v) ∧ ¬abort (v) Finalmente, necesitamos modificar las ocurrencias de la \"construcción de objetivos\" de dos maneras: Primero, para asegurarnos de que los métodos de manejo de abortes no se eviten cuando se satisfacen las condiciones de éxito o fallay segundo, para activar el aborto del programa contenido cuando se cumplen las condiciones de éxito o falla.construcción de objetivos",
                "Para transformar la \"construcción de objetivos\", necesitamos extender la lata estándar con una construcción de espera y condición.construcción de objetivos",
                "Aumentamos el lenguaje de lata con las siguientes reglas para el operador de guardia :: b | = φ b, g, (φ: p - → b, g, p: verdadero b | = φ b, g, (φ: p) − −→ b, g, (φ: p): falso Para especificar μV (objetivo φs, p, φf ´), generamos un nuevo PAP y ejecutamos el programa dentro de la \"construcción de objetivos\" en este nuevo contexto. Construcción de objetivos",
                "Cambiamos la condición de éxito y falla de la \"construcción de objetivos\" a una rama paralela utilizando la construcción de espera y condición, y modificamos el objetivo de usar la condición ahora de la condición de SAN (v) como la condición de éxito.construcción de objetivos",
                "Luego tenemos como la cláusula del plan traducido: AFC (V): Verdadero ← Prependid (V, V);+a (v);Objetivo (¬A (V), (! Scr (V);! Wfr (R, V) ;? R = Y; −a (V) +F (V)), San (V) ∨ F (V)))una \"construcción de objetivos\".construcción de objetivos",
                "Si el cuerpo del plan antiguo falla, o si la tarea debe ser abortada, la \"construcción de objetivos\" falla.construcción de objetivos",
                "La traducción de la primera cláusula de plan, para SMS, es más compleja, debido a la construcción paralela que introduce PAP anidadas: SMS (M, V): ISconf (M) ← Prependid (V, V);+a (v);Objetivo (¬A (V), ((! APN (V);! Twa (V); Prependid (V, V); Prependid (V, V); +A (V); +A (V); (Objetivo(¬A (v), (! Afc (v); −a (v) +f (v)), san (v) ∨ f (v)) ( +abort (v); −a (v)) objetivo(¬A (V), (! Twp (V); −a (V) +F (V)), San (V) ∨ F (V)) ( +Abort (V); −a (V)))));? ¬abort (v) ∧ ¬abort (V) ;! HPS (V); −a (V)) +F (V)), SAN (V) ∨ F (V)) ((((V (V (V (V (V (V));! Cpn (v))! Cpn (v)); −a (v);? Falso) Aquí podemos ver que si la tarea! Twp (v) falla, entonces f (v) se afirmará, no se afirmará, no se puede afirmar el \"Construcción de objetivos \"que lo contiene, y lo que hace que se aborta (v).construcción de objetivos",
                "Este conjunto de condiciones causará la \"construcción de objetivos\" en la primera cláusula del plan para fallar, eliminando la ejecución de! WFR (R, V).construcción de objetivos",
                "Una vez que se completa esta tarea, la creencia A (V) se retrae, lo que hace que San (V) se haga realidad, lo que lleva a la primera \"construcción de objetivos\" de la segunda cláusula del plan para fallar.construcción de objetivos"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "agent": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Aborting Tasks in BDI Agents John Thangarajah, James Harland RMIT University Melbourne, Australia {johthan,jah}@cs.rmit.edu.au David Morley, Neil Yorke-Smith Artificial Intelligence Center, SRI International Menlo Park, CA 94025 U.S.A. {morley,nysmith}@ai.sri.com ABSTRACT Intelligent agents that are intended to work in dynamic environments must be able to gracefully handle unsuccessful tasks and plans.",
                "In addition, such agents should be able to make rational decisions about an appropriate course of action, which may include aborting a task or plan, either as a result of the agents own deliberations, or potentially at the request of another <br>agent</br>.",
                "In this paper we investigate the incorporation of aborts into a BDI-style architecture.",
                "We discuss some conditions under which aborting a task or plan is appropriate, and how to determine the consequences of such a decision.",
                "We augment each plan with an optional abort-method, analogous to the failure method found in some <br>agent</br> programming languages.",
                "We provide an operational semantics for the execution cycle in the presence of aborts in the abstract <br>agent</br> language CAN, which enables us to specify a BDI-based execution model without limiting our attention to a particular <br>agent</br> system (such as JACK, Jadex, Jason, or SPARK).",
                "A key technical challenge we address is the presence of parallel execution threads and of sub-tasks, which require the <br>agent</br> to ensure that the abort methods for each plan are carried out in an appropriate sequence.",
                "Categories and Subject Descriptors I.2.11 [ARTIFICIAL INTELLIGENCE]: Distributed Artificial Intelligence-Intelligent agents General Terms Design, Reliability, Theory 1.",
                "INTRODUCTION Intelligent agents generally work in complex, dynamic environments, such as air traffic control or robot navigation, in which the success of any particular action or plan cannot be guaranteed [13].",
                "Accordingly, dealing with failure is fundamental to <br>agent</br> programming, and is an important element of <br>agent</br> characteristics such as robustness, flexibility, and persistence [21].",
                "In <br>agent</br> architectures inspired by the Belief-Desire-Intention (BDI) model [16], these properties are often characterized by the interactions between beliefs, goals, and plans [2].1 In general, an <br>agent</br> that wishes to achieve a particular set of tasks will pursue a number of plans concurrently.",
                "When failures occur, the choice of plans will be reviewed.",
                "This may involve seeking alternative plans for a particular task, re-scheduling tasks to better comply with resource constraints, dropping some tasks, or some other decision that will increase the likelihood of success [12, 14].",
                "Failures can occur for a number of reasons, and it is often not possible to predict these in advance, either because of the complexity of the system or because changes in the environment invalidate some earlier decisions.",
                "Given this need for deliberation about failed tasks or plans, failure deliberation is commonly built into the agents execution cycle.",
                "Besides dealing with failure, an important capability of an intelligent <br>agent</br> is to be able to abort a particular task or plan.",
                "This decision may be due to an internal deliberation (such as the <br>agent</br> believing the task can no longer be achieved, or that some conflicting task now has a higher priority) or due to an external factor (such as another <br>agent</br> altering a commitment, or a change in the environment).",
                "Aborting a task or plan is distinct from its failure.",
                "Failure reflects an inability to perform and does not negate the need to perform - for example, a reasonable response to failure may be to try again.",
                "In contrast, aborting says nothing about the ability to perform; it merely eliminates the need.",
                "Failure propagates from the bottom up, whereas aborting propagates from the top down.",
                "The potential for concurrently executing sub-plans introduces different complexities for aborting and failure.",
                "For aborting, it means that multiple concurrent sub-plans may need to be aborted as the abort is propagated down.",
                "For failure, it means that parallel-sibling plans may need to be aborted as the failure is propagated up.",
                "There has been a considerable amount of work on plan failures (such as detecting and resolving resource conflicts [20, 10]) and most <br>agent</br> systems incorporate some notion of failure handling.",
                "However, there has been relatively little work on the development of abort techniques beyond simple dropping of currently intended plans and tasks, which does not deal with the clean-up required.",
                "As one consequence, most <br>agent</br> systems are quite limited in their treatment of the situation where one branch of a parallel construct 1 One can consider both tasks to be performed and goals to achieve a certain state of the world.",
                "A task can be considered a goal of achieving the state of the task having been performed, and a goal can be considered a task of bringing about that state of the world.",
                "We adopt the latter view and use task to also refer to goals. 8 978-81-904262-7-5 (RPS) c 2007 IFAAMAS fails (common approaches include either letting the other branch run to completion unhindered or dropping it completely).",
                "In this paper we discuss in detail the incorporation of abort cleanup methods into the <br>agent</br> execution cycle, providing a unified approach to failure and abort.",
                "A key feature of our procedure-based approach is that we allow each plan to execute some particular code on a failure and on an abort.",
                "This allows a plan to attempt to ensure a stable, known state, and possibly to recover some resources and otherwise clean up before exiting.",
                "Accordingly, a central technical challenge is to manage the orderly execution of the appropriate clean-up code.",
                "We show how aborts can be smoothly introduced into a BDI-style architecture, and for the first time we give an operational semantics for aborting in the abstract <br>agent</br> language CAN [23, 17].",
                "This allows us to specify an appropriate level of detail for the execution model, without focusing on the specific constructs of any one <br>agent</br> system such as JACK [2], Jadex [14], Jason [6], or SPARK [9].",
                "Our focus is on a single <br>agent</br>, complementary to related work that considers exception handling for single- and multiagent systems (e.g., [22, 5, 6]).",
                "This paper is organized as follows.",
                "In Section 2 we give an example of the consequences of aborting a task, and in Section 3 we discuss some circumstances under which aborts should occur, and the appropriate representation and invocation procedures.",
                "In Section 4 we show how we can use CAN to formally specify the behaviour of an aborted plan.",
                "Section 5 discusses related work, and in Section 6 we present our conclusions and future work. 2.",
                "MOTIVATING EXAMPLE Alice is a knowledge worker assisted by a learning, personal assistive <br>agent</br> such as CALO [11].",
                "Alice plans to attend the IJCAI conference later in the year, and her CALO <br>agent</br> adopts the task of Support Meeting Submission (SMS) to assist her.",
                "CALOs plan for an SMS task in the case of a conference submission consists of the following sub-tasks: 1.",
                "Allocate a Paper Number (APN) to be used for administrative purposes in the company. 2.",
                "Track Writing Abstract (TWA): keep track of Alices progress in preparing an abstract. 3.",
                "Apply For Clearance (AFC) for publication from Alices manager based on the abstract and conference details. 4.",
                "Track Writing Paper (TWP): keep track of Alices progress in writing the paper. 5.",
                "Handle Paper Submission (HPS): follow company internal procedures for submitting a paper to a conference.",
                "These steps must be performed in order, with the exception of steps 3 (AFC) and 4 (TWP), which may be performed in parallel.",
                "Similarly, CALO can perform the task Apply For Clearance (AFC) by a plan consisting of: 1.",
                "Send Clearance Request (SCR) to Alices manager. 2.",
                "Wait For Response (WFR) from the manager. 3.",
                "Confirm that the response was positive, and fail otherwise.",
                "Now suppose that a change in circumstances causes Alice to reconsider her travel plans while she is writing the paper.",
                "Alice will no longer be able to attend IJCAI.",
                "She therefore instructs her CALO <br>agent</br> to abort the SMS task.",
                "Aborting the task implies aborting both the SMS plan and the AFC subplan.",
                "Aborting the first plan requires CALO to notify the paper number registry that the allocated paper number is obsolete, which it can achieve by the Cancel Paper Number (CPN) task.2 Aborting the second plan requires CALO to notify Alices manager that Alice no longer requires clearance for publication, which CALO can achieve by invoking the Cancel Clearance Request (CCR) task.",
                "We note a number of important observations from the example.",
                "First, the decision to abort a particular course of action can come from the internal deliberations of the <br>agent</br> (such as reasoning about priorities in a conflict over resources), or from external sources (such as another <br>agent</br> cancelling a commitment), as in this example.",
                "In this paper we only touch on the problem of determining whether a task or plan should be aborted, instead concentrating on determining the appropriate actions once this decision is made.",
                "Hence, our objective is to determine how to incorporate aborting mechanisms into the standard execution cycle rather than determine what should be aborted and when.",
                "Second, once the decision is made to abort the attempt to submit a paper, there are some actions the <br>agent</br> should take, such as cancelling the clearance request.",
                "In other words, aborting a task is not simply a matter of dropping the task and associated active plans: there are some clean up actions that may need to be done.",
                "This is similar to the case for failure, in that there may also be actions to take when a task or plan fails.",
                "In both cases, note that it is not simply a matter of the <br>agent</br> undo-ing its actions to date; indeed, this may be neither possible (since the <br>agent</br> acts in a situated world and its actions change world state) nor desirable (depending on the semantics of the task).",
                "Rather, cleaning up involves compensation via forward recovery actions [3].",
                "Third, there is a distinction between aborting a task and aborting a plan.",
                "In the former case, it is clear that all plans being executed to perform the task should be aborted; in the latter case, it may be that there are better alternatives to the current plan and one of these should be attempted.",
                "Hence, plan aborting or failure does not necessarily lead to task aborting or failure.",
                "Fourth, given that tasks may contain sub-tasks, which may contain further sub-tasks, it is necessary for a parent task to wait until its children have finished their abort methods.",
                "This is the source of one of the technical challenges that we address: determining the precise sequence of actions once a parent task or plan is aborted. 3.",
                "ABORTING TASKS AND PLANS As we have alluded to, failure and aborting are related concepts.",
                "They both cause the execution of existing plans to cease and, consequentially, the <br>agent</br> to reflect over its current tasks and intentions.",
                "Failure and aborting, however, differ in the way they arise.",
                "In the case of failure, the trigger to cease execution of a task or plan comes from below, that is, the failure of sub-tasks or lower-level plans.",
                "In the case of aborting, the trigger comes from above, that is, the tasks and the parent plans that initiated a plan.",
                "In BDI-style systems such as JACK and SPARK, an agents domain knowledge includes a pre-defined plan library of plan clauses.",
                "Each plan clause has a plan body, which is a program (i.e., combination of primitive actions, sub-tasks, etc.) that can be executed in response to a task or other event should the plan clauses context condition be satisfied.",
                "The <br>agent</br> selects and executes instances of plan clauses to perform its tasks.",
                "There can be more than one applicable plan clause and, in the event that one fails, another applicable one may be attempted.",
                "Plans may have sub-tasks that must succeed 2 CALO needs only drop the TWA and TWP tasks to abort them: for the sake of simplicity we suppose no explicit clean up of its internal state is necessary.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 9 for the plan to succeed.",
                "In such systems, a plan failure occurs if one of the actions or sub-tasks within the plan fails.",
                "The agents action upon plan failure depends on its nature: for example, the <br>agent</br> may declare the task to have failed if one plan has been tried and resulted in failure, or it may retry alternate plans and declare (indeed, must declare) task failure only if all possible alternate plans to perform the task have been tried and resulted in failure.",
                "Observe that, while task failure can follow from plan failure or a sequence of plan failures, plan failure need not lead to task failure provided the <br>agent</br> can successfully complete an alternate plan.",
                "Moreover, task failure can also arise separately from plan failure, if the <br>agent</br> decides to abort the task.",
                "Our approach associates an abort-method with each plan.",
                "This enables the programmer to specify dedicated compensation actions according to how the <br>agent</br> is attempting to perform the task.",
                "Note that our abort-methods can be arbitrary programs and so can invoke tasks that may be performed dynamically in the usual BDI fashion, i.e., the clean-up is not limited to executing a predetermined set of actions.",
                "The question remains which abort-method should be invoked, and in what manner.",
                "Given the complexity of <br>agent</br> action spaces, it is not possible nor desirable to enumerate a static set of rules.",
                "Rather, the <br>agent</br> will invoke its abort-methods dynamically according to the state of execution and its own internal events.",
                "An alternative to attaching an abort-method to each plan is to attach such methods to each atomic action.",
                "We choose the former because: (1) action-level abort-methods would incur a greater overhead, (2) plans are meant to be designed as single cohesive units and are the unit of deliberation in BDI systems, and (3) the cleanup methods for failure in current systems are attached to plans.",
                "In order to understand how the agents abort processing should function, we consider three situations where it is sensible for an <br>agent</br> to consider aborting some of its tasks and plans: 1.",
                "When a task succeeds or fails because of an external factor other than the <br>agent</br> itself, the plan currently executed to perform the task should be aborted.",
                "For example, suppose company policy changes so that employees of Alices seniority automatically have clearance for publishing papers.",
                "Since Alice now has clearance for publishing her paper, CALO can abort the plan for Apply For Clearance.",
                "In doing so it must invoke the abort-method, in this case thus performing Cancel Clearance Request.3 2.",
                "When two or more sub-programs are executed in parallel, if one fails then the others should be aborted, given that the failure of one branch leads to the failure of the overall task.",
                "For example, suppose that part-way through writing the paper, Alice realizes that there is a fatal flaw in her results, and so notifies CALO that she will not be able to complete the paper by the deadline.",
                "The failure of the Track Writing Paper task should cause the Apply For Clearance task being executed in parallel to be aborted. 3.",
                "When an execution event alters the importance of an existing task or intention, the <br>agent</br> should deliberate over whether the existing plan(s) should continue.",
                "For example, suppose that Alice tasks CALO with a new, high-priority task to purchase a replacement laptop, but that Alice lacks enough funds to both purchase the laptop and to attend IJCAI.",
                "Reasoning over resource requirements [20, 10] will cause the <br>agent</br> to realize 3 If there is any difference between how to abort a task that is externally performed versus how to abort one that is now known to be impossible, the abort-method can detect the circumstances and handle the situation as appropriate. that it cannot successfully complete both tasks.",
                "Given that the new task has greater importance, a rational <br>agent</br> will evaluate its best course of action and may decide to abortor at least suspend - the existing task of submitting a paper and intentions derived from it [12].",
                "The operational semantics we provide in Section 4 for aborting tasks and plans captures the first two situations above.",
                "The third situation involves deliberating over the importance of a task, which depends on various factors such as task priority.",
                "Although this deliberation is beyond the scope of this paper, it is a complementary topic of our future work.",
                "Note that the above situations apply to achievement goals, for which the task is completed when a particular state of the world is brought about (e.g., ensure we have clearance).",
                "Different forms of reasoning apply to other goal types [4] such as maintenance goals [1], where the goal is satisfied by maintaining a state of the world for some period of time (e.g., maintain $100 in cash).",
                "Abort Method Representation The intent of aborting a task or plan is that the task or plan and all its children cease to execute, and that appropriate clean-up methods are performed as required.",
                "In contrast to offline planning systems, BDI agents are situated: they perform online deliberation and their actions change the state of the world.",
                "As a result, the effects of many actions cannot be simply undone.",
                "Moreover, the undo process may cause adverse effects.",
                "Therefore, the clean-up methods that we specify are forward recovery procedures that attempt to ensure a stable state and that also may, if possible, recover resources.",
                "The common plan representation in BDI-style systems such as JACK and SPARK includes a failure-method, which is the designated clean-up method invoked when the plan fails.",
                "To this, we add the abort-method, which is invoked if the plan is to be aborted.",
                "In our example, the abort-method for the plan for Support Meeting Submission consists of invoking the sub-task Cancel Paper Number.",
                "The abort-method need not explicitly abort Apply For Clearance, because the <br>agent</br> will invoke the abort-method for the subtask appropriately, as we outline below.",
                "The assumption here is that, like the failure-method, the programmer of the <br>agent</br> system has the opportunity to specify a sensible abort-method that takes into consideration the point in the plan at which the abort is to be executed.",
                "For any plan, the abort-method is optional: if no abort-method is specified, the <br>agent</br> takes no specific action for this plan.",
                "However, the agents default behavioural rules still apply, for example, whether to retry an alternate plan for the parent task.",
                "Note that an explicit representation of the clean-up methods for tasks is not required, since tasks are performed by executing some plan or plans.",
                "Hence, aborting a task means aborting the current plan that is executed to perform that task, as we next describe.",
                "Abort Method Invocation We now informally lay out the agents action upon aborting plans and tasks.",
                "When a plan P is aborted: 1.",
                "Abort each sub-task that is an active child of P. An active child is one that was triggered by P and is currently in execution. 2.",
                "When there are no more active children, invoke the abort method of plan P. 3.",
                "Indicate a plan failure to TP , the parent task of P. We note here that if the parent task TP is not to be aborted then the <br>agent</br> may choose another applicable plan to satisfy TP . 10 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) When a task (or sub-task) T is aborted: 1.",
                "Abort the current active plan to satisfy T (if any). 2.",
                "When there are no more active child processes, drop the task.",
                "The <br>agent</br> thus no longer pursues T. 3.",
                "Note here that when the current active plan for performing T is aborted, no other applicable plans to perform T should be tried as it is the task that is to be aborted.",
                "In order to prevent infinitely cascading clean-up efforts, we assume that abort-methods will never be aborted nor fail.",
                "In reality, however, an abort-method may fail.",
                "In this case, lacking a more sophisticated handling mechanism, the <br>agent</br> simply stops executing the failed abort-method with no further deliberation.",
                "The assumption we make is thus not a reflection of the full complexity of reality, but one that is pragmatic in terms of the <br>agent</br> execution cycle; the approach to failure-handling of [21] makes the same assumption.",
                "In systems such as SPARK, the programmer can specify an alternative behaviour for a failed failure- or abort-method by means of meta-level procedures.",
                "We also assume that failure- and abort-methods terminate in finite time. 4.",
                "OPERATIONAL SEMANTICS We provide the semantics for the task and plan failure and aborting processes outlined above.",
                "We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the goal adoption and dropping mechanisms.",
                "The extensions also simplified the semantics in the earlier work.",
                "We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1.",
                "Following a presentation of the operational semantics of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present. 4.1 CAN Language CAN is a high-level <br>agent</br> language, in a spirit similar to that of AgentSpeak [15] and Kinnys Ψ [7], both of which attempt to extract the essence of a class of implemented BDI <br>agent</br> systems.",
                "CAN provides an explicit goal construct that captures both the declarative and procedural aspects of a goal.",
                "Goals are persistent in CAN in that, when a plan fails, another applicable plan is attempted.",
                "This equates to the default failure handling mechanism typically found in implemented BDI systems such as JACK [2].",
                "In practical systems, tasks are typically translated into events that trigger the execution of some plans.",
                "This is also true in the CAN language, but, in order to maintain the persistence of goals, a goal construct is introduced.",
                "This is denoted by Goal ` φs, P, φf ´ , where φs is the success condition that determines when the goal is considered achieved, φf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once φs or φf become true.",
                "An agents behavior is specified by a plan library, denoted by Π, that consists of a collection of plan clauses of the form e : c ← P, where e is an event, c is a context condition (a logical formula over the agents beliefs that must be true in order for the plan to be applicable)4 and P is the plan body.",
                "The plan body is a program that is defined recursively as follows: P ::= act | +b | −b | ?φ | !e | P1; P2 | P1 P2 | Goal ` φs, P1, φf ´ | P1 P2 | {ψ1 : P1, . . . , ψn : Pn} | nil 4 An omitted c is equivalent to true.",
                "Δ = {ψiθ : Piθ | e : ψi ← Pi ∈ Π ∧ θ = mgu(e, e )} B, !e −→ B, Δ Event ψi : Pi ∈ Δ B |= ψi B, Δ −→ B, Pi Δ \\ {ψi : Pi} Select B, P1 −→ B, (P1 P2) −→ B, P2 fail B, P1 −→ B , P1 B, (P1; P2) −→ B , (P ; P2) Sequence B, P1 −→ B , P B, (P1 P2) −→ B , (P P2) Parallel1 B, P2 −→ B , P B, (P1 P2) −→ B , (P P1) Parallel2 Figure 1: Operational rules of CAN. where P1, . . . , Pn are themselves programs, act is a primitive action that is not further specified, and +b and −b are operations to add and delete beliefs.",
                "The belief base contains ground belief atoms in the form of first-order relations but could be orthogonally extended to other logics.",
                "It is assumed that well-defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ∪ {b}), and to delete a belief from a belief set (B \\ {b}). ?φ is a test for condition φ, and !e5 is an event6 that is posted from within the program.",
                "The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (Goal ` φs, P, φf ´ ).",
                "The above defines the user language.",
                "In addition, a set of auxiliary compound forms are used internally when assigning semantics to constructs. nil is the basic (terminating) program.",
                "When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 : P1, . . . , cn : Pn ).",
                "The other auxiliary compound form, , is a choice operator dual to sequencing: P1 P2 executes P1 and then executes P2 only if P1 failed.",
                "A summary of the operational semantics for CAN in line with [23] and following some of the simplifications of [17] is as follows.",
                "A basic configuration S = B, G, Γ consists of the current belief base B of the <br>agent</br>, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention).",
                "A transition S0 −→ S1 specifies that executing S0 for a single step yields configuration S1.",
                "S0 −→∗ Sn is the usual reflexive transitive closure of −→: Sn is the result of one or more singlestep transitions.",
                "A derivation rule S −→ Sr S −→ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator).",
                "Figure 1 gives some of the operational rules.",
                "The Event rule handles task events by collecting all relevant plan clauses for the event in question: for each plan clause e : ψi ← Pi, if there is a most general unifier, θ = mgu(e, e ) of e and the event in 5 Where it is obvious that e is an event we will sometimes exclude the exclamation mark for readability. 6 Typically an achievement goal.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 11 B |= φs B, Goal ` φs, P, φf ´ −→ B, true Gs B |= φf B, Goal ` φs, P, φf ´ −→ B, fail Gf P = Goal ` φs, P , φf ´ P = P1 £ P2 B |= φs ∨ φf B, P −→ B, Goal ` φs, P £ P , φf ´ GI P = P1 £ P2 B |= φs ∨ φf B, P1 −→ B , P B, Goal ` φs, P, φf ´ −→ B , Goal ` φs, P £ P2, φf ´ GS P = P1 £ P2 B |= φs ∨ φf P1 ∈ {true, fail} B, Goal ` φs, P, φf ´ −→ B, Goal ` φs, P2 £ P2, φf ´ GR Figure 2: Rules for goals in CAN. question, then the rule constructs a guarded alternative ψiθ : Piθ.",
                "The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives: program P Δ states that program P should be tried first, falling back to the remaining alternatives, Δ \\ P, if necessary.",
                "This rule and the fail rule together are used for failure handling: if the current program Pi from a plan clause for a task fails, rule fail is applied first, and then if possible, rule Select will choose another applicable alternative for the task if one exists.",
                "Rule Sequence handles sequencing of programs in the usual way.",
                "Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel.",
                "Figure 2 gives simplified rules for dealing with goals, in line with those presented in [17].",
                "The first rule states that a goal succeeds when φs become true; the second rule states that a goal fails when φf become true.",
                "The third rule GI initializes the execution of a goal-program by updating the goal base and setting the program in the goal to P £ P; the first P is to be executed and the second P is used to keep track of the original program for the goal.",
                "The fourth rule GS executes a single step of the goal-program.",
                "The final rule GR restarts the original program (encoded as P2 of pair P1 £ P2) whenever the current program is finished but the desired and still possible goal has not yet been achieved. 4.2 Aborting Intentions and Handling Failure We next introduce the ability to specify handler programs, in the form of failure- and abort-methods, that deal with the clean-up required when a given program respectively fails or is aborted.",
                "We do not associate failure- and abort- methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies failure- and abort- methods for an arbitrary program.",
                "The FAb(P, PF , PA) construct executes the program P. Should P fail, it executes the failure handling program PF ; should P need to be aborted, it executes the abort handling program PA.",
                "Thus to add failure- and abort- methods PF and PA to a plan clause e : c ← P, we write e : c ← FAb(P, PF , PA).",
                "With the introduction of the ability to abort programs, we modify the parallel construct to allow the failure of one branch to abort the other.",
                "We must take into consideration the possible existence of abort-methods in the aborted branch.",
                "Similarly, with the Goal construct we can no longer completely abandon the program the goal contains as soon as the success or failure condition holds; we must now take into consideration the existence of any abort-methods applicable to the program.",
                "We provide the semantics of an augmented <br>agent</br> language containing the FAb construct by defining a source transformation, similar to macro-expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN.",
                "The one non-standard extension to CAN is a wait-until-condition construct.",
                "We explain this simple modification of the parallel construct below when we come to translation of the Goal construct.",
                "First we describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases: the FAb, parallel, and Goal constructs.",
                "A key issue is that the FAb constructs may be nested, either directly or indirectly.",
                "Let us call each instantiation of the construct at execution time a possible abort point (pap).",
                "Where these constructs are nested, it is important that before the failure- or abort-method of a parent pap is executed, the failure- or abort-methods programs of the children paps are executed first, as described earlier in Section 3.",
                "The need to coordinate the execution of the abort-methods of nested paps requires that there be some way to identify the parents and children of a particular pap.",
                "We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e : c ← P with a plan clause e(v) : c ← μv(P) where v is a free variable, not previously present in the plan clause.",
                "This variable is used to keep track of the context of execution.",
                "The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context.",
                "For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1].",
                "We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51.",
                "This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v .",
                "For most CAN constructs, the context variable is unused or passed unchanged: μv(act) = act μv(+b) = +b μv(−b) = −b μv(nil) = nil μv(!e) = !e(v) μv(P1; P2) = μv(P1); μv(P2) μv(P1 P2) = μv(P1) μv(P2) μv( ψ1 : P1, . . . , ψn : Pn ) = ψ1 : μv(P1), . . . , ψn : μv(Pn) It remains to specify the transformation μv(·) in three cases: the FAb, parallel, and Goal constructs.",
                "These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context.",
                "Let us introduce the primitive action prependID(v, v ) that creates a new pap identifier and prepends it to list v giving list v .",
                "We also introduce the following predicates: • a(v) - the pap v is currently active. • abort(v) - the pap v should be aborted (after aborting all of its descendants). 7 An alternative would be to use meta-level predicates that reflect the current state of the intention structure. 12 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) • f(v) - the program of pap v has failed. • ancestorof(v, v ) ≡ v = v ∨ ancestorof(v, tail(v ))the pap v is an ancestor of pap v . • nac(v) ≡ ¬∃v . (a(v ) ∧ ancestorof(v, v ) ∧ v = v ) - v has no active children. • sa(v) ≡ ∃v .abort(v ) ∧ ancestorof(v , v) - we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active. • san(v) ≡ sa(v) ∧ nac(v) - we should abort v now if we should abort v and v has no active children.",
                "First let us consider the case of the FAb construct.",
                "The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v. We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context.",
                "We need to make sure that we retract the belief that v is active at the end, i.e., −a(v ).",
                "We use the Goal construct to allow us to drop the execution of a program within a pap v when it is necessary to abort.",
                "While executing the program P, we know that we need to drop P and invoke its abort-method if some ancestor of P has been told to abort.",
                "This is represented by the predicate sa(v ) being true.",
                "However, we need to make sure that we do this only after every child pap has had the chance to invoke its abort-method and all these abort-methods have completed: if we drop the program too soon, then execution of the abort-methods of the children will also be dropped.",
                "Therefore, the condition we actually use in the Goal construct to test when to drop the program is san(v ).",
                "This condition relies on the fact that as the children paps complete, they remove the relevant a facts.",
                "Our use of the Goal construct is for its ability to drop the execution of a program when conditions are met.",
                "To leave aside the repeat execution until a condition is met aspect, we must ensure that the success or failure condition of the construct is satisfied once the execution of the program succeeds or fails.",
                "We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on failure, and by having the appropriate success and failure conditions on the Goal.",
                "Hence, if the Goal construct fails, then the program either was aborted or it failed.",
                "We invoke the relevant failure- or abort- method, retract the a(v ) fact, and then fail.",
                "Putting all this together, we formally define μv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agents plan library: prependID(v, v ); +a(v ); Goal ( ¬a(v ), (μv (P); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); μv(PA)) μv(PF )); −a(v ); ?false) Second, we must transform the parallel operator to ensure that the failure of one branch safely aborts the other.",
                "Here we construct two new contexts, v and v , from the existing context v. If one branch fails, it must abort the other branch.",
                "At the end, if either branch was aborted, then we must fail.",
                "Let v and v be new variables distinct from any other in the agents plan library.",
                "We define μv(P1 P2) to be: prependID(v, v ); prependID(v, v ); +a(v ); +a(v ); ( Goal (¬a(v ), (μv (P1); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal (¬a(v ), (μv (P2); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ); ?¬abort(v ) ∧ ¬abort(v ) Finally, we need to modify occurrences of the Goal construct in two ways: first, to make sure that the abort handling methods are not bypassed when the success or failure conditions are satisfied, and second, to trigger the aborting of the contained program when either the success or failure conditions are satisfied.",
                "To transform the Goal construct we need to extend standard CAN with a wait-until-condition construct.",
                "The construct φ : P does not execute P until φ becomes true.",
                "We augment the CAN language with the following rules for the guard operator :: B |= φ B, G, (φ : P −→ B, G, P :true B |= φ B, G, (φ : P) −→ B, G, (φ : P) :false In order to specify μv(Goal ` φs, P, φf ´ ), we generate a new pap and execute the program within the Goal construct in this new context.",
                "We must ensure that belief a(v ) is removed whether the Goal succeeds or fails.",
                "We shift the success and failure condition of the Goal construct into a parallel branch using the wait-until-condition construct, and modify the Goal to use the should abort now condition san(v ) as the success condition.",
                "The waiting branch will trigger the abort of the program should either the success or failure condition be met.",
                "To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active.",
                "Let v be a new variable distinct from any other in the agents plan library.",
                "We define μv(Goal ` φs, P, φf ´ ) to be: prependID(v, v ); +a(v ); ( Goal ( san(v ), μv (P), false) ; −a(v ); ?φs ) φs ∨ φf ∨ ¬a(v ) : +abort(v ) ) The program P will be repeatedly executed until san(v ) becomes true.",
                "There are two ways this can occur.",
                "First, if either the success condition φs or the failure condition φf becomes true, then the second branch of the parallel construct executes.",
                "This causes abort(v ) to become true, and, after the descendant paps abortmethods are executed, san(v ) becomes true.",
                "In this case, P is now dropped, the a(v ) is removed, and the entire construct succeeds or fails based on φs.",
                "The second way for san(v ) to become true is if v or one of its ancestors is aborted.",
                "In this case, once the descendant paps abort-methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming φs is false). 4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2.",
                "We will express tasks by events, for example, the task Allocate a Paper Number we express as the event APN.",
                "Let the output of the Apply For Clearance task be Y or N, indicating the approval or not of Alices manager, respectively.",
                "Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively: SMS(m) : isconf(m) ← FAb(!APN; !TWA; (!AFC !TWP); !HPS, !CPN, !CPN) AFC : true ← FAb(!SCR; !WFR(r); ?r = Y, nil, !CCR) Note that Support Meeting Submission has a parameter m, the meeting of interest (IJCAI, in our example), while Apply For Clearance has no parameters.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two.",
                "Let v and v denote new variables.",
                "Then we have as the translated plan clause: AFC(v ) : true ← prependID(v , v ); +a(v ); Goal ( ¬a(v ), (!SCR(v ); !WFR(r, v ); ?r = Y; −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CCR(v )) nil); −a(v ); ?false) We can see that an extra context parameter has been added to each task and that the old plan body now appears inside a Goal construct.",
                "Should the old plan body succeed, belief a(v ) is retracted, causing the Goal to succeed.",
                "If the old plan body fails, or if the task is to be aborted, the Goal construct fails.",
                "This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and failure.",
                "The translation of the first plan clause, for SMS, is more complex, because of the parallel construct that introduces nested paps: SMS(m, v) : isconf(m) ← prependID(v, v ); +a(v ); Goal ( ¬a(v ), ((!APN(v ); !TWA(v ); prependID(v , v ); prependID(v , v ); +a(v ); +a(v ); ( Goal ( ¬a(v ), (!AFC(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal ( ¬a(v ), (!TWP(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ) ; ?¬abort(v ) ∧ ¬abort(v ); !HPS(v ); −a(v )) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CPN(v)) !CPN(v)); −a(v ); ?false) Here we can see that if the task !TWP(v ) fails then f(v ) will be asserted, failing the Goal construct that contains it, and leading to abort(v ) being asserted.",
                "If the !WFR(r, v ) task in the expansion of !AFC(v ) is still executing and has no active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true.",
                "This set of conditions will cause the Goal construct in the first plan clause to fail, dropping execution of !WFR(r, v ).",
                "The task !CCR(v ) will be executed.",
                "Once this task completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first Goal construct of the second plan clause to fail.",
                "While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely automated, according to the rules set out in Section 4.2.",
                "The translated plan clauses, with the semantics of CAN augmented by our waituntil-condition construct, thus specify the operation of the <br>agent</br> to handle both failure and aborting for the example. 5.",
                "RELATED WORK Plan failure is handled in the extended version of AgentSpeak found in the Jason system [6].",
                "Failure clean-up plans are triggered from goal deletion events −!g.",
                "Such plans, similar to our failure methods, are designed for the <br>agent</br> to effect state changes (act to undo its earlier actions) prior to possibly attempting another plan to achieve the failed goal g. Given Jasons constructs for dropping a goal with an indication of whether or not to try an alternate plan for it, H¨ubner et al. [6] provide an informal description of how a Jason <br>agent</br> modifies its intention structure when a goal failure event occurs.",
                "In a goal deletion plan, the programmer can specify any undo actions and whether to attempt the goal again.",
                "If no goal deletion plan is provided, Jasons default behaviour is to not reattempt the goal.",
                "Failure handling is applied only to plans triggered by addition of an achievement or test goal; in particular, goal deletion events are not posted for failure of a goal deletion plan.",
                "Further, the informal semantics of [6] do not consider parallel sub-goals (i.e., the CAN construct), since such execution is not part of Jasons language.",
                "The implementation of H¨ubner et al. [6] requires Jasons internal actions.",
                "A requirement for implementing our approach is a reflective capability in the BDI <br>agent</br> implementation.",
                "Suitable implementations of the BDI formalism are JACK [2], Jadex [14], and SPARK [9].",
                "All three allow meta level methods that are cued by meta events such as goal adoption or plan failure, and offer introspective capabilities over goal and intention states.",
                "Such meta level facilities are also required by the approach of Unruh et al. [21], who define goal-based semantic compensation for an <br>agent</br>.",
                "Failure-handling goals are invoked according to failurehandling strategy rules, by a dedicated <br>agent</br> Failure Handling Component (FHC) that tracks task execution.",
                "These goals are specified by the <br>agent</br> programmer and attached to tasks, much like our FAb(P, PF , PA) construct associates failure and abort methods with a plan P. Note, however, that in contrast to both [6] and our semantics, [21] attach the failure-handling knowledge at the goal, not plan, level.",
                "Their failure-handling goals may consist of stabilization goals that perform localized, immediate clean-up to restore the agents state to a known, stable state, and compensation goals that perform undo actions.",
                "Compensation goals are triggered on aborting a goal, and so not necessarily on goal failure (i.e., if the FHC directs the <br>agent</br> to retry the failed goal and the retry is successful).",
                "The FHC approach is defined at the goal level in order to facilitate abstract specification of failure-handling knowledge; the FHC decides when to address a failure and what to do (i.e., what failurehandling goals to invoke), separating this knowledge from the how of implementing corrective actions (i.e., what plan to execute to meet the adopted failure-handling goal).",
                "This contrasts with simplistic plan-level failure handling in which the what and how are intermingled in domain task knowledge.",
                "While our approach is defined at the plan level, our extended BDI semantics provides for the separation of execution and failure handling.",
                "Further, the FHC explicitly maintains data structures to track <br>agent</br> execution.",
                "We leverage the existing execution structures and self-reflective ability of a BDI <br>agent</br> to accomplish both aborting and failure handling without additional overhead.",
                "FHCs failure-handling strategy rules (e.g., whether to retry a failed goal) are replaced by instructions in our PF and PA plans, together with meta-level default failure handlers according to the agents nature (e.g., blindly committed).",
                "The FHC approach is independent of the architecture of the <br>agent</br> itself, in contrast to our work that is dedicated to the BDI formalism (although not tied to any one <br>agent</br> system).",
                "Thus no formal semantics are developed in [21]; the FHCs operation is given as 14 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) a state-based protocol.",
                "This approach, together with state checkpointing, is used for multi-<br>agent</br> systems in [22].",
                "The resulting architecture embeds their failure handling approach within a pair processing architecture for <br>agent</br> crash recovery.",
                "Other work on multi-<br>agent</br> exception handling includes AOEXs distributed exception handling agents [5], and the similar sentinels of [8].",
                "In both cases, failure-handling logic and knowledge are decoupled from the agents; by contrast, while separating exception handling from domain-specific knowledge, Unruh et al.s FHC and our approach both retain failure-handling logic within an <br>agent</br>. 6.",
                "CONCLUSION AND FUTURE WORK The tasks and plans of an <br>agent</br> may not successfully reach completion, either by the choice of the <br>agent</br> to abort them (perhaps at the request of another agent to do so), or by unbidden factors that lead to failure.",
                "In this paper we have presented a procedure-based approach that incorporates aborting tasks and plans into the deliberation cycle of a BDI-style <br>agent</br>, thus providing a unified approach to failure and abort.",
                "Our primary contribution is an analysis of the requirements on the operation of the <br>agent</br> for aborting tasks and plans, and a corresponding operational semantics for aborting in the abstract <br>agent</br> language CAN.",
                "We are planning to implement an instance of our approach in the SPARK <br>agent</br> system [9]; in particular, the work of this paper will be the basis for SPARKs abort handling mechanism.",
                "We are also developing an analysis tool for our extended version of CAN as a basis for experimentation.",
                "An intelligent <br>agent</br> will not only gracefully handle unsuccessful tasks and plans, but also will deliberate over its cognitive attitudes to decide its next course of action.",
                "We have assumed the default behaviour of a BDI-style <br>agent</br>, according to its nature: for instance, to retry alternatives to a failed plan until one succeeds or until no alternative plans remain (in which case to fail the task).",
                "Future work is to place our approach in service of more dynamic <br>agent</br> reasoning, such as the introspection that an <br>agent</br> capable of reasoning over task interaction effects and resource requirements can accomplish [19, 12].",
                "Related to this is determining the cost of aborting a task or plan, and using this as an input to the deliberation process.",
                "This would in particular influence the commitment the <br>agent</br> has towards a particular task: the higher the cost, the greater the commitment.",
                "Our assumption that abort-methods do not fail, as discussed above, is a pragmatic one.",
                "However, this is an issue worthy of further exploration, either to develop weaker assumptions that are also practical, or to analyze conditions under which our assumption is realistic.",
                "A further item of interest is extending our approach to failure and abort to maintenance goals [1].",
                "For such goals a different operational semantics for abort is necessary than for achievement goals, to match the difference in semantics of the goals themselves.",
                "Acknowledgements We thank Lin Padgham and the anonymous reviewers for their comments.",
                "The first author acknowledges the support of the Australian Research Council and <br>agent</br> Oriented Software under grant LP0453486.",
                "The work of the two authors at SRI International was supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No.",
                "NBCHD030010.",
                "Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the view of DARPA or the Department of Interior-National Business Center. 7.",
                "REFERENCES [1] L. Braubach, A. Pokahr, D. Moldt, and W. Lamersdorf.",
                "Goal representation for BDI <br>agent</br> systems.",
                "In Proc. of Second Intl.",
                "Workshop on Programming Multi-<br>agent</br> Systems (ProMAS04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson, and A. Lucas.",
                "JACK intelligent agents - components for intelligent agents in Java.",
                "AgentLink News, Issue 2, 1999. [3] M. G. Chessell, C. Vines, D. Butler, C. M. Ferreira, and P. Henderson.",
                "Extending the concept of transaction compensation.",
                "IBM Systems Journal, 41(4), 2002. [4] M. Dastani, M. B. van Riemsdijk, and J.-J.",
                "C. Meyer.",
                "Goal types in <br>agent</br> programming.",
                "In Proc. of AAMAS06, 2006. [5] S. Entwisle, S. Loke, S. Krishnaswamy, and E. Kendall.",
                "Aoex: An <br>agent</br>-based exception handling framework for building reliable, distributed, open software systems.",
                "In Proc. of Seventh Joint Conf. on Knowledge-Based Software Engineering, 2006. [6] J. F. H¨ubner, R. H. Bordini, and M. Wooldridge.",
                "Programming declarative goals using plan patterns.",
                "In Proc. of 4th Intl.",
                "Workshop on Declarative <br>agent</br> Languages and Technologies, 2006. [7] D. Kinny.",
                "The Psi calculus: an algebraic <br>agent</br> language.",
                "In Proc. of ATAL01, 2001. [8] M. Klein, J.",
                "A. Rodr´ıguez-Aguilar, and C. Dellarocas.",
                "Using domain-independent exception handling services to enable robust open multi-<br>agent</br> systems: The case of <br>agent</br> death.",
                "Autonomous Agents and Multi-<br>agent</br> Systems, 7(1-2):179-189, 2003. [9] D. Morley and K. Myers.",
                "The SPARK <br>agent</br> framework.",
                "In Proc. of AAMAS04, 2004. [10] D. Morley, K. L. Myers, and N. Yorke-Smith.",
                "Continuous refinement of <br>agent</br> resource estimates.",
                "In Proc. of AAMAS06, 2006. [11] K. Myers, P. Berry, J. Blythe, K. Conley, M. Gervasio, D. McGuinness, D. Morley, A. Pfeffer, M. Pollack, and M. Tambe.",
                "An intelligent personal assistant for task and time management.",
                "AI Magazine, 28, 2007.",
                "To appear. [12] K. L. Myers and N. Yorke-Smith.",
                "A cognitive framework for delegation to an assistive user <br>agent</br>.",
                "In Proc. of AAAI 2005 Fall Symposium on Mixed-Initiative Problem-Solving Assistants, 2005. [13] L. Padgham and M. Winikoff.",
                "Developing Intelligent <br>agent</br> Systems: A Practical Guide.",
                "John Wiley and Sons, 2004. [14] A. Pokahr, L. Braubach, and W. Lamersdorf.",
                "Jadex: A BDI reasoning engine.",
                "In R. Bordini, M. Dastani, J. Dix, and A. E. F. Seghrouchni, editors, Multi-<br>agent</br> Programming.",
                "Springer, 2005. [15] A. S. Rao.",
                "AgentSpeak(L): BDI agents speak out in a logical computable language.",
                "In Proc. of Seventh European Workshop on Modelling Autonomous Agents in a Multi-<br>agent</br> World, 1996. [16] A. S. Rao and M. P. Georgeff.",
                "An abstract architecture for rational agents.",
                "In Proc. of KR92, 1992. [17] S. Sardi˜na, L. de Silva, and L. Padgham.",
                "Hierarchical planning in BDI <br>agent</br> programming languages: a formal approach.",
                "In Proc. of AAMAS06, 2006. [18] S. Sardina and L. Padgham.",
                "Goals in the context of bdi plan failure and planning.",
                "In Proc. of AAMAS07, 2007. [19] J. Thangarajah, L. Padgham, and M. Winikoff.",
                "Detecting and exploiting positive goal interaction in intelligent agents.",
                "In Proc. of AAMAS03, 2003. [20] J. Thangarajah, M. Winikoff, L. Padgham, and K. Fischer.",
                "Avoiding resource conflicts in intelligent agents.",
                "In Proc. of ECAI-02, 2002. [21] A. Unruh, J. Bailey, and K. Ramamohanarao.",
                "A framework for goal-based semantic compensation in <br>agent</br> systems.",
                "In Proc. of First Intl.",
                "Workshop on Safety and Security in Multi-<br>agent</br> Systems, 2004. [22] A. Unruh, H. Harjadi, J. Bailey, and K. Ramamohanarao.",
                "Semantic-compensation-based recovery management in multi-<br>agent</br> systems.",
                "In Proc. of Second IEEE Symposium on Multi-<br>agent</br> Security and Survivability (IEEE MAS&S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland, and J. Thangarajah.",
                "Declarative and procedural goals in intelligent <br>agent</br> systems.",
                "In Proc. of KR02, 2002.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 15"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Además, tales agentes deben poder tomar decisiones racionales sobre un curso de acción apropiado, que puede incluir abortar una tarea o plan, ya sea como resultado de las deliberaciones de los agentes o potencialmente a pedido de otro \"agente\".agente",
                "Aumentamos cada plan con un método de aborto opcional, análogo al método de falla que se encuentra en algunos lenguajes de programación de \"agente\".agente",
                "Proporcionamos una semántica operativa para el ciclo de ejecución en presencia de abortos en el lenguaje de \"agente\" abstracto, lo que nos permite especificar un modelo de ejecución basado en BDI sin limitar nuestra atención a un sistema de \"agente\" particular (como Jack,Jadex, Jason o Spark).agente",
                "Un desafío técnico clave que abordamos es la presencia de hilos de ejecución paralelos y de sub-tareas, que requieren que el \"agente\" garantice que los métodos de aborto para cada plan se lleven a cabo en una secuencia apropiada.agente",
                "En consecuencia, tratar con el fracaso es fundamental para la programación de \"agente\", y es un elemento importante de las características de \"agente\" como la robustez, la flexibilidad y la persistencia [21].agente",
                "En las arquitecturas \"agentes\" inspiradas en el modelo de creencia-intención-intención (BDI) [16], estas propiedades a menudo se caracterizan por las interacciones entre creencias, metas y planes [2] .1 En general, un \"agente\" que deseaPara lograr un conjunto particular de tareas buscará una serie de planes simultáneamente.agente",
                "Además de lidiar con el fracaso, una capacidad importante de un \"agente\" inteligente es poder abortar una tarea o plan en particular.agente",
                "Esta decisión puede deberse a una deliberación interna (como el \"agente\" que cree que la tarea ya no se puede lograr, o que alguna tarea conflictiva ahora tiene una prioridad más alta) o debido a un factor externo (como otro \"agente\" que altereun compromiso o un cambio en el medio ambiente).agente",
                "Ha habido una cantidad considerable de trabajo en fallas del plan (como detectar y resolver conflictos de recursos [20, 10]) y la mayoría de los sistemas de \"agente\" incorporan alguna noción de manejo de fallas.agente",
                "Como consecuencia, la mayoría de los sistemas de \"agente\" son bastante limitados en su tratamiento de la situación en la que una rama de una construcción paralela 1 se puede considerar ambas tareas que se realizarán y los objetivos para lograr un cierto estado del mundo.agente",
                "En este artículo discutimos en detalle la incorporación de los métodos de limpieza de abortes en el ciclo de ejecución del \"agente\", proporcionando un enfoque unificado para la falla y el aborto.agente",
                "Mostramos cómo los abortos pueden introducirse sin problemas en una arquitectura de estilo BDI, y por primera vez damos una semántica operativa para abortar en el lenguaje abstracto de \"agente\".agente",
                "Esto nos permite especificar un nivel de detalle apropiado para el modelo de ejecución, sin centrarnos en las construcciones específicas de cualquier sistema de \"agente\" como Jack [2], Jadex [14], Jason [6] o Spark [9].agente",
                "Nuestro enfoque está en un solo \"agente\", complementario al trabajo relacionado que considera el manejo de excepciones para sistemas de un solo y multiagente (por ejemplo, [22, 5, 6]).agente",
                "Ejemplo motivador Alice es una trabajadora de conocimiento asistida por un \"agente\" de asistencia personal como CALO [11].agente",
                "Alice planea asistir a la conferencia IJCAI más adelante en el año, y su \"agente\" de CALO adopta la tarea de presentación de la reunión de apoyo (SMS) para ayudarla.agente",
                "Por lo tanto, le indica a su \"agente\" de Calo que aborte la tarea de SMS.agente",
                "Primero, la decisión de abortar un curso de acción particular puede provenir de las deliberaciones internas del \"agente\" (como el razonamiento sobre las prioridades en un conflicto sobre los recursos), o de fuentes externas (como otro \"agente\" que cancela un compromiso), como en este ejemplo.agente",
                "En segundo lugar, una vez que se toma la decisión de abortar el intento de enviar un documento, hay algunas acciones que debe tomar el \"agente\", como cancelar la solicitud de autorización.agente",
                "En ambos casos, tenga en cuenta que no se trata simplemente del \"agente\" que deshace sus acciones hasta la fecha;De hecho, esto no es posible (ya que el \"agente\" actúa en un mundo situado y sus acciones cambian el estado mundial) ni deseable (dependiendo de la semántica de la tarea).agente",
                "Ambos hacen que la ejecución de los planes existentes cese y, en consecuencia, el \"agente\" refleje sobre sus tareas e intenciones actuales.agente",
                "El \"Agente\" selecciona y ejecuta instancias de cláusulas del plan para realizar sus tareas.agente",
                "Conf.en agentes autónomos y sistemas múltiples de \"agente\" (AAMAS 07) 9 para que el plan tenga éxito.agente",
                "La acción de los agentes al falla del plan depende de su naturaleza: por ejemplo, el \"agente\" puede declarar la tarea de haber fallado si un plan ha sido juzgado y dado en falla, o puede volver a intentar los planes alternativos y declarar (de hecho, debe declarar)Falla de la tarea Solo si todos los planes alternativos posibles para realizar la tarea se han probado y han resultado en una falla.agente",
                "Observe que, si bien la falla de la tarea puede seguir de la falla del plan o una secuencia de fallas del plan, la falla del plan no es necesario que la falla de la tarea siempre que el \"agente\" pueda completar con éxito un plan alternativo.agente",
                "Además, la falla de la tarea también puede surgir por separado de la falla del plan, si el \"agente\" decide abortar la tarea.agente",
                "Esto permite al programador especificar acciones de compensación dedicadas de acuerdo con cómo el \"agente\" intenta realizar la tarea.agente",
                "Dada la complejidad de los espacios de acción de \"agente\", no es posible ni deseable enumerar un conjunto estático de reglas.agente",
                "Más bien, el \"agente\" invocará sus métodos abortados dinámicamente de acuerdo con el estado de ejecución y sus propios eventos internos.agente",
                "Para comprender cómo deben funcionar el procesamiento de los agentes, consideramos tres situaciones en las que es sensato que un \"agente\" considere abortar algunas de sus tareas y planes: 1. Agente",
                "Cuando una tarea tiene éxito o falla debido a un factor externo que no sea el \"agente\" en sí, el plan actualmente ejecutado para realizar la tarea debe ser abortado.agente",
                "Cuando un evento de ejecución altera la importancia de una tarea o intención existente, el \"agente\" debe deliberar sobre si los planes existentes deberían continuar.agente",
                "El razonamiento sobre los requisitos de recursos [20, 10] hará que el \"agente\" se dé cuenta de 3 si hay alguna diferencia entre cómo abortar una tarea que se realiza externamente versus cómo abortar una que ahora se sabe que es imposible, el método de abortopuede detectar las circunstancias y manejar la situación según corresponda.que no puede completar con éxito ambas tareas.agente",
                "Dado que la nueva tarea tiene mayor importancia, un \"agente\" racional evaluará su mejor curso de acción y puede decidir abortar al menos suspender, la tarea existente de enviar un documento e intenciones derivadas de él [12].agente",
                "El método de aborto no necesita abortar explícitamente la solicitud de autorización, porque el \"agente\" invocará el método de aborto para la subtarea adecuadamente, a medida que describimos a continuación.agente",
                "La suposición aquí es que, como el método de falla, el programador del sistema \"agente\" tiene la oportunidad de especificar un método de aborto sensible que tenga en cuenta el punto en el plan en el que se ejecutará el aborto.agente",
                "Para cualquier plan, el método de aborto es opcional: si no se especifica el método de aborto, el \"agente\" no toma medidas específicas para este plan.agente",
                "Indique una falla del plan para TP, la tarea principal de P. Notamos aquí que si la tarea principal no debe ser abortada, el \"agente\" puede elegir otro plan aplicable para satisfacer TP.10 El sexto intl.agente",
                "Conf.en agentes autónomos y sistemas múltiples de \"agente\" (AAMAS 07) cuando se aborta una tarea (o subasta) t: 1. Agente",
                "El \"agente\" ya no persigue a T. 3. Agente",
                "En este caso, sin un mecanismo de manejo más sofisticado, el \"agente\" simplemente deja de ejecutar el método de aborto fallido sin más deliberación.agente",
                "La suposición que hacemos, por lo tanto, no es un reflejo de la complejidad completa de la realidad, sino una pragmática en términos del ciclo de ejecución \"agente\";El enfoque para el manejo de fallas de [21] hace la misma suposición.agente",
                "Después de una presentación de la semántica operativa de nuestro enfoque en la Sección 4.2, en la Sección 4.3 proporcionamos un ejemplo trabajado para aclarar la semántica que presentamos.4.1 El lenguaje de Can puede ser un lenguaje de \"agente\" de alto nivel, en un espíritu similar al de AgentsPeak [15] y Kinnys ψ [7], los cuales intentan extraer la esencia de una clase de sistemas \"agentes\" implementados de BDI..agente",
                "Una configuración básica s = b, g, γ consiste en la base de creencias actual B del \"agente\", el conjunto actual de los objetivos g que se persiguen (es decir, un conjunto de fórmulas) y el programa actual P (es decir, elintención actual).agente",
                "Conf.en agentes autónomos y sistemas múltiples de \"agente\" (aamas 07) 11 b | = φs b, objetivo `φS, P, φF ´-→ B, verdadero GS B | = φf B, Objetivo` φS, P, φF ´--→ b, falla gf p = meta `φS, p, φf ´ p = p1 £ p2 b | = φS ∨ φF b, p - → b, objetivo` φs, p £ p, φf ´ gi p = p1 £ p2 b,| = φs ∨ φf b, p1 - → b, p b, objetivo `φs, p, φf ´ - → b, objetivo` φs, p £ p2, φf ´ gs p = p1 £ p2 b | = φS ∨ φf p1 ∈{Verdadero, Fail} B, Objetivo `φS, P, φf ´ - → B, Objetivo` φs, P2 £ P2, φf ´ Gr Figura 2: Reglas para objetivos en Can.Pregunta, entonces la regla construye una alternativa protegida ψiθ: Piθ.agente",
                "Proporcionamos la semántica de un lenguaje de \"agente\" aumentado que contiene la construcción FAB definiendo una transformación de origen, similar a la macroexpansión, que mapea una biblioteca de plan que contiene la construcción FAB (P, PF, PA) en (casi) estándar.agente",
                "Conf.En agentes autónomos y sistemas múltiples de \"agente\" (AAMAS 07) • F (v): el programa de PAP V ha fallado.• Ancestorof (V, V) ≡ V = V ∨ Ancestorof (V, cola (V)) El PAP V es un antepasado de PAP V.• NAC (V) ≡ ¬∃V.(A (V) ∧ Ancestorof (V, V) ∧ V = V) - V no tiene hijos activos.• Sa (V) ≡ ∃V .Abort (V) ∧ Ancestorof (V, V) - Deberíamos abortar V, es decir, el aborto es cierto de V o algún antepasado;Sin embargo, debemos esperar hasta que no hay hijos de V activos.• SAN (V) ≡ SA (V) ∧ NAC (V) - Deberíamos abortar V ahora si debemos abortar V y V no tienen hijos activos.agente",
                "Conf.En agentes autónomos y sistemas múltiples \"agentes\" (AAMAS 07) 13 Veamos primero la traducción de la segunda cláusula del plan, para AFC, ya que es la más simple de los dos.agente",
                "Las cláusulas del plan traducido, con la semántica de Can aumentada por nuestra construcción de condición Waituntil, especifican así la operación del \"agente\" para manejar tanto la falla como el aborto para el ejemplo.5. Agente",
                "Dichos planes, similares a nuestros métodos de falla, están diseñados para que el \"agente\" efectúe los cambios estatales (ACT para deshacer sus acciones anteriores) antes de intentar otro plan para lograr el objetivo fallido g.Dado las construcciones de Jasons para dejar caer un objetivo con una indicación de si probar o no un plan alternativo para ello, H¨ubner et al.[6] Proporcione una descripción informal de cómo un \"agente\" de Jason modifica su estructura de intención cuando ocurre un evento de falla de objetivo.agente",
                "Un requisito para implementar nuestro enfoque es una capacidad reflexiva en la implementación de \"agente\" BDI.agente",
                "Dichas instalaciones de meta nivel también son requeridas por el enfoque de Unruh et al.[21], quienes definen la compensación semántica basada en objetivos para un \"agente\".agente",
                "Los objetivos de manejo de fallas se invocan de acuerdo con las reglas de la estrategia de control de la falla, por un componente dedicado de manejo de fallas de \"agente\" (FHC) que rastrea la ejecución de la tarea.agente",
                "El programador \"agente\" especifica estos objetivos y se adjunta a las tareas, al igual que nuestros fabulosos (P, PF, PA) construyen la falla de los asociados y los métodos de aborto con un Plan P. Nota, sin embargo, que en contraste con [6] y conNuestra semántica, [21] adjunta el conocimiento de manejo de fallas a nivel, no plan, no plan.agente",
                "Los objetivos de compensación se desencadenan al abortar un objetivo, por lo que no necesariamente en la falla del objetivo (es decir, si el FHC dirige al \"agente\" que vuelva a intentar el objetivo fallido y el reintento es exitoso).agente",
                "Además, el FHC mantiene explícitamente estructuras de datos para rastrear la ejecución de \"agente\".agente",
                "Aprovechamos las estructuras de ejecución existentes y la capacidad autorreflexiva de un \"agente\" de BDI para lograr tanto el aborto como el manejo de fallas sin sobrecarga adicional.agente",
                "El enfoque FHC es independiente de la arquitectura del \"agente\" en sí, en contraste con nuestro trabajo dedicado al formalismo BDI (aunque no está vinculado a ningún sistema de \"agente\").agente",
                "Conf.en agentes autónomos y sistemas múltiples de \"agente\" (AAMAS 07) un protocolo basado en el estado.agente",
                "Este enfoque, junto con el punto de control estatal, se utiliza para sistemas múltiples \"agentes\" en [22].agente",
                "La arquitectura resultante incorpora su enfoque de manejo de fallas dentro de una arquitectura de procesamiento de pares para la recuperación de choques de \"agente\".agente",
                "Otro trabajo sobre el manejo de excepciones multi-\"agentes\" incluye agentes de manejo de excepciones distribuidas AOEXS [5] y los centinelas similares de [8].agente",
                "En ambos casos, la lógica y el conocimiento de manejo de fallas se desacoplan de los agentes;Por el contrario, al separar el manejo de excepciones del conocimiento específico del dominio, Unruh et al.s FHC y nuestro enfoque retienen la lógica de manejo de fallas dentro de un \"agente\".6. Agente",
                "Conclusión y trabajo futuro Las tareas y planes de un \"agente\" pueden no alcanzar con éxito la finalización, ni por la elección del \"agente\" para abortarlos (tal vez a pedido de otro agente para que lo haga), o por factores no deseados que lideranal fracaso.agente",
                "En este artículo, hemos presentado un enfoque basado en el procedimiento que incorpora tareas y planes de aborto en el ciclo de deliberación de un \"agente\" de estilo BDI, proporcionando así un enfoque unificado para la falla y el aborto.agente",
                "Nuestra contribución principal es un análisis de los requisitos sobre el funcionamiento del \"agente\" para abortar las tareas y planes, y una semántica operativa correspondiente para abortar en el lenguaje abstracto \"agente\" puede.agente",
                "Estamos planeando implementar una instancia de nuestro enfoque en el sistema de \"agente\" de Spark [9];En particular, el trabajo de este documento será la base del mecanismo de manejo de las chispas.agente",
                "Un \"agente\" inteligente no solo manejará con gracia tareas y planes sin éxito, sino que también deliberará sobre sus actitudes cognitivas para decidir su próximo curso de acción.agente",
                "Hemos asumido el comportamiento predeterminado de un \"agente\" de estilo BDI, según su naturaleza: por ejemplo, volver a intentar las alternativas a un plan fallido hasta que uno tenga éxito o hasta que no queden planes alternativos (en cuyo caso fallar la tarea).agente",
                "El trabajo futuro es colocar nuestro enfoque en el servicio del razonamiento de \"agente\" más dinámico, como la introspección que un \"agente\" capaz de razonar sobre los efectos de interacción de tareas y los requisitos de recursos pueden lograr [19, 12].agente",
                "Esto influiría en particular en el compromiso que el \"agente\" tiene hacia una tarea particular: cuanto mayor sea el costo, mayor será el compromiso.agente",
                "El primer autor reconoce el apoyo del Consejo de Investigación de Australia y el software orientado al \"agente\" bajo Grant LP0453486.agente",
                "Representación de objetivos para sistemas de \"agente\" BDI.agente",
                "Taller sobre programación de sistemas múltiples \"agentes\" (Permas04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson y A. Lucas.agente",
                "Tipos de objetivos en programación de \"agente\".agente",
                "AOEX: un marco de manejo de excepciones basado en un \"agente\" para construir sistemas de software abiertos confiables, distribuidos y abiertos.agente",
                "Taller sobre idiomas y tecnologías declarativas de \"agente\", 2006. [7] D. Kinny.agente",
                "El cálculo de PSI: un lenguaje algebraico \"agente\".agente",
                "Uso de servicios de manejo de excepciones independientes del dominio para permitir sistemas sólidos de \"agente\" abiertos: el caso de la muerte de \"agente\".agente",
                "Agentes autónomos y sistemas múltiples \"agentes\", 7 (1-2): 179-189, 2003. [9] D. Morley y K. Myers.agente",
                "El marco de \"agente\" de Spark.agente",
                "Refinamiento continuo de estimaciones de recursos de \"agente\".agente",
                "Un marco cognitivo para la delegación a un usuario de asistencia \"agente\".agente",
                "Desarrollo de sistemas inteligentes de \"agente\": una guía práctica.agente",
                "En R. Bordini, M. Dastani, J. Dix y A. E. F. Seghrouchni, editores, programación multi-\"agente\".agente",
                "En Proc.del Séptimo Taller Europeo sobre el modelado de agentes autónomos en un mundo múltiple \"agente\", 1996. [16] A. S. Rao y M. P. Georgeff.agente",
                "Planificación jerárquica en lenguajes de programación de \"agente\" de BDI: un enfoque formal.agente",
                "Un marco para la compensación semántica basada en objetivos en los sistemas de \"agente\".agente",
                "Taller sobre seguridad en sistemas múltiples \"agentes\", 2004. [22] A. Unruh, H. Harjadi, J. Bailey y K. Ramamohanarao.agente",
                "Gestión de recuperación basada en la compensación semántica en sistemas múltiples de \"agente\".agente",
                "En Proc.del segundo Simposio IEEE sobre seguridad y supervivencia de \"agente\" múltiple (IEEE MAS y S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland y J. Thangarajah.agente",
                "Objetivos declarativos y de procedimiento en sistemas inteligentes de \"agente\".agente",
                "Conf.en agentes autónomos y sistemas múltiples de \"agente\" (AAMAS 07) 15 Agente"
            ],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "reactive and deliberative architecture": {
            "translated_key": "",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Aborting Tasks in BDI Agents John Thangarajah, James Harland RMIT University Melbourne, Australia {johthan,jah}@cs.rmit.edu.au David Morley, Neil Yorke-Smith Artificial Intelligence Center, SRI International Menlo Park, CA 94025 U.S.A. {morley,nysmith}@ai.sri.com ABSTRACT Intelligent agents that are intended to work in dynamic environments must be able to gracefully handle unsuccessful tasks and plans.",
                "In addition, such agents should be able to make rational decisions about an appropriate course of action, which may include aborting a task or plan, either as a result of the agents own deliberations, or potentially at the request of another agent.",
                "In this paper we investigate the incorporation of aborts into a BDI-style architecture.",
                "We discuss some conditions under which aborting a task or plan is appropriate, and how to determine the consequences of such a decision.",
                "We augment each plan with an optional abort-method, analogous to the failure method found in some agent programming languages.",
                "We provide an operational semantics for the execution cycle in the presence of aborts in the abstract agent language CAN, which enables us to specify a BDI-based execution model without limiting our attention to a particular agent system (such as JACK, Jadex, Jason, or SPARK).",
                "A key technical challenge we address is the presence of parallel execution threads and of sub-tasks, which require the agent to ensure that the abort methods for each plan are carried out in an appropriate sequence.",
                "Categories and Subject Descriptors I.2.11 [ARTIFICIAL INTELLIGENCE]: Distributed Artificial Intelligence-Intelligent agents General Terms Design, Reliability, Theory 1.",
                "INTRODUCTION Intelligent agents generally work in complex, dynamic environments, such as air traffic control or robot navigation, in which the success of any particular action or plan cannot be guaranteed [13].",
                "Accordingly, dealing with failure is fundamental to agent programming, and is an important element of agent characteristics such as robustness, flexibility, and persistence [21].",
                "In agent architectures inspired by the Belief-Desire-Intention (BDI) model [16], these properties are often characterized by the interactions between beliefs, goals, and plans [2].1 In general, an agent that wishes to achieve a particular set of tasks will pursue a number of plans concurrently.",
                "When failures occur, the choice of plans will be reviewed.",
                "This may involve seeking alternative plans for a particular task, re-scheduling tasks to better comply with resource constraints, dropping some tasks, or some other decision that will increase the likelihood of success [12, 14].",
                "Failures can occur for a number of reasons, and it is often not possible to predict these in advance, either because of the complexity of the system or because changes in the environment invalidate some earlier decisions.",
                "Given this need for deliberation about failed tasks or plans, failure deliberation is commonly built into the agents execution cycle.",
                "Besides dealing with failure, an important capability of an intelligent agent is to be able to abort a particular task or plan.",
                "This decision may be due to an internal deliberation (such as the agent believing the task can no longer be achieved, or that some conflicting task now has a higher priority) or due to an external factor (such as another agent altering a commitment, or a change in the environment).",
                "Aborting a task or plan is distinct from its failure.",
                "Failure reflects an inability to perform and does not negate the need to perform - for example, a reasonable response to failure may be to try again.",
                "In contrast, aborting says nothing about the ability to perform; it merely eliminates the need.",
                "Failure propagates from the bottom up, whereas aborting propagates from the top down.",
                "The potential for concurrently executing sub-plans introduces different complexities for aborting and failure.",
                "For aborting, it means that multiple concurrent sub-plans may need to be aborted as the abort is propagated down.",
                "For failure, it means that parallel-sibling plans may need to be aborted as the failure is propagated up.",
                "There has been a considerable amount of work on plan failures (such as detecting and resolving resource conflicts [20, 10]) and most agent systems incorporate some notion of failure handling.",
                "However, there has been relatively little work on the development of abort techniques beyond simple dropping of currently intended plans and tasks, which does not deal with the clean-up required.",
                "As one consequence, most agent systems are quite limited in their treatment of the situation where one branch of a parallel construct 1 One can consider both tasks to be performed and goals to achieve a certain state of the world.",
                "A task can be considered a goal of achieving the state of the task having been performed, and a goal can be considered a task of bringing about that state of the world.",
                "We adopt the latter view and use task to also refer to goals. 8 978-81-904262-7-5 (RPS) c 2007 IFAAMAS fails (common approaches include either letting the other branch run to completion unhindered or dropping it completely).",
                "In this paper we discuss in detail the incorporation of abort cleanup methods into the agent execution cycle, providing a unified approach to failure and abort.",
                "A key feature of our procedure-based approach is that we allow each plan to execute some particular code on a failure and on an abort.",
                "This allows a plan to attempt to ensure a stable, known state, and possibly to recover some resources and otherwise clean up before exiting.",
                "Accordingly, a central technical challenge is to manage the orderly execution of the appropriate clean-up code.",
                "We show how aborts can be smoothly introduced into a BDI-style architecture, and for the first time we give an operational semantics for aborting in the abstract agent language CAN [23, 17].",
                "This allows us to specify an appropriate level of detail for the execution model, without focusing on the specific constructs of any one agent system such as JACK [2], Jadex [14], Jason [6], or SPARK [9].",
                "Our focus is on a single agent, complementary to related work that considers exception handling for single- and multiagent systems (e.g., [22, 5, 6]).",
                "This paper is organized as follows.",
                "In Section 2 we give an example of the consequences of aborting a task, and in Section 3 we discuss some circumstances under which aborts should occur, and the appropriate representation and invocation procedures.",
                "In Section 4 we show how we can use CAN to formally specify the behaviour of an aborted plan.",
                "Section 5 discusses related work, and in Section 6 we present our conclusions and future work. 2.",
                "MOTIVATING EXAMPLE Alice is a knowledge worker assisted by a learning, personal assistive agent such as CALO [11].",
                "Alice plans to attend the IJCAI conference later in the year, and her CALO agent adopts the task of Support Meeting Submission (SMS) to assist her.",
                "CALOs plan for an SMS task in the case of a conference submission consists of the following sub-tasks: 1.",
                "Allocate a Paper Number (APN) to be used for administrative purposes in the company. 2.",
                "Track Writing Abstract (TWA): keep track of Alices progress in preparing an abstract. 3.",
                "Apply For Clearance (AFC) for publication from Alices manager based on the abstract and conference details. 4.",
                "Track Writing Paper (TWP): keep track of Alices progress in writing the paper. 5.",
                "Handle Paper Submission (HPS): follow company internal procedures for submitting a paper to a conference.",
                "These steps must be performed in order, with the exception of steps 3 (AFC) and 4 (TWP), which may be performed in parallel.",
                "Similarly, CALO can perform the task Apply For Clearance (AFC) by a plan consisting of: 1.",
                "Send Clearance Request (SCR) to Alices manager. 2.",
                "Wait For Response (WFR) from the manager. 3.",
                "Confirm that the response was positive, and fail otherwise.",
                "Now suppose that a change in circumstances causes Alice to reconsider her travel plans while she is writing the paper.",
                "Alice will no longer be able to attend IJCAI.",
                "She therefore instructs her CALO agent to abort the SMS task.",
                "Aborting the task implies aborting both the SMS plan and the AFC subplan.",
                "Aborting the first plan requires CALO to notify the paper number registry that the allocated paper number is obsolete, which it can achieve by the Cancel Paper Number (CPN) task.2 Aborting the second plan requires CALO to notify Alices manager that Alice no longer requires clearance for publication, which CALO can achieve by invoking the Cancel Clearance Request (CCR) task.",
                "We note a number of important observations from the example.",
                "First, the decision to abort a particular course of action can come from the internal deliberations of the agent (such as reasoning about priorities in a conflict over resources), or from external sources (such as another agent cancelling a commitment), as in this example.",
                "In this paper we only touch on the problem of determining whether a task or plan should be aborted, instead concentrating on determining the appropriate actions once this decision is made.",
                "Hence, our objective is to determine how to incorporate aborting mechanisms into the standard execution cycle rather than determine what should be aborted and when.",
                "Second, once the decision is made to abort the attempt to submit a paper, there are some actions the agent should take, such as cancelling the clearance request.",
                "In other words, aborting a task is not simply a matter of dropping the task and associated active plans: there are some clean up actions that may need to be done.",
                "This is similar to the case for failure, in that there may also be actions to take when a task or plan fails.",
                "In both cases, note that it is not simply a matter of the agent undo-ing its actions to date; indeed, this may be neither possible (since the agent acts in a situated world and its actions change world state) nor desirable (depending on the semantics of the task).",
                "Rather, cleaning up involves compensation via forward recovery actions [3].",
                "Third, there is a distinction between aborting a task and aborting a plan.",
                "In the former case, it is clear that all plans being executed to perform the task should be aborted; in the latter case, it may be that there are better alternatives to the current plan and one of these should be attempted.",
                "Hence, plan aborting or failure does not necessarily lead to task aborting or failure.",
                "Fourth, given that tasks may contain sub-tasks, which may contain further sub-tasks, it is necessary for a parent task to wait until its children have finished their abort methods.",
                "This is the source of one of the technical challenges that we address: determining the precise sequence of actions once a parent task or plan is aborted. 3.",
                "ABORTING TASKS AND PLANS As we have alluded to, failure and aborting are related concepts.",
                "They both cause the execution of existing plans to cease and, consequentially, the agent to reflect over its current tasks and intentions.",
                "Failure and aborting, however, differ in the way they arise.",
                "In the case of failure, the trigger to cease execution of a task or plan comes from below, that is, the failure of sub-tasks or lower-level plans.",
                "In the case of aborting, the trigger comes from above, that is, the tasks and the parent plans that initiated a plan.",
                "In BDI-style systems such as JACK and SPARK, an agents domain knowledge includes a pre-defined plan library of plan clauses.",
                "Each plan clause has a plan body, which is a program (i.e., combination of primitive actions, sub-tasks, etc.) that can be executed in response to a task or other event should the plan clauses context condition be satisfied.",
                "The agent selects and executes instances of plan clauses to perform its tasks.",
                "There can be more than one applicable plan clause and, in the event that one fails, another applicable one may be attempted.",
                "Plans may have sub-tasks that must succeed 2 CALO needs only drop the TWA and TWP tasks to abort them: for the sake of simplicity we suppose no explicit clean up of its internal state is necessary.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 9 for the plan to succeed.",
                "In such systems, a plan failure occurs if one of the actions or sub-tasks within the plan fails.",
                "The agents action upon plan failure depends on its nature: for example, the agent may declare the task to have failed if one plan has been tried and resulted in failure, or it may retry alternate plans and declare (indeed, must declare) task failure only if all possible alternate plans to perform the task have been tried and resulted in failure.",
                "Observe that, while task failure can follow from plan failure or a sequence of plan failures, plan failure need not lead to task failure provided the agent can successfully complete an alternate plan.",
                "Moreover, task failure can also arise separately from plan failure, if the agent decides to abort the task.",
                "Our approach associates an abort-method with each plan.",
                "This enables the programmer to specify dedicated compensation actions according to how the agent is attempting to perform the task.",
                "Note that our abort-methods can be arbitrary programs and so can invoke tasks that may be performed dynamically in the usual BDI fashion, i.e., the clean-up is not limited to executing a predetermined set of actions.",
                "The question remains which abort-method should be invoked, and in what manner.",
                "Given the complexity of agent action spaces, it is not possible nor desirable to enumerate a static set of rules.",
                "Rather, the agent will invoke its abort-methods dynamically according to the state of execution and its own internal events.",
                "An alternative to attaching an abort-method to each plan is to attach such methods to each atomic action.",
                "We choose the former because: (1) action-level abort-methods would incur a greater overhead, (2) plans are meant to be designed as single cohesive units and are the unit of deliberation in BDI systems, and (3) the cleanup methods for failure in current systems are attached to plans.",
                "In order to understand how the agents abort processing should function, we consider three situations where it is sensible for an agent to consider aborting some of its tasks and plans: 1.",
                "When a task succeeds or fails because of an external factor other than the agent itself, the plan currently executed to perform the task should be aborted.",
                "For example, suppose company policy changes so that employees of Alices seniority automatically have clearance for publishing papers.",
                "Since Alice now has clearance for publishing her paper, CALO can abort the plan for Apply For Clearance.",
                "In doing so it must invoke the abort-method, in this case thus performing Cancel Clearance Request.3 2.",
                "When two or more sub-programs are executed in parallel, if one fails then the others should be aborted, given that the failure of one branch leads to the failure of the overall task.",
                "For example, suppose that part-way through writing the paper, Alice realizes that there is a fatal flaw in her results, and so notifies CALO that she will not be able to complete the paper by the deadline.",
                "The failure of the Track Writing Paper task should cause the Apply For Clearance task being executed in parallel to be aborted. 3.",
                "When an execution event alters the importance of an existing task or intention, the agent should deliberate over whether the existing plan(s) should continue.",
                "For example, suppose that Alice tasks CALO with a new, high-priority task to purchase a replacement laptop, but that Alice lacks enough funds to both purchase the laptop and to attend IJCAI.",
                "Reasoning over resource requirements [20, 10] will cause the agent to realize 3 If there is any difference between how to abort a task that is externally performed versus how to abort one that is now known to be impossible, the abort-method can detect the circumstances and handle the situation as appropriate. that it cannot successfully complete both tasks.",
                "Given that the new task has greater importance, a rational agent will evaluate its best course of action and may decide to abortor at least suspend - the existing task of submitting a paper and intentions derived from it [12].",
                "The operational semantics we provide in Section 4 for aborting tasks and plans captures the first two situations above.",
                "The third situation involves deliberating over the importance of a task, which depends on various factors such as task priority.",
                "Although this deliberation is beyond the scope of this paper, it is a complementary topic of our future work.",
                "Note that the above situations apply to achievement goals, for which the task is completed when a particular state of the world is brought about (e.g., ensure we have clearance).",
                "Different forms of reasoning apply to other goal types [4] such as maintenance goals [1], where the goal is satisfied by maintaining a state of the world for some period of time (e.g., maintain $100 in cash).",
                "Abort Method Representation The intent of aborting a task or plan is that the task or plan and all its children cease to execute, and that appropriate clean-up methods are performed as required.",
                "In contrast to offline planning systems, BDI agents are situated: they perform online deliberation and their actions change the state of the world.",
                "As a result, the effects of many actions cannot be simply undone.",
                "Moreover, the undo process may cause adverse effects.",
                "Therefore, the clean-up methods that we specify are forward recovery procedures that attempt to ensure a stable state and that also may, if possible, recover resources.",
                "The common plan representation in BDI-style systems such as JACK and SPARK includes a failure-method, which is the designated clean-up method invoked when the plan fails.",
                "To this, we add the abort-method, which is invoked if the plan is to be aborted.",
                "In our example, the abort-method for the plan for Support Meeting Submission consists of invoking the sub-task Cancel Paper Number.",
                "The abort-method need not explicitly abort Apply For Clearance, because the agent will invoke the abort-method for the subtask appropriately, as we outline below.",
                "The assumption here is that, like the failure-method, the programmer of the agent system has the opportunity to specify a sensible abort-method that takes into consideration the point in the plan at which the abort is to be executed.",
                "For any plan, the abort-method is optional: if no abort-method is specified, the agent takes no specific action for this plan.",
                "However, the agents default behavioural rules still apply, for example, whether to retry an alternate plan for the parent task.",
                "Note that an explicit representation of the clean-up methods for tasks is not required, since tasks are performed by executing some plan or plans.",
                "Hence, aborting a task means aborting the current plan that is executed to perform that task, as we next describe.",
                "Abort Method Invocation We now informally lay out the agents action upon aborting plans and tasks.",
                "When a plan P is aborted: 1.",
                "Abort each sub-task that is an active child of P. An active child is one that was triggered by P and is currently in execution. 2.",
                "When there are no more active children, invoke the abort method of plan P. 3.",
                "Indicate a plan failure to TP , the parent task of P. We note here that if the parent task TP is not to be aborted then the agent may choose another applicable plan to satisfy TP . 10 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) When a task (or sub-task) T is aborted: 1.",
                "Abort the current active plan to satisfy T (if any). 2.",
                "When there are no more active child processes, drop the task.",
                "The agent thus no longer pursues T. 3.",
                "Note here that when the current active plan for performing T is aborted, no other applicable plans to perform T should be tried as it is the task that is to be aborted.",
                "In order to prevent infinitely cascading clean-up efforts, we assume that abort-methods will never be aborted nor fail.",
                "In reality, however, an abort-method may fail.",
                "In this case, lacking a more sophisticated handling mechanism, the agent simply stops executing the failed abort-method with no further deliberation.",
                "The assumption we make is thus not a reflection of the full complexity of reality, but one that is pragmatic in terms of the agent execution cycle; the approach to failure-handling of [21] makes the same assumption.",
                "In systems such as SPARK, the programmer can specify an alternative behaviour for a failed failure- or abort-method by means of meta-level procedures.",
                "We also assume that failure- and abort-methods terminate in finite time. 4.",
                "OPERATIONAL SEMANTICS We provide the semantics for the task and plan failure and aborting processes outlined above.",
                "We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the goal adoption and dropping mechanisms.",
                "The extensions also simplified the semantics in the earlier work.",
                "We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1.",
                "Following a presentation of the operational semantics of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present. 4.1 CAN Language CAN is a high-level agent language, in a spirit similar to that of AgentSpeak [15] and Kinnys Ψ [7], both of which attempt to extract the essence of a class of implemented BDI agent systems.",
                "CAN provides an explicit goal construct that captures both the declarative and procedural aspects of a goal.",
                "Goals are persistent in CAN in that, when a plan fails, another applicable plan is attempted.",
                "This equates to the default failure handling mechanism typically found in implemented BDI systems such as JACK [2].",
                "In practical systems, tasks are typically translated into events that trigger the execution of some plans.",
                "This is also true in the CAN language, but, in order to maintain the persistence of goals, a goal construct is introduced.",
                "This is denoted by Goal ` φs, P, φf ´ , where φs is the success condition that determines when the goal is considered achieved, φf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once φs or φf become true.",
                "An agents behavior is specified by a plan library, denoted by Π, that consists of a collection of plan clauses of the form e : c ← P, where e is an event, c is a context condition (a logical formula over the agents beliefs that must be true in order for the plan to be applicable)4 and P is the plan body.",
                "The plan body is a program that is defined recursively as follows: P ::= act | +b | −b | ?φ | !e | P1; P2 | P1 P2 | Goal ` φs, P1, φf ´ | P1 P2 | {ψ1 : P1, . . . , ψn : Pn} | nil 4 An omitted c is equivalent to true.",
                "Δ = {ψiθ : Piθ | e : ψi ← Pi ∈ Π ∧ θ = mgu(e, e )} B, !e −→ B, Δ Event ψi : Pi ∈ Δ B |= ψi B, Δ −→ B, Pi Δ \\ {ψi : Pi} Select B, P1 −→ B, (P1 P2) −→ B, P2 fail B, P1 −→ B , P1 B, (P1; P2) −→ B , (P ; P2) Sequence B, P1 −→ B , P B, (P1 P2) −→ B , (P P2) Parallel1 B, P2 −→ B , P B, (P1 P2) −→ B , (P P1) Parallel2 Figure 1: Operational rules of CAN. where P1, . . . , Pn are themselves programs, act is a primitive action that is not further specified, and +b and −b are operations to add and delete beliefs.",
                "The belief base contains ground belief atoms in the form of first-order relations but could be orthogonally extended to other logics.",
                "It is assumed that well-defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ∪ {b}), and to delete a belief from a belief set (B \\ {b}). ?φ is a test for condition φ, and !e5 is an event6 that is posted from within the program.",
                "The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (Goal ` φs, P, φf ´ ).",
                "The above defines the user language.",
                "In addition, a set of auxiliary compound forms are used internally when assigning semantics to constructs. nil is the basic (terminating) program.",
                "When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 : P1, . . . , cn : Pn ).",
                "The other auxiliary compound form, , is a choice operator dual to sequencing: P1 P2 executes P1 and then executes P2 only if P1 failed.",
                "A summary of the operational semantics for CAN in line with [23] and following some of the simplifications of [17] is as follows.",
                "A basic configuration S = B, G, Γ consists of the current belief base B of the agent, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention).",
                "A transition S0 −→ S1 specifies that executing S0 for a single step yields configuration S1.",
                "S0 −→∗ Sn is the usual reflexive transitive closure of −→: Sn is the result of one or more singlestep transitions.",
                "A derivation rule S −→ Sr S −→ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator).",
                "Figure 1 gives some of the operational rules.",
                "The Event rule handles task events by collecting all relevant plan clauses for the event in question: for each plan clause e : ψi ← Pi, if there is a most general unifier, θ = mgu(e, e ) of e and the event in 5 Where it is obvious that e is an event we will sometimes exclude the exclamation mark for readability. 6 Typically an achievement goal.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 11 B |= φs B, Goal ` φs, P, φf ´ −→ B, true Gs B |= φf B, Goal ` φs, P, φf ´ −→ B, fail Gf P = Goal ` φs, P , φf ´ P = P1 £ P2 B |= φs ∨ φf B, P −→ B, Goal ` φs, P £ P , φf ´ GI P = P1 £ P2 B |= φs ∨ φf B, P1 −→ B , P B, Goal ` φs, P, φf ´ −→ B , Goal ` φs, P £ P2, φf ´ GS P = P1 £ P2 B |= φs ∨ φf P1 ∈ {true, fail} B, Goal ` φs, P, φf ´ −→ B, Goal ` φs, P2 £ P2, φf ´ GR Figure 2: Rules for goals in CAN. question, then the rule constructs a guarded alternative ψiθ : Piθ.",
                "The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives: program P Δ states that program P should be tried first, falling back to the remaining alternatives, Δ \\ P, if necessary.",
                "This rule and the fail rule together are used for failure handling: if the current program Pi from a plan clause for a task fails, rule fail is applied first, and then if possible, rule Select will choose another applicable alternative for the task if one exists.",
                "Rule Sequence handles sequencing of programs in the usual way.",
                "Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel.",
                "Figure 2 gives simplified rules for dealing with goals, in line with those presented in [17].",
                "The first rule states that a goal succeeds when φs become true; the second rule states that a goal fails when φf become true.",
                "The third rule GI initializes the execution of a goal-program by updating the goal base and setting the program in the goal to P £ P; the first P is to be executed and the second P is used to keep track of the original program for the goal.",
                "The fourth rule GS executes a single step of the goal-program.",
                "The final rule GR restarts the original program (encoded as P2 of pair P1 £ P2) whenever the current program is finished but the desired and still possible goal has not yet been achieved. 4.2 Aborting Intentions and Handling Failure We next introduce the ability to specify handler programs, in the form of failure- and abort-methods, that deal with the clean-up required when a given program respectively fails or is aborted.",
                "We do not associate failure- and abort- methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies failure- and abort- methods for an arbitrary program.",
                "The FAb(P, PF , PA) construct executes the program P. Should P fail, it executes the failure handling program PF ; should P need to be aborted, it executes the abort handling program PA.",
                "Thus to add failure- and abort- methods PF and PA to a plan clause e : c ← P, we write e : c ← FAb(P, PF , PA).",
                "With the introduction of the ability to abort programs, we modify the parallel construct to allow the failure of one branch to abort the other.",
                "We must take into consideration the possible existence of abort-methods in the aborted branch.",
                "Similarly, with the Goal construct we can no longer completely abandon the program the goal contains as soon as the success or failure condition holds; we must now take into consideration the existence of any abort-methods applicable to the program.",
                "We provide the semantics of an augmented agent language containing the FAb construct by defining a source transformation, similar to macro-expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN.",
                "The one non-standard extension to CAN is a wait-until-condition construct.",
                "We explain this simple modification of the parallel construct below when we come to translation of the Goal construct.",
                "First we describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases: the FAb, parallel, and Goal constructs.",
                "A key issue is that the FAb constructs may be nested, either directly or indirectly.",
                "Let us call each instantiation of the construct at execution time a possible abort point (pap).",
                "Where these constructs are nested, it is important that before the failure- or abort-method of a parent pap is executed, the failure- or abort-methods programs of the children paps are executed first, as described earlier in Section 3.",
                "The need to coordinate the execution of the abort-methods of nested paps requires that there be some way to identify the parents and children of a particular pap.",
                "We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e : c ← P with a plan clause e(v) : c ← μv(P) where v is a free variable, not previously present in the plan clause.",
                "This variable is used to keep track of the context of execution.",
                "The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context.",
                "For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1].",
                "We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51.",
                "This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v .",
                "For most CAN constructs, the context variable is unused or passed unchanged: μv(act) = act μv(+b) = +b μv(−b) = −b μv(nil) = nil μv(!e) = !e(v) μv(P1; P2) = μv(P1); μv(P2) μv(P1 P2) = μv(P1) μv(P2) μv( ψ1 : P1, . . . , ψn : Pn ) = ψ1 : μv(P1), . . . , ψn : μv(Pn) It remains to specify the transformation μv(·) in three cases: the FAb, parallel, and Goal constructs.",
                "These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context.",
                "Let us introduce the primitive action prependID(v, v ) that creates a new pap identifier and prepends it to list v giving list v .",
                "We also introduce the following predicates: • a(v) - the pap v is currently active. • abort(v) - the pap v should be aborted (after aborting all of its descendants). 7 An alternative would be to use meta-level predicates that reflect the current state of the intention structure. 12 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) • f(v) - the program of pap v has failed. • ancestorof(v, v ) ≡ v = v ∨ ancestorof(v, tail(v ))the pap v is an ancestor of pap v . • nac(v) ≡ ¬∃v . (a(v ) ∧ ancestorof(v, v ) ∧ v = v ) - v has no active children. • sa(v) ≡ ∃v .abort(v ) ∧ ancestorof(v , v) - we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active. • san(v) ≡ sa(v) ∧ nac(v) - we should abort v now if we should abort v and v has no active children.",
                "First let us consider the case of the FAb construct.",
                "The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v. We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context.",
                "We need to make sure that we retract the belief that v is active at the end, i.e., −a(v ).",
                "We use the Goal construct to allow us to drop the execution of a program within a pap v when it is necessary to abort.",
                "While executing the program P, we know that we need to drop P and invoke its abort-method if some ancestor of P has been told to abort.",
                "This is represented by the predicate sa(v ) being true.",
                "However, we need to make sure that we do this only after every child pap has had the chance to invoke its abort-method and all these abort-methods have completed: if we drop the program too soon, then execution of the abort-methods of the children will also be dropped.",
                "Therefore, the condition we actually use in the Goal construct to test when to drop the program is san(v ).",
                "This condition relies on the fact that as the children paps complete, they remove the relevant a facts.",
                "Our use of the Goal construct is for its ability to drop the execution of a program when conditions are met.",
                "To leave aside the repeat execution until a condition is met aspect, we must ensure that the success or failure condition of the construct is satisfied once the execution of the program succeeds or fails.",
                "We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on failure, and by having the appropriate success and failure conditions on the Goal.",
                "Hence, if the Goal construct fails, then the program either was aborted or it failed.",
                "We invoke the relevant failure- or abort- method, retract the a(v ) fact, and then fail.",
                "Putting all this together, we formally define μv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agents plan library: prependID(v, v ); +a(v ); Goal ( ¬a(v ), (μv (P); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); μv(PA)) μv(PF )); −a(v ); ?false) Second, we must transform the parallel operator to ensure that the failure of one branch safely aborts the other.",
                "Here we construct two new contexts, v and v , from the existing context v. If one branch fails, it must abort the other branch.",
                "At the end, if either branch was aborted, then we must fail.",
                "Let v and v be new variables distinct from any other in the agents plan library.",
                "We define μv(P1 P2) to be: prependID(v, v ); prependID(v, v ); +a(v ); +a(v ); ( Goal (¬a(v ), (μv (P1); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal (¬a(v ), (μv (P2); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ); ?¬abort(v ) ∧ ¬abort(v ) Finally, we need to modify occurrences of the Goal construct in two ways: first, to make sure that the abort handling methods are not bypassed when the success or failure conditions are satisfied, and second, to trigger the aborting of the contained program when either the success or failure conditions are satisfied.",
                "To transform the Goal construct we need to extend standard CAN with a wait-until-condition construct.",
                "The construct φ : P does not execute P until φ becomes true.",
                "We augment the CAN language with the following rules for the guard operator :: B |= φ B, G, (φ : P −→ B, G, P :true B |= φ B, G, (φ : P) −→ B, G, (φ : P) :false In order to specify μv(Goal ` φs, P, φf ´ ), we generate a new pap and execute the program within the Goal construct in this new context.",
                "We must ensure that belief a(v ) is removed whether the Goal succeeds or fails.",
                "We shift the success and failure condition of the Goal construct into a parallel branch using the wait-until-condition construct, and modify the Goal to use the should abort now condition san(v ) as the success condition.",
                "The waiting branch will trigger the abort of the program should either the success or failure condition be met.",
                "To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active.",
                "Let v be a new variable distinct from any other in the agents plan library.",
                "We define μv(Goal ` φs, P, φf ´ ) to be: prependID(v, v ); +a(v ); ( Goal ( san(v ), μv (P), false) ; −a(v ); ?φs ) φs ∨ φf ∨ ¬a(v ) : +abort(v ) ) The program P will be repeatedly executed until san(v ) becomes true.",
                "There are two ways this can occur.",
                "First, if either the success condition φs or the failure condition φf becomes true, then the second branch of the parallel construct executes.",
                "This causes abort(v ) to become true, and, after the descendant paps abortmethods are executed, san(v ) becomes true.",
                "In this case, P is now dropped, the a(v ) is removed, and the entire construct succeeds or fails based on φs.",
                "The second way for san(v ) to become true is if v or one of its ancestors is aborted.",
                "In this case, once the descendant paps abort-methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming φs is false). 4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2.",
                "We will express tasks by events, for example, the task Allocate a Paper Number we express as the event APN.",
                "Let the output of the Apply For Clearance task be Y or N, indicating the approval or not of Alices manager, respectively.",
                "Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively: SMS(m) : isconf(m) ← FAb(!APN; !TWA; (!AFC !TWP); !HPS, !CPN, !CPN) AFC : true ← FAb(!SCR; !WFR(r); ?r = Y, nil, !CCR) Note that Support Meeting Submission has a parameter m, the meeting of interest (IJCAI, in our example), while Apply For Clearance has no parameters.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two.",
                "Let v and v denote new variables.",
                "Then we have as the translated plan clause: AFC(v ) : true ← prependID(v , v ); +a(v ); Goal ( ¬a(v ), (!SCR(v ); !WFR(r, v ); ?r = Y; −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CCR(v )) nil); −a(v ); ?false) We can see that an extra context parameter has been added to each task and that the old plan body now appears inside a Goal construct.",
                "Should the old plan body succeed, belief a(v ) is retracted, causing the Goal to succeed.",
                "If the old plan body fails, or if the task is to be aborted, the Goal construct fails.",
                "This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and failure.",
                "The translation of the first plan clause, for SMS, is more complex, because of the parallel construct that introduces nested paps: SMS(m, v) : isconf(m) ← prependID(v, v ); +a(v ); Goal ( ¬a(v ), ((!APN(v ); !TWA(v ); prependID(v , v ); prependID(v , v ); +a(v ); +a(v ); ( Goal ( ¬a(v ), (!AFC(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal ( ¬a(v ), (!TWP(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ) ; ?¬abort(v ) ∧ ¬abort(v ); !HPS(v ); −a(v )) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CPN(v)) !CPN(v)); −a(v ); ?false) Here we can see that if the task !TWP(v ) fails then f(v ) will be asserted, failing the Goal construct that contains it, and leading to abort(v ) being asserted.",
                "If the !WFR(r, v ) task in the expansion of !AFC(v ) is still executing and has no active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true.",
                "This set of conditions will cause the Goal construct in the first plan clause to fail, dropping execution of !WFR(r, v ).",
                "The task !CCR(v ) will be executed.",
                "Once this task completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first Goal construct of the second plan clause to fail.",
                "While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely automated, according to the rules set out in Section 4.2.",
                "The translated plan clauses, with the semantics of CAN augmented by our waituntil-condition construct, thus specify the operation of the agent to handle both failure and aborting for the example. 5.",
                "RELATED WORK Plan failure is handled in the extended version of AgentSpeak found in the Jason system [6].",
                "Failure clean-up plans are triggered from goal deletion events −!g.",
                "Such plans, similar to our failure methods, are designed for the agent to effect state changes (act to undo its earlier actions) prior to possibly attempting another plan to achieve the failed goal g. Given Jasons constructs for dropping a goal with an indication of whether or not to try an alternate plan for it, H¨ubner et al. [6] provide an informal description of how a Jason agent modifies its intention structure when a goal failure event occurs.",
                "In a goal deletion plan, the programmer can specify any undo actions and whether to attempt the goal again.",
                "If no goal deletion plan is provided, Jasons default behaviour is to not reattempt the goal.",
                "Failure handling is applied only to plans triggered by addition of an achievement or test goal; in particular, goal deletion events are not posted for failure of a goal deletion plan.",
                "Further, the informal semantics of [6] do not consider parallel sub-goals (i.e., the CAN construct), since such execution is not part of Jasons language.",
                "The implementation of H¨ubner et al. [6] requires Jasons internal actions.",
                "A requirement for implementing our approach is a reflective capability in the BDI agent implementation.",
                "Suitable implementations of the BDI formalism are JACK [2], Jadex [14], and SPARK [9].",
                "All three allow meta level methods that are cued by meta events such as goal adoption or plan failure, and offer introspective capabilities over goal and intention states.",
                "Such meta level facilities are also required by the approach of Unruh et al. [21], who define goal-based semantic compensation for an agent.",
                "Failure-handling goals are invoked according to failurehandling strategy rules, by a dedicated agent Failure Handling Component (FHC) that tracks task execution.",
                "These goals are specified by the agent programmer and attached to tasks, much like our FAb(P, PF , PA) construct associates failure and abort methods with a plan P. Note, however, that in contrast to both [6] and our semantics, [21] attach the failure-handling knowledge at the goal, not plan, level.",
                "Their failure-handling goals may consist of stabilization goals that perform localized, immediate clean-up to restore the agents state to a known, stable state, and compensation goals that perform undo actions.",
                "Compensation goals are triggered on aborting a goal, and so not necessarily on goal failure (i.e., if the FHC directs the agent to retry the failed goal and the retry is successful).",
                "The FHC approach is defined at the goal level in order to facilitate abstract specification of failure-handling knowledge; the FHC decides when to address a failure and what to do (i.e., what failurehandling goals to invoke), separating this knowledge from the how of implementing corrective actions (i.e., what plan to execute to meet the adopted failure-handling goal).",
                "This contrasts with simplistic plan-level failure handling in which the what and how are intermingled in domain task knowledge.",
                "While our approach is defined at the plan level, our extended BDI semantics provides for the separation of execution and failure handling.",
                "Further, the FHC explicitly maintains data structures to track agent execution.",
                "We leverage the existing execution structures and self-reflective ability of a BDI agent to accomplish both aborting and failure handling without additional overhead.",
                "FHCs failure-handling strategy rules (e.g., whether to retry a failed goal) are replaced by instructions in our PF and PA plans, together with meta-level default failure handlers according to the agents nature (e.g., blindly committed).",
                "The FHC approach is independent of the architecture of the agent itself, in contrast to our work that is dedicated to the BDI formalism (although not tied to any one agent system).",
                "Thus no formal semantics are developed in [21]; the FHCs operation is given as 14 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) a state-based protocol.",
                "This approach, together with state checkpointing, is used for multi-agent systems in [22].",
                "The resulting architecture embeds their failure handling approach within a pair processing architecture for agent crash recovery.",
                "Other work on multi-agent exception handling includes AOEXs distributed exception handling agents [5], and the similar sentinels of [8].",
                "In both cases, failure-handling logic and knowledge are decoupled from the agents; by contrast, while separating exception handling from domain-specific knowledge, Unruh et al.s FHC and our approach both retain failure-handling logic within an agent. 6.",
                "CONCLUSION AND FUTURE WORK The tasks and plans of an agent may not successfully reach completion, either by the choice of the agent to abort them (perhaps at the request of another agent to do so), or by unbidden factors that lead to failure.",
                "In this paper we have presented a procedure-based approach that incorporates aborting tasks and plans into the deliberation cycle of a BDI-style agent, thus providing a unified approach to failure and abort.",
                "Our primary contribution is an analysis of the requirements on the operation of the agent for aborting tasks and plans, and a corresponding operational semantics for aborting in the abstract agent language CAN.",
                "We are planning to implement an instance of our approach in the SPARK agent system [9]; in particular, the work of this paper will be the basis for SPARKs abort handling mechanism.",
                "We are also developing an analysis tool for our extended version of CAN as a basis for experimentation.",
                "An intelligent agent will not only gracefully handle unsuccessful tasks and plans, but also will deliberate over its cognitive attitudes to decide its next course of action.",
                "We have assumed the default behaviour of a BDI-style agent, according to its nature: for instance, to retry alternatives to a failed plan until one succeeds or until no alternative plans remain (in which case to fail the task).",
                "Future work is to place our approach in service of more dynamic agent reasoning, such as the introspection that an agent capable of reasoning over task interaction effects and resource requirements can accomplish [19, 12].",
                "Related to this is determining the cost of aborting a task or plan, and using this as an input to the deliberation process.",
                "This would in particular influence the commitment the agent has towards a particular task: the higher the cost, the greater the commitment.",
                "Our assumption that abort-methods do not fail, as discussed above, is a pragmatic one.",
                "However, this is an issue worthy of further exploration, either to develop weaker assumptions that are also practical, or to analyze conditions under which our assumption is realistic.",
                "A further item of interest is extending our approach to failure and abort to maintenance goals [1].",
                "For such goals a different operational semantics for abort is necessary than for achievement goals, to match the difference in semantics of the goals themselves.",
                "Acknowledgements We thank Lin Padgham and the anonymous reviewers for their comments.",
                "The first author acknowledges the support of the Australian Research Council and Agent Oriented Software under grant LP0453486.",
                "The work of the two authors at SRI International was supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No.",
                "NBCHD030010.",
                "Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the view of DARPA or the Department of Interior-National Business Center. 7.",
                "REFERENCES [1] L. Braubach, A. Pokahr, D. Moldt, and W. Lamersdorf.",
                "Goal representation for BDI Agent systems.",
                "In Proc. of Second Intl.",
                "Workshop on Programming Multi-Agent Systems (ProMAS04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson, and A. Lucas.",
                "JACK intelligent agents - components for intelligent agents in Java.",
                "AgentLink News, Issue 2, 1999. [3] M. G. Chessell, C. Vines, D. Butler, C. M. Ferreira, and P. Henderson.",
                "Extending the concept of transaction compensation.",
                "IBM Systems Journal, 41(4), 2002. [4] M. Dastani, M. B. van Riemsdijk, and J.-J.",
                "C. Meyer.",
                "Goal types in agent programming.",
                "In Proc. of AAMAS06, 2006. [5] S. Entwisle, S. Loke, S. Krishnaswamy, and E. Kendall.",
                "Aoex: An agent-based exception handling framework for building reliable, distributed, open software systems.",
                "In Proc. of Seventh Joint Conf. on Knowledge-Based Software Engineering, 2006. [6] J. F. H¨ubner, R. H. Bordini, and M. Wooldridge.",
                "Programming declarative goals using plan patterns.",
                "In Proc. of 4th Intl.",
                "Workshop on Declarative Agent Languages and Technologies, 2006. [7] D. Kinny.",
                "The Psi calculus: an algebraic agent language.",
                "In Proc. of ATAL01, 2001. [8] M. Klein, J.",
                "A. Rodr´ıguez-Aguilar, and C. Dellarocas.",
                "Using domain-independent exception handling services to enable robust open multi-agent systems: The case of agent death.",
                "Autonomous Agents and Multi-Agent Systems, 7(1-2):179-189, 2003. [9] D. Morley and K. Myers.",
                "The SPARK agent framework.",
                "In Proc. of AAMAS04, 2004. [10] D. Morley, K. L. Myers, and N. Yorke-Smith.",
                "Continuous refinement of agent resource estimates.",
                "In Proc. of AAMAS06, 2006. [11] K. Myers, P. Berry, J. Blythe, K. Conley, M. Gervasio, D. McGuinness, D. Morley, A. Pfeffer, M. Pollack, and M. Tambe.",
                "An intelligent personal assistant for task and time management.",
                "AI Magazine, 28, 2007.",
                "To appear. [12] K. L. Myers and N. Yorke-Smith.",
                "A cognitive framework for delegation to an assistive user agent.",
                "In Proc. of AAAI 2005 Fall Symposium on Mixed-Initiative Problem-Solving Assistants, 2005. [13] L. Padgham and M. Winikoff.",
                "Developing Intelligent Agent Systems: A Practical Guide.",
                "John Wiley and Sons, 2004. [14] A. Pokahr, L. Braubach, and W. Lamersdorf.",
                "Jadex: A BDI reasoning engine.",
                "In R. Bordini, M. Dastani, J. Dix, and A. E. F. Seghrouchni, editors, Multi-Agent Programming.",
                "Springer, 2005. [15] A. S. Rao.",
                "AgentSpeak(L): BDI agents speak out in a logical computable language.",
                "In Proc. of Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World, 1996. [16] A. S. Rao and M. P. Georgeff.",
                "An abstract architecture for rational agents.",
                "In Proc. of KR92, 1992. [17] S. Sardi˜na, L. de Silva, and L. Padgham.",
                "Hierarchical planning in BDI agent programming languages: a formal approach.",
                "In Proc. of AAMAS06, 2006. [18] S. Sardina and L. Padgham.",
                "Goals in the context of bdi plan failure and planning.",
                "In Proc. of AAMAS07, 2007. [19] J. Thangarajah, L. Padgham, and M. Winikoff.",
                "Detecting and exploiting positive goal interaction in intelligent agents.",
                "In Proc. of AAMAS03, 2003. [20] J. Thangarajah, M. Winikoff, L. Padgham, and K. Fischer.",
                "Avoiding resource conflicts in intelligent agents.",
                "In Proc. of ECAI-02, 2002. [21] A. Unruh, J. Bailey, and K. Ramamohanarao.",
                "A framework for goal-based semantic compensation in agent systems.",
                "In Proc. of First Intl.",
                "Workshop on Safety and Security in Multi-Agent Systems, 2004. [22] A. Unruh, H. Harjadi, J. Bailey, and K. Ramamohanarao.",
                "Semantic-compensation-based recovery management in multi-agent systems.",
                "In Proc. of Second IEEE Symposium on Multi-Agent Security and Survivability (IEEE MAS&S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland, and J. Thangarajah.",
                "Declarative and procedural goals in intelligent agent systems.",
                "In Proc. of KR02, 2002.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 15"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "formal model of agency": {
            "translated_key": "",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Aborting Tasks in BDI Agents John Thangarajah, James Harland RMIT University Melbourne, Australia {johthan,jah}@cs.rmit.edu.au David Morley, Neil Yorke-Smith Artificial Intelligence Center, SRI International Menlo Park, CA 94025 U.S.A. {morley,nysmith}@ai.sri.com ABSTRACT Intelligent agents that are intended to work in dynamic environments must be able to gracefully handle unsuccessful tasks and plans.",
                "In addition, such agents should be able to make rational decisions about an appropriate course of action, which may include aborting a task or plan, either as a result of the agents own deliberations, or potentially at the request of another agent.",
                "In this paper we investigate the incorporation of aborts into a BDI-style architecture.",
                "We discuss some conditions under which aborting a task or plan is appropriate, and how to determine the consequences of such a decision.",
                "We augment each plan with an optional abort-method, analogous to the failure method found in some agent programming languages.",
                "We provide an operational semantics for the execution cycle in the presence of aborts in the abstract agent language CAN, which enables us to specify a BDI-based execution model without limiting our attention to a particular agent system (such as JACK, Jadex, Jason, or SPARK).",
                "A key technical challenge we address is the presence of parallel execution threads and of sub-tasks, which require the agent to ensure that the abort methods for each plan are carried out in an appropriate sequence.",
                "Categories and Subject Descriptors I.2.11 [ARTIFICIAL INTELLIGENCE]: Distributed Artificial Intelligence-Intelligent agents General Terms Design, Reliability, Theory 1.",
                "INTRODUCTION Intelligent agents generally work in complex, dynamic environments, such as air traffic control or robot navigation, in which the success of any particular action or plan cannot be guaranteed [13].",
                "Accordingly, dealing with failure is fundamental to agent programming, and is an important element of agent characteristics such as robustness, flexibility, and persistence [21].",
                "In agent architectures inspired by the Belief-Desire-Intention (BDI) model [16], these properties are often characterized by the interactions between beliefs, goals, and plans [2].1 In general, an agent that wishes to achieve a particular set of tasks will pursue a number of plans concurrently.",
                "When failures occur, the choice of plans will be reviewed.",
                "This may involve seeking alternative plans for a particular task, re-scheduling tasks to better comply with resource constraints, dropping some tasks, or some other decision that will increase the likelihood of success [12, 14].",
                "Failures can occur for a number of reasons, and it is often not possible to predict these in advance, either because of the complexity of the system or because changes in the environment invalidate some earlier decisions.",
                "Given this need for deliberation about failed tasks or plans, failure deliberation is commonly built into the agents execution cycle.",
                "Besides dealing with failure, an important capability of an intelligent agent is to be able to abort a particular task or plan.",
                "This decision may be due to an internal deliberation (such as the agent believing the task can no longer be achieved, or that some conflicting task now has a higher priority) or due to an external factor (such as another agent altering a commitment, or a change in the environment).",
                "Aborting a task or plan is distinct from its failure.",
                "Failure reflects an inability to perform and does not negate the need to perform - for example, a reasonable response to failure may be to try again.",
                "In contrast, aborting says nothing about the ability to perform; it merely eliminates the need.",
                "Failure propagates from the bottom up, whereas aborting propagates from the top down.",
                "The potential for concurrently executing sub-plans introduces different complexities for aborting and failure.",
                "For aborting, it means that multiple concurrent sub-plans may need to be aborted as the abort is propagated down.",
                "For failure, it means that parallel-sibling plans may need to be aborted as the failure is propagated up.",
                "There has been a considerable amount of work on plan failures (such as detecting and resolving resource conflicts [20, 10]) and most agent systems incorporate some notion of failure handling.",
                "However, there has been relatively little work on the development of abort techniques beyond simple dropping of currently intended plans and tasks, which does not deal with the clean-up required.",
                "As one consequence, most agent systems are quite limited in their treatment of the situation where one branch of a parallel construct 1 One can consider both tasks to be performed and goals to achieve a certain state of the world.",
                "A task can be considered a goal of achieving the state of the task having been performed, and a goal can be considered a task of bringing about that state of the world.",
                "We adopt the latter view and use task to also refer to goals. 8 978-81-904262-7-5 (RPS) c 2007 IFAAMAS fails (common approaches include either letting the other branch run to completion unhindered or dropping it completely).",
                "In this paper we discuss in detail the incorporation of abort cleanup methods into the agent execution cycle, providing a unified approach to failure and abort.",
                "A key feature of our procedure-based approach is that we allow each plan to execute some particular code on a failure and on an abort.",
                "This allows a plan to attempt to ensure a stable, known state, and possibly to recover some resources and otherwise clean up before exiting.",
                "Accordingly, a central technical challenge is to manage the orderly execution of the appropriate clean-up code.",
                "We show how aborts can be smoothly introduced into a BDI-style architecture, and for the first time we give an operational semantics for aborting in the abstract agent language CAN [23, 17].",
                "This allows us to specify an appropriate level of detail for the execution model, without focusing on the specific constructs of any one agent system such as JACK [2], Jadex [14], Jason [6], or SPARK [9].",
                "Our focus is on a single agent, complementary to related work that considers exception handling for single- and multiagent systems (e.g., [22, 5, 6]).",
                "This paper is organized as follows.",
                "In Section 2 we give an example of the consequences of aborting a task, and in Section 3 we discuss some circumstances under which aborts should occur, and the appropriate representation and invocation procedures.",
                "In Section 4 we show how we can use CAN to formally specify the behaviour of an aborted plan.",
                "Section 5 discusses related work, and in Section 6 we present our conclusions and future work. 2.",
                "MOTIVATING EXAMPLE Alice is a knowledge worker assisted by a learning, personal assistive agent such as CALO [11].",
                "Alice plans to attend the IJCAI conference later in the year, and her CALO agent adopts the task of Support Meeting Submission (SMS) to assist her.",
                "CALOs plan for an SMS task in the case of a conference submission consists of the following sub-tasks: 1.",
                "Allocate a Paper Number (APN) to be used for administrative purposes in the company. 2.",
                "Track Writing Abstract (TWA): keep track of Alices progress in preparing an abstract. 3.",
                "Apply For Clearance (AFC) for publication from Alices manager based on the abstract and conference details. 4.",
                "Track Writing Paper (TWP): keep track of Alices progress in writing the paper. 5.",
                "Handle Paper Submission (HPS): follow company internal procedures for submitting a paper to a conference.",
                "These steps must be performed in order, with the exception of steps 3 (AFC) and 4 (TWP), which may be performed in parallel.",
                "Similarly, CALO can perform the task Apply For Clearance (AFC) by a plan consisting of: 1.",
                "Send Clearance Request (SCR) to Alices manager. 2.",
                "Wait For Response (WFR) from the manager. 3.",
                "Confirm that the response was positive, and fail otherwise.",
                "Now suppose that a change in circumstances causes Alice to reconsider her travel plans while she is writing the paper.",
                "Alice will no longer be able to attend IJCAI.",
                "She therefore instructs her CALO agent to abort the SMS task.",
                "Aborting the task implies aborting both the SMS plan and the AFC subplan.",
                "Aborting the first plan requires CALO to notify the paper number registry that the allocated paper number is obsolete, which it can achieve by the Cancel Paper Number (CPN) task.2 Aborting the second plan requires CALO to notify Alices manager that Alice no longer requires clearance for publication, which CALO can achieve by invoking the Cancel Clearance Request (CCR) task.",
                "We note a number of important observations from the example.",
                "First, the decision to abort a particular course of action can come from the internal deliberations of the agent (such as reasoning about priorities in a conflict over resources), or from external sources (such as another agent cancelling a commitment), as in this example.",
                "In this paper we only touch on the problem of determining whether a task or plan should be aborted, instead concentrating on determining the appropriate actions once this decision is made.",
                "Hence, our objective is to determine how to incorporate aborting mechanisms into the standard execution cycle rather than determine what should be aborted and when.",
                "Second, once the decision is made to abort the attempt to submit a paper, there are some actions the agent should take, such as cancelling the clearance request.",
                "In other words, aborting a task is not simply a matter of dropping the task and associated active plans: there are some clean up actions that may need to be done.",
                "This is similar to the case for failure, in that there may also be actions to take when a task or plan fails.",
                "In both cases, note that it is not simply a matter of the agent undo-ing its actions to date; indeed, this may be neither possible (since the agent acts in a situated world and its actions change world state) nor desirable (depending on the semantics of the task).",
                "Rather, cleaning up involves compensation via forward recovery actions [3].",
                "Third, there is a distinction between aborting a task and aborting a plan.",
                "In the former case, it is clear that all plans being executed to perform the task should be aborted; in the latter case, it may be that there are better alternatives to the current plan and one of these should be attempted.",
                "Hence, plan aborting or failure does not necessarily lead to task aborting or failure.",
                "Fourth, given that tasks may contain sub-tasks, which may contain further sub-tasks, it is necessary for a parent task to wait until its children have finished their abort methods.",
                "This is the source of one of the technical challenges that we address: determining the precise sequence of actions once a parent task or plan is aborted. 3.",
                "ABORTING TASKS AND PLANS As we have alluded to, failure and aborting are related concepts.",
                "They both cause the execution of existing plans to cease and, consequentially, the agent to reflect over its current tasks and intentions.",
                "Failure and aborting, however, differ in the way they arise.",
                "In the case of failure, the trigger to cease execution of a task or plan comes from below, that is, the failure of sub-tasks or lower-level plans.",
                "In the case of aborting, the trigger comes from above, that is, the tasks and the parent plans that initiated a plan.",
                "In BDI-style systems such as JACK and SPARK, an agents domain knowledge includes a pre-defined plan library of plan clauses.",
                "Each plan clause has a plan body, which is a program (i.e., combination of primitive actions, sub-tasks, etc.) that can be executed in response to a task or other event should the plan clauses context condition be satisfied.",
                "The agent selects and executes instances of plan clauses to perform its tasks.",
                "There can be more than one applicable plan clause and, in the event that one fails, another applicable one may be attempted.",
                "Plans may have sub-tasks that must succeed 2 CALO needs only drop the TWA and TWP tasks to abort them: for the sake of simplicity we suppose no explicit clean up of its internal state is necessary.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 9 for the plan to succeed.",
                "In such systems, a plan failure occurs if one of the actions or sub-tasks within the plan fails.",
                "The agents action upon plan failure depends on its nature: for example, the agent may declare the task to have failed if one plan has been tried and resulted in failure, or it may retry alternate plans and declare (indeed, must declare) task failure only if all possible alternate plans to perform the task have been tried and resulted in failure.",
                "Observe that, while task failure can follow from plan failure or a sequence of plan failures, plan failure need not lead to task failure provided the agent can successfully complete an alternate plan.",
                "Moreover, task failure can also arise separately from plan failure, if the agent decides to abort the task.",
                "Our approach associates an abort-method with each plan.",
                "This enables the programmer to specify dedicated compensation actions according to how the agent is attempting to perform the task.",
                "Note that our abort-methods can be arbitrary programs and so can invoke tasks that may be performed dynamically in the usual BDI fashion, i.e., the clean-up is not limited to executing a predetermined set of actions.",
                "The question remains which abort-method should be invoked, and in what manner.",
                "Given the complexity of agent action spaces, it is not possible nor desirable to enumerate a static set of rules.",
                "Rather, the agent will invoke its abort-methods dynamically according to the state of execution and its own internal events.",
                "An alternative to attaching an abort-method to each plan is to attach such methods to each atomic action.",
                "We choose the former because: (1) action-level abort-methods would incur a greater overhead, (2) plans are meant to be designed as single cohesive units and are the unit of deliberation in BDI systems, and (3) the cleanup methods for failure in current systems are attached to plans.",
                "In order to understand how the agents abort processing should function, we consider three situations where it is sensible for an agent to consider aborting some of its tasks and plans: 1.",
                "When a task succeeds or fails because of an external factor other than the agent itself, the plan currently executed to perform the task should be aborted.",
                "For example, suppose company policy changes so that employees of Alices seniority automatically have clearance for publishing papers.",
                "Since Alice now has clearance for publishing her paper, CALO can abort the plan for Apply For Clearance.",
                "In doing so it must invoke the abort-method, in this case thus performing Cancel Clearance Request.3 2.",
                "When two or more sub-programs are executed in parallel, if one fails then the others should be aborted, given that the failure of one branch leads to the failure of the overall task.",
                "For example, suppose that part-way through writing the paper, Alice realizes that there is a fatal flaw in her results, and so notifies CALO that she will not be able to complete the paper by the deadline.",
                "The failure of the Track Writing Paper task should cause the Apply For Clearance task being executed in parallel to be aborted. 3.",
                "When an execution event alters the importance of an existing task or intention, the agent should deliberate over whether the existing plan(s) should continue.",
                "For example, suppose that Alice tasks CALO with a new, high-priority task to purchase a replacement laptop, but that Alice lacks enough funds to both purchase the laptop and to attend IJCAI.",
                "Reasoning over resource requirements [20, 10] will cause the agent to realize 3 If there is any difference between how to abort a task that is externally performed versus how to abort one that is now known to be impossible, the abort-method can detect the circumstances and handle the situation as appropriate. that it cannot successfully complete both tasks.",
                "Given that the new task has greater importance, a rational agent will evaluate its best course of action and may decide to abortor at least suspend - the existing task of submitting a paper and intentions derived from it [12].",
                "The operational semantics we provide in Section 4 for aborting tasks and plans captures the first two situations above.",
                "The third situation involves deliberating over the importance of a task, which depends on various factors such as task priority.",
                "Although this deliberation is beyond the scope of this paper, it is a complementary topic of our future work.",
                "Note that the above situations apply to achievement goals, for which the task is completed when a particular state of the world is brought about (e.g., ensure we have clearance).",
                "Different forms of reasoning apply to other goal types [4] such as maintenance goals [1], where the goal is satisfied by maintaining a state of the world for some period of time (e.g., maintain $100 in cash).",
                "Abort Method Representation The intent of aborting a task or plan is that the task or plan and all its children cease to execute, and that appropriate clean-up methods are performed as required.",
                "In contrast to offline planning systems, BDI agents are situated: they perform online deliberation and their actions change the state of the world.",
                "As a result, the effects of many actions cannot be simply undone.",
                "Moreover, the undo process may cause adverse effects.",
                "Therefore, the clean-up methods that we specify are forward recovery procedures that attempt to ensure a stable state and that also may, if possible, recover resources.",
                "The common plan representation in BDI-style systems such as JACK and SPARK includes a failure-method, which is the designated clean-up method invoked when the plan fails.",
                "To this, we add the abort-method, which is invoked if the plan is to be aborted.",
                "In our example, the abort-method for the plan for Support Meeting Submission consists of invoking the sub-task Cancel Paper Number.",
                "The abort-method need not explicitly abort Apply For Clearance, because the agent will invoke the abort-method for the subtask appropriately, as we outline below.",
                "The assumption here is that, like the failure-method, the programmer of the agent system has the opportunity to specify a sensible abort-method that takes into consideration the point in the plan at which the abort is to be executed.",
                "For any plan, the abort-method is optional: if no abort-method is specified, the agent takes no specific action for this plan.",
                "However, the agents default behavioural rules still apply, for example, whether to retry an alternate plan for the parent task.",
                "Note that an explicit representation of the clean-up methods for tasks is not required, since tasks are performed by executing some plan or plans.",
                "Hence, aborting a task means aborting the current plan that is executed to perform that task, as we next describe.",
                "Abort Method Invocation We now informally lay out the agents action upon aborting plans and tasks.",
                "When a plan P is aborted: 1.",
                "Abort each sub-task that is an active child of P. An active child is one that was triggered by P and is currently in execution. 2.",
                "When there are no more active children, invoke the abort method of plan P. 3.",
                "Indicate a plan failure to TP , the parent task of P. We note here that if the parent task TP is not to be aborted then the agent may choose another applicable plan to satisfy TP . 10 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) When a task (or sub-task) T is aborted: 1.",
                "Abort the current active plan to satisfy T (if any). 2.",
                "When there are no more active child processes, drop the task.",
                "The agent thus no longer pursues T. 3.",
                "Note here that when the current active plan for performing T is aborted, no other applicable plans to perform T should be tried as it is the task that is to be aborted.",
                "In order to prevent infinitely cascading clean-up efforts, we assume that abort-methods will never be aborted nor fail.",
                "In reality, however, an abort-method may fail.",
                "In this case, lacking a more sophisticated handling mechanism, the agent simply stops executing the failed abort-method with no further deliberation.",
                "The assumption we make is thus not a reflection of the full complexity of reality, but one that is pragmatic in terms of the agent execution cycle; the approach to failure-handling of [21] makes the same assumption.",
                "In systems such as SPARK, the programmer can specify an alternative behaviour for a failed failure- or abort-method by means of meta-level procedures.",
                "We also assume that failure- and abort-methods terminate in finite time. 4.",
                "OPERATIONAL SEMANTICS We provide the semantics for the task and plan failure and aborting processes outlined above.",
                "We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the goal adoption and dropping mechanisms.",
                "The extensions also simplified the semantics in the earlier work.",
                "We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1.",
                "Following a presentation of the operational semantics of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present. 4.1 CAN Language CAN is a high-level agent language, in a spirit similar to that of AgentSpeak [15] and Kinnys Ψ [7], both of which attempt to extract the essence of a class of implemented BDI agent systems.",
                "CAN provides an explicit goal construct that captures both the declarative and procedural aspects of a goal.",
                "Goals are persistent in CAN in that, when a plan fails, another applicable plan is attempted.",
                "This equates to the default failure handling mechanism typically found in implemented BDI systems such as JACK [2].",
                "In practical systems, tasks are typically translated into events that trigger the execution of some plans.",
                "This is also true in the CAN language, but, in order to maintain the persistence of goals, a goal construct is introduced.",
                "This is denoted by Goal ` φs, P, φf ´ , where φs is the success condition that determines when the goal is considered achieved, φf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once φs or φf become true.",
                "An agents behavior is specified by a plan library, denoted by Π, that consists of a collection of plan clauses of the form e : c ← P, where e is an event, c is a context condition (a logical formula over the agents beliefs that must be true in order for the plan to be applicable)4 and P is the plan body.",
                "The plan body is a program that is defined recursively as follows: P ::= act | +b | −b | ?φ | !e | P1; P2 | P1 P2 | Goal ` φs, P1, φf ´ | P1 P2 | {ψ1 : P1, . . . , ψn : Pn} | nil 4 An omitted c is equivalent to true.",
                "Δ = {ψiθ : Piθ | e : ψi ← Pi ∈ Π ∧ θ = mgu(e, e )} B, !e −→ B, Δ Event ψi : Pi ∈ Δ B |= ψi B, Δ −→ B, Pi Δ \\ {ψi : Pi} Select B, P1 −→ B, (P1 P2) −→ B, P2 fail B, P1 −→ B , P1 B, (P1; P2) −→ B , (P ; P2) Sequence B, P1 −→ B , P B, (P1 P2) −→ B , (P P2) Parallel1 B, P2 −→ B , P B, (P1 P2) −→ B , (P P1) Parallel2 Figure 1: Operational rules of CAN. where P1, . . . , Pn are themselves programs, act is a primitive action that is not further specified, and +b and −b are operations to add and delete beliefs.",
                "The belief base contains ground belief atoms in the form of first-order relations but could be orthogonally extended to other logics.",
                "It is assumed that well-defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ∪ {b}), and to delete a belief from a belief set (B \\ {b}). ?φ is a test for condition φ, and !e5 is an event6 that is posted from within the program.",
                "The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (Goal ` φs, P, φf ´ ).",
                "The above defines the user language.",
                "In addition, a set of auxiliary compound forms are used internally when assigning semantics to constructs. nil is the basic (terminating) program.",
                "When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 : P1, . . . , cn : Pn ).",
                "The other auxiliary compound form, , is a choice operator dual to sequencing: P1 P2 executes P1 and then executes P2 only if P1 failed.",
                "A summary of the operational semantics for CAN in line with [23] and following some of the simplifications of [17] is as follows.",
                "A basic configuration S = B, G, Γ consists of the current belief base B of the agent, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention).",
                "A transition S0 −→ S1 specifies that executing S0 for a single step yields configuration S1.",
                "S0 −→∗ Sn is the usual reflexive transitive closure of −→: Sn is the result of one or more singlestep transitions.",
                "A derivation rule S −→ Sr S −→ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator).",
                "Figure 1 gives some of the operational rules.",
                "The Event rule handles task events by collecting all relevant plan clauses for the event in question: for each plan clause e : ψi ← Pi, if there is a most general unifier, θ = mgu(e, e ) of e and the event in 5 Where it is obvious that e is an event we will sometimes exclude the exclamation mark for readability. 6 Typically an achievement goal.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 11 B |= φs B, Goal ` φs, P, φf ´ −→ B, true Gs B |= φf B, Goal ` φs, P, φf ´ −→ B, fail Gf P = Goal ` φs, P , φf ´ P = P1 £ P2 B |= φs ∨ φf B, P −→ B, Goal ` φs, P £ P , φf ´ GI P = P1 £ P2 B |= φs ∨ φf B, P1 −→ B , P B, Goal ` φs, P, φf ´ −→ B , Goal ` φs, P £ P2, φf ´ GS P = P1 £ P2 B |= φs ∨ φf P1 ∈ {true, fail} B, Goal ` φs, P, φf ´ −→ B, Goal ` φs, P2 £ P2, φf ´ GR Figure 2: Rules for goals in CAN. question, then the rule constructs a guarded alternative ψiθ : Piθ.",
                "The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives: program P Δ states that program P should be tried first, falling back to the remaining alternatives, Δ \\ P, if necessary.",
                "This rule and the fail rule together are used for failure handling: if the current program Pi from a plan clause for a task fails, rule fail is applied first, and then if possible, rule Select will choose another applicable alternative for the task if one exists.",
                "Rule Sequence handles sequencing of programs in the usual way.",
                "Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel.",
                "Figure 2 gives simplified rules for dealing with goals, in line with those presented in [17].",
                "The first rule states that a goal succeeds when φs become true; the second rule states that a goal fails when φf become true.",
                "The third rule GI initializes the execution of a goal-program by updating the goal base and setting the program in the goal to P £ P; the first P is to be executed and the second P is used to keep track of the original program for the goal.",
                "The fourth rule GS executes a single step of the goal-program.",
                "The final rule GR restarts the original program (encoded as P2 of pair P1 £ P2) whenever the current program is finished but the desired and still possible goal has not yet been achieved. 4.2 Aborting Intentions and Handling Failure We next introduce the ability to specify handler programs, in the form of failure- and abort-methods, that deal with the clean-up required when a given program respectively fails or is aborted.",
                "We do not associate failure- and abort- methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies failure- and abort- methods for an arbitrary program.",
                "The FAb(P, PF , PA) construct executes the program P. Should P fail, it executes the failure handling program PF ; should P need to be aborted, it executes the abort handling program PA.",
                "Thus to add failure- and abort- methods PF and PA to a plan clause e : c ← P, we write e : c ← FAb(P, PF , PA).",
                "With the introduction of the ability to abort programs, we modify the parallel construct to allow the failure of one branch to abort the other.",
                "We must take into consideration the possible existence of abort-methods in the aborted branch.",
                "Similarly, with the Goal construct we can no longer completely abandon the program the goal contains as soon as the success or failure condition holds; we must now take into consideration the existence of any abort-methods applicable to the program.",
                "We provide the semantics of an augmented agent language containing the FAb construct by defining a source transformation, similar to macro-expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN.",
                "The one non-standard extension to CAN is a wait-until-condition construct.",
                "We explain this simple modification of the parallel construct below when we come to translation of the Goal construct.",
                "First we describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases: the FAb, parallel, and Goal constructs.",
                "A key issue is that the FAb constructs may be nested, either directly or indirectly.",
                "Let us call each instantiation of the construct at execution time a possible abort point (pap).",
                "Where these constructs are nested, it is important that before the failure- or abort-method of a parent pap is executed, the failure- or abort-methods programs of the children paps are executed first, as described earlier in Section 3.",
                "The need to coordinate the execution of the abort-methods of nested paps requires that there be some way to identify the parents and children of a particular pap.",
                "We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e : c ← P with a plan clause e(v) : c ← μv(P) where v is a free variable, not previously present in the plan clause.",
                "This variable is used to keep track of the context of execution.",
                "The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context.",
                "For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1].",
                "We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51.",
                "This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v .",
                "For most CAN constructs, the context variable is unused or passed unchanged: μv(act) = act μv(+b) = +b μv(−b) = −b μv(nil) = nil μv(!e) = !e(v) μv(P1; P2) = μv(P1); μv(P2) μv(P1 P2) = μv(P1) μv(P2) μv( ψ1 : P1, . . . , ψn : Pn ) = ψ1 : μv(P1), . . . , ψn : μv(Pn) It remains to specify the transformation μv(·) in three cases: the FAb, parallel, and Goal constructs.",
                "These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context.",
                "Let us introduce the primitive action prependID(v, v ) that creates a new pap identifier and prepends it to list v giving list v .",
                "We also introduce the following predicates: • a(v) - the pap v is currently active. • abort(v) - the pap v should be aborted (after aborting all of its descendants). 7 An alternative would be to use meta-level predicates that reflect the current state of the intention structure. 12 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) • f(v) - the program of pap v has failed. • ancestorof(v, v ) ≡ v = v ∨ ancestorof(v, tail(v ))the pap v is an ancestor of pap v . • nac(v) ≡ ¬∃v . (a(v ) ∧ ancestorof(v, v ) ∧ v = v ) - v has no active children. • sa(v) ≡ ∃v .abort(v ) ∧ ancestorof(v , v) - we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active. • san(v) ≡ sa(v) ∧ nac(v) - we should abort v now if we should abort v and v has no active children.",
                "First let us consider the case of the FAb construct.",
                "The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v. We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context.",
                "We need to make sure that we retract the belief that v is active at the end, i.e., −a(v ).",
                "We use the Goal construct to allow us to drop the execution of a program within a pap v when it is necessary to abort.",
                "While executing the program P, we know that we need to drop P and invoke its abort-method if some ancestor of P has been told to abort.",
                "This is represented by the predicate sa(v ) being true.",
                "However, we need to make sure that we do this only after every child pap has had the chance to invoke its abort-method and all these abort-methods have completed: if we drop the program too soon, then execution of the abort-methods of the children will also be dropped.",
                "Therefore, the condition we actually use in the Goal construct to test when to drop the program is san(v ).",
                "This condition relies on the fact that as the children paps complete, they remove the relevant a facts.",
                "Our use of the Goal construct is for its ability to drop the execution of a program when conditions are met.",
                "To leave aside the repeat execution until a condition is met aspect, we must ensure that the success or failure condition of the construct is satisfied once the execution of the program succeeds or fails.",
                "We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on failure, and by having the appropriate success and failure conditions on the Goal.",
                "Hence, if the Goal construct fails, then the program either was aborted or it failed.",
                "We invoke the relevant failure- or abort- method, retract the a(v ) fact, and then fail.",
                "Putting all this together, we formally define μv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agents plan library: prependID(v, v ); +a(v ); Goal ( ¬a(v ), (μv (P); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); μv(PA)) μv(PF )); −a(v ); ?false) Second, we must transform the parallel operator to ensure that the failure of one branch safely aborts the other.",
                "Here we construct two new contexts, v and v , from the existing context v. If one branch fails, it must abort the other branch.",
                "At the end, if either branch was aborted, then we must fail.",
                "Let v and v be new variables distinct from any other in the agents plan library.",
                "We define μv(P1 P2) to be: prependID(v, v ); prependID(v, v ); +a(v ); +a(v ); ( Goal (¬a(v ), (μv (P1); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal (¬a(v ), (μv (P2); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ); ?¬abort(v ) ∧ ¬abort(v ) Finally, we need to modify occurrences of the Goal construct in two ways: first, to make sure that the abort handling methods are not bypassed when the success or failure conditions are satisfied, and second, to trigger the aborting of the contained program when either the success or failure conditions are satisfied.",
                "To transform the Goal construct we need to extend standard CAN with a wait-until-condition construct.",
                "The construct φ : P does not execute P until φ becomes true.",
                "We augment the CAN language with the following rules for the guard operator :: B |= φ B, G, (φ : P −→ B, G, P :true B |= φ B, G, (φ : P) −→ B, G, (φ : P) :false In order to specify μv(Goal ` φs, P, φf ´ ), we generate a new pap and execute the program within the Goal construct in this new context.",
                "We must ensure that belief a(v ) is removed whether the Goal succeeds or fails.",
                "We shift the success and failure condition of the Goal construct into a parallel branch using the wait-until-condition construct, and modify the Goal to use the should abort now condition san(v ) as the success condition.",
                "The waiting branch will trigger the abort of the program should either the success or failure condition be met.",
                "To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active.",
                "Let v be a new variable distinct from any other in the agents plan library.",
                "We define μv(Goal ` φs, P, φf ´ ) to be: prependID(v, v ); +a(v ); ( Goal ( san(v ), μv (P), false) ; −a(v ); ?φs ) φs ∨ φf ∨ ¬a(v ) : +abort(v ) ) The program P will be repeatedly executed until san(v ) becomes true.",
                "There are two ways this can occur.",
                "First, if either the success condition φs or the failure condition φf becomes true, then the second branch of the parallel construct executes.",
                "This causes abort(v ) to become true, and, after the descendant paps abortmethods are executed, san(v ) becomes true.",
                "In this case, P is now dropped, the a(v ) is removed, and the entire construct succeeds or fails based on φs.",
                "The second way for san(v ) to become true is if v or one of its ancestors is aborted.",
                "In this case, once the descendant paps abort-methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming φs is false). 4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2.",
                "We will express tasks by events, for example, the task Allocate a Paper Number we express as the event APN.",
                "Let the output of the Apply For Clearance task be Y or N, indicating the approval or not of Alices manager, respectively.",
                "Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively: SMS(m) : isconf(m) ← FAb(!APN; !TWA; (!AFC !TWP); !HPS, !CPN, !CPN) AFC : true ← FAb(!SCR; !WFR(r); ?r = Y, nil, !CCR) Note that Support Meeting Submission has a parameter m, the meeting of interest (IJCAI, in our example), while Apply For Clearance has no parameters.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two.",
                "Let v and v denote new variables.",
                "Then we have as the translated plan clause: AFC(v ) : true ← prependID(v , v ); +a(v ); Goal ( ¬a(v ), (!SCR(v ); !WFR(r, v ); ?r = Y; −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CCR(v )) nil); −a(v ); ?false) We can see that an extra context parameter has been added to each task and that the old plan body now appears inside a Goal construct.",
                "Should the old plan body succeed, belief a(v ) is retracted, causing the Goal to succeed.",
                "If the old plan body fails, or if the task is to be aborted, the Goal construct fails.",
                "This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and failure.",
                "The translation of the first plan clause, for SMS, is more complex, because of the parallel construct that introduces nested paps: SMS(m, v) : isconf(m) ← prependID(v, v ); +a(v ); Goal ( ¬a(v ), ((!APN(v ); !TWA(v ); prependID(v , v ); prependID(v , v ); +a(v ); +a(v ); ( Goal ( ¬a(v ), (!AFC(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal ( ¬a(v ), (!TWP(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ) ; ?¬abort(v ) ∧ ¬abort(v ); !HPS(v ); −a(v )) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CPN(v)) !CPN(v)); −a(v ); ?false) Here we can see that if the task !TWP(v ) fails then f(v ) will be asserted, failing the Goal construct that contains it, and leading to abort(v ) being asserted.",
                "If the !WFR(r, v ) task in the expansion of !AFC(v ) is still executing and has no active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true.",
                "This set of conditions will cause the Goal construct in the first plan clause to fail, dropping execution of !WFR(r, v ).",
                "The task !CCR(v ) will be executed.",
                "Once this task completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first Goal construct of the second plan clause to fail.",
                "While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely automated, according to the rules set out in Section 4.2.",
                "The translated plan clauses, with the semantics of CAN augmented by our waituntil-condition construct, thus specify the operation of the agent to handle both failure and aborting for the example. 5.",
                "RELATED WORK Plan failure is handled in the extended version of AgentSpeak found in the Jason system [6].",
                "Failure clean-up plans are triggered from goal deletion events −!g.",
                "Such plans, similar to our failure methods, are designed for the agent to effect state changes (act to undo its earlier actions) prior to possibly attempting another plan to achieve the failed goal g. Given Jasons constructs for dropping a goal with an indication of whether or not to try an alternate plan for it, H¨ubner et al. [6] provide an informal description of how a Jason agent modifies its intention structure when a goal failure event occurs.",
                "In a goal deletion plan, the programmer can specify any undo actions and whether to attempt the goal again.",
                "If no goal deletion plan is provided, Jasons default behaviour is to not reattempt the goal.",
                "Failure handling is applied only to plans triggered by addition of an achievement or test goal; in particular, goal deletion events are not posted for failure of a goal deletion plan.",
                "Further, the informal semantics of [6] do not consider parallel sub-goals (i.e., the CAN construct), since such execution is not part of Jasons language.",
                "The implementation of H¨ubner et al. [6] requires Jasons internal actions.",
                "A requirement for implementing our approach is a reflective capability in the BDI agent implementation.",
                "Suitable implementations of the BDI formalism are JACK [2], Jadex [14], and SPARK [9].",
                "All three allow meta level methods that are cued by meta events such as goal adoption or plan failure, and offer introspective capabilities over goal and intention states.",
                "Such meta level facilities are also required by the approach of Unruh et al. [21], who define goal-based semantic compensation for an agent.",
                "Failure-handling goals are invoked according to failurehandling strategy rules, by a dedicated agent Failure Handling Component (FHC) that tracks task execution.",
                "These goals are specified by the agent programmer and attached to tasks, much like our FAb(P, PF , PA) construct associates failure and abort methods with a plan P. Note, however, that in contrast to both [6] and our semantics, [21] attach the failure-handling knowledge at the goal, not plan, level.",
                "Their failure-handling goals may consist of stabilization goals that perform localized, immediate clean-up to restore the agents state to a known, stable state, and compensation goals that perform undo actions.",
                "Compensation goals are triggered on aborting a goal, and so not necessarily on goal failure (i.e., if the FHC directs the agent to retry the failed goal and the retry is successful).",
                "The FHC approach is defined at the goal level in order to facilitate abstract specification of failure-handling knowledge; the FHC decides when to address a failure and what to do (i.e., what failurehandling goals to invoke), separating this knowledge from the how of implementing corrective actions (i.e., what plan to execute to meet the adopted failure-handling goal).",
                "This contrasts with simplistic plan-level failure handling in which the what and how are intermingled in domain task knowledge.",
                "While our approach is defined at the plan level, our extended BDI semantics provides for the separation of execution and failure handling.",
                "Further, the FHC explicitly maintains data structures to track agent execution.",
                "We leverage the existing execution structures and self-reflective ability of a BDI agent to accomplish both aborting and failure handling without additional overhead.",
                "FHCs failure-handling strategy rules (e.g., whether to retry a failed goal) are replaced by instructions in our PF and PA plans, together with meta-level default failure handlers according to the agents nature (e.g., blindly committed).",
                "The FHC approach is independent of the architecture of the agent itself, in contrast to our work that is dedicated to the BDI formalism (although not tied to any one agent system).",
                "Thus no formal semantics are developed in [21]; the FHCs operation is given as 14 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) a state-based protocol.",
                "This approach, together with state checkpointing, is used for multi-agent systems in [22].",
                "The resulting architecture embeds their failure handling approach within a pair processing architecture for agent crash recovery.",
                "Other work on multi-agent exception handling includes AOEXs distributed exception handling agents [5], and the similar sentinels of [8].",
                "In both cases, failure-handling logic and knowledge are decoupled from the agents; by contrast, while separating exception handling from domain-specific knowledge, Unruh et al.s FHC and our approach both retain failure-handling logic within an agent. 6.",
                "CONCLUSION AND FUTURE WORK The tasks and plans of an agent may not successfully reach completion, either by the choice of the agent to abort them (perhaps at the request of another agent to do so), or by unbidden factors that lead to failure.",
                "In this paper we have presented a procedure-based approach that incorporates aborting tasks and plans into the deliberation cycle of a BDI-style agent, thus providing a unified approach to failure and abort.",
                "Our primary contribution is an analysis of the requirements on the operation of the agent for aborting tasks and plans, and a corresponding operational semantics for aborting in the abstract agent language CAN.",
                "We are planning to implement an instance of our approach in the SPARK agent system [9]; in particular, the work of this paper will be the basis for SPARKs abort handling mechanism.",
                "We are also developing an analysis tool for our extended version of CAN as a basis for experimentation.",
                "An intelligent agent will not only gracefully handle unsuccessful tasks and plans, but also will deliberate over its cognitive attitudes to decide its next course of action.",
                "We have assumed the default behaviour of a BDI-style agent, according to its nature: for instance, to retry alternatives to a failed plan until one succeeds or until no alternative plans remain (in which case to fail the task).",
                "Future work is to place our approach in service of more dynamic agent reasoning, such as the introspection that an agent capable of reasoning over task interaction effects and resource requirements can accomplish [19, 12].",
                "Related to this is determining the cost of aborting a task or plan, and using this as an input to the deliberation process.",
                "This would in particular influence the commitment the agent has towards a particular task: the higher the cost, the greater the commitment.",
                "Our assumption that abort-methods do not fail, as discussed above, is a pragmatic one.",
                "However, this is an issue worthy of further exploration, either to develop weaker assumptions that are also practical, or to analyze conditions under which our assumption is realistic.",
                "A further item of interest is extending our approach to failure and abort to maintenance goals [1].",
                "For such goals a different operational semantics for abort is necessary than for achievement goals, to match the difference in semantics of the goals themselves.",
                "Acknowledgements We thank Lin Padgham and the anonymous reviewers for their comments.",
                "The first author acknowledges the support of the Australian Research Council and Agent Oriented Software under grant LP0453486.",
                "The work of the two authors at SRI International was supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No.",
                "NBCHD030010.",
                "Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the view of DARPA or the Department of Interior-National Business Center. 7.",
                "REFERENCES [1] L. Braubach, A. Pokahr, D. Moldt, and W. Lamersdorf.",
                "Goal representation for BDI Agent systems.",
                "In Proc. of Second Intl.",
                "Workshop on Programming Multi-Agent Systems (ProMAS04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson, and A. Lucas.",
                "JACK intelligent agents - components for intelligent agents in Java.",
                "AgentLink News, Issue 2, 1999. [3] M. G. Chessell, C. Vines, D. Butler, C. M. Ferreira, and P. Henderson.",
                "Extending the concept of transaction compensation.",
                "IBM Systems Journal, 41(4), 2002. [4] M. Dastani, M. B. van Riemsdijk, and J.-J.",
                "C. Meyer.",
                "Goal types in agent programming.",
                "In Proc. of AAMAS06, 2006. [5] S. Entwisle, S. Loke, S. Krishnaswamy, and E. Kendall.",
                "Aoex: An agent-based exception handling framework for building reliable, distributed, open software systems.",
                "In Proc. of Seventh Joint Conf. on Knowledge-Based Software Engineering, 2006. [6] J. F. H¨ubner, R. H. Bordini, and M. Wooldridge.",
                "Programming declarative goals using plan patterns.",
                "In Proc. of 4th Intl.",
                "Workshop on Declarative Agent Languages and Technologies, 2006. [7] D. Kinny.",
                "The Psi calculus: an algebraic agent language.",
                "In Proc. of ATAL01, 2001. [8] M. Klein, J.",
                "A. Rodr´ıguez-Aguilar, and C. Dellarocas.",
                "Using domain-independent exception handling services to enable robust open multi-agent systems: The case of agent death.",
                "Autonomous Agents and Multi-Agent Systems, 7(1-2):179-189, 2003. [9] D. Morley and K. Myers.",
                "The SPARK agent framework.",
                "In Proc. of AAMAS04, 2004. [10] D. Morley, K. L. Myers, and N. Yorke-Smith.",
                "Continuous refinement of agent resource estimates.",
                "In Proc. of AAMAS06, 2006. [11] K. Myers, P. Berry, J. Blythe, K. Conley, M. Gervasio, D. McGuinness, D. Morley, A. Pfeffer, M. Pollack, and M. Tambe.",
                "An intelligent personal assistant for task and time management.",
                "AI Magazine, 28, 2007.",
                "To appear. [12] K. L. Myers and N. Yorke-Smith.",
                "A cognitive framework for delegation to an assistive user agent.",
                "In Proc. of AAAI 2005 Fall Symposium on Mixed-Initiative Problem-Solving Assistants, 2005. [13] L. Padgham and M. Winikoff.",
                "Developing Intelligent Agent Systems: A Practical Guide.",
                "John Wiley and Sons, 2004. [14] A. Pokahr, L. Braubach, and W. Lamersdorf.",
                "Jadex: A BDI reasoning engine.",
                "In R. Bordini, M. Dastani, J. Dix, and A. E. F. Seghrouchni, editors, Multi-Agent Programming.",
                "Springer, 2005. [15] A. S. Rao.",
                "AgentSpeak(L): BDI agents speak out in a logical computable language.",
                "In Proc. of Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World, 1996. [16] A. S. Rao and M. P. Georgeff.",
                "An abstract architecture for rational agents.",
                "In Proc. of KR92, 1992. [17] S. Sardi˜na, L. de Silva, and L. Padgham.",
                "Hierarchical planning in BDI agent programming languages: a formal approach.",
                "In Proc. of AAMAS06, 2006. [18] S. Sardina and L. Padgham.",
                "Goals in the context of bdi plan failure and planning.",
                "In Proc. of AAMAS07, 2007. [19] J. Thangarajah, L. Padgham, and M. Winikoff.",
                "Detecting and exploiting positive goal interaction in intelligent agents.",
                "In Proc. of AAMAS03, 2003. [20] J. Thangarajah, M. Winikoff, L. Padgham, and K. Fischer.",
                "Avoiding resource conflicts in intelligent agents.",
                "In Proc. of ECAI-02, 2002. [21] A. Unruh, J. Bailey, and K. Ramamohanarao.",
                "A framework for goal-based semantic compensation in agent systems.",
                "In Proc. of First Intl.",
                "Workshop on Safety and Security in Multi-Agent Systems, 2004. [22] A. Unruh, H. Harjadi, J. Bailey, and K. Ramamohanarao.",
                "Semantic-compensation-based recovery management in multi-agent systems.",
                "In Proc. of Second IEEE Symposium on Multi-Agent Security and Survivability (IEEE MAS&S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland, and J. Thangarajah.",
                "Declarative and procedural goals in intelligent agent systems.",
                "In Proc. of KR02, 2002.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 15"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "agency formal model": {
            "translated_key": "",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Aborting Tasks in BDI Agents John Thangarajah, James Harland RMIT University Melbourne, Australia {johthan,jah}@cs.rmit.edu.au David Morley, Neil Yorke-Smith Artificial Intelligence Center, SRI International Menlo Park, CA 94025 U.S.A. {morley,nysmith}@ai.sri.com ABSTRACT Intelligent agents that are intended to work in dynamic environments must be able to gracefully handle unsuccessful tasks and plans.",
                "In addition, such agents should be able to make rational decisions about an appropriate course of action, which may include aborting a task or plan, either as a result of the agents own deliberations, or potentially at the request of another agent.",
                "In this paper we investigate the incorporation of aborts into a BDI-style architecture.",
                "We discuss some conditions under which aborting a task or plan is appropriate, and how to determine the consequences of such a decision.",
                "We augment each plan with an optional abort-method, analogous to the failure method found in some agent programming languages.",
                "We provide an operational semantics for the execution cycle in the presence of aborts in the abstract agent language CAN, which enables us to specify a BDI-based execution model without limiting our attention to a particular agent system (such as JACK, Jadex, Jason, or SPARK).",
                "A key technical challenge we address is the presence of parallel execution threads and of sub-tasks, which require the agent to ensure that the abort methods for each plan are carried out in an appropriate sequence.",
                "Categories and Subject Descriptors I.2.11 [ARTIFICIAL INTELLIGENCE]: Distributed Artificial Intelligence-Intelligent agents General Terms Design, Reliability, Theory 1.",
                "INTRODUCTION Intelligent agents generally work in complex, dynamic environments, such as air traffic control or robot navigation, in which the success of any particular action or plan cannot be guaranteed [13].",
                "Accordingly, dealing with failure is fundamental to agent programming, and is an important element of agent characteristics such as robustness, flexibility, and persistence [21].",
                "In agent architectures inspired by the Belief-Desire-Intention (BDI) model [16], these properties are often characterized by the interactions between beliefs, goals, and plans [2].1 In general, an agent that wishes to achieve a particular set of tasks will pursue a number of plans concurrently.",
                "When failures occur, the choice of plans will be reviewed.",
                "This may involve seeking alternative plans for a particular task, re-scheduling tasks to better comply with resource constraints, dropping some tasks, or some other decision that will increase the likelihood of success [12, 14].",
                "Failures can occur for a number of reasons, and it is often not possible to predict these in advance, either because of the complexity of the system or because changes in the environment invalidate some earlier decisions.",
                "Given this need for deliberation about failed tasks or plans, failure deliberation is commonly built into the agents execution cycle.",
                "Besides dealing with failure, an important capability of an intelligent agent is to be able to abort a particular task or plan.",
                "This decision may be due to an internal deliberation (such as the agent believing the task can no longer be achieved, or that some conflicting task now has a higher priority) or due to an external factor (such as another agent altering a commitment, or a change in the environment).",
                "Aborting a task or plan is distinct from its failure.",
                "Failure reflects an inability to perform and does not negate the need to perform - for example, a reasonable response to failure may be to try again.",
                "In contrast, aborting says nothing about the ability to perform; it merely eliminates the need.",
                "Failure propagates from the bottom up, whereas aborting propagates from the top down.",
                "The potential for concurrently executing sub-plans introduces different complexities for aborting and failure.",
                "For aborting, it means that multiple concurrent sub-plans may need to be aborted as the abort is propagated down.",
                "For failure, it means that parallel-sibling plans may need to be aborted as the failure is propagated up.",
                "There has been a considerable amount of work on plan failures (such as detecting and resolving resource conflicts [20, 10]) and most agent systems incorporate some notion of failure handling.",
                "However, there has been relatively little work on the development of abort techniques beyond simple dropping of currently intended plans and tasks, which does not deal with the clean-up required.",
                "As one consequence, most agent systems are quite limited in their treatment of the situation where one branch of a parallel construct 1 One can consider both tasks to be performed and goals to achieve a certain state of the world.",
                "A task can be considered a goal of achieving the state of the task having been performed, and a goal can be considered a task of bringing about that state of the world.",
                "We adopt the latter view and use task to also refer to goals. 8 978-81-904262-7-5 (RPS) c 2007 IFAAMAS fails (common approaches include either letting the other branch run to completion unhindered or dropping it completely).",
                "In this paper we discuss in detail the incorporation of abort cleanup methods into the agent execution cycle, providing a unified approach to failure and abort.",
                "A key feature of our procedure-based approach is that we allow each plan to execute some particular code on a failure and on an abort.",
                "This allows a plan to attempt to ensure a stable, known state, and possibly to recover some resources and otherwise clean up before exiting.",
                "Accordingly, a central technical challenge is to manage the orderly execution of the appropriate clean-up code.",
                "We show how aborts can be smoothly introduced into a BDI-style architecture, and for the first time we give an operational semantics for aborting in the abstract agent language CAN [23, 17].",
                "This allows us to specify an appropriate level of detail for the execution model, without focusing on the specific constructs of any one agent system such as JACK [2], Jadex [14], Jason [6], or SPARK [9].",
                "Our focus is on a single agent, complementary to related work that considers exception handling for single- and multiagent systems (e.g., [22, 5, 6]).",
                "This paper is organized as follows.",
                "In Section 2 we give an example of the consequences of aborting a task, and in Section 3 we discuss some circumstances under which aborts should occur, and the appropriate representation and invocation procedures.",
                "In Section 4 we show how we can use CAN to formally specify the behaviour of an aborted plan.",
                "Section 5 discusses related work, and in Section 6 we present our conclusions and future work. 2.",
                "MOTIVATING EXAMPLE Alice is a knowledge worker assisted by a learning, personal assistive agent such as CALO [11].",
                "Alice plans to attend the IJCAI conference later in the year, and her CALO agent adopts the task of Support Meeting Submission (SMS) to assist her.",
                "CALOs plan for an SMS task in the case of a conference submission consists of the following sub-tasks: 1.",
                "Allocate a Paper Number (APN) to be used for administrative purposes in the company. 2.",
                "Track Writing Abstract (TWA): keep track of Alices progress in preparing an abstract. 3.",
                "Apply For Clearance (AFC) for publication from Alices manager based on the abstract and conference details. 4.",
                "Track Writing Paper (TWP): keep track of Alices progress in writing the paper. 5.",
                "Handle Paper Submission (HPS): follow company internal procedures for submitting a paper to a conference.",
                "These steps must be performed in order, with the exception of steps 3 (AFC) and 4 (TWP), which may be performed in parallel.",
                "Similarly, CALO can perform the task Apply For Clearance (AFC) by a plan consisting of: 1.",
                "Send Clearance Request (SCR) to Alices manager. 2.",
                "Wait For Response (WFR) from the manager. 3.",
                "Confirm that the response was positive, and fail otherwise.",
                "Now suppose that a change in circumstances causes Alice to reconsider her travel plans while she is writing the paper.",
                "Alice will no longer be able to attend IJCAI.",
                "She therefore instructs her CALO agent to abort the SMS task.",
                "Aborting the task implies aborting both the SMS plan and the AFC subplan.",
                "Aborting the first plan requires CALO to notify the paper number registry that the allocated paper number is obsolete, which it can achieve by the Cancel Paper Number (CPN) task.2 Aborting the second plan requires CALO to notify Alices manager that Alice no longer requires clearance for publication, which CALO can achieve by invoking the Cancel Clearance Request (CCR) task.",
                "We note a number of important observations from the example.",
                "First, the decision to abort a particular course of action can come from the internal deliberations of the agent (such as reasoning about priorities in a conflict over resources), or from external sources (such as another agent cancelling a commitment), as in this example.",
                "In this paper we only touch on the problem of determining whether a task or plan should be aborted, instead concentrating on determining the appropriate actions once this decision is made.",
                "Hence, our objective is to determine how to incorporate aborting mechanisms into the standard execution cycle rather than determine what should be aborted and when.",
                "Second, once the decision is made to abort the attempt to submit a paper, there are some actions the agent should take, such as cancelling the clearance request.",
                "In other words, aborting a task is not simply a matter of dropping the task and associated active plans: there are some clean up actions that may need to be done.",
                "This is similar to the case for failure, in that there may also be actions to take when a task or plan fails.",
                "In both cases, note that it is not simply a matter of the agent undo-ing its actions to date; indeed, this may be neither possible (since the agent acts in a situated world and its actions change world state) nor desirable (depending on the semantics of the task).",
                "Rather, cleaning up involves compensation via forward recovery actions [3].",
                "Third, there is a distinction between aborting a task and aborting a plan.",
                "In the former case, it is clear that all plans being executed to perform the task should be aborted; in the latter case, it may be that there are better alternatives to the current plan and one of these should be attempted.",
                "Hence, plan aborting or failure does not necessarily lead to task aborting or failure.",
                "Fourth, given that tasks may contain sub-tasks, which may contain further sub-tasks, it is necessary for a parent task to wait until its children have finished their abort methods.",
                "This is the source of one of the technical challenges that we address: determining the precise sequence of actions once a parent task or plan is aborted. 3.",
                "ABORTING TASKS AND PLANS As we have alluded to, failure and aborting are related concepts.",
                "They both cause the execution of existing plans to cease and, consequentially, the agent to reflect over its current tasks and intentions.",
                "Failure and aborting, however, differ in the way they arise.",
                "In the case of failure, the trigger to cease execution of a task or plan comes from below, that is, the failure of sub-tasks or lower-level plans.",
                "In the case of aborting, the trigger comes from above, that is, the tasks and the parent plans that initiated a plan.",
                "In BDI-style systems such as JACK and SPARK, an agents domain knowledge includes a pre-defined plan library of plan clauses.",
                "Each plan clause has a plan body, which is a program (i.e., combination of primitive actions, sub-tasks, etc.) that can be executed in response to a task or other event should the plan clauses context condition be satisfied.",
                "The agent selects and executes instances of plan clauses to perform its tasks.",
                "There can be more than one applicable plan clause and, in the event that one fails, another applicable one may be attempted.",
                "Plans may have sub-tasks that must succeed 2 CALO needs only drop the TWA and TWP tasks to abort them: for the sake of simplicity we suppose no explicit clean up of its internal state is necessary.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 9 for the plan to succeed.",
                "In such systems, a plan failure occurs if one of the actions or sub-tasks within the plan fails.",
                "The agents action upon plan failure depends on its nature: for example, the agent may declare the task to have failed if one plan has been tried and resulted in failure, or it may retry alternate plans and declare (indeed, must declare) task failure only if all possible alternate plans to perform the task have been tried and resulted in failure.",
                "Observe that, while task failure can follow from plan failure or a sequence of plan failures, plan failure need not lead to task failure provided the agent can successfully complete an alternate plan.",
                "Moreover, task failure can also arise separately from plan failure, if the agent decides to abort the task.",
                "Our approach associates an abort-method with each plan.",
                "This enables the programmer to specify dedicated compensation actions according to how the agent is attempting to perform the task.",
                "Note that our abort-methods can be arbitrary programs and so can invoke tasks that may be performed dynamically in the usual BDI fashion, i.e., the clean-up is not limited to executing a predetermined set of actions.",
                "The question remains which abort-method should be invoked, and in what manner.",
                "Given the complexity of agent action spaces, it is not possible nor desirable to enumerate a static set of rules.",
                "Rather, the agent will invoke its abort-methods dynamically according to the state of execution and its own internal events.",
                "An alternative to attaching an abort-method to each plan is to attach such methods to each atomic action.",
                "We choose the former because: (1) action-level abort-methods would incur a greater overhead, (2) plans are meant to be designed as single cohesive units and are the unit of deliberation in BDI systems, and (3) the cleanup methods for failure in current systems are attached to plans.",
                "In order to understand how the agents abort processing should function, we consider three situations where it is sensible for an agent to consider aborting some of its tasks and plans: 1.",
                "When a task succeeds or fails because of an external factor other than the agent itself, the plan currently executed to perform the task should be aborted.",
                "For example, suppose company policy changes so that employees of Alices seniority automatically have clearance for publishing papers.",
                "Since Alice now has clearance for publishing her paper, CALO can abort the plan for Apply For Clearance.",
                "In doing so it must invoke the abort-method, in this case thus performing Cancel Clearance Request.3 2.",
                "When two or more sub-programs are executed in parallel, if one fails then the others should be aborted, given that the failure of one branch leads to the failure of the overall task.",
                "For example, suppose that part-way through writing the paper, Alice realizes that there is a fatal flaw in her results, and so notifies CALO that she will not be able to complete the paper by the deadline.",
                "The failure of the Track Writing Paper task should cause the Apply For Clearance task being executed in parallel to be aborted. 3.",
                "When an execution event alters the importance of an existing task or intention, the agent should deliberate over whether the existing plan(s) should continue.",
                "For example, suppose that Alice tasks CALO with a new, high-priority task to purchase a replacement laptop, but that Alice lacks enough funds to both purchase the laptop and to attend IJCAI.",
                "Reasoning over resource requirements [20, 10] will cause the agent to realize 3 If there is any difference between how to abort a task that is externally performed versus how to abort one that is now known to be impossible, the abort-method can detect the circumstances and handle the situation as appropriate. that it cannot successfully complete both tasks.",
                "Given that the new task has greater importance, a rational agent will evaluate its best course of action and may decide to abortor at least suspend - the existing task of submitting a paper and intentions derived from it [12].",
                "The operational semantics we provide in Section 4 for aborting tasks and plans captures the first two situations above.",
                "The third situation involves deliberating over the importance of a task, which depends on various factors such as task priority.",
                "Although this deliberation is beyond the scope of this paper, it is a complementary topic of our future work.",
                "Note that the above situations apply to achievement goals, for which the task is completed when a particular state of the world is brought about (e.g., ensure we have clearance).",
                "Different forms of reasoning apply to other goal types [4] such as maintenance goals [1], where the goal is satisfied by maintaining a state of the world for some period of time (e.g., maintain $100 in cash).",
                "Abort Method Representation The intent of aborting a task or plan is that the task or plan and all its children cease to execute, and that appropriate clean-up methods are performed as required.",
                "In contrast to offline planning systems, BDI agents are situated: they perform online deliberation and their actions change the state of the world.",
                "As a result, the effects of many actions cannot be simply undone.",
                "Moreover, the undo process may cause adverse effects.",
                "Therefore, the clean-up methods that we specify are forward recovery procedures that attempt to ensure a stable state and that also may, if possible, recover resources.",
                "The common plan representation in BDI-style systems such as JACK and SPARK includes a failure-method, which is the designated clean-up method invoked when the plan fails.",
                "To this, we add the abort-method, which is invoked if the plan is to be aborted.",
                "In our example, the abort-method for the plan for Support Meeting Submission consists of invoking the sub-task Cancel Paper Number.",
                "The abort-method need not explicitly abort Apply For Clearance, because the agent will invoke the abort-method for the subtask appropriately, as we outline below.",
                "The assumption here is that, like the failure-method, the programmer of the agent system has the opportunity to specify a sensible abort-method that takes into consideration the point in the plan at which the abort is to be executed.",
                "For any plan, the abort-method is optional: if no abort-method is specified, the agent takes no specific action for this plan.",
                "However, the agents default behavioural rules still apply, for example, whether to retry an alternate plan for the parent task.",
                "Note that an explicit representation of the clean-up methods for tasks is not required, since tasks are performed by executing some plan or plans.",
                "Hence, aborting a task means aborting the current plan that is executed to perform that task, as we next describe.",
                "Abort Method Invocation We now informally lay out the agents action upon aborting plans and tasks.",
                "When a plan P is aborted: 1.",
                "Abort each sub-task that is an active child of P. An active child is one that was triggered by P and is currently in execution. 2.",
                "When there are no more active children, invoke the abort method of plan P. 3.",
                "Indicate a plan failure to TP , the parent task of P. We note here that if the parent task TP is not to be aborted then the agent may choose another applicable plan to satisfy TP . 10 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) When a task (or sub-task) T is aborted: 1.",
                "Abort the current active plan to satisfy T (if any). 2.",
                "When there are no more active child processes, drop the task.",
                "The agent thus no longer pursues T. 3.",
                "Note here that when the current active plan for performing T is aborted, no other applicable plans to perform T should be tried as it is the task that is to be aborted.",
                "In order to prevent infinitely cascading clean-up efforts, we assume that abort-methods will never be aborted nor fail.",
                "In reality, however, an abort-method may fail.",
                "In this case, lacking a more sophisticated handling mechanism, the agent simply stops executing the failed abort-method with no further deliberation.",
                "The assumption we make is thus not a reflection of the full complexity of reality, but one that is pragmatic in terms of the agent execution cycle; the approach to failure-handling of [21] makes the same assumption.",
                "In systems such as SPARK, the programmer can specify an alternative behaviour for a failed failure- or abort-method by means of meta-level procedures.",
                "We also assume that failure- and abort-methods terminate in finite time. 4.",
                "OPERATIONAL SEMANTICS We provide the semantics for the task and plan failure and aborting processes outlined above.",
                "We use the CAN language initially defined in [23] and later extended as CANPLAN in [17] to include a planning component and then as CANPLAN2 in [18] to improve the goal adoption and dropping mechanisms.",
                "The extensions also simplified the semantics in the earlier work.",
                "We use some of these simplifications for providing a brief summary of the CAN language in Section 4.1.",
                "Following a presentation of the operational semantics of our approach in Section 4.2, in Section 4.3 we provide a worked example to clarify the semantics that we present. 4.1 CAN Language CAN is a high-level agent language, in a spirit similar to that of AgentSpeak [15] and Kinnys Ψ [7], both of which attempt to extract the essence of a class of implemented BDI agent systems.",
                "CAN provides an explicit goal construct that captures both the declarative and procedural aspects of a goal.",
                "Goals are persistent in CAN in that, when a plan fails, another applicable plan is attempted.",
                "This equates to the default failure handling mechanism typically found in implemented BDI systems such as JACK [2].",
                "In practical systems, tasks are typically translated into events that trigger the execution of some plans.",
                "This is also true in the CAN language, but, in order to maintain the persistence of goals, a goal construct is introduced.",
                "This is denoted by Goal ` φs, P, φf ´ , where φs is the success condition that determines when the goal is considered achieved, φf is a fail condition under which it is considered the goal is no longer achievable or relevant, and P is a program for achieving the goal, which will be aborted once φs or φf become true.",
                "An agents behavior is specified by a plan library, denoted by Π, that consists of a collection of plan clauses of the form e : c ← P, where e is an event, c is a context condition (a logical formula over the agents beliefs that must be true in order for the plan to be applicable)4 and P is the plan body.",
                "The plan body is a program that is defined recursively as follows: P ::= act | +b | −b | ?φ | !e | P1; P2 | P1 P2 | Goal ` φs, P1, φf ´ | P1 P2 | {ψ1 : P1, . . . , ψn : Pn} | nil 4 An omitted c is equivalent to true.",
                "Δ = {ψiθ : Piθ | e : ψi ← Pi ∈ Π ∧ θ = mgu(e, e )} B, !e −→ B, Δ Event ψi : Pi ∈ Δ B |= ψi B, Δ −→ B, Pi Δ \\ {ψi : Pi} Select B, P1 −→ B, (P1 P2) −→ B, P2 fail B, P1 −→ B , P1 B, (P1; P2) −→ B , (P ; P2) Sequence B, P1 −→ B , P B, (P1 P2) −→ B , (P P2) Parallel1 B, P2 −→ B , P B, (P1 P2) −→ B , (P P1) Parallel2 Figure 1: Operational rules of CAN. where P1, . . . , Pn are themselves programs, act is a primitive action that is not further specified, and +b and −b are operations to add and delete beliefs.",
                "The belief base contains ground belief atoms in the form of first-order relations but could be orthogonally extended to other logics.",
                "It is assumed that well-defined operations are provided to check whether a condition follows from a belief set (B |= c), to add a belief to a belief set (B ∪ {b}), and to delete a belief from a belief set (B \\ {b}). ?φ is a test for condition φ, and !e5 is an event6 that is posted from within the program.",
                "The compound constructs are sequencing (P1; P2), parallel execution (P1 P2), and goals (Goal ` φs, P, φf ´ ).",
                "The above defines the user language.",
                "In addition, a set of auxiliary compound forms are used internally when assigning semantics to constructs. nil is the basic (terminating) program.",
                "When an event matches a set of plan clauses these are collected into a set of guarded alternatives ( c1 : P1, . . . , cn : Pn ).",
                "The other auxiliary compound form, , is a choice operator dual to sequencing: P1 P2 executes P1 and then executes P2 only if P1 failed.",
                "A summary of the operational semantics for CAN in line with [23] and following some of the simplifications of [17] is as follows.",
                "A basic configuration S = B, G, Γ consists of the current belief base B of the agent, the current set of goals G being pursued (i.e., set of formulae), and the current program P being executed (i.e., the current intention).",
                "A transition S0 −→ S1 specifies that executing S0 for a single step yields configuration S1.",
                "S0 −→∗ Sn is the usual reflexive transitive closure of −→: Sn is the result of one or more singlestep transitions.",
                "A derivation rule S −→ Sr S −→ Sr consists of a (possibly empty) set of premises, which are transitions together with some auxiliary conditions (numerator), and a single transition conclusion derivable from these premises (denominator).",
                "Figure 1 gives some of the operational rules.",
                "The Event rule handles task events by collecting all relevant plan clauses for the event in question: for each plan clause e : ψi ← Pi, if there is a most general unifier, θ = mgu(e, e ) of e and the event in 5 Where it is obvious that e is an event we will sometimes exclude the exclamation mark for readability. 6 Typically an achievement goal.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 11 B |= φs B, Goal ` φs, P, φf ´ −→ B, true Gs B |= φf B, Goal ` φs, P, φf ´ −→ B, fail Gf P = Goal ` φs, P , φf ´ P = P1 £ P2 B |= φs ∨ φf B, P −→ B, Goal ` φs, P £ P , φf ´ GI P = P1 £ P2 B |= φs ∨ φf B, P1 −→ B , P B, Goal ` φs, P, φf ´ −→ B , Goal ` φs, P £ P2, φf ´ GS P = P1 £ P2 B |= φs ∨ φf P1 ∈ {true, fail} B, Goal ` φs, P, φf ´ −→ B, Goal ` φs, P2 £ P2, φf ´ GR Figure 2: Rules for goals in CAN. question, then the rule constructs a guarded alternative ψiθ : Piθ.",
                "The Select rule then selects one applicable plan body from a set of (remaining) relevant alternatives: program P Δ states that program P should be tried first, falling back to the remaining alternatives, Δ \\ P, if necessary.",
                "This rule and the fail rule together are used for failure handling: if the current program Pi from a plan clause for a task fails, rule fail is applied first, and then if possible, rule Select will choose another applicable alternative for the task if one exists.",
                "Rule Sequence handles sequencing of programs in the usual way.",
                "Rules Parallel1 and Parallel2 define the possible interleaving when executing two programs in parallel.",
                "Figure 2 gives simplified rules for dealing with goals, in line with those presented in [17].",
                "The first rule states that a goal succeeds when φs become true; the second rule states that a goal fails when φf become true.",
                "The third rule GI initializes the execution of a goal-program by updating the goal base and setting the program in the goal to P £ P; the first P is to be executed and the second P is used to keep track of the original program for the goal.",
                "The fourth rule GS executes a single step of the goal-program.",
                "The final rule GR restarts the original program (encoded as P2 of pair P1 £ P2) whenever the current program is finished but the desired and still possible goal has not yet been achieved. 4.2 Aborting Intentions and Handling Failure We next introduce the ability to specify handler programs, in the form of failure- and abort-methods, that deal with the clean-up required when a given program respectively fails or is aborted.",
                "We do not associate failure- and abort- methods with plan clauses or with tasks (events), but rather we introduce a new program construct that specifies failure- and abort- methods for an arbitrary program.",
                "The FAb(P, PF , PA) construct executes the program P. Should P fail, it executes the failure handling program PF ; should P need to be aborted, it executes the abort handling program PA.",
                "Thus to add failure- and abort- methods PF and PA to a plan clause e : c ← P, we write e : c ← FAb(P, PF , PA).",
                "With the introduction of the ability to abort programs, we modify the parallel construct to allow the failure of one branch to abort the other.",
                "We must take into consideration the possible existence of abort-methods in the aborted branch.",
                "Similarly, with the Goal construct we can no longer completely abandon the program the goal contains as soon as the success or failure condition holds; we must now take into consideration the existence of any abort-methods applicable to the program.",
                "We provide the semantics of an augmented agent language containing the FAb construct by defining a source transformation, similar to macro-expansion, that maps a plan library containing the FAb(P, PF , PA) construct into (almost) standard CAN.",
                "The one non-standard extension to CAN is a wait-until-condition construct.",
                "We explain this simple modification of the parallel construct below when we come to translation of the Goal construct.",
                "First we describe the general nature of the source transformation, which proves to be quite simple for most of the language constructs, and then we concentrate on the three more complex cases: the FAb, parallel, and Goal constructs.",
                "A key issue is that the FAb constructs may be nested, either directly or indirectly.",
                "Let us call each instantiation of the construct at execution time a possible abort point (pap).",
                "Where these constructs are nested, it is important that before the failure- or abort-method of a parent pap is executed, the failure- or abort-methods programs of the children paps are executed first, as described earlier in Section 3.",
                "The need to coordinate the execution of the abort-methods of nested paps requires that there be some way to identify the parents and children of a particular pap.",
                "We achieve this as part of the source transformation by explicitly keeping track of the context of execution as an extra parameter on the events and an extra variable within each plan body.7 The source transformation replaces each plan clause of the form e : c ← P with a plan clause e(v) : c ← μv(P) where v is a free variable, not previously present in the plan clause.",
                "This variable is used to keep track of the context of execution.",
                "The value of the context variable is a list of identifiers, where each new pap is represented by prepending a new identifier to the context.",
                "For example, if the identifiers are integers, the context of one pap may be represented by a list [42, 1] and the context introduced by a new pap may be represented by [52, 42, 1].",
                "We will refer to paps by the context rather than by the new identifier added, e.g., by [51, 42, 1] not 51.",
                "This enables us to equate the ancestor relationship between paps with the list suffix relationship on the relevant contexts, i.e., v is an ancestor of v if and only if v is a suffix of v .",
                "For most CAN constructs, the context variable is unused or passed unchanged: μv(act) = act μv(+b) = +b μv(−b) = −b μv(nil) = nil μv(!e) = !e(v) μv(P1; P2) = μv(P1); μv(P2) μv(P1 P2) = μv(P1) μv(P2) μv( ψ1 : P1, . . . , ψn : Pn ) = ψ1 : μv(P1), . . . , ψn : μv(Pn) It remains to specify the transformation μv(·) in three cases: the FAb, parallel, and Goal constructs.",
                "These are more complex in that the transformed source needs to create a new pap identifier dynamically, for use as a new context within the construct, and to keep track of when the pap is active (i.e., currently in execution) by adding and removing beliefs about the context.",
                "Let us introduce the primitive action prependID(v, v ) that creates a new pap identifier and prepends it to list v giving list v .",
                "We also introduce the following predicates: • a(v) - the pap v is currently active. • abort(v) - the pap v should be aborted (after aborting all of its descendants). 7 An alternative would be to use meta-level predicates that reflect the current state of the intention structure. 12 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) • f(v) - the program of pap v has failed. • ancestorof(v, v ) ≡ v = v ∨ ancestorof(v, tail(v ))the pap v is an ancestor of pap v . • nac(v) ≡ ¬∃v . (a(v ) ∧ ancestorof(v, v ) ∧ v = v ) - v has no active children. • sa(v) ≡ ∃v .abort(v ) ∧ ancestorof(v , v) - we should abort v, i.e., abort is true of v or some ancestor; however, we need to wait until no children of v are active. • san(v) ≡ sa(v) ∧ nac(v) - we should abort v now if we should abort v and v has no active children.",
                "First let us consider the case of the FAb construct.",
                "The idea is that, whenever a new pap occurs, the prependID(v, v ) action is used to create a new pap identifier list v from the existing list v. We then add the belief that v is the active context, i.e., +a(v ), and start processing the program within the pap using v instead of v as the context.",
                "We need to make sure that we retract the belief that v is active at the end, i.e., −a(v ).",
                "We use the Goal construct to allow us to drop the execution of a program within a pap v when it is necessary to abort.",
                "While executing the program P, we know that we need to drop P and invoke its abort-method if some ancestor of P has been told to abort.",
                "This is represented by the predicate sa(v ) being true.",
                "However, we need to make sure that we do this only after every child pap has had the chance to invoke its abort-method and all these abort-methods have completed: if we drop the program too soon, then execution of the abort-methods of the children will also be dropped.",
                "Therefore, the condition we actually use in the Goal construct to test when to drop the program is san(v ).",
                "This condition relies on the fact that as the children paps complete, they remove the relevant a facts.",
                "Our use of the Goal construct is for its ability to drop the execution of a program when conditions are met.",
                "To leave aside the repeat execution until a condition is met aspect, we must ensure that the success or failure condition of the construct is satisfied once the execution of the program succeeds or fails.",
                "We make sure of this by retracting the fact a(v ) on success and asserting the fact f(v ) on failure, and by having the appropriate success and failure conditions on the Goal.",
                "Hence, if the Goal construct fails, then the program either was aborted or it failed.",
                "We invoke the relevant failure- or abort- method, retract the a(v ) fact, and then fail.",
                "Putting all this together, we formally define μv(FAb(P, PA, PF )) to be the following, where v is a new variable distinct from any other in the agents plan library: prependID(v, v ); +a(v ); Goal ( ¬a(v ), (μv (P); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); μv(PA)) μv(PF )); −a(v ); ?false) Second, we must transform the parallel operator to ensure that the failure of one branch safely aborts the other.",
                "Here we construct two new contexts, v and v , from the existing context v. If one branch fails, it must abort the other branch.",
                "At the end, if either branch was aborted, then we must fail.",
                "Let v and v be new variables distinct from any other in the agents plan library.",
                "We define μv(P1 P2) to be: prependID(v, v ); prependID(v, v ); +a(v ); +a(v ); ( Goal (¬a(v ), (μv (P1); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal (¬a(v ), (μv (P2); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ); ?¬abort(v ) ∧ ¬abort(v ) Finally, we need to modify occurrences of the Goal construct in two ways: first, to make sure that the abort handling methods are not bypassed when the success or failure conditions are satisfied, and second, to trigger the aborting of the contained program when either the success or failure conditions are satisfied.",
                "To transform the Goal construct we need to extend standard CAN with a wait-until-condition construct.",
                "The construct φ : P does not execute P until φ becomes true.",
                "We augment the CAN language with the following rules for the guard operator :: B |= φ B, G, (φ : P −→ B, G, P :true B |= φ B, G, (φ : P) −→ B, G, (φ : P) :false In order to specify μv(Goal ` φs, P, φf ´ ), we generate a new pap and execute the program within the Goal construct in this new context.",
                "We must ensure that belief a(v ) is removed whether the Goal succeeds or fails.",
                "We shift the success and failure condition of the Goal construct into a parallel branch using the wait-until-condition construct, and modify the Goal to use the should abort now condition san(v ) as the success condition.",
                "The waiting branch will trigger the abort of the program should either the success or failure condition be met.",
                "To avoid any problems with terminating the wait condition, we also end the wait if the pap is no longer active.",
                "Let v be a new variable distinct from any other in the agents plan library.",
                "We define μv(Goal ` φs, P, φf ´ ) to be: prependID(v, v ); +a(v ); ( Goal ( san(v ), μv (P), false) ; −a(v ); ?φs ) φs ∨ φf ∨ ¬a(v ) : +abort(v ) ) The program P will be repeatedly executed until san(v ) becomes true.",
                "There are two ways this can occur.",
                "First, if either the success condition φs or the failure condition φf becomes true, then the second branch of the parallel construct executes.",
                "This causes abort(v ) to become true, and, after the descendant paps abortmethods are executed, san(v ) becomes true.",
                "In this case, P is now dropped, the a(v ) is removed, and the entire construct succeeds or fails based on φs.",
                "The second way for san(v ) to become true is if v or one of its ancestors is aborted.",
                "In this case, once the descendant paps abort-methods are executed, san(v ) becomes true, P is dropped, the a(v ) belief is removed (allowing the second parallel branch to execute, vacuously instructing v to abort), and the first parallel branch fails (assuming φs is false). 4.3 Worked Example Let us look at translation of the IJCAI submission example of Section 2.",
                "We will express tasks by events, for example, the task Allocate a Paper Number we express as the event APN.",
                "Let the output of the Apply For Clearance task be Y or N, indicating the approval or not of Alices manager, respectively.",
                "Then we have (at least) the following two plan clauses in CAN, for the Support Meeting Submission and Apply For Clearance tasks, respectively: SMS(m) : isconf(m) ← FAb(!APN; !TWA; (!AFC !TWP); !HPS, !CPN, !CPN) AFC : true ← FAb(!SCR; !WFR(r); ?r = Y, nil, !CCR) Note that Support Meeting Submission has a parameter m, the meeting of interest (IJCAI, in our example), while Apply For Clearance has no parameters.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 13 Let us look first at the translation of the second plan clause, for AFC, since it is the simpler of the two.",
                "Let v and v denote new variables.",
                "Then we have as the translated plan clause: AFC(v ) : true ← prependID(v , v ); +a(v ); Goal ( ¬a(v ), (!SCR(v ); !WFR(r, v ); ?r = Y; −a(v ) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CCR(v )) nil); −a(v ); ?false) We can see that an extra context parameter has been added to each task and that the old plan body now appears inside a Goal construct.",
                "Should the old plan body succeed, belief a(v ) is retracted, causing the Goal to succeed.",
                "If the old plan body fails, or if the task is to be aborted, the Goal construct fails.",
                "This is followed by the execution of CCR (in the case of an abort), the retraction of a(v ), and failure.",
                "The translation of the first plan clause, for SMS, is more complex, because of the parallel construct that introduces nested paps: SMS(m, v) : isconf(m) ← prependID(v, v ); +a(v ); Goal ( ¬a(v ), ((!APN(v ); !TWA(v ); prependID(v , v ); prependID(v , v ); +a(v ); +a(v ); ( Goal ( ¬a(v ), (!AFC(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) Goal ( ¬a(v ), (!TWP(v ); −a(v ) +f(v )), san(v ) ∨ f(v ) ) (+abort(v ); −a(v )) ) ; ?¬abort(v ) ∧ ¬abort(v ); !HPS(v ); −a(v )) +f(v )), san(v ) ∨ f(v ) ) (((?sa(v ); !CPN(v)) !CPN(v)); −a(v ); ?false) Here we can see that if the task !TWP(v ) fails then f(v ) will be asserted, failing the Goal construct that contains it, and leading to abort(v ) being asserted.",
                "If the !WFR(r, v ) task in the expansion of !AFC(v ) is still executing and has no active child paps, then sa(v ) and sa(v ) will be true; however, only san(v ) and not san(v ) will be true.",
                "This set of conditions will cause the Goal construct in the first plan clause to fail, dropping execution of !WFR(r, v ).",
                "The task !CCR(v ) will be executed.",
                "Once this task completes, belief a(v ) is retracted, causing san(v ) to become true, leading to the first Goal construct of the second plan clause to fail.",
                "While the translated plan clauses appear complicated, observe that the translation from the initial plan clauses is entirely automated, according to the rules set out in Section 4.2.",
                "The translated plan clauses, with the semantics of CAN augmented by our waituntil-condition construct, thus specify the operation of the agent to handle both failure and aborting for the example. 5.",
                "RELATED WORK Plan failure is handled in the extended version of AgentSpeak found in the Jason system [6].",
                "Failure clean-up plans are triggered from goal deletion events −!g.",
                "Such plans, similar to our failure methods, are designed for the agent to effect state changes (act to undo its earlier actions) prior to possibly attempting another plan to achieve the failed goal g. Given Jasons constructs for dropping a goal with an indication of whether or not to try an alternate plan for it, H¨ubner et al. [6] provide an informal description of how a Jason agent modifies its intention structure when a goal failure event occurs.",
                "In a goal deletion plan, the programmer can specify any undo actions and whether to attempt the goal again.",
                "If no goal deletion plan is provided, Jasons default behaviour is to not reattempt the goal.",
                "Failure handling is applied only to plans triggered by addition of an achievement or test goal; in particular, goal deletion events are not posted for failure of a goal deletion plan.",
                "Further, the informal semantics of [6] do not consider parallel sub-goals (i.e., the CAN construct), since such execution is not part of Jasons language.",
                "The implementation of H¨ubner et al. [6] requires Jasons internal actions.",
                "A requirement for implementing our approach is a reflective capability in the BDI agent implementation.",
                "Suitable implementations of the BDI formalism are JACK [2], Jadex [14], and SPARK [9].",
                "All three allow meta level methods that are cued by meta events such as goal adoption or plan failure, and offer introspective capabilities over goal and intention states.",
                "Such meta level facilities are also required by the approach of Unruh et al. [21], who define goal-based semantic compensation for an agent.",
                "Failure-handling goals are invoked according to failurehandling strategy rules, by a dedicated agent Failure Handling Component (FHC) that tracks task execution.",
                "These goals are specified by the agent programmer and attached to tasks, much like our FAb(P, PF , PA) construct associates failure and abort methods with a plan P. Note, however, that in contrast to both [6] and our semantics, [21] attach the failure-handling knowledge at the goal, not plan, level.",
                "Their failure-handling goals may consist of stabilization goals that perform localized, immediate clean-up to restore the agents state to a known, stable state, and compensation goals that perform undo actions.",
                "Compensation goals are triggered on aborting a goal, and so not necessarily on goal failure (i.e., if the FHC directs the agent to retry the failed goal and the retry is successful).",
                "The FHC approach is defined at the goal level in order to facilitate abstract specification of failure-handling knowledge; the FHC decides when to address a failure and what to do (i.e., what failurehandling goals to invoke), separating this knowledge from the how of implementing corrective actions (i.e., what plan to execute to meet the adopted failure-handling goal).",
                "This contrasts with simplistic plan-level failure handling in which the what and how are intermingled in domain task knowledge.",
                "While our approach is defined at the plan level, our extended BDI semantics provides for the separation of execution and failure handling.",
                "Further, the FHC explicitly maintains data structures to track agent execution.",
                "We leverage the existing execution structures and self-reflective ability of a BDI agent to accomplish both aborting and failure handling without additional overhead.",
                "FHCs failure-handling strategy rules (e.g., whether to retry a failed goal) are replaced by instructions in our PF and PA plans, together with meta-level default failure handlers according to the agents nature (e.g., blindly committed).",
                "The FHC approach is independent of the architecture of the agent itself, in contrast to our work that is dedicated to the BDI formalism (although not tied to any one agent system).",
                "Thus no formal semantics are developed in [21]; the FHCs operation is given as 14 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) a state-based protocol.",
                "This approach, together with state checkpointing, is used for multi-agent systems in [22].",
                "The resulting architecture embeds their failure handling approach within a pair processing architecture for agent crash recovery.",
                "Other work on multi-agent exception handling includes AOEXs distributed exception handling agents [5], and the similar sentinels of [8].",
                "In both cases, failure-handling logic and knowledge are decoupled from the agents; by contrast, while separating exception handling from domain-specific knowledge, Unruh et al.s FHC and our approach both retain failure-handling logic within an agent. 6.",
                "CONCLUSION AND FUTURE WORK The tasks and plans of an agent may not successfully reach completion, either by the choice of the agent to abort them (perhaps at the request of another agent to do so), or by unbidden factors that lead to failure.",
                "In this paper we have presented a procedure-based approach that incorporates aborting tasks and plans into the deliberation cycle of a BDI-style agent, thus providing a unified approach to failure and abort.",
                "Our primary contribution is an analysis of the requirements on the operation of the agent for aborting tasks and plans, and a corresponding operational semantics for aborting in the abstract agent language CAN.",
                "We are planning to implement an instance of our approach in the SPARK agent system [9]; in particular, the work of this paper will be the basis for SPARKs abort handling mechanism.",
                "We are also developing an analysis tool for our extended version of CAN as a basis for experimentation.",
                "An intelligent agent will not only gracefully handle unsuccessful tasks and plans, but also will deliberate over its cognitive attitudes to decide its next course of action.",
                "We have assumed the default behaviour of a BDI-style agent, according to its nature: for instance, to retry alternatives to a failed plan until one succeeds or until no alternative plans remain (in which case to fail the task).",
                "Future work is to place our approach in service of more dynamic agent reasoning, such as the introspection that an agent capable of reasoning over task interaction effects and resource requirements can accomplish [19, 12].",
                "Related to this is determining the cost of aborting a task or plan, and using this as an input to the deliberation process.",
                "This would in particular influence the commitment the agent has towards a particular task: the higher the cost, the greater the commitment.",
                "Our assumption that abort-methods do not fail, as discussed above, is a pragmatic one.",
                "However, this is an issue worthy of further exploration, either to develop weaker assumptions that are also practical, or to analyze conditions under which our assumption is realistic.",
                "A further item of interest is extending our approach to failure and abort to maintenance goals [1].",
                "For such goals a different operational semantics for abort is necessary than for achievement goals, to match the difference in semantics of the goals themselves.",
                "Acknowledgements We thank Lin Padgham and the anonymous reviewers for their comments.",
                "The first author acknowledges the support of the Australian Research Council and Agent Oriented Software under grant LP0453486.",
                "The work of the two authors at SRI International was supported by the Defense Advanced Research Projects Agency (DARPA) under Contract No.",
                "NBCHD030010.",
                "Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the view of DARPA or the Department of Interior-National Business Center. 7.",
                "REFERENCES [1] L. Braubach, A. Pokahr, D. Moldt, and W. Lamersdorf.",
                "Goal representation for BDI Agent systems.",
                "In Proc. of Second Intl.",
                "Workshop on Programming Multi-Agent Systems (ProMAS04), 2004. [2] P. Busetta, R. R¨onnquist, A. Hodgson, and A. Lucas.",
                "JACK intelligent agents - components for intelligent agents in Java.",
                "AgentLink News, Issue 2, 1999. [3] M. G. Chessell, C. Vines, D. Butler, C. M. Ferreira, and P. Henderson.",
                "Extending the concept of transaction compensation.",
                "IBM Systems Journal, 41(4), 2002. [4] M. Dastani, M. B. van Riemsdijk, and J.-J.",
                "C. Meyer.",
                "Goal types in agent programming.",
                "In Proc. of AAMAS06, 2006. [5] S. Entwisle, S. Loke, S. Krishnaswamy, and E. Kendall.",
                "Aoex: An agent-based exception handling framework for building reliable, distributed, open software systems.",
                "In Proc. of Seventh Joint Conf. on Knowledge-Based Software Engineering, 2006. [6] J. F. H¨ubner, R. H. Bordini, and M. Wooldridge.",
                "Programming declarative goals using plan patterns.",
                "In Proc. of 4th Intl.",
                "Workshop on Declarative Agent Languages and Technologies, 2006. [7] D. Kinny.",
                "The Psi calculus: an algebraic agent language.",
                "In Proc. of ATAL01, 2001. [8] M. Klein, J.",
                "A. Rodr´ıguez-Aguilar, and C. Dellarocas.",
                "Using domain-independent exception handling services to enable robust open multi-agent systems: The case of agent death.",
                "Autonomous Agents and Multi-Agent Systems, 7(1-2):179-189, 2003. [9] D. Morley and K. Myers.",
                "The SPARK agent framework.",
                "In Proc. of AAMAS04, 2004. [10] D. Morley, K. L. Myers, and N. Yorke-Smith.",
                "Continuous refinement of agent resource estimates.",
                "In Proc. of AAMAS06, 2006. [11] K. Myers, P. Berry, J. Blythe, K. Conley, M. Gervasio, D. McGuinness, D. Morley, A. Pfeffer, M. Pollack, and M. Tambe.",
                "An intelligent personal assistant for task and time management.",
                "AI Magazine, 28, 2007.",
                "To appear. [12] K. L. Myers and N. Yorke-Smith.",
                "A cognitive framework for delegation to an assistive user agent.",
                "In Proc. of AAAI 2005 Fall Symposium on Mixed-Initiative Problem-Solving Assistants, 2005. [13] L. Padgham and M. Winikoff.",
                "Developing Intelligent Agent Systems: A Practical Guide.",
                "John Wiley and Sons, 2004. [14] A. Pokahr, L. Braubach, and W. Lamersdorf.",
                "Jadex: A BDI reasoning engine.",
                "In R. Bordini, M. Dastani, J. Dix, and A. E. F. Seghrouchni, editors, Multi-Agent Programming.",
                "Springer, 2005. [15] A. S. Rao.",
                "AgentSpeak(L): BDI agents speak out in a logical computable language.",
                "In Proc. of Seventh European Workshop on Modelling Autonomous Agents in a Multi-Agent World, 1996. [16] A. S. Rao and M. P. Georgeff.",
                "An abstract architecture for rational agents.",
                "In Proc. of KR92, 1992. [17] S. Sardi˜na, L. de Silva, and L. Padgham.",
                "Hierarchical planning in BDI agent programming languages: a formal approach.",
                "In Proc. of AAMAS06, 2006. [18] S. Sardina and L. Padgham.",
                "Goals in the context of bdi plan failure and planning.",
                "In Proc. of AAMAS07, 2007. [19] J. Thangarajah, L. Padgham, and M. Winikoff.",
                "Detecting and exploiting positive goal interaction in intelligent agents.",
                "In Proc. of AAMAS03, 2003. [20] J. Thangarajah, M. Winikoff, L. Padgham, and K. Fischer.",
                "Avoiding resource conflicts in intelligent agents.",
                "In Proc. of ECAI-02, 2002. [21] A. Unruh, J. Bailey, and K. Ramamohanarao.",
                "A framework for goal-based semantic compensation in agent systems.",
                "In Proc. of First Intl.",
                "Workshop on Safety and Security in Multi-Agent Systems, 2004. [22] A. Unruh, H. Harjadi, J. Bailey, and K. Ramamohanarao.",
                "Semantic-compensation-based recovery management in multi-agent systems.",
                "In Proc. of Second IEEE Symposium on Multi-Agent Security and Survivability (IEEE MAS&S05), 2005. [23] M. Winikoff, L. Padgham, J. Harland, and J. Thangarajah.",
                "Declarative and procedural goals in intelligent agent systems.",
                "In Proc. of KR02, 2002.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 15"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        }
    }
}