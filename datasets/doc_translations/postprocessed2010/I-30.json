{
    "id": "I-30",
    "original_text": "Distributed Task Allocation in Social Networks Mathijs de Weerdt Delft Technical University Delft, The Netherlands M.M.deWeerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, The Netherlands Yingqian.Zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI) Amsterdam, The Netherlands tomas.klos@cwi.nl ABSTRACT This paper proposes a new variant of the task allocation problem, where the agents are connected in a social network and tasks arrive at the agents distributed over the network. We show that the complexity of this problem remains NPhard. Moreover, it is not approximable within some factor. We develop an algorithm based on the contract-net protocol. Our algorithm is completely distributed, and it assumes that agents have only local knowledge about tasks and resources. We conduct a set of experiments to evaluate the performance and scalability of the proposed algorithm in terms of solution quality and computation time. Three different types of networks, namely small-world, random and scale-free networks, are used to represent various social relationships among agents in realistic applications. The results demonstrate that our algorithm works well and that it scales well to large-scale applications. Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Experimentation 1. INTRODUCTION Recent years have seen a lot of work on task and resource allocation methods, which can potentially be applied to many real-world applications. However, some interesting applications where relations between agents play a role require a slightly more general model. Such situations appear very frequently in real-world scenarios, and recent technological developments are bringing more of them within the range of task allocation methods. Especially in business applications, preferential partner selection and interaction is very common, and this aspect becomes more important for task allocation research, to the extent that technological developments need to be able to support it. For example, the development of semantic web and grid technologies leads to increased and renewed attention for the potential of the web to support business processes [7, 15]. As an example, virtual organizations (VOs) are being re-invented in the context of the grid, where they are composed of a number of autonomous entities (representing different individuals, departments and organizations), each of which has a range of problem-solving capabilities and resources at its disposal [15, p. 237]. The question is how VOs are to be dynamically composed and re-composed from individual agents, when different tasks and subtasks need to be performed. This would be done by allocating them to different agents who may each be capable of performing different subsets of those tasks. Similarly, supply chain formation (SCF) is concerned with the, possibly ad-hoc, allocation of services to providers in the supply chain, in such a way that overall profit is optimized [6, 21]. Traditionally, such allocation decisions have been analyzed using transaction cost economics (TCE) [4], which takes the transaction between consecutive stages of development as its basic unit of analysis, and considers the firm and the market as alternative structural forms for organizing transactions. (Transaction cost) economics has traditionally built on analysis of comparative statics: the central problem of economic organization is considered to be the adaptation of organizational forms to the characteristics of transactions. More recently, TCEs founding father, Ronald Coase, acknowledged that this is too simplistic an approach [5, p. 245]: The analysis cannot be confined to what happens within a single firm. (. . . ) What we are dealing with is a complex interrelated structure. In this paper, we study the problem of task allocation from the perspective of such a complex interrelated structure. In particular, the market cannot be considered as an organizational form without considering specific partners to interact with on the market [11]. Specifically, therefore, we consider agents to be connected to each other in a social network. Furthermore, this network is not fully connected: as informed by the business literature, firms typically have established working relations with limited numbers of preferred partners [10]; these are the ones they consider when new tasks arrive and they have to form supply chains to allocate those tasks [19]. Other than modeling the interrelated 500 978-81-904262-7-5 (RPS) c 2007 IFAAMAS structure between business partners, the social network introduced in this paper can also be used to represent other types of connections or constraints among autonomous entities that arise from other application domains. The next section gives a formal description of the task allocation problem on social networks. In Section 3, we prove that the complexity of this problem remains NP-hard. We then proceed to develop a distributed algorithm in Section 4, and perform a series of experiments with this algorithm, as described in Section 5. Section 6 discusses related work, and Section 7 concludes. 2. PROBLEM DESCRIPTION We formulate the social task allocation problem in this section. There is a set A of agents: A = {a1, . . . , am}. Agents need resources to complete tasks. Let R = {r1, . . . , rk} denote the collection of the resource types available to the agents A. Each agent a ∈ A controls a fixed amount of resources for each resource type in R, which is defined by a resource function: rsc : A × R → N. Moreover, we assume agents are connected by a social network. Definition 1 (Social network). An agent social network SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ∈ AE indicates the existence of a social connection between agents ai and aj. Suppose a set of tasks T = {t1, t2, . . . , tn} arrives at such an agent social network. Each task t ∈ T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the utility gained if task t is accomplished, and the resource function rsc : T ×R → N specifies the amount of resources required for the accomplishment of task t. Furthermore, a location function loc : T → A defines the locations (i.e., agents) at which the tasks arrive in the social network. An agent a that is the location of a task t, i.e. loc(t) = a, is called the manager of this task. Each task t ∈ T needs some specific resources from the agents in order to complete the task. The exact assignment of tasks to agents is defined by a task allocation. Definition 2 (Task allocation). Given a set of tasks T = {t1, . . . , tn} and a set of agents A = {a1, . . . , am} in a social network SN, a task allocation is a mapping φ : T × A × R → N. A valid task allocation in SN must satisfy the following constrains: • A task allocation must be correct. Each agent a ∈ A cannot use more than its available resources, i.e. for each r ∈ R, P t∈T φ(t, a, r) ≤ rsc(a, r). • A task allocation must be complete. For each task t ∈ T , either all allocated agents resources are sufficient, i.e. for each r ∈ R, P a∈A φ(t, a, r) ≥ rsc(t, r), or t is not allocated, i.e. φ(t, ·, ·) = 0. • A task allocation must obey the social relationships. Each task t ∈ T can only be allocated to agents that are (direct) neighbors of agent loc(t) in the social network SN. Each such agent that can contribute to a task is called a contractor. We write Tφ to represent the tasks that are fully allocated in φ. The utility of φ is then the summation of the utilities of each task in Tφ, i.e., Uφ = P t∈Tφ u(t). Using this notation, we define the efficient task allocation below. Definition 3 (Efficient task allocation). We say a task allocation φ is efficient if it is valid and Uφ is maximized, i.e., Uφ = max( P t∈Tφ u(t)). We are now ready to define the task allocation problem in social network that we study in this paper. Definition 4 (Social task allocation problem). Given a set of agents A connected by a social network SN = (A, AE), and a finite set of tasks T , the social task allocation problem (or STAP for short) is the problem of finding the efficient task allocation φ, such that φ is valid and the social welfare Uφ is maximized. 3. COMPLEXITY RESULTS The traditional task allocation problem, TAP (without the condition of the social network SN), is NP-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set. Although we may consider the TAP as a special case of the STAP by assuming agents are fully connected, we cannot directly use the complexity results from the TAP, since we study the STAP in an arbitrary social network, which, as we argued in the introduction, should be partially connected. We now show that the TAP with an arbitrary social network is also NP-complete, even when the utility of each task is 1, and the quantity of all required and available resources is 1. Theorem 1. Given the social task allocation problem with an arbitrary social network, as defined in Definition 4, the problem of deciding whether a task allocation φ with utility more than k exists is NP-complete. Proof. We first show that the problem is in NP. Given an instance of the problem and an integer k, we can verify in polynomial time whether an allocation φ is a valid allocation and whether the utility of φ is greater than k. We now prove that the STAP is NP-hard by showing that MAXIMUM INDEPENDENT SET ≤P STAP. Given an undirected graph G = (V, E) and an integer k, we construct a network G = (V , E ) which has an efficient task allocation with k tasks of utility 1 allocated if and only if G has an independent set (IS) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 Figure 1: The MIS problem can be reduced to the STAP. The left figure is an undirected graph G, which has the optimal solution {v1, v4} or {v2, v3}; the right figure is the constructed instance of the STAP, where the optimal allocation is {t1, t4} or {t2, t3}. An instance of the following construction is shown in Figure 1. For each node v ∈ V and each edge e ∈ E in the graph G, we create a vertex agent av and an edge agent ae in G . The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 501 When v was incident to e in G we correspondingly add an edge e in G between av and ae. We assign each agent in G one resource, which is related to the node or the edge in the graph G, i.e., for each v ∈ V , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ E, rsc(ae) = {e}. Each vertex agent avi in G has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ E}. There is no task on the edge agents in G . We define utility 1 for each task, and the quantity of all required and available resources to be 1. Taken an instance of the IS problem, suppose there is a solution of size k, i.e., a subset N ⊆ V such that no two vertices in N are joined by an edge in E and |N| = k. N specifies a set of vertex agents AN in the corresponding graph G . Given two agents a1, a2 ∈ AN we now know that there is no edge agent ae connected to both a1 and a2. Thus, for each agent a ∈ AN , a assigns its task to the edge agents which are connected to a. All other vertex agents a /∈ AN are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ AN . The set of tasks of the agents AN (|AN | = k) is thus the maximum set of tasks that can be allocated. The utility of this allocation is k. Similarly, if there is a solution for the STAP with the utility value k, and the allocated task set is N, then for the IS problem, there exists a maximum independent set N of size k in G. An example can be found in Figure 1. We just proved that the STAP is NP-hard for an arbitrary graph. In our proof, the complexity comes from the introduction of a social network. One may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant. We now give a complexity result on this class of networks as follows. Theorem 2. Let the number of neighbors of each agent in the social network SN be bounded by Δ for Δ ≥ 3. Computing the efficient task allocation given such a network is NP-complete. In addition, it is not approximable within Δε for some ε > 0. Proof. It has been shown in [2] that the maximum independent set problem in the case of the degree bounded by Δ for Δ ≥ 3 is NP-complete and is not approximable within Δε for some ε > 0. Using the similar reduction from the proof of Theorem 1, this result also holds for the STAP. Since our problem is as hard as MIS as shown in Theorem 1, it is not possible to give a worst case bound better than Δε for any polynomial time algorithm, unless P = NP. 4. ALGORITHMS To deal with the problem of allocating tasks in a social network, we present a distributed algorithm. We introduce this algorithm by describing the protocol for the agents. After that we give the optimal, centralized algorithm and an upper bound algorithm, which we use in Section 5 to benchmark the quality of our distributed algorithm. 4.1 Protocol for distributed task allocation We can summarize the description of the task allocation problem in social networks from Section 2 as follows. We Algorithm 1 Greedy distributed allocation protocol (GDAP). Each manager a calculates the efficiency e(t) for each of their tasks t ∈ Ta, and then while Ta = ∅: 1. Each manager a selects the most efficient task t ∈ Ta such that for each task t ∈ Ta: e(t ) ≤ e(t). 2. Each manager a requests help for t from all its neighbors (of a) by informing these neighbors of the efficiency e(t) and the required resources for t. 3. Contractors receive and store all requests, and then offer all relevant resources to the manager for the task with the highest efficiency. 4. The managers that have received sufficient offers allocate their tasks, and inform each contractor which part of the offer is accepted. When a task is allocated, or when a manager has received offers from all neighbors, but still cannot satisfy its task, the task is removed from the task list Ta. 5. Contractors update their used resources. have a (social) network of agents. Each agent has a set of resources of different types at its disposal. We also have a set of tasks. Each task requires some resources, has a fixed benefit, and is located at a certain agent. This agent is called a manager. We only allow neighboring agents to help with a task. These agents are called contractors. Agents can fulfill the role of manager as well as contractor. The problem is to find out which tasks to execute, and which resources of which contractors to use for these tasks. The idea of the protocol is as follows. All manager agents a ∈ A try to find neighboring contractors to help them with their task(s) Ta = {ti ∈ T | loc(ti) = a}. They start with offering the task that is most efficient in terms of the ratio between benefit and required resources. Out of all tasks offered, contractors select the task with the highest efficiency, and send a bid to the related manager. A bid consists of all the resources the agent is able to supply for this task. If sufficient resources have been offered, the manager selects the required resources and informs all contractors of its choice. The efficiency of a task is defined as follows: Definition 5. The efficiency e of a task t ∈ T is defined by the utility of this task divided by the sum of all required resources: e(t) = u(t)P r∈R rsc(t,r) . A more detailed description of this protocol can be found in Algorithm 1. Here it is also defined how to determine when a task should not be offered anymore, because it is impossible to fulfill locally. Obviously, a task is also not offered anymore when it has been allocated. This protocol is such that, when no two tasks have exactly the same efficiency, in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the algorithm follows. Proposition 1. For a STAP with n tasks and m agents, the run time of the distributed algorithm is O(nm), and the number of communication messages is O(n2 m). 1 Even when some tasks have the same efficiency, it is straightforward to make this result work. For example, the implementation can ensure that the contractors choose the task with the lowest task-id. 502 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 2 Optimal social task allocation (OPT). Repeat the following for each combination of tasks: 1. If the total reward for this combination is higher than any previous combination, test if this combination is feasible as follows: 2. Create a network flow problem for each resource type r ∈ R (separately) as follows: (a) Create a source s and a sink s . (b) For each agent a ∈ A create an agent node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has. (c) For each task t ∈ T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires. (d) For each agent a connect the agent node to all task nodes of neighboring tasks, i.e., t ∈ {t ∈ T | (a, loc(t)) ∈ AE}. Give this connection unlimited capacity. 3. Solve the maximum flow problem for the created flow networks. If the maximum flow in each network is equal to the total required resources of that type, the current combination of tasks is feasible. In that case, this is the current best combination of tasks. Proof. In the worst case, in each iteration exactly one task is removed from a task list, so there are n iterations. In each iteration in the worst case (i.e., a fully connected network), for each of the O(n) managers, O(m) messages are sent. Next the task with the highest efficiency can be selected by each contractor in O(n). Assigning an allocation can be done in O(m). This leads to a total of O(n + m) operations for each iteration, and thus O(n2 + nm) operations in total. The number of messages sent is O(n(nm + nm + nm)) = O(n2 m). We establish the quality of this protocol experimentally (in Section 5). Preferably, we compare the results to the optimal solution. 4.2 Optimal social task allocation The optimal task allocation algorithm should deal with the restrictions posed by the social network. For this NPcomplete problem we used an exponential brute-force algorithm to consider relevant combinations of tasks to execute. For each combination we use a maximum-flow algorithm to check whether the resources are sufficient for the selected subset of tasks. The flow network describes which resources can be used for which tasks, depending on the social network. If the maximum flow is equal to the sum of all resources required by the subset of tasks, we know that a feasible solution exists (see Algorithm 2). Clearly, we cannot expect this optimal algorithm to be able to find solutions for larger problem sizes. To establish the quality of our protocol for large instances, we use the following method to determine an upper bound. 4.3 Upper bound for social task allocation Given a social task allocation problem, if the number of resource types for every task t ∈ T is bounded by 1, the Algorithm 3 An upper bound for social task allocation (UB). Create a network flow problem with costs as follows: 1. Create a source s and a sink s . 2. For each agent a ∈ A and each resource type ri ∈ R, create an agent-resource node ai, and an edge from s to this node with capacity equal to the amount of resources of type r agent a has available and with costs 0. 3. For each task t ∈ T and each resource type ri ∈ R, create a task-resource node ti, and an edge from this node to s with capacity equal to the amount of resources of type r task t requires and costs −e(t). 4. For each resource type ri ∈ R and for each agent a connect the agent-resource node ai to all task-resource nodes ti for neighboring tasks t ∈ {t ∈ T | (a, loc(t)) ∈ AE or a = loc(t)}. Give this connection unlimited capacity and zero costs. 5. Create an edge directly from s to s with unlimited capacity and zero costs. Solve the minimum cost flow network problem for this network. The costs of the resulting network is an upper bound for the social task allocation problem. problem is polynomially solvable by transforming it to a flow network problem. Our method for efficiently calculating an upper bound for STAP makes use of this special case by converting any given STAP instance P into a new problem P where each task only has one resource type. More specifically, for every task t ∈ T with utility u(t), we do the following. Let m be the number of resource types {r1, . . . , rm} required by t. We then split t into a set of m tasks T = {t1, . . . , tm} where each task ti only has one unique resource type (of {r1, . . . , rm}) and each task has a fair share of the utility, i.e., the efficiency of t from Definition 5 times the amount of this resource type rsc(ti, ri). After polynomially performing this conversion for every task in T , the original problem P becomes the special case P . Note that the set of valid allocations in P is only a subset of the set of valid allocations in P , because it is now possible to partially allocate a task. From this it is easy to see that the solution of P gives an upper bound of the solution of the original problem P. To compute the optimal solution for P , we transform it to a minimum cost flow problem. We model the cost in the flow network by the negation of the new tasks utility. A polynomial-time implementation of a scaling minimum cost flow algorithm [9] is used for the computation. The resulting minimum cost flow represents a maximum allocation of the tasks for P . The detailed modeling is described in Algorithm 3. In the next section, we use this upper bound to estimate the quality of the GDAP for large-scale instances. 5. EXPERIMENTS We implemented the greedy distributed allocation protocol (GDAP), the optimal allocation algorithm (OPT), and the upper bound algorithm (UB) in Java, and tested them on a Linux PC. The purpose of these experiments is to study the performance of the distributed algorithm in different problem settings using different social networks. The perThe Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 2: The solution qualities of the GDAP and the upper bound depend on the resource ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 Numberofagents Degree small-world random scale-free Figure 3: The histogram of the degrees. formance measurements are the solution quality and computation time, where the solution quality (SQ) is computed as follows. When the number of tasks is small, we compare the output of the distributed algorithm with the optimal solution, i.e., SQ = GDAP OP T , but if it is not feasible to compute the optimal solution, we use the value returned by the upper bound algorithm for evaluation, i.e., SQ = GDAP UB . To see whether the latter is a good measure, we also compare the quality of the upper bound to the optimal solution for smaller problems. In the following, we describe the setup of all experiments, and present the results. 5.1 Experimental settings We consider several experimental environments. In all environments the agents are connected by a social network. In the experiments, three different networks are used to simulate the social relationships among agents in potential realworld problems. Small-world networks are networks where most neighbors of an agent are also connected to each other. For the experiments we use a method for generating random small-world networks proposed by Watts et al. [22], with a fixed rewiring probability p = 0.05. Scale-free networks have the property that a couple of nodes have many connections, and many nodes have only a small number of connections. To generate these we use the implementation in the JUNG library of the generator proposed by Barab´asi and Albert [3]. We also generate random networks as follows. First we connect each agent to another agent such that all agents are connected. Next, we randomly add connections until the desired average degree has been reached. We now describe the different settings used in our experiments with both small and large-scale problems. Setting 1. The number of agents is 40, and the number of tasks is 20. The number of different resource types is bounded by 5, and the average number of resources required by a task is 30. Consequently, the total number of resources required by the tasks is fixed. However, the resources available to the agents are varied. We define the resource ratio to refer to the ratio between the total number of available resources and the total number of required resources. Resources are allocated uniformly to the agents. The average degrees of the networks may also change. In this setting the task benefits are distributed normally around the number of resources required. Setting 2. This setting is similar to Setting 1, but here we let the benefits of the tasks vary dramatically-40% of the tasks have around 10 times higher benefit than the other 60% of the tasks. Setting 3. This setting is for large-scale problems. The ratio between the number of agents and the number of tasks is set to 5/3, and the number of agents varies from 100 to 2000. We also fix the resource ratio to 1.2 and the average degree to 6. The number of different resource types is 20, and the average resource requirement of a tasks is 100. The task benefits are again normally distributed. 5.2 Experimental results The experiments are done with the three different settings in the three different networks mentioned before, where each recorded data is the average over 20 random instances. 5.2.1 Experiment 1 Experimental setting 1 is used for this set of experiments. We would like to see how the GDAP behaves in the different networks when the number of resources available to the agents is changing. We also study the behavior of our upper bound algorithm. For this experiment we fix the average number of neighbors (degree) in each network type to six. In Figure 2 we see how the quality of both the upper bound and the GDAP algorithm depends on the resource ratio. Remarkably, for lower resource ratios our GDAP is much closer to the optimal allocation than the upper bound. When the resource ratio grows above 1.5, the graphs of the upper bound and the GDAP converge, meaning that both are really close to the optimal solution. This can be explained by the fact that when plenty of resources are available, all tasks can be allocated without any conflicts. However, when resources are very scarce, the upper bound is much too optimistic, because it is based on the allocation of sub-tasks per resource type, and does not reason about how many of the tasks can actually be allocated completely. We also notice from the graph that the solution quality of the GDAP on all three networks is quite high (over 0.8) when the available resource is very limited (0.3). It drops below 0.8 with the increased ratio and goes up again once there are plenty of resources available (resource ratio 0.9). Clearly, if 504 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 4: The quality of the GDAP and the upper bound depend on the network degree. resources are really scarce, only a few tasks can be successfully allocated even by the optimal algorithm. Therefore, the GDAP is able to give quite a good allocation. Although the differences are minor, it can also be seen that the results for the small-world network are consistently slightly better than those of random networks, which in turn outperform scale-free networks. This can be understood by looking at the distribution of the agents degree, as shown in Figure 3. In this experiment, in the small-world network almost every manager has a degree of six. In random networks, the degree varies between one and about ten. However, in the scale-free network, most nodes have only three or four connections, and only a very few have up to twenty connections. As we will see in the next experiment, having more connections means getting better results. For the next experiment we fix the resource ratio to 1.0 and study the quality of both the upper bound and the GDAP algorithm related to the degree of the social network. The result can be found in Figure 4. In this figure we can see that a high average degree also leads to convergence of the upper bound and the GDAP. Obviously, when managers have many connections, it becomes easier to allocate tasks. An exception is, similar to what we have seen in Figure 2, that the solution of the GDAP is also very good if the connections are extremely limited (degree 2), due to the fact that the number of possibly allocated tasks is very small. Again we see that the upper bound is not that good for problems where resources are hard to reach, i.e. in social networks with a low average degree.2 Since the solution quality clearly depends on the resource ratio as well as on the degree of the social network, we study the effect of changing both, to see whether they influence each other. Figure 5 shows how the solution quality depends on both the resource ratio and the network degree. This graph confirms the results that the GDAP performs better for problems with higher degree and higher resource ratio. However, it is now also more clear that it performs better for very low degree and resource availability. For this experiment with 40 agents and 20 tasks, the worst performance is met for instances with degree six and resource ratio 0.6 to instances with degree twelve and resource ratio 0.3. But even for those instances, the performance lies above 0.7. 2 The consistent standard deviation of about 15% over the 20 problem instances is not displayed as error-bars in these first graphs, because it would obfuscate the interesting correlations that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Relative reward small-world Average degree Resource ratio Relative reward Figure 5: The quality of the GDAP depends on both the resource ratio and the network degree. 5.2.2 Experiment 2 To study the robustness of the GDAP against different problem settings, we generate instances where the task benefit distribution is different: 40% of the tasks gets a 10 times higher benefit (as described in Setting 2). The effect of this different distribution can be seen in Figure 6. These two graphs show that the results for the skewed task benefit distribution are slightly better on average, both when varying the resource ratio, and when varying the average degree of the network. We argue that this can be explained by the greedy nature of GDAP, which causes the tasks with high efficiency to be allocated first, and makes the algorithm perform better in this heterogeneous setting. 5.2.3 Experiment 3 The purpose of this final experiment is to test whether the algorithm can be scaled to large problems, like applications running on the internet. We therefore generate instances where the number of agents varies from 100 to 2000, and simultaneously increase the number of tasks from 166 to 3333 (Setting 3). Figure 7 shows the run time for these instances on a Linux machine with an AMD Opteron 2.4 GHz processor. These graphs confirm the theoretical analysis from the previous section, saying that both the upper bound and the GDAP are polynomial. In fact, the graphs show that the GDAP almost behaves linearly. Here we see that the locality of the GDAP really helps in reducing the computation time. Also note that the GDAP requires even less computation time than the upper bound. The quality of the GDAP for these large instances cannot be compared to the optimal solution. Therefore, in Figure 8 the upper bound is used instead. This result shows that the GDAP behaves stably and consistently well with the increasing problem size. It also shows once more that the GDAP performs better in a small-world network. 6. RELATED WORK Task allocation in multiagent systems has been investigated by many researchers in recent years with different assumptions and emphases. However, most of the research to date on task allocation does not consider social connections among agents, and studies the problem in a centralized The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free Figure 6: The quality of the GDAP algorithm for a uniform and a skewed task benefit distribution related to the resource ratio (the first graph), and the network degree (the second graph). setting. For example, Kraus et al. [12] develop an auction protocol that enables agents to form coalitions with time constraints. It assumes each agent knows the capabilities of all others. The proposed protocol is centralized, where one manager is responsible for allocating the tasks to all coalitions. Manisterski at al. [14] discuss the possibilities of achieving efficient allocations in both cooperative and noncooperative settings. They propose a centralized algorithm to find the optimal solution. In contrast to this work, we introduce also an efficient completely distributed protocol that takes the social network into account. Task allocation has also been studied in distributed settings by for example Shehory and Kraus [18] and by Lerman and Shehory [13]. They propose distributed algorithms with low communication complexity for forming coalitions in large-scale multiagent systems. However, they do not assume the existence of any agent network. The work of Sander et al. [16] introduces computational geometry-based algorithms for distributed task allocation in geographical domains. Agents are then allowed to move and actively search for tasks, and the capability of agents to perform tasks is homogeneous. In order to apply their approach, agents need to have some knowledge about the geographical positions of tasks and some other agents. Other work [17] proposes a location mechanism for open multiagent systems to allocate tasks to unknown agents. In this approach each agent caches a list of agents they know. The analysis of the communication complexity of this method is based on lattice-like graphs, while we investigate how to efficiently solve task allocation in a social network, whose topology can be arbitrary. Networks have been employed in the context of task allocation in some other works as well, for example to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time(ms) Agents upper bound - small-world upper bound - random upper bound - scale-free GDAP - small-world GDAP - random GDAP - scale-free Figure 7: The run time of the GDAP algorithm. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Rewardrelativetoupperbound Agents small-world random scale-free Figure 8: The quality of the GDAP algorithm compared to the upper bound. interactions between agents and mediators [1]. Mediators in this context are agents who receive the task and have connections to other agents. They break up the task into subtasks, and negotiate with other agents to obtain commitments to execute these subtasks. Their focus is on modeling the decision process of just a single mediator. Another approach is to partition the network into cliques of nodes, representing coalitions which the agents involved may use as a coordination mechanism [20]. The focus of that work is distributed coalition formation among agents, but in our approach, we do not need agents to form groups before allocating tasks. Easwaran and Pitt [6] study complex tasks that require services for their accomplishment. The problem concerns the allocation of subtasks to service providers in a supply chain. Another study of task allocation in supply chains is [21], where it is argued that the defining characteristic of Supply Chain Formation is hierarchical subtask decomposition (HSD). HSD is implemented using task dependency networks (TDN), with agents and goods as nodes, and I/O relations between them as edges. Here, the network is given, and the problem is to select a subgraph, for which the authors propose a market-based algorithm, in particular, a series of auctions. Compared to these works, our approach is more general in the sense that we are able to model different types of connections or constraints among agents for different problem domains in addition to supply chain formation. Finally, social networks have been used in the context of team formation. Previous work has shown how to learn which relations are more beneficial in the long run [8], and adapt the social network accordingly. We believe these results can be transferred to the domain of task allocation as well, leaving this as a topic for further study. 506 The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 7. CONCLUSIONS In this paper we studied the task allocation problem in a social network (STAP), which can be seen as a new, more general, variant of the TAP. We believe it has a great amount of potential for realistic problems. We provided complexity results on computing the efficient solution for the STAP, as well as a bound on possible approximation algorithms. Next, we presented a distributed protocol, related to the contractnet protocol. We also introduced an exponential algorithm to compute the optimal solution, as well as a fast upperbound algorithm. Finally, we used the optimal solution and the upper-bound (for larger instances) to conduct an extensive set of experiments to assess the solution quality and the computational efficiency of the proposed distributed algorithm in different types of networks, namely, small-world networks, random networks, and scale-free networks. The results presented in this paper show that the distributed algorithm performs well in small-world, scale-free, and random networks, and for many different settings. Also other experiments were done (e.g. on grid networks) and these results held up over a wider range of scenarios. Furthermore, we showed that it scales well to large networks, both in terms of quality and of required computation time. The results also suggest that small-world networks are slightly better suited for local task allocation, because there are no nodes with very few neighbors. There are many interesting extensions to our current work. In this paper, we focus on the computational aspect in the design of the distributed algorithm. In our future work, we would also like to address some of the related issues in game theory, such as strategic agents, and show desirable properties of a distributed protocol in such a context. In the current algorithm we assume that agents can only contact their neighbors to request resources, which may explain why our algorithm performs not as good in the scalefree networks as in the small-world networks. Our future work may allow agents to reallocate (sub)tasks. We are interested in seeing how such interactions will affect the performance of task allocation in different social networks. A third interesting topic for further work is the addition of reputation information among the agents. This may help to model changing business relations and incentivize agents to follow the protocol. Finally, it would be interesting to study real-life instances of the social task allocation problem, and see how they relate to the randomly generated networks of different types studied in this paper. Acknowledgments. This work is supported by the Technology Foundation STW, applied science division of NWO, and the Ministry of Economic Affairs. 8. REFERENCES [1] S. Abdallah and V. Lesser. Modeling Task Allocation Using a Decision Theoretic Model. In Proc. AAMAS, pages 719-726. ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson, and D. Zuckerman. Derandomized Graph Products. Computational Complexity, 5(1):60-75, 1995. [3] A.-L. Barab´asi and R. Albert. Emergence of scaling in random networks. Science, 286(5439):509-512, 1999. [4] R. H. Coase. The Nature of the Firm. Economica NS, 4(16):386-405, 1937. [5] R. H. Coase. My Evolution as an Economist. In W. Breit and R. W. Spencer, editors, Lives of the Laureates, pages 227-249. MIT Press, 1995. [6] A. M. Easwaran and J. Pitt. Supply Chain Formation in Open, Market-Based Multi-Agent Systems. International J. of Computational Intelligence and Applications, 2(3):349-363, 2002. [7] I. Foster, N. R. Jennings, and C. Kesselman. Brain Meets Brawn: Why Grid and Agents Need Each Other. In Proc. AAMAS, pages 8-15, Washington, DC, USA, 2004. IEEE Computer Society. [8] M. E. Gaston and M. desJardins. Agent-organized networks for dynamic team formation. In Proc. AAMAS, pages 230-237, New York, NY, USA, 2005. ACM Press. [9] A. Goldberg. An Efficient Implementation of a Scaling Minimum-Cost Flow Algorithm. J. of Algorithms, 22:1-29, 1997. [10] R. Gulati. Does Familiarity Breed Trust? The Implications of Repeated Ties for Contractual Choice in Alliances. Academy of Management Journal, 38(1):85-112, 1995. [11] T. Klos and B. Nooteboom. Agent-based Computational Transaction Cost Economics. Economic Dynamics and Control, 25(3-4):503-526, 01. [12] S. Kraus, O. Shehory, and G. Taase. Coalition formation with uncertain heterogeneous information. In Proc. AAMAS, pages 1-8. ACM, 2003. [13] K. Lerman and O. Shehory. Coalition formation for large-scale electronic markets. In Proc. ICMAS, pages 167-174. IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus, and N. Jennings. Forming Efficient Agent Groups for Completing Complex Tasks. In Proc. AAMAS, pages 257-264. ACM, 2006. [15] J. Patel et al. Agent-Based Virtual Organizations for the Grid. Multi-Agent and Grid Systems, 1(4):237-249, 2005. [16] P. V. Sander, D. Peleshchuk, and B. J. Grosz. A scalable, distributed algorithm for efficient task allocation. In Proc. AAMAS, pages 1191-1198, New York, NY, USA, 2002. ACM Press. [17] O. Shehory. A scalable agent location mechanism. In Proc. ATAL, volume 1757 of LNCS, pages 162-172. Springer, 2000. [18] O. Shehory and S. Kraus. Methods for Task Allocation via Agent Coalition Formation. Artificial Intelligence, 101(1-2):165-200, 1998. [19] R. M. Sreenath and M. P. Singh. Agent-based service selection. Web Semantics, 1(3):261-279, 2004. [20] P. T. Toˇsi´c and G. A. Agha. Maximal Clique Based Distributed Coalition Formation for Task Allocation in Large-Scale Multi-Agent Systems. In Proc. MMAS, volume 3446 of LNAI, pages 104-120. Springer, 2005. [21] W. E. Walsh and M. P. Wellman. Modeling Supply Chain Formation in Multiagent Systems. In Proc. AMEC II, volume 1788 of LNAI, pages 94-101. Springer, 2000. [22] D. J. Watts and S. H. Strogatz. Collective dynamics of small world networks. Nature, 393:440-442, 1998. The Sixth Intl. Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 507",
    "original_translation": "Asignación de tareas distribuidas en las redes sociales Mathijs de Weerdt Delft Technical University Delft, Países Bajos M.M.Deweerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, Países Bajos Yingqian.zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI)), Países Bajos tomas.klos@cwi.nl Resumen Este documento propone una nueva variante del problema de asignación de tareas, donde los agentes están conectados en una red social y las tareas llegan a los agentes distribuidos a través de la red. Mostramos que la complejidad de este problema sigue siendo Nphard. Por otra parte, no se approximable dentro de algún factor. Desarrollamos un algoritmo basado en el protocolo de red de contrato. Nuestro algoritmo está completamente distribuido, y supone que los agentes solo tienen conocimiento local sobre tareas y recursos. Realizamos un conjunto de experimentos para evaluar el rendimiento y la escalabilidad del algoritmo propuesto en términos de calidad de solución y tiempo de cálculo. Se utilizan tres tipos diferentes de redes, a saber, las redes de pequeños mundos, aleatorios y sin escala, para representar diversas relaciones sociales entre agentes en aplicaciones realistas. Los resultados demuestran que nuestro algoritmo funciona bien y que escala bien a aplicaciones a gran escala. Categorías y descriptores de sujetos I.2.11 [Inteligencia artificial distribuida]: Sistemas multiagentes Algoritmos de términos generales, Experimentación 1. Introducción Los últimos años han visto mucho trabajo en métodos de asignación de tareas y recursos, que potencialmente pueden aplicarse a muchas aplicaciones del mundo real. Sin embargo, algunas aplicaciones interesantes en las que las relaciones entre los agentes juegan un papel requieren un modelo un poco más general. Tales situaciones aparecen con mucha frecuencia en los escenarios del mundo real, y los desarrollos tecnológicos recientes están trayendo más de ellas dentro del rango de métodos de asignación de tareas. Especialmente en las aplicaciones comerciales, la selección e interacción preferenciales de los socios es muy común, y este aspecto se vuelve más importante para la investigación de asignación de tareas, en la medida en que los desarrollos tecnológicos deben poder respaldarlo. Por ejemplo, el desarrollo de tecnologías semánticas de la web y la red conduce a una atención mayor y renovada para el potencial de la web para apoyar los procesos comerciales [7, 15]. Como ejemplo, las organizaciones virtuales (VO) se están reinventando en el contexto de la red, donde están compuestas por una serie de entidades autónomas (que representan diferentes individuos, departamentos y organizaciones), cada una de las cuales tiene una variedad de problemas.Resolver capacidades y recursos a su disposición [15, p.237]. La pregunta es cómo los VO deben ser compuestos y compuestos dinámicamente de agentes individuales, cuando se deben realizar diferentes tareas y subtareas. Esto se haría asignándolos a diferentes agentes que pueden ser capaces de realizar diferentes subconjuntos de esas tareas. Del mismo modo, la formación de la cadena de suministro (SCF) se ocupa de la asignación, posiblemente ad-hoc, de los servicios a los proveedores en la cadena de suministro, de tal manera que se optimiza las ganancias generales [6, 21]. Tradicionalmente, tales decisiones de asignación se han analizado utilizando la economía de costos de transacción (TCE) [4], que toma la transacción entre las etapas consecutivas de desarrollo como su unidad básica de análisis, y considera la empresa y el mercado como formas estructurales alternativas para organizar transacciones.(Costo de transacción) La economía se ha basado tradicionalmente en el análisis de las estadísticas comparativas: el problema central de la organización económica se considera la adaptación de las formas organizacionales a las características de las transacciones. Más recientemente, el padre fundador de TCE, Ronald Coase, reconoció que este es un enfoque demasiado simplista [5, p.245]: El análisis no puede limitarse a lo que sucede dentro de una sola empresa.(...) Lo que estamos tratando es una estructura compleja interrelacionada. En este artículo, estudiamos el problema de la asignación de tareas desde la perspectiva de una estructura interrelacionada tan compleja. En particular, el mercado no puede considerarse como una forma organizativa sin considerar socios específicos para interactuar en el mercado [11]. Específicamente, por lo tanto, consideramos que los agentes están conectados entre sí en una red social. Además, esta red no está completamente conectada: según lo informado por la literatura empresarial, las empresas generalmente han establecido relaciones laborales con números limitados de socios preferidos [10];Estos son los que consideran cuando llegan nuevas tareas y tienen que formar cadenas de suministro para asignar esas tareas [19]. Además de modelar la interrelada 500 978-81-904262-7-5 (RPS) c 2007 Ifaamas Structure entre socios comerciales, la red social introducida en este documento también se puede utilizar para representar otros tipos de conexiones o restricciones entre las entidades autónomas que surgende otros dominios de aplicación. La siguiente sección ofrece una descripción formal del problema de asignación de tareas en las redes sociales. En la Sección 3, demostramos que la complejidad de este problema sigue siendo NP-Hard. Luego procedemos a desarrollar un algoritmo distribuido en la Sección 4, y realizamos una serie de experimentos con este algoritmo, como se describe en la Sección 5. La Sección 6 discute el trabajo relacionado y la Sección 7 concluye.2. Descripción del problema Formulamos el problema de asignación de tareas sociales en esta sección. Hay un conjunto A de agentes: a = {a1 ,..., soy}. Los agentes necesitan recursos para completar las tareas. Sea r = {r1 ,..., rk} denota la recopilación de los tipos de recursos disponibles para los agentes A. Cada agente A ∈ A controla una cantidad fija de recursos para cada tipo de recurso en R, que se define por una función de recursos: RSC: A × R → N. Además, suponemos que los agentes están conectados por una red social. Definición 1 (red social). Una red social del agente Sn = (A, AE) es un gráfico no dirigido, donde los vértices A son agentes, y cada borde (AI, AJ) ∈ Ae indica la existencia de una conexión social entre los agentes AI y AJ. Suponga un conjunto de tareas t = {t1, t2 ,..., TN} llega a una red social de este agente. Cada tarea t ∈ T se define por una tupla u (t), rsc (t), loc (t), donde u (t) es la utilidad obtenida si se logra la tarea t, y la función de recursos rsc: t × r→ N Especifica la cantidad de recursos necesarios para el logro de la tarea t.Además, una función de ubicación LOC: T → A define las ubicaciones (es decir, agentes) en las que las tareas llegan a la red social. Un agente A que es la ubicación de una tarea t, es decir, loc (t) = a, se llama administrador de esta tarea. Cada tarea t ∈ T necesita algunos recursos específicos de los agentes para completar la tarea. La asignación exacta de tareas a los agentes se define mediante una asignación de tareas. Definición 2 (asignación de tareas). Dado un conjunto de tareas t = {t1 ,..., tn} y un conjunto de agentes a = {a1 ,..., AM} En una red social Sn, una asignación de tareas es un mapeo φ: T × A × R → N. Una asignación de tareas válida en SN debe satisfacer las siguientes restricciones: • Una asignación de tareas debe ser correcta. Cada agente a ∈ A no puede usar más que sus recursos disponibles, es decir, para cada r ∈ R, p t∈T φ (t, a, r) ≤ rsc (a, r).• Una asignación de tareas debe estar completa. Para cada tarea t ∈ T, todos los recursos de los agentes asignados son suficientes, es decir, para cada r ∈ R, p a∈A φ (t, a, r) ≥ rsc (t, r), o t no se asigna, es decir, φ φ(t, ·, ·) = 0. • Una asignación de tareas debe obedecer las relaciones sociales. Cada tarea t ∈ T solo puede asignarse a los agentes que son vecinos (directos) de agente loc (t) en la red social Sn. Cada agente que puede contribuir a una tarea se denomina contratista. Escribimos Tφ para representar las tareas que están completamente asignadas en φ. La utilidad de φ es entonces la suma de las utilidades de cada tarea en tφ, es decir, uφ = p t∈Tφ u (t). Usando esta notación, definimos la asignación de tareas eficiente a continuación. Definición 3 (asignación de tareas eficientes). Decimos que una asignación de tareas φ es eficiente si es válida y Uφ se maximiza, es decir, uφ = max (p t∈Tφ u (t)). Ahora estamos listos para definir el problema de asignación de tareas en la red social que estudiamos en este documento. Definición 4 (problema de asignación de tareas sociales). Dado un conjunto de agentes un conectado por una red social sn = (a, ae), y un conjunto finito de tareas t, el problema de asignación de tareas sociales (o estabilizador para abreviar) es el problema de encontrar la asignación de tareas eficiente φ, comoque φ es válido y el bienestar social Uφ se maximiza.3. Resultados de la complejidad El problema de asignación de tareas tradicional, Toque (sin la condición de la red social SN), es NP-Completo [18], y la complejidad proviene del hecho de que necesitamos evaluar el número exponencial de subconjuntos del conjunto de tareas. Aunque podemos considerar el grifo como un caso especial del STAP al suponer que los agentes están completamente conectados, no podemos usar directamente los resultados de la complejidad del TAP, ya que estudiamos el STAP en una red social arbitraria, que, como argumentamos en la introducción., debe estar parcialmente conectado. Ahora mostramos que el TAP con una red social arbitraria también es NP complete, incluso cuando la utilidad de cada tarea es 1, y la cantidad de todos los recursos requeridos y disponibles es 1. Teorema 1. Dado el problema de asignación de tareas sociales con una red social arbitraria, como se define en la definición 4, el problema de decidir si una asignación de tareas φ con utilidad más de K existe es completar NP. Prueba. Primero mostramos que el problema está en NP. Dada una instancia del problema y un entero K, podemos verificar en tiempo polinomial si una asignación φ es una asignación válida y si la utilidad de φ es mayor que k.Ahora demostramos que el STAP es NP-HARD al mostrar que el conjunto máximo independiente ≤p STAP. Dado un gráfico no dirigido g = (v, e) y un entero k, construimos una red g = (v, e) que tiene una asignación de tareas eficiente con k tareas de utilidad 1 asignada si y solo si G tiene un conjunto independiente (Es) de tamaño k.av1 av3 ae3 rsc (ae1) = {e1} rsc (ae4) = {e4} av4 ae2 av2 ae4 ae1 rsc (ae2) = {e2} {e3} rsc (av3) = {v3} rsc (av4) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc (ae3) = rsc (av1) = {v1} rsc (av2) = {v2} t3 = {v3, e3, e4} t4= {V4, E2, E4} E1 E2 E4 E3 V1 V2 V4V3 Figura 1: El problema MIS puede reducirse a la STAP. La figura izquierda es un gráfico no dirigido G, que tiene la solución óptima {v1, v4} o {v2, v3};La figura correcta es la instancia construida de la STAP, donde la asignación óptima es {t1, t4} o {t2, t3}. Una instancia de la siguiente construcción se muestra en la Figura 1. Para cada nodo v ∈ V y cada borde e ∈ E en el gráfico G, creamos un agente de vértice AV y un agente de borde AE en g. El sexto intl. Conf.En agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 501 Cuando V incidió a E en G, agregamos correspondientemente un borde E en G entre AV y AE. Asignamos a cada agente en un recurso G, que está relacionado con el nodo o el borde en el gráfico G, es decir, para cada v ∈ V, RSC (av) = {V} (aquí escribimos RSC (a) y RSC ((t) para representar el conjunto de recursos disponibles para/requerido por A y T), y para cada e ∈ E, rsc (ae) = {e}. Cada agente de vértice avi en g tiene una tarea TI que requiere un conjunto de recursos vecinos ti = {vi} ∪ {e | e = (u, vi) ∈ E}. No hay tarea en los agentes de borde en g. Definimos la utilidad 1 para cada tarea, y la cantidad de todos los recursos requeridos y disponibles para ser 1. Tomado una instancia del problema de IS, suponga que hay una solución de tamaño K, es decir, un subconjunto n ⊆ V tal que no se unan dos vértices en n un borde en E y | n |= k.N especifica un conjunto de agentes de vértice y en el gráfico correspondiente g. Dados dos agentes A1, A2 ∈ An, ahora sabemos que no hay un agente de borde AE conectado a A1 y A2. Por lo tanto, para cada agente a ∈ An, A asigna su tarea a los agentes de borde que están conectados a a. Todos los demás agentes de vértice A /∈ An no pueden asignar sus tareas, ya que los recursos requeridos de los agentes de borde ya son utilizados por los agentes A ∈ An. El conjunto de tareas de los agentes y (| an | = k) es, por lo tanto, el conjunto máximo de tareas que se pueden asignar. La utilidad de esta asignación es k.Del mismo modo, si hay una solución para el STAP con el valor de utilidad K, y el conjunto de tareas asignados es n, entonces para el problema es, existe un conjunto independiente máximo de N de tamaño K en G. Se puede encontrar un ejemplo en la figura1. Acabamos de demostrar que el STAP es NP-Hard para un gráfico arbitrario. En nuestra prueba, la complejidad proviene de la introducción de una red social. Uno puede esperar que la complejidad de este problema pueda reducirse para algunas redes donde el número de vecinos de los agentes está limitado por una constante fija. Ahora damos un resultado de complejidad en esta clase de redes de la siguiente manera. Teorema 2. Deje que el número de vecinos de cada agente en la red social SN esté limitado por δ para δ ≥ 3. Calcular la asignación de tareas eficiente dada dicha red es NP-Complete. Además, no es aproximado dentro de Δε para algunos ε> 0. Prueba. Se ha demostrado en [2] que el problema de conjunto independiente máximo en el caso del grado limitado por δ para δ ≥ 3 es NP-completado y no es aproximado dentro de δε para algunos ε> 0. Utilizando la reducción similar de la prueba del teorema 1, este resultado también es válido para el STAP. Dado que nuestro problema es tan difícil como se muestra en el Teorema 1, no es posible dar el peor de los casos mejor que Δε para cualquier algoritmo de tiempo polinomial, a menos que P = NP.4. Algoritmos Para lidiar con el problema de asignar tareas en una red social, presentamos un algoritmo distribuido. Presentamos este algoritmo describiendo el protocolo para los agentes. Después de eso, damos el algoritmo óptimo y centralizado y un algoritmo de límite superior, que utilizamos en la Sección 5 para comparar la calidad de nuestro algoritmo distribuido.4.1 Protocolo para la asignación de tareas distribuidas Podemos resumir la descripción del problema de asignación de tareas en las redes sociales de la Sección 2 de la siguiente manera. Algoritmo 1 Protocolo de asignación distribuida codiciosa (GDAP). Cada gerente A calcula la eficiencia E (t) para cada una de sus tareas t ∈ Ta, y luego mientras ta = ∅: 1. Cada administrador A selecciona la tarea más eficiente t ∈ Ta tal que para cada tarea t ∈ Ta: e (t) ≤ e (t).2. Cada gerente A solicita ayuda para T de todos sus vecinos (de a) informando a estos vecinos sobre la eficiencia E (t) y los recursos requeridos para t.3. Los contratistas reciben y almacenan todas las solicitudes, y luego ofrecen todos los recursos relevantes al Gerente para la tarea con la más alta eficiencia.4. Los gerentes que han recibido ofertas suficientes asignan sus tareas e informan a cada contratista qué parte de la oferta es aceptada. Cuando se asigna una tarea, o cuando un gerente ha recibido ofertas de todos los vecinos, pero aún no puede satisfacer su tarea, la tarea se elimina de la lista de tareas TA.5. Los contratistas actualizan sus recursos usados.tener una red (social) de agentes. Cada agente tiene un conjunto de recursos de diferentes tipos a su disposición. También tenemos un conjunto de tareas. Cada tarea requiere algunos recursos, tiene un beneficio fijo y se encuentra en cierto agente. Este agente se llama gerente. Solo permitimos que los agentes vecinos ayuden con una tarea. Estos agentes se llaman contratistas. Los agentes pueden cumplir el papel de gerente y contratista. El problema es averiguar qué tareas ejecutar y qué recursos de qué contratistas usar para estas tareas. La idea del protocolo es la siguiente. Todos los agentes del gerente a ∈ Un intento de encontrar contratistas vecinos para ayudarlos con sus tareas TA = {ti ∈ T |loc (ti) = a}. Comienzan con ofrecer la tarea que es más eficiente en términos de la relación entre los beneficios y los recursos requeridos. De todas las tareas ofrecidas, los contratistas seleccionan la tarea con la más alta eficiencia y envían una oferta al gerente relacionado. Una oferta consiste en todos los recursos que el agente puede suministrar para esta tarea. Si se han ofrecido recursos suficientes, el gerente selecciona los recursos requeridos e informa a todos los contratistas de su elección. La eficiencia de una tarea se define de la siguiente manera: Definición 5. La eficiencia E de una tarea t ∈ T se define por la utilidad de esta tarea dividida por la suma de todos los recursos requeridos: e (t) = u (t) p r∈R rsc (t, r). Una descripción más detallada de este protocolo se puede encontrar en el Algoritmo 1. Aquí también se define cómo determinar cuándo ya no se debe ofrecer una tarea, porque es imposible cumplir localmente. Obviamente, ya no se ofrece una tarea cuando se ha asignado. Este protocolo es tal que, cuando no dos tareas tienen exactamente la misma eficiencia, en cada iteración, al menos una tarea se elimina de una lista de tareas.1 A partir de esto sigue la propiedad de cálculo y comunicación del algoritmo. Proposición 1. Para una estampa con tareas n y agentes M, el tiempo de ejecución del algoritmo distribuido es O (NM), y el número de mensajes de comunicación es O (N2 M).1 Incluso cuando algunas tareas tienen la misma eficiencia, es sencillo hacer que este resultado funcione. Por ejemplo, la implementación puede garantizar que los contratistas elijan la tarea con el ID de tarea más bajo.502 El sexto intl. Conf.En agentes autónomos y algoritmo de sistemas de agentes múltiples (AAMAS 07) Algoritmo 2 Asignación óptima de tareas sociales (OPT). Repita lo siguiente para cada combinación de tareas: 1. Si la recompensa total para esta combinación es más alta que cualquier combinación anterior, pruebe si esta combinación es factible de la siguiente manera: 2. Cree un problema de flujo de red para cada tipo de recurso r ∈ R (por separado) de la siguiente manera: (a) Cree una fuente S y un sumidero S.(b) Para cada agente a ∈ A, cree un nodo de agente y un borde de S a este nodo con capacidad igual a la cantidad de recursos de tipo R que tiene el agente A.(c) Para cada tarea t ∈ T, cree un nodo de tarea y un borde de este nodo a S con una capacidad igual a la cantidad de recursos de la tarea T de tipo R requiere.(d) Para cada agente A conecte el nodo del agente a todos los nodos de tareas de las tareas vecinas, es decir, t ∈ {t ∈ T |(a, loc (t)) ∈ Ae}. Dé esta conexión la capacidad ilimitada.3. Resuelva el problema de flujo máximo para las redes de flujo creadas. Si el flujo máximo en cada red es igual a los recursos requeridos totales de ese tipo, la combinación actual de tareas es factible. En ese caso, esta es la mejor combinación actual de tareas. Prueba. En el peor de los casos, en cada iteración se elimina exactamente una tarea de una lista de tareas, por lo que hay n iteraciones. En cada iteración en el peor de los casos (es decir, una red totalmente conectada), para cada uno de los gerentes O (n), se envían mensajes O (M). A continuación, la tarea con la más alta eficiencia puede ser seleccionada por cada contratista en O (N). La asignación de una asignación se puede hacer en o (m). Esto conduce a un total de operaciones O (N + M) para cada iteración y, por lo tanto, las operaciones O (N2 + NM) en total. El número de mensajes enviados es o (n (nm + nm + nm)) = o (n2 m). Establecemos la calidad de este protocolo experimentalmente (en la Sección 5). Preferiblemente, comparamos los resultados con la solución óptima.4.2 Asignación óptima de tareas sociales El algoritmo de asignación de tareas óptimo debe lidiar con las restricciones planteadas por la red social. Para este problema NPComplete, utilizamos un algoritmo exponencial de fuerza bruta para considerar combinaciones relevantes de tareas para ejecutar. Para cada combinación, utilizamos un algoritmo de flujo máximo para verificar si los recursos son suficientes para el subconjunto de tareas seleccionadas. La red de flujo describe qué recursos se pueden utilizar para qué tareas, dependiendo de la red social. Si el flujo máximo es igual a la suma de todos los recursos requeridos por el subconjunto de tareas, sabemos que existe una solución factible (ver Algoritmo 2). Claramente, no podemos esperar que este algoritmo óptimo pueda encontrar soluciones para tamaños de problemas más grandes. Para establecer la calidad de nuestro protocolo para grandes instancias, utilizamos el siguiente método para determinar un límite superior.4.3 Bound superior para la asignación de tareas sociales Dado un problema de asignación de tareas sociales, si el número de tipos de recursos para cada tarea t ∈ T está limitado por 1, el algoritmo 3 un límite superior para la asignación de tareas sociales (UB). Cree un problema de flujo de red con los costos de la siguiente manera: 1. Crea una fuente S y un sumidero S.2. Para cada agente a ∈ A y cada tipo de recurso ri ∈ R, cree un nodo de recurso de agente AI, y un borde de S a este nodo con capacidad igual a la cantidad de recursos del Tipo R Agente A tiene disponible y con costos 0.3. Para cada tarea t ∈ T y cada tipo de recurso ri ∈ R, cree un nodo de recursos de tarea Ti, y un borde de este nodo a S con capacidad igual a la cantidad de recursos de la tarea T de tipo R requiere y los costos −E (t).4. Para cada tipo de recurso ri ∈ R y para cada agente A conecte el nodo de recurso de agente ai a todos los nodos de recursos de tareas ti para tareas vecinas t ∈ {t ∈ T |(a, loc (t)) ∈ Ae o a = loc (t)}. Dé esta conexión capacidad ilimitada y cero costos.5. Cree un borde directamente de S a S con capacidad ilimitada y cero costos. Resuelva el problema de red de flujo de costos mínimo para esta red. Los costos de la red resultante son un límite superior para el problema de asignación de tareas sociales.El problema es polinómicamente solucionable transformándolo en un problema de red de flujo. Nuestro método para calcular eficientemente un límite superior para STAP hace uso de este caso especial al convertir cualquier instancia de Stap dada P en un nuevo problema P, donde cada tarea solo tiene un tipo de recurso. Más específicamente, para cada tarea t ∈ T con utilidad u (t), hacemos lo siguiente. Sea M el número de tipos de recursos {R1 ,..., rm} requerido por t.Luego dividimos t en un conjunto de tareas m t = {t1 ,..., tm} donde cada tarea TI solo tiene un tipo de recurso único (de {r1, ..., rm}) y cada tarea tiene una parte justa de la utilidad, es decir, la eficiencia de t de la definición 5 veces la cantidad de estoTipo de recurso RSC (TI, RI). Después de realizar esta conversión polinomial para cada tarea en t, el problema original P se convierte en el caso especial p. Tenga en cuenta que el conjunto de asignaciones válidas en P es solo un subconjunto del conjunto de asignaciones válidas en P, porque ahora es posible asignar parcialmente una tarea. A partir de esto, es fácil ver que la solución de P proporciona un límite superior de la solución del problema original P. Para calcular la solución óptima para P, la transformamos en un problema de flujo de costo mínimo. Modelamos el costo en la red de flujo mediante la negación de la nueva utilidad de tareas. Se utiliza una implementación en tiempo polinomial de un algoritmo de flujo de costo mínimo de escala [9] para el cálculo. El flujo de costo mínimo resultante representa una asignación máxima de las tareas para p. El modelado detallado se describe en el Algoritmo 3. En la siguiente sección, utilizamos este límite superior para estimar la calidad del GDAP para instancias a gran escala.5. Experimentos implementamos el Protocolo de asignación distribuida codiciosa (GDAP), el algoritmo de asignación óptimo (OPT) y el algoritmo de límite superior (UB) en Java, y los probó en una PC Linux. El propósito de estos experimentos es estudiar el rendimiento del algoritmo distribuido en diferentes entornos de problemas utilizando diferentes redes sociales. El Sexth Intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Recompensa- GDAP Random - GDAP Free - GDAP Figura 2: Las cualidades de solución del GDAP y el límite superior dependen de la relación de recursos.0 5 10 15 20 25 30 30 0 2 4 6 8 10 12 14 16 18 Número Fagents Grado de escala aleatoria pequeña Figura 3: El histograma de los grados.Las mediciones de formio son la calidad de la solución y el tiempo de cálculo, donde la calidad de la solución (SQ) se calcula de la siguiente manera. Cuando el número de tareas es pequeño, comparamos la salida del algoritmo distribuido con la solución óptima, es decir, sq = gdap op t, pero si no es factible calcular la solución óptima, usamos el valor devuelto por el límite superiorAlgoritmo para la evaluación, es decir, SQ = GDAP UB. Para ver si este último es una buena medida, también comparamos la calidad de la solución superior con la solución óptima para problemas más pequeños. A continuación, describimos la configuración de todos los experimentos y presentamos los resultados.5.1 Configuraciones experimentales Consideramos varios entornos experimentales. En todos los entornos, los agentes están conectados por una red social. En los experimentos, se utilizan tres redes diferentes para simular las relaciones sociales entre los agentes en posibles problemas del mundo real. Las redes del mundo pequeño son redes donde la mayoría de los vecinos de un agente también están conectados entre sí. Para los experimentos utilizamos un método para generar redes aleatorias de mundo pequeño propuestos por Watts et al.[22], con una probabilidad de reencuentro fija P = 0.05. Las redes sin escala tienen la propiedad de que un par de nodos tienen muchas conexiones, y muchos nodos tienen solo una pequeña cantidad de conexiones. Para generarlos, utilizamos la implementación en la Biblioteca Jung del generador propuesto por Barab´asi y Albert [3]. También generamos redes aleatorias de la siguiente manera. Primero conectamos a cada agente a otro agente de modo que todos los agentes estén conectados. A continuación, agregamos al azar las conexiones hasta que se haya alcanzado el grado promedio deseado. Ahora describimos las diferentes configuraciones utilizadas en nuestros experimentos con problemas pequeños y a gran escala. Configuración 1. El número de agentes es 40, y el número de tareas es 20. El número de diferentes tipos de recursos está limitado por 5, y el número promedio de recursos requeridos por una tarea es 30. En consecuencia, el número total de recursos requeridos por las tareas se soluciona. Sin embargo, los recursos disponibles para los agentes son variados. Definimos la relación de recursos para referirse a la relación entre el número total de recursos disponibles y el número total de recursos requeridos. Los recursos se asignan de manera uniforme a los agentes. Los grados promedio de las redes también pueden cambiar. En esta configuración, los beneficios de la tarea se distribuyen normalmente en torno a la cantidad de recursos requeridos. Configuración 2. Esta configuración es similar a la configuración 1, pero aquí dejamos que los beneficios de las tareas varíen dramáticamente-40% de las tareas tienen un beneficio alrededor de 10 veces mayor que el otro 60% de las tareas. Configuración 3. Esta configuración es para problemas a gran escala. La relación entre el número de agentes y el número de tareas se establece en 5/3, y el número de agentes varía de 100 a 2000. También solucionamos la relación de recursos a 1.2 y el grado promedio a 6. El número de diferentes tipos de recursos es 20, y el requisito promedio de recursos de una tarea es de 100. Los beneficios de la tarea se distribuyen normalmente.5.2 Resultados experimentales Los experimentos se realizan con las tres configuraciones diferentes en las tres redes diferentes mencionadas anteriormente, donde cada datos registrados es el promedio en 20 instancias aleatorias.5.2.1 Experimento 1 Configuración experimental 1 se usa para este conjunto de experimentos. Nos gustaría ver cómo se comporta el GDAP en las diferentes redes cuando el número de recursos disponibles para los agentes está cambiando. También estudiamos el comportamiento de nuestro algoritmo de límite superior. Para este experimento solucionamos el número promedio de vecinos (grado) en cada tipo de red a seis. En la Figura 2 vemos cómo depende la calidad del límite superior y el algoritmo GDAP de la relación de recursos. Sorprendentemente, para las relaciones de recursos más bajas, nuestro GDAP está mucho más cerca de la asignación óptima que el límite superior. Cuando la relación de recursos crece por encima de 1.5, los gráficos del límite superior y el GDAP convergen, lo que significa que ambos están realmente cerca de la solución óptima. Esto puede explicarse por el hecho de que cuando hay muchos recursos disponibles, todas las tareas se pueden asignar sin ningún conflicto. Sin embargo, cuando los recursos son muy escasos, el límite superior es demasiado optimista, ya que se basa en la asignación de subtareas por tipo de recurso, y no razona cuántas tareas se pueden asignar por completo. También notamos en el gráfico que la calidad de la solución del GDAP en las tres redes es bastante alta (más de 0.8) cuando el recurso disponible es muy limitado (0.3). Se cae por debajo de 0.8 con una mayor relación y aumenta nuevamente una vez que haya muchos recursos disponibles (relación de recursos 0.9). Claramente, si 504 el sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (aamas 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 6 8 10 12 16 RecompensasGDAP Random - GDAP Free - GDAP Figura 4: La calidad del GDAP y el límite superior dependen del grado de red.Los recursos son realmente escasos, solo unas pocas tareas pueden asignarse con éxito incluso por el algoritmo óptimo. Por lo tanto, el GDAP puede dar una buena asignación. Aunque las diferencias son menores, también se puede ver que los resultados para la red del mundo pequeño son consistentemente ligeramente mejores que los de las redes aleatorias, que a su lugar superan las redes sin escala. Esto puede entenderse observando la distribución del grado de agentes, como se muestra en la Figura 3. En este experimento, en la red del mundo pequeño, casi todos los gerentes tienen un grado de seis. En redes aleatorias, el grado varía entre uno y aproximadamente diez. Sin embargo, en la red sin escala, la mayoría de los nodos tienen solo tres o cuatro conexiones, y solo unas pocas tienen hasta veinte conexiones. Como veremos en el próximo experimento, tener más conexiones significa obtener mejores resultados. Para el próximo experimento, fijamos la relación de recursos a 1.0 y estudiamos la calidad del algoritmo GDAP de límite superior y el algoritmo GDAP relacionado con el grado de la red social. El resultado se puede encontrar en la Figura 4. En esta figura podemos ver que un grado promedio alto también conduce a la convergencia del límite superior y el GDAP. Obviamente, cuando los gerentes tienen muchas conexiones, se hace más fácil asignar tareas. Una excepción es, similar a lo que hemos visto en la Figura 2, que la solución del GDAP también es muy buena si las conexiones son extremadamente limitadas (grado 2), debido al hecho de que el número de tareas posiblemente asignadas es muy pequeña. Una vez más, vemos que el límite superior no es tan bueno para los problemas en los que los recursos son difíciles de alcanzar, es decir, en las redes sociales con un grado promedio bajo.2 Dado que la calidad de la solución depende claramente de la relación de recursos, así como del grado de lo social.Red, estudiamos el efecto de cambiar ambos, para ver si se influyen entre sí. La Figura 5 muestra cómo la calidad de la solución depende tanto de la relación de recursos como del grado de red. Este gráfico confirma los resultados de que el GDAP funciona mejor para problemas con una relación de recursos más alta y más alta. Sin embargo, ahora también está más claro que funciona mejor para una disponibilidad de recursos y muy bajo grado. Para este experimento con 40 agentes y 20 tareas, el peor rendimiento se cumple para instancias con grado seis y la relación de recursos 0.6 a instancias con grado doce y relación recursos 0.3. Pero incluso para esos casos, el rendimiento se encuentra por encima de 0.7.2 La desviación estándar consistente de aproximadamente el 15% en las 20 instancias problemáticas no se muestra como barras de error en estos primeros gráficos, porque ofuscaría las interesantes correlaciones que ahora se pueden ver.4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Recompensa relativa Relación de recursos promedio de grado pequeño Recompensa relativa Figura 5: La calidad del GDAP depende tanto de la relación de recursos como de la red de la red y el grado de red de la red.5.2.2 Experimento 2 Para estudiar la robustez del GDAP en diferentes configuraciones de problemas, generamos casos en los que la distribución de beneficios de la tarea es diferente: el 40% de las tareas obtienen un beneficio 10 veces mayor (como se describe en la configuración 2). El efecto de esta distribución diferente se puede ver en la Figura 6. Estos dos gráficos muestran que los resultados para la distribución de beneficios de la tarea sesgada son ligeramente mejores en promedio, tanto cuando varían la relación de recursos como cuando varían el grado promedio de la red. Argumentamos que esto puede explicarse por la naturaleza codiciosa de GDAP, lo que hace que las tareas con alta eficiencia se asignen primero, y hace que el algoritmo funcione mejor en este entorno heterogéneo.5.2.3 Experimento 3 El propósito de este experimento final es probar si el algoritmo se puede escalar a grandes problemas, como las aplicaciones que se ejecutan en Internet. Por lo tanto, generamos casos en los que el número de agentes varía de 100 a 2000, y aumentamos simultáneamente el número de tareas de 166 a 3333 (configuración 3). La Figura 7 muestra el tiempo de ejecución para estas instancias en una máquina Linux con un procesador AMD Opteron 2.4 GHz. Estos gráficos confirman el análisis teórico de la sección anterior, diciendo que tanto el límite superior como el GDAP son polinomiales. De hecho, los gráficos muestran que el GDAP casi se comporta linealmente. Aquí vemos que la localidad del GDAP realmente ayuda a reducir el tiempo de cálculo. También tenga en cuenta que el GDAP requiere aún menos tiempo de cálculo que el límite superior. La calidad del GDAP para estas grandes instancias no se puede comparar con la solución óptima. Por lo tanto, en la Figura 8 se usa el límite superior. Este resultado muestra que el GDAP se comporta de manera estable y consistente bien con el creciente tamaño del problema. También muestra una vez más que el GDAP funciona mejor en una red de mundo pequeño.6. La asignación de tareas de trabajo relacionadas en sistemas multiagentes ha sido investigada por muchos investigadores en los últimos años con diferentes supuestos y énfasis. Sin embargo, la mayor parte de la investigación hasta la fecha sobre la asignación de tareas no considera las conexiones sociales entre los agentes, y estudia el problema en un sexto INTL centralizado. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Recompensa La relación de recurso de recompensa de recompensa en el mundo pequeño sesgo pequeño sesgo uniforme uniforme uniforme uniforme uniformelibre 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Recompensay una distribución de beneficios de tarea sesgada relacionada con la relación de recursos (el primer gráfico) y el grado de red (el segundo gráfico).configuración. Por ejemplo, Kraus et al.[12] Desarrolle un protocolo de subasta que permita a los agentes formar coaliciones con limitaciones de tiempo. Asume que cada agente conoce las capacidades de todos los demás. El protocolo propuesto está centralizado, donde un gerente es responsable de asignar las tareas a todas las coaliciones. Manisterski en Al.[14] Discuta las posibilidades de lograr asignaciones eficientes en entornos cooperativos y no cooperativos. Proponen un algoritmo centralizado para encontrar la solución óptima. En contraste con este trabajo, presentamos también un protocolo eficiente completamente distribuido que tiene en cuenta la red social. La asignación de tareas también ha sido estudiada en entornos distribuidos por, por ejemplo, Shehory y Kraus [18] y por Lerman y Shehory [13]. Proponen algoritmos distribuidos con baja complejidad de comunicación para formar coaliciones en sistemas multiagentes a gran escala. Sin embargo, no asumen la existencia de ninguna red de agentes. El trabajo de Sander et al.[16] Introduce algoritmos basados en geometría computacional para la asignación de tareas distribuidas en dominios geográficos. Los agentes pueden moverse y buscar activamente tareas, y la capacidad de los agentes para realizar tareas es homogénea. Para aplicar su enfoque, los agentes deben tener algún conocimiento sobre las posiciones geográficas de las tareas y algunos otros agentes. Otro trabajo [17] propone un mecanismo de ubicación para sistemas abiertos multiagentes para asignar tareas a agentes desconocidos. En este enfoque, cada agente almacena una lista de agentes que conocen. El análisis de la complejidad de comunicación de este método se basa en gráficos similares a la red, mientras que investigamos cómo resolver eficientemente la asignación de tareas en una red social, cuya topología puede ser arbitraria. Las redes también se han empleado en el contexto de la asignación de tareas en algunos otros trabajos, por ejemplo, para limitar el 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Agentes de tiempo superior Bound - Pequeño pequeño-No superior del mundo - Bound superior aleatorio - GDAP sin escala - GDAP de mundo pequeño - GDAP aleatorio - Figura 7 sin escala: El tiempo de ejecución del algoritmo GDAP.0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Recompensas Agentes de recompensainteracciones entre agentes y mediadores [1]. Los mediadores en este contexto son agentes que reciben la tarea y tienen conexiones con otros agentes. Rompen la tarea en subtareas y negocian con otros agentes para obtener compromisos para ejecutar estas subtareas. Su enfoque está en modelar el proceso de decisión de un solo mediador. Otro enfoque es dividir la red en camarillas de nodos, que representan coaliciones que los agentes involucrados pueden usar como mecanismo de coordinación [20]. El enfoque de ese trabajo se distribuye la formación de la coalición entre los agentes, pero en nuestro enfoque, no necesitamos agentes para formar grupos antes de asignar tareas. Easwaran y Pitt [6] estudian tareas complejas que requieren servicios para su logro. El problema se refiere a la asignación de subtareas a los proveedores de servicios en una cadena de suministro. Otro estudio de la asignación de tareas en las cadenas de suministro es [21], donde se argumenta que la característica definitoria de la formación de la cadena de suministro es la descomposición jerárquica de la subtarea (HSD). HSD se implementa utilizando redes de dependencia de tareas (TDN), con agentes y bienes como nodos, y relaciones de E/S entre ellas como bordes. Aquí, se da la red y el problema es seleccionar un subgrafio, para el cual los autores proponen un algoritmo basado en el mercado, en particular, una serie de subastas. En comparación con estos trabajos, nuestro enfoque es más general en el sentido de que somos capaces de modelar diferentes tipos de conexiones o restricciones entre los agentes para diferentes dominios problemáticos además de la formación de la cadena de suministro. Finalmente, las redes sociales se han utilizado en el contexto de la formación del equipo. El trabajo anterior ha demostrado cómo aprender qué relaciones son más beneficiosas a largo plazo [8] y adaptar la red social en consecuencia. Creemos que estos resultados también pueden transferirse al dominio de la asignación de tareas, dejando esto como un tema para un estudio posterior.506 El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 7. Conclusiones En este documento estudiamos el problema de asignación de tareas en una red social (STAP), que puede verse como una variante nueva y más general del TAP. Creemos que tiene una gran cantidad de potencial para problemas realistas. Proporcionamos resultados de complejidad en calcular la solución eficiente para el STAP, así como un límite en los posibles algoritmos de aproximación. A continuación, presentamos un protocolo distribuido, relacionado con el protocolo ContractNet. También introdujimos un algoritmo exponencial para calcular la solución óptima, así como un algoritmo rápido de conflicto superior. Finalmente, utilizamos la solución óptima y el límite superior (para instancias más grandes) para realizar un extenso conjunto de experimentos para evaluar la calidad de la solución y la eficiencia computacional del algoritmo distribuido propuesto en diferentes tipos de redes, a saber, las redes de mundo pequeño., redes aleatorias y redes sin escala. Los resultados presentados en este documento muestran que el algoritmo distribuido funciona bien en redes de pequeños mundo, sin escala y aleatorios, y para muchos entornos diferentes. También se realizaron otros experimentos (por ejemplo, en redes de cuadrícula) y estos resultados se mantuvieron en una gama más amplia de escenarios. Además, demostramos que escala bien en redes grandes, tanto en términos de calidad como de tiempo de cálculo requerido. Los resultados también sugieren que las redes del mundo pequeño son ligeramente mejor adecuados para la asignación de tareas locales, porque no hay nodos con muy pocos vecinos. Hay muchas extensiones interesantes en nuestro trabajo actual. En este artículo, nos centramos en el aspecto computacional en el diseño del algoritmo distribuido. En nuestro trabajo futuro, también nos gustaría abordar algunos de los problemas relacionados en la teoría de juegos, como los agentes estratégicos, y mostrar propiedades deseables de un protocolo distribuido en tal contexto. En el algoritmo actual, suponemos que los agentes solo pueden contactar a sus vecinos para solicitar recursos, lo que puede explicar por qué nuestro algoritmo no funciona tan bien en las redes libres de escamas como en las redes del mundo pequeño. Nuestro trabajo futuro puede permitir a los agentes reasignar (sub) tareas. Estamos interesados en ver cómo tales interacciones afectarán el rendimiento de la asignación de tareas en diferentes redes sociales. Un tercer tema interesante para trabajos adicionales es la adición de información de reputación entre los agentes. Esto puede ayudar a modelar las relaciones comerciales cambiantes e incentivar a los agentes a seguir el protocolo. Finalmente, sería interesante estudiar instancias de la vida real del problema de asignación de tareas sociales, y ver cómo se relacionan con las redes generadas al azar de diferentes tipos estudiados en este documento. Expresiones de gratitud. Este trabajo está respaldado por la División de Ciencias Aplicadas de NWO y el Ministerio de Asuntos Económicos.8. Referencias [1] S. Abdallah y V. Lesser. Asignación de tareas de modelado utilizando un modelo teórico de decisión. En Proc. Aamas, páginas 719-726. ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson y D. Zuckerman. Productos gráficos derandomizados. Complexidad computacional, 5 (1): 60-75, 1995. [3] A.-L.Barab´asi y R. Albert. Aparición de escala en redes aleatorias. Science, 286 (5439): 509-512, 1999. [4] R. H. Coase. La naturaleza de la empresa. EconomicA ns, 4 (16): 386-405, 1937. [5] R. H. Coase. Mi evolución como economista. En W. Breit y R. W. Spencer, editores, Lives of the Laureates, páginas 227-249. MIT Press, 1995. [6] A. M. Easwaran y J. Pitt. Formación de la cadena de suministro en sistemas abiertos de agentes múltiples basados en el mercado. Internacional J. de inteligencia y aplicaciones computacionales, 2 (3): 349-363, 2002. [7] I. Foster, N. R. Jennings y C. Kesselman. El cerebro se encuentra con la fuerza: por qué la red y los agentes se necesitan mutuamente. En Proc. Aamas, páginas 8-15, Washington, DC, EE. UU., 2004. IEEE Sociedad de computadoras.[8] M. E. Gaston y M. Desjardins. Redes organizadas por agente para la formación de equipo dinámico. En Proc. Aamas, páginas 230-237, Nueva York, NY, EE. UU., 2005. ACM Press.[9] A. Goldberg. Una implementación eficiente de un algoritmo de flujo de costo mínimo de escala. J. de algoritmos, 22: 1-29, 1997. [10] R. Gulati. ¿Se confía en la familiaridad? Las implicaciones de los lazos repetidos para la elección contractual en las alianzas. Academy of Management Journal, 38 (1): 85-112, 1995. [11] T. Klos y B. Nooteboom. Costo de transacción computacional basada en agentes Economía. Dynamics and Control, 25 (3-4): 503-526, 01. [12] S. Kraus, O. Shehory y G. Taase. Formación de la coalición con información heterogénea incierta. En Proc. Aamas, páginas 1-8. ACM, 2003. [13] K. Lerman y O. Shehory. Formación de coalición para mercados electrónicos a gran escala. En Proc. ICMAS, páginas 167-174. IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus y N. Jennings. Formando grupos de agentes eficientes para completar tareas complejas. En Proc. Aamas, páginas 257-264. ACM, 2006. [15] J. Patel et al. Organizaciones virtuales basadas en agentes para la red. Multi-agente y sistemas de cuadrícula, 1 (4): 237-249, 2005. [16] P. V. Sander, D. Peleshchuk y B. J. Grosz. Un algoritmo distribuido escalable para una asignación de tareas eficiente. En Proc. AAMAS, páginas 1191-1198, Nueva York, NY, EE. UU., 2002. ACM Press.[17] O. Shehory. Un mecanismo de ubicación de agente escalable. En Proc. Atal, volumen 1757 de LNCS, páginas 162-172. Springer, 2000. [18] O. Shehory y S. Kraus. Métodos para la asignación de tareas a través de la formación de la coalición del agente. Artificial Intelligence, 101 (1-2): 165-200, 1998. [19] R. M. Sreenath y M. P. Singh. Selección de servicio basada en agentes. Web Semantics, 1 (3): 261-279, 2004. [20] P. T. Toˇsi´c y G. A. Agha. Formación de coalición distribuida basada en camarilla máxima para la asignación de tareas en sistemas de agentes múltiples a gran escala. En Proc. MMAS, volumen 3446 de LNAi, páginas 104-120. Springer, 2005. [21] W. E. Walsh y M. P. Wellman. Modelado de la formación de la cadena de suministro en sistemas multiagente. En Proc. AMEC II, Volumen 1788 de LNAi, páginas 94-101. Springer, 2000. [22] D. J. Watts y S. H. Strogatz. Dinámica colectiva de pequeñas redes mundiales. Nature, 393: 440-442, 1998. El sexto intl. Conf.en agentes autónomos y sistemas de múltiples agentes (AAMAS 07) 507",
    "original_sentences": [
        "Distributed Task Allocation in Social Networks Mathijs de Weerdt Delft Technical University Delft, The Netherlands M.M.deWeerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, The Netherlands Yingqian.Zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI) Amsterdam, The Netherlands tomas.klos@cwi.nl ABSTRACT This paper proposes a new variant of the task allocation problem, where the agents are connected in a social network and tasks arrive at the agents distributed over the network.",
        "We show that the complexity of this problem remains NPhard.",
        "Moreover, it is not approximable within some factor.",
        "We develop an algorithm based on the contract-net protocol.",
        "Our algorithm is completely distributed, and it assumes that agents have only local knowledge about tasks and resources.",
        "We conduct a set of experiments to evaluate the performance and scalability of the proposed algorithm in terms of solution quality and computation time.",
        "Three different types of networks, namely small-world, random and scale-free networks, are used to represent various social relationships among agents in realistic applications.",
        "The results demonstrate that our algorithm works well and that it scales well to large-scale applications.",
        "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Experimentation 1.",
        "INTRODUCTION Recent years have seen a lot of work on task and resource allocation methods, which can potentially be applied to many real-world applications.",
        "However, some interesting applications where relations between agents play a role require a slightly more general model.",
        "Such situations appear very frequently in real-world scenarios, and recent technological developments are bringing more of them within the range of task allocation methods.",
        "Especially in business applications, preferential partner selection and interaction is very common, and this aspect becomes more important for task allocation research, to the extent that technological developments need to be able to support it.",
        "For example, the development of semantic web and grid technologies leads to increased and renewed attention for the potential of the web to support business processes [7, 15].",
        "As an example, virtual organizations (VOs) are being re-invented in the context of the grid, where they are composed of a number of autonomous entities (representing different individuals, departments and organizations), each of which has a range of problem-solving capabilities and resources at its disposal [15, p. 237].",
        "The question is how VOs are to be dynamically composed and re-composed from individual agents, when different tasks and subtasks need to be performed.",
        "This would be done by allocating them to different agents who may each be capable of performing different subsets of those tasks.",
        "Similarly, supply chain formation (SCF) is concerned with the, possibly ad-hoc, allocation of services to providers in the supply chain, in such a way that overall profit is optimized [6, 21].",
        "Traditionally, such allocation decisions have been analyzed using transaction cost economics (TCE) [4], which takes the transaction between consecutive stages of development as its basic unit of analysis, and considers the firm and the market as alternative structural forms for organizing transactions. (Transaction cost) economics has traditionally built on analysis of comparative statics: the central problem of economic organization is considered to be the adaptation of organizational forms to the characteristics of transactions.",
        "More recently, TCEs founding father, Ronald Coase, acknowledged that this is too simplistic an approach [5, p. 245]: The analysis cannot be confined to what happens within a single firm. (. . . )",
        "What we are dealing with is a complex interrelated structure.",
        "In this paper, we study the problem of task allocation from the perspective of such a complex interrelated structure.",
        "In particular, the market cannot be considered as an organizational form without considering specific partners to interact with on the market [11].",
        "Specifically, therefore, we consider agents to be connected to each other in a social network.",
        "Furthermore, this network is not fully connected: as informed by the business literature, firms typically have established working relations with limited numbers of preferred partners [10]; these are the ones they consider when new tasks arrive and they have to form supply chains to allocate those tasks [19].",
        "Other than modeling the interrelated 500 978-81-904262-7-5 (RPS) c 2007 IFAAMAS structure between business partners, the social network introduced in this paper can also be used to represent other types of connections or constraints among autonomous entities that arise from other application domains.",
        "The next section gives a formal description of the task allocation problem on social networks.",
        "In Section 3, we prove that the complexity of this problem remains NP-hard.",
        "We then proceed to develop a distributed algorithm in Section 4, and perform a series of experiments with this algorithm, as described in Section 5.",
        "Section 6 discusses related work, and Section 7 concludes. 2.",
        "PROBLEM DESCRIPTION We formulate the social task allocation problem in this section.",
        "There is a set A of agents: A = {a1, . . . , am}.",
        "Agents need resources to complete tasks.",
        "Let R = {r1, . . . , rk} denote the collection of the resource types available to the agents A.",
        "Each agent a ∈ A controls a fixed amount of resources for each resource type in R, which is defined by a resource function: rsc : A × R → N. Moreover, we assume agents are connected by a social network.",
        "Definition 1 (Social network).",
        "An agent social network SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ∈ AE indicates the existence of a social connection between agents ai and aj.",
        "Suppose a set of tasks T = {t1, t2, . . . , tn} arrives at such an agent social network.",
        "Each task t ∈ T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the utility gained if task t is accomplished, and the resource function rsc : T ×R → N specifies the amount of resources required for the accomplishment of task t. Furthermore, a location function loc : T → A defines the locations (i.e., agents) at which the tasks arrive in the social network.",
        "An agent a that is the location of a task t, i.e. loc(t) = a, is called the manager of this task.",
        "Each task t ∈ T needs some specific resources from the agents in order to complete the task.",
        "The exact assignment of tasks to agents is defined by a task allocation.",
        "Definition 2 (Task allocation).",
        "Given a set of tasks T = {t1, . . . , tn} and a set of agents A = {a1, . . . , am} in a social network SN, a task allocation is a mapping φ : T × A × R → N. A valid task allocation in SN must satisfy the following constrains: • A task allocation must be correct.",
        "Each agent a ∈ A cannot use more than its available resources, i.e. for each r ∈ R, P t∈T φ(t, a, r) ≤ rsc(a, r). • A task allocation must be complete.",
        "For each task t ∈ T , either all allocated agents resources are sufficient, i.e. for each r ∈ R, P a∈A φ(t, a, r) ≥ rsc(t, r), or t is not allocated, i.e. φ(t, ·, ·) = 0. • A task allocation must obey the social relationships.",
        "Each task t ∈ T can only be allocated to agents that are (direct) neighbors of agent loc(t) in the social network SN.",
        "Each such agent that can contribute to a task is called a contractor.",
        "We write Tφ to represent the tasks that are fully allocated in φ.",
        "The utility of φ is then the summation of the utilities of each task in Tφ, i.e., Uφ = P t∈Tφ u(t).",
        "Using this notation, we define the efficient task allocation below.",
        "Definition 3 (Efficient task allocation).",
        "We say a task allocation φ is efficient if it is valid and Uφ is maximized, i.e., Uφ = max( P t∈Tφ u(t)).",
        "We are now ready to define the task allocation problem in social network that we study in this paper.",
        "Definition 4 (Social task allocation problem).",
        "Given a set of agents A connected by a social network SN = (A, AE), and a finite set of tasks T , the social task allocation problem (or STAP for short) is the problem of finding the efficient task allocation φ, such that φ is valid and the social welfare Uφ is maximized. 3.",
        "COMPLEXITY RESULTS The traditional task allocation problem, TAP (without the condition of the social network SN), is NP-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set.",
        "Although we may consider the TAP as a special case of the STAP by assuming agents are fully connected, we cannot directly use the complexity results from the TAP, since we study the STAP in an arbitrary social network, which, as we argued in the introduction, should be partially connected.",
        "We now show that the TAP with an arbitrary social network is also NP-complete, even when the utility of each task is 1, and the quantity of all required and available resources is 1.",
        "Theorem 1.",
        "Given the social task allocation problem with an arbitrary social network, as defined in Definition 4, the problem of deciding whether a task allocation φ with utility more than k exists is NP-complete.",
        "Proof.",
        "We first show that the problem is in NP.",
        "Given an instance of the problem and an integer k, we can verify in polynomial time whether an allocation φ is a valid allocation and whether the utility of φ is greater than k. We now prove that the STAP is NP-hard by showing that MAXIMUM INDEPENDENT SET ≤P STAP.",
        "Given an undirected graph G = (V, E) and an integer k, we construct a network G = (V , E ) which has an efficient task allocation with k tasks of utility 1 allocated if and only if G has an independent set (IS) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 Figure 1: The MIS problem can be reduced to the STAP.",
        "The left figure is an undirected graph G, which has the optimal solution {v1, v4} or {v2, v3}; the right figure is the constructed instance of the STAP, where the optimal allocation is {t1, t4} or {t2, t3}.",
        "An instance of the following construction is shown in Figure 1.",
        "For each node v ∈ V and each edge e ∈ E in the graph G, we create a vertex agent av and an edge agent ae in G .",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 501 When v was incident to e in G we correspondingly add an edge e in G between av and ae.",
        "We assign each agent in G one resource, which is related to the node or the edge in the graph G, i.e., for each v ∈ V , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ E, rsc(ae) = {e}.",
        "Each vertex agent avi in G has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ E}.",
        "There is no task on the edge agents in G .",
        "We define utility 1 for each task, and the quantity of all required and available resources to be 1.",
        "Taken an instance of the IS problem, suppose there is a solution of size k, i.e., a subset N ⊆ V such that no two vertices in N are joined by an edge in E and |N| = k. N specifies a set of vertex agents AN in the corresponding graph G .",
        "Given two agents a1, a2 ∈ AN we now know that there is no edge agent ae connected to both a1 and a2.",
        "Thus, for each agent a ∈ AN , a assigns its task to the edge agents which are connected to a.",
        "All other vertex agents a /∈ AN are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ AN .",
        "The set of tasks of the agents AN (|AN | = k) is thus the maximum set of tasks that can be allocated.",
        "The utility of this allocation is k. Similarly, if there is a solution for the STAP with the utility value k, and the allocated task set is N, then for the IS problem, there exists a maximum independent set N of size k in G. An example can be found in Figure 1.",
        "We just proved that the STAP is NP-hard for an arbitrary graph.",
        "In our proof, the complexity comes from the introduction of a social network.",
        "One may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant.",
        "We now give a complexity result on this class of networks as follows.",
        "Theorem 2.",
        "Let the number of neighbors of each agent in the social network SN be bounded by Δ for Δ ≥ 3.",
        "Computing the efficient task allocation given such a network is NP-complete.",
        "In addition, it is not approximable within Δε for some ε > 0.",
        "Proof.",
        "It has been shown in [2] that the maximum independent set problem in the case of the degree bounded by Δ for Δ ≥ 3 is NP-complete and is not approximable within Δε for some ε > 0.",
        "Using the similar reduction from the proof of Theorem 1, this result also holds for the STAP.",
        "Since our problem is as hard as MIS as shown in Theorem 1, it is not possible to give a worst case bound better than Δε for any polynomial time algorithm, unless P = NP. 4.",
        "ALGORITHMS To deal with the problem of allocating tasks in a social network, we present a distributed algorithm.",
        "We introduce this algorithm by describing the protocol for the agents.",
        "After that we give the optimal, centralized algorithm and an upper bound algorithm, which we use in Section 5 to benchmark the quality of our distributed algorithm. 4.1 Protocol for distributed task allocation We can summarize the description of the task allocation problem in social networks from Section 2 as follows.",
        "We Algorithm 1 Greedy distributed allocation protocol (GDAP).",
        "Each manager a calculates the efficiency e(t) for each of their tasks t ∈ Ta, and then while Ta = ∅: 1.",
        "Each manager a selects the most efficient task t ∈ Ta such that for each task t ∈ Ta: e(t ) ≤ e(t). 2.",
        "Each manager a requests help for t from all its neighbors (of a) by informing these neighbors of the efficiency e(t) and the required resources for t. 3.",
        "Contractors receive and store all requests, and then offer all relevant resources to the manager for the task with the highest efficiency. 4.",
        "The managers that have received sufficient offers allocate their tasks, and inform each contractor which part of the offer is accepted.",
        "When a task is allocated, or when a manager has received offers from all neighbors, but still cannot satisfy its task, the task is removed from the task list Ta. 5.",
        "Contractors update their used resources. have a (social) network of agents.",
        "Each agent has a set of resources of different types at its disposal.",
        "We also have a set of tasks.",
        "Each task requires some resources, has a fixed benefit, and is located at a certain agent.",
        "This agent is called a manager.",
        "We only allow neighboring agents to help with a task.",
        "These agents are called contractors.",
        "Agents can fulfill the role of manager as well as contractor.",
        "The problem is to find out which tasks to execute, and which resources of which contractors to use for these tasks.",
        "The idea of the protocol is as follows.",
        "All manager agents a ∈ A try to find neighboring contractors to help them with their task(s) Ta = {ti ∈ T | loc(ti) = a}.",
        "They start with offering the task that is most efficient in terms of the ratio between benefit and required resources.",
        "Out of all tasks offered, contractors select the task with the highest efficiency, and send a bid to the related manager.",
        "A bid consists of all the resources the agent is able to supply for this task.",
        "If sufficient resources have been offered, the manager selects the required resources and informs all contractors of its choice.",
        "The efficiency of a task is defined as follows: Definition 5.",
        "The efficiency e of a task t ∈ T is defined by the utility of this task divided by the sum of all required resources: e(t) = u(t)P r∈R rsc(t,r) .",
        "A more detailed description of this protocol can be found in Algorithm 1.",
        "Here it is also defined how to determine when a task should not be offered anymore, because it is impossible to fulfill locally.",
        "Obviously, a task is also not offered anymore when it has been allocated.",
        "This protocol is such that, when no two tasks have exactly the same efficiency, in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the algorithm follows.",
        "Proposition 1.",
        "For a STAP with n tasks and m agents, the run time of the distributed algorithm is O(nm), and the number of communication messages is O(n2 m). 1 Even when some tasks have the same efficiency, it is straightforward to make this result work.",
        "For example, the implementation can ensure that the contractors choose the task with the lowest task-id. 502 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 2 Optimal social task allocation (OPT).",
        "Repeat the following for each combination of tasks: 1.",
        "If the total reward for this combination is higher than any previous combination, test if this combination is feasible as follows: 2.",
        "Create a network flow problem for each resource type r ∈ R (separately) as follows: (a) Create a source s and a sink s . (b) For each agent a ∈ A create an agent node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has. (c) For each task t ∈ T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires. (d) For each agent a connect the agent node to all task nodes of neighboring tasks, i.e., t ∈ {t ∈ T | (a, loc(t)) ∈ AE}.",
        "Give this connection unlimited capacity. 3.",
        "Solve the maximum flow problem for the created flow networks.",
        "If the maximum flow in each network is equal to the total required resources of that type, the current combination of tasks is feasible.",
        "In that case, this is the current best combination of tasks.",
        "Proof.",
        "In the worst case, in each iteration exactly one task is removed from a task list, so there are n iterations.",
        "In each iteration in the worst case (i.e., a fully connected network), for each of the O(n) managers, O(m) messages are sent.",
        "Next the task with the highest efficiency can be selected by each contractor in O(n).",
        "Assigning an allocation can be done in O(m).",
        "This leads to a total of O(n + m) operations for each iteration, and thus O(n2 + nm) operations in total.",
        "The number of messages sent is O(n(nm + nm + nm)) = O(n2 m).",
        "We establish the quality of this protocol experimentally (in Section 5).",
        "Preferably, we compare the results to the optimal solution. 4.2 Optimal social task allocation The optimal task allocation algorithm should deal with the restrictions posed by the social network.",
        "For this NPcomplete problem we used an exponential brute-force algorithm to consider relevant combinations of tasks to execute.",
        "For each combination we use a maximum-flow algorithm to check whether the resources are sufficient for the selected subset of tasks.",
        "The flow network describes which resources can be used for which tasks, depending on the social network.",
        "If the maximum flow is equal to the sum of all resources required by the subset of tasks, we know that a feasible solution exists (see Algorithm 2).",
        "Clearly, we cannot expect this optimal algorithm to be able to find solutions for larger problem sizes.",
        "To establish the quality of our protocol for large instances, we use the following method to determine an upper bound. 4.3 Upper bound for social task allocation Given a social task allocation problem, if the number of resource types for every task t ∈ T is bounded by 1, the Algorithm 3 An upper bound for social task allocation (UB).",
        "Create a network flow problem with costs as follows: 1.",
        "Create a source s and a sink s . 2.",
        "For each agent a ∈ A and each resource type ri ∈ R, create an agent-resource node ai, and an edge from s to this node with capacity equal to the amount of resources of type r agent a has available and with costs 0. 3.",
        "For each task t ∈ T and each resource type ri ∈ R, create a task-resource node ti, and an edge from this node to s with capacity equal to the amount of resources of type r task t requires and costs −e(t). 4.",
        "For each resource type ri ∈ R and for each agent a connect the agent-resource node ai to all task-resource nodes ti for neighboring tasks t ∈ {t ∈ T | (a, loc(t)) ∈ AE or a = loc(t)}.",
        "Give this connection unlimited capacity and zero costs. 5.",
        "Create an edge directly from s to s with unlimited capacity and zero costs.",
        "Solve the minimum cost flow network problem for this network.",
        "The costs of the resulting network is an upper bound for the social task allocation problem. problem is polynomially solvable by transforming it to a flow network problem.",
        "Our method for efficiently calculating an upper bound for STAP makes use of this special case by converting any given STAP instance P into a new problem P where each task only has one resource type.",
        "More specifically, for every task t ∈ T with utility u(t), we do the following.",
        "Let m be the number of resource types {r1, . . . , rm} required by t. We then split t into a set of m tasks T = {t1, . . . , tm} where each task ti only has one unique resource type (of {r1, . . . , rm}) and each task has a fair share of the utility, i.e., the efficiency of t from Definition 5 times the amount of this resource type rsc(ti, ri).",
        "After polynomially performing this conversion for every task in T , the original problem P becomes the special case P .",
        "Note that the set of valid allocations in P is only a subset of the set of valid allocations in P , because it is now possible to partially allocate a task.",
        "From this it is easy to see that the solution of P gives an upper bound of the solution of the original problem P. To compute the optimal solution for P , we transform it to a minimum cost flow problem.",
        "We model the cost in the flow network by the negation of the new tasks utility.",
        "A polynomial-time implementation of a scaling minimum cost flow algorithm [9] is used for the computation.",
        "The resulting minimum cost flow represents a maximum allocation of the tasks for P .",
        "The detailed modeling is described in Algorithm 3.",
        "In the next section, we use this upper bound to estimate the quality of the GDAP for large-scale instances. 5.",
        "EXPERIMENTS We implemented the greedy distributed allocation protocol (GDAP), the optimal allocation algorithm (OPT), and the upper bound algorithm (UB) in Java, and tested them on a Linux PC.",
        "The purpose of these experiments is to study the performance of the distributed algorithm in different problem settings using different social networks.",
        "The perThe Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 2: The solution qualities of the GDAP and the upper bound depend on the resource ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 Numberofagents Degree small-world random scale-free Figure 3: The histogram of the degrees. formance measurements are the solution quality and computation time, where the solution quality (SQ) is computed as follows.",
        "When the number of tasks is small, we compare the output of the distributed algorithm with the optimal solution, i.e., SQ = GDAP OP T , but if it is not feasible to compute the optimal solution, we use the value returned by the upper bound algorithm for evaluation, i.e., SQ = GDAP UB .",
        "To see whether the latter is a good measure, we also compare the quality of the upper bound to the optimal solution for smaller problems.",
        "In the following, we describe the setup of all experiments, and present the results. 5.1 Experimental settings We consider several experimental environments.",
        "In all environments the agents are connected by a social network.",
        "In the experiments, three different networks are used to simulate the social relationships among agents in potential realworld problems.",
        "Small-world networks are networks where most neighbors of an agent are also connected to each other.",
        "For the experiments we use a method for generating random small-world networks proposed by Watts et al. [22], with a fixed rewiring probability p = 0.05.",
        "Scale-free networks have the property that a couple of nodes have many connections, and many nodes have only a small number of connections.",
        "To generate these we use the implementation in the JUNG library of the generator proposed by Barab´asi and Albert [3].",
        "We also generate random networks as follows.",
        "First we connect each agent to another agent such that all agents are connected.",
        "Next, we randomly add connections until the desired average degree has been reached.",
        "We now describe the different settings used in our experiments with both small and large-scale problems.",
        "Setting 1.",
        "The number of agents is 40, and the number of tasks is 20.",
        "The number of different resource types is bounded by 5, and the average number of resources required by a task is 30.",
        "Consequently, the total number of resources required by the tasks is fixed.",
        "However, the resources available to the agents are varied.",
        "We define the resource ratio to refer to the ratio between the total number of available resources and the total number of required resources.",
        "Resources are allocated uniformly to the agents.",
        "The average degrees of the networks may also change.",
        "In this setting the task benefits are distributed normally around the number of resources required.",
        "Setting 2.",
        "This setting is similar to Setting 1, but here we let the benefits of the tasks vary dramatically-40% of the tasks have around 10 times higher benefit than the other 60% of the tasks.",
        "Setting 3.",
        "This setting is for large-scale problems.",
        "The ratio between the number of agents and the number of tasks is set to 5/3, and the number of agents varies from 100 to 2000.",
        "We also fix the resource ratio to 1.2 and the average degree to 6.",
        "The number of different resource types is 20, and the average resource requirement of a tasks is 100.",
        "The task benefits are again normally distributed. 5.2 Experimental results The experiments are done with the three different settings in the three different networks mentioned before, where each recorded data is the average over 20 random instances. 5.2.1 Experiment 1 Experimental setting 1 is used for this set of experiments.",
        "We would like to see how the GDAP behaves in the different networks when the number of resources available to the agents is changing.",
        "We also study the behavior of our upper bound algorithm.",
        "For this experiment we fix the average number of neighbors (degree) in each network type to six.",
        "In Figure 2 we see how the quality of both the upper bound and the GDAP algorithm depends on the resource ratio.",
        "Remarkably, for lower resource ratios our GDAP is much closer to the optimal allocation than the upper bound.",
        "When the resource ratio grows above 1.5, the graphs of the upper bound and the GDAP converge, meaning that both are really close to the optimal solution.",
        "This can be explained by the fact that when plenty of resources are available, all tasks can be allocated without any conflicts.",
        "However, when resources are very scarce, the upper bound is much too optimistic, because it is based on the allocation of sub-tasks per resource type, and does not reason about how many of the tasks can actually be allocated completely.",
        "We also notice from the graph that the solution quality of the GDAP on all three networks is quite high (over 0.8) when the available resource is very limited (0.3).",
        "It drops below 0.8 with the increased ratio and goes up again once there are plenty of resources available (resource ratio 0.9).",
        "Clearly, if 504 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 4: The quality of the GDAP and the upper bound depend on the network degree. resources are really scarce, only a few tasks can be successfully allocated even by the optimal algorithm.",
        "Therefore, the GDAP is able to give quite a good allocation.",
        "Although the differences are minor, it can also be seen that the results for the small-world network are consistently slightly better than those of random networks, which in turn outperform scale-free networks.",
        "This can be understood by looking at the distribution of the agents degree, as shown in Figure 3.",
        "In this experiment, in the small-world network almost every manager has a degree of six.",
        "In random networks, the degree varies between one and about ten.",
        "However, in the scale-free network, most nodes have only three or four connections, and only a very few have up to twenty connections.",
        "As we will see in the next experiment, having more connections means getting better results.",
        "For the next experiment we fix the resource ratio to 1.0 and study the quality of both the upper bound and the GDAP algorithm related to the degree of the social network.",
        "The result can be found in Figure 4.",
        "In this figure we can see that a high average degree also leads to convergence of the upper bound and the GDAP.",
        "Obviously, when managers have many connections, it becomes easier to allocate tasks.",
        "An exception is, similar to what we have seen in Figure 2, that the solution of the GDAP is also very good if the connections are extremely limited (degree 2), due to the fact that the number of possibly allocated tasks is very small.",
        "Again we see that the upper bound is not that good for problems where resources are hard to reach, i.e. in social networks with a low average degree.2 Since the solution quality clearly depends on the resource ratio as well as on the degree of the social network, we study the effect of changing both, to see whether they influence each other.",
        "Figure 5 shows how the solution quality depends on both the resource ratio and the network degree.",
        "This graph confirms the results that the GDAP performs better for problems with higher degree and higher resource ratio.",
        "However, it is now also more clear that it performs better for very low degree and resource availability.",
        "For this experiment with 40 agents and 20 tasks, the worst performance is met for instances with degree six and resource ratio 0.6 to instances with degree twelve and resource ratio 0.3.",
        "But even for those instances, the performance lies above 0.7. 2 The consistent standard deviation of about 15% over the 20 problem instances is not displayed as error-bars in these first graphs, because it would obfuscate the interesting correlations that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Relative reward small-world Average degree Resource ratio Relative reward Figure 5: The quality of the GDAP depends on both the resource ratio and the network degree. 5.2.2 Experiment 2 To study the robustness of the GDAP against different problem settings, we generate instances where the task benefit distribution is different: 40% of the tasks gets a 10 times higher benefit (as described in Setting 2).",
        "The effect of this different distribution can be seen in Figure 6.",
        "These two graphs show that the results for the skewed task benefit distribution are slightly better on average, both when varying the resource ratio, and when varying the average degree of the network.",
        "We argue that this can be explained by the greedy nature of GDAP, which causes the tasks with high efficiency to be allocated first, and makes the algorithm perform better in this heterogeneous setting. 5.2.3 Experiment 3 The purpose of this final experiment is to test whether the algorithm can be scaled to large problems, like applications running on the internet.",
        "We therefore generate instances where the number of agents varies from 100 to 2000, and simultaneously increase the number of tasks from 166 to 3333 (Setting 3).",
        "Figure 7 shows the run time for these instances on a Linux machine with an AMD Opteron 2.4 GHz processor.",
        "These graphs confirm the theoretical analysis from the previous section, saying that both the upper bound and the GDAP are polynomial.",
        "In fact, the graphs show that the GDAP almost behaves linearly.",
        "Here we see that the locality of the GDAP really helps in reducing the computation time.",
        "Also note that the GDAP requires even less computation time than the upper bound.",
        "The quality of the GDAP for these large instances cannot be compared to the optimal solution.",
        "Therefore, in Figure 8 the upper bound is used instead.",
        "This result shows that the GDAP behaves stably and consistently well with the increasing problem size.",
        "It also shows once more that the GDAP performs better in a small-world network. 6.",
        "RELATED WORK Task allocation in multiagent systems has been investigated by many researchers in recent years with different assumptions and emphases.",
        "However, most of the research to date on task allocation does not consider social connections among agents, and studies the problem in a centralized The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free Figure 6: The quality of the GDAP algorithm for a uniform and a skewed task benefit distribution related to the resource ratio (the first graph), and the network degree (the second graph). setting.",
        "For example, Kraus et al. [12] develop an auction protocol that enables agents to form coalitions with time constraints.",
        "It assumes each agent knows the capabilities of all others.",
        "The proposed protocol is centralized, where one manager is responsible for allocating the tasks to all coalitions.",
        "Manisterski at al. [14] discuss the possibilities of achieving efficient allocations in both cooperative and noncooperative settings.",
        "They propose a centralized algorithm to find the optimal solution.",
        "In contrast to this work, we introduce also an efficient completely distributed protocol that takes the social network into account.",
        "Task allocation has also been studied in distributed settings by for example Shehory and Kraus [18] and by Lerman and Shehory [13].",
        "They propose distributed algorithms with low communication complexity for forming coalitions in large-scale multiagent systems.",
        "However, they do not assume the existence of any agent network.",
        "The work of Sander et al. [16] introduces computational geometry-based algorithms for distributed task allocation in geographical domains.",
        "Agents are then allowed to move and actively search for tasks, and the capability of agents to perform tasks is homogeneous.",
        "In order to apply their approach, agents need to have some knowledge about the geographical positions of tasks and some other agents.",
        "Other work [17] proposes a location mechanism for open multiagent systems to allocate tasks to unknown agents.",
        "In this approach each agent caches a list of agents they know.",
        "The analysis of the communication complexity of this method is based on lattice-like graphs, while we investigate how to efficiently solve task allocation in a social network, whose topology can be arbitrary.",
        "Networks have been employed in the context of task allocation in some other works as well, for example to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time(ms) Agents upper bound - small-world upper bound - random upper bound - scale-free GDAP - small-world GDAP - random GDAP - scale-free Figure 7: The run time of the GDAP algorithm. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Rewardrelativetoupperbound Agents small-world random scale-free Figure 8: The quality of the GDAP algorithm compared to the upper bound. interactions between agents and mediators [1].",
        "Mediators in this context are agents who receive the task and have connections to other agents.",
        "They break up the task into subtasks, and negotiate with other agents to obtain commitments to execute these subtasks.",
        "Their focus is on modeling the decision process of just a single mediator.",
        "Another approach is to partition the network into cliques of nodes, representing coalitions which the agents involved may use as a coordination mechanism [20].",
        "The focus of that work is distributed coalition formation among agents, but in our approach, we do not need agents to form groups before allocating tasks.",
        "Easwaran and Pitt [6] study complex tasks that require services for their accomplishment.",
        "The problem concerns the allocation of subtasks to service providers in a supply chain.",
        "Another study of task allocation in supply chains is [21], where it is argued that the defining characteristic of Supply Chain Formation is hierarchical subtask decomposition (HSD).",
        "HSD is implemented using task dependency networks (TDN), with agents and goods as nodes, and I/O relations between them as edges.",
        "Here, the network is given, and the problem is to select a subgraph, for which the authors propose a market-based algorithm, in particular, a series of auctions.",
        "Compared to these works, our approach is more general in the sense that we are able to model different types of connections or constraints among agents for different problem domains in addition to supply chain formation.",
        "Finally, social networks have been used in the context of team formation.",
        "Previous work has shown how to learn which relations are more beneficial in the long run [8], and adapt the social network accordingly.",
        "We believe these results can be transferred to the domain of task allocation as well, leaving this as a topic for further study. 506 The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 7.",
        "CONCLUSIONS In this paper we studied the task allocation problem in a social network (STAP), which can be seen as a new, more general, variant of the TAP.",
        "We believe it has a great amount of potential for realistic problems.",
        "We provided complexity results on computing the efficient solution for the STAP, as well as a bound on possible approximation algorithms.",
        "Next, we presented a distributed protocol, related to the contractnet protocol.",
        "We also introduced an exponential algorithm to compute the optimal solution, as well as a fast upperbound algorithm.",
        "Finally, we used the optimal solution and the upper-bound (for larger instances) to conduct an extensive set of experiments to assess the solution quality and the computational efficiency of the proposed distributed algorithm in different types of networks, namely, small-world networks, random networks, and scale-free networks.",
        "The results presented in this paper show that the distributed algorithm performs well in small-world, scale-free, and random networks, and for many different settings.",
        "Also other experiments were done (e.g. on grid networks) and these results held up over a wider range of scenarios.",
        "Furthermore, we showed that it scales well to large networks, both in terms of quality and of required computation time.",
        "The results also suggest that small-world networks are slightly better suited for local task allocation, because there are no nodes with very few neighbors.",
        "There are many interesting extensions to our current work.",
        "In this paper, we focus on the computational aspect in the design of the distributed algorithm.",
        "In our future work, we would also like to address some of the related issues in game theory, such as strategic agents, and show desirable properties of a distributed protocol in such a context.",
        "In the current algorithm we assume that agents can only contact their neighbors to request resources, which may explain why our algorithm performs not as good in the scalefree networks as in the small-world networks.",
        "Our future work may allow agents to reallocate (sub)tasks.",
        "We are interested in seeing how such interactions will affect the performance of task allocation in different social networks.",
        "A third interesting topic for further work is the addition of reputation information among the agents.",
        "This may help to model changing business relations and incentivize agents to follow the protocol.",
        "Finally, it would be interesting to study real-life instances of the social task allocation problem, and see how they relate to the randomly generated networks of different types studied in this paper.",
        "Acknowledgments.",
        "This work is supported by the Technology Foundation STW, applied science division of NWO, and the Ministry of Economic Affairs. 8.",
        "REFERENCES [1] S. Abdallah and V. Lesser.",
        "Modeling Task Allocation Using a Decision Theoretic Model.",
        "In Proc.",
        "AAMAS, pages 719-726.",
        "ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson, and D. Zuckerman.",
        "Derandomized Graph Products.",
        "Computational Complexity, 5(1):60-75, 1995. [3] A.-L. Barab´asi and R. Albert.",
        "Emergence of scaling in random networks.",
        "Science, 286(5439):509-512, 1999. [4] R. H. Coase.",
        "The Nature of the Firm.",
        "Economica NS, 4(16):386-405, 1937. [5] R. H. Coase.",
        "My Evolution as an Economist.",
        "In W. Breit and R. W. Spencer, editors, Lives of the Laureates, pages 227-249.",
        "MIT Press, 1995. [6] A. M. Easwaran and J. Pitt.",
        "Supply Chain Formation in Open, Market-Based Multi-Agent Systems.",
        "International J. of Computational Intelligence and Applications, 2(3):349-363, 2002. [7] I.",
        "Foster, N. R. Jennings, and C. Kesselman.",
        "Brain Meets Brawn: Why Grid and Agents Need Each Other.",
        "In Proc.",
        "AAMAS, pages 8-15, Washington, DC, USA, 2004.",
        "IEEE Computer Society. [8] M. E. Gaston and M. desJardins.",
        "Agent-organized networks for dynamic team formation.",
        "In Proc.",
        "AAMAS, pages 230-237, New York, NY, USA, 2005.",
        "ACM Press. [9] A. Goldberg.",
        "An Efficient Implementation of a Scaling Minimum-Cost Flow Algorithm.",
        "J. of Algorithms, 22:1-29, 1997. [10] R. Gulati.",
        "Does Familiarity Breed Trust?",
        "The Implications of Repeated Ties for Contractual Choice in Alliances.",
        "Academy of Management Journal, 38(1):85-112, 1995. [11] T. Klos and B. Nooteboom.",
        "Agent-based Computational Transaction Cost Economics.",
        "Economic Dynamics and Control, 25(3-4):503-526, 01. [12] S. Kraus, O. Shehory, and G. Taase.",
        "Coalition formation with uncertain heterogeneous information.",
        "In Proc.",
        "AAMAS, pages 1-8.",
        "ACM, 2003. [13] K. Lerman and O. Shehory.",
        "Coalition formation for large-scale electronic markets.",
        "In Proc.",
        "ICMAS, pages 167-174.",
        "IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus, and N. Jennings.",
        "Forming Efficient Agent Groups for Completing Complex Tasks.",
        "In Proc.",
        "AAMAS, pages 257-264.",
        "ACM, 2006. [15] J. Patel et al.",
        "Agent-Based Virtual Organizations for the Grid.",
        "Multi-Agent and Grid Systems, 1(4):237-249, 2005. [16] P. V. Sander, D. Peleshchuk, and B. J. Grosz.",
        "A scalable, distributed algorithm for efficient task allocation.",
        "In Proc.",
        "AAMAS, pages 1191-1198, New York, NY, USA, 2002.",
        "ACM Press. [17] O. Shehory.",
        "A scalable agent location mechanism.",
        "In Proc.",
        "ATAL, volume 1757 of LNCS, pages 162-172.",
        "Springer, 2000. [18] O. Shehory and S. Kraus.",
        "Methods for Task Allocation via Agent Coalition Formation.",
        "Artificial Intelligence, 101(1-2):165-200, 1998. [19] R. M. Sreenath and M. P. Singh.",
        "Agent-based service selection.",
        "Web Semantics, 1(3):261-279, 2004. [20] P. T. Toˇsi´c and G. A. Agha.",
        "Maximal Clique Based Distributed Coalition Formation for Task Allocation in Large-Scale Multi-Agent Systems.",
        "In Proc.",
        "MMAS, volume 3446 of LNAI, pages 104-120.",
        "Springer, 2005. [21] W. E. Walsh and M. P. Wellman.",
        "Modeling Supply Chain Formation in Multiagent Systems.",
        "In Proc.",
        "AMEC II, volume 1788 of LNAI, pages 94-101.",
        "Springer, 2000. [22] D. J. Watts and S. H. Strogatz.",
        "Collective dynamics of small world networks.",
        "Nature, 393:440-442, 1998.",
        "The Sixth Intl.",
        "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 507"
    ],
    "error_count": 0,
    "keys": {
        "social network": {
            "translated_key": "red social",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Distributed Task Allocation in Social Networks Mathijs de Weerdt Delft Technical University Delft, The Netherlands M.M.deWeerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, The Netherlands Yingqian.Zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI) Amsterdam, The Netherlands tomas.klos@cwi.nl ABSTRACT This paper proposes a new variant of the task allocation problem, where the agents are connected in a <br>social network</br> and tasks arrive at the agents distributed over the network.",
                "We show that the complexity of this problem remains NPhard.",
                "Moreover, it is not approximable within some factor.",
                "We develop an algorithm based on the contract-net protocol.",
                "Our algorithm is completely distributed, and it assumes that agents have only local knowledge about tasks and resources.",
                "We conduct a set of experiments to evaluate the performance and scalability of the proposed algorithm in terms of solution quality and computation time.",
                "Three different types of networks, namely small-world, random and scale-free networks, are used to represent various social relationships among agents in realistic applications.",
                "The results demonstrate that our algorithm works well and that it scales well to large-scale applications.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Recent years have seen a lot of work on task and resource allocation methods, which can potentially be applied to many real-world applications.",
                "However, some interesting applications where relations between agents play a role require a slightly more general model.",
                "Such situations appear very frequently in real-world scenarios, and recent technological developments are bringing more of them within the range of task allocation methods.",
                "Especially in business applications, preferential partner selection and interaction is very common, and this aspect becomes more important for task allocation research, to the extent that technological developments need to be able to support it.",
                "For example, the development of semantic web and grid technologies leads to increased and renewed attention for the potential of the web to support business processes [7, 15].",
                "As an example, virtual organizations (VOs) are being re-invented in the context of the grid, where they are composed of a number of autonomous entities (representing different individuals, departments and organizations), each of which has a range of problem-solving capabilities and resources at its disposal [15, p. 237].",
                "The question is how VOs are to be dynamically composed and re-composed from individual agents, when different tasks and subtasks need to be performed.",
                "This would be done by allocating them to different agents who may each be capable of performing different subsets of those tasks.",
                "Similarly, supply chain formation (SCF) is concerned with the, possibly ad-hoc, allocation of services to providers in the supply chain, in such a way that overall profit is optimized [6, 21].",
                "Traditionally, such allocation decisions have been analyzed using transaction cost economics (TCE) [4], which takes the transaction between consecutive stages of development as its basic unit of analysis, and considers the firm and the market as alternative structural forms for organizing transactions. (Transaction cost) economics has traditionally built on analysis of comparative statics: the central problem of economic organization is considered to be the adaptation of organizational forms to the characteristics of transactions.",
                "More recently, TCEs founding father, Ronald Coase, acknowledged that this is too simplistic an approach [5, p. 245]: The analysis cannot be confined to what happens within a single firm. (. . . )",
                "What we are dealing with is a complex interrelated structure.",
                "In this paper, we study the problem of task allocation from the perspective of such a complex interrelated structure.",
                "In particular, the market cannot be considered as an organizational form without considering specific partners to interact with on the market [11].",
                "Specifically, therefore, we consider agents to be connected to each other in a <br>social network</br>.",
                "Furthermore, this network is not fully connected: as informed by the business literature, firms typically have established working relations with limited numbers of preferred partners [10]; these are the ones they consider when new tasks arrive and they have to form supply chains to allocate those tasks [19].",
                "Other than modeling the interrelated 500 978-81-904262-7-5 (RPS) c 2007 IFAAMAS structure between business partners, the <br>social network</br> introduced in this paper can also be used to represent other types of connections or constraints among autonomous entities that arise from other application domains.",
                "The next section gives a formal description of the task allocation problem on social networks.",
                "In Section 3, we prove that the complexity of this problem remains NP-hard.",
                "We then proceed to develop a distributed algorithm in Section 4, and perform a series of experiments with this algorithm, as described in Section 5.",
                "Section 6 discusses related work, and Section 7 concludes. 2.",
                "PROBLEM DESCRIPTION We formulate the social task allocation problem in this section.",
                "There is a set A of agents: A = {a1, . . . , am}.",
                "Agents need resources to complete tasks.",
                "Let R = {r1, . . . , rk} denote the collection of the resource types available to the agents A.",
                "Each agent a ∈ A controls a fixed amount of resources for each resource type in R, which is defined by a resource function: rsc : A × R → N. Moreover, we assume agents are connected by a <br>social network</br>.",
                "Definition 1 (<br>social network</br>).",
                "An agent <br>social network</br> SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ∈ AE indicates the existence of a social connection between agents ai and aj.",
                "Suppose a set of tasks T = {t1, t2, . . . , tn} arrives at such an agent <br>social network</br>.",
                "Each task t ∈ T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the utility gained if task t is accomplished, and the resource function rsc : T ×R → N specifies the amount of resources required for the accomplishment of task t. Furthermore, a location function loc : T → A defines the locations (i.e., agents) at which the tasks arrive in the <br>social network</br>.",
                "An agent a that is the location of a task t, i.e. loc(t) = a, is called the manager of this task.",
                "Each task t ∈ T needs some specific resources from the agents in order to complete the task.",
                "The exact assignment of tasks to agents is defined by a task allocation.",
                "Definition 2 (Task allocation).",
                "Given a set of tasks T = {t1, . . . , tn} and a set of agents A = {a1, . . . , am} in a <br>social network</br> SN, a task allocation is a mapping φ : T × A × R → N. A valid task allocation in SN must satisfy the following constrains: • A task allocation must be correct.",
                "Each agent a ∈ A cannot use more than its available resources, i.e. for each r ∈ R, P t∈T φ(t, a, r) ≤ rsc(a, r). • A task allocation must be complete.",
                "For each task t ∈ T , either all allocated agents resources are sufficient, i.e. for each r ∈ R, P a∈A φ(t, a, r) ≥ rsc(t, r), or t is not allocated, i.e. φ(t, ·, ·) = 0. • A task allocation must obey the social relationships.",
                "Each task t ∈ T can only be allocated to agents that are (direct) neighbors of agent loc(t) in the <br>social network</br> SN.",
                "Each such agent that can contribute to a task is called a contractor.",
                "We write Tφ to represent the tasks that are fully allocated in φ.",
                "The utility of φ is then the summation of the utilities of each task in Tφ, i.e., Uφ = P t∈Tφ u(t).",
                "Using this notation, we define the efficient task allocation below.",
                "Definition 3 (Efficient task allocation).",
                "We say a task allocation φ is efficient if it is valid and Uφ is maximized, i.e., Uφ = max( P t∈Tφ u(t)).",
                "We are now ready to define the task allocation problem in <br>social network</br> that we study in this paper.",
                "Definition 4 (Social task allocation problem).",
                "Given a set of agents A connected by a <br>social network</br> SN = (A, AE), and a finite set of tasks T , the social task allocation problem (or STAP for short) is the problem of finding the efficient task allocation φ, such that φ is valid and the social welfare Uφ is maximized. 3.",
                "COMPLEXITY RESULTS The traditional task allocation problem, TAP (without the condition of the <br>social network</br> SN), is NP-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set.",
                "Although we may consider the TAP as a special case of the STAP by assuming agents are fully connected, we cannot directly use the complexity results from the TAP, since we study the STAP in an arbitrary <br>social network</br>, which, as we argued in the introduction, should be partially connected.",
                "We now show that the TAP with an arbitrary <br>social network</br> is also NP-complete, even when the utility of each task is 1, and the quantity of all required and available resources is 1.",
                "Theorem 1.",
                "Given the social task allocation problem with an arbitrary <br>social network</br>, as defined in Definition 4, the problem of deciding whether a task allocation φ with utility more than k exists is NP-complete.",
                "Proof.",
                "We first show that the problem is in NP.",
                "Given an instance of the problem and an integer k, we can verify in polynomial time whether an allocation φ is a valid allocation and whether the utility of φ is greater than k. We now prove that the STAP is NP-hard by showing that MAXIMUM INDEPENDENT SET ≤P STAP.",
                "Given an undirected graph G = (V, E) and an integer k, we construct a network G = (V , E ) which has an efficient task allocation with k tasks of utility 1 allocated if and only if G has an independent set (IS) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 Figure 1: The MIS problem can be reduced to the STAP.",
                "The left figure is an undirected graph G, which has the optimal solution {v1, v4} or {v2, v3}; the right figure is the constructed instance of the STAP, where the optimal allocation is {t1, t4} or {t2, t3}.",
                "An instance of the following construction is shown in Figure 1.",
                "For each node v ∈ V and each edge e ∈ E in the graph G, we create a vertex agent av and an edge agent ae in G .",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 501 When v was incident to e in G we correspondingly add an edge e in G between av and ae.",
                "We assign each agent in G one resource, which is related to the node or the edge in the graph G, i.e., for each v ∈ V , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ E, rsc(ae) = {e}.",
                "Each vertex agent avi in G has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ E}.",
                "There is no task on the edge agents in G .",
                "We define utility 1 for each task, and the quantity of all required and available resources to be 1.",
                "Taken an instance of the IS problem, suppose there is a solution of size k, i.e., a subset N ⊆ V such that no two vertices in N are joined by an edge in E and |N| = k. N specifies a set of vertex agents AN in the corresponding graph G .",
                "Given two agents a1, a2 ∈ AN we now know that there is no edge agent ae connected to both a1 and a2.",
                "Thus, for each agent a ∈ AN , a assigns its task to the edge agents which are connected to a.",
                "All other vertex agents a /∈ AN are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ AN .",
                "The set of tasks of the agents AN (|AN | = k) is thus the maximum set of tasks that can be allocated.",
                "The utility of this allocation is k. Similarly, if there is a solution for the STAP with the utility value k, and the allocated task set is N, then for the IS problem, there exists a maximum independent set N of size k in G. An example can be found in Figure 1.",
                "We just proved that the STAP is NP-hard for an arbitrary graph.",
                "In our proof, the complexity comes from the introduction of a <br>social network</br>.",
                "One may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant.",
                "We now give a complexity result on this class of networks as follows.",
                "Theorem 2.",
                "Let the number of neighbors of each agent in the <br>social network</br> SN be bounded by Δ for Δ ≥ 3.",
                "Computing the efficient task allocation given such a network is NP-complete.",
                "In addition, it is not approximable within Δε for some ε > 0.",
                "Proof.",
                "It has been shown in [2] that the maximum independent set problem in the case of the degree bounded by Δ for Δ ≥ 3 is NP-complete and is not approximable within Δε for some ε > 0.",
                "Using the similar reduction from the proof of Theorem 1, this result also holds for the STAP.",
                "Since our problem is as hard as MIS as shown in Theorem 1, it is not possible to give a worst case bound better than Δε for any polynomial time algorithm, unless P = NP. 4.",
                "ALGORITHMS To deal with the problem of allocating tasks in a <br>social network</br>, we present a distributed algorithm.",
                "We introduce this algorithm by describing the protocol for the agents.",
                "After that we give the optimal, centralized algorithm and an upper bound algorithm, which we use in Section 5 to benchmark the quality of our distributed algorithm. 4.1 Protocol for distributed task allocation We can summarize the description of the task allocation problem in social networks from Section 2 as follows.",
                "We Algorithm 1 Greedy distributed allocation protocol (GDAP).",
                "Each manager a calculates the efficiency e(t) for each of their tasks t ∈ Ta, and then while Ta = ∅: 1.",
                "Each manager a selects the most efficient task t ∈ Ta such that for each task t ∈ Ta: e(t ) ≤ e(t). 2.",
                "Each manager a requests help for t from all its neighbors (of a) by informing these neighbors of the efficiency e(t) and the required resources for t. 3.",
                "Contractors receive and store all requests, and then offer all relevant resources to the manager for the task with the highest efficiency. 4.",
                "The managers that have received sufficient offers allocate their tasks, and inform each contractor which part of the offer is accepted.",
                "When a task is allocated, or when a manager has received offers from all neighbors, but still cannot satisfy its task, the task is removed from the task list Ta. 5.",
                "Contractors update their used resources. have a (social) network of agents.",
                "Each agent has a set of resources of different types at its disposal.",
                "We also have a set of tasks.",
                "Each task requires some resources, has a fixed benefit, and is located at a certain agent.",
                "This agent is called a manager.",
                "We only allow neighboring agents to help with a task.",
                "These agents are called contractors.",
                "Agents can fulfill the role of manager as well as contractor.",
                "The problem is to find out which tasks to execute, and which resources of which contractors to use for these tasks.",
                "The idea of the protocol is as follows.",
                "All manager agents a ∈ A try to find neighboring contractors to help them with their task(s) Ta = {ti ∈ T | loc(ti) = a}.",
                "They start with offering the task that is most efficient in terms of the ratio between benefit and required resources.",
                "Out of all tasks offered, contractors select the task with the highest efficiency, and send a bid to the related manager.",
                "A bid consists of all the resources the agent is able to supply for this task.",
                "If sufficient resources have been offered, the manager selects the required resources and informs all contractors of its choice.",
                "The efficiency of a task is defined as follows: Definition 5.",
                "The efficiency e of a task t ∈ T is defined by the utility of this task divided by the sum of all required resources: e(t) = u(t)P r∈R rsc(t,r) .",
                "A more detailed description of this protocol can be found in Algorithm 1.",
                "Here it is also defined how to determine when a task should not be offered anymore, because it is impossible to fulfill locally.",
                "Obviously, a task is also not offered anymore when it has been allocated.",
                "This protocol is such that, when no two tasks have exactly the same efficiency, in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the algorithm follows.",
                "Proposition 1.",
                "For a STAP with n tasks and m agents, the run time of the distributed algorithm is O(nm), and the number of communication messages is O(n2 m). 1 Even when some tasks have the same efficiency, it is straightforward to make this result work.",
                "For example, the implementation can ensure that the contractors choose the task with the lowest task-id. 502 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 2 Optimal social task allocation (OPT).",
                "Repeat the following for each combination of tasks: 1.",
                "If the total reward for this combination is higher than any previous combination, test if this combination is feasible as follows: 2.",
                "Create a network flow problem for each resource type r ∈ R (separately) as follows: (a) Create a source s and a sink s . (b) For each agent a ∈ A create an agent node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has. (c) For each task t ∈ T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires. (d) For each agent a connect the agent node to all task nodes of neighboring tasks, i.e., t ∈ {t ∈ T | (a, loc(t)) ∈ AE}.",
                "Give this connection unlimited capacity. 3.",
                "Solve the maximum flow problem for the created flow networks.",
                "If the maximum flow in each network is equal to the total required resources of that type, the current combination of tasks is feasible.",
                "In that case, this is the current best combination of tasks.",
                "Proof.",
                "In the worst case, in each iteration exactly one task is removed from a task list, so there are n iterations.",
                "In each iteration in the worst case (i.e., a fully connected network), for each of the O(n) managers, O(m) messages are sent.",
                "Next the task with the highest efficiency can be selected by each contractor in O(n).",
                "Assigning an allocation can be done in O(m).",
                "This leads to a total of O(n + m) operations for each iteration, and thus O(n2 + nm) operations in total.",
                "The number of messages sent is O(n(nm + nm + nm)) = O(n2 m).",
                "We establish the quality of this protocol experimentally (in Section 5).",
                "Preferably, we compare the results to the optimal solution. 4.2 Optimal social task allocation The optimal task allocation algorithm should deal with the restrictions posed by the <br>social network</br>.",
                "For this NPcomplete problem we used an exponential brute-force algorithm to consider relevant combinations of tasks to execute.",
                "For each combination we use a maximum-flow algorithm to check whether the resources are sufficient for the selected subset of tasks.",
                "The flow network describes which resources can be used for which tasks, depending on the <br>social network</br>.",
                "If the maximum flow is equal to the sum of all resources required by the subset of tasks, we know that a feasible solution exists (see Algorithm 2).",
                "Clearly, we cannot expect this optimal algorithm to be able to find solutions for larger problem sizes.",
                "To establish the quality of our protocol for large instances, we use the following method to determine an upper bound. 4.3 Upper bound for social task allocation Given a social task allocation problem, if the number of resource types for every task t ∈ T is bounded by 1, the Algorithm 3 An upper bound for social task allocation (UB).",
                "Create a network flow problem with costs as follows: 1.",
                "Create a source s and a sink s . 2.",
                "For each agent a ∈ A and each resource type ri ∈ R, create an agent-resource node ai, and an edge from s to this node with capacity equal to the amount of resources of type r agent a has available and with costs 0. 3.",
                "For each task t ∈ T and each resource type ri ∈ R, create a task-resource node ti, and an edge from this node to s with capacity equal to the amount of resources of type r task t requires and costs −e(t). 4.",
                "For each resource type ri ∈ R and for each agent a connect the agent-resource node ai to all task-resource nodes ti for neighboring tasks t ∈ {t ∈ T | (a, loc(t)) ∈ AE or a = loc(t)}.",
                "Give this connection unlimited capacity and zero costs. 5.",
                "Create an edge directly from s to s with unlimited capacity and zero costs.",
                "Solve the minimum cost flow network problem for this network.",
                "The costs of the resulting network is an upper bound for the social task allocation problem. problem is polynomially solvable by transforming it to a flow network problem.",
                "Our method for efficiently calculating an upper bound for STAP makes use of this special case by converting any given STAP instance P into a new problem P where each task only has one resource type.",
                "More specifically, for every task t ∈ T with utility u(t), we do the following.",
                "Let m be the number of resource types {r1, . . . , rm} required by t. We then split t into a set of m tasks T = {t1, . . . , tm} where each task ti only has one unique resource type (of {r1, . . . , rm}) and each task has a fair share of the utility, i.e., the efficiency of t from Definition 5 times the amount of this resource type rsc(ti, ri).",
                "After polynomially performing this conversion for every task in T , the original problem P becomes the special case P .",
                "Note that the set of valid allocations in P is only a subset of the set of valid allocations in P , because it is now possible to partially allocate a task.",
                "From this it is easy to see that the solution of P gives an upper bound of the solution of the original problem P. To compute the optimal solution for P , we transform it to a minimum cost flow problem.",
                "We model the cost in the flow network by the negation of the new tasks utility.",
                "A polynomial-time implementation of a scaling minimum cost flow algorithm [9] is used for the computation.",
                "The resulting minimum cost flow represents a maximum allocation of the tasks for P .",
                "The detailed modeling is described in Algorithm 3.",
                "In the next section, we use this upper bound to estimate the quality of the GDAP for large-scale instances. 5.",
                "EXPERIMENTS We implemented the greedy distributed allocation protocol (GDAP), the optimal allocation algorithm (OPT), and the upper bound algorithm (UB) in Java, and tested them on a Linux PC.",
                "The purpose of these experiments is to study the performance of the distributed algorithm in different problem settings using different social networks.",
                "The perThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 2: The solution qualities of the GDAP and the upper bound depend on the resource ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 Numberofagents Degree small-world random scale-free Figure 3: The histogram of the degrees. formance measurements are the solution quality and computation time, where the solution quality (SQ) is computed as follows.",
                "When the number of tasks is small, we compare the output of the distributed algorithm with the optimal solution, i.e., SQ = GDAP OP T , but if it is not feasible to compute the optimal solution, we use the value returned by the upper bound algorithm for evaluation, i.e., SQ = GDAP UB .",
                "To see whether the latter is a good measure, we also compare the quality of the upper bound to the optimal solution for smaller problems.",
                "In the following, we describe the setup of all experiments, and present the results. 5.1 Experimental settings We consider several experimental environments.",
                "In all environments the agents are connected by a <br>social network</br>.",
                "In the experiments, three different networks are used to simulate the social relationships among agents in potential realworld problems.",
                "Small-world networks are networks where most neighbors of an agent are also connected to each other.",
                "For the experiments we use a method for generating random small-world networks proposed by Watts et al. [22], with a fixed rewiring probability p = 0.05.",
                "Scale-free networks have the property that a couple of nodes have many connections, and many nodes have only a small number of connections.",
                "To generate these we use the implementation in the JUNG library of the generator proposed by Barab´asi and Albert [3].",
                "We also generate random networks as follows.",
                "First we connect each agent to another agent such that all agents are connected.",
                "Next, we randomly add connections until the desired average degree has been reached.",
                "We now describe the different settings used in our experiments with both small and large-scale problems.",
                "Setting 1.",
                "The number of agents is 40, and the number of tasks is 20.",
                "The number of different resource types is bounded by 5, and the average number of resources required by a task is 30.",
                "Consequently, the total number of resources required by the tasks is fixed.",
                "However, the resources available to the agents are varied.",
                "We define the resource ratio to refer to the ratio between the total number of available resources and the total number of required resources.",
                "Resources are allocated uniformly to the agents.",
                "The average degrees of the networks may also change.",
                "In this setting the task benefits are distributed normally around the number of resources required.",
                "Setting 2.",
                "This setting is similar to Setting 1, but here we let the benefits of the tasks vary dramatically-40% of the tasks have around 10 times higher benefit than the other 60% of the tasks.",
                "Setting 3.",
                "This setting is for large-scale problems.",
                "The ratio between the number of agents and the number of tasks is set to 5/3, and the number of agents varies from 100 to 2000.",
                "We also fix the resource ratio to 1.2 and the average degree to 6.",
                "The number of different resource types is 20, and the average resource requirement of a tasks is 100.",
                "The task benefits are again normally distributed. 5.2 Experimental results The experiments are done with the three different settings in the three different networks mentioned before, where each recorded data is the average over 20 random instances. 5.2.1 Experiment 1 Experimental setting 1 is used for this set of experiments.",
                "We would like to see how the GDAP behaves in the different networks when the number of resources available to the agents is changing.",
                "We also study the behavior of our upper bound algorithm.",
                "For this experiment we fix the average number of neighbors (degree) in each network type to six.",
                "In Figure 2 we see how the quality of both the upper bound and the GDAP algorithm depends on the resource ratio.",
                "Remarkably, for lower resource ratios our GDAP is much closer to the optimal allocation than the upper bound.",
                "When the resource ratio grows above 1.5, the graphs of the upper bound and the GDAP converge, meaning that both are really close to the optimal solution.",
                "This can be explained by the fact that when plenty of resources are available, all tasks can be allocated without any conflicts.",
                "However, when resources are very scarce, the upper bound is much too optimistic, because it is based on the allocation of sub-tasks per resource type, and does not reason about how many of the tasks can actually be allocated completely.",
                "We also notice from the graph that the solution quality of the GDAP on all three networks is quite high (over 0.8) when the available resource is very limited (0.3).",
                "It drops below 0.8 with the increased ratio and goes up again once there are plenty of resources available (resource ratio 0.9).",
                "Clearly, if 504 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 4: The quality of the GDAP and the upper bound depend on the network degree. resources are really scarce, only a few tasks can be successfully allocated even by the optimal algorithm.",
                "Therefore, the GDAP is able to give quite a good allocation.",
                "Although the differences are minor, it can also be seen that the results for the small-world network are consistently slightly better than those of random networks, which in turn outperform scale-free networks.",
                "This can be understood by looking at the distribution of the agents degree, as shown in Figure 3.",
                "In this experiment, in the small-world network almost every manager has a degree of six.",
                "In random networks, the degree varies between one and about ten.",
                "However, in the scale-free network, most nodes have only three or four connections, and only a very few have up to twenty connections.",
                "As we will see in the next experiment, having more connections means getting better results.",
                "For the next experiment we fix the resource ratio to 1.0 and study the quality of both the upper bound and the GDAP algorithm related to the degree of the <br>social network</br>.",
                "The result can be found in Figure 4.",
                "In this figure we can see that a high average degree also leads to convergence of the upper bound and the GDAP.",
                "Obviously, when managers have many connections, it becomes easier to allocate tasks.",
                "An exception is, similar to what we have seen in Figure 2, that the solution of the GDAP is also very good if the connections are extremely limited (degree 2), due to the fact that the number of possibly allocated tasks is very small.",
                "Again we see that the upper bound is not that good for problems where resources are hard to reach, i.e. in social networks with a low average degree.2 Since the solution quality clearly depends on the resource ratio as well as on the degree of the <br>social network</br>, we study the effect of changing both, to see whether they influence each other.",
                "Figure 5 shows how the solution quality depends on both the resource ratio and the network degree.",
                "This graph confirms the results that the GDAP performs better for problems with higher degree and higher resource ratio.",
                "However, it is now also more clear that it performs better for very low degree and resource availability.",
                "For this experiment with 40 agents and 20 tasks, the worst performance is met for instances with degree six and resource ratio 0.6 to instances with degree twelve and resource ratio 0.3.",
                "But even for those instances, the performance lies above 0.7. 2 The consistent standard deviation of about 15% over the 20 problem instances is not displayed as error-bars in these first graphs, because it would obfuscate the interesting correlations that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Relative reward small-world Average degree Resource ratio Relative reward Figure 5: The quality of the GDAP depends on both the resource ratio and the network degree. 5.2.2 Experiment 2 To study the robustness of the GDAP against different problem settings, we generate instances where the task benefit distribution is different: 40% of the tasks gets a 10 times higher benefit (as described in Setting 2).",
                "The effect of this different distribution can be seen in Figure 6.",
                "These two graphs show that the results for the skewed task benefit distribution are slightly better on average, both when varying the resource ratio, and when varying the average degree of the network.",
                "We argue that this can be explained by the greedy nature of GDAP, which causes the tasks with high efficiency to be allocated first, and makes the algorithm perform better in this heterogeneous setting. 5.2.3 Experiment 3 The purpose of this final experiment is to test whether the algorithm can be scaled to large problems, like applications running on the internet.",
                "We therefore generate instances where the number of agents varies from 100 to 2000, and simultaneously increase the number of tasks from 166 to 3333 (Setting 3).",
                "Figure 7 shows the run time for these instances on a Linux machine with an AMD Opteron 2.4 GHz processor.",
                "These graphs confirm the theoretical analysis from the previous section, saying that both the upper bound and the GDAP are polynomial.",
                "In fact, the graphs show that the GDAP almost behaves linearly.",
                "Here we see that the locality of the GDAP really helps in reducing the computation time.",
                "Also note that the GDAP requires even less computation time than the upper bound.",
                "The quality of the GDAP for these large instances cannot be compared to the optimal solution.",
                "Therefore, in Figure 8 the upper bound is used instead.",
                "This result shows that the GDAP behaves stably and consistently well with the increasing problem size.",
                "It also shows once more that the GDAP performs better in a small-world network. 6.",
                "RELATED WORK Task allocation in multiagent systems has been investigated by many researchers in recent years with different assumptions and emphases.",
                "However, most of the research to date on task allocation does not consider social connections among agents, and studies the problem in a centralized The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free Figure 6: The quality of the GDAP algorithm for a uniform and a skewed task benefit distribution related to the resource ratio (the first graph), and the network degree (the second graph). setting.",
                "For example, Kraus et al. [12] develop an auction protocol that enables agents to form coalitions with time constraints.",
                "It assumes each agent knows the capabilities of all others.",
                "The proposed protocol is centralized, where one manager is responsible for allocating the tasks to all coalitions.",
                "Manisterski at al. [14] discuss the possibilities of achieving efficient allocations in both cooperative and noncooperative settings.",
                "They propose a centralized algorithm to find the optimal solution.",
                "In contrast to this work, we introduce also an efficient completely distributed protocol that takes the <br>social network</br> into account.",
                "Task allocation has also been studied in distributed settings by for example Shehory and Kraus [18] and by Lerman and Shehory [13].",
                "They propose distributed algorithms with low communication complexity for forming coalitions in large-scale multiagent systems.",
                "However, they do not assume the existence of any agent network.",
                "The work of Sander et al. [16] introduces computational geometry-based algorithms for distributed task allocation in geographical domains.",
                "Agents are then allowed to move and actively search for tasks, and the capability of agents to perform tasks is homogeneous.",
                "In order to apply their approach, agents need to have some knowledge about the geographical positions of tasks and some other agents.",
                "Other work [17] proposes a location mechanism for open multiagent systems to allocate tasks to unknown agents.",
                "In this approach each agent caches a list of agents they know.",
                "The analysis of the communication complexity of this method is based on lattice-like graphs, while we investigate how to efficiently solve task allocation in a <br>social network</br>, whose topology can be arbitrary.",
                "Networks have been employed in the context of task allocation in some other works as well, for example to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time(ms) Agents upper bound - small-world upper bound - random upper bound - scale-free GDAP - small-world GDAP - random GDAP - scale-free Figure 7: The run time of the GDAP algorithm. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Rewardrelativetoupperbound Agents small-world random scale-free Figure 8: The quality of the GDAP algorithm compared to the upper bound. interactions between agents and mediators [1].",
                "Mediators in this context are agents who receive the task and have connections to other agents.",
                "They break up the task into subtasks, and negotiate with other agents to obtain commitments to execute these subtasks.",
                "Their focus is on modeling the decision process of just a single mediator.",
                "Another approach is to partition the network into cliques of nodes, representing coalitions which the agents involved may use as a coordination mechanism [20].",
                "The focus of that work is distributed coalition formation among agents, but in our approach, we do not need agents to form groups before allocating tasks.",
                "Easwaran and Pitt [6] study complex tasks that require services for their accomplishment.",
                "The problem concerns the allocation of subtasks to service providers in a supply chain.",
                "Another study of task allocation in supply chains is [21], where it is argued that the defining characteristic of Supply Chain Formation is hierarchical subtask decomposition (HSD).",
                "HSD is implemented using task dependency networks (TDN), with agents and goods as nodes, and I/O relations between them as edges.",
                "Here, the network is given, and the problem is to select a subgraph, for which the authors propose a market-based algorithm, in particular, a series of auctions.",
                "Compared to these works, our approach is more general in the sense that we are able to model different types of connections or constraints among agents for different problem domains in addition to supply chain formation.",
                "Finally, social networks have been used in the context of team formation.",
                "Previous work has shown how to learn which relations are more beneficial in the long run [8], and adapt the <br>social network</br> accordingly.",
                "We believe these results can be transferred to the domain of task allocation as well, leaving this as a topic for further study. 506 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 7.",
                "CONCLUSIONS In this paper we studied the task allocation problem in a <br>social network</br> (STAP), which can be seen as a new, more general, variant of the TAP.",
                "We believe it has a great amount of potential for realistic problems.",
                "We provided complexity results on computing the efficient solution for the STAP, as well as a bound on possible approximation algorithms.",
                "Next, we presented a distributed protocol, related to the contractnet protocol.",
                "We also introduced an exponential algorithm to compute the optimal solution, as well as a fast upperbound algorithm.",
                "Finally, we used the optimal solution and the upper-bound (for larger instances) to conduct an extensive set of experiments to assess the solution quality and the computational efficiency of the proposed distributed algorithm in different types of networks, namely, small-world networks, random networks, and scale-free networks.",
                "The results presented in this paper show that the distributed algorithm performs well in small-world, scale-free, and random networks, and for many different settings.",
                "Also other experiments were done (e.g. on grid networks) and these results held up over a wider range of scenarios.",
                "Furthermore, we showed that it scales well to large networks, both in terms of quality and of required computation time.",
                "The results also suggest that small-world networks are slightly better suited for local task allocation, because there are no nodes with very few neighbors.",
                "There are many interesting extensions to our current work.",
                "In this paper, we focus on the computational aspect in the design of the distributed algorithm.",
                "In our future work, we would also like to address some of the related issues in game theory, such as strategic agents, and show desirable properties of a distributed protocol in such a context.",
                "In the current algorithm we assume that agents can only contact their neighbors to request resources, which may explain why our algorithm performs not as good in the scalefree networks as in the small-world networks.",
                "Our future work may allow agents to reallocate (sub)tasks.",
                "We are interested in seeing how such interactions will affect the performance of task allocation in different social networks.",
                "A third interesting topic for further work is the addition of reputation information among the agents.",
                "This may help to model changing business relations and incentivize agents to follow the protocol.",
                "Finally, it would be interesting to study real-life instances of the social task allocation problem, and see how they relate to the randomly generated networks of different types studied in this paper.",
                "Acknowledgments.",
                "This work is supported by the Technology Foundation STW, applied science division of NWO, and the Ministry of Economic Affairs. 8.",
                "REFERENCES [1] S. Abdallah and V. Lesser.",
                "Modeling Task Allocation Using a Decision Theoretic Model.",
                "In Proc.",
                "AAMAS, pages 719-726.",
                "ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson, and D. Zuckerman.",
                "Derandomized Graph Products.",
                "Computational Complexity, 5(1):60-75, 1995. [3] A.-L. Barab´asi and R. Albert.",
                "Emergence of scaling in random networks.",
                "Science, 286(5439):509-512, 1999. [4] R. H. Coase.",
                "The Nature of the Firm.",
                "Economica NS, 4(16):386-405, 1937. [5] R. H. Coase.",
                "My Evolution as an Economist.",
                "In W. Breit and R. W. Spencer, editors, Lives of the Laureates, pages 227-249.",
                "MIT Press, 1995. [6] A. M. Easwaran and J. Pitt.",
                "Supply Chain Formation in Open, Market-Based Multi-Agent Systems.",
                "International J. of Computational Intelligence and Applications, 2(3):349-363, 2002. [7] I.",
                "Foster, N. R. Jennings, and C. Kesselman.",
                "Brain Meets Brawn: Why Grid and Agents Need Each Other.",
                "In Proc.",
                "AAMAS, pages 8-15, Washington, DC, USA, 2004.",
                "IEEE Computer Society. [8] M. E. Gaston and M. desJardins.",
                "Agent-organized networks for dynamic team formation.",
                "In Proc.",
                "AAMAS, pages 230-237, New York, NY, USA, 2005.",
                "ACM Press. [9] A. Goldberg.",
                "An Efficient Implementation of a Scaling Minimum-Cost Flow Algorithm.",
                "J. of Algorithms, 22:1-29, 1997. [10] R. Gulati.",
                "Does Familiarity Breed Trust?",
                "The Implications of Repeated Ties for Contractual Choice in Alliances.",
                "Academy of Management Journal, 38(1):85-112, 1995. [11] T. Klos and B. Nooteboom.",
                "Agent-based Computational Transaction Cost Economics.",
                "Economic Dynamics and Control, 25(3-4):503-526, 01. [12] S. Kraus, O. Shehory, and G. Taase.",
                "Coalition formation with uncertain heterogeneous information.",
                "In Proc.",
                "AAMAS, pages 1-8.",
                "ACM, 2003. [13] K. Lerman and O. Shehory.",
                "Coalition formation for large-scale electronic markets.",
                "In Proc.",
                "ICMAS, pages 167-174.",
                "IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus, and N. Jennings.",
                "Forming Efficient Agent Groups for Completing Complex Tasks.",
                "In Proc.",
                "AAMAS, pages 257-264.",
                "ACM, 2006. [15] J. Patel et al.",
                "Agent-Based Virtual Organizations for the Grid.",
                "Multi-Agent and Grid Systems, 1(4):237-249, 2005. [16] P. V. Sander, D. Peleshchuk, and B. J. Grosz.",
                "A scalable, distributed algorithm for efficient task allocation.",
                "In Proc.",
                "AAMAS, pages 1191-1198, New York, NY, USA, 2002.",
                "ACM Press. [17] O. Shehory.",
                "A scalable agent location mechanism.",
                "In Proc.",
                "ATAL, volume 1757 of LNCS, pages 162-172.",
                "Springer, 2000. [18] O. Shehory and S. Kraus.",
                "Methods for Task Allocation via Agent Coalition Formation.",
                "Artificial Intelligence, 101(1-2):165-200, 1998. [19] R. M. Sreenath and M. P. Singh.",
                "Agent-based service selection.",
                "Web Semantics, 1(3):261-279, 2004. [20] P. T. Toˇsi´c and G. A. Agha.",
                "Maximal Clique Based Distributed Coalition Formation for Task Allocation in Large-Scale Multi-Agent Systems.",
                "In Proc.",
                "MMAS, volume 3446 of LNAI, pages 104-120.",
                "Springer, 2005. [21] W. E. Walsh and M. P. Wellman.",
                "Modeling Supply Chain Formation in Multiagent Systems.",
                "In Proc.",
                "AMEC II, volume 1788 of LNAI, pages 94-101.",
                "Springer, 2000. [22] D. J. Watts and S. H. Strogatz.",
                "Collective dynamics of small world networks.",
                "Nature, 393:440-442, 1998.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 507"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Asignación de tareas distribuidas en las redes sociales Mathijs de Weerdt Delft Technical University Delft, Países Bajos M.M.Deweerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, Países Bajos Yingqian.zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI)), Países Bajos tomas.klos@cwi.nl Resumen Este documento propone una nueva variante del problema de asignación de tareas, donde los agentes están conectados en una \"red social\" y las tareas llegan a los agentes distribuidos por la red.",
                "Específicamente, por lo tanto, consideramos que los agentes están conectados entre sí en una \"red social\".",
                "Además de modelar la interrelada 500 978-81-904262-7-5 (RPS) C 2007 Ifaamas Structure entre socios comerciales, la \"red social\" introducida en este documento también se puede utilizar para representar otros tipos de conexiones o restricciones entre las entidades autónomas entre las entidades autónomas.que surgen de otros dominios de aplicación.",
                "Cada agente A ∈ A controla una cantidad fija de recursos para cada tipo de recurso en R, que se define por una función de recursos: RSC: A × R → N. Además, suponemos que los agentes están conectados por una \"red social\".",
                "Definición 1 (\"red social\").",
                "Un agente \"red social\" sn = (a, ae) es un gráfico no dirigido, donde los vértices A son agentes, y cada borde (ai, aj) ∈ Ae indica la existencia de una conexión social entre los agentes AI y AJ.",
                "Suponga un conjunto de tareas t = {t1, t2 ,..., TN} llega a tal agente \"red social\".",
                "Cada tarea t ∈ T se define por una tupla u (t), rsc (t), loc (t), donde u (t) es la utilidad obtenida si se logra la tarea t, y la función de recursos rsc: t × r→ N Especifica la cantidad de recursos necesarios para el logro de la tarea t.Además, una función de ubicación LOC: T → A define las ubicaciones (es decir, agentes) en las que las tareas llegan a la \"red social\".",
                "Dado un conjunto de tareas t = {t1 ,..., tn} y un conjunto de agentes a = {a1 ,..., am} En una \"red social\" Sn, una asignación de tareas es una mapeo φ: t × a × r → N. Una asignación de tareas válida en SN debe satisfacer las siguientes restricciones: • Una asignación de tareas debe ser correcta.",
                "Cada tarea t ∈ T solo puede asignarse a los agentes que son vecinos (directos) de agente loc (t) en la \"red social\" Sn."
            ],
            "translated_text": "",
            "candidates": [
                "red social",
                "red social",
                "red social",
                "red social",
                "red social",
                "red social",
                "red social",
                "red social",
                "red social",
                "red social",
                "red social",
                "red social",
                "red social",
                "red social",
                "red social",
                "red social",
                "red social",
                "red social",
                "red social",
                "red social"
            ],
            "error": []
        },
        "social relationship": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Distributed Task Allocation in Social Networks Mathijs de Weerdt Delft Technical University Delft, The Netherlands M.M.deWeerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, The Netherlands Yingqian.Zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI) Amsterdam, The Netherlands tomas.klos@cwi.nl ABSTRACT This paper proposes a new variant of the task allocation problem, where the agents are connected in a social network and tasks arrive at the agents distributed over the network.",
                "We show that the complexity of this problem remains NPhard.",
                "Moreover, it is not approximable within some factor.",
                "We develop an algorithm based on the contract-net protocol.",
                "Our algorithm is completely distributed, and it assumes that agents have only local knowledge about tasks and resources.",
                "We conduct a set of experiments to evaluate the performance and scalability of the proposed algorithm in terms of solution quality and computation time.",
                "Three different types of networks, namely small-world, random and scale-free networks, are used to represent various <br>social relationship</br>s among agents in realistic applications.",
                "The results demonstrate that our algorithm works well and that it scales well to large-scale applications.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Recent years have seen a lot of work on task and resource allocation methods, which can potentially be applied to many real-world applications.",
                "However, some interesting applications where relations between agents play a role require a slightly more general model.",
                "Such situations appear very frequently in real-world scenarios, and recent technological developments are bringing more of them within the range of task allocation methods.",
                "Especially in business applications, preferential partner selection and interaction is very common, and this aspect becomes more important for task allocation research, to the extent that technological developments need to be able to support it.",
                "For example, the development of semantic web and grid technologies leads to increased and renewed attention for the potential of the web to support business processes [7, 15].",
                "As an example, virtual organizations (VOs) are being re-invented in the context of the grid, where they are composed of a number of autonomous entities (representing different individuals, departments and organizations), each of which has a range of problem-solving capabilities and resources at its disposal [15, p. 237].",
                "The question is how VOs are to be dynamically composed and re-composed from individual agents, when different tasks and subtasks need to be performed.",
                "This would be done by allocating them to different agents who may each be capable of performing different subsets of those tasks.",
                "Similarly, supply chain formation (SCF) is concerned with the, possibly ad-hoc, allocation of services to providers in the supply chain, in such a way that overall profit is optimized [6, 21].",
                "Traditionally, such allocation decisions have been analyzed using transaction cost economics (TCE) [4], which takes the transaction between consecutive stages of development as its basic unit of analysis, and considers the firm and the market as alternative structural forms for organizing transactions. (Transaction cost) economics has traditionally built on analysis of comparative statics: the central problem of economic organization is considered to be the adaptation of organizational forms to the characteristics of transactions.",
                "More recently, TCEs founding father, Ronald Coase, acknowledged that this is too simplistic an approach [5, p. 245]: The analysis cannot be confined to what happens within a single firm. (. . . )",
                "What we are dealing with is a complex interrelated structure.",
                "In this paper, we study the problem of task allocation from the perspective of such a complex interrelated structure.",
                "In particular, the market cannot be considered as an organizational form without considering specific partners to interact with on the market [11].",
                "Specifically, therefore, we consider agents to be connected to each other in a social network.",
                "Furthermore, this network is not fully connected: as informed by the business literature, firms typically have established working relations with limited numbers of preferred partners [10]; these are the ones they consider when new tasks arrive and they have to form supply chains to allocate those tasks [19].",
                "Other than modeling the interrelated 500 978-81-904262-7-5 (RPS) c 2007 IFAAMAS structure between business partners, the social network introduced in this paper can also be used to represent other types of connections or constraints among autonomous entities that arise from other application domains.",
                "The next section gives a formal description of the task allocation problem on social networks.",
                "In Section 3, we prove that the complexity of this problem remains NP-hard.",
                "We then proceed to develop a distributed algorithm in Section 4, and perform a series of experiments with this algorithm, as described in Section 5.",
                "Section 6 discusses related work, and Section 7 concludes. 2.",
                "PROBLEM DESCRIPTION We formulate the social task allocation problem in this section.",
                "There is a set A of agents: A = {a1, . . . , am}.",
                "Agents need resources to complete tasks.",
                "Let R = {r1, . . . , rk} denote the collection of the resource types available to the agents A.",
                "Each agent a ∈ A controls a fixed amount of resources for each resource type in R, which is defined by a resource function: rsc : A × R → N. Moreover, we assume agents are connected by a social network.",
                "Definition 1 (Social network).",
                "An agent social network SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ∈ AE indicates the existence of a social connection between agents ai and aj.",
                "Suppose a set of tasks T = {t1, t2, . . . , tn} arrives at such an agent social network.",
                "Each task t ∈ T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the utility gained if task t is accomplished, and the resource function rsc : T ×R → N specifies the amount of resources required for the accomplishment of task t. Furthermore, a location function loc : T → A defines the locations (i.e., agents) at which the tasks arrive in the social network.",
                "An agent a that is the location of a task t, i.e. loc(t) = a, is called the manager of this task.",
                "Each task t ∈ T needs some specific resources from the agents in order to complete the task.",
                "The exact assignment of tasks to agents is defined by a task allocation.",
                "Definition 2 (Task allocation).",
                "Given a set of tasks T = {t1, . . . , tn} and a set of agents A = {a1, . . . , am} in a social network SN, a task allocation is a mapping φ : T × A × R → N. A valid task allocation in SN must satisfy the following constrains: • A task allocation must be correct.",
                "Each agent a ∈ A cannot use more than its available resources, i.e. for each r ∈ R, P t∈T φ(t, a, r) ≤ rsc(a, r). • A task allocation must be complete.",
                "For each task t ∈ T , either all allocated agents resources are sufficient, i.e. for each r ∈ R, P a∈A φ(t, a, r) ≥ rsc(t, r), or t is not allocated, i.e. φ(t, ·, ·) = 0. • A task allocation must obey the <br>social relationship</br>s.",
                "Each task t ∈ T can only be allocated to agents that are (direct) neighbors of agent loc(t) in the social network SN.",
                "Each such agent that can contribute to a task is called a contractor.",
                "We write Tφ to represent the tasks that are fully allocated in φ.",
                "The utility of φ is then the summation of the utilities of each task in Tφ, i.e., Uφ = P t∈Tφ u(t).",
                "Using this notation, we define the efficient task allocation below.",
                "Definition 3 (Efficient task allocation).",
                "We say a task allocation φ is efficient if it is valid and Uφ is maximized, i.e., Uφ = max( P t∈Tφ u(t)).",
                "We are now ready to define the task allocation problem in social network that we study in this paper.",
                "Definition 4 (Social task allocation problem).",
                "Given a set of agents A connected by a social network SN = (A, AE), and a finite set of tasks T , the social task allocation problem (or STAP for short) is the problem of finding the efficient task allocation φ, such that φ is valid and the social welfare Uφ is maximized. 3.",
                "COMPLEXITY RESULTS The traditional task allocation problem, TAP (without the condition of the social network SN), is NP-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set.",
                "Although we may consider the TAP as a special case of the STAP by assuming agents are fully connected, we cannot directly use the complexity results from the TAP, since we study the STAP in an arbitrary social network, which, as we argued in the introduction, should be partially connected.",
                "We now show that the TAP with an arbitrary social network is also NP-complete, even when the utility of each task is 1, and the quantity of all required and available resources is 1.",
                "Theorem 1.",
                "Given the social task allocation problem with an arbitrary social network, as defined in Definition 4, the problem of deciding whether a task allocation φ with utility more than k exists is NP-complete.",
                "Proof.",
                "We first show that the problem is in NP.",
                "Given an instance of the problem and an integer k, we can verify in polynomial time whether an allocation φ is a valid allocation and whether the utility of φ is greater than k. We now prove that the STAP is NP-hard by showing that MAXIMUM INDEPENDENT SET ≤P STAP.",
                "Given an undirected graph G = (V, E) and an integer k, we construct a network G = (V , E ) which has an efficient task allocation with k tasks of utility 1 allocated if and only if G has an independent set (IS) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 Figure 1: The MIS problem can be reduced to the STAP.",
                "The left figure is an undirected graph G, which has the optimal solution {v1, v4} or {v2, v3}; the right figure is the constructed instance of the STAP, where the optimal allocation is {t1, t4} or {t2, t3}.",
                "An instance of the following construction is shown in Figure 1.",
                "For each node v ∈ V and each edge e ∈ E in the graph G, we create a vertex agent av and an edge agent ae in G .",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 501 When v was incident to e in G we correspondingly add an edge e in G between av and ae.",
                "We assign each agent in G one resource, which is related to the node or the edge in the graph G, i.e., for each v ∈ V , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ E, rsc(ae) = {e}.",
                "Each vertex agent avi in G has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ E}.",
                "There is no task on the edge agents in G .",
                "We define utility 1 for each task, and the quantity of all required and available resources to be 1.",
                "Taken an instance of the IS problem, suppose there is a solution of size k, i.e., a subset N ⊆ V such that no two vertices in N are joined by an edge in E and |N| = k. N specifies a set of vertex agents AN in the corresponding graph G .",
                "Given two agents a1, a2 ∈ AN we now know that there is no edge agent ae connected to both a1 and a2.",
                "Thus, for each agent a ∈ AN , a assigns its task to the edge agents which are connected to a.",
                "All other vertex agents a /∈ AN are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ AN .",
                "The set of tasks of the agents AN (|AN | = k) is thus the maximum set of tasks that can be allocated.",
                "The utility of this allocation is k. Similarly, if there is a solution for the STAP with the utility value k, and the allocated task set is N, then for the IS problem, there exists a maximum independent set N of size k in G. An example can be found in Figure 1.",
                "We just proved that the STAP is NP-hard for an arbitrary graph.",
                "In our proof, the complexity comes from the introduction of a social network.",
                "One may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant.",
                "We now give a complexity result on this class of networks as follows.",
                "Theorem 2.",
                "Let the number of neighbors of each agent in the social network SN be bounded by Δ for Δ ≥ 3.",
                "Computing the efficient task allocation given such a network is NP-complete.",
                "In addition, it is not approximable within Δε for some ε > 0.",
                "Proof.",
                "It has been shown in [2] that the maximum independent set problem in the case of the degree bounded by Δ for Δ ≥ 3 is NP-complete and is not approximable within Δε for some ε > 0.",
                "Using the similar reduction from the proof of Theorem 1, this result also holds for the STAP.",
                "Since our problem is as hard as MIS as shown in Theorem 1, it is not possible to give a worst case bound better than Δε for any polynomial time algorithm, unless P = NP. 4.",
                "ALGORITHMS To deal with the problem of allocating tasks in a social network, we present a distributed algorithm.",
                "We introduce this algorithm by describing the protocol for the agents.",
                "After that we give the optimal, centralized algorithm and an upper bound algorithm, which we use in Section 5 to benchmark the quality of our distributed algorithm. 4.1 Protocol for distributed task allocation We can summarize the description of the task allocation problem in social networks from Section 2 as follows.",
                "We Algorithm 1 Greedy distributed allocation protocol (GDAP).",
                "Each manager a calculates the efficiency e(t) for each of their tasks t ∈ Ta, and then while Ta = ∅: 1.",
                "Each manager a selects the most efficient task t ∈ Ta such that for each task t ∈ Ta: e(t ) ≤ e(t). 2.",
                "Each manager a requests help for t from all its neighbors (of a) by informing these neighbors of the efficiency e(t) and the required resources for t. 3.",
                "Contractors receive and store all requests, and then offer all relevant resources to the manager for the task with the highest efficiency. 4.",
                "The managers that have received sufficient offers allocate their tasks, and inform each contractor which part of the offer is accepted.",
                "When a task is allocated, or when a manager has received offers from all neighbors, but still cannot satisfy its task, the task is removed from the task list Ta. 5.",
                "Contractors update their used resources. have a (social) network of agents.",
                "Each agent has a set of resources of different types at its disposal.",
                "We also have a set of tasks.",
                "Each task requires some resources, has a fixed benefit, and is located at a certain agent.",
                "This agent is called a manager.",
                "We only allow neighboring agents to help with a task.",
                "These agents are called contractors.",
                "Agents can fulfill the role of manager as well as contractor.",
                "The problem is to find out which tasks to execute, and which resources of which contractors to use for these tasks.",
                "The idea of the protocol is as follows.",
                "All manager agents a ∈ A try to find neighboring contractors to help them with their task(s) Ta = {ti ∈ T | loc(ti) = a}.",
                "They start with offering the task that is most efficient in terms of the ratio between benefit and required resources.",
                "Out of all tasks offered, contractors select the task with the highest efficiency, and send a bid to the related manager.",
                "A bid consists of all the resources the agent is able to supply for this task.",
                "If sufficient resources have been offered, the manager selects the required resources and informs all contractors of its choice.",
                "The efficiency of a task is defined as follows: Definition 5.",
                "The efficiency e of a task t ∈ T is defined by the utility of this task divided by the sum of all required resources: e(t) = u(t)P r∈R rsc(t,r) .",
                "A more detailed description of this protocol can be found in Algorithm 1.",
                "Here it is also defined how to determine when a task should not be offered anymore, because it is impossible to fulfill locally.",
                "Obviously, a task is also not offered anymore when it has been allocated.",
                "This protocol is such that, when no two tasks have exactly the same efficiency, in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the algorithm follows.",
                "Proposition 1.",
                "For a STAP with n tasks and m agents, the run time of the distributed algorithm is O(nm), and the number of communication messages is O(n2 m). 1 Even when some tasks have the same efficiency, it is straightforward to make this result work.",
                "For example, the implementation can ensure that the contractors choose the task with the lowest task-id. 502 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 2 Optimal social task allocation (OPT).",
                "Repeat the following for each combination of tasks: 1.",
                "If the total reward for this combination is higher than any previous combination, test if this combination is feasible as follows: 2.",
                "Create a network flow problem for each resource type r ∈ R (separately) as follows: (a) Create a source s and a sink s . (b) For each agent a ∈ A create an agent node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has. (c) For each task t ∈ T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires. (d) For each agent a connect the agent node to all task nodes of neighboring tasks, i.e., t ∈ {t ∈ T | (a, loc(t)) ∈ AE}.",
                "Give this connection unlimited capacity. 3.",
                "Solve the maximum flow problem for the created flow networks.",
                "If the maximum flow in each network is equal to the total required resources of that type, the current combination of tasks is feasible.",
                "In that case, this is the current best combination of tasks.",
                "Proof.",
                "In the worst case, in each iteration exactly one task is removed from a task list, so there are n iterations.",
                "In each iteration in the worst case (i.e., a fully connected network), for each of the O(n) managers, O(m) messages are sent.",
                "Next the task with the highest efficiency can be selected by each contractor in O(n).",
                "Assigning an allocation can be done in O(m).",
                "This leads to a total of O(n + m) operations for each iteration, and thus O(n2 + nm) operations in total.",
                "The number of messages sent is O(n(nm + nm + nm)) = O(n2 m).",
                "We establish the quality of this protocol experimentally (in Section 5).",
                "Preferably, we compare the results to the optimal solution. 4.2 Optimal social task allocation The optimal task allocation algorithm should deal with the restrictions posed by the social network.",
                "For this NPcomplete problem we used an exponential brute-force algorithm to consider relevant combinations of tasks to execute.",
                "For each combination we use a maximum-flow algorithm to check whether the resources are sufficient for the selected subset of tasks.",
                "The flow network describes which resources can be used for which tasks, depending on the social network.",
                "If the maximum flow is equal to the sum of all resources required by the subset of tasks, we know that a feasible solution exists (see Algorithm 2).",
                "Clearly, we cannot expect this optimal algorithm to be able to find solutions for larger problem sizes.",
                "To establish the quality of our protocol for large instances, we use the following method to determine an upper bound. 4.3 Upper bound for social task allocation Given a social task allocation problem, if the number of resource types for every task t ∈ T is bounded by 1, the Algorithm 3 An upper bound for social task allocation (UB).",
                "Create a network flow problem with costs as follows: 1.",
                "Create a source s and a sink s . 2.",
                "For each agent a ∈ A and each resource type ri ∈ R, create an agent-resource node ai, and an edge from s to this node with capacity equal to the amount of resources of type r agent a has available and with costs 0. 3.",
                "For each task t ∈ T and each resource type ri ∈ R, create a task-resource node ti, and an edge from this node to s with capacity equal to the amount of resources of type r task t requires and costs −e(t). 4.",
                "For each resource type ri ∈ R and for each agent a connect the agent-resource node ai to all task-resource nodes ti for neighboring tasks t ∈ {t ∈ T | (a, loc(t)) ∈ AE or a = loc(t)}.",
                "Give this connection unlimited capacity and zero costs. 5.",
                "Create an edge directly from s to s with unlimited capacity and zero costs.",
                "Solve the minimum cost flow network problem for this network.",
                "The costs of the resulting network is an upper bound for the social task allocation problem. problem is polynomially solvable by transforming it to a flow network problem.",
                "Our method for efficiently calculating an upper bound for STAP makes use of this special case by converting any given STAP instance P into a new problem P where each task only has one resource type.",
                "More specifically, for every task t ∈ T with utility u(t), we do the following.",
                "Let m be the number of resource types {r1, . . . , rm} required by t. We then split t into a set of m tasks T = {t1, . . . , tm} where each task ti only has one unique resource type (of {r1, . . . , rm}) and each task has a fair share of the utility, i.e., the efficiency of t from Definition 5 times the amount of this resource type rsc(ti, ri).",
                "After polynomially performing this conversion for every task in T , the original problem P becomes the special case P .",
                "Note that the set of valid allocations in P is only a subset of the set of valid allocations in P , because it is now possible to partially allocate a task.",
                "From this it is easy to see that the solution of P gives an upper bound of the solution of the original problem P. To compute the optimal solution for P , we transform it to a minimum cost flow problem.",
                "We model the cost in the flow network by the negation of the new tasks utility.",
                "A polynomial-time implementation of a scaling minimum cost flow algorithm [9] is used for the computation.",
                "The resulting minimum cost flow represents a maximum allocation of the tasks for P .",
                "The detailed modeling is described in Algorithm 3.",
                "In the next section, we use this upper bound to estimate the quality of the GDAP for large-scale instances. 5.",
                "EXPERIMENTS We implemented the greedy distributed allocation protocol (GDAP), the optimal allocation algorithm (OPT), and the upper bound algorithm (UB) in Java, and tested them on a Linux PC.",
                "The purpose of these experiments is to study the performance of the distributed algorithm in different problem settings using different social networks.",
                "The perThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 2: The solution qualities of the GDAP and the upper bound depend on the resource ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 Numberofagents Degree small-world random scale-free Figure 3: The histogram of the degrees. formance measurements are the solution quality and computation time, where the solution quality (SQ) is computed as follows.",
                "When the number of tasks is small, we compare the output of the distributed algorithm with the optimal solution, i.e., SQ = GDAP OP T , but if it is not feasible to compute the optimal solution, we use the value returned by the upper bound algorithm for evaluation, i.e., SQ = GDAP UB .",
                "To see whether the latter is a good measure, we also compare the quality of the upper bound to the optimal solution for smaller problems.",
                "In the following, we describe the setup of all experiments, and present the results. 5.1 Experimental settings We consider several experimental environments.",
                "In all environments the agents are connected by a social network.",
                "In the experiments, three different networks are used to simulate the <br>social relationship</br>s among agents in potential realworld problems.",
                "Small-world networks are networks where most neighbors of an agent are also connected to each other.",
                "For the experiments we use a method for generating random small-world networks proposed by Watts et al. [22], with a fixed rewiring probability p = 0.05.",
                "Scale-free networks have the property that a couple of nodes have many connections, and many nodes have only a small number of connections.",
                "To generate these we use the implementation in the JUNG library of the generator proposed by Barab´asi and Albert [3].",
                "We also generate random networks as follows.",
                "First we connect each agent to another agent such that all agents are connected.",
                "Next, we randomly add connections until the desired average degree has been reached.",
                "We now describe the different settings used in our experiments with both small and large-scale problems.",
                "Setting 1.",
                "The number of agents is 40, and the number of tasks is 20.",
                "The number of different resource types is bounded by 5, and the average number of resources required by a task is 30.",
                "Consequently, the total number of resources required by the tasks is fixed.",
                "However, the resources available to the agents are varied.",
                "We define the resource ratio to refer to the ratio between the total number of available resources and the total number of required resources.",
                "Resources are allocated uniformly to the agents.",
                "The average degrees of the networks may also change.",
                "In this setting the task benefits are distributed normally around the number of resources required.",
                "Setting 2.",
                "This setting is similar to Setting 1, but here we let the benefits of the tasks vary dramatically-40% of the tasks have around 10 times higher benefit than the other 60% of the tasks.",
                "Setting 3.",
                "This setting is for large-scale problems.",
                "The ratio between the number of agents and the number of tasks is set to 5/3, and the number of agents varies from 100 to 2000.",
                "We also fix the resource ratio to 1.2 and the average degree to 6.",
                "The number of different resource types is 20, and the average resource requirement of a tasks is 100.",
                "The task benefits are again normally distributed. 5.2 Experimental results The experiments are done with the three different settings in the three different networks mentioned before, where each recorded data is the average over 20 random instances. 5.2.1 Experiment 1 Experimental setting 1 is used for this set of experiments.",
                "We would like to see how the GDAP behaves in the different networks when the number of resources available to the agents is changing.",
                "We also study the behavior of our upper bound algorithm.",
                "For this experiment we fix the average number of neighbors (degree) in each network type to six.",
                "In Figure 2 we see how the quality of both the upper bound and the GDAP algorithm depends on the resource ratio.",
                "Remarkably, for lower resource ratios our GDAP is much closer to the optimal allocation than the upper bound.",
                "When the resource ratio grows above 1.5, the graphs of the upper bound and the GDAP converge, meaning that both are really close to the optimal solution.",
                "This can be explained by the fact that when plenty of resources are available, all tasks can be allocated without any conflicts.",
                "However, when resources are very scarce, the upper bound is much too optimistic, because it is based on the allocation of sub-tasks per resource type, and does not reason about how many of the tasks can actually be allocated completely.",
                "We also notice from the graph that the solution quality of the GDAP on all three networks is quite high (over 0.8) when the available resource is very limited (0.3).",
                "It drops below 0.8 with the increased ratio and goes up again once there are plenty of resources available (resource ratio 0.9).",
                "Clearly, if 504 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 4: The quality of the GDAP and the upper bound depend on the network degree. resources are really scarce, only a few tasks can be successfully allocated even by the optimal algorithm.",
                "Therefore, the GDAP is able to give quite a good allocation.",
                "Although the differences are minor, it can also be seen that the results for the small-world network are consistently slightly better than those of random networks, which in turn outperform scale-free networks.",
                "This can be understood by looking at the distribution of the agents degree, as shown in Figure 3.",
                "In this experiment, in the small-world network almost every manager has a degree of six.",
                "In random networks, the degree varies between one and about ten.",
                "However, in the scale-free network, most nodes have only three or four connections, and only a very few have up to twenty connections.",
                "As we will see in the next experiment, having more connections means getting better results.",
                "For the next experiment we fix the resource ratio to 1.0 and study the quality of both the upper bound and the GDAP algorithm related to the degree of the social network.",
                "The result can be found in Figure 4.",
                "In this figure we can see that a high average degree also leads to convergence of the upper bound and the GDAP.",
                "Obviously, when managers have many connections, it becomes easier to allocate tasks.",
                "An exception is, similar to what we have seen in Figure 2, that the solution of the GDAP is also very good if the connections are extremely limited (degree 2), due to the fact that the number of possibly allocated tasks is very small.",
                "Again we see that the upper bound is not that good for problems where resources are hard to reach, i.e. in social networks with a low average degree.2 Since the solution quality clearly depends on the resource ratio as well as on the degree of the social network, we study the effect of changing both, to see whether they influence each other.",
                "Figure 5 shows how the solution quality depends on both the resource ratio and the network degree.",
                "This graph confirms the results that the GDAP performs better for problems with higher degree and higher resource ratio.",
                "However, it is now also more clear that it performs better for very low degree and resource availability.",
                "For this experiment with 40 agents and 20 tasks, the worst performance is met for instances with degree six and resource ratio 0.6 to instances with degree twelve and resource ratio 0.3.",
                "But even for those instances, the performance lies above 0.7. 2 The consistent standard deviation of about 15% over the 20 problem instances is not displayed as error-bars in these first graphs, because it would obfuscate the interesting correlations that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Relative reward small-world Average degree Resource ratio Relative reward Figure 5: The quality of the GDAP depends on both the resource ratio and the network degree. 5.2.2 Experiment 2 To study the robustness of the GDAP against different problem settings, we generate instances where the task benefit distribution is different: 40% of the tasks gets a 10 times higher benefit (as described in Setting 2).",
                "The effect of this different distribution can be seen in Figure 6.",
                "These two graphs show that the results for the skewed task benefit distribution are slightly better on average, both when varying the resource ratio, and when varying the average degree of the network.",
                "We argue that this can be explained by the greedy nature of GDAP, which causes the tasks with high efficiency to be allocated first, and makes the algorithm perform better in this heterogeneous setting. 5.2.3 Experiment 3 The purpose of this final experiment is to test whether the algorithm can be scaled to large problems, like applications running on the internet.",
                "We therefore generate instances where the number of agents varies from 100 to 2000, and simultaneously increase the number of tasks from 166 to 3333 (Setting 3).",
                "Figure 7 shows the run time for these instances on a Linux machine with an AMD Opteron 2.4 GHz processor.",
                "These graphs confirm the theoretical analysis from the previous section, saying that both the upper bound and the GDAP are polynomial.",
                "In fact, the graphs show that the GDAP almost behaves linearly.",
                "Here we see that the locality of the GDAP really helps in reducing the computation time.",
                "Also note that the GDAP requires even less computation time than the upper bound.",
                "The quality of the GDAP for these large instances cannot be compared to the optimal solution.",
                "Therefore, in Figure 8 the upper bound is used instead.",
                "This result shows that the GDAP behaves stably and consistently well with the increasing problem size.",
                "It also shows once more that the GDAP performs better in a small-world network. 6.",
                "RELATED WORK Task allocation in multiagent systems has been investigated by many researchers in recent years with different assumptions and emphases.",
                "However, most of the research to date on task allocation does not consider social connections among agents, and studies the problem in a centralized The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free Figure 6: The quality of the GDAP algorithm for a uniform and a skewed task benefit distribution related to the resource ratio (the first graph), and the network degree (the second graph). setting.",
                "For example, Kraus et al. [12] develop an auction protocol that enables agents to form coalitions with time constraints.",
                "It assumes each agent knows the capabilities of all others.",
                "The proposed protocol is centralized, where one manager is responsible for allocating the tasks to all coalitions.",
                "Manisterski at al. [14] discuss the possibilities of achieving efficient allocations in both cooperative and noncooperative settings.",
                "They propose a centralized algorithm to find the optimal solution.",
                "In contrast to this work, we introduce also an efficient completely distributed protocol that takes the social network into account.",
                "Task allocation has also been studied in distributed settings by for example Shehory and Kraus [18] and by Lerman and Shehory [13].",
                "They propose distributed algorithms with low communication complexity for forming coalitions in large-scale multiagent systems.",
                "However, they do not assume the existence of any agent network.",
                "The work of Sander et al. [16] introduces computational geometry-based algorithms for distributed task allocation in geographical domains.",
                "Agents are then allowed to move and actively search for tasks, and the capability of agents to perform tasks is homogeneous.",
                "In order to apply their approach, agents need to have some knowledge about the geographical positions of tasks and some other agents.",
                "Other work [17] proposes a location mechanism for open multiagent systems to allocate tasks to unknown agents.",
                "In this approach each agent caches a list of agents they know.",
                "The analysis of the communication complexity of this method is based on lattice-like graphs, while we investigate how to efficiently solve task allocation in a social network, whose topology can be arbitrary.",
                "Networks have been employed in the context of task allocation in some other works as well, for example to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time(ms) Agents upper bound - small-world upper bound - random upper bound - scale-free GDAP - small-world GDAP - random GDAP - scale-free Figure 7: The run time of the GDAP algorithm. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Rewardrelativetoupperbound Agents small-world random scale-free Figure 8: The quality of the GDAP algorithm compared to the upper bound. interactions between agents and mediators [1].",
                "Mediators in this context are agents who receive the task and have connections to other agents.",
                "They break up the task into subtasks, and negotiate with other agents to obtain commitments to execute these subtasks.",
                "Their focus is on modeling the decision process of just a single mediator.",
                "Another approach is to partition the network into cliques of nodes, representing coalitions which the agents involved may use as a coordination mechanism [20].",
                "The focus of that work is distributed coalition formation among agents, but in our approach, we do not need agents to form groups before allocating tasks.",
                "Easwaran and Pitt [6] study complex tasks that require services for their accomplishment.",
                "The problem concerns the allocation of subtasks to service providers in a supply chain.",
                "Another study of task allocation in supply chains is [21], where it is argued that the defining characteristic of Supply Chain Formation is hierarchical subtask decomposition (HSD).",
                "HSD is implemented using task dependency networks (TDN), with agents and goods as nodes, and I/O relations between them as edges.",
                "Here, the network is given, and the problem is to select a subgraph, for which the authors propose a market-based algorithm, in particular, a series of auctions.",
                "Compared to these works, our approach is more general in the sense that we are able to model different types of connections or constraints among agents for different problem domains in addition to supply chain formation.",
                "Finally, social networks have been used in the context of team formation.",
                "Previous work has shown how to learn which relations are more beneficial in the long run [8], and adapt the social network accordingly.",
                "We believe these results can be transferred to the domain of task allocation as well, leaving this as a topic for further study. 506 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 7.",
                "CONCLUSIONS In this paper we studied the task allocation problem in a social network (STAP), which can be seen as a new, more general, variant of the TAP.",
                "We believe it has a great amount of potential for realistic problems.",
                "We provided complexity results on computing the efficient solution for the STAP, as well as a bound on possible approximation algorithms.",
                "Next, we presented a distributed protocol, related to the contractnet protocol.",
                "We also introduced an exponential algorithm to compute the optimal solution, as well as a fast upperbound algorithm.",
                "Finally, we used the optimal solution and the upper-bound (for larger instances) to conduct an extensive set of experiments to assess the solution quality and the computational efficiency of the proposed distributed algorithm in different types of networks, namely, small-world networks, random networks, and scale-free networks.",
                "The results presented in this paper show that the distributed algorithm performs well in small-world, scale-free, and random networks, and for many different settings.",
                "Also other experiments were done (e.g. on grid networks) and these results held up over a wider range of scenarios.",
                "Furthermore, we showed that it scales well to large networks, both in terms of quality and of required computation time.",
                "The results also suggest that small-world networks are slightly better suited for local task allocation, because there are no nodes with very few neighbors.",
                "There are many interesting extensions to our current work.",
                "In this paper, we focus on the computational aspect in the design of the distributed algorithm.",
                "In our future work, we would also like to address some of the related issues in game theory, such as strategic agents, and show desirable properties of a distributed protocol in such a context.",
                "In the current algorithm we assume that agents can only contact their neighbors to request resources, which may explain why our algorithm performs not as good in the scalefree networks as in the small-world networks.",
                "Our future work may allow agents to reallocate (sub)tasks.",
                "We are interested in seeing how such interactions will affect the performance of task allocation in different social networks.",
                "A third interesting topic for further work is the addition of reputation information among the agents.",
                "This may help to model changing business relations and incentivize agents to follow the protocol.",
                "Finally, it would be interesting to study real-life instances of the social task allocation problem, and see how they relate to the randomly generated networks of different types studied in this paper.",
                "Acknowledgments.",
                "This work is supported by the Technology Foundation STW, applied science division of NWO, and the Ministry of Economic Affairs. 8.",
                "REFERENCES [1] S. Abdallah and V. Lesser.",
                "Modeling Task Allocation Using a Decision Theoretic Model.",
                "In Proc.",
                "AAMAS, pages 719-726.",
                "ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson, and D. Zuckerman.",
                "Derandomized Graph Products.",
                "Computational Complexity, 5(1):60-75, 1995. [3] A.-L. Barab´asi and R. Albert.",
                "Emergence of scaling in random networks.",
                "Science, 286(5439):509-512, 1999. [4] R. H. Coase.",
                "The Nature of the Firm.",
                "Economica NS, 4(16):386-405, 1937. [5] R. H. Coase.",
                "My Evolution as an Economist.",
                "In W. Breit and R. W. Spencer, editors, Lives of the Laureates, pages 227-249.",
                "MIT Press, 1995. [6] A. M. Easwaran and J. Pitt.",
                "Supply Chain Formation in Open, Market-Based Multi-Agent Systems.",
                "International J. of Computational Intelligence and Applications, 2(3):349-363, 2002. [7] I.",
                "Foster, N. R. Jennings, and C. Kesselman.",
                "Brain Meets Brawn: Why Grid and Agents Need Each Other.",
                "In Proc.",
                "AAMAS, pages 8-15, Washington, DC, USA, 2004.",
                "IEEE Computer Society. [8] M. E. Gaston and M. desJardins.",
                "Agent-organized networks for dynamic team formation.",
                "In Proc.",
                "AAMAS, pages 230-237, New York, NY, USA, 2005.",
                "ACM Press. [9] A. Goldberg.",
                "An Efficient Implementation of a Scaling Minimum-Cost Flow Algorithm.",
                "J. of Algorithms, 22:1-29, 1997. [10] R. Gulati.",
                "Does Familiarity Breed Trust?",
                "The Implications of Repeated Ties for Contractual Choice in Alliances.",
                "Academy of Management Journal, 38(1):85-112, 1995. [11] T. Klos and B. Nooteboom.",
                "Agent-based Computational Transaction Cost Economics.",
                "Economic Dynamics and Control, 25(3-4):503-526, 01. [12] S. Kraus, O. Shehory, and G. Taase.",
                "Coalition formation with uncertain heterogeneous information.",
                "In Proc.",
                "AAMAS, pages 1-8.",
                "ACM, 2003. [13] K. Lerman and O. Shehory.",
                "Coalition formation for large-scale electronic markets.",
                "In Proc.",
                "ICMAS, pages 167-174.",
                "IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus, and N. Jennings.",
                "Forming Efficient Agent Groups for Completing Complex Tasks.",
                "In Proc.",
                "AAMAS, pages 257-264.",
                "ACM, 2006. [15] J. Patel et al.",
                "Agent-Based Virtual Organizations for the Grid.",
                "Multi-Agent and Grid Systems, 1(4):237-249, 2005. [16] P. V. Sander, D. Peleshchuk, and B. J. Grosz.",
                "A scalable, distributed algorithm for efficient task allocation.",
                "In Proc.",
                "AAMAS, pages 1191-1198, New York, NY, USA, 2002.",
                "ACM Press. [17] O. Shehory.",
                "A scalable agent location mechanism.",
                "In Proc.",
                "ATAL, volume 1757 of LNCS, pages 162-172.",
                "Springer, 2000. [18] O. Shehory and S. Kraus.",
                "Methods for Task Allocation via Agent Coalition Formation.",
                "Artificial Intelligence, 101(1-2):165-200, 1998. [19] R. M. Sreenath and M. P. Singh.",
                "Agent-based service selection.",
                "Web Semantics, 1(3):261-279, 2004. [20] P. T. Toˇsi´c and G. A. Agha.",
                "Maximal Clique Based Distributed Coalition Formation for Task Allocation in Large-Scale Multi-Agent Systems.",
                "In Proc.",
                "MMAS, volume 3446 of LNAI, pages 104-120.",
                "Springer, 2005. [21] W. E. Walsh and M. P. Wellman.",
                "Modeling Supply Chain Formation in Multiagent Systems.",
                "In Proc.",
                "AMEC II, volume 1788 of LNAI, pages 94-101.",
                "Springer, 2000. [22] D. J. Watts and S. H. Strogatz.",
                "Collective dynamics of small world networks.",
                "Nature, 393:440-442, 1998.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 507"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Se utilizan tres tipos diferentes de redes, a saber, las redes de pequeños mundos, aleatorios y sin escala, para representar varias \"relaciones sociales\" entre los agentes en aplicaciones realistas.",
                "Para cada tarea t ∈ T, todos los recursos de los agentes asignados son suficientes, es decir, para cada r ∈ R, p a∈A φ (t, a, r) ≥ rsc (t, r), o t no se asigna, es decir, φ φ(t, ·, ·) = 0. • Una asignación de tareas debe obedecer la \"relación social\" s.",
                "En los experimentos, se utilizan tres redes diferentes para simular las \"relaciones sociales\" entre los agentes en posibles problemas del mundo real."
            ],
            "translated_text": "",
            "candidates": [
                "relación social",
                "relaciones sociales",
                "relación social",
                "relación social",
                "relación social",
                "relaciones sociales"
            ],
            "error": []
        },
        "task allocation": {
            "translated_key": "asignación de tareas",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Distributed <br>task allocation</br> in Social Networks Mathijs de Weerdt Delft Technical University Delft, The Netherlands M.M.deWeerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, The Netherlands Yingqian.Zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI) Amsterdam, The Netherlands tomas.klos@cwi.nl ABSTRACT This paper proposes a new variant of the <br>task allocation</br> problem, where the agents are connected in a social network and tasks arrive at the agents distributed over the network.",
                "We show that the complexity of this problem remains NPhard.",
                "Moreover, it is not approximable within some factor.",
                "We develop an algorithm based on the contract-net protocol.",
                "Our algorithm is completely distributed, and it assumes that agents have only local knowledge about tasks and resources.",
                "We conduct a set of experiments to evaluate the performance and scalability of the proposed algorithm in terms of solution quality and computation time.",
                "Three different types of networks, namely small-world, random and scale-free networks, are used to represent various social relationships among agents in realistic applications.",
                "The results demonstrate that our algorithm works well and that it scales well to large-scale applications.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Recent years have seen a lot of work on task and resource allocation methods, which can potentially be applied to many real-world applications.",
                "However, some interesting applications where relations between agents play a role require a slightly more general model.",
                "Such situations appear very frequently in real-world scenarios, and recent technological developments are bringing more of them within the range of <br>task allocation</br> methods.",
                "Especially in business applications, preferential partner selection and interaction is very common, and this aspect becomes more important for <br>task allocation</br> research, to the extent that technological developments need to be able to support it.",
                "For example, the development of semantic web and grid technologies leads to increased and renewed attention for the potential of the web to support business processes [7, 15].",
                "As an example, virtual organizations (VOs) are being re-invented in the context of the grid, where they are composed of a number of autonomous entities (representing different individuals, departments and organizations), each of which has a range of problem-solving capabilities and resources at its disposal [15, p. 237].",
                "The question is how VOs are to be dynamically composed and re-composed from individual agents, when different tasks and subtasks need to be performed.",
                "This would be done by allocating them to different agents who may each be capable of performing different subsets of those tasks.",
                "Similarly, supply chain formation (SCF) is concerned with the, possibly ad-hoc, allocation of services to providers in the supply chain, in such a way that overall profit is optimized [6, 21].",
                "Traditionally, such allocation decisions have been analyzed using transaction cost economics (TCE) [4], which takes the transaction between consecutive stages of development as its basic unit of analysis, and considers the firm and the market as alternative structural forms for organizing transactions. (Transaction cost) economics has traditionally built on analysis of comparative statics: the central problem of economic organization is considered to be the adaptation of organizational forms to the characteristics of transactions.",
                "More recently, TCEs founding father, Ronald Coase, acknowledged that this is too simplistic an approach [5, p. 245]: The analysis cannot be confined to what happens within a single firm. (. . . )",
                "What we are dealing with is a complex interrelated structure.",
                "In this paper, we study the problem of <br>task allocation</br> from the perspective of such a complex interrelated structure.",
                "In particular, the market cannot be considered as an organizational form without considering specific partners to interact with on the market [11].",
                "Specifically, therefore, we consider agents to be connected to each other in a social network.",
                "Furthermore, this network is not fully connected: as informed by the business literature, firms typically have established working relations with limited numbers of preferred partners [10]; these are the ones they consider when new tasks arrive and they have to form supply chains to allocate those tasks [19].",
                "Other than modeling the interrelated 500 978-81-904262-7-5 (RPS) c 2007 IFAAMAS structure between business partners, the social network introduced in this paper can also be used to represent other types of connections or constraints among autonomous entities that arise from other application domains.",
                "The next section gives a formal description of the <br>task allocation</br> problem on social networks.",
                "In Section 3, we prove that the complexity of this problem remains NP-hard.",
                "We then proceed to develop a distributed algorithm in Section 4, and perform a series of experiments with this algorithm, as described in Section 5.",
                "Section 6 discusses related work, and Section 7 concludes. 2.",
                "PROBLEM DESCRIPTION We formulate the social <br>task allocation</br> problem in this section.",
                "There is a set A of agents: A = {a1, . . . , am}.",
                "Agents need resources to complete tasks.",
                "Let R = {r1, . . . , rk} denote the collection of the resource types available to the agents A.",
                "Each agent a ∈ A controls a fixed amount of resources for each resource type in R, which is defined by a resource function: rsc : A × R → N. Moreover, we assume agents are connected by a social network.",
                "Definition 1 (Social network).",
                "An agent social network SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ∈ AE indicates the existence of a social connection between agents ai and aj.",
                "Suppose a set of tasks T = {t1, t2, . . . , tn} arrives at such an agent social network.",
                "Each task t ∈ T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the utility gained if task t is accomplished, and the resource function rsc : T ×R → N specifies the amount of resources required for the accomplishment of task t. Furthermore, a location function loc : T → A defines the locations (i.e., agents) at which the tasks arrive in the social network.",
                "An agent a that is the location of a task t, i.e. loc(t) = a, is called the manager of this task.",
                "Each task t ∈ T needs some specific resources from the agents in order to complete the task.",
                "The exact assignment of tasks to agents is defined by a <br>task allocation</br>.",
                "Definition 2 (<br>task allocation</br>).",
                "Given a set of tasks T = {t1, . . . , tn} and a set of agents A = {a1, . . . , am} in a social network SN, a <br>task allocation</br> is a mapping φ : T × A × R → N. A valid <br>task allocation</br> in SN must satisfy the following constrains: • A task allocation must be correct.",
                "Each agent a ∈ A cannot use more than its available resources, i.e. for each r ∈ R, P t∈T φ(t, a, r) ≤ rsc(a, r). • A <br>task allocation</br> must be complete.",
                "For each task t ∈ T , either all allocated agents resources are sufficient, i.e. for each r ∈ R, P a∈A φ(t, a, r) ≥ rsc(t, r), or t is not allocated, i.e. φ(t, ·, ·) = 0. • A <br>task allocation</br> must obey the social relationships.",
                "Each task t ∈ T can only be allocated to agents that are (direct) neighbors of agent loc(t) in the social network SN.",
                "Each such agent that can contribute to a task is called a contractor.",
                "We write Tφ to represent the tasks that are fully allocated in φ.",
                "The utility of φ is then the summation of the utilities of each task in Tφ, i.e., Uφ = P t∈Tφ u(t).",
                "Using this notation, we define the efficient <br>task allocation</br> below.",
                "Definition 3 (Efficient <br>task allocation</br>).",
                "We say a <br>task allocation</br> φ is efficient if it is valid and Uφ is maximized, i.e., Uφ = max( P t∈Tφ u(t)).",
                "We are now ready to define the <br>task allocation</br> problem in social network that we study in this paper.",
                "Definition 4 (Social <br>task allocation</br> problem).",
                "Given a set of agents A connected by a social network SN = (A, AE), and a finite set of tasks T , the social <br>task allocation</br> problem (or STAP for short) is the problem of finding the efficient <br>task allocation</br> φ, such that φ is valid and the social welfare Uφ is maximized. 3.",
                "COMPLEXITY RESULTS The traditional <br>task allocation</br> problem, TAP (without the condition of the social network SN), is NP-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set.",
                "Although we may consider the TAP as a special case of the STAP by assuming agents are fully connected, we cannot directly use the complexity results from the TAP, since we study the STAP in an arbitrary social network, which, as we argued in the introduction, should be partially connected.",
                "We now show that the TAP with an arbitrary social network is also NP-complete, even when the utility of each task is 1, and the quantity of all required and available resources is 1.",
                "Theorem 1.",
                "Given the social <br>task allocation</br> problem with an arbitrary social network, as defined in Definition 4, the problem of deciding whether a <br>task allocation</br> φ with utility more than k exists is NP-complete.",
                "Proof.",
                "We first show that the problem is in NP.",
                "Given an instance of the problem and an integer k, we can verify in polynomial time whether an allocation φ is a valid allocation and whether the utility of φ is greater than k. We now prove that the STAP is NP-hard by showing that MAXIMUM INDEPENDENT SET ≤P STAP.",
                "Given an undirected graph G = (V, E) and an integer k, we construct a network G = (V , E ) which has an efficient <br>task allocation</br> with k tasks of utility 1 allocated if and only if G has an independent set (IS) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 Figure 1: The MIS problem can be reduced to the STAP.",
                "The left figure is an undirected graph G, which has the optimal solution {v1, v4} or {v2, v3}; the right figure is the constructed instance of the STAP, where the optimal allocation is {t1, t4} or {t2, t3}.",
                "An instance of the following construction is shown in Figure 1.",
                "For each node v ∈ V and each edge e ∈ E in the graph G, we create a vertex agent av and an edge agent ae in G .",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 501 When v was incident to e in G we correspondingly add an edge e in G between av and ae.",
                "We assign each agent in G one resource, which is related to the node or the edge in the graph G, i.e., for each v ∈ V , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ E, rsc(ae) = {e}.",
                "Each vertex agent avi in G has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ E}.",
                "There is no task on the edge agents in G .",
                "We define utility 1 for each task, and the quantity of all required and available resources to be 1.",
                "Taken an instance of the IS problem, suppose there is a solution of size k, i.e., a subset N ⊆ V such that no two vertices in N are joined by an edge in E and |N| = k. N specifies a set of vertex agents AN in the corresponding graph G .",
                "Given two agents a1, a2 ∈ AN we now know that there is no edge agent ae connected to both a1 and a2.",
                "Thus, for each agent a ∈ AN , a assigns its task to the edge agents which are connected to a.",
                "All other vertex agents a /∈ AN are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ AN .",
                "The set of tasks of the agents AN (|AN | = k) is thus the maximum set of tasks that can be allocated.",
                "The utility of this allocation is k. Similarly, if there is a solution for the STAP with the utility value k, and the allocated task set is N, then for the IS problem, there exists a maximum independent set N of size k in G. An example can be found in Figure 1.",
                "We just proved that the STAP is NP-hard for an arbitrary graph.",
                "In our proof, the complexity comes from the introduction of a social network.",
                "One may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant.",
                "We now give a complexity result on this class of networks as follows.",
                "Theorem 2.",
                "Let the number of neighbors of each agent in the social network SN be bounded by Δ for Δ ≥ 3.",
                "Computing the efficient <br>task allocation</br> given such a network is NP-complete.",
                "In addition, it is not approximable within Δε for some ε > 0.",
                "Proof.",
                "It has been shown in [2] that the maximum independent set problem in the case of the degree bounded by Δ for Δ ≥ 3 is NP-complete and is not approximable within Δε for some ε > 0.",
                "Using the similar reduction from the proof of Theorem 1, this result also holds for the STAP.",
                "Since our problem is as hard as MIS as shown in Theorem 1, it is not possible to give a worst case bound better than Δε for any polynomial time algorithm, unless P = NP. 4.",
                "ALGORITHMS To deal with the problem of allocating tasks in a social network, we present a distributed algorithm.",
                "We introduce this algorithm by describing the protocol for the agents.",
                "After that we give the optimal, centralized algorithm and an upper bound algorithm, which we use in Section 5 to benchmark the quality of our distributed algorithm. 4.1 Protocol for distributed <br>task allocation</br> We can summarize the description of the <br>task allocation</br> problem in social networks from Section 2 as follows.",
                "We Algorithm 1 Greedy distributed allocation protocol (GDAP).",
                "Each manager a calculates the efficiency e(t) for each of their tasks t ∈ Ta, and then while Ta = ∅: 1.",
                "Each manager a selects the most efficient task t ∈ Ta such that for each task t ∈ Ta: e(t ) ≤ e(t). 2.",
                "Each manager a requests help for t from all its neighbors (of a) by informing these neighbors of the efficiency e(t) and the required resources for t. 3.",
                "Contractors receive and store all requests, and then offer all relevant resources to the manager for the task with the highest efficiency. 4.",
                "The managers that have received sufficient offers allocate their tasks, and inform each contractor which part of the offer is accepted.",
                "When a task is allocated, or when a manager has received offers from all neighbors, but still cannot satisfy its task, the task is removed from the task list Ta. 5.",
                "Contractors update their used resources. have a (social) network of agents.",
                "Each agent has a set of resources of different types at its disposal.",
                "We also have a set of tasks.",
                "Each task requires some resources, has a fixed benefit, and is located at a certain agent.",
                "This agent is called a manager.",
                "We only allow neighboring agents to help with a task.",
                "These agents are called contractors.",
                "Agents can fulfill the role of manager as well as contractor.",
                "The problem is to find out which tasks to execute, and which resources of which contractors to use for these tasks.",
                "The idea of the protocol is as follows.",
                "All manager agents a ∈ A try to find neighboring contractors to help them with their task(s) Ta = {ti ∈ T | loc(ti) = a}.",
                "They start with offering the task that is most efficient in terms of the ratio between benefit and required resources.",
                "Out of all tasks offered, contractors select the task with the highest efficiency, and send a bid to the related manager.",
                "A bid consists of all the resources the agent is able to supply for this task.",
                "If sufficient resources have been offered, the manager selects the required resources and informs all contractors of its choice.",
                "The efficiency of a task is defined as follows: Definition 5.",
                "The efficiency e of a task t ∈ T is defined by the utility of this task divided by the sum of all required resources: e(t) = u(t)P r∈R rsc(t,r) .",
                "A more detailed description of this protocol can be found in Algorithm 1.",
                "Here it is also defined how to determine when a task should not be offered anymore, because it is impossible to fulfill locally.",
                "Obviously, a task is also not offered anymore when it has been allocated.",
                "This protocol is such that, when no two tasks have exactly the same efficiency, in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the algorithm follows.",
                "Proposition 1.",
                "For a STAP with n tasks and m agents, the run time of the distributed algorithm is O(nm), and the number of communication messages is O(n2 m). 1 Even when some tasks have the same efficiency, it is straightforward to make this result work.",
                "For example, the implementation can ensure that the contractors choose the task with the lowest task-id. 502 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 2 Optimal social <br>task allocation</br> (OPT).",
                "Repeat the following for each combination of tasks: 1.",
                "If the total reward for this combination is higher than any previous combination, test if this combination is feasible as follows: 2.",
                "Create a network flow problem for each resource type r ∈ R (separately) as follows: (a) Create a source s and a sink s . (b) For each agent a ∈ A create an agent node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has. (c) For each task t ∈ T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires. (d) For each agent a connect the agent node to all task nodes of neighboring tasks, i.e., t ∈ {t ∈ T | (a, loc(t)) ∈ AE}.",
                "Give this connection unlimited capacity. 3.",
                "Solve the maximum flow problem for the created flow networks.",
                "If the maximum flow in each network is equal to the total required resources of that type, the current combination of tasks is feasible.",
                "In that case, this is the current best combination of tasks.",
                "Proof.",
                "In the worst case, in each iteration exactly one task is removed from a task list, so there are n iterations.",
                "In each iteration in the worst case (i.e., a fully connected network), for each of the O(n) managers, O(m) messages are sent.",
                "Next the task with the highest efficiency can be selected by each contractor in O(n).",
                "Assigning an allocation can be done in O(m).",
                "This leads to a total of O(n + m) operations for each iteration, and thus O(n2 + nm) operations in total.",
                "The number of messages sent is O(n(nm + nm + nm)) = O(n2 m).",
                "We establish the quality of this protocol experimentally (in Section 5).",
                "Preferably, we compare the results to the optimal solution. 4.2 Optimal social <br>task allocation</br> The optimal <br>task allocation</br> algorithm should deal with the restrictions posed by the social network.",
                "For this NPcomplete problem we used an exponential brute-force algorithm to consider relevant combinations of tasks to execute.",
                "For each combination we use a maximum-flow algorithm to check whether the resources are sufficient for the selected subset of tasks.",
                "The flow network describes which resources can be used for which tasks, depending on the social network.",
                "If the maximum flow is equal to the sum of all resources required by the subset of tasks, we know that a feasible solution exists (see Algorithm 2).",
                "Clearly, we cannot expect this optimal algorithm to be able to find solutions for larger problem sizes.",
                "To establish the quality of our protocol for large instances, we use the following method to determine an upper bound. 4.3 Upper bound for social <br>task allocation</br> Given a social <br>task allocation</br> problem, if the number of resource types for every task t ∈ T is bounded by 1, the Algorithm 3 An upper bound for social task allocation (UB).",
                "Create a network flow problem with costs as follows: 1.",
                "Create a source s and a sink s . 2.",
                "For each agent a ∈ A and each resource type ri ∈ R, create an agent-resource node ai, and an edge from s to this node with capacity equal to the amount of resources of type r agent a has available and with costs 0. 3.",
                "For each task t ∈ T and each resource type ri ∈ R, create a task-resource node ti, and an edge from this node to s with capacity equal to the amount of resources of type r task t requires and costs −e(t). 4.",
                "For each resource type ri ∈ R and for each agent a connect the agent-resource node ai to all task-resource nodes ti for neighboring tasks t ∈ {t ∈ T | (a, loc(t)) ∈ AE or a = loc(t)}.",
                "Give this connection unlimited capacity and zero costs. 5.",
                "Create an edge directly from s to s with unlimited capacity and zero costs.",
                "Solve the minimum cost flow network problem for this network.",
                "The costs of the resulting network is an upper bound for the social <br>task allocation</br> problem. problem is polynomially solvable by transforming it to a flow network problem.",
                "Our method for efficiently calculating an upper bound for STAP makes use of this special case by converting any given STAP instance P into a new problem P where each task only has one resource type.",
                "More specifically, for every task t ∈ T with utility u(t), we do the following.",
                "Let m be the number of resource types {r1, . . . , rm} required by t. We then split t into a set of m tasks T = {t1, . . . , tm} where each task ti only has one unique resource type (of {r1, . . . , rm}) and each task has a fair share of the utility, i.e., the efficiency of t from Definition 5 times the amount of this resource type rsc(ti, ri).",
                "After polynomially performing this conversion for every task in T , the original problem P becomes the special case P .",
                "Note that the set of valid allocations in P is only a subset of the set of valid allocations in P , because it is now possible to partially allocate a task.",
                "From this it is easy to see that the solution of P gives an upper bound of the solution of the original problem P. To compute the optimal solution for P , we transform it to a minimum cost flow problem.",
                "We model the cost in the flow network by the negation of the new tasks utility.",
                "A polynomial-time implementation of a scaling minimum cost flow algorithm [9] is used for the computation.",
                "The resulting minimum cost flow represents a maximum allocation of the tasks for P .",
                "The detailed modeling is described in Algorithm 3.",
                "In the next section, we use this upper bound to estimate the quality of the GDAP for large-scale instances. 5.",
                "EXPERIMENTS We implemented the greedy distributed allocation protocol (GDAP), the optimal allocation algorithm (OPT), and the upper bound algorithm (UB) in Java, and tested them on a Linux PC.",
                "The purpose of these experiments is to study the performance of the distributed algorithm in different problem settings using different social networks.",
                "The perThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 2: The solution qualities of the GDAP and the upper bound depend on the resource ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 Numberofagents Degree small-world random scale-free Figure 3: The histogram of the degrees. formance measurements are the solution quality and computation time, where the solution quality (SQ) is computed as follows.",
                "When the number of tasks is small, we compare the output of the distributed algorithm with the optimal solution, i.e., SQ = GDAP OP T , but if it is not feasible to compute the optimal solution, we use the value returned by the upper bound algorithm for evaluation, i.e., SQ = GDAP UB .",
                "To see whether the latter is a good measure, we also compare the quality of the upper bound to the optimal solution for smaller problems.",
                "In the following, we describe the setup of all experiments, and present the results. 5.1 Experimental settings We consider several experimental environments.",
                "In all environments the agents are connected by a social network.",
                "In the experiments, three different networks are used to simulate the social relationships among agents in potential realworld problems.",
                "Small-world networks are networks where most neighbors of an agent are also connected to each other.",
                "For the experiments we use a method for generating random small-world networks proposed by Watts et al. [22], with a fixed rewiring probability p = 0.05.",
                "Scale-free networks have the property that a couple of nodes have many connections, and many nodes have only a small number of connections.",
                "To generate these we use the implementation in the JUNG library of the generator proposed by Barab´asi and Albert [3].",
                "We also generate random networks as follows.",
                "First we connect each agent to another agent such that all agents are connected.",
                "Next, we randomly add connections until the desired average degree has been reached.",
                "We now describe the different settings used in our experiments with both small and large-scale problems.",
                "Setting 1.",
                "The number of agents is 40, and the number of tasks is 20.",
                "The number of different resource types is bounded by 5, and the average number of resources required by a task is 30.",
                "Consequently, the total number of resources required by the tasks is fixed.",
                "However, the resources available to the agents are varied.",
                "We define the resource ratio to refer to the ratio between the total number of available resources and the total number of required resources.",
                "Resources are allocated uniformly to the agents.",
                "The average degrees of the networks may also change.",
                "In this setting the task benefits are distributed normally around the number of resources required.",
                "Setting 2.",
                "This setting is similar to Setting 1, but here we let the benefits of the tasks vary dramatically-40% of the tasks have around 10 times higher benefit than the other 60% of the tasks.",
                "Setting 3.",
                "This setting is for large-scale problems.",
                "The ratio between the number of agents and the number of tasks is set to 5/3, and the number of agents varies from 100 to 2000.",
                "We also fix the resource ratio to 1.2 and the average degree to 6.",
                "The number of different resource types is 20, and the average resource requirement of a tasks is 100.",
                "The task benefits are again normally distributed. 5.2 Experimental results The experiments are done with the three different settings in the three different networks mentioned before, where each recorded data is the average over 20 random instances. 5.2.1 Experiment 1 Experimental setting 1 is used for this set of experiments.",
                "We would like to see how the GDAP behaves in the different networks when the number of resources available to the agents is changing.",
                "We also study the behavior of our upper bound algorithm.",
                "For this experiment we fix the average number of neighbors (degree) in each network type to six.",
                "In Figure 2 we see how the quality of both the upper bound and the GDAP algorithm depends on the resource ratio.",
                "Remarkably, for lower resource ratios our GDAP is much closer to the optimal allocation than the upper bound.",
                "When the resource ratio grows above 1.5, the graphs of the upper bound and the GDAP converge, meaning that both are really close to the optimal solution.",
                "This can be explained by the fact that when plenty of resources are available, all tasks can be allocated without any conflicts.",
                "However, when resources are very scarce, the upper bound is much too optimistic, because it is based on the allocation of sub-tasks per resource type, and does not reason about how many of the tasks can actually be allocated completely.",
                "We also notice from the graph that the solution quality of the GDAP on all three networks is quite high (over 0.8) when the available resource is very limited (0.3).",
                "It drops below 0.8 with the increased ratio and goes up again once there are plenty of resources available (resource ratio 0.9).",
                "Clearly, if 504 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 4: The quality of the GDAP and the upper bound depend on the network degree. resources are really scarce, only a few tasks can be successfully allocated even by the optimal algorithm.",
                "Therefore, the GDAP is able to give quite a good allocation.",
                "Although the differences are minor, it can also be seen that the results for the small-world network are consistently slightly better than those of random networks, which in turn outperform scale-free networks.",
                "This can be understood by looking at the distribution of the agents degree, as shown in Figure 3.",
                "In this experiment, in the small-world network almost every manager has a degree of six.",
                "In random networks, the degree varies between one and about ten.",
                "However, in the scale-free network, most nodes have only three or four connections, and only a very few have up to twenty connections.",
                "As we will see in the next experiment, having more connections means getting better results.",
                "For the next experiment we fix the resource ratio to 1.0 and study the quality of both the upper bound and the GDAP algorithm related to the degree of the social network.",
                "The result can be found in Figure 4.",
                "In this figure we can see that a high average degree also leads to convergence of the upper bound and the GDAP.",
                "Obviously, when managers have many connections, it becomes easier to allocate tasks.",
                "An exception is, similar to what we have seen in Figure 2, that the solution of the GDAP is also very good if the connections are extremely limited (degree 2), due to the fact that the number of possibly allocated tasks is very small.",
                "Again we see that the upper bound is not that good for problems where resources are hard to reach, i.e. in social networks with a low average degree.2 Since the solution quality clearly depends on the resource ratio as well as on the degree of the social network, we study the effect of changing both, to see whether they influence each other.",
                "Figure 5 shows how the solution quality depends on both the resource ratio and the network degree.",
                "This graph confirms the results that the GDAP performs better for problems with higher degree and higher resource ratio.",
                "However, it is now also more clear that it performs better for very low degree and resource availability.",
                "For this experiment with 40 agents and 20 tasks, the worst performance is met for instances with degree six and resource ratio 0.6 to instances with degree twelve and resource ratio 0.3.",
                "But even for those instances, the performance lies above 0.7. 2 The consistent standard deviation of about 15% over the 20 problem instances is not displayed as error-bars in these first graphs, because it would obfuscate the interesting correlations that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Relative reward small-world Average degree Resource ratio Relative reward Figure 5: The quality of the GDAP depends on both the resource ratio and the network degree. 5.2.2 Experiment 2 To study the robustness of the GDAP against different problem settings, we generate instances where the task benefit distribution is different: 40% of the tasks gets a 10 times higher benefit (as described in Setting 2).",
                "The effect of this different distribution can be seen in Figure 6.",
                "These two graphs show that the results for the skewed task benefit distribution are slightly better on average, both when varying the resource ratio, and when varying the average degree of the network.",
                "We argue that this can be explained by the greedy nature of GDAP, which causes the tasks with high efficiency to be allocated first, and makes the algorithm perform better in this heterogeneous setting. 5.2.3 Experiment 3 The purpose of this final experiment is to test whether the algorithm can be scaled to large problems, like applications running on the internet.",
                "We therefore generate instances where the number of agents varies from 100 to 2000, and simultaneously increase the number of tasks from 166 to 3333 (Setting 3).",
                "Figure 7 shows the run time for these instances on a Linux machine with an AMD Opteron 2.4 GHz processor.",
                "These graphs confirm the theoretical analysis from the previous section, saying that both the upper bound and the GDAP are polynomial.",
                "In fact, the graphs show that the GDAP almost behaves linearly.",
                "Here we see that the locality of the GDAP really helps in reducing the computation time.",
                "Also note that the GDAP requires even less computation time than the upper bound.",
                "The quality of the GDAP for these large instances cannot be compared to the optimal solution.",
                "Therefore, in Figure 8 the upper bound is used instead.",
                "This result shows that the GDAP behaves stably and consistently well with the increasing problem size.",
                "It also shows once more that the GDAP performs better in a small-world network. 6.",
                "RELATED WORK <br>task allocation</br> in multiagent systems has been investigated by many researchers in recent years with different assumptions and emphases.",
                "However, most of the research to date on <br>task allocation</br> does not consider social connections among agents, and studies the problem in a centralized The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free Figure 6: The quality of the GDAP algorithm for a uniform and a skewed task benefit distribution related to the resource ratio (the first graph), and the network degree (the second graph). setting.",
                "For example, Kraus et al. [12] develop an auction protocol that enables agents to form coalitions with time constraints.",
                "It assumes each agent knows the capabilities of all others.",
                "The proposed protocol is centralized, where one manager is responsible for allocating the tasks to all coalitions.",
                "Manisterski at al. [14] discuss the possibilities of achieving efficient allocations in both cooperative and noncooperative settings.",
                "They propose a centralized algorithm to find the optimal solution.",
                "In contrast to this work, we introduce also an efficient completely distributed protocol that takes the social network into account.",
                "<br>task allocation</br> has also been studied in distributed settings by for example Shehory and Kraus [18] and by Lerman and Shehory [13].",
                "They propose distributed algorithms with low communication complexity for forming coalitions in large-scale multiagent systems.",
                "However, they do not assume the existence of any agent network.",
                "The work of Sander et al. [16] introduces computational geometry-based algorithms for distributed <br>task allocation</br> in geographical domains.",
                "Agents are then allowed to move and actively search for tasks, and the capability of agents to perform tasks is homogeneous.",
                "In order to apply their approach, agents need to have some knowledge about the geographical positions of tasks and some other agents.",
                "Other work [17] proposes a location mechanism for open multiagent systems to allocate tasks to unknown agents.",
                "In this approach each agent caches a list of agents they know.",
                "The analysis of the communication complexity of this method is based on lattice-like graphs, while we investigate how to efficiently solve <br>task allocation</br> in a social network, whose topology can be arbitrary.",
                "Networks have been employed in the context of <br>task allocation</br> in some other works as well, for example to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time(ms) Agents upper bound - small-world upper bound - random upper bound - scale-free GDAP - small-world GDAP - random GDAP - scale-free Figure 7: The run time of the GDAP algorithm. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Rewardrelativetoupperbound Agents small-world random scale-free Figure 8: The quality of the GDAP algorithm compared to the upper bound. interactions between agents and mediators [1].",
                "Mediators in this context are agents who receive the task and have connections to other agents.",
                "They break up the task into subtasks, and negotiate with other agents to obtain commitments to execute these subtasks.",
                "Their focus is on modeling the decision process of just a single mediator.",
                "Another approach is to partition the network into cliques of nodes, representing coalitions which the agents involved may use as a coordination mechanism [20].",
                "The focus of that work is distributed coalition formation among agents, but in our approach, we do not need agents to form groups before allocating tasks.",
                "Easwaran and Pitt [6] study complex tasks that require services for their accomplishment.",
                "The problem concerns the allocation of subtasks to service providers in a supply chain.",
                "Another study of <br>task allocation</br> in supply chains is [21], where it is argued that the defining characteristic of Supply Chain Formation is hierarchical subtask decomposition (HSD).",
                "HSD is implemented using task dependency networks (TDN), with agents and goods as nodes, and I/O relations between them as edges.",
                "Here, the network is given, and the problem is to select a subgraph, for which the authors propose a market-based algorithm, in particular, a series of auctions.",
                "Compared to these works, our approach is more general in the sense that we are able to model different types of connections or constraints among agents for different problem domains in addition to supply chain formation.",
                "Finally, social networks have been used in the context of team formation.",
                "Previous work has shown how to learn which relations are more beneficial in the long run [8], and adapt the social network accordingly.",
                "We believe these results can be transferred to the domain of <br>task allocation</br> as well, leaving this as a topic for further study. 506 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 7.",
                "CONCLUSIONS In this paper we studied the <br>task allocation</br> problem in a social network (STAP), which can be seen as a new, more general, variant of the TAP.",
                "We believe it has a great amount of potential for realistic problems.",
                "We provided complexity results on computing the efficient solution for the STAP, as well as a bound on possible approximation algorithms.",
                "Next, we presented a distributed protocol, related to the contractnet protocol.",
                "We also introduced an exponential algorithm to compute the optimal solution, as well as a fast upperbound algorithm.",
                "Finally, we used the optimal solution and the upper-bound (for larger instances) to conduct an extensive set of experiments to assess the solution quality and the computational efficiency of the proposed distributed algorithm in different types of networks, namely, small-world networks, random networks, and scale-free networks.",
                "The results presented in this paper show that the distributed algorithm performs well in small-world, scale-free, and random networks, and for many different settings.",
                "Also other experiments were done (e.g. on grid networks) and these results held up over a wider range of scenarios.",
                "Furthermore, we showed that it scales well to large networks, both in terms of quality and of required computation time.",
                "The results also suggest that small-world networks are slightly better suited for local <br>task allocation</br>, because there are no nodes with very few neighbors.",
                "There are many interesting extensions to our current work.",
                "In this paper, we focus on the computational aspect in the design of the distributed algorithm.",
                "In our future work, we would also like to address some of the related issues in game theory, such as strategic agents, and show desirable properties of a distributed protocol in such a context.",
                "In the current algorithm we assume that agents can only contact their neighbors to request resources, which may explain why our algorithm performs not as good in the scalefree networks as in the small-world networks.",
                "Our future work may allow agents to reallocate (sub)tasks.",
                "We are interested in seeing how such interactions will affect the performance of <br>task allocation</br> in different social networks.",
                "A third interesting topic for further work is the addition of reputation information among the agents.",
                "This may help to model changing business relations and incentivize agents to follow the protocol.",
                "Finally, it would be interesting to study real-life instances of the social <br>task allocation</br> problem, and see how they relate to the randomly generated networks of different types studied in this paper.",
                "Acknowledgments.",
                "This work is supported by the Technology Foundation STW, applied science division of NWO, and the Ministry of Economic Affairs. 8.",
                "REFERENCES [1] S. Abdallah and V. Lesser.",
                "Modeling <br>task allocation</br> Using a Decision Theoretic Model.",
                "In Proc.",
                "AAMAS, pages 719-726.",
                "ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson, and D. Zuckerman.",
                "Derandomized Graph Products.",
                "Computational Complexity, 5(1):60-75, 1995. [3] A.-L. Barab´asi and R. Albert.",
                "Emergence of scaling in random networks.",
                "Science, 286(5439):509-512, 1999. [4] R. H. Coase.",
                "The Nature of the Firm.",
                "Economica NS, 4(16):386-405, 1937. [5] R. H. Coase.",
                "My Evolution as an Economist.",
                "In W. Breit and R. W. Spencer, editors, Lives of the Laureates, pages 227-249.",
                "MIT Press, 1995. [6] A. M. Easwaran and J. Pitt.",
                "Supply Chain Formation in Open, Market-Based Multi-Agent Systems.",
                "International J. of Computational Intelligence and Applications, 2(3):349-363, 2002. [7] I.",
                "Foster, N. R. Jennings, and C. Kesselman.",
                "Brain Meets Brawn: Why Grid and Agents Need Each Other.",
                "In Proc.",
                "AAMAS, pages 8-15, Washington, DC, USA, 2004.",
                "IEEE Computer Society. [8] M. E. Gaston and M. desJardins.",
                "Agent-organized networks for dynamic team formation.",
                "In Proc.",
                "AAMAS, pages 230-237, New York, NY, USA, 2005.",
                "ACM Press. [9] A. Goldberg.",
                "An Efficient Implementation of a Scaling Minimum-Cost Flow Algorithm.",
                "J. of Algorithms, 22:1-29, 1997. [10] R. Gulati.",
                "Does Familiarity Breed Trust?",
                "The Implications of Repeated Ties for Contractual Choice in Alliances.",
                "Academy of Management Journal, 38(1):85-112, 1995. [11] T. Klos and B. Nooteboom.",
                "Agent-based Computational Transaction Cost Economics.",
                "Economic Dynamics and Control, 25(3-4):503-526, 01. [12] S. Kraus, O. Shehory, and G. Taase.",
                "Coalition formation with uncertain heterogeneous information.",
                "In Proc.",
                "AAMAS, pages 1-8.",
                "ACM, 2003. [13] K. Lerman and O. Shehory.",
                "Coalition formation for large-scale electronic markets.",
                "In Proc.",
                "ICMAS, pages 167-174.",
                "IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus, and N. Jennings.",
                "Forming Efficient Agent Groups for Completing Complex Tasks.",
                "In Proc.",
                "AAMAS, pages 257-264.",
                "ACM, 2006. [15] J. Patel et al.",
                "Agent-Based Virtual Organizations for the Grid.",
                "Multi-Agent and Grid Systems, 1(4):237-249, 2005. [16] P. V. Sander, D. Peleshchuk, and B. J. Grosz.",
                "A scalable, distributed algorithm for efficient <br>task allocation</br>.",
                "In Proc.",
                "AAMAS, pages 1191-1198, New York, NY, USA, 2002.",
                "ACM Press. [17] O. Shehory.",
                "A scalable agent location mechanism.",
                "In Proc.",
                "ATAL, volume 1757 of LNCS, pages 162-172.",
                "Springer, 2000. [18] O. Shehory and S. Kraus.",
                "Methods for <br>task allocation</br> via Agent Coalition Formation.",
                "Artificial Intelligence, 101(1-2):165-200, 1998. [19] R. M. Sreenath and M. P. Singh.",
                "Agent-based service selection.",
                "Web Semantics, 1(3):261-279, 2004. [20] P. T. Toˇsi´c and G. A. Agha.",
                "Maximal Clique Based Distributed Coalition Formation for <br>task allocation</br> in Large-Scale Multi-Agent Systems.",
                "In Proc.",
                "MMAS, volume 3446 of LNAI, pages 104-120.",
                "Springer, 2005. [21] W. E. Walsh and M. P. Wellman.",
                "Modeling Supply Chain Formation in Multiagent Systems.",
                "In Proc.",
                "AMEC II, volume 1788 of LNAI, pages 94-101.",
                "Springer, 2000. [22] D. J. Watts and S. H. Strogatz.",
                "Collective dynamics of small world networks.",
                "Nature, 393:440-442, 1998.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 507"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "\"Asignación de tareas\" distribuida en las redes sociales Mathijs de Weerdt Delft Technical University Delft, Países Bajos M.M.Deweerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, Países Bajos Yingqian.zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (Cwi (cwi (cwi CWOI (CWI) Amsterdam, Países Bajos tomas.klos@cwi.nl Resumen Este documento propone una nueva variante del problema de \"asignación de tareas\", donde los agentes están conectados en una red social y las tareas llegan a los agentes distribuidos sobre la red.",
                "Tales situaciones aparecen con mucha frecuencia en los escenarios del mundo real, y los desarrollos tecnológicos recientes están trayendo más de ellas dentro del rango de métodos de \"asignación de tareas\".",
                "Especialmente en las aplicaciones comerciales, la selección e interacción de los socios preferenciales es muy común, y este aspecto se vuelve más importante para la investigación de \"asignación de tareas\", en la medida en que los desarrollos tecnológicos deben poder apoyarlo.",
                "En este artículo, estudiamos el problema de la \"asignación de tareas\" desde la perspectiva de una estructura interrelacionada tan compleja.",
                "La siguiente sección ofrece una descripción formal del problema de \"asignación de tareas\" en las redes sociales.",
                "Descripción del problema Formulamos el problema social de \"asignación de tareas\" en esta sección.",
                "La asignación exacta de tareas a los agentes se define mediante una \"asignación de tareas\".",
                "Definición 2 (\"Asignación de tareas\").",
                "Dado un conjunto de tareas t = {t1 ,..., tn} y un conjunto de agentes a = {a1 ,..., AM} En una red social Sn, una \"asignación de tareas\" es un mapeo φ: T × A × R → N. Una \"asignación de tareas\" válida en SN debe satisfacer las siguientes restricciones: • Una asignación de tareas debe ser correcta.",
                "Cada agente a ∈ A no puede usar más que sus recursos disponibles, es decir, para cada r ∈ R, p t∈T φ (t, a, r) ≤ rsc (a, r).• Se debe completar una \"asignación de tareas\"."
            ],
            "translated_text": "",
            "candidates": [
                "asignación de tareas",
                "Asignación de tareas",
                "asignación de tareas",
                "asignación de tareas",
                "asignación de tareas",
                "asignación de tareas",
                "asignación de tareas",
                "asignación de tareas",
                "asignación de tareas",
                "asignación de tareas",
                "asignación de tareas",
                "asignación de tareas",
                "asignación de tareas",
                "asignación de tareas",
                "asignación de tareas",
                "asignación de tareas",
                "Asignación de tareas",
                "asignación de tareas",
                "asignación de tareas",
                "asignación de tareas",
                "asignación de tareas",
                "asignación de tareas"
            ],
            "error": []
        },
        "utility": {
            "translated_key": "utilidad",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Distributed Task Allocation in Social Networks Mathijs de Weerdt Delft Technical University Delft, The Netherlands M.M.deWeerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, The Netherlands Yingqian.Zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI) Amsterdam, The Netherlands tomas.klos@cwi.nl ABSTRACT This paper proposes a new variant of the task allocation problem, where the agents are connected in a social network and tasks arrive at the agents distributed over the network.",
                "We show that the complexity of this problem remains NPhard.",
                "Moreover, it is not approximable within some factor.",
                "We develop an algorithm based on the contract-net protocol.",
                "Our algorithm is completely distributed, and it assumes that agents have only local knowledge about tasks and resources.",
                "We conduct a set of experiments to evaluate the performance and scalability of the proposed algorithm in terms of solution quality and computation time.",
                "Three different types of networks, namely small-world, random and scale-free networks, are used to represent various social relationships among agents in realistic applications.",
                "The results demonstrate that our algorithm works well and that it scales well to large-scale applications.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Recent years have seen a lot of work on task and resource allocation methods, which can potentially be applied to many real-world applications.",
                "However, some interesting applications where relations between agents play a role require a slightly more general model.",
                "Such situations appear very frequently in real-world scenarios, and recent technological developments are bringing more of them within the range of task allocation methods.",
                "Especially in business applications, preferential partner selection and interaction is very common, and this aspect becomes more important for task allocation research, to the extent that technological developments need to be able to support it.",
                "For example, the development of semantic web and grid technologies leads to increased and renewed attention for the potential of the web to support business processes [7, 15].",
                "As an example, virtual organizations (VOs) are being re-invented in the context of the grid, where they are composed of a number of autonomous entities (representing different individuals, departments and organizations), each of which has a range of problem-solving capabilities and resources at its disposal [15, p. 237].",
                "The question is how VOs are to be dynamically composed and re-composed from individual agents, when different tasks and subtasks need to be performed.",
                "This would be done by allocating them to different agents who may each be capable of performing different subsets of those tasks.",
                "Similarly, supply chain formation (SCF) is concerned with the, possibly ad-hoc, allocation of services to providers in the supply chain, in such a way that overall profit is optimized [6, 21].",
                "Traditionally, such allocation decisions have been analyzed using transaction cost economics (TCE) [4], which takes the transaction between consecutive stages of development as its basic unit of analysis, and considers the firm and the market as alternative structural forms for organizing transactions. (Transaction cost) economics has traditionally built on analysis of comparative statics: the central problem of economic organization is considered to be the adaptation of organizational forms to the characteristics of transactions.",
                "More recently, TCEs founding father, Ronald Coase, acknowledged that this is too simplistic an approach [5, p. 245]: The analysis cannot be confined to what happens within a single firm. (. . . )",
                "What we are dealing with is a complex interrelated structure.",
                "In this paper, we study the problem of task allocation from the perspective of such a complex interrelated structure.",
                "In particular, the market cannot be considered as an organizational form without considering specific partners to interact with on the market [11].",
                "Specifically, therefore, we consider agents to be connected to each other in a social network.",
                "Furthermore, this network is not fully connected: as informed by the business literature, firms typically have established working relations with limited numbers of preferred partners [10]; these are the ones they consider when new tasks arrive and they have to form supply chains to allocate those tasks [19].",
                "Other than modeling the interrelated 500 978-81-904262-7-5 (RPS) c 2007 IFAAMAS structure between business partners, the social network introduced in this paper can also be used to represent other types of connections or constraints among autonomous entities that arise from other application domains.",
                "The next section gives a formal description of the task allocation problem on social networks.",
                "In Section 3, we prove that the complexity of this problem remains NP-hard.",
                "We then proceed to develop a distributed algorithm in Section 4, and perform a series of experiments with this algorithm, as described in Section 5.",
                "Section 6 discusses related work, and Section 7 concludes. 2.",
                "PROBLEM DESCRIPTION We formulate the social task allocation problem in this section.",
                "There is a set A of agents: A = {a1, . . . , am}.",
                "Agents need resources to complete tasks.",
                "Let R = {r1, . . . , rk} denote the collection of the resource types available to the agents A.",
                "Each agent a ∈ A controls a fixed amount of resources for each resource type in R, which is defined by a resource function: rsc : A × R → N. Moreover, we assume agents are connected by a social network.",
                "Definition 1 (Social network).",
                "An agent social network SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ∈ AE indicates the existence of a social connection between agents ai and aj.",
                "Suppose a set of tasks T = {t1, t2, . . . , tn} arrives at such an agent social network.",
                "Each task t ∈ T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the <br>utility</br> gained if task t is accomplished, and the resource function rsc : T ×R → N specifies the amount of resources required for the accomplishment of task t. Furthermore, a location function loc : T → A defines the locations (i.e., agents) at which the tasks arrive in the social network.",
                "An agent a that is the location of a task t, i.e. loc(t) = a, is called the manager of this task.",
                "Each task t ∈ T needs some specific resources from the agents in order to complete the task.",
                "The exact assignment of tasks to agents is defined by a task allocation.",
                "Definition 2 (Task allocation).",
                "Given a set of tasks T = {t1, . . . , tn} and a set of agents A = {a1, . . . , am} in a social network SN, a task allocation is a mapping φ : T × A × R → N. A valid task allocation in SN must satisfy the following constrains: • A task allocation must be correct.",
                "Each agent a ∈ A cannot use more than its available resources, i.e. for each r ∈ R, P t∈T φ(t, a, r) ≤ rsc(a, r). • A task allocation must be complete.",
                "For each task t ∈ T , either all allocated agents resources are sufficient, i.e. for each r ∈ R, P a∈A φ(t, a, r) ≥ rsc(t, r), or t is not allocated, i.e. φ(t, ·, ·) = 0. • A task allocation must obey the social relationships.",
                "Each task t ∈ T can only be allocated to agents that are (direct) neighbors of agent loc(t) in the social network SN.",
                "Each such agent that can contribute to a task is called a contractor.",
                "We write Tφ to represent the tasks that are fully allocated in φ.",
                "The <br>utility</br> of φ is then the summation of the utilities of each task in Tφ, i.e., Uφ = P t∈Tφ u(t).",
                "Using this notation, we define the efficient task allocation below.",
                "Definition 3 (Efficient task allocation).",
                "We say a task allocation φ is efficient if it is valid and Uφ is maximized, i.e., Uφ = max( P t∈Tφ u(t)).",
                "We are now ready to define the task allocation problem in social network that we study in this paper.",
                "Definition 4 (Social task allocation problem).",
                "Given a set of agents A connected by a social network SN = (A, AE), and a finite set of tasks T , the social task allocation problem (or STAP for short) is the problem of finding the efficient task allocation φ, such that φ is valid and the social welfare Uφ is maximized. 3.",
                "COMPLEXITY RESULTS The traditional task allocation problem, TAP (without the condition of the social network SN), is NP-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set.",
                "Although we may consider the TAP as a special case of the STAP by assuming agents are fully connected, we cannot directly use the complexity results from the TAP, since we study the STAP in an arbitrary social network, which, as we argued in the introduction, should be partially connected.",
                "We now show that the TAP with an arbitrary social network is also NP-complete, even when the <br>utility</br> of each task is 1, and the quantity of all required and available resources is 1.",
                "Theorem 1.",
                "Given the social task allocation problem with an arbitrary social network, as defined in Definition 4, the problem of deciding whether a task allocation φ with <br>utility</br> more than k exists is NP-complete.",
                "Proof.",
                "We first show that the problem is in NP.",
                "Given an instance of the problem and an integer k, we can verify in polynomial time whether an allocation φ is a valid allocation and whether the <br>utility</br> of φ is greater than k. We now prove that the STAP is NP-hard by showing that MAXIMUM INDEPENDENT SET ≤P STAP.",
                "Given an undirected graph G = (V, E) and an integer k, we construct a network G = (V , E ) which has an efficient task allocation with k tasks of <br>utility</br> 1 allocated if and only if G has an independent set (IS) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 Figure 1: The MIS problem can be reduced to the STAP.",
                "The left figure is an undirected graph G, which has the optimal solution {v1, v4} or {v2, v3}; the right figure is the constructed instance of the STAP, where the optimal allocation is {t1, t4} or {t2, t3}.",
                "An instance of the following construction is shown in Figure 1.",
                "For each node v ∈ V and each edge e ∈ E in the graph G, we create a vertex agent av and an edge agent ae in G .",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 501 When v was incident to e in G we correspondingly add an edge e in G between av and ae.",
                "We assign each agent in G one resource, which is related to the node or the edge in the graph G, i.e., for each v ∈ V , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ E, rsc(ae) = {e}.",
                "Each vertex agent avi in G has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ E}.",
                "There is no task on the edge agents in G .",
                "We define <br>utility</br> 1 for each task, and the quantity of all required and available resources to be 1.",
                "Taken an instance of the IS problem, suppose there is a solution of size k, i.e., a subset N ⊆ V such that no two vertices in N are joined by an edge in E and |N| = k. N specifies a set of vertex agents AN in the corresponding graph G .",
                "Given two agents a1, a2 ∈ AN we now know that there is no edge agent ae connected to both a1 and a2.",
                "Thus, for each agent a ∈ AN , a assigns its task to the edge agents which are connected to a.",
                "All other vertex agents a /∈ AN are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ AN .",
                "The set of tasks of the agents AN (|AN | = k) is thus the maximum set of tasks that can be allocated.",
                "The <br>utility</br> of this allocation is k. Similarly, if there is a solution for the STAP with the <br>utility</br> value k, and the allocated task set is N, then for the IS problem, there exists a maximum independent set N of size k in G. An example can be found in Figure 1.",
                "We just proved that the STAP is NP-hard for an arbitrary graph.",
                "In our proof, the complexity comes from the introduction of a social network.",
                "One may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant.",
                "We now give a complexity result on this class of networks as follows.",
                "Theorem 2.",
                "Let the number of neighbors of each agent in the social network SN be bounded by Δ for Δ ≥ 3.",
                "Computing the efficient task allocation given such a network is NP-complete.",
                "In addition, it is not approximable within Δε for some ε > 0.",
                "Proof.",
                "It has been shown in [2] that the maximum independent set problem in the case of the degree bounded by Δ for Δ ≥ 3 is NP-complete and is not approximable within Δε for some ε > 0.",
                "Using the similar reduction from the proof of Theorem 1, this result also holds for the STAP.",
                "Since our problem is as hard as MIS as shown in Theorem 1, it is not possible to give a worst case bound better than Δε for any polynomial time algorithm, unless P = NP. 4.",
                "ALGORITHMS To deal with the problem of allocating tasks in a social network, we present a distributed algorithm.",
                "We introduce this algorithm by describing the protocol for the agents.",
                "After that we give the optimal, centralized algorithm and an upper bound algorithm, which we use in Section 5 to benchmark the quality of our distributed algorithm. 4.1 Protocol for distributed task allocation We can summarize the description of the task allocation problem in social networks from Section 2 as follows.",
                "We Algorithm 1 Greedy distributed allocation protocol (GDAP).",
                "Each manager a calculates the efficiency e(t) for each of their tasks t ∈ Ta, and then while Ta = ∅: 1.",
                "Each manager a selects the most efficient task t ∈ Ta such that for each task t ∈ Ta: e(t ) ≤ e(t). 2.",
                "Each manager a requests help for t from all its neighbors (of a) by informing these neighbors of the efficiency e(t) and the required resources for t. 3.",
                "Contractors receive and store all requests, and then offer all relevant resources to the manager for the task with the highest efficiency. 4.",
                "The managers that have received sufficient offers allocate their tasks, and inform each contractor which part of the offer is accepted.",
                "When a task is allocated, or when a manager has received offers from all neighbors, but still cannot satisfy its task, the task is removed from the task list Ta. 5.",
                "Contractors update their used resources. have a (social) network of agents.",
                "Each agent has a set of resources of different types at its disposal.",
                "We also have a set of tasks.",
                "Each task requires some resources, has a fixed benefit, and is located at a certain agent.",
                "This agent is called a manager.",
                "We only allow neighboring agents to help with a task.",
                "These agents are called contractors.",
                "Agents can fulfill the role of manager as well as contractor.",
                "The problem is to find out which tasks to execute, and which resources of which contractors to use for these tasks.",
                "The idea of the protocol is as follows.",
                "All manager agents a ∈ A try to find neighboring contractors to help them with their task(s) Ta = {ti ∈ T | loc(ti) = a}.",
                "They start with offering the task that is most efficient in terms of the ratio between benefit and required resources.",
                "Out of all tasks offered, contractors select the task with the highest efficiency, and send a bid to the related manager.",
                "A bid consists of all the resources the agent is able to supply for this task.",
                "If sufficient resources have been offered, the manager selects the required resources and informs all contractors of its choice.",
                "The efficiency of a task is defined as follows: Definition 5.",
                "The efficiency e of a task t ∈ T is defined by the <br>utility</br> of this task divided by the sum of all required resources: e(t) = u(t)P r∈R rsc(t,r) .",
                "A more detailed description of this protocol can be found in Algorithm 1.",
                "Here it is also defined how to determine when a task should not be offered anymore, because it is impossible to fulfill locally.",
                "Obviously, a task is also not offered anymore when it has been allocated.",
                "This protocol is such that, when no two tasks have exactly the same efficiency, in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the algorithm follows.",
                "Proposition 1.",
                "For a STAP with n tasks and m agents, the run time of the distributed algorithm is O(nm), and the number of communication messages is O(n2 m). 1 Even when some tasks have the same efficiency, it is straightforward to make this result work.",
                "For example, the implementation can ensure that the contractors choose the task with the lowest task-id. 502 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 2 Optimal social task allocation (OPT).",
                "Repeat the following for each combination of tasks: 1.",
                "If the total reward for this combination is higher than any previous combination, test if this combination is feasible as follows: 2.",
                "Create a network flow problem for each resource type r ∈ R (separately) as follows: (a) Create a source s and a sink s . (b) For each agent a ∈ A create an agent node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has. (c) For each task t ∈ T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires. (d) For each agent a connect the agent node to all task nodes of neighboring tasks, i.e., t ∈ {t ∈ T | (a, loc(t)) ∈ AE}.",
                "Give this connection unlimited capacity. 3.",
                "Solve the maximum flow problem for the created flow networks.",
                "If the maximum flow in each network is equal to the total required resources of that type, the current combination of tasks is feasible.",
                "In that case, this is the current best combination of tasks.",
                "Proof.",
                "In the worst case, in each iteration exactly one task is removed from a task list, so there are n iterations.",
                "In each iteration in the worst case (i.e., a fully connected network), for each of the O(n) managers, O(m) messages are sent.",
                "Next the task with the highest efficiency can be selected by each contractor in O(n).",
                "Assigning an allocation can be done in O(m).",
                "This leads to a total of O(n + m) operations for each iteration, and thus O(n2 + nm) operations in total.",
                "The number of messages sent is O(n(nm + nm + nm)) = O(n2 m).",
                "We establish the quality of this protocol experimentally (in Section 5).",
                "Preferably, we compare the results to the optimal solution. 4.2 Optimal social task allocation The optimal task allocation algorithm should deal with the restrictions posed by the social network.",
                "For this NPcomplete problem we used an exponential brute-force algorithm to consider relevant combinations of tasks to execute.",
                "For each combination we use a maximum-flow algorithm to check whether the resources are sufficient for the selected subset of tasks.",
                "The flow network describes which resources can be used for which tasks, depending on the social network.",
                "If the maximum flow is equal to the sum of all resources required by the subset of tasks, we know that a feasible solution exists (see Algorithm 2).",
                "Clearly, we cannot expect this optimal algorithm to be able to find solutions for larger problem sizes.",
                "To establish the quality of our protocol for large instances, we use the following method to determine an upper bound. 4.3 Upper bound for social task allocation Given a social task allocation problem, if the number of resource types for every task t ∈ T is bounded by 1, the Algorithm 3 An upper bound for social task allocation (UB).",
                "Create a network flow problem with costs as follows: 1.",
                "Create a source s and a sink s . 2.",
                "For each agent a ∈ A and each resource type ri ∈ R, create an agent-resource node ai, and an edge from s to this node with capacity equal to the amount of resources of type r agent a has available and with costs 0. 3.",
                "For each task t ∈ T and each resource type ri ∈ R, create a task-resource node ti, and an edge from this node to s with capacity equal to the amount of resources of type r task t requires and costs −e(t). 4.",
                "For each resource type ri ∈ R and for each agent a connect the agent-resource node ai to all task-resource nodes ti for neighboring tasks t ∈ {t ∈ T | (a, loc(t)) ∈ AE or a = loc(t)}.",
                "Give this connection unlimited capacity and zero costs. 5.",
                "Create an edge directly from s to s with unlimited capacity and zero costs.",
                "Solve the minimum cost flow network problem for this network.",
                "The costs of the resulting network is an upper bound for the social task allocation problem. problem is polynomially solvable by transforming it to a flow network problem.",
                "Our method for efficiently calculating an upper bound for STAP makes use of this special case by converting any given STAP instance P into a new problem P where each task only has one resource type.",
                "More specifically, for every task t ∈ T with <br>utility</br> u(t), we do the following.",
                "Let m be the number of resource types {r1, . . . , rm} required by t. We then split t into a set of m tasks T = {t1, . . . , tm} where each task ti only has one unique resource type (of {r1, . . . , rm}) and each task has a fair share of the <br>utility</br>, i.e., the efficiency of t from Definition 5 times the amount of this resource type rsc(ti, ri).",
                "After polynomially performing this conversion for every task in T , the original problem P becomes the special case P .",
                "Note that the set of valid allocations in P is only a subset of the set of valid allocations in P , because it is now possible to partially allocate a task.",
                "From this it is easy to see that the solution of P gives an upper bound of the solution of the original problem P. To compute the optimal solution for P , we transform it to a minimum cost flow problem.",
                "We model the cost in the flow network by the negation of the new tasks <br>utility</br>.",
                "A polynomial-time implementation of a scaling minimum cost flow algorithm [9] is used for the computation.",
                "The resulting minimum cost flow represents a maximum allocation of the tasks for P .",
                "The detailed modeling is described in Algorithm 3.",
                "In the next section, we use this upper bound to estimate the quality of the GDAP for large-scale instances. 5.",
                "EXPERIMENTS We implemented the greedy distributed allocation protocol (GDAP), the optimal allocation algorithm (OPT), and the upper bound algorithm (UB) in Java, and tested them on a Linux PC.",
                "The purpose of these experiments is to study the performance of the distributed algorithm in different problem settings using different social networks.",
                "The perThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 2: The solution qualities of the GDAP and the upper bound depend on the resource ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 Numberofagents Degree small-world random scale-free Figure 3: The histogram of the degrees. formance measurements are the solution quality and computation time, where the solution quality (SQ) is computed as follows.",
                "When the number of tasks is small, we compare the output of the distributed algorithm with the optimal solution, i.e., SQ = GDAP OP T , but if it is not feasible to compute the optimal solution, we use the value returned by the upper bound algorithm for evaluation, i.e., SQ = GDAP UB .",
                "To see whether the latter is a good measure, we also compare the quality of the upper bound to the optimal solution for smaller problems.",
                "In the following, we describe the setup of all experiments, and present the results. 5.1 Experimental settings We consider several experimental environments.",
                "In all environments the agents are connected by a social network.",
                "In the experiments, three different networks are used to simulate the social relationships among agents in potential realworld problems.",
                "Small-world networks are networks where most neighbors of an agent are also connected to each other.",
                "For the experiments we use a method for generating random small-world networks proposed by Watts et al. [22], with a fixed rewiring probability p = 0.05.",
                "Scale-free networks have the property that a couple of nodes have many connections, and many nodes have only a small number of connections.",
                "To generate these we use the implementation in the JUNG library of the generator proposed by Barab´asi and Albert [3].",
                "We also generate random networks as follows.",
                "First we connect each agent to another agent such that all agents are connected.",
                "Next, we randomly add connections until the desired average degree has been reached.",
                "We now describe the different settings used in our experiments with both small and large-scale problems.",
                "Setting 1.",
                "The number of agents is 40, and the number of tasks is 20.",
                "The number of different resource types is bounded by 5, and the average number of resources required by a task is 30.",
                "Consequently, the total number of resources required by the tasks is fixed.",
                "However, the resources available to the agents are varied.",
                "We define the resource ratio to refer to the ratio between the total number of available resources and the total number of required resources.",
                "Resources are allocated uniformly to the agents.",
                "The average degrees of the networks may also change.",
                "In this setting the task benefits are distributed normally around the number of resources required.",
                "Setting 2.",
                "This setting is similar to Setting 1, but here we let the benefits of the tasks vary dramatically-40% of the tasks have around 10 times higher benefit than the other 60% of the tasks.",
                "Setting 3.",
                "This setting is for large-scale problems.",
                "The ratio between the number of agents and the number of tasks is set to 5/3, and the number of agents varies from 100 to 2000.",
                "We also fix the resource ratio to 1.2 and the average degree to 6.",
                "The number of different resource types is 20, and the average resource requirement of a tasks is 100.",
                "The task benefits are again normally distributed. 5.2 Experimental results The experiments are done with the three different settings in the three different networks mentioned before, where each recorded data is the average over 20 random instances. 5.2.1 Experiment 1 Experimental setting 1 is used for this set of experiments.",
                "We would like to see how the GDAP behaves in the different networks when the number of resources available to the agents is changing.",
                "We also study the behavior of our upper bound algorithm.",
                "For this experiment we fix the average number of neighbors (degree) in each network type to six.",
                "In Figure 2 we see how the quality of both the upper bound and the GDAP algorithm depends on the resource ratio.",
                "Remarkably, for lower resource ratios our GDAP is much closer to the optimal allocation than the upper bound.",
                "When the resource ratio grows above 1.5, the graphs of the upper bound and the GDAP converge, meaning that both are really close to the optimal solution.",
                "This can be explained by the fact that when plenty of resources are available, all tasks can be allocated without any conflicts.",
                "However, when resources are very scarce, the upper bound is much too optimistic, because it is based on the allocation of sub-tasks per resource type, and does not reason about how many of the tasks can actually be allocated completely.",
                "We also notice from the graph that the solution quality of the GDAP on all three networks is quite high (over 0.8) when the available resource is very limited (0.3).",
                "It drops below 0.8 with the increased ratio and goes up again once there are plenty of resources available (resource ratio 0.9).",
                "Clearly, if 504 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 4: The quality of the GDAP and the upper bound depend on the network degree. resources are really scarce, only a few tasks can be successfully allocated even by the optimal algorithm.",
                "Therefore, the GDAP is able to give quite a good allocation.",
                "Although the differences are minor, it can also be seen that the results for the small-world network are consistently slightly better than those of random networks, which in turn outperform scale-free networks.",
                "This can be understood by looking at the distribution of the agents degree, as shown in Figure 3.",
                "In this experiment, in the small-world network almost every manager has a degree of six.",
                "In random networks, the degree varies between one and about ten.",
                "However, in the scale-free network, most nodes have only three or four connections, and only a very few have up to twenty connections.",
                "As we will see in the next experiment, having more connections means getting better results.",
                "For the next experiment we fix the resource ratio to 1.0 and study the quality of both the upper bound and the GDAP algorithm related to the degree of the social network.",
                "The result can be found in Figure 4.",
                "In this figure we can see that a high average degree also leads to convergence of the upper bound and the GDAP.",
                "Obviously, when managers have many connections, it becomes easier to allocate tasks.",
                "An exception is, similar to what we have seen in Figure 2, that the solution of the GDAP is also very good if the connections are extremely limited (degree 2), due to the fact that the number of possibly allocated tasks is very small.",
                "Again we see that the upper bound is not that good for problems where resources are hard to reach, i.e. in social networks with a low average degree.2 Since the solution quality clearly depends on the resource ratio as well as on the degree of the social network, we study the effect of changing both, to see whether they influence each other.",
                "Figure 5 shows how the solution quality depends on both the resource ratio and the network degree.",
                "This graph confirms the results that the GDAP performs better for problems with higher degree and higher resource ratio.",
                "However, it is now also more clear that it performs better for very low degree and resource availability.",
                "For this experiment with 40 agents and 20 tasks, the worst performance is met for instances with degree six and resource ratio 0.6 to instances with degree twelve and resource ratio 0.3.",
                "But even for those instances, the performance lies above 0.7. 2 The consistent standard deviation of about 15% over the 20 problem instances is not displayed as error-bars in these first graphs, because it would obfuscate the interesting correlations that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Relative reward small-world Average degree Resource ratio Relative reward Figure 5: The quality of the GDAP depends on both the resource ratio and the network degree. 5.2.2 Experiment 2 To study the robustness of the GDAP against different problem settings, we generate instances where the task benefit distribution is different: 40% of the tasks gets a 10 times higher benefit (as described in Setting 2).",
                "The effect of this different distribution can be seen in Figure 6.",
                "These two graphs show that the results for the skewed task benefit distribution are slightly better on average, both when varying the resource ratio, and when varying the average degree of the network.",
                "We argue that this can be explained by the greedy nature of GDAP, which causes the tasks with high efficiency to be allocated first, and makes the algorithm perform better in this heterogeneous setting. 5.2.3 Experiment 3 The purpose of this final experiment is to test whether the algorithm can be scaled to large problems, like applications running on the internet.",
                "We therefore generate instances where the number of agents varies from 100 to 2000, and simultaneously increase the number of tasks from 166 to 3333 (Setting 3).",
                "Figure 7 shows the run time for these instances on a Linux machine with an AMD Opteron 2.4 GHz processor.",
                "These graphs confirm the theoretical analysis from the previous section, saying that both the upper bound and the GDAP are polynomial.",
                "In fact, the graphs show that the GDAP almost behaves linearly.",
                "Here we see that the locality of the GDAP really helps in reducing the computation time.",
                "Also note that the GDAP requires even less computation time than the upper bound.",
                "The quality of the GDAP for these large instances cannot be compared to the optimal solution.",
                "Therefore, in Figure 8 the upper bound is used instead.",
                "This result shows that the GDAP behaves stably and consistently well with the increasing problem size.",
                "It also shows once more that the GDAP performs better in a small-world network. 6.",
                "RELATED WORK Task allocation in multiagent systems has been investigated by many researchers in recent years with different assumptions and emphases.",
                "However, most of the research to date on task allocation does not consider social connections among agents, and studies the problem in a centralized The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free Figure 6: The quality of the GDAP algorithm for a uniform and a skewed task benefit distribution related to the resource ratio (the first graph), and the network degree (the second graph). setting.",
                "For example, Kraus et al. [12] develop an auction protocol that enables agents to form coalitions with time constraints.",
                "It assumes each agent knows the capabilities of all others.",
                "The proposed protocol is centralized, where one manager is responsible for allocating the tasks to all coalitions.",
                "Manisterski at al. [14] discuss the possibilities of achieving efficient allocations in both cooperative and noncooperative settings.",
                "They propose a centralized algorithm to find the optimal solution.",
                "In contrast to this work, we introduce also an efficient completely distributed protocol that takes the social network into account.",
                "Task allocation has also been studied in distributed settings by for example Shehory and Kraus [18] and by Lerman and Shehory [13].",
                "They propose distributed algorithms with low communication complexity for forming coalitions in large-scale multiagent systems.",
                "However, they do not assume the existence of any agent network.",
                "The work of Sander et al. [16] introduces computational geometry-based algorithms for distributed task allocation in geographical domains.",
                "Agents are then allowed to move and actively search for tasks, and the capability of agents to perform tasks is homogeneous.",
                "In order to apply their approach, agents need to have some knowledge about the geographical positions of tasks and some other agents.",
                "Other work [17] proposes a location mechanism for open multiagent systems to allocate tasks to unknown agents.",
                "In this approach each agent caches a list of agents they know.",
                "The analysis of the communication complexity of this method is based on lattice-like graphs, while we investigate how to efficiently solve task allocation in a social network, whose topology can be arbitrary.",
                "Networks have been employed in the context of task allocation in some other works as well, for example to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time(ms) Agents upper bound - small-world upper bound - random upper bound - scale-free GDAP - small-world GDAP - random GDAP - scale-free Figure 7: The run time of the GDAP algorithm. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Rewardrelativetoupperbound Agents small-world random scale-free Figure 8: The quality of the GDAP algorithm compared to the upper bound. interactions between agents and mediators [1].",
                "Mediators in this context are agents who receive the task and have connections to other agents.",
                "They break up the task into subtasks, and negotiate with other agents to obtain commitments to execute these subtasks.",
                "Their focus is on modeling the decision process of just a single mediator.",
                "Another approach is to partition the network into cliques of nodes, representing coalitions which the agents involved may use as a coordination mechanism [20].",
                "The focus of that work is distributed coalition formation among agents, but in our approach, we do not need agents to form groups before allocating tasks.",
                "Easwaran and Pitt [6] study complex tasks that require services for their accomplishment.",
                "The problem concerns the allocation of subtasks to service providers in a supply chain.",
                "Another study of task allocation in supply chains is [21], where it is argued that the defining characteristic of Supply Chain Formation is hierarchical subtask decomposition (HSD).",
                "HSD is implemented using task dependency networks (TDN), with agents and goods as nodes, and I/O relations between them as edges.",
                "Here, the network is given, and the problem is to select a subgraph, for which the authors propose a market-based algorithm, in particular, a series of auctions.",
                "Compared to these works, our approach is more general in the sense that we are able to model different types of connections or constraints among agents for different problem domains in addition to supply chain formation.",
                "Finally, social networks have been used in the context of team formation.",
                "Previous work has shown how to learn which relations are more beneficial in the long run [8], and adapt the social network accordingly.",
                "We believe these results can be transferred to the domain of task allocation as well, leaving this as a topic for further study. 506 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 7.",
                "CONCLUSIONS In this paper we studied the task allocation problem in a social network (STAP), which can be seen as a new, more general, variant of the TAP.",
                "We believe it has a great amount of potential for realistic problems.",
                "We provided complexity results on computing the efficient solution for the STAP, as well as a bound on possible approximation algorithms.",
                "Next, we presented a distributed protocol, related to the contractnet protocol.",
                "We also introduced an exponential algorithm to compute the optimal solution, as well as a fast upperbound algorithm.",
                "Finally, we used the optimal solution and the upper-bound (for larger instances) to conduct an extensive set of experiments to assess the solution quality and the computational efficiency of the proposed distributed algorithm in different types of networks, namely, small-world networks, random networks, and scale-free networks.",
                "The results presented in this paper show that the distributed algorithm performs well in small-world, scale-free, and random networks, and for many different settings.",
                "Also other experiments were done (e.g. on grid networks) and these results held up over a wider range of scenarios.",
                "Furthermore, we showed that it scales well to large networks, both in terms of quality and of required computation time.",
                "The results also suggest that small-world networks are slightly better suited for local task allocation, because there are no nodes with very few neighbors.",
                "There are many interesting extensions to our current work.",
                "In this paper, we focus on the computational aspect in the design of the distributed algorithm.",
                "In our future work, we would also like to address some of the related issues in game theory, such as strategic agents, and show desirable properties of a distributed protocol in such a context.",
                "In the current algorithm we assume that agents can only contact their neighbors to request resources, which may explain why our algorithm performs not as good in the scalefree networks as in the small-world networks.",
                "Our future work may allow agents to reallocate (sub)tasks.",
                "We are interested in seeing how such interactions will affect the performance of task allocation in different social networks.",
                "A third interesting topic for further work is the addition of reputation information among the agents.",
                "This may help to model changing business relations and incentivize agents to follow the protocol.",
                "Finally, it would be interesting to study real-life instances of the social task allocation problem, and see how they relate to the randomly generated networks of different types studied in this paper.",
                "Acknowledgments.",
                "This work is supported by the Technology Foundation STW, applied science division of NWO, and the Ministry of Economic Affairs. 8.",
                "REFERENCES [1] S. Abdallah and V. Lesser.",
                "Modeling Task Allocation Using a Decision Theoretic Model.",
                "In Proc.",
                "AAMAS, pages 719-726.",
                "ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson, and D. Zuckerman.",
                "Derandomized Graph Products.",
                "Computational Complexity, 5(1):60-75, 1995. [3] A.-L. Barab´asi and R. Albert.",
                "Emergence of scaling in random networks.",
                "Science, 286(5439):509-512, 1999. [4] R. H. Coase.",
                "The Nature of the Firm.",
                "Economica NS, 4(16):386-405, 1937. [5] R. H. Coase.",
                "My Evolution as an Economist.",
                "In W. Breit and R. W. Spencer, editors, Lives of the Laureates, pages 227-249.",
                "MIT Press, 1995. [6] A. M. Easwaran and J. Pitt.",
                "Supply Chain Formation in Open, Market-Based Multi-Agent Systems.",
                "International J. of Computational Intelligence and Applications, 2(3):349-363, 2002. [7] I.",
                "Foster, N. R. Jennings, and C. Kesselman.",
                "Brain Meets Brawn: Why Grid and Agents Need Each Other.",
                "In Proc.",
                "AAMAS, pages 8-15, Washington, DC, USA, 2004.",
                "IEEE Computer Society. [8] M. E. Gaston and M. desJardins.",
                "Agent-organized networks for dynamic team formation.",
                "In Proc.",
                "AAMAS, pages 230-237, New York, NY, USA, 2005.",
                "ACM Press. [9] A. Goldberg.",
                "An Efficient Implementation of a Scaling Minimum-Cost Flow Algorithm.",
                "J. of Algorithms, 22:1-29, 1997. [10] R. Gulati.",
                "Does Familiarity Breed Trust?",
                "The Implications of Repeated Ties for Contractual Choice in Alliances.",
                "Academy of Management Journal, 38(1):85-112, 1995. [11] T. Klos and B. Nooteboom.",
                "Agent-based Computational Transaction Cost Economics.",
                "Economic Dynamics and Control, 25(3-4):503-526, 01. [12] S. Kraus, O. Shehory, and G. Taase.",
                "Coalition formation with uncertain heterogeneous information.",
                "In Proc.",
                "AAMAS, pages 1-8.",
                "ACM, 2003. [13] K. Lerman and O. Shehory.",
                "Coalition formation for large-scale electronic markets.",
                "In Proc.",
                "ICMAS, pages 167-174.",
                "IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus, and N. Jennings.",
                "Forming Efficient Agent Groups for Completing Complex Tasks.",
                "In Proc.",
                "AAMAS, pages 257-264.",
                "ACM, 2006. [15] J. Patel et al.",
                "Agent-Based Virtual Organizations for the Grid.",
                "Multi-Agent and Grid Systems, 1(4):237-249, 2005. [16] P. V. Sander, D. Peleshchuk, and B. J. Grosz.",
                "A scalable, distributed algorithm for efficient task allocation.",
                "In Proc.",
                "AAMAS, pages 1191-1198, New York, NY, USA, 2002.",
                "ACM Press. [17] O. Shehory.",
                "A scalable agent location mechanism.",
                "In Proc.",
                "ATAL, volume 1757 of LNCS, pages 162-172.",
                "Springer, 2000. [18] O. Shehory and S. Kraus.",
                "Methods for Task Allocation via Agent Coalition Formation.",
                "Artificial Intelligence, 101(1-2):165-200, 1998. [19] R. M. Sreenath and M. P. Singh.",
                "Agent-based service selection.",
                "Web Semantics, 1(3):261-279, 2004. [20] P. T. Toˇsi´c and G. A. Agha.",
                "Maximal Clique Based Distributed Coalition Formation for Task Allocation in Large-Scale Multi-Agent Systems.",
                "In Proc.",
                "MMAS, volume 3446 of LNAI, pages 104-120.",
                "Springer, 2005. [21] W. E. Walsh and M. P. Wellman.",
                "Modeling Supply Chain Formation in Multiagent Systems.",
                "In Proc.",
                "AMEC II, volume 1788 of LNAI, pages 94-101.",
                "Springer, 2000. [22] D. J. Watts and S. H. Strogatz.",
                "Collective dynamics of small world networks.",
                "Nature, 393:440-442, 1998.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 507"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Cada tarea t ∈ T se define por una tupla u (t), rsc (t), loc (t), donde u (t) es la \"utilidad\" obtenida si se realiza la tarea t, y la función de recurso rsc: t× R → N Especifica la cantidad de recursos necesarios para el logro de la tarea t.Además, una función de ubicación LOC: T → A define las ubicaciones (es decir, agentes) en las que las tareas llegan a la red social.",
                "La \"utilidad\" de φ es entonces la suma de las utilidades de cada tarea en tφ, es decir, uφ = p t∈Tφ u (t).",
                "Ahora mostramos que el TAP con una red social arbitraria también es NP complete, incluso cuando la \"utilidad\" de cada tarea es 1, y la cantidad de todos los recursos requeridos y disponibles es 1.",
                "Dado el problema de asignación de tareas sociales con una red social arbitraria, como se define en la definición 4, el problema de decidir si una asignación de tareas φ con \"utilidad\" más de lo que ex existe es completar NP.",
                "Dada una instancia del problema y un entero K, podemos verificar en tiempo polinomial si una asignación φ es una asignación válida y si la \"utilidad\" de φ es mayor que k.Ahora demostramos que el STAP es NP-HARD al mostrar que el conjunto máximo independiente ≤p STAP.",
                "Dado un gráfico no dirigido g = (v, e) y un entero k k, construimos una red g = (v, e) que tiene una asignación de tareas eficiente con k tareas de \"utilidad\" 1 asignada si y solo si G tiene un independienteestablecer (is) de tamaño k.av1 av3 ae3 rsc (ae1) = {e1} rsc (ae4) = {e4} av4 ae2 av2 ae4 ae1 rsc (ae2) = {e2} {e3} rsc (av3) = {v3} rsc (av4) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc (ae3) = rsc (av1) = {v1} rsc (av2) = {v2} t3 = {v3, e3, e4} t4= {V4, E2, E4} E1 E2 E4 E3 V1 V2 V4V3 Figura 1: El problema MIS puede reducirse a la STAP.",
                "Definimos la \"utilidad\" 1 para cada tarea, y la cantidad de todos los recursos requeridos y disponibles para ser 1.",
                "La \"utilidad\" de esta asignación es k.Del mismo modo, si hay una solución para el STAP con el valor de \"utilidad\" K, y el conjunto de tareas asignados es n, entonces para el problema es, existe un conjunto máximo independiente n de tamaño k en G. se puede encontrar un ejemploEn la Figura 1.",
                "La eficiencia E de una tarea t ∈ T se define por la \"utilidad\" de esta tarea dividida por la suma de todos los recursos requeridos: e (t) = u (t) p r∈R rsc (t, r).",
                "Más específicamente, para cada tarea t ∈ T con \"utilidad\" u (t), hacemos lo siguiente."
            ],
            "translated_text": "",
            "candidates": [
                "utilidad",
                "utilidad",
                "utilidad",
                "utilidad",
                "Utilidad",
                "utilidad",
                "utilidad",
                "utilidad",
                "utilidad",
                "utilidad",
                "utilidad",
                "utilidad",
                "Utilidad",
                "utilidad",
                "Utilidad",
                "utilidad",
                "utilidad",
                "utilidad",
                "utilidad",
                "utilidad",
                "utilidad"
            ],
            "error": []
        },
        "allocation": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Distributed Task <br>allocation</br> in Social Networks Mathijs de Weerdt Delft Technical University Delft, The Netherlands M.M.deWeerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, The Netherlands Yingqian.Zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI) Amsterdam, The Netherlands tomas.klos@cwi.nl ABSTRACT This paper proposes a new variant of the task <br>allocation</br> problem, where the agents are connected in a social network and tasks arrive at the agents distributed over the network.",
                "We show that the complexity of this problem remains NPhard.",
                "Moreover, it is not approximable within some factor.",
                "We develop an algorithm based on the contract-net protocol.",
                "Our algorithm is completely distributed, and it assumes that agents have only local knowledge about tasks and resources.",
                "We conduct a set of experiments to evaluate the performance and scalability of the proposed algorithm in terms of solution quality and computation time.",
                "Three different types of networks, namely small-world, random and scale-free networks, are used to represent various social relationships among agents in realistic applications.",
                "The results demonstrate that our algorithm works well and that it scales well to large-scale applications.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Recent years have seen a lot of work on task and resource <br>allocation</br> methods, which can potentially be applied to many real-world applications.",
                "However, some interesting applications where relations between agents play a role require a slightly more general model.",
                "Such situations appear very frequently in real-world scenarios, and recent technological developments are bringing more of them within the range of task <br>allocation</br> methods.",
                "Especially in business applications, preferential partner selection and interaction is very common, and this aspect becomes more important for task <br>allocation</br> research, to the extent that technological developments need to be able to support it.",
                "For example, the development of semantic web and grid technologies leads to increased and renewed attention for the potential of the web to support business processes [7, 15].",
                "As an example, virtual organizations (VOs) are being re-invented in the context of the grid, where they are composed of a number of autonomous entities (representing different individuals, departments and organizations), each of which has a range of problem-solving capabilities and resources at its disposal [15, p. 237].",
                "The question is how VOs are to be dynamically composed and re-composed from individual agents, when different tasks and subtasks need to be performed.",
                "This would be done by allocating them to different agents who may each be capable of performing different subsets of those tasks.",
                "Similarly, supply chain formation (SCF) is concerned with the, possibly ad-hoc, <br>allocation</br> of services to providers in the supply chain, in such a way that overall profit is optimized [6, 21].",
                "Traditionally, such <br>allocation</br> decisions have been analyzed using transaction cost economics (TCE) [4], which takes the transaction between consecutive stages of development as its basic unit of analysis, and considers the firm and the market as alternative structural forms for organizing transactions. (Transaction cost) economics has traditionally built on analysis of comparative statics: the central problem of economic organization is considered to be the adaptation of organizational forms to the characteristics of transactions.",
                "More recently, TCEs founding father, Ronald Coase, acknowledged that this is too simplistic an approach [5, p. 245]: The analysis cannot be confined to what happens within a single firm. (. . . )",
                "What we are dealing with is a complex interrelated structure.",
                "In this paper, we study the problem of task <br>allocation</br> from the perspective of such a complex interrelated structure.",
                "In particular, the market cannot be considered as an organizational form without considering specific partners to interact with on the market [11].",
                "Specifically, therefore, we consider agents to be connected to each other in a social network.",
                "Furthermore, this network is not fully connected: as informed by the business literature, firms typically have established working relations with limited numbers of preferred partners [10]; these are the ones they consider when new tasks arrive and they have to form supply chains to allocate those tasks [19].",
                "Other than modeling the interrelated 500 978-81-904262-7-5 (RPS) c 2007 IFAAMAS structure between business partners, the social network introduced in this paper can also be used to represent other types of connections or constraints among autonomous entities that arise from other application domains.",
                "The next section gives a formal description of the task <br>allocation</br> problem on social networks.",
                "In Section 3, we prove that the complexity of this problem remains NP-hard.",
                "We then proceed to develop a distributed algorithm in Section 4, and perform a series of experiments with this algorithm, as described in Section 5.",
                "Section 6 discusses related work, and Section 7 concludes. 2.",
                "PROBLEM DESCRIPTION We formulate the social task <br>allocation</br> problem in this section.",
                "There is a set A of agents: A = {a1, . . . , am}.",
                "Agents need resources to complete tasks.",
                "Let R = {r1, . . . , rk} denote the collection of the resource types available to the agents A.",
                "Each agent a ∈ A controls a fixed amount of resources for each resource type in R, which is defined by a resource function: rsc : A × R → N. Moreover, we assume agents are connected by a social network.",
                "Definition 1 (Social network).",
                "An agent social network SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ∈ AE indicates the existence of a social connection between agents ai and aj.",
                "Suppose a set of tasks T = {t1, t2, . . . , tn} arrives at such an agent social network.",
                "Each task t ∈ T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the utility gained if task t is accomplished, and the resource function rsc : T ×R → N specifies the amount of resources required for the accomplishment of task t. Furthermore, a location function loc : T → A defines the locations (i.e., agents) at which the tasks arrive in the social network.",
                "An agent a that is the location of a task t, i.e. loc(t) = a, is called the manager of this task.",
                "Each task t ∈ T needs some specific resources from the agents in order to complete the task.",
                "The exact assignment of tasks to agents is defined by a task <br>allocation</br>.",
                "Definition 2 (Task <br>allocation</br>).",
                "Given a set of tasks T = {t1, . . . , tn} and a set of agents A = {a1, . . . , am} in a social network SN, a task <br>allocation</br> is a mapping φ : T × A × R → N. A valid task <br>allocation</br> in SN must satisfy the following constrains: • A task allocation must be correct.",
                "Each agent a ∈ A cannot use more than its available resources, i.e. for each r ∈ R, P t∈T φ(t, a, r) ≤ rsc(a, r). • A task <br>allocation</br> must be complete.",
                "For each task t ∈ T , either all allocated agents resources are sufficient, i.e. for each r ∈ R, P a∈A φ(t, a, r) ≥ rsc(t, r), or t is not allocated, i.e. φ(t, ·, ·) = 0. • A task <br>allocation</br> must obey the social relationships.",
                "Each task t ∈ T can only be allocated to agents that are (direct) neighbors of agent loc(t) in the social network SN.",
                "Each such agent that can contribute to a task is called a contractor.",
                "We write Tφ to represent the tasks that are fully allocated in φ.",
                "The utility of φ is then the summation of the utilities of each task in Tφ, i.e., Uφ = P t∈Tφ u(t).",
                "Using this notation, we define the efficient task <br>allocation</br> below.",
                "Definition 3 (Efficient task <br>allocation</br>).",
                "We say a task <br>allocation</br> φ is efficient if it is valid and Uφ is maximized, i.e., Uφ = max( P t∈Tφ u(t)).",
                "We are now ready to define the task <br>allocation</br> problem in social network that we study in this paper.",
                "Definition 4 (Social task <br>allocation</br> problem).",
                "Given a set of agents A connected by a social network SN = (A, AE), and a finite set of tasks T , the social task <br>allocation</br> problem (or STAP for short) is the problem of finding the efficient task <br>allocation</br> φ, such that φ is valid and the social welfare Uφ is maximized. 3.",
                "COMPLEXITY RESULTS The traditional task <br>allocation</br> problem, TAP (without the condition of the social network SN), is NP-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set.",
                "Although we may consider the TAP as a special case of the STAP by assuming agents are fully connected, we cannot directly use the complexity results from the TAP, since we study the STAP in an arbitrary social network, which, as we argued in the introduction, should be partially connected.",
                "We now show that the TAP with an arbitrary social network is also NP-complete, even when the utility of each task is 1, and the quantity of all required and available resources is 1.",
                "Theorem 1.",
                "Given the social task <br>allocation</br> problem with an arbitrary social network, as defined in Definition 4, the problem of deciding whether a task <br>allocation</br> φ with utility more than k exists is NP-complete.",
                "Proof.",
                "We first show that the problem is in NP.",
                "Given an instance of the problem and an integer k, we can verify in polynomial time whether an <br>allocation</br> φ is a valid <br>allocation</br> and whether the utility of φ is greater than k. We now prove that the STAP is NP-hard by showing that MAXIMUM INDEPENDENT SET ≤P STAP.",
                "Given an undirected graph G = (V, E) and an integer k, we construct a network G = (V , E ) which has an efficient task <br>allocation</br> with k tasks of utility 1 allocated if and only if G has an independent set (IS) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 Figure 1: The MIS problem can be reduced to the STAP.",
                "The left figure is an undirected graph G, which has the optimal solution {v1, v4} or {v2, v3}; the right figure is the constructed instance of the STAP, where the optimal <br>allocation</br> is {t1, t4} or {t2, t3}.",
                "An instance of the following construction is shown in Figure 1.",
                "For each node v ∈ V and each edge e ∈ E in the graph G, we create a vertex agent av and an edge agent ae in G .",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 501 When v was incident to e in G we correspondingly add an edge e in G between av and ae.",
                "We assign each agent in G one resource, which is related to the node or the edge in the graph G, i.e., for each v ∈ V , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ E, rsc(ae) = {e}.",
                "Each vertex agent avi in G has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ E}.",
                "There is no task on the edge agents in G .",
                "We define utility 1 for each task, and the quantity of all required and available resources to be 1.",
                "Taken an instance of the IS problem, suppose there is a solution of size k, i.e., a subset N ⊆ V such that no two vertices in N are joined by an edge in E and |N| = k. N specifies a set of vertex agents AN in the corresponding graph G .",
                "Given two agents a1, a2 ∈ AN we now know that there is no edge agent ae connected to both a1 and a2.",
                "Thus, for each agent a ∈ AN , a assigns its task to the edge agents which are connected to a.",
                "All other vertex agents a /∈ AN are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ AN .",
                "The set of tasks of the agents AN (|AN | = k) is thus the maximum set of tasks that can be allocated.",
                "The utility of this <br>allocation</br> is k. Similarly, if there is a solution for the STAP with the utility value k, and the allocated task set is N, then for the IS problem, there exists a maximum independent set N of size k in G. An example can be found in Figure 1.",
                "We just proved that the STAP is NP-hard for an arbitrary graph.",
                "In our proof, the complexity comes from the introduction of a social network.",
                "One may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant.",
                "We now give a complexity result on this class of networks as follows.",
                "Theorem 2.",
                "Let the number of neighbors of each agent in the social network SN be bounded by Δ for Δ ≥ 3.",
                "Computing the efficient task <br>allocation</br> given such a network is NP-complete.",
                "In addition, it is not approximable within Δε for some ε > 0.",
                "Proof.",
                "It has been shown in [2] that the maximum independent set problem in the case of the degree bounded by Δ for Δ ≥ 3 is NP-complete and is not approximable within Δε for some ε > 0.",
                "Using the similar reduction from the proof of Theorem 1, this result also holds for the STAP.",
                "Since our problem is as hard as MIS as shown in Theorem 1, it is not possible to give a worst case bound better than Δε for any polynomial time algorithm, unless P = NP. 4.",
                "ALGORITHMS To deal with the problem of allocating tasks in a social network, we present a distributed algorithm.",
                "We introduce this algorithm by describing the protocol for the agents.",
                "After that we give the optimal, centralized algorithm and an upper bound algorithm, which we use in Section 5 to benchmark the quality of our distributed algorithm. 4.1 Protocol for distributed task <br>allocation</br> We can summarize the description of the task <br>allocation</br> problem in social networks from Section 2 as follows.",
                "We Algorithm 1 Greedy distributed <br>allocation</br> protocol (GDAP).",
                "Each manager a calculates the efficiency e(t) for each of their tasks t ∈ Ta, and then while Ta = ∅: 1.",
                "Each manager a selects the most efficient task t ∈ Ta such that for each task t ∈ Ta: e(t ) ≤ e(t). 2.",
                "Each manager a requests help for t from all its neighbors (of a) by informing these neighbors of the efficiency e(t) and the required resources for t. 3.",
                "Contractors receive and store all requests, and then offer all relevant resources to the manager for the task with the highest efficiency. 4.",
                "The managers that have received sufficient offers allocate their tasks, and inform each contractor which part of the offer is accepted.",
                "When a task is allocated, or when a manager has received offers from all neighbors, but still cannot satisfy its task, the task is removed from the task list Ta. 5.",
                "Contractors update their used resources. have a (social) network of agents.",
                "Each agent has a set of resources of different types at its disposal.",
                "We also have a set of tasks.",
                "Each task requires some resources, has a fixed benefit, and is located at a certain agent.",
                "This agent is called a manager.",
                "We only allow neighboring agents to help with a task.",
                "These agents are called contractors.",
                "Agents can fulfill the role of manager as well as contractor.",
                "The problem is to find out which tasks to execute, and which resources of which contractors to use for these tasks.",
                "The idea of the protocol is as follows.",
                "All manager agents a ∈ A try to find neighboring contractors to help them with their task(s) Ta = {ti ∈ T | loc(ti) = a}.",
                "They start with offering the task that is most efficient in terms of the ratio between benefit and required resources.",
                "Out of all tasks offered, contractors select the task with the highest efficiency, and send a bid to the related manager.",
                "A bid consists of all the resources the agent is able to supply for this task.",
                "If sufficient resources have been offered, the manager selects the required resources and informs all contractors of its choice.",
                "The efficiency of a task is defined as follows: Definition 5.",
                "The efficiency e of a task t ∈ T is defined by the utility of this task divided by the sum of all required resources: e(t) = u(t)P r∈R rsc(t,r) .",
                "A more detailed description of this protocol can be found in Algorithm 1.",
                "Here it is also defined how to determine when a task should not be offered anymore, because it is impossible to fulfill locally.",
                "Obviously, a task is also not offered anymore when it has been allocated.",
                "This protocol is such that, when no two tasks have exactly the same efficiency, in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the algorithm follows.",
                "Proposition 1.",
                "For a STAP with n tasks and m agents, the run time of the distributed algorithm is O(nm), and the number of communication messages is O(n2 m). 1 Even when some tasks have the same efficiency, it is straightforward to make this result work.",
                "For example, the implementation can ensure that the contractors choose the task with the lowest task-id. 502 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 2 Optimal social task <br>allocation</br> (OPT).",
                "Repeat the following for each combination of tasks: 1.",
                "If the total reward for this combination is higher than any previous combination, test if this combination is feasible as follows: 2.",
                "Create a network flow problem for each resource type r ∈ R (separately) as follows: (a) Create a source s and a sink s . (b) For each agent a ∈ A create an agent node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has. (c) For each task t ∈ T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires. (d) For each agent a connect the agent node to all task nodes of neighboring tasks, i.e., t ∈ {t ∈ T | (a, loc(t)) ∈ AE}.",
                "Give this connection unlimited capacity. 3.",
                "Solve the maximum flow problem for the created flow networks.",
                "If the maximum flow in each network is equal to the total required resources of that type, the current combination of tasks is feasible.",
                "In that case, this is the current best combination of tasks.",
                "Proof.",
                "In the worst case, in each iteration exactly one task is removed from a task list, so there are n iterations.",
                "In each iteration in the worst case (i.e., a fully connected network), for each of the O(n) managers, O(m) messages are sent.",
                "Next the task with the highest efficiency can be selected by each contractor in O(n).",
                "Assigning an <br>allocation</br> can be done in O(m).",
                "This leads to a total of O(n + m) operations for each iteration, and thus O(n2 + nm) operations in total.",
                "The number of messages sent is O(n(nm + nm + nm)) = O(n2 m).",
                "We establish the quality of this protocol experimentally (in Section 5).",
                "Preferably, we compare the results to the optimal solution. 4.2 Optimal social task <br>allocation</br> The optimal task <br>allocation</br> algorithm should deal with the restrictions posed by the social network.",
                "For this NPcomplete problem we used an exponential brute-force algorithm to consider relevant combinations of tasks to execute.",
                "For each combination we use a maximum-flow algorithm to check whether the resources are sufficient for the selected subset of tasks.",
                "The flow network describes which resources can be used for which tasks, depending on the social network.",
                "If the maximum flow is equal to the sum of all resources required by the subset of tasks, we know that a feasible solution exists (see Algorithm 2).",
                "Clearly, we cannot expect this optimal algorithm to be able to find solutions for larger problem sizes.",
                "To establish the quality of our protocol for large instances, we use the following method to determine an upper bound. 4.3 Upper bound for social task <br>allocation</br> Given a social task <br>allocation</br> problem, if the number of resource types for every task t ∈ T is bounded by 1, the Algorithm 3 An upper bound for social task allocation (UB).",
                "Create a network flow problem with costs as follows: 1.",
                "Create a source s and a sink s . 2.",
                "For each agent a ∈ A and each resource type ri ∈ R, create an agent-resource node ai, and an edge from s to this node with capacity equal to the amount of resources of type r agent a has available and with costs 0. 3.",
                "For each task t ∈ T and each resource type ri ∈ R, create a task-resource node ti, and an edge from this node to s with capacity equal to the amount of resources of type r task t requires and costs −e(t). 4.",
                "For each resource type ri ∈ R and for each agent a connect the agent-resource node ai to all task-resource nodes ti for neighboring tasks t ∈ {t ∈ T | (a, loc(t)) ∈ AE or a = loc(t)}.",
                "Give this connection unlimited capacity and zero costs. 5.",
                "Create an edge directly from s to s with unlimited capacity and zero costs.",
                "Solve the minimum cost flow network problem for this network.",
                "The costs of the resulting network is an upper bound for the social task <br>allocation</br> problem. problem is polynomially solvable by transforming it to a flow network problem.",
                "Our method for efficiently calculating an upper bound for STAP makes use of this special case by converting any given STAP instance P into a new problem P where each task only has one resource type.",
                "More specifically, for every task t ∈ T with utility u(t), we do the following.",
                "Let m be the number of resource types {r1, . . . , rm} required by t. We then split t into a set of m tasks T = {t1, . . . , tm} where each task ti only has one unique resource type (of {r1, . . . , rm}) and each task has a fair share of the utility, i.e., the efficiency of t from Definition 5 times the amount of this resource type rsc(ti, ri).",
                "After polynomially performing this conversion for every task in T , the original problem P becomes the special case P .",
                "Note that the set of valid allocations in P is only a subset of the set of valid allocations in P , because it is now possible to partially allocate a task.",
                "From this it is easy to see that the solution of P gives an upper bound of the solution of the original problem P. To compute the optimal solution for P , we transform it to a minimum cost flow problem.",
                "We model the cost in the flow network by the negation of the new tasks utility.",
                "A polynomial-time implementation of a scaling minimum cost flow algorithm [9] is used for the computation.",
                "The resulting minimum cost flow represents a maximum <br>allocation</br> of the tasks for P .",
                "The detailed modeling is described in Algorithm 3.",
                "In the next section, we use this upper bound to estimate the quality of the GDAP for large-scale instances. 5.",
                "EXPERIMENTS We implemented the greedy distributed <br>allocation</br> protocol (GDAP), the optimal <br>allocation</br> algorithm (OPT), and the upper bound algorithm (UB) in Java, and tested them on a Linux PC.",
                "The purpose of these experiments is to study the performance of the distributed algorithm in different problem settings using different social networks.",
                "The perThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 2: The solution qualities of the GDAP and the upper bound depend on the resource ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 Numberofagents Degree small-world random scale-free Figure 3: The histogram of the degrees. formance measurements are the solution quality and computation time, where the solution quality (SQ) is computed as follows.",
                "When the number of tasks is small, we compare the output of the distributed algorithm with the optimal solution, i.e., SQ = GDAP OP T , but if it is not feasible to compute the optimal solution, we use the value returned by the upper bound algorithm for evaluation, i.e., SQ = GDAP UB .",
                "To see whether the latter is a good measure, we also compare the quality of the upper bound to the optimal solution for smaller problems.",
                "In the following, we describe the setup of all experiments, and present the results. 5.1 Experimental settings We consider several experimental environments.",
                "In all environments the agents are connected by a social network.",
                "In the experiments, three different networks are used to simulate the social relationships among agents in potential realworld problems.",
                "Small-world networks are networks where most neighbors of an agent are also connected to each other.",
                "For the experiments we use a method for generating random small-world networks proposed by Watts et al. [22], with a fixed rewiring probability p = 0.05.",
                "Scale-free networks have the property that a couple of nodes have many connections, and many nodes have only a small number of connections.",
                "To generate these we use the implementation in the JUNG library of the generator proposed by Barab´asi and Albert [3].",
                "We also generate random networks as follows.",
                "First we connect each agent to another agent such that all agents are connected.",
                "Next, we randomly add connections until the desired average degree has been reached.",
                "We now describe the different settings used in our experiments with both small and large-scale problems.",
                "Setting 1.",
                "The number of agents is 40, and the number of tasks is 20.",
                "The number of different resource types is bounded by 5, and the average number of resources required by a task is 30.",
                "Consequently, the total number of resources required by the tasks is fixed.",
                "However, the resources available to the agents are varied.",
                "We define the resource ratio to refer to the ratio between the total number of available resources and the total number of required resources.",
                "Resources are allocated uniformly to the agents.",
                "The average degrees of the networks may also change.",
                "In this setting the task benefits are distributed normally around the number of resources required.",
                "Setting 2.",
                "This setting is similar to Setting 1, but here we let the benefits of the tasks vary dramatically-40% of the tasks have around 10 times higher benefit than the other 60% of the tasks.",
                "Setting 3.",
                "This setting is for large-scale problems.",
                "The ratio between the number of agents and the number of tasks is set to 5/3, and the number of agents varies from 100 to 2000.",
                "We also fix the resource ratio to 1.2 and the average degree to 6.",
                "The number of different resource types is 20, and the average resource requirement of a tasks is 100.",
                "The task benefits are again normally distributed. 5.2 Experimental results The experiments are done with the three different settings in the three different networks mentioned before, where each recorded data is the average over 20 random instances. 5.2.1 Experiment 1 Experimental setting 1 is used for this set of experiments.",
                "We would like to see how the GDAP behaves in the different networks when the number of resources available to the agents is changing.",
                "We also study the behavior of our upper bound algorithm.",
                "For this experiment we fix the average number of neighbors (degree) in each network type to six.",
                "In Figure 2 we see how the quality of both the upper bound and the GDAP algorithm depends on the resource ratio.",
                "Remarkably, for lower resource ratios our GDAP is much closer to the optimal <br>allocation</br> than the upper bound.",
                "When the resource ratio grows above 1.5, the graphs of the upper bound and the GDAP converge, meaning that both are really close to the optimal solution.",
                "This can be explained by the fact that when plenty of resources are available, all tasks can be allocated without any conflicts.",
                "However, when resources are very scarce, the upper bound is much too optimistic, because it is based on the <br>allocation</br> of sub-tasks per resource type, and does not reason about how many of the tasks can actually be allocated completely.",
                "We also notice from the graph that the solution quality of the GDAP on all three networks is quite high (over 0.8) when the available resource is very limited (0.3).",
                "It drops below 0.8 with the increased ratio and goes up again once there are plenty of resources available (resource ratio 0.9).",
                "Clearly, if 504 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 4: The quality of the GDAP and the upper bound depend on the network degree. resources are really scarce, only a few tasks can be successfully allocated even by the optimal algorithm.",
                "Therefore, the GDAP is able to give quite a good <br>allocation</br>.",
                "Although the differences are minor, it can also be seen that the results for the small-world network are consistently slightly better than those of random networks, which in turn outperform scale-free networks.",
                "This can be understood by looking at the distribution of the agents degree, as shown in Figure 3.",
                "In this experiment, in the small-world network almost every manager has a degree of six.",
                "In random networks, the degree varies between one and about ten.",
                "However, in the scale-free network, most nodes have only three or four connections, and only a very few have up to twenty connections.",
                "As we will see in the next experiment, having more connections means getting better results.",
                "For the next experiment we fix the resource ratio to 1.0 and study the quality of both the upper bound and the GDAP algorithm related to the degree of the social network.",
                "The result can be found in Figure 4.",
                "In this figure we can see that a high average degree also leads to convergence of the upper bound and the GDAP.",
                "Obviously, when managers have many connections, it becomes easier to allocate tasks.",
                "An exception is, similar to what we have seen in Figure 2, that the solution of the GDAP is also very good if the connections are extremely limited (degree 2), due to the fact that the number of possibly allocated tasks is very small.",
                "Again we see that the upper bound is not that good for problems where resources are hard to reach, i.e. in social networks with a low average degree.2 Since the solution quality clearly depends on the resource ratio as well as on the degree of the social network, we study the effect of changing both, to see whether they influence each other.",
                "Figure 5 shows how the solution quality depends on both the resource ratio and the network degree.",
                "This graph confirms the results that the GDAP performs better for problems with higher degree and higher resource ratio.",
                "However, it is now also more clear that it performs better for very low degree and resource availability.",
                "For this experiment with 40 agents and 20 tasks, the worst performance is met for instances with degree six and resource ratio 0.6 to instances with degree twelve and resource ratio 0.3.",
                "But even for those instances, the performance lies above 0.7. 2 The consistent standard deviation of about 15% over the 20 problem instances is not displayed as error-bars in these first graphs, because it would obfuscate the interesting correlations that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Relative reward small-world Average degree Resource ratio Relative reward Figure 5: The quality of the GDAP depends on both the resource ratio and the network degree. 5.2.2 Experiment 2 To study the robustness of the GDAP against different problem settings, we generate instances where the task benefit distribution is different: 40% of the tasks gets a 10 times higher benefit (as described in Setting 2).",
                "The effect of this different distribution can be seen in Figure 6.",
                "These two graphs show that the results for the skewed task benefit distribution are slightly better on average, both when varying the resource ratio, and when varying the average degree of the network.",
                "We argue that this can be explained by the greedy nature of GDAP, which causes the tasks with high efficiency to be allocated first, and makes the algorithm perform better in this heterogeneous setting. 5.2.3 Experiment 3 The purpose of this final experiment is to test whether the algorithm can be scaled to large problems, like applications running on the internet.",
                "We therefore generate instances where the number of agents varies from 100 to 2000, and simultaneously increase the number of tasks from 166 to 3333 (Setting 3).",
                "Figure 7 shows the run time for these instances on a Linux machine with an AMD Opteron 2.4 GHz processor.",
                "These graphs confirm the theoretical analysis from the previous section, saying that both the upper bound and the GDAP are polynomial.",
                "In fact, the graphs show that the GDAP almost behaves linearly.",
                "Here we see that the locality of the GDAP really helps in reducing the computation time.",
                "Also note that the GDAP requires even less computation time than the upper bound.",
                "The quality of the GDAP for these large instances cannot be compared to the optimal solution.",
                "Therefore, in Figure 8 the upper bound is used instead.",
                "This result shows that the GDAP behaves stably and consistently well with the increasing problem size.",
                "It also shows once more that the GDAP performs better in a small-world network. 6.",
                "RELATED WORK Task <br>allocation</br> in multiagent systems has been investigated by many researchers in recent years with different assumptions and emphases.",
                "However, most of the research to date on task <br>allocation</br> does not consider social connections among agents, and studies the problem in a centralized The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free Figure 6: The quality of the GDAP algorithm for a uniform and a skewed task benefit distribution related to the resource ratio (the first graph), and the network degree (the second graph). setting.",
                "For example, Kraus et al. [12] develop an auction protocol that enables agents to form coalitions with time constraints.",
                "It assumes each agent knows the capabilities of all others.",
                "The proposed protocol is centralized, where one manager is responsible for allocating the tasks to all coalitions.",
                "Manisterski at al. [14] discuss the possibilities of achieving efficient allocations in both cooperative and noncooperative settings.",
                "They propose a centralized algorithm to find the optimal solution.",
                "In contrast to this work, we introduce also an efficient completely distributed protocol that takes the social network into account.",
                "Task <br>allocation</br> has also been studied in distributed settings by for example Shehory and Kraus [18] and by Lerman and Shehory [13].",
                "They propose distributed algorithms with low communication complexity for forming coalitions in large-scale multiagent systems.",
                "However, they do not assume the existence of any agent network.",
                "The work of Sander et al. [16] introduces computational geometry-based algorithms for distributed task <br>allocation</br> in geographical domains.",
                "Agents are then allowed to move and actively search for tasks, and the capability of agents to perform tasks is homogeneous.",
                "In order to apply their approach, agents need to have some knowledge about the geographical positions of tasks and some other agents.",
                "Other work [17] proposes a location mechanism for open multiagent systems to allocate tasks to unknown agents.",
                "In this approach each agent caches a list of agents they know.",
                "The analysis of the communication complexity of this method is based on lattice-like graphs, while we investigate how to efficiently solve task <br>allocation</br> in a social network, whose topology can be arbitrary.",
                "Networks have been employed in the context of task <br>allocation</br> in some other works as well, for example to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time(ms) Agents upper bound - small-world upper bound - random upper bound - scale-free GDAP - small-world GDAP - random GDAP - scale-free Figure 7: The run time of the GDAP algorithm. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Rewardrelativetoupperbound Agents small-world random scale-free Figure 8: The quality of the GDAP algorithm compared to the upper bound. interactions between agents and mediators [1].",
                "Mediators in this context are agents who receive the task and have connections to other agents.",
                "They break up the task into subtasks, and negotiate with other agents to obtain commitments to execute these subtasks.",
                "Their focus is on modeling the decision process of just a single mediator.",
                "Another approach is to partition the network into cliques of nodes, representing coalitions which the agents involved may use as a coordination mechanism [20].",
                "The focus of that work is distributed coalition formation among agents, but in our approach, we do not need agents to form groups before allocating tasks.",
                "Easwaran and Pitt [6] study complex tasks that require services for their accomplishment.",
                "The problem concerns the <br>allocation</br> of subtasks to service providers in a supply chain.",
                "Another study of task <br>allocation</br> in supply chains is [21], where it is argued that the defining characteristic of Supply Chain Formation is hierarchical subtask decomposition (HSD).",
                "HSD is implemented using task dependency networks (TDN), with agents and goods as nodes, and I/O relations between them as edges.",
                "Here, the network is given, and the problem is to select a subgraph, for which the authors propose a market-based algorithm, in particular, a series of auctions.",
                "Compared to these works, our approach is more general in the sense that we are able to model different types of connections or constraints among agents for different problem domains in addition to supply chain formation.",
                "Finally, social networks have been used in the context of team formation.",
                "Previous work has shown how to learn which relations are more beneficial in the long run [8], and adapt the social network accordingly.",
                "We believe these results can be transferred to the domain of task <br>allocation</br> as well, leaving this as a topic for further study. 506 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 7.",
                "CONCLUSIONS In this paper we studied the task <br>allocation</br> problem in a social network (STAP), which can be seen as a new, more general, variant of the TAP.",
                "We believe it has a great amount of potential for realistic problems.",
                "We provided complexity results on computing the efficient solution for the STAP, as well as a bound on possible approximation algorithms.",
                "Next, we presented a distributed protocol, related to the contractnet protocol.",
                "We also introduced an exponential algorithm to compute the optimal solution, as well as a fast upperbound algorithm.",
                "Finally, we used the optimal solution and the upper-bound (for larger instances) to conduct an extensive set of experiments to assess the solution quality and the computational efficiency of the proposed distributed algorithm in different types of networks, namely, small-world networks, random networks, and scale-free networks.",
                "The results presented in this paper show that the distributed algorithm performs well in small-world, scale-free, and random networks, and for many different settings.",
                "Also other experiments were done (e.g. on grid networks) and these results held up over a wider range of scenarios.",
                "Furthermore, we showed that it scales well to large networks, both in terms of quality and of required computation time.",
                "The results also suggest that small-world networks are slightly better suited for local task <br>allocation</br>, because there are no nodes with very few neighbors.",
                "There are many interesting extensions to our current work.",
                "In this paper, we focus on the computational aspect in the design of the distributed algorithm.",
                "In our future work, we would also like to address some of the related issues in game theory, such as strategic agents, and show desirable properties of a distributed protocol in such a context.",
                "In the current algorithm we assume that agents can only contact their neighbors to request resources, which may explain why our algorithm performs not as good in the scalefree networks as in the small-world networks.",
                "Our future work may allow agents to reallocate (sub)tasks.",
                "We are interested in seeing how such interactions will affect the performance of task <br>allocation</br> in different social networks.",
                "A third interesting topic for further work is the addition of reputation information among the agents.",
                "This may help to model changing business relations and incentivize agents to follow the protocol.",
                "Finally, it would be interesting to study real-life instances of the social task <br>allocation</br> problem, and see how they relate to the randomly generated networks of different types studied in this paper.",
                "Acknowledgments.",
                "This work is supported by the Technology Foundation STW, applied science division of NWO, and the Ministry of Economic Affairs. 8.",
                "REFERENCES [1] S. Abdallah and V. Lesser.",
                "Modeling Task <br>allocation</br> Using a Decision Theoretic Model.",
                "In Proc.",
                "AAMAS, pages 719-726.",
                "ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson, and D. Zuckerman.",
                "Derandomized Graph Products.",
                "Computational Complexity, 5(1):60-75, 1995. [3] A.-L. Barab´asi and R. Albert.",
                "Emergence of scaling in random networks.",
                "Science, 286(5439):509-512, 1999. [4] R. H. Coase.",
                "The Nature of the Firm.",
                "Economica NS, 4(16):386-405, 1937. [5] R. H. Coase.",
                "My Evolution as an Economist.",
                "In W. Breit and R. W. Spencer, editors, Lives of the Laureates, pages 227-249.",
                "MIT Press, 1995. [6] A. M. Easwaran and J. Pitt.",
                "Supply Chain Formation in Open, Market-Based Multi-Agent Systems.",
                "International J. of Computational Intelligence and Applications, 2(3):349-363, 2002. [7] I.",
                "Foster, N. R. Jennings, and C. Kesselman.",
                "Brain Meets Brawn: Why Grid and Agents Need Each Other.",
                "In Proc.",
                "AAMAS, pages 8-15, Washington, DC, USA, 2004.",
                "IEEE Computer Society. [8] M. E. Gaston and M. desJardins.",
                "Agent-organized networks for dynamic team formation.",
                "In Proc.",
                "AAMAS, pages 230-237, New York, NY, USA, 2005.",
                "ACM Press. [9] A. Goldberg.",
                "An Efficient Implementation of a Scaling Minimum-Cost Flow Algorithm.",
                "J. of Algorithms, 22:1-29, 1997. [10] R. Gulati.",
                "Does Familiarity Breed Trust?",
                "The Implications of Repeated Ties for Contractual Choice in Alliances.",
                "Academy of Management Journal, 38(1):85-112, 1995. [11] T. Klos and B. Nooteboom.",
                "Agent-based Computational Transaction Cost Economics.",
                "Economic Dynamics and Control, 25(3-4):503-526, 01. [12] S. Kraus, O. Shehory, and G. Taase.",
                "Coalition formation with uncertain heterogeneous information.",
                "In Proc.",
                "AAMAS, pages 1-8.",
                "ACM, 2003. [13] K. Lerman and O. Shehory.",
                "Coalition formation for large-scale electronic markets.",
                "In Proc.",
                "ICMAS, pages 167-174.",
                "IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus, and N. Jennings.",
                "Forming Efficient Agent Groups for Completing Complex Tasks.",
                "In Proc.",
                "AAMAS, pages 257-264.",
                "ACM, 2006. [15] J. Patel et al.",
                "Agent-Based Virtual Organizations for the Grid.",
                "Multi-Agent and Grid Systems, 1(4):237-249, 2005. [16] P. V. Sander, D. Peleshchuk, and B. J. Grosz.",
                "A scalable, distributed algorithm for efficient task <br>allocation</br>.",
                "In Proc.",
                "AAMAS, pages 1191-1198, New York, NY, USA, 2002.",
                "ACM Press. [17] O. Shehory.",
                "A scalable agent location mechanism.",
                "In Proc.",
                "ATAL, volume 1757 of LNCS, pages 162-172.",
                "Springer, 2000. [18] O. Shehory and S. Kraus.",
                "Methods for Task <br>allocation</br> via Agent Coalition Formation.",
                "Artificial Intelligence, 101(1-2):165-200, 1998. [19] R. M. Sreenath and M. P. Singh.",
                "Agent-based service selection.",
                "Web Semantics, 1(3):261-279, 2004. [20] P. T. Toˇsi´c and G. A. Agha.",
                "Maximal Clique Based Distributed Coalition Formation for Task <br>allocation</br> in Large-Scale Multi-Agent Systems.",
                "In Proc.",
                "MMAS, volume 3446 of LNAI, pages 104-120.",
                "Springer, 2005. [21] W. E. Walsh and M. P. Wellman.",
                "Modeling Supply Chain Formation in Multiagent Systems.",
                "In Proc.",
                "AMEC II, volume 1788 of LNAI, pages 94-101.",
                "Springer, 2000. [22] D. J. Watts and S. H. Strogatz.",
                "Collective dynamics of small world networks.",
                "Nature, 393:440-442, 1998.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 507"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "\"Asignación de tareas distribuidas en las redes sociales Mathijs de Weerdt Delft Technical University Delft, Países Bajos M.M.Deweerdt@tudelft.Nl Yingqian Zhang Delft Technical University Delft, los Países Bajos yingqian.zhang@tudelft.nl Tomas Klos para matemáticos y ciencias de la informática (Cwi (CWI (CWI (CWI CHWI (CWI) Amsterdam, Países Bajos tomas.klos@cwi.nl Resumen Este documento propone una nueva variante del problema de \"asignación\" de la tarea, donde los agentes están conectados en una red social y las tareas llegan a los agentes distribuidos sobre la red.",
                "Introducción Los últimos años han visto mucho trabajo en métodos de \"asignación\" de tareas y recursos, que potencialmente pueden aplicarse a muchas aplicaciones del mundo real.",
                "Tales situaciones aparecen con mucha frecuencia en los escenarios del mundo real, y los desarrollos tecnológicos recientes están trayendo más de ellas dentro del rango de métodos de \"asignación\" de tareas.",
                "Especialmente en aplicaciones comerciales, la selección e interacción de socios preferenciales es muy común, y este aspecto se vuelve más importante para la investigación de \"asignación\" de tareas, en la medida en que los desarrollos tecnológicos deben poder apoyarlo.",
                "Del mismo modo, la formación de la cadena de suministro (SCF) se refiere a la \"asignación\" de servicios ad-hoc de los servicios en la cadena de suministro, de tal manera que el beneficio general se optimiza [6, 21].",
                "Tradicionalmente, tales decisiones de \"asignación\" se han analizado utilizando la economía de costos de transacción (TCE) [4], que toma la transacción entre las etapas consecutivas de desarrollo como su unidad básica de análisis, y considera la empresa y el mercado como formas estructurales alternativas para organizaractas.(Costo de transacción) La economía se ha basado tradicionalmente en el análisis de las estadísticas comparativas: el problema central de la organización económica se considera la adaptación de las formas organizacionales a las características de las transacciones.",
                "En este artículo, estudiamos el problema de la \"asignación\" de la tarea desde la perspectiva de una estructura interrelacionada tan compleja.",
                "La siguiente sección ofrece una descripción formal del problema de \"asignación\" de la tarea en las redes sociales.",
                "Descripción del problema Formulamos el problema de la \"asignación\" de la tarea social en esta sección.",
                "La asignación exacta de tareas a los agentes se define mediante una \"asignación\" de la tarea."
            ],
            "translated_text": "",
            "candidates": [
                "asignación",
                "Asignación de tareas distribuidas en las redes sociales Mathijs de Weerdt Delft Technical University Delft, Países Bajos M.M.Deweerdt@tudelft.Nl Yingqian Zhang Delft Technical University Delft, los Países Bajos yingqian.zhang@tudelft.nl Tomas Klos para matemáticos y ciencias de la informática (Cwi (CWI (CWI (CWI CHWI (CWI) Amsterdam, Países Bajos tomas.klos@cwi.nl Resumen Este documento propone una nueva variante del problema de ",
                "asignación",
                "asignación",
                "asignación",
                "asignación",
                "asignación",
                "asignación",
                "asignación",
                "asignación",
                "asignación",
                "asignación",
                "asignación",
                "asignación",
                "asignación",
                "asignación",
                "asignación",
                "asignación",
                "asignación",
                "asignación"
            ],
            "error": []
        },
        "algorithm": {
            "translated_key": "algoritmo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Distributed Task Allocation in Social Networks Mathijs de Weerdt Delft Technical University Delft, The Netherlands M.M.deWeerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, The Netherlands Yingqian.Zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI) Amsterdam, The Netherlands tomas.klos@cwi.nl ABSTRACT This paper proposes a new variant of the task allocation problem, where the agents are connected in a social network and tasks arrive at the agents distributed over the network.",
                "We show that the complexity of this problem remains NPhard.",
                "Moreover, it is not approximable within some factor.",
                "We develop an <br>algorithm</br> based on the contract-net protocol.",
                "Our <br>algorithm</br> is completely distributed, and it assumes that agents have only local knowledge about tasks and resources.",
                "We conduct a set of experiments to evaluate the performance and scalability of the proposed <br>algorithm</br> in terms of solution quality and computation time.",
                "Three different types of networks, namely small-world, random and scale-free networks, are used to represent various social relationships among agents in realistic applications.",
                "The results demonstrate that our <br>algorithm</br> works well and that it scales well to large-scale applications.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Recent years have seen a lot of work on task and resource allocation methods, which can potentially be applied to many real-world applications.",
                "However, some interesting applications where relations between agents play a role require a slightly more general model.",
                "Such situations appear very frequently in real-world scenarios, and recent technological developments are bringing more of them within the range of task allocation methods.",
                "Especially in business applications, preferential partner selection and interaction is very common, and this aspect becomes more important for task allocation research, to the extent that technological developments need to be able to support it.",
                "For example, the development of semantic web and grid technologies leads to increased and renewed attention for the potential of the web to support business processes [7, 15].",
                "As an example, virtual organizations (VOs) are being re-invented in the context of the grid, where they are composed of a number of autonomous entities (representing different individuals, departments and organizations), each of which has a range of problem-solving capabilities and resources at its disposal [15, p. 237].",
                "The question is how VOs are to be dynamically composed and re-composed from individual agents, when different tasks and subtasks need to be performed.",
                "This would be done by allocating them to different agents who may each be capable of performing different subsets of those tasks.",
                "Similarly, supply chain formation (SCF) is concerned with the, possibly ad-hoc, allocation of services to providers in the supply chain, in such a way that overall profit is optimized [6, 21].",
                "Traditionally, such allocation decisions have been analyzed using transaction cost economics (TCE) [4], which takes the transaction between consecutive stages of development as its basic unit of analysis, and considers the firm and the market as alternative structural forms for organizing transactions. (Transaction cost) economics has traditionally built on analysis of comparative statics: the central problem of economic organization is considered to be the adaptation of organizational forms to the characteristics of transactions.",
                "More recently, TCEs founding father, Ronald Coase, acknowledged that this is too simplistic an approach [5, p. 245]: The analysis cannot be confined to what happens within a single firm. (. . . )",
                "What we are dealing with is a complex interrelated structure.",
                "In this paper, we study the problem of task allocation from the perspective of such a complex interrelated structure.",
                "In particular, the market cannot be considered as an organizational form without considering specific partners to interact with on the market [11].",
                "Specifically, therefore, we consider agents to be connected to each other in a social network.",
                "Furthermore, this network is not fully connected: as informed by the business literature, firms typically have established working relations with limited numbers of preferred partners [10]; these are the ones they consider when new tasks arrive and they have to form supply chains to allocate those tasks [19].",
                "Other than modeling the interrelated 500 978-81-904262-7-5 (RPS) c 2007 IFAAMAS structure between business partners, the social network introduced in this paper can also be used to represent other types of connections or constraints among autonomous entities that arise from other application domains.",
                "The next section gives a formal description of the task allocation problem on social networks.",
                "In Section 3, we prove that the complexity of this problem remains NP-hard.",
                "We then proceed to develop a distributed <br>algorithm</br> in Section 4, and perform a series of experiments with this <br>algorithm</br>, as described in Section 5.",
                "Section 6 discusses related work, and Section 7 concludes. 2.",
                "PROBLEM DESCRIPTION We formulate the social task allocation problem in this section.",
                "There is a set A of agents: A = {a1, . . . , am}.",
                "Agents need resources to complete tasks.",
                "Let R = {r1, . . . , rk} denote the collection of the resource types available to the agents A.",
                "Each agent a ∈ A controls a fixed amount of resources for each resource type in R, which is defined by a resource function: rsc : A × R → N. Moreover, we assume agents are connected by a social network.",
                "Definition 1 (Social network).",
                "An agent social network SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ∈ AE indicates the existence of a social connection between agents ai and aj.",
                "Suppose a set of tasks T = {t1, t2, . . . , tn} arrives at such an agent social network.",
                "Each task t ∈ T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the utility gained if task t is accomplished, and the resource function rsc : T ×R → N specifies the amount of resources required for the accomplishment of task t. Furthermore, a location function loc : T → A defines the locations (i.e., agents) at which the tasks arrive in the social network.",
                "An agent a that is the location of a task t, i.e. loc(t) = a, is called the manager of this task.",
                "Each task t ∈ T needs some specific resources from the agents in order to complete the task.",
                "The exact assignment of tasks to agents is defined by a task allocation.",
                "Definition 2 (Task allocation).",
                "Given a set of tasks T = {t1, . . . , tn} and a set of agents A = {a1, . . . , am} in a social network SN, a task allocation is a mapping φ : T × A × R → N. A valid task allocation in SN must satisfy the following constrains: • A task allocation must be correct.",
                "Each agent a ∈ A cannot use more than its available resources, i.e. for each r ∈ R, P t∈T φ(t, a, r) ≤ rsc(a, r). • A task allocation must be complete.",
                "For each task t ∈ T , either all allocated agents resources are sufficient, i.e. for each r ∈ R, P a∈A φ(t, a, r) ≥ rsc(t, r), or t is not allocated, i.e. φ(t, ·, ·) = 0. • A task allocation must obey the social relationships.",
                "Each task t ∈ T can only be allocated to agents that are (direct) neighbors of agent loc(t) in the social network SN.",
                "Each such agent that can contribute to a task is called a contractor.",
                "We write Tφ to represent the tasks that are fully allocated in φ.",
                "The utility of φ is then the summation of the utilities of each task in Tφ, i.e., Uφ = P t∈Tφ u(t).",
                "Using this notation, we define the efficient task allocation below.",
                "Definition 3 (Efficient task allocation).",
                "We say a task allocation φ is efficient if it is valid and Uφ is maximized, i.e., Uφ = max( P t∈Tφ u(t)).",
                "We are now ready to define the task allocation problem in social network that we study in this paper.",
                "Definition 4 (Social task allocation problem).",
                "Given a set of agents A connected by a social network SN = (A, AE), and a finite set of tasks T , the social task allocation problem (or STAP for short) is the problem of finding the efficient task allocation φ, such that φ is valid and the social welfare Uφ is maximized. 3.",
                "COMPLEXITY RESULTS The traditional task allocation problem, TAP (without the condition of the social network SN), is NP-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set.",
                "Although we may consider the TAP as a special case of the STAP by assuming agents are fully connected, we cannot directly use the complexity results from the TAP, since we study the STAP in an arbitrary social network, which, as we argued in the introduction, should be partially connected.",
                "We now show that the TAP with an arbitrary social network is also NP-complete, even when the utility of each task is 1, and the quantity of all required and available resources is 1.",
                "Theorem 1.",
                "Given the social task allocation problem with an arbitrary social network, as defined in Definition 4, the problem of deciding whether a task allocation φ with utility more than k exists is NP-complete.",
                "Proof.",
                "We first show that the problem is in NP.",
                "Given an instance of the problem and an integer k, we can verify in polynomial time whether an allocation φ is a valid allocation and whether the utility of φ is greater than k. We now prove that the STAP is NP-hard by showing that MAXIMUM INDEPENDENT SET ≤P STAP.",
                "Given an undirected graph G = (V, E) and an integer k, we construct a network G = (V , E ) which has an efficient task allocation with k tasks of utility 1 allocated if and only if G has an independent set (IS) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 Figure 1: The MIS problem can be reduced to the STAP.",
                "The left figure is an undirected graph G, which has the optimal solution {v1, v4} or {v2, v3}; the right figure is the constructed instance of the STAP, where the optimal allocation is {t1, t4} or {t2, t3}.",
                "An instance of the following construction is shown in Figure 1.",
                "For each node v ∈ V and each edge e ∈ E in the graph G, we create a vertex agent av and an edge agent ae in G .",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 501 When v was incident to e in G we correspondingly add an edge e in G between av and ae.",
                "We assign each agent in G one resource, which is related to the node or the edge in the graph G, i.e., for each v ∈ V , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ E, rsc(ae) = {e}.",
                "Each vertex agent avi in G has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ E}.",
                "There is no task on the edge agents in G .",
                "We define utility 1 for each task, and the quantity of all required and available resources to be 1.",
                "Taken an instance of the IS problem, suppose there is a solution of size k, i.e., a subset N ⊆ V such that no two vertices in N are joined by an edge in E and |N| = k. N specifies a set of vertex agents AN in the corresponding graph G .",
                "Given two agents a1, a2 ∈ AN we now know that there is no edge agent ae connected to both a1 and a2.",
                "Thus, for each agent a ∈ AN , a assigns its task to the edge agents which are connected to a.",
                "All other vertex agents a /∈ AN are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ AN .",
                "The set of tasks of the agents AN (|AN | = k) is thus the maximum set of tasks that can be allocated.",
                "The utility of this allocation is k. Similarly, if there is a solution for the STAP with the utility value k, and the allocated task set is N, then for the IS problem, there exists a maximum independent set N of size k in G. An example can be found in Figure 1.",
                "We just proved that the STAP is NP-hard for an arbitrary graph.",
                "In our proof, the complexity comes from the introduction of a social network.",
                "One may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant.",
                "We now give a complexity result on this class of networks as follows.",
                "Theorem 2.",
                "Let the number of neighbors of each agent in the social network SN be bounded by Δ for Δ ≥ 3.",
                "Computing the efficient task allocation given such a network is NP-complete.",
                "In addition, it is not approximable within Δε for some ε > 0.",
                "Proof.",
                "It has been shown in [2] that the maximum independent set problem in the case of the degree bounded by Δ for Δ ≥ 3 is NP-complete and is not approximable within Δε for some ε > 0.",
                "Using the similar reduction from the proof of Theorem 1, this result also holds for the STAP.",
                "Since our problem is as hard as MIS as shown in Theorem 1, it is not possible to give a worst case bound better than Δε for any polynomial time <br>algorithm</br>, unless P = NP. 4.",
                "ALGORITHMS To deal with the problem of allocating tasks in a social network, we present a distributed <br>algorithm</br>.",
                "We introduce this <br>algorithm</br> by describing the protocol for the agents.",
                "After that we give the optimal, centralized <br>algorithm</br> and an upper bound <br>algorithm</br>, which we use in Section 5 to benchmark the quality of our distributed algorithm. 4.1 Protocol for distributed task allocation We can summarize the description of the task allocation problem in social networks from Section 2 as follows.",
                "We <br>algorithm</br> 1 Greedy distributed allocation protocol (GDAP).",
                "Each manager a calculates the efficiency e(t) for each of their tasks t ∈ Ta, and then while Ta = ∅: 1.",
                "Each manager a selects the most efficient task t ∈ Ta such that for each task t ∈ Ta: e(t ) ≤ e(t). 2.",
                "Each manager a requests help for t from all its neighbors (of a) by informing these neighbors of the efficiency e(t) and the required resources for t. 3.",
                "Contractors receive and store all requests, and then offer all relevant resources to the manager for the task with the highest efficiency. 4.",
                "The managers that have received sufficient offers allocate their tasks, and inform each contractor which part of the offer is accepted.",
                "When a task is allocated, or when a manager has received offers from all neighbors, but still cannot satisfy its task, the task is removed from the task list Ta. 5.",
                "Contractors update their used resources. have a (social) network of agents.",
                "Each agent has a set of resources of different types at its disposal.",
                "We also have a set of tasks.",
                "Each task requires some resources, has a fixed benefit, and is located at a certain agent.",
                "This agent is called a manager.",
                "We only allow neighboring agents to help with a task.",
                "These agents are called contractors.",
                "Agents can fulfill the role of manager as well as contractor.",
                "The problem is to find out which tasks to execute, and which resources of which contractors to use for these tasks.",
                "The idea of the protocol is as follows.",
                "All manager agents a ∈ A try to find neighboring contractors to help them with their task(s) Ta = {ti ∈ T | loc(ti) = a}.",
                "They start with offering the task that is most efficient in terms of the ratio between benefit and required resources.",
                "Out of all tasks offered, contractors select the task with the highest efficiency, and send a bid to the related manager.",
                "A bid consists of all the resources the agent is able to supply for this task.",
                "If sufficient resources have been offered, the manager selects the required resources and informs all contractors of its choice.",
                "The efficiency of a task is defined as follows: Definition 5.",
                "The efficiency e of a task t ∈ T is defined by the utility of this task divided by the sum of all required resources: e(t) = u(t)P r∈R rsc(t,r) .",
                "A more detailed description of this protocol can be found in <br>algorithm</br> 1.",
                "Here it is also defined how to determine when a task should not be offered anymore, because it is impossible to fulfill locally.",
                "Obviously, a task is also not offered anymore when it has been allocated.",
                "This protocol is such that, when no two tasks have exactly the same efficiency, in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the <br>algorithm</br> follows.",
                "Proposition 1.",
                "For a STAP with n tasks and m agents, the run time of the distributed <br>algorithm</br> is O(nm), and the number of communication messages is O(n2 m). 1 Even when some tasks have the same efficiency, it is straightforward to make this result work.",
                "For example, the implementation can ensure that the contractors choose the task with the lowest task-id. 502 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) <br>algorithm</br> 2 Optimal social task allocation (OPT).",
                "Repeat the following for each combination of tasks: 1.",
                "If the total reward for this combination is higher than any previous combination, test if this combination is feasible as follows: 2.",
                "Create a network flow problem for each resource type r ∈ R (separately) as follows: (a) Create a source s and a sink s . (b) For each agent a ∈ A create an agent node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has. (c) For each task t ∈ T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires. (d) For each agent a connect the agent node to all task nodes of neighboring tasks, i.e., t ∈ {t ∈ T | (a, loc(t)) ∈ AE}.",
                "Give this connection unlimited capacity. 3.",
                "Solve the maximum flow problem for the created flow networks.",
                "If the maximum flow in each network is equal to the total required resources of that type, the current combination of tasks is feasible.",
                "In that case, this is the current best combination of tasks.",
                "Proof.",
                "In the worst case, in each iteration exactly one task is removed from a task list, so there are n iterations.",
                "In each iteration in the worst case (i.e., a fully connected network), for each of the O(n) managers, O(m) messages are sent.",
                "Next the task with the highest efficiency can be selected by each contractor in O(n).",
                "Assigning an allocation can be done in O(m).",
                "This leads to a total of O(n + m) operations for each iteration, and thus O(n2 + nm) operations in total.",
                "The number of messages sent is O(n(nm + nm + nm)) = O(n2 m).",
                "We establish the quality of this protocol experimentally (in Section 5).",
                "Preferably, we compare the results to the optimal solution. 4.2 Optimal social task allocation The optimal task allocation <br>algorithm</br> should deal with the restrictions posed by the social network.",
                "For this NPcomplete problem we used an exponential brute-force <br>algorithm</br> to consider relevant combinations of tasks to execute.",
                "For each combination we use a maximum-flow <br>algorithm</br> to check whether the resources are sufficient for the selected subset of tasks.",
                "The flow network describes which resources can be used for which tasks, depending on the social network.",
                "If the maximum flow is equal to the sum of all resources required by the subset of tasks, we know that a feasible solution exists (see <br>algorithm</br> 2).",
                "Clearly, we cannot expect this optimal <br>algorithm</br> to be able to find solutions for larger problem sizes.",
                "To establish the quality of our protocol for large instances, we use the following method to determine an upper bound. 4.3 Upper bound for social task allocation Given a social task allocation problem, if the number of resource types for every task t ∈ T is bounded by 1, the <br>algorithm</br> 3 An upper bound for social task allocation (UB).",
                "Create a network flow problem with costs as follows: 1.",
                "Create a source s and a sink s . 2.",
                "For each agent a ∈ A and each resource type ri ∈ R, create an agent-resource node ai, and an edge from s to this node with capacity equal to the amount of resources of type r agent a has available and with costs 0. 3.",
                "For each task t ∈ T and each resource type ri ∈ R, create a task-resource node ti, and an edge from this node to s with capacity equal to the amount of resources of type r task t requires and costs −e(t). 4.",
                "For each resource type ri ∈ R and for each agent a connect the agent-resource node ai to all task-resource nodes ti for neighboring tasks t ∈ {t ∈ T | (a, loc(t)) ∈ AE or a = loc(t)}.",
                "Give this connection unlimited capacity and zero costs. 5.",
                "Create an edge directly from s to s with unlimited capacity and zero costs.",
                "Solve the minimum cost flow network problem for this network.",
                "The costs of the resulting network is an upper bound for the social task allocation problem. problem is polynomially solvable by transforming it to a flow network problem.",
                "Our method for efficiently calculating an upper bound for STAP makes use of this special case by converting any given STAP instance P into a new problem P where each task only has one resource type.",
                "More specifically, for every task t ∈ T with utility u(t), we do the following.",
                "Let m be the number of resource types {r1, . . . , rm} required by t. We then split t into a set of m tasks T = {t1, . . . , tm} where each task ti only has one unique resource type (of {r1, . . . , rm}) and each task has a fair share of the utility, i.e., the efficiency of t from Definition 5 times the amount of this resource type rsc(ti, ri).",
                "After polynomially performing this conversion for every task in T , the original problem P becomes the special case P .",
                "Note that the set of valid allocations in P is only a subset of the set of valid allocations in P , because it is now possible to partially allocate a task.",
                "From this it is easy to see that the solution of P gives an upper bound of the solution of the original problem P. To compute the optimal solution for P , we transform it to a minimum cost flow problem.",
                "We model the cost in the flow network by the negation of the new tasks utility.",
                "A polynomial-time implementation of a scaling minimum cost flow <br>algorithm</br> [9] is used for the computation.",
                "The resulting minimum cost flow represents a maximum allocation of the tasks for P .",
                "The detailed modeling is described in <br>algorithm</br> 3.",
                "In the next section, we use this upper bound to estimate the quality of the GDAP for large-scale instances. 5.",
                "EXPERIMENTS We implemented the greedy distributed allocation protocol (GDAP), the optimal allocation <br>algorithm</br> (OPT), and the upper bound <br>algorithm</br> (UB) in Java, and tested them on a Linux PC.",
                "The purpose of these experiments is to study the performance of the distributed <br>algorithm</br> in different problem settings using different social networks.",
                "The perThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 2: The solution qualities of the GDAP and the upper bound depend on the resource ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 Numberofagents Degree small-world random scale-free Figure 3: The histogram of the degrees. formance measurements are the solution quality and computation time, where the solution quality (SQ) is computed as follows.",
                "When the number of tasks is small, we compare the output of the distributed <br>algorithm</br> with the optimal solution, i.e., SQ = GDAP OP T , but if it is not feasible to compute the optimal solution, we use the value returned by the upper bound <br>algorithm</br> for evaluation, i.e., SQ = GDAP UB .",
                "To see whether the latter is a good measure, we also compare the quality of the upper bound to the optimal solution for smaller problems.",
                "In the following, we describe the setup of all experiments, and present the results. 5.1 Experimental settings We consider several experimental environments.",
                "In all environments the agents are connected by a social network.",
                "In the experiments, three different networks are used to simulate the social relationships among agents in potential realworld problems.",
                "Small-world networks are networks where most neighbors of an agent are also connected to each other.",
                "For the experiments we use a method for generating random small-world networks proposed by Watts et al. [22], with a fixed rewiring probability p = 0.05.",
                "Scale-free networks have the property that a couple of nodes have many connections, and many nodes have only a small number of connections.",
                "To generate these we use the implementation in the JUNG library of the generator proposed by Barab´asi and Albert [3].",
                "We also generate random networks as follows.",
                "First we connect each agent to another agent such that all agents are connected.",
                "Next, we randomly add connections until the desired average degree has been reached.",
                "We now describe the different settings used in our experiments with both small and large-scale problems.",
                "Setting 1.",
                "The number of agents is 40, and the number of tasks is 20.",
                "The number of different resource types is bounded by 5, and the average number of resources required by a task is 30.",
                "Consequently, the total number of resources required by the tasks is fixed.",
                "However, the resources available to the agents are varied.",
                "We define the resource ratio to refer to the ratio between the total number of available resources and the total number of required resources.",
                "Resources are allocated uniformly to the agents.",
                "The average degrees of the networks may also change.",
                "In this setting the task benefits are distributed normally around the number of resources required.",
                "Setting 2.",
                "This setting is similar to Setting 1, but here we let the benefits of the tasks vary dramatically-40% of the tasks have around 10 times higher benefit than the other 60% of the tasks.",
                "Setting 3.",
                "This setting is for large-scale problems.",
                "The ratio between the number of agents and the number of tasks is set to 5/3, and the number of agents varies from 100 to 2000.",
                "We also fix the resource ratio to 1.2 and the average degree to 6.",
                "The number of different resource types is 20, and the average resource requirement of a tasks is 100.",
                "The task benefits are again normally distributed. 5.2 Experimental results The experiments are done with the three different settings in the three different networks mentioned before, where each recorded data is the average over 20 random instances. 5.2.1 Experiment 1 Experimental setting 1 is used for this set of experiments.",
                "We would like to see how the GDAP behaves in the different networks when the number of resources available to the agents is changing.",
                "We also study the behavior of our upper bound <br>algorithm</br>.",
                "For this experiment we fix the average number of neighbors (degree) in each network type to six.",
                "In Figure 2 we see how the quality of both the upper bound and the GDAP <br>algorithm</br> depends on the resource ratio.",
                "Remarkably, for lower resource ratios our GDAP is much closer to the optimal allocation than the upper bound.",
                "When the resource ratio grows above 1.5, the graphs of the upper bound and the GDAP converge, meaning that both are really close to the optimal solution.",
                "This can be explained by the fact that when plenty of resources are available, all tasks can be allocated without any conflicts.",
                "However, when resources are very scarce, the upper bound is much too optimistic, because it is based on the allocation of sub-tasks per resource type, and does not reason about how many of the tasks can actually be allocated completely.",
                "We also notice from the graph that the solution quality of the GDAP on all three networks is quite high (over 0.8) when the available resource is very limited (0.3).",
                "It drops below 0.8 with the increased ratio and goes up again once there are plenty of resources available (resource ratio 0.9).",
                "Clearly, if 504 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 4: The quality of the GDAP and the upper bound depend on the network degree. resources are really scarce, only a few tasks can be successfully allocated even by the optimal <br>algorithm</br>.",
                "Therefore, the GDAP is able to give quite a good allocation.",
                "Although the differences are minor, it can also be seen that the results for the small-world network are consistently slightly better than those of random networks, which in turn outperform scale-free networks.",
                "This can be understood by looking at the distribution of the agents degree, as shown in Figure 3.",
                "In this experiment, in the small-world network almost every manager has a degree of six.",
                "In random networks, the degree varies between one and about ten.",
                "However, in the scale-free network, most nodes have only three or four connections, and only a very few have up to twenty connections.",
                "As we will see in the next experiment, having more connections means getting better results.",
                "For the next experiment we fix the resource ratio to 1.0 and study the quality of both the upper bound and the GDAP <br>algorithm</br> related to the degree of the social network.",
                "The result can be found in Figure 4.",
                "In this figure we can see that a high average degree also leads to convergence of the upper bound and the GDAP.",
                "Obviously, when managers have many connections, it becomes easier to allocate tasks.",
                "An exception is, similar to what we have seen in Figure 2, that the solution of the GDAP is also very good if the connections are extremely limited (degree 2), due to the fact that the number of possibly allocated tasks is very small.",
                "Again we see that the upper bound is not that good for problems where resources are hard to reach, i.e. in social networks with a low average degree.2 Since the solution quality clearly depends on the resource ratio as well as on the degree of the social network, we study the effect of changing both, to see whether they influence each other.",
                "Figure 5 shows how the solution quality depends on both the resource ratio and the network degree.",
                "This graph confirms the results that the GDAP performs better for problems with higher degree and higher resource ratio.",
                "However, it is now also more clear that it performs better for very low degree and resource availability.",
                "For this experiment with 40 agents and 20 tasks, the worst performance is met for instances with degree six and resource ratio 0.6 to instances with degree twelve and resource ratio 0.3.",
                "But even for those instances, the performance lies above 0.7. 2 The consistent standard deviation of about 15% over the 20 problem instances is not displayed as error-bars in these first graphs, because it would obfuscate the interesting correlations that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Relative reward small-world Average degree Resource ratio Relative reward Figure 5: The quality of the GDAP depends on both the resource ratio and the network degree. 5.2.2 Experiment 2 To study the robustness of the GDAP against different problem settings, we generate instances where the task benefit distribution is different: 40% of the tasks gets a 10 times higher benefit (as described in Setting 2).",
                "The effect of this different distribution can be seen in Figure 6.",
                "These two graphs show that the results for the skewed task benefit distribution are slightly better on average, both when varying the resource ratio, and when varying the average degree of the network.",
                "We argue that this can be explained by the greedy nature of GDAP, which causes the tasks with high efficiency to be allocated first, and makes the <br>algorithm</br> perform better in this heterogeneous setting. 5.2.3 Experiment 3 The purpose of this final experiment is to test whether the <br>algorithm</br> can be scaled to large problems, like applications running on the internet.",
                "We therefore generate instances where the number of agents varies from 100 to 2000, and simultaneously increase the number of tasks from 166 to 3333 (Setting 3).",
                "Figure 7 shows the run time for these instances on a Linux machine with an AMD Opteron 2.4 GHz processor.",
                "These graphs confirm the theoretical analysis from the previous section, saying that both the upper bound and the GDAP are polynomial.",
                "In fact, the graphs show that the GDAP almost behaves linearly.",
                "Here we see that the locality of the GDAP really helps in reducing the computation time.",
                "Also note that the GDAP requires even less computation time than the upper bound.",
                "The quality of the GDAP for these large instances cannot be compared to the optimal solution.",
                "Therefore, in Figure 8 the upper bound is used instead.",
                "This result shows that the GDAP behaves stably and consistently well with the increasing problem size.",
                "It also shows once more that the GDAP performs better in a small-world network. 6.",
                "RELATED WORK Task allocation in multiagent systems has been investigated by many researchers in recent years with different assumptions and emphases.",
                "However, most of the research to date on task allocation does not consider social connections among agents, and studies the problem in a centralized The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free Figure 6: The quality of the GDAP <br>algorithm</br> for a uniform and a skewed task benefit distribution related to the resource ratio (the first graph), and the network degree (the second graph). setting.",
                "For example, Kraus et al. [12] develop an auction protocol that enables agents to form coalitions with time constraints.",
                "It assumes each agent knows the capabilities of all others.",
                "The proposed protocol is centralized, where one manager is responsible for allocating the tasks to all coalitions.",
                "Manisterski at al. [14] discuss the possibilities of achieving efficient allocations in both cooperative and noncooperative settings.",
                "They propose a centralized <br>algorithm</br> to find the optimal solution.",
                "In contrast to this work, we introduce also an efficient completely distributed protocol that takes the social network into account.",
                "Task allocation has also been studied in distributed settings by for example Shehory and Kraus [18] and by Lerman and Shehory [13].",
                "They propose distributed algorithms with low communication complexity for forming coalitions in large-scale multiagent systems.",
                "However, they do not assume the existence of any agent network.",
                "The work of Sander et al. [16] introduces computational geometry-based algorithms for distributed task allocation in geographical domains.",
                "Agents are then allowed to move and actively search for tasks, and the capability of agents to perform tasks is homogeneous.",
                "In order to apply their approach, agents need to have some knowledge about the geographical positions of tasks and some other agents.",
                "Other work [17] proposes a location mechanism for open multiagent systems to allocate tasks to unknown agents.",
                "In this approach each agent caches a list of agents they know.",
                "The analysis of the communication complexity of this method is based on lattice-like graphs, while we investigate how to efficiently solve task allocation in a social network, whose topology can be arbitrary.",
                "Networks have been employed in the context of task allocation in some other works as well, for example to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time(ms) Agents upper bound - small-world upper bound - random upper bound - scale-free GDAP - small-world GDAP - random GDAP - scale-free Figure 7: The run time of the GDAP <br>algorithm</br>. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Rewardrelativetoupperbound Agents small-world random scale-free Figure 8: The quality of the GDAP <br>algorithm</br> compared to the upper bound. interactions between agents and mediators [1].",
                "Mediators in this context are agents who receive the task and have connections to other agents.",
                "They break up the task into subtasks, and negotiate with other agents to obtain commitments to execute these subtasks.",
                "Their focus is on modeling the decision process of just a single mediator.",
                "Another approach is to partition the network into cliques of nodes, representing coalitions which the agents involved may use as a coordination mechanism [20].",
                "The focus of that work is distributed coalition formation among agents, but in our approach, we do not need agents to form groups before allocating tasks.",
                "Easwaran and Pitt [6] study complex tasks that require services for their accomplishment.",
                "The problem concerns the allocation of subtasks to service providers in a supply chain.",
                "Another study of task allocation in supply chains is [21], where it is argued that the defining characteristic of Supply Chain Formation is hierarchical subtask decomposition (HSD).",
                "HSD is implemented using task dependency networks (TDN), with agents and goods as nodes, and I/O relations between them as edges.",
                "Here, the network is given, and the problem is to select a subgraph, for which the authors propose a market-based <br>algorithm</br>, in particular, a series of auctions.",
                "Compared to these works, our approach is more general in the sense that we are able to model different types of connections or constraints among agents for different problem domains in addition to supply chain formation.",
                "Finally, social networks have been used in the context of team formation.",
                "Previous work has shown how to learn which relations are more beneficial in the long run [8], and adapt the social network accordingly.",
                "We believe these results can be transferred to the domain of task allocation as well, leaving this as a topic for further study. 506 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 7.",
                "CONCLUSIONS In this paper we studied the task allocation problem in a social network (STAP), which can be seen as a new, more general, variant of the TAP.",
                "We believe it has a great amount of potential for realistic problems.",
                "We provided complexity results on computing the efficient solution for the STAP, as well as a bound on possible approximation algorithms.",
                "Next, we presented a distributed protocol, related to the contractnet protocol.",
                "We also introduced an exponential <br>algorithm</br> to compute the optimal solution, as well as a fast upperbound <br>algorithm</br>.",
                "Finally, we used the optimal solution and the upper-bound (for larger instances) to conduct an extensive set of experiments to assess the solution quality and the computational efficiency of the proposed distributed <br>algorithm</br> in different types of networks, namely, small-world networks, random networks, and scale-free networks.",
                "The results presented in this paper show that the distributed <br>algorithm</br> performs well in small-world, scale-free, and random networks, and for many different settings.",
                "Also other experiments were done (e.g. on grid networks) and these results held up over a wider range of scenarios.",
                "Furthermore, we showed that it scales well to large networks, both in terms of quality and of required computation time.",
                "The results also suggest that small-world networks are slightly better suited for local task allocation, because there are no nodes with very few neighbors.",
                "There are many interesting extensions to our current work.",
                "In this paper, we focus on the computational aspect in the design of the distributed <br>algorithm</br>.",
                "In our future work, we would also like to address some of the related issues in game theory, such as strategic agents, and show desirable properties of a distributed protocol in such a context.",
                "In the current <br>algorithm</br> we assume that agents can only contact their neighbors to request resources, which may explain why our <br>algorithm</br> performs not as good in the scalefree networks as in the small-world networks.",
                "Our future work may allow agents to reallocate (sub)tasks.",
                "We are interested in seeing how such interactions will affect the performance of task allocation in different social networks.",
                "A third interesting topic for further work is the addition of reputation information among the agents.",
                "This may help to model changing business relations and incentivize agents to follow the protocol.",
                "Finally, it would be interesting to study real-life instances of the social task allocation problem, and see how they relate to the randomly generated networks of different types studied in this paper.",
                "Acknowledgments.",
                "This work is supported by the Technology Foundation STW, applied science division of NWO, and the Ministry of Economic Affairs. 8.",
                "REFERENCES [1] S. Abdallah and V. Lesser.",
                "Modeling Task Allocation Using a Decision Theoretic Model.",
                "In Proc.",
                "AAMAS, pages 719-726.",
                "ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson, and D. Zuckerman.",
                "Derandomized Graph Products.",
                "Computational Complexity, 5(1):60-75, 1995. [3] A.-L. Barab´asi and R. Albert.",
                "Emergence of scaling in random networks.",
                "Science, 286(5439):509-512, 1999. [4] R. H. Coase.",
                "The Nature of the Firm.",
                "Economica NS, 4(16):386-405, 1937. [5] R. H. Coase.",
                "My Evolution as an Economist.",
                "In W. Breit and R. W. Spencer, editors, Lives of the Laureates, pages 227-249.",
                "MIT Press, 1995. [6] A. M. Easwaran and J. Pitt.",
                "Supply Chain Formation in Open, Market-Based Multi-Agent Systems.",
                "International J. of Computational Intelligence and Applications, 2(3):349-363, 2002. [7] I.",
                "Foster, N. R. Jennings, and C. Kesselman.",
                "Brain Meets Brawn: Why Grid and Agents Need Each Other.",
                "In Proc.",
                "AAMAS, pages 8-15, Washington, DC, USA, 2004.",
                "IEEE Computer Society. [8] M. E. Gaston and M. desJardins.",
                "Agent-organized networks for dynamic team formation.",
                "In Proc.",
                "AAMAS, pages 230-237, New York, NY, USA, 2005.",
                "ACM Press. [9] A. Goldberg.",
                "An Efficient Implementation of a Scaling Minimum-Cost Flow <br>algorithm</br>.",
                "J. of Algorithms, 22:1-29, 1997. [10] R. Gulati.",
                "Does Familiarity Breed Trust?",
                "The Implications of Repeated Ties for Contractual Choice in Alliances.",
                "Academy of Management Journal, 38(1):85-112, 1995. [11] T. Klos and B. Nooteboom.",
                "Agent-based Computational Transaction Cost Economics.",
                "Economic Dynamics and Control, 25(3-4):503-526, 01. [12] S. Kraus, O. Shehory, and G. Taase.",
                "Coalition formation with uncertain heterogeneous information.",
                "In Proc.",
                "AAMAS, pages 1-8.",
                "ACM, 2003. [13] K. Lerman and O. Shehory.",
                "Coalition formation for large-scale electronic markets.",
                "In Proc.",
                "ICMAS, pages 167-174.",
                "IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus, and N. Jennings.",
                "Forming Efficient Agent Groups for Completing Complex Tasks.",
                "In Proc.",
                "AAMAS, pages 257-264.",
                "ACM, 2006. [15] J. Patel et al.",
                "Agent-Based Virtual Organizations for the Grid.",
                "Multi-Agent and Grid Systems, 1(4):237-249, 2005. [16] P. V. Sander, D. Peleshchuk, and B. J. Grosz.",
                "A scalable, distributed <br>algorithm</br> for efficient task allocation.",
                "In Proc.",
                "AAMAS, pages 1191-1198, New York, NY, USA, 2002.",
                "ACM Press. [17] O. Shehory.",
                "A scalable agent location mechanism.",
                "In Proc.",
                "ATAL, volume 1757 of LNCS, pages 162-172.",
                "Springer, 2000. [18] O. Shehory and S. Kraus.",
                "Methods for Task Allocation via Agent Coalition Formation.",
                "Artificial Intelligence, 101(1-2):165-200, 1998. [19] R. M. Sreenath and M. P. Singh.",
                "Agent-based service selection.",
                "Web Semantics, 1(3):261-279, 2004. [20] P. T. Toˇsi´c and G. A. Agha.",
                "Maximal Clique Based Distributed Coalition Formation for Task Allocation in Large-Scale Multi-Agent Systems.",
                "In Proc.",
                "MMAS, volume 3446 of LNAI, pages 104-120.",
                "Springer, 2005. [21] W. E. Walsh and M. P. Wellman.",
                "Modeling Supply Chain Formation in Multiagent Systems.",
                "In Proc.",
                "AMEC II, volume 1788 of LNAI, pages 94-101.",
                "Springer, 2000. [22] D. J. Watts and S. H. Strogatz.",
                "Collective dynamics of small world networks.",
                "Nature, 393:440-442, 1998.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 507"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Desarrollamos un \"algoritmo\" basado en el protocolo de red de contrato.",
                "Nuestro \"algoritmo\" está completamente distribuido, y supone que los agentes solo tienen conocimiento local sobre tareas y recursos.",
                "Realizamos un conjunto de experimentos para evaluar el rendimiento y la escalabilidad del \"algoritmo\" propuesto en términos de calidad de solución y tiempo de cálculo.",
                "Los resultados demuestran que nuestro \"algoritmo\" funciona bien y que escala bien a aplicaciones a gran escala.",
                "Luego procedemos a desarrollar un \"algoritmo\" distribuido en la Sección 4, y realizamos una serie de experimentos con este \"algoritmo\", como se describe en la Sección 5.",
                "Dado que nuestro problema es tan difícil como se muestra en el Teorema 1, no es posible dar el peor de los casos mejor que Δε para cualquier \"algoritmo\" de tiempo polinomial, a menos que p = np.4.",
                "Algoritmos Para lidiar con el problema de asignar tareas en una red social, presentamos un \"algoritmo\" distribuido.",
                "Presentamos este \"algoritmo\" describiendo el protocolo para los agentes.",
                "Después de eso, damos el \"algoritmo\" centralizado óptimo y un algoritmo superior del límite superior, que usamos en la Sección 5 para comparar la calidad de nuestro algoritmo distribuido.4.1 Protocolo para la asignación de tareas distribuidas Podemos resumir la descripción del problema de asignación de tareas en las redes sociales de la Sección 2 de la siguiente manera.",
                "Nosotros \"algoritmo\" 1 Protocolo de asignación distribuida codiciosa (GDAP)."
            ],
            "translated_text": "",
            "candidates": [
                "algoritmo",
                "algoritmo",
                "algoritmo",
                "algoritmo",
                "algoritmo",
                "algoritmo",
                "algoritmo",
                "algoritmo",
                "Algoritmo",
                "algoritmo",
                "algoritmo",
                "Algoritmo",
                "algoritmo",
                "algoritmo",
                "algoritmo",
                "algoritmo",
                "algoritmo",
                "algoritmo",
                "algoritmo",
                "algoritmo",
                "algoritmo"
            ],
            "error": []
        },
        "communication message": {
            "translated_key": "mensaje de comunicación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Distributed Task Allocation in Social Networks Mathijs de Weerdt Delft Technical University Delft, The Netherlands M.M.deWeerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, The Netherlands Yingqian.Zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI) Amsterdam, The Netherlands tomas.klos@cwi.nl ABSTRACT This paper proposes a new variant of the task allocation problem, where the agents are connected in a social network and tasks arrive at the agents distributed over the network.",
                "We show that the complexity of this problem remains NPhard.",
                "Moreover, it is not approximable within some factor.",
                "We develop an algorithm based on the contract-net protocol.",
                "Our algorithm is completely distributed, and it assumes that agents have only local knowledge about tasks and resources.",
                "We conduct a set of experiments to evaluate the performance and scalability of the proposed algorithm in terms of solution quality and computation time.",
                "Three different types of networks, namely small-world, random and scale-free networks, are used to represent various social relationships among agents in realistic applications.",
                "The results demonstrate that our algorithm works well and that it scales well to large-scale applications.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Recent years have seen a lot of work on task and resource allocation methods, which can potentially be applied to many real-world applications.",
                "However, some interesting applications where relations between agents play a role require a slightly more general model.",
                "Such situations appear very frequently in real-world scenarios, and recent technological developments are bringing more of them within the range of task allocation methods.",
                "Especially in business applications, preferential partner selection and interaction is very common, and this aspect becomes more important for task allocation research, to the extent that technological developments need to be able to support it.",
                "For example, the development of semantic web and grid technologies leads to increased and renewed attention for the potential of the web to support business processes [7, 15].",
                "As an example, virtual organizations (VOs) are being re-invented in the context of the grid, where they are composed of a number of autonomous entities (representing different individuals, departments and organizations), each of which has a range of problem-solving capabilities and resources at its disposal [15, p. 237].",
                "The question is how VOs are to be dynamically composed and re-composed from individual agents, when different tasks and subtasks need to be performed.",
                "This would be done by allocating them to different agents who may each be capable of performing different subsets of those tasks.",
                "Similarly, supply chain formation (SCF) is concerned with the, possibly ad-hoc, allocation of services to providers in the supply chain, in such a way that overall profit is optimized [6, 21].",
                "Traditionally, such allocation decisions have been analyzed using transaction cost economics (TCE) [4], which takes the transaction between consecutive stages of development as its basic unit of analysis, and considers the firm and the market as alternative structural forms for organizing transactions. (Transaction cost) economics has traditionally built on analysis of comparative statics: the central problem of economic organization is considered to be the adaptation of organizational forms to the characteristics of transactions.",
                "More recently, TCEs founding father, Ronald Coase, acknowledged that this is too simplistic an approach [5, p. 245]: The analysis cannot be confined to what happens within a single firm. (. . . )",
                "What we are dealing with is a complex interrelated structure.",
                "In this paper, we study the problem of task allocation from the perspective of such a complex interrelated structure.",
                "In particular, the market cannot be considered as an organizational form without considering specific partners to interact with on the market [11].",
                "Specifically, therefore, we consider agents to be connected to each other in a social network.",
                "Furthermore, this network is not fully connected: as informed by the business literature, firms typically have established working relations with limited numbers of preferred partners [10]; these are the ones they consider when new tasks arrive and they have to form supply chains to allocate those tasks [19].",
                "Other than modeling the interrelated 500 978-81-904262-7-5 (RPS) c 2007 IFAAMAS structure between business partners, the social network introduced in this paper can also be used to represent other types of connections or constraints among autonomous entities that arise from other application domains.",
                "The next section gives a formal description of the task allocation problem on social networks.",
                "In Section 3, we prove that the complexity of this problem remains NP-hard.",
                "We then proceed to develop a distributed algorithm in Section 4, and perform a series of experiments with this algorithm, as described in Section 5.",
                "Section 6 discusses related work, and Section 7 concludes. 2.",
                "PROBLEM DESCRIPTION We formulate the social task allocation problem in this section.",
                "There is a set A of agents: A = {a1, . . . , am}.",
                "Agents need resources to complete tasks.",
                "Let R = {r1, . . . , rk} denote the collection of the resource types available to the agents A.",
                "Each agent a ∈ A controls a fixed amount of resources for each resource type in R, which is defined by a resource function: rsc : A × R → N. Moreover, we assume agents are connected by a social network.",
                "Definition 1 (Social network).",
                "An agent social network SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ∈ AE indicates the existence of a social connection between agents ai and aj.",
                "Suppose a set of tasks T = {t1, t2, . . . , tn} arrives at such an agent social network.",
                "Each task t ∈ T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the utility gained if task t is accomplished, and the resource function rsc : T ×R → N specifies the amount of resources required for the accomplishment of task t. Furthermore, a location function loc : T → A defines the locations (i.e., agents) at which the tasks arrive in the social network.",
                "An agent a that is the location of a task t, i.e. loc(t) = a, is called the manager of this task.",
                "Each task t ∈ T needs some specific resources from the agents in order to complete the task.",
                "The exact assignment of tasks to agents is defined by a task allocation.",
                "Definition 2 (Task allocation).",
                "Given a set of tasks T = {t1, . . . , tn} and a set of agents A = {a1, . . . , am} in a social network SN, a task allocation is a mapping φ : T × A × R → N. A valid task allocation in SN must satisfy the following constrains: • A task allocation must be correct.",
                "Each agent a ∈ A cannot use more than its available resources, i.e. for each r ∈ R, P t∈T φ(t, a, r) ≤ rsc(a, r). • A task allocation must be complete.",
                "For each task t ∈ T , either all allocated agents resources are sufficient, i.e. for each r ∈ R, P a∈A φ(t, a, r) ≥ rsc(t, r), or t is not allocated, i.e. φ(t, ·, ·) = 0. • A task allocation must obey the social relationships.",
                "Each task t ∈ T can only be allocated to agents that are (direct) neighbors of agent loc(t) in the social network SN.",
                "Each such agent that can contribute to a task is called a contractor.",
                "We write Tφ to represent the tasks that are fully allocated in φ.",
                "The utility of φ is then the summation of the utilities of each task in Tφ, i.e., Uφ = P t∈Tφ u(t).",
                "Using this notation, we define the efficient task allocation below.",
                "Definition 3 (Efficient task allocation).",
                "We say a task allocation φ is efficient if it is valid and Uφ is maximized, i.e., Uφ = max( P t∈Tφ u(t)).",
                "We are now ready to define the task allocation problem in social network that we study in this paper.",
                "Definition 4 (Social task allocation problem).",
                "Given a set of agents A connected by a social network SN = (A, AE), and a finite set of tasks T , the social task allocation problem (or STAP for short) is the problem of finding the efficient task allocation φ, such that φ is valid and the social welfare Uφ is maximized. 3.",
                "COMPLEXITY RESULTS The traditional task allocation problem, TAP (without the condition of the social network SN), is NP-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set.",
                "Although we may consider the TAP as a special case of the STAP by assuming agents are fully connected, we cannot directly use the complexity results from the TAP, since we study the STAP in an arbitrary social network, which, as we argued in the introduction, should be partially connected.",
                "We now show that the TAP with an arbitrary social network is also NP-complete, even when the utility of each task is 1, and the quantity of all required and available resources is 1.",
                "Theorem 1.",
                "Given the social task allocation problem with an arbitrary social network, as defined in Definition 4, the problem of deciding whether a task allocation φ with utility more than k exists is NP-complete.",
                "Proof.",
                "We first show that the problem is in NP.",
                "Given an instance of the problem and an integer k, we can verify in polynomial time whether an allocation φ is a valid allocation and whether the utility of φ is greater than k. We now prove that the STAP is NP-hard by showing that MAXIMUM INDEPENDENT SET ≤P STAP.",
                "Given an undirected graph G = (V, E) and an integer k, we construct a network G = (V , E ) which has an efficient task allocation with k tasks of utility 1 allocated if and only if G has an independent set (IS) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 Figure 1: The MIS problem can be reduced to the STAP.",
                "The left figure is an undirected graph G, which has the optimal solution {v1, v4} or {v2, v3}; the right figure is the constructed instance of the STAP, where the optimal allocation is {t1, t4} or {t2, t3}.",
                "An instance of the following construction is shown in Figure 1.",
                "For each node v ∈ V and each edge e ∈ E in the graph G, we create a vertex agent av and an edge agent ae in G .",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 501 When v was incident to e in G we correspondingly add an edge e in G between av and ae.",
                "We assign each agent in G one resource, which is related to the node or the edge in the graph G, i.e., for each v ∈ V , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ E, rsc(ae) = {e}.",
                "Each vertex agent avi in G has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ E}.",
                "There is no task on the edge agents in G .",
                "We define utility 1 for each task, and the quantity of all required and available resources to be 1.",
                "Taken an instance of the IS problem, suppose there is a solution of size k, i.e., a subset N ⊆ V such that no two vertices in N are joined by an edge in E and |N| = k. N specifies a set of vertex agents AN in the corresponding graph G .",
                "Given two agents a1, a2 ∈ AN we now know that there is no edge agent ae connected to both a1 and a2.",
                "Thus, for each agent a ∈ AN , a assigns its task to the edge agents which are connected to a.",
                "All other vertex agents a /∈ AN are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ AN .",
                "The set of tasks of the agents AN (|AN | = k) is thus the maximum set of tasks that can be allocated.",
                "The utility of this allocation is k. Similarly, if there is a solution for the STAP with the utility value k, and the allocated task set is N, then for the IS problem, there exists a maximum independent set N of size k in G. An example can be found in Figure 1.",
                "We just proved that the STAP is NP-hard for an arbitrary graph.",
                "In our proof, the complexity comes from the introduction of a social network.",
                "One may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant.",
                "We now give a complexity result on this class of networks as follows.",
                "Theorem 2.",
                "Let the number of neighbors of each agent in the social network SN be bounded by Δ for Δ ≥ 3.",
                "Computing the efficient task allocation given such a network is NP-complete.",
                "In addition, it is not approximable within Δε for some ε > 0.",
                "Proof.",
                "It has been shown in [2] that the maximum independent set problem in the case of the degree bounded by Δ for Δ ≥ 3 is NP-complete and is not approximable within Δε for some ε > 0.",
                "Using the similar reduction from the proof of Theorem 1, this result also holds for the STAP.",
                "Since our problem is as hard as MIS as shown in Theorem 1, it is not possible to give a worst case bound better than Δε for any polynomial time algorithm, unless P = NP. 4.",
                "ALGORITHMS To deal with the problem of allocating tasks in a social network, we present a distributed algorithm.",
                "We introduce this algorithm by describing the protocol for the agents.",
                "After that we give the optimal, centralized algorithm and an upper bound algorithm, which we use in Section 5 to benchmark the quality of our distributed algorithm. 4.1 Protocol for distributed task allocation We can summarize the description of the task allocation problem in social networks from Section 2 as follows.",
                "We Algorithm 1 Greedy distributed allocation protocol (GDAP).",
                "Each manager a calculates the efficiency e(t) for each of their tasks t ∈ Ta, and then while Ta = ∅: 1.",
                "Each manager a selects the most efficient task t ∈ Ta such that for each task t ∈ Ta: e(t ) ≤ e(t). 2.",
                "Each manager a requests help for t from all its neighbors (of a) by informing these neighbors of the efficiency e(t) and the required resources for t. 3.",
                "Contractors receive and store all requests, and then offer all relevant resources to the manager for the task with the highest efficiency. 4.",
                "The managers that have received sufficient offers allocate their tasks, and inform each contractor which part of the offer is accepted.",
                "When a task is allocated, or when a manager has received offers from all neighbors, but still cannot satisfy its task, the task is removed from the task list Ta. 5.",
                "Contractors update their used resources. have a (social) network of agents.",
                "Each agent has a set of resources of different types at its disposal.",
                "We also have a set of tasks.",
                "Each task requires some resources, has a fixed benefit, and is located at a certain agent.",
                "This agent is called a manager.",
                "We only allow neighboring agents to help with a task.",
                "These agents are called contractors.",
                "Agents can fulfill the role of manager as well as contractor.",
                "The problem is to find out which tasks to execute, and which resources of which contractors to use for these tasks.",
                "The idea of the protocol is as follows.",
                "All manager agents a ∈ A try to find neighboring contractors to help them with their task(s) Ta = {ti ∈ T | loc(ti) = a}.",
                "They start with offering the task that is most efficient in terms of the ratio between benefit and required resources.",
                "Out of all tasks offered, contractors select the task with the highest efficiency, and send a bid to the related manager.",
                "A bid consists of all the resources the agent is able to supply for this task.",
                "If sufficient resources have been offered, the manager selects the required resources and informs all contractors of its choice.",
                "The efficiency of a task is defined as follows: Definition 5.",
                "The efficiency e of a task t ∈ T is defined by the utility of this task divided by the sum of all required resources: e(t) = u(t)P r∈R rsc(t,r) .",
                "A more detailed description of this protocol can be found in Algorithm 1.",
                "Here it is also defined how to determine when a task should not be offered anymore, because it is impossible to fulfill locally.",
                "Obviously, a task is also not offered anymore when it has been allocated.",
                "This protocol is such that, when no two tasks have exactly the same efficiency, in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the algorithm follows.",
                "Proposition 1.",
                "For a STAP with n tasks and m agents, the run time of the distributed algorithm is O(nm), and the number of <br>communication message</br>s is O(n2 m). 1 Even when some tasks have the same efficiency, it is straightforward to make this result work.",
                "For example, the implementation can ensure that the contractors choose the task with the lowest task-id. 502 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 2 Optimal social task allocation (OPT).",
                "Repeat the following for each combination of tasks: 1.",
                "If the total reward for this combination is higher than any previous combination, test if this combination is feasible as follows: 2.",
                "Create a network flow problem for each resource type r ∈ R (separately) as follows: (a) Create a source s and a sink s . (b) For each agent a ∈ A create an agent node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has. (c) For each task t ∈ T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires. (d) For each agent a connect the agent node to all task nodes of neighboring tasks, i.e., t ∈ {t ∈ T | (a, loc(t)) ∈ AE}.",
                "Give this connection unlimited capacity. 3.",
                "Solve the maximum flow problem for the created flow networks.",
                "If the maximum flow in each network is equal to the total required resources of that type, the current combination of tasks is feasible.",
                "In that case, this is the current best combination of tasks.",
                "Proof.",
                "In the worst case, in each iteration exactly one task is removed from a task list, so there are n iterations.",
                "In each iteration in the worst case (i.e., a fully connected network), for each of the O(n) managers, O(m) messages are sent.",
                "Next the task with the highest efficiency can be selected by each contractor in O(n).",
                "Assigning an allocation can be done in O(m).",
                "This leads to a total of O(n + m) operations for each iteration, and thus O(n2 + nm) operations in total.",
                "The number of messages sent is O(n(nm + nm + nm)) = O(n2 m).",
                "We establish the quality of this protocol experimentally (in Section 5).",
                "Preferably, we compare the results to the optimal solution. 4.2 Optimal social task allocation The optimal task allocation algorithm should deal with the restrictions posed by the social network.",
                "For this NPcomplete problem we used an exponential brute-force algorithm to consider relevant combinations of tasks to execute.",
                "For each combination we use a maximum-flow algorithm to check whether the resources are sufficient for the selected subset of tasks.",
                "The flow network describes which resources can be used for which tasks, depending on the social network.",
                "If the maximum flow is equal to the sum of all resources required by the subset of tasks, we know that a feasible solution exists (see Algorithm 2).",
                "Clearly, we cannot expect this optimal algorithm to be able to find solutions for larger problem sizes.",
                "To establish the quality of our protocol for large instances, we use the following method to determine an upper bound. 4.3 Upper bound for social task allocation Given a social task allocation problem, if the number of resource types for every task t ∈ T is bounded by 1, the Algorithm 3 An upper bound for social task allocation (UB).",
                "Create a network flow problem with costs as follows: 1.",
                "Create a source s and a sink s . 2.",
                "For each agent a ∈ A and each resource type ri ∈ R, create an agent-resource node ai, and an edge from s to this node with capacity equal to the amount of resources of type r agent a has available and with costs 0. 3.",
                "For each task t ∈ T and each resource type ri ∈ R, create a task-resource node ti, and an edge from this node to s with capacity equal to the amount of resources of type r task t requires and costs −e(t). 4.",
                "For each resource type ri ∈ R and for each agent a connect the agent-resource node ai to all task-resource nodes ti for neighboring tasks t ∈ {t ∈ T | (a, loc(t)) ∈ AE or a = loc(t)}.",
                "Give this connection unlimited capacity and zero costs. 5.",
                "Create an edge directly from s to s with unlimited capacity and zero costs.",
                "Solve the minimum cost flow network problem for this network.",
                "The costs of the resulting network is an upper bound for the social task allocation problem. problem is polynomially solvable by transforming it to a flow network problem.",
                "Our method for efficiently calculating an upper bound for STAP makes use of this special case by converting any given STAP instance P into a new problem P where each task only has one resource type.",
                "More specifically, for every task t ∈ T with utility u(t), we do the following.",
                "Let m be the number of resource types {r1, . . . , rm} required by t. We then split t into a set of m tasks T = {t1, . . . , tm} where each task ti only has one unique resource type (of {r1, . . . , rm}) and each task has a fair share of the utility, i.e., the efficiency of t from Definition 5 times the amount of this resource type rsc(ti, ri).",
                "After polynomially performing this conversion for every task in T , the original problem P becomes the special case P .",
                "Note that the set of valid allocations in P is only a subset of the set of valid allocations in P , because it is now possible to partially allocate a task.",
                "From this it is easy to see that the solution of P gives an upper bound of the solution of the original problem P. To compute the optimal solution for P , we transform it to a minimum cost flow problem.",
                "We model the cost in the flow network by the negation of the new tasks utility.",
                "A polynomial-time implementation of a scaling minimum cost flow algorithm [9] is used for the computation.",
                "The resulting minimum cost flow represents a maximum allocation of the tasks for P .",
                "The detailed modeling is described in Algorithm 3.",
                "In the next section, we use this upper bound to estimate the quality of the GDAP for large-scale instances. 5.",
                "EXPERIMENTS We implemented the greedy distributed allocation protocol (GDAP), the optimal allocation algorithm (OPT), and the upper bound algorithm (UB) in Java, and tested them on a Linux PC.",
                "The purpose of these experiments is to study the performance of the distributed algorithm in different problem settings using different social networks.",
                "The perThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 2: The solution qualities of the GDAP and the upper bound depend on the resource ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 Numberofagents Degree small-world random scale-free Figure 3: The histogram of the degrees. formance measurements are the solution quality and computation time, where the solution quality (SQ) is computed as follows.",
                "When the number of tasks is small, we compare the output of the distributed algorithm with the optimal solution, i.e., SQ = GDAP OP T , but if it is not feasible to compute the optimal solution, we use the value returned by the upper bound algorithm for evaluation, i.e., SQ = GDAP UB .",
                "To see whether the latter is a good measure, we also compare the quality of the upper bound to the optimal solution for smaller problems.",
                "In the following, we describe the setup of all experiments, and present the results. 5.1 Experimental settings We consider several experimental environments.",
                "In all environments the agents are connected by a social network.",
                "In the experiments, three different networks are used to simulate the social relationships among agents in potential realworld problems.",
                "Small-world networks are networks where most neighbors of an agent are also connected to each other.",
                "For the experiments we use a method for generating random small-world networks proposed by Watts et al. [22], with a fixed rewiring probability p = 0.05.",
                "Scale-free networks have the property that a couple of nodes have many connections, and many nodes have only a small number of connections.",
                "To generate these we use the implementation in the JUNG library of the generator proposed by Barab´asi and Albert [3].",
                "We also generate random networks as follows.",
                "First we connect each agent to another agent such that all agents are connected.",
                "Next, we randomly add connections until the desired average degree has been reached.",
                "We now describe the different settings used in our experiments with both small and large-scale problems.",
                "Setting 1.",
                "The number of agents is 40, and the number of tasks is 20.",
                "The number of different resource types is bounded by 5, and the average number of resources required by a task is 30.",
                "Consequently, the total number of resources required by the tasks is fixed.",
                "However, the resources available to the agents are varied.",
                "We define the resource ratio to refer to the ratio between the total number of available resources and the total number of required resources.",
                "Resources are allocated uniformly to the agents.",
                "The average degrees of the networks may also change.",
                "In this setting the task benefits are distributed normally around the number of resources required.",
                "Setting 2.",
                "This setting is similar to Setting 1, but here we let the benefits of the tasks vary dramatically-40% of the tasks have around 10 times higher benefit than the other 60% of the tasks.",
                "Setting 3.",
                "This setting is for large-scale problems.",
                "The ratio between the number of agents and the number of tasks is set to 5/3, and the number of agents varies from 100 to 2000.",
                "We also fix the resource ratio to 1.2 and the average degree to 6.",
                "The number of different resource types is 20, and the average resource requirement of a tasks is 100.",
                "The task benefits are again normally distributed. 5.2 Experimental results The experiments are done with the three different settings in the three different networks mentioned before, where each recorded data is the average over 20 random instances. 5.2.1 Experiment 1 Experimental setting 1 is used for this set of experiments.",
                "We would like to see how the GDAP behaves in the different networks when the number of resources available to the agents is changing.",
                "We also study the behavior of our upper bound algorithm.",
                "For this experiment we fix the average number of neighbors (degree) in each network type to six.",
                "In Figure 2 we see how the quality of both the upper bound and the GDAP algorithm depends on the resource ratio.",
                "Remarkably, for lower resource ratios our GDAP is much closer to the optimal allocation than the upper bound.",
                "When the resource ratio grows above 1.5, the graphs of the upper bound and the GDAP converge, meaning that both are really close to the optimal solution.",
                "This can be explained by the fact that when plenty of resources are available, all tasks can be allocated without any conflicts.",
                "However, when resources are very scarce, the upper bound is much too optimistic, because it is based on the allocation of sub-tasks per resource type, and does not reason about how many of the tasks can actually be allocated completely.",
                "We also notice from the graph that the solution quality of the GDAP on all three networks is quite high (over 0.8) when the available resource is very limited (0.3).",
                "It drops below 0.8 with the increased ratio and goes up again once there are plenty of resources available (resource ratio 0.9).",
                "Clearly, if 504 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 4: The quality of the GDAP and the upper bound depend on the network degree. resources are really scarce, only a few tasks can be successfully allocated even by the optimal algorithm.",
                "Therefore, the GDAP is able to give quite a good allocation.",
                "Although the differences are minor, it can also be seen that the results for the small-world network are consistently slightly better than those of random networks, which in turn outperform scale-free networks.",
                "This can be understood by looking at the distribution of the agents degree, as shown in Figure 3.",
                "In this experiment, in the small-world network almost every manager has a degree of six.",
                "In random networks, the degree varies between one and about ten.",
                "However, in the scale-free network, most nodes have only three or four connections, and only a very few have up to twenty connections.",
                "As we will see in the next experiment, having more connections means getting better results.",
                "For the next experiment we fix the resource ratio to 1.0 and study the quality of both the upper bound and the GDAP algorithm related to the degree of the social network.",
                "The result can be found in Figure 4.",
                "In this figure we can see that a high average degree also leads to convergence of the upper bound and the GDAP.",
                "Obviously, when managers have many connections, it becomes easier to allocate tasks.",
                "An exception is, similar to what we have seen in Figure 2, that the solution of the GDAP is also very good if the connections are extremely limited (degree 2), due to the fact that the number of possibly allocated tasks is very small.",
                "Again we see that the upper bound is not that good for problems where resources are hard to reach, i.e. in social networks with a low average degree.2 Since the solution quality clearly depends on the resource ratio as well as on the degree of the social network, we study the effect of changing both, to see whether they influence each other.",
                "Figure 5 shows how the solution quality depends on both the resource ratio and the network degree.",
                "This graph confirms the results that the GDAP performs better for problems with higher degree and higher resource ratio.",
                "However, it is now also more clear that it performs better for very low degree and resource availability.",
                "For this experiment with 40 agents and 20 tasks, the worst performance is met for instances with degree six and resource ratio 0.6 to instances with degree twelve and resource ratio 0.3.",
                "But even for those instances, the performance lies above 0.7. 2 The consistent standard deviation of about 15% over the 20 problem instances is not displayed as error-bars in these first graphs, because it would obfuscate the interesting correlations that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Relative reward small-world Average degree Resource ratio Relative reward Figure 5: The quality of the GDAP depends on both the resource ratio and the network degree. 5.2.2 Experiment 2 To study the robustness of the GDAP against different problem settings, we generate instances where the task benefit distribution is different: 40% of the tasks gets a 10 times higher benefit (as described in Setting 2).",
                "The effect of this different distribution can be seen in Figure 6.",
                "These two graphs show that the results for the skewed task benefit distribution are slightly better on average, both when varying the resource ratio, and when varying the average degree of the network.",
                "We argue that this can be explained by the greedy nature of GDAP, which causes the tasks with high efficiency to be allocated first, and makes the algorithm perform better in this heterogeneous setting. 5.2.3 Experiment 3 The purpose of this final experiment is to test whether the algorithm can be scaled to large problems, like applications running on the internet.",
                "We therefore generate instances where the number of agents varies from 100 to 2000, and simultaneously increase the number of tasks from 166 to 3333 (Setting 3).",
                "Figure 7 shows the run time for these instances on a Linux machine with an AMD Opteron 2.4 GHz processor.",
                "These graphs confirm the theoretical analysis from the previous section, saying that both the upper bound and the GDAP are polynomial.",
                "In fact, the graphs show that the GDAP almost behaves linearly.",
                "Here we see that the locality of the GDAP really helps in reducing the computation time.",
                "Also note that the GDAP requires even less computation time than the upper bound.",
                "The quality of the GDAP for these large instances cannot be compared to the optimal solution.",
                "Therefore, in Figure 8 the upper bound is used instead.",
                "This result shows that the GDAP behaves stably and consistently well with the increasing problem size.",
                "It also shows once more that the GDAP performs better in a small-world network. 6.",
                "RELATED WORK Task allocation in multiagent systems has been investigated by many researchers in recent years with different assumptions and emphases.",
                "However, most of the research to date on task allocation does not consider social connections among agents, and studies the problem in a centralized The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free Figure 6: The quality of the GDAP algorithm for a uniform and a skewed task benefit distribution related to the resource ratio (the first graph), and the network degree (the second graph). setting.",
                "For example, Kraus et al. [12] develop an auction protocol that enables agents to form coalitions with time constraints.",
                "It assumes each agent knows the capabilities of all others.",
                "The proposed protocol is centralized, where one manager is responsible for allocating the tasks to all coalitions.",
                "Manisterski at al. [14] discuss the possibilities of achieving efficient allocations in both cooperative and noncooperative settings.",
                "They propose a centralized algorithm to find the optimal solution.",
                "In contrast to this work, we introduce also an efficient completely distributed protocol that takes the social network into account.",
                "Task allocation has also been studied in distributed settings by for example Shehory and Kraus [18] and by Lerman and Shehory [13].",
                "They propose distributed algorithms with low communication complexity for forming coalitions in large-scale multiagent systems.",
                "However, they do not assume the existence of any agent network.",
                "The work of Sander et al. [16] introduces computational geometry-based algorithms for distributed task allocation in geographical domains.",
                "Agents are then allowed to move and actively search for tasks, and the capability of agents to perform tasks is homogeneous.",
                "In order to apply their approach, agents need to have some knowledge about the geographical positions of tasks and some other agents.",
                "Other work [17] proposes a location mechanism for open multiagent systems to allocate tasks to unknown agents.",
                "In this approach each agent caches a list of agents they know.",
                "The analysis of the communication complexity of this method is based on lattice-like graphs, while we investigate how to efficiently solve task allocation in a social network, whose topology can be arbitrary.",
                "Networks have been employed in the context of task allocation in some other works as well, for example to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time(ms) Agents upper bound - small-world upper bound - random upper bound - scale-free GDAP - small-world GDAP - random GDAP - scale-free Figure 7: The run time of the GDAP algorithm. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Rewardrelativetoupperbound Agents small-world random scale-free Figure 8: The quality of the GDAP algorithm compared to the upper bound. interactions between agents and mediators [1].",
                "Mediators in this context are agents who receive the task and have connections to other agents.",
                "They break up the task into subtasks, and negotiate with other agents to obtain commitments to execute these subtasks.",
                "Their focus is on modeling the decision process of just a single mediator.",
                "Another approach is to partition the network into cliques of nodes, representing coalitions which the agents involved may use as a coordination mechanism [20].",
                "The focus of that work is distributed coalition formation among agents, but in our approach, we do not need agents to form groups before allocating tasks.",
                "Easwaran and Pitt [6] study complex tasks that require services for their accomplishment.",
                "The problem concerns the allocation of subtasks to service providers in a supply chain.",
                "Another study of task allocation in supply chains is [21], where it is argued that the defining characteristic of Supply Chain Formation is hierarchical subtask decomposition (HSD).",
                "HSD is implemented using task dependency networks (TDN), with agents and goods as nodes, and I/O relations between them as edges.",
                "Here, the network is given, and the problem is to select a subgraph, for which the authors propose a market-based algorithm, in particular, a series of auctions.",
                "Compared to these works, our approach is more general in the sense that we are able to model different types of connections or constraints among agents for different problem domains in addition to supply chain formation.",
                "Finally, social networks have been used in the context of team formation.",
                "Previous work has shown how to learn which relations are more beneficial in the long run [8], and adapt the social network accordingly.",
                "We believe these results can be transferred to the domain of task allocation as well, leaving this as a topic for further study. 506 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 7.",
                "CONCLUSIONS In this paper we studied the task allocation problem in a social network (STAP), which can be seen as a new, more general, variant of the TAP.",
                "We believe it has a great amount of potential for realistic problems.",
                "We provided complexity results on computing the efficient solution for the STAP, as well as a bound on possible approximation algorithms.",
                "Next, we presented a distributed protocol, related to the contractnet protocol.",
                "We also introduced an exponential algorithm to compute the optimal solution, as well as a fast upperbound algorithm.",
                "Finally, we used the optimal solution and the upper-bound (for larger instances) to conduct an extensive set of experiments to assess the solution quality and the computational efficiency of the proposed distributed algorithm in different types of networks, namely, small-world networks, random networks, and scale-free networks.",
                "The results presented in this paper show that the distributed algorithm performs well in small-world, scale-free, and random networks, and for many different settings.",
                "Also other experiments were done (e.g. on grid networks) and these results held up over a wider range of scenarios.",
                "Furthermore, we showed that it scales well to large networks, both in terms of quality and of required computation time.",
                "The results also suggest that small-world networks are slightly better suited for local task allocation, because there are no nodes with very few neighbors.",
                "There are many interesting extensions to our current work.",
                "In this paper, we focus on the computational aspect in the design of the distributed algorithm.",
                "In our future work, we would also like to address some of the related issues in game theory, such as strategic agents, and show desirable properties of a distributed protocol in such a context.",
                "In the current algorithm we assume that agents can only contact their neighbors to request resources, which may explain why our algorithm performs not as good in the scalefree networks as in the small-world networks.",
                "Our future work may allow agents to reallocate (sub)tasks.",
                "We are interested in seeing how such interactions will affect the performance of task allocation in different social networks.",
                "A third interesting topic for further work is the addition of reputation information among the agents.",
                "This may help to model changing business relations and incentivize agents to follow the protocol.",
                "Finally, it would be interesting to study real-life instances of the social task allocation problem, and see how they relate to the randomly generated networks of different types studied in this paper.",
                "Acknowledgments.",
                "This work is supported by the Technology Foundation STW, applied science division of NWO, and the Ministry of Economic Affairs. 8.",
                "REFERENCES [1] S. Abdallah and V. Lesser.",
                "Modeling Task Allocation Using a Decision Theoretic Model.",
                "In Proc.",
                "AAMAS, pages 719-726.",
                "ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson, and D. Zuckerman.",
                "Derandomized Graph Products.",
                "Computational Complexity, 5(1):60-75, 1995. [3] A.-L. Barab´asi and R. Albert.",
                "Emergence of scaling in random networks.",
                "Science, 286(5439):509-512, 1999. [4] R. H. Coase.",
                "The Nature of the Firm.",
                "Economica NS, 4(16):386-405, 1937. [5] R. H. Coase.",
                "My Evolution as an Economist.",
                "In W. Breit and R. W. Spencer, editors, Lives of the Laureates, pages 227-249.",
                "MIT Press, 1995. [6] A. M. Easwaran and J. Pitt.",
                "Supply Chain Formation in Open, Market-Based Multi-Agent Systems.",
                "International J. of Computational Intelligence and Applications, 2(3):349-363, 2002. [7] I.",
                "Foster, N. R. Jennings, and C. Kesselman.",
                "Brain Meets Brawn: Why Grid and Agents Need Each Other.",
                "In Proc.",
                "AAMAS, pages 8-15, Washington, DC, USA, 2004.",
                "IEEE Computer Society. [8] M. E. Gaston and M. desJardins.",
                "Agent-organized networks for dynamic team formation.",
                "In Proc.",
                "AAMAS, pages 230-237, New York, NY, USA, 2005.",
                "ACM Press. [9] A. Goldberg.",
                "An Efficient Implementation of a Scaling Minimum-Cost Flow Algorithm.",
                "J. of Algorithms, 22:1-29, 1997. [10] R. Gulati.",
                "Does Familiarity Breed Trust?",
                "The Implications of Repeated Ties for Contractual Choice in Alliances.",
                "Academy of Management Journal, 38(1):85-112, 1995. [11] T. Klos and B. Nooteboom.",
                "Agent-based Computational Transaction Cost Economics.",
                "Economic Dynamics and Control, 25(3-4):503-526, 01. [12] S. Kraus, O. Shehory, and G. Taase.",
                "Coalition formation with uncertain heterogeneous information.",
                "In Proc.",
                "AAMAS, pages 1-8.",
                "ACM, 2003. [13] K. Lerman and O. Shehory.",
                "Coalition formation for large-scale electronic markets.",
                "In Proc.",
                "ICMAS, pages 167-174.",
                "IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus, and N. Jennings.",
                "Forming Efficient Agent Groups for Completing Complex Tasks.",
                "In Proc.",
                "AAMAS, pages 257-264.",
                "ACM, 2006. [15] J. Patel et al.",
                "Agent-Based Virtual Organizations for the Grid.",
                "Multi-Agent and Grid Systems, 1(4):237-249, 2005. [16] P. V. Sander, D. Peleshchuk, and B. J. Grosz.",
                "A scalable, distributed algorithm for efficient task allocation.",
                "In Proc.",
                "AAMAS, pages 1191-1198, New York, NY, USA, 2002.",
                "ACM Press. [17] O. Shehory.",
                "A scalable agent location mechanism.",
                "In Proc.",
                "ATAL, volume 1757 of LNCS, pages 162-172.",
                "Springer, 2000. [18] O. Shehory and S. Kraus.",
                "Methods for Task Allocation via Agent Coalition Formation.",
                "Artificial Intelligence, 101(1-2):165-200, 1998. [19] R. M. Sreenath and M. P. Singh.",
                "Agent-based service selection.",
                "Web Semantics, 1(3):261-279, 2004. [20] P. T. Toˇsi´c and G. A. Agha.",
                "Maximal Clique Based Distributed Coalition Formation for Task Allocation in Large-Scale Multi-Agent Systems.",
                "In Proc.",
                "MMAS, volume 3446 of LNAI, pages 104-120.",
                "Springer, 2005. [21] W. E. Walsh and M. P. Wellman.",
                "Modeling Supply Chain Formation in Multiagent Systems.",
                "In Proc.",
                "AMEC II, volume 1788 of LNAI, pages 94-101.",
                "Springer, 2000. [22] D. J. Watts and S. H. Strogatz.",
                "Collective dynamics of small world networks.",
                "Nature, 393:440-442, 1998.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 507"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Para una estampa con tareas n y agentes M, el tiempo de ejecución del algoritmo distribuido es O (nm), y el número de \"mensaje de comunicación\" s es O (N2 m).1 Incluso cuando algunas tareas tienen la misma eficiencia, es sencillo hacer que este resultado funcione."
            ],
            "translated_text": "",
            "candidates": [
                "mensaje de comunicación",
                "mensaje de comunicación"
            ],
            "error": []
        },
        "behavior": {
            "translated_key": "comportamiento",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Distributed Task Allocation in Social Networks Mathijs de Weerdt Delft Technical University Delft, The Netherlands M.M.deWeerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, The Netherlands Yingqian.Zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI) Amsterdam, The Netherlands tomas.klos@cwi.nl ABSTRACT This paper proposes a new variant of the task allocation problem, where the agents are connected in a social network and tasks arrive at the agents distributed over the network.",
                "We show that the complexity of this problem remains NPhard.",
                "Moreover, it is not approximable within some factor.",
                "We develop an algorithm based on the contract-net protocol.",
                "Our algorithm is completely distributed, and it assumes that agents have only local knowledge about tasks and resources.",
                "We conduct a set of experiments to evaluate the performance and scalability of the proposed algorithm in terms of solution quality and computation time.",
                "Three different types of networks, namely small-world, random and scale-free networks, are used to represent various social relationships among agents in realistic applications.",
                "The results demonstrate that our algorithm works well and that it scales well to large-scale applications.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Recent years have seen a lot of work on task and resource allocation methods, which can potentially be applied to many real-world applications.",
                "However, some interesting applications where relations between agents play a role require a slightly more general model.",
                "Such situations appear very frequently in real-world scenarios, and recent technological developments are bringing more of them within the range of task allocation methods.",
                "Especially in business applications, preferential partner selection and interaction is very common, and this aspect becomes more important for task allocation research, to the extent that technological developments need to be able to support it.",
                "For example, the development of semantic web and grid technologies leads to increased and renewed attention for the potential of the web to support business processes [7, 15].",
                "As an example, virtual organizations (VOs) are being re-invented in the context of the grid, where they are composed of a number of autonomous entities (representing different individuals, departments and organizations), each of which has a range of problem-solving capabilities and resources at its disposal [15, p. 237].",
                "The question is how VOs are to be dynamically composed and re-composed from individual agents, when different tasks and subtasks need to be performed.",
                "This would be done by allocating them to different agents who may each be capable of performing different subsets of those tasks.",
                "Similarly, supply chain formation (SCF) is concerned with the, possibly ad-hoc, allocation of services to providers in the supply chain, in such a way that overall profit is optimized [6, 21].",
                "Traditionally, such allocation decisions have been analyzed using transaction cost economics (TCE) [4], which takes the transaction between consecutive stages of development as its basic unit of analysis, and considers the firm and the market as alternative structural forms for organizing transactions. (Transaction cost) economics has traditionally built on analysis of comparative statics: the central problem of economic organization is considered to be the adaptation of organizational forms to the characteristics of transactions.",
                "More recently, TCEs founding father, Ronald Coase, acknowledged that this is too simplistic an approach [5, p. 245]: The analysis cannot be confined to what happens within a single firm. (. . . )",
                "What we are dealing with is a complex interrelated structure.",
                "In this paper, we study the problem of task allocation from the perspective of such a complex interrelated structure.",
                "In particular, the market cannot be considered as an organizational form without considering specific partners to interact with on the market [11].",
                "Specifically, therefore, we consider agents to be connected to each other in a social network.",
                "Furthermore, this network is not fully connected: as informed by the business literature, firms typically have established working relations with limited numbers of preferred partners [10]; these are the ones they consider when new tasks arrive and they have to form supply chains to allocate those tasks [19].",
                "Other than modeling the interrelated 500 978-81-904262-7-5 (RPS) c 2007 IFAAMAS structure between business partners, the social network introduced in this paper can also be used to represent other types of connections or constraints among autonomous entities that arise from other application domains.",
                "The next section gives a formal description of the task allocation problem on social networks.",
                "In Section 3, we prove that the complexity of this problem remains NP-hard.",
                "We then proceed to develop a distributed algorithm in Section 4, and perform a series of experiments with this algorithm, as described in Section 5.",
                "Section 6 discusses related work, and Section 7 concludes. 2.",
                "PROBLEM DESCRIPTION We formulate the social task allocation problem in this section.",
                "There is a set A of agents: A = {a1, . . . , am}.",
                "Agents need resources to complete tasks.",
                "Let R = {r1, . . . , rk} denote the collection of the resource types available to the agents A.",
                "Each agent a ∈ A controls a fixed amount of resources for each resource type in R, which is defined by a resource function: rsc : A × R → N. Moreover, we assume agents are connected by a social network.",
                "Definition 1 (Social network).",
                "An agent social network SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ∈ AE indicates the existence of a social connection between agents ai and aj.",
                "Suppose a set of tasks T = {t1, t2, . . . , tn} arrives at such an agent social network.",
                "Each task t ∈ T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the utility gained if task t is accomplished, and the resource function rsc : T ×R → N specifies the amount of resources required for the accomplishment of task t. Furthermore, a location function loc : T → A defines the locations (i.e., agents) at which the tasks arrive in the social network.",
                "An agent a that is the location of a task t, i.e. loc(t) = a, is called the manager of this task.",
                "Each task t ∈ T needs some specific resources from the agents in order to complete the task.",
                "The exact assignment of tasks to agents is defined by a task allocation.",
                "Definition 2 (Task allocation).",
                "Given a set of tasks T = {t1, . . . , tn} and a set of agents A = {a1, . . . , am} in a social network SN, a task allocation is a mapping φ : T × A × R → N. A valid task allocation in SN must satisfy the following constrains: • A task allocation must be correct.",
                "Each agent a ∈ A cannot use more than its available resources, i.e. for each r ∈ R, P t∈T φ(t, a, r) ≤ rsc(a, r). • A task allocation must be complete.",
                "For each task t ∈ T , either all allocated agents resources are sufficient, i.e. for each r ∈ R, P a∈A φ(t, a, r) ≥ rsc(t, r), or t is not allocated, i.e. φ(t, ·, ·) = 0. • A task allocation must obey the social relationships.",
                "Each task t ∈ T can only be allocated to agents that are (direct) neighbors of agent loc(t) in the social network SN.",
                "Each such agent that can contribute to a task is called a contractor.",
                "We write Tφ to represent the tasks that are fully allocated in φ.",
                "The utility of φ is then the summation of the utilities of each task in Tφ, i.e., Uφ = P t∈Tφ u(t).",
                "Using this notation, we define the efficient task allocation below.",
                "Definition 3 (Efficient task allocation).",
                "We say a task allocation φ is efficient if it is valid and Uφ is maximized, i.e., Uφ = max( P t∈Tφ u(t)).",
                "We are now ready to define the task allocation problem in social network that we study in this paper.",
                "Definition 4 (Social task allocation problem).",
                "Given a set of agents A connected by a social network SN = (A, AE), and a finite set of tasks T , the social task allocation problem (or STAP for short) is the problem of finding the efficient task allocation φ, such that φ is valid and the social welfare Uφ is maximized. 3.",
                "COMPLEXITY RESULTS The traditional task allocation problem, TAP (without the condition of the social network SN), is NP-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set.",
                "Although we may consider the TAP as a special case of the STAP by assuming agents are fully connected, we cannot directly use the complexity results from the TAP, since we study the STAP in an arbitrary social network, which, as we argued in the introduction, should be partially connected.",
                "We now show that the TAP with an arbitrary social network is also NP-complete, even when the utility of each task is 1, and the quantity of all required and available resources is 1.",
                "Theorem 1.",
                "Given the social task allocation problem with an arbitrary social network, as defined in Definition 4, the problem of deciding whether a task allocation φ with utility more than k exists is NP-complete.",
                "Proof.",
                "We first show that the problem is in NP.",
                "Given an instance of the problem and an integer k, we can verify in polynomial time whether an allocation φ is a valid allocation and whether the utility of φ is greater than k. We now prove that the STAP is NP-hard by showing that MAXIMUM INDEPENDENT SET ≤P STAP.",
                "Given an undirected graph G = (V, E) and an integer k, we construct a network G = (V , E ) which has an efficient task allocation with k tasks of utility 1 allocated if and only if G has an independent set (IS) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 Figure 1: The MIS problem can be reduced to the STAP.",
                "The left figure is an undirected graph G, which has the optimal solution {v1, v4} or {v2, v3}; the right figure is the constructed instance of the STAP, where the optimal allocation is {t1, t4} or {t2, t3}.",
                "An instance of the following construction is shown in Figure 1.",
                "For each node v ∈ V and each edge e ∈ E in the graph G, we create a vertex agent av and an edge agent ae in G .",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 501 When v was incident to e in G we correspondingly add an edge e in G between av and ae.",
                "We assign each agent in G one resource, which is related to the node or the edge in the graph G, i.e., for each v ∈ V , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ E, rsc(ae) = {e}.",
                "Each vertex agent avi in G has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ E}.",
                "There is no task on the edge agents in G .",
                "We define utility 1 for each task, and the quantity of all required and available resources to be 1.",
                "Taken an instance of the IS problem, suppose there is a solution of size k, i.e., a subset N ⊆ V such that no two vertices in N are joined by an edge in E and |N| = k. N specifies a set of vertex agents AN in the corresponding graph G .",
                "Given two agents a1, a2 ∈ AN we now know that there is no edge agent ae connected to both a1 and a2.",
                "Thus, for each agent a ∈ AN , a assigns its task to the edge agents which are connected to a.",
                "All other vertex agents a /∈ AN are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ AN .",
                "The set of tasks of the agents AN (|AN | = k) is thus the maximum set of tasks that can be allocated.",
                "The utility of this allocation is k. Similarly, if there is a solution for the STAP with the utility value k, and the allocated task set is N, then for the IS problem, there exists a maximum independent set N of size k in G. An example can be found in Figure 1.",
                "We just proved that the STAP is NP-hard for an arbitrary graph.",
                "In our proof, the complexity comes from the introduction of a social network.",
                "One may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant.",
                "We now give a complexity result on this class of networks as follows.",
                "Theorem 2.",
                "Let the number of neighbors of each agent in the social network SN be bounded by Δ for Δ ≥ 3.",
                "Computing the efficient task allocation given such a network is NP-complete.",
                "In addition, it is not approximable within Δε for some ε > 0.",
                "Proof.",
                "It has been shown in [2] that the maximum independent set problem in the case of the degree bounded by Δ for Δ ≥ 3 is NP-complete and is not approximable within Δε for some ε > 0.",
                "Using the similar reduction from the proof of Theorem 1, this result also holds for the STAP.",
                "Since our problem is as hard as MIS as shown in Theorem 1, it is not possible to give a worst case bound better than Δε for any polynomial time algorithm, unless P = NP. 4.",
                "ALGORITHMS To deal with the problem of allocating tasks in a social network, we present a distributed algorithm.",
                "We introduce this algorithm by describing the protocol for the agents.",
                "After that we give the optimal, centralized algorithm and an upper bound algorithm, which we use in Section 5 to benchmark the quality of our distributed algorithm. 4.1 Protocol for distributed task allocation We can summarize the description of the task allocation problem in social networks from Section 2 as follows.",
                "We Algorithm 1 Greedy distributed allocation protocol (GDAP).",
                "Each manager a calculates the efficiency e(t) for each of their tasks t ∈ Ta, and then while Ta = ∅: 1.",
                "Each manager a selects the most efficient task t ∈ Ta such that for each task t ∈ Ta: e(t ) ≤ e(t). 2.",
                "Each manager a requests help for t from all its neighbors (of a) by informing these neighbors of the efficiency e(t) and the required resources for t. 3.",
                "Contractors receive and store all requests, and then offer all relevant resources to the manager for the task with the highest efficiency. 4.",
                "The managers that have received sufficient offers allocate their tasks, and inform each contractor which part of the offer is accepted.",
                "When a task is allocated, or when a manager has received offers from all neighbors, but still cannot satisfy its task, the task is removed from the task list Ta. 5.",
                "Contractors update their used resources. have a (social) network of agents.",
                "Each agent has a set of resources of different types at its disposal.",
                "We also have a set of tasks.",
                "Each task requires some resources, has a fixed benefit, and is located at a certain agent.",
                "This agent is called a manager.",
                "We only allow neighboring agents to help with a task.",
                "These agents are called contractors.",
                "Agents can fulfill the role of manager as well as contractor.",
                "The problem is to find out which tasks to execute, and which resources of which contractors to use for these tasks.",
                "The idea of the protocol is as follows.",
                "All manager agents a ∈ A try to find neighboring contractors to help them with their task(s) Ta = {ti ∈ T | loc(ti) = a}.",
                "They start with offering the task that is most efficient in terms of the ratio between benefit and required resources.",
                "Out of all tasks offered, contractors select the task with the highest efficiency, and send a bid to the related manager.",
                "A bid consists of all the resources the agent is able to supply for this task.",
                "If sufficient resources have been offered, the manager selects the required resources and informs all contractors of its choice.",
                "The efficiency of a task is defined as follows: Definition 5.",
                "The efficiency e of a task t ∈ T is defined by the utility of this task divided by the sum of all required resources: e(t) = u(t)P r∈R rsc(t,r) .",
                "A more detailed description of this protocol can be found in Algorithm 1.",
                "Here it is also defined how to determine when a task should not be offered anymore, because it is impossible to fulfill locally.",
                "Obviously, a task is also not offered anymore when it has been allocated.",
                "This protocol is such that, when no two tasks have exactly the same efficiency, in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the algorithm follows.",
                "Proposition 1.",
                "For a STAP with n tasks and m agents, the run time of the distributed algorithm is O(nm), and the number of communication messages is O(n2 m). 1 Even when some tasks have the same efficiency, it is straightforward to make this result work.",
                "For example, the implementation can ensure that the contractors choose the task with the lowest task-id. 502 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 2 Optimal social task allocation (OPT).",
                "Repeat the following for each combination of tasks: 1.",
                "If the total reward for this combination is higher than any previous combination, test if this combination is feasible as follows: 2.",
                "Create a network flow problem for each resource type r ∈ R (separately) as follows: (a) Create a source s and a sink s . (b) For each agent a ∈ A create an agent node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has. (c) For each task t ∈ T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires. (d) For each agent a connect the agent node to all task nodes of neighboring tasks, i.e., t ∈ {t ∈ T | (a, loc(t)) ∈ AE}.",
                "Give this connection unlimited capacity. 3.",
                "Solve the maximum flow problem for the created flow networks.",
                "If the maximum flow in each network is equal to the total required resources of that type, the current combination of tasks is feasible.",
                "In that case, this is the current best combination of tasks.",
                "Proof.",
                "In the worst case, in each iteration exactly one task is removed from a task list, so there are n iterations.",
                "In each iteration in the worst case (i.e., a fully connected network), for each of the O(n) managers, O(m) messages are sent.",
                "Next the task with the highest efficiency can be selected by each contractor in O(n).",
                "Assigning an allocation can be done in O(m).",
                "This leads to a total of O(n + m) operations for each iteration, and thus O(n2 + nm) operations in total.",
                "The number of messages sent is O(n(nm + nm + nm)) = O(n2 m).",
                "We establish the quality of this protocol experimentally (in Section 5).",
                "Preferably, we compare the results to the optimal solution. 4.2 Optimal social task allocation The optimal task allocation algorithm should deal with the restrictions posed by the social network.",
                "For this NPcomplete problem we used an exponential brute-force algorithm to consider relevant combinations of tasks to execute.",
                "For each combination we use a maximum-flow algorithm to check whether the resources are sufficient for the selected subset of tasks.",
                "The flow network describes which resources can be used for which tasks, depending on the social network.",
                "If the maximum flow is equal to the sum of all resources required by the subset of tasks, we know that a feasible solution exists (see Algorithm 2).",
                "Clearly, we cannot expect this optimal algorithm to be able to find solutions for larger problem sizes.",
                "To establish the quality of our protocol for large instances, we use the following method to determine an upper bound. 4.3 Upper bound for social task allocation Given a social task allocation problem, if the number of resource types for every task t ∈ T is bounded by 1, the Algorithm 3 An upper bound for social task allocation (UB).",
                "Create a network flow problem with costs as follows: 1.",
                "Create a source s and a sink s . 2.",
                "For each agent a ∈ A and each resource type ri ∈ R, create an agent-resource node ai, and an edge from s to this node with capacity equal to the amount of resources of type r agent a has available and with costs 0. 3.",
                "For each task t ∈ T and each resource type ri ∈ R, create a task-resource node ti, and an edge from this node to s with capacity equal to the amount of resources of type r task t requires and costs −e(t). 4.",
                "For each resource type ri ∈ R and for each agent a connect the agent-resource node ai to all task-resource nodes ti for neighboring tasks t ∈ {t ∈ T | (a, loc(t)) ∈ AE or a = loc(t)}.",
                "Give this connection unlimited capacity and zero costs. 5.",
                "Create an edge directly from s to s with unlimited capacity and zero costs.",
                "Solve the minimum cost flow network problem for this network.",
                "The costs of the resulting network is an upper bound for the social task allocation problem. problem is polynomially solvable by transforming it to a flow network problem.",
                "Our method for efficiently calculating an upper bound for STAP makes use of this special case by converting any given STAP instance P into a new problem P where each task only has one resource type.",
                "More specifically, for every task t ∈ T with utility u(t), we do the following.",
                "Let m be the number of resource types {r1, . . . , rm} required by t. We then split t into a set of m tasks T = {t1, . . . , tm} where each task ti only has one unique resource type (of {r1, . . . , rm}) and each task has a fair share of the utility, i.e., the efficiency of t from Definition 5 times the amount of this resource type rsc(ti, ri).",
                "After polynomially performing this conversion for every task in T , the original problem P becomes the special case P .",
                "Note that the set of valid allocations in P is only a subset of the set of valid allocations in P , because it is now possible to partially allocate a task.",
                "From this it is easy to see that the solution of P gives an upper bound of the solution of the original problem P. To compute the optimal solution for P , we transform it to a minimum cost flow problem.",
                "We model the cost in the flow network by the negation of the new tasks utility.",
                "A polynomial-time implementation of a scaling minimum cost flow algorithm [9] is used for the computation.",
                "The resulting minimum cost flow represents a maximum allocation of the tasks for P .",
                "The detailed modeling is described in Algorithm 3.",
                "In the next section, we use this upper bound to estimate the quality of the GDAP for large-scale instances. 5.",
                "EXPERIMENTS We implemented the greedy distributed allocation protocol (GDAP), the optimal allocation algorithm (OPT), and the upper bound algorithm (UB) in Java, and tested them on a Linux PC.",
                "The purpose of these experiments is to study the performance of the distributed algorithm in different problem settings using different social networks.",
                "The perThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 2: The solution qualities of the GDAP and the upper bound depend on the resource ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 Numberofagents Degree small-world random scale-free Figure 3: The histogram of the degrees. formance measurements are the solution quality and computation time, where the solution quality (SQ) is computed as follows.",
                "When the number of tasks is small, we compare the output of the distributed algorithm with the optimal solution, i.e., SQ = GDAP OP T , but if it is not feasible to compute the optimal solution, we use the value returned by the upper bound algorithm for evaluation, i.e., SQ = GDAP UB .",
                "To see whether the latter is a good measure, we also compare the quality of the upper bound to the optimal solution for smaller problems.",
                "In the following, we describe the setup of all experiments, and present the results. 5.1 Experimental settings We consider several experimental environments.",
                "In all environments the agents are connected by a social network.",
                "In the experiments, three different networks are used to simulate the social relationships among agents in potential realworld problems.",
                "Small-world networks are networks where most neighbors of an agent are also connected to each other.",
                "For the experiments we use a method for generating random small-world networks proposed by Watts et al. [22], with a fixed rewiring probability p = 0.05.",
                "Scale-free networks have the property that a couple of nodes have many connections, and many nodes have only a small number of connections.",
                "To generate these we use the implementation in the JUNG library of the generator proposed by Barab´asi and Albert [3].",
                "We also generate random networks as follows.",
                "First we connect each agent to another agent such that all agents are connected.",
                "Next, we randomly add connections until the desired average degree has been reached.",
                "We now describe the different settings used in our experiments with both small and large-scale problems.",
                "Setting 1.",
                "The number of agents is 40, and the number of tasks is 20.",
                "The number of different resource types is bounded by 5, and the average number of resources required by a task is 30.",
                "Consequently, the total number of resources required by the tasks is fixed.",
                "However, the resources available to the agents are varied.",
                "We define the resource ratio to refer to the ratio between the total number of available resources and the total number of required resources.",
                "Resources are allocated uniformly to the agents.",
                "The average degrees of the networks may also change.",
                "In this setting the task benefits are distributed normally around the number of resources required.",
                "Setting 2.",
                "This setting is similar to Setting 1, but here we let the benefits of the tasks vary dramatically-40% of the tasks have around 10 times higher benefit than the other 60% of the tasks.",
                "Setting 3.",
                "This setting is for large-scale problems.",
                "The ratio between the number of agents and the number of tasks is set to 5/3, and the number of agents varies from 100 to 2000.",
                "We also fix the resource ratio to 1.2 and the average degree to 6.",
                "The number of different resource types is 20, and the average resource requirement of a tasks is 100.",
                "The task benefits are again normally distributed. 5.2 Experimental results The experiments are done with the three different settings in the three different networks mentioned before, where each recorded data is the average over 20 random instances. 5.2.1 Experiment 1 Experimental setting 1 is used for this set of experiments.",
                "We would like to see how the GDAP behaves in the different networks when the number of resources available to the agents is changing.",
                "We also study the <br>behavior</br> of our upper bound algorithm.",
                "For this experiment we fix the average number of neighbors (degree) in each network type to six.",
                "In Figure 2 we see how the quality of both the upper bound and the GDAP algorithm depends on the resource ratio.",
                "Remarkably, for lower resource ratios our GDAP is much closer to the optimal allocation than the upper bound.",
                "When the resource ratio grows above 1.5, the graphs of the upper bound and the GDAP converge, meaning that both are really close to the optimal solution.",
                "This can be explained by the fact that when plenty of resources are available, all tasks can be allocated without any conflicts.",
                "However, when resources are very scarce, the upper bound is much too optimistic, because it is based on the allocation of sub-tasks per resource type, and does not reason about how many of the tasks can actually be allocated completely.",
                "We also notice from the graph that the solution quality of the GDAP on all three networks is quite high (over 0.8) when the available resource is very limited (0.3).",
                "It drops below 0.8 with the increased ratio and goes up again once there are plenty of resources available (resource ratio 0.9).",
                "Clearly, if 504 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 4: The quality of the GDAP and the upper bound depend on the network degree. resources are really scarce, only a few tasks can be successfully allocated even by the optimal algorithm.",
                "Therefore, the GDAP is able to give quite a good allocation.",
                "Although the differences are minor, it can also be seen that the results for the small-world network are consistently slightly better than those of random networks, which in turn outperform scale-free networks.",
                "This can be understood by looking at the distribution of the agents degree, as shown in Figure 3.",
                "In this experiment, in the small-world network almost every manager has a degree of six.",
                "In random networks, the degree varies between one and about ten.",
                "However, in the scale-free network, most nodes have only three or four connections, and only a very few have up to twenty connections.",
                "As we will see in the next experiment, having more connections means getting better results.",
                "For the next experiment we fix the resource ratio to 1.0 and study the quality of both the upper bound and the GDAP algorithm related to the degree of the social network.",
                "The result can be found in Figure 4.",
                "In this figure we can see that a high average degree also leads to convergence of the upper bound and the GDAP.",
                "Obviously, when managers have many connections, it becomes easier to allocate tasks.",
                "An exception is, similar to what we have seen in Figure 2, that the solution of the GDAP is also very good if the connections are extremely limited (degree 2), due to the fact that the number of possibly allocated tasks is very small.",
                "Again we see that the upper bound is not that good for problems where resources are hard to reach, i.e. in social networks with a low average degree.2 Since the solution quality clearly depends on the resource ratio as well as on the degree of the social network, we study the effect of changing both, to see whether they influence each other.",
                "Figure 5 shows how the solution quality depends on both the resource ratio and the network degree.",
                "This graph confirms the results that the GDAP performs better for problems with higher degree and higher resource ratio.",
                "However, it is now also more clear that it performs better for very low degree and resource availability.",
                "For this experiment with 40 agents and 20 tasks, the worst performance is met for instances with degree six and resource ratio 0.6 to instances with degree twelve and resource ratio 0.3.",
                "But even for those instances, the performance lies above 0.7. 2 The consistent standard deviation of about 15% over the 20 problem instances is not displayed as error-bars in these first graphs, because it would obfuscate the interesting correlations that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Relative reward small-world Average degree Resource ratio Relative reward Figure 5: The quality of the GDAP depends on both the resource ratio and the network degree. 5.2.2 Experiment 2 To study the robustness of the GDAP against different problem settings, we generate instances where the task benefit distribution is different: 40% of the tasks gets a 10 times higher benefit (as described in Setting 2).",
                "The effect of this different distribution can be seen in Figure 6.",
                "These two graphs show that the results for the skewed task benefit distribution are slightly better on average, both when varying the resource ratio, and when varying the average degree of the network.",
                "We argue that this can be explained by the greedy nature of GDAP, which causes the tasks with high efficiency to be allocated first, and makes the algorithm perform better in this heterogeneous setting. 5.2.3 Experiment 3 The purpose of this final experiment is to test whether the algorithm can be scaled to large problems, like applications running on the internet.",
                "We therefore generate instances where the number of agents varies from 100 to 2000, and simultaneously increase the number of tasks from 166 to 3333 (Setting 3).",
                "Figure 7 shows the run time for these instances on a Linux machine with an AMD Opteron 2.4 GHz processor.",
                "These graphs confirm the theoretical analysis from the previous section, saying that both the upper bound and the GDAP are polynomial.",
                "In fact, the graphs show that the GDAP almost behaves linearly.",
                "Here we see that the locality of the GDAP really helps in reducing the computation time.",
                "Also note that the GDAP requires even less computation time than the upper bound.",
                "The quality of the GDAP for these large instances cannot be compared to the optimal solution.",
                "Therefore, in Figure 8 the upper bound is used instead.",
                "This result shows that the GDAP behaves stably and consistently well with the increasing problem size.",
                "It also shows once more that the GDAP performs better in a small-world network. 6.",
                "RELATED WORK Task allocation in multiagent systems has been investigated by many researchers in recent years with different assumptions and emphases.",
                "However, most of the research to date on task allocation does not consider social connections among agents, and studies the problem in a centralized The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free Figure 6: The quality of the GDAP algorithm for a uniform and a skewed task benefit distribution related to the resource ratio (the first graph), and the network degree (the second graph). setting.",
                "For example, Kraus et al. [12] develop an auction protocol that enables agents to form coalitions with time constraints.",
                "It assumes each agent knows the capabilities of all others.",
                "The proposed protocol is centralized, where one manager is responsible for allocating the tasks to all coalitions.",
                "Manisterski at al. [14] discuss the possibilities of achieving efficient allocations in both cooperative and noncooperative settings.",
                "They propose a centralized algorithm to find the optimal solution.",
                "In contrast to this work, we introduce also an efficient completely distributed protocol that takes the social network into account.",
                "Task allocation has also been studied in distributed settings by for example Shehory and Kraus [18] and by Lerman and Shehory [13].",
                "They propose distributed algorithms with low communication complexity for forming coalitions in large-scale multiagent systems.",
                "However, they do not assume the existence of any agent network.",
                "The work of Sander et al. [16] introduces computational geometry-based algorithms for distributed task allocation in geographical domains.",
                "Agents are then allowed to move and actively search for tasks, and the capability of agents to perform tasks is homogeneous.",
                "In order to apply their approach, agents need to have some knowledge about the geographical positions of tasks and some other agents.",
                "Other work [17] proposes a location mechanism for open multiagent systems to allocate tasks to unknown agents.",
                "In this approach each agent caches a list of agents they know.",
                "The analysis of the communication complexity of this method is based on lattice-like graphs, while we investigate how to efficiently solve task allocation in a social network, whose topology can be arbitrary.",
                "Networks have been employed in the context of task allocation in some other works as well, for example to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time(ms) Agents upper bound - small-world upper bound - random upper bound - scale-free GDAP - small-world GDAP - random GDAP - scale-free Figure 7: The run time of the GDAP algorithm. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Rewardrelativetoupperbound Agents small-world random scale-free Figure 8: The quality of the GDAP algorithm compared to the upper bound. interactions between agents and mediators [1].",
                "Mediators in this context are agents who receive the task and have connections to other agents.",
                "They break up the task into subtasks, and negotiate with other agents to obtain commitments to execute these subtasks.",
                "Their focus is on modeling the decision process of just a single mediator.",
                "Another approach is to partition the network into cliques of nodes, representing coalitions which the agents involved may use as a coordination mechanism [20].",
                "The focus of that work is distributed coalition formation among agents, but in our approach, we do not need agents to form groups before allocating tasks.",
                "Easwaran and Pitt [6] study complex tasks that require services for their accomplishment.",
                "The problem concerns the allocation of subtasks to service providers in a supply chain.",
                "Another study of task allocation in supply chains is [21], where it is argued that the defining characteristic of Supply Chain Formation is hierarchical subtask decomposition (HSD).",
                "HSD is implemented using task dependency networks (TDN), with agents and goods as nodes, and I/O relations between them as edges.",
                "Here, the network is given, and the problem is to select a subgraph, for which the authors propose a market-based algorithm, in particular, a series of auctions.",
                "Compared to these works, our approach is more general in the sense that we are able to model different types of connections or constraints among agents for different problem domains in addition to supply chain formation.",
                "Finally, social networks have been used in the context of team formation.",
                "Previous work has shown how to learn which relations are more beneficial in the long run [8], and adapt the social network accordingly.",
                "We believe these results can be transferred to the domain of task allocation as well, leaving this as a topic for further study. 506 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 7.",
                "CONCLUSIONS In this paper we studied the task allocation problem in a social network (STAP), which can be seen as a new, more general, variant of the TAP.",
                "We believe it has a great amount of potential for realistic problems.",
                "We provided complexity results on computing the efficient solution for the STAP, as well as a bound on possible approximation algorithms.",
                "Next, we presented a distributed protocol, related to the contractnet protocol.",
                "We also introduced an exponential algorithm to compute the optimal solution, as well as a fast upperbound algorithm.",
                "Finally, we used the optimal solution and the upper-bound (for larger instances) to conduct an extensive set of experiments to assess the solution quality and the computational efficiency of the proposed distributed algorithm in different types of networks, namely, small-world networks, random networks, and scale-free networks.",
                "The results presented in this paper show that the distributed algorithm performs well in small-world, scale-free, and random networks, and for many different settings.",
                "Also other experiments were done (e.g. on grid networks) and these results held up over a wider range of scenarios.",
                "Furthermore, we showed that it scales well to large networks, both in terms of quality and of required computation time.",
                "The results also suggest that small-world networks are slightly better suited for local task allocation, because there are no nodes with very few neighbors.",
                "There are many interesting extensions to our current work.",
                "In this paper, we focus on the computational aspect in the design of the distributed algorithm.",
                "In our future work, we would also like to address some of the related issues in game theory, such as strategic agents, and show desirable properties of a distributed protocol in such a context.",
                "In the current algorithm we assume that agents can only contact their neighbors to request resources, which may explain why our algorithm performs not as good in the scalefree networks as in the small-world networks.",
                "Our future work may allow agents to reallocate (sub)tasks.",
                "We are interested in seeing how such interactions will affect the performance of task allocation in different social networks.",
                "A third interesting topic for further work is the addition of reputation information among the agents.",
                "This may help to model changing business relations and incentivize agents to follow the protocol.",
                "Finally, it would be interesting to study real-life instances of the social task allocation problem, and see how they relate to the randomly generated networks of different types studied in this paper.",
                "Acknowledgments.",
                "This work is supported by the Technology Foundation STW, applied science division of NWO, and the Ministry of Economic Affairs. 8.",
                "REFERENCES [1] S. Abdallah and V. Lesser.",
                "Modeling Task Allocation Using a Decision Theoretic Model.",
                "In Proc.",
                "AAMAS, pages 719-726.",
                "ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson, and D. Zuckerman.",
                "Derandomized Graph Products.",
                "Computational Complexity, 5(1):60-75, 1995. [3] A.-L. Barab´asi and R. Albert.",
                "Emergence of scaling in random networks.",
                "Science, 286(5439):509-512, 1999. [4] R. H. Coase.",
                "The Nature of the Firm.",
                "Economica NS, 4(16):386-405, 1937. [5] R. H. Coase.",
                "My Evolution as an Economist.",
                "In W. Breit and R. W. Spencer, editors, Lives of the Laureates, pages 227-249.",
                "MIT Press, 1995. [6] A. M. Easwaran and J. Pitt.",
                "Supply Chain Formation in Open, Market-Based Multi-Agent Systems.",
                "International J. of Computational Intelligence and Applications, 2(3):349-363, 2002. [7] I.",
                "Foster, N. R. Jennings, and C. Kesselman.",
                "Brain Meets Brawn: Why Grid and Agents Need Each Other.",
                "In Proc.",
                "AAMAS, pages 8-15, Washington, DC, USA, 2004.",
                "IEEE Computer Society. [8] M. E. Gaston and M. desJardins.",
                "Agent-organized networks for dynamic team formation.",
                "In Proc.",
                "AAMAS, pages 230-237, New York, NY, USA, 2005.",
                "ACM Press. [9] A. Goldberg.",
                "An Efficient Implementation of a Scaling Minimum-Cost Flow Algorithm.",
                "J. of Algorithms, 22:1-29, 1997. [10] R. Gulati.",
                "Does Familiarity Breed Trust?",
                "The Implications of Repeated Ties for Contractual Choice in Alliances.",
                "Academy of Management Journal, 38(1):85-112, 1995. [11] T. Klos and B. Nooteboom.",
                "Agent-based Computational Transaction Cost Economics.",
                "Economic Dynamics and Control, 25(3-4):503-526, 01. [12] S. Kraus, O. Shehory, and G. Taase.",
                "Coalition formation with uncertain heterogeneous information.",
                "In Proc.",
                "AAMAS, pages 1-8.",
                "ACM, 2003. [13] K. Lerman and O. Shehory.",
                "Coalition formation for large-scale electronic markets.",
                "In Proc.",
                "ICMAS, pages 167-174.",
                "IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus, and N. Jennings.",
                "Forming Efficient Agent Groups for Completing Complex Tasks.",
                "In Proc.",
                "AAMAS, pages 257-264.",
                "ACM, 2006. [15] J. Patel et al.",
                "Agent-Based Virtual Organizations for the Grid.",
                "Multi-Agent and Grid Systems, 1(4):237-249, 2005. [16] P. V. Sander, D. Peleshchuk, and B. J. Grosz.",
                "A scalable, distributed algorithm for efficient task allocation.",
                "In Proc.",
                "AAMAS, pages 1191-1198, New York, NY, USA, 2002.",
                "ACM Press. [17] O. Shehory.",
                "A scalable agent location mechanism.",
                "In Proc.",
                "ATAL, volume 1757 of LNCS, pages 162-172.",
                "Springer, 2000. [18] O. Shehory and S. Kraus.",
                "Methods for Task Allocation via Agent Coalition Formation.",
                "Artificial Intelligence, 101(1-2):165-200, 1998. [19] R. M. Sreenath and M. P. Singh.",
                "Agent-based service selection.",
                "Web Semantics, 1(3):261-279, 2004. [20] P. T. Toˇsi´c and G. A. Agha.",
                "Maximal Clique Based Distributed Coalition Formation for Task Allocation in Large-Scale Multi-Agent Systems.",
                "In Proc.",
                "MMAS, volume 3446 of LNAI, pages 104-120.",
                "Springer, 2005. [21] W. E. Walsh and M. P. Wellman.",
                "Modeling Supply Chain Formation in Multiagent Systems.",
                "In Proc.",
                "AMEC II, volume 1788 of LNAI, pages 94-101.",
                "Springer, 2000. [22] D. J. Watts and S. H. Strogatz.",
                "Collective dynamics of small world networks.",
                "Nature, 393:440-442, 1998.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 507"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "También estudiamos el \"comportamiento\" de nuestro algoritmo de límite superior."
            ],
            "translated_text": "",
            "candidates": [
                "comportamiento",
                "comportamiento"
            ],
            "error": []
        },
        "multiagent system": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Distributed Task Allocation in Social Networks Mathijs de Weerdt Delft Technical University Delft, The Netherlands M.M.deWeerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, The Netherlands Yingqian.Zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI) Amsterdam, The Netherlands tomas.klos@cwi.nl ABSTRACT This paper proposes a new variant of the task allocation problem, where the agents are connected in a social network and tasks arrive at the agents distributed over the network.",
                "We show that the complexity of this problem remains NPhard.",
                "Moreover, it is not approximable within some factor.",
                "We develop an algorithm based on the contract-net protocol.",
                "Our algorithm is completely distributed, and it assumes that agents have only local knowledge about tasks and resources.",
                "We conduct a set of experiments to evaluate the performance and scalability of the proposed algorithm in terms of solution quality and computation time.",
                "Three different types of networks, namely small-world, random and scale-free networks, are used to represent various social relationships among agents in realistic applications.",
                "The results demonstrate that our algorithm works well and that it scales well to large-scale applications.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Recent years have seen a lot of work on task and resource allocation methods, which can potentially be applied to many real-world applications.",
                "However, some interesting applications where relations between agents play a role require a slightly more general model.",
                "Such situations appear very frequently in real-world scenarios, and recent technological developments are bringing more of them within the range of task allocation methods.",
                "Especially in business applications, preferential partner selection and interaction is very common, and this aspect becomes more important for task allocation research, to the extent that technological developments need to be able to support it.",
                "For example, the development of semantic web and grid technologies leads to increased and renewed attention for the potential of the web to support business processes [7, 15].",
                "As an example, virtual organizations (VOs) are being re-invented in the context of the grid, where they are composed of a number of autonomous entities (representing different individuals, departments and organizations), each of which has a range of problem-solving capabilities and resources at its disposal [15, p. 237].",
                "The question is how VOs are to be dynamically composed and re-composed from individual agents, when different tasks and subtasks need to be performed.",
                "This would be done by allocating them to different agents who may each be capable of performing different subsets of those tasks.",
                "Similarly, supply chain formation (SCF) is concerned with the, possibly ad-hoc, allocation of services to providers in the supply chain, in such a way that overall profit is optimized [6, 21].",
                "Traditionally, such allocation decisions have been analyzed using transaction cost economics (TCE) [4], which takes the transaction between consecutive stages of development as its basic unit of analysis, and considers the firm and the market as alternative structural forms for organizing transactions. (Transaction cost) economics has traditionally built on analysis of comparative statics: the central problem of economic organization is considered to be the adaptation of organizational forms to the characteristics of transactions.",
                "More recently, TCEs founding father, Ronald Coase, acknowledged that this is too simplistic an approach [5, p. 245]: The analysis cannot be confined to what happens within a single firm. (. . . )",
                "What we are dealing with is a complex interrelated structure.",
                "In this paper, we study the problem of task allocation from the perspective of such a complex interrelated structure.",
                "In particular, the market cannot be considered as an organizational form without considering specific partners to interact with on the market [11].",
                "Specifically, therefore, we consider agents to be connected to each other in a social network.",
                "Furthermore, this network is not fully connected: as informed by the business literature, firms typically have established working relations with limited numbers of preferred partners [10]; these are the ones they consider when new tasks arrive and they have to form supply chains to allocate those tasks [19].",
                "Other than modeling the interrelated 500 978-81-904262-7-5 (RPS) c 2007 IFAAMAS structure between business partners, the social network introduced in this paper can also be used to represent other types of connections or constraints among autonomous entities that arise from other application domains.",
                "The next section gives a formal description of the task allocation problem on social networks.",
                "In Section 3, we prove that the complexity of this problem remains NP-hard.",
                "We then proceed to develop a distributed algorithm in Section 4, and perform a series of experiments with this algorithm, as described in Section 5.",
                "Section 6 discusses related work, and Section 7 concludes. 2.",
                "PROBLEM DESCRIPTION We formulate the social task allocation problem in this section.",
                "There is a set A of agents: A = {a1, . . . , am}.",
                "Agents need resources to complete tasks.",
                "Let R = {r1, . . . , rk} denote the collection of the resource types available to the agents A.",
                "Each agent a ∈ A controls a fixed amount of resources for each resource type in R, which is defined by a resource function: rsc : A × R → N. Moreover, we assume agents are connected by a social network.",
                "Definition 1 (Social network).",
                "An agent social network SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ∈ AE indicates the existence of a social connection between agents ai and aj.",
                "Suppose a set of tasks T = {t1, t2, . . . , tn} arrives at such an agent social network.",
                "Each task t ∈ T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the utility gained if task t is accomplished, and the resource function rsc : T ×R → N specifies the amount of resources required for the accomplishment of task t. Furthermore, a location function loc : T → A defines the locations (i.e., agents) at which the tasks arrive in the social network.",
                "An agent a that is the location of a task t, i.e. loc(t) = a, is called the manager of this task.",
                "Each task t ∈ T needs some specific resources from the agents in order to complete the task.",
                "The exact assignment of tasks to agents is defined by a task allocation.",
                "Definition 2 (Task allocation).",
                "Given a set of tasks T = {t1, . . . , tn} and a set of agents A = {a1, . . . , am} in a social network SN, a task allocation is a mapping φ : T × A × R → N. A valid task allocation in SN must satisfy the following constrains: • A task allocation must be correct.",
                "Each agent a ∈ A cannot use more than its available resources, i.e. for each r ∈ R, P t∈T φ(t, a, r) ≤ rsc(a, r). • A task allocation must be complete.",
                "For each task t ∈ T , either all allocated agents resources are sufficient, i.e. for each r ∈ R, P a∈A φ(t, a, r) ≥ rsc(t, r), or t is not allocated, i.e. φ(t, ·, ·) = 0. • A task allocation must obey the social relationships.",
                "Each task t ∈ T can only be allocated to agents that are (direct) neighbors of agent loc(t) in the social network SN.",
                "Each such agent that can contribute to a task is called a contractor.",
                "We write Tφ to represent the tasks that are fully allocated in φ.",
                "The utility of φ is then the summation of the utilities of each task in Tφ, i.e., Uφ = P t∈Tφ u(t).",
                "Using this notation, we define the efficient task allocation below.",
                "Definition 3 (Efficient task allocation).",
                "We say a task allocation φ is efficient if it is valid and Uφ is maximized, i.e., Uφ = max( P t∈Tφ u(t)).",
                "We are now ready to define the task allocation problem in social network that we study in this paper.",
                "Definition 4 (Social task allocation problem).",
                "Given a set of agents A connected by a social network SN = (A, AE), and a finite set of tasks T , the social task allocation problem (or STAP for short) is the problem of finding the efficient task allocation φ, such that φ is valid and the social welfare Uφ is maximized. 3.",
                "COMPLEXITY RESULTS The traditional task allocation problem, TAP (without the condition of the social network SN), is NP-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set.",
                "Although we may consider the TAP as a special case of the STAP by assuming agents are fully connected, we cannot directly use the complexity results from the TAP, since we study the STAP in an arbitrary social network, which, as we argued in the introduction, should be partially connected.",
                "We now show that the TAP with an arbitrary social network is also NP-complete, even when the utility of each task is 1, and the quantity of all required and available resources is 1.",
                "Theorem 1.",
                "Given the social task allocation problem with an arbitrary social network, as defined in Definition 4, the problem of deciding whether a task allocation φ with utility more than k exists is NP-complete.",
                "Proof.",
                "We first show that the problem is in NP.",
                "Given an instance of the problem and an integer k, we can verify in polynomial time whether an allocation φ is a valid allocation and whether the utility of φ is greater than k. We now prove that the STAP is NP-hard by showing that MAXIMUM INDEPENDENT SET ≤P STAP.",
                "Given an undirected graph G = (V, E) and an integer k, we construct a network G = (V , E ) which has an efficient task allocation with k tasks of utility 1 allocated if and only if G has an independent set (IS) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 Figure 1: The MIS problem can be reduced to the STAP.",
                "The left figure is an undirected graph G, which has the optimal solution {v1, v4} or {v2, v3}; the right figure is the constructed instance of the STAP, where the optimal allocation is {t1, t4} or {t2, t3}.",
                "An instance of the following construction is shown in Figure 1.",
                "For each node v ∈ V and each edge e ∈ E in the graph G, we create a vertex agent av and an edge agent ae in G .",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 501 When v was incident to e in G we correspondingly add an edge e in G between av and ae.",
                "We assign each agent in G one resource, which is related to the node or the edge in the graph G, i.e., for each v ∈ V , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ E, rsc(ae) = {e}.",
                "Each vertex agent avi in G has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ E}.",
                "There is no task on the edge agents in G .",
                "We define utility 1 for each task, and the quantity of all required and available resources to be 1.",
                "Taken an instance of the IS problem, suppose there is a solution of size k, i.e., a subset N ⊆ V such that no two vertices in N are joined by an edge in E and |N| = k. N specifies a set of vertex agents AN in the corresponding graph G .",
                "Given two agents a1, a2 ∈ AN we now know that there is no edge agent ae connected to both a1 and a2.",
                "Thus, for each agent a ∈ AN , a assigns its task to the edge agents which are connected to a.",
                "All other vertex agents a /∈ AN are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ AN .",
                "The set of tasks of the agents AN (|AN | = k) is thus the maximum set of tasks that can be allocated.",
                "The utility of this allocation is k. Similarly, if there is a solution for the STAP with the utility value k, and the allocated task set is N, then for the IS problem, there exists a maximum independent set N of size k in G. An example can be found in Figure 1.",
                "We just proved that the STAP is NP-hard for an arbitrary graph.",
                "In our proof, the complexity comes from the introduction of a social network.",
                "One may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant.",
                "We now give a complexity result on this class of networks as follows.",
                "Theorem 2.",
                "Let the number of neighbors of each agent in the social network SN be bounded by Δ for Δ ≥ 3.",
                "Computing the efficient task allocation given such a network is NP-complete.",
                "In addition, it is not approximable within Δε for some ε > 0.",
                "Proof.",
                "It has been shown in [2] that the maximum independent set problem in the case of the degree bounded by Δ for Δ ≥ 3 is NP-complete and is not approximable within Δε for some ε > 0.",
                "Using the similar reduction from the proof of Theorem 1, this result also holds for the STAP.",
                "Since our problem is as hard as MIS as shown in Theorem 1, it is not possible to give a worst case bound better than Δε for any polynomial time algorithm, unless P = NP. 4.",
                "ALGORITHMS To deal with the problem of allocating tasks in a social network, we present a distributed algorithm.",
                "We introduce this algorithm by describing the protocol for the agents.",
                "After that we give the optimal, centralized algorithm and an upper bound algorithm, which we use in Section 5 to benchmark the quality of our distributed algorithm. 4.1 Protocol for distributed task allocation We can summarize the description of the task allocation problem in social networks from Section 2 as follows.",
                "We Algorithm 1 Greedy distributed allocation protocol (GDAP).",
                "Each manager a calculates the efficiency e(t) for each of their tasks t ∈ Ta, and then while Ta = ∅: 1.",
                "Each manager a selects the most efficient task t ∈ Ta such that for each task t ∈ Ta: e(t ) ≤ e(t). 2.",
                "Each manager a requests help for t from all its neighbors (of a) by informing these neighbors of the efficiency e(t) and the required resources for t. 3.",
                "Contractors receive and store all requests, and then offer all relevant resources to the manager for the task with the highest efficiency. 4.",
                "The managers that have received sufficient offers allocate their tasks, and inform each contractor which part of the offer is accepted.",
                "When a task is allocated, or when a manager has received offers from all neighbors, but still cannot satisfy its task, the task is removed from the task list Ta. 5.",
                "Contractors update their used resources. have a (social) network of agents.",
                "Each agent has a set of resources of different types at its disposal.",
                "We also have a set of tasks.",
                "Each task requires some resources, has a fixed benefit, and is located at a certain agent.",
                "This agent is called a manager.",
                "We only allow neighboring agents to help with a task.",
                "These agents are called contractors.",
                "Agents can fulfill the role of manager as well as contractor.",
                "The problem is to find out which tasks to execute, and which resources of which contractors to use for these tasks.",
                "The idea of the protocol is as follows.",
                "All manager agents a ∈ A try to find neighboring contractors to help them with their task(s) Ta = {ti ∈ T | loc(ti) = a}.",
                "They start with offering the task that is most efficient in terms of the ratio between benefit and required resources.",
                "Out of all tasks offered, contractors select the task with the highest efficiency, and send a bid to the related manager.",
                "A bid consists of all the resources the agent is able to supply for this task.",
                "If sufficient resources have been offered, the manager selects the required resources and informs all contractors of its choice.",
                "The efficiency of a task is defined as follows: Definition 5.",
                "The efficiency e of a task t ∈ T is defined by the utility of this task divided by the sum of all required resources: e(t) = u(t)P r∈R rsc(t,r) .",
                "A more detailed description of this protocol can be found in Algorithm 1.",
                "Here it is also defined how to determine when a task should not be offered anymore, because it is impossible to fulfill locally.",
                "Obviously, a task is also not offered anymore when it has been allocated.",
                "This protocol is such that, when no two tasks have exactly the same efficiency, in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the algorithm follows.",
                "Proposition 1.",
                "For a STAP with n tasks and m agents, the run time of the distributed algorithm is O(nm), and the number of communication messages is O(n2 m). 1 Even when some tasks have the same efficiency, it is straightforward to make this result work.",
                "For example, the implementation can ensure that the contractors choose the task with the lowest task-id. 502 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 2 Optimal social task allocation (OPT).",
                "Repeat the following for each combination of tasks: 1.",
                "If the total reward for this combination is higher than any previous combination, test if this combination is feasible as follows: 2.",
                "Create a network flow problem for each resource type r ∈ R (separately) as follows: (a) Create a source s and a sink s . (b) For each agent a ∈ A create an agent node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has. (c) For each task t ∈ T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires. (d) For each agent a connect the agent node to all task nodes of neighboring tasks, i.e., t ∈ {t ∈ T | (a, loc(t)) ∈ AE}.",
                "Give this connection unlimited capacity. 3.",
                "Solve the maximum flow problem for the created flow networks.",
                "If the maximum flow in each network is equal to the total required resources of that type, the current combination of tasks is feasible.",
                "In that case, this is the current best combination of tasks.",
                "Proof.",
                "In the worst case, in each iteration exactly one task is removed from a task list, so there are n iterations.",
                "In each iteration in the worst case (i.e., a fully connected network), for each of the O(n) managers, O(m) messages are sent.",
                "Next the task with the highest efficiency can be selected by each contractor in O(n).",
                "Assigning an allocation can be done in O(m).",
                "This leads to a total of O(n + m) operations for each iteration, and thus O(n2 + nm) operations in total.",
                "The number of messages sent is O(n(nm + nm + nm)) = O(n2 m).",
                "We establish the quality of this protocol experimentally (in Section 5).",
                "Preferably, we compare the results to the optimal solution. 4.2 Optimal social task allocation The optimal task allocation algorithm should deal with the restrictions posed by the social network.",
                "For this NPcomplete problem we used an exponential brute-force algorithm to consider relevant combinations of tasks to execute.",
                "For each combination we use a maximum-flow algorithm to check whether the resources are sufficient for the selected subset of tasks.",
                "The flow network describes which resources can be used for which tasks, depending on the social network.",
                "If the maximum flow is equal to the sum of all resources required by the subset of tasks, we know that a feasible solution exists (see Algorithm 2).",
                "Clearly, we cannot expect this optimal algorithm to be able to find solutions for larger problem sizes.",
                "To establish the quality of our protocol for large instances, we use the following method to determine an upper bound. 4.3 Upper bound for social task allocation Given a social task allocation problem, if the number of resource types for every task t ∈ T is bounded by 1, the Algorithm 3 An upper bound for social task allocation (UB).",
                "Create a network flow problem with costs as follows: 1.",
                "Create a source s and a sink s . 2.",
                "For each agent a ∈ A and each resource type ri ∈ R, create an agent-resource node ai, and an edge from s to this node with capacity equal to the amount of resources of type r agent a has available and with costs 0. 3.",
                "For each task t ∈ T and each resource type ri ∈ R, create a task-resource node ti, and an edge from this node to s with capacity equal to the amount of resources of type r task t requires and costs −e(t). 4.",
                "For each resource type ri ∈ R and for each agent a connect the agent-resource node ai to all task-resource nodes ti for neighboring tasks t ∈ {t ∈ T | (a, loc(t)) ∈ AE or a = loc(t)}.",
                "Give this connection unlimited capacity and zero costs. 5.",
                "Create an edge directly from s to s with unlimited capacity and zero costs.",
                "Solve the minimum cost flow network problem for this network.",
                "The costs of the resulting network is an upper bound for the social task allocation problem. problem is polynomially solvable by transforming it to a flow network problem.",
                "Our method for efficiently calculating an upper bound for STAP makes use of this special case by converting any given STAP instance P into a new problem P where each task only has one resource type.",
                "More specifically, for every task t ∈ T with utility u(t), we do the following.",
                "Let m be the number of resource types {r1, . . . , rm} required by t. We then split t into a set of m tasks T = {t1, . . . , tm} where each task ti only has one unique resource type (of {r1, . . . , rm}) and each task has a fair share of the utility, i.e., the efficiency of t from Definition 5 times the amount of this resource type rsc(ti, ri).",
                "After polynomially performing this conversion for every task in T , the original problem P becomes the special case P .",
                "Note that the set of valid allocations in P is only a subset of the set of valid allocations in P , because it is now possible to partially allocate a task.",
                "From this it is easy to see that the solution of P gives an upper bound of the solution of the original problem P. To compute the optimal solution for P , we transform it to a minimum cost flow problem.",
                "We model the cost in the flow network by the negation of the new tasks utility.",
                "A polynomial-time implementation of a scaling minimum cost flow algorithm [9] is used for the computation.",
                "The resulting minimum cost flow represents a maximum allocation of the tasks for P .",
                "The detailed modeling is described in Algorithm 3.",
                "In the next section, we use this upper bound to estimate the quality of the GDAP for large-scale instances. 5.",
                "EXPERIMENTS We implemented the greedy distributed allocation protocol (GDAP), the optimal allocation algorithm (OPT), and the upper bound algorithm (UB) in Java, and tested them on a Linux PC.",
                "The purpose of these experiments is to study the performance of the distributed algorithm in different problem settings using different social networks.",
                "The perThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 2: The solution qualities of the GDAP and the upper bound depend on the resource ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 Numberofagents Degree small-world random scale-free Figure 3: The histogram of the degrees. formance measurements are the solution quality and computation time, where the solution quality (SQ) is computed as follows.",
                "When the number of tasks is small, we compare the output of the distributed algorithm with the optimal solution, i.e., SQ = GDAP OP T , but if it is not feasible to compute the optimal solution, we use the value returned by the upper bound algorithm for evaluation, i.e., SQ = GDAP UB .",
                "To see whether the latter is a good measure, we also compare the quality of the upper bound to the optimal solution for smaller problems.",
                "In the following, we describe the setup of all experiments, and present the results. 5.1 Experimental settings We consider several experimental environments.",
                "In all environments the agents are connected by a social network.",
                "In the experiments, three different networks are used to simulate the social relationships among agents in potential realworld problems.",
                "Small-world networks are networks where most neighbors of an agent are also connected to each other.",
                "For the experiments we use a method for generating random small-world networks proposed by Watts et al. [22], with a fixed rewiring probability p = 0.05.",
                "Scale-free networks have the property that a couple of nodes have many connections, and many nodes have only a small number of connections.",
                "To generate these we use the implementation in the JUNG library of the generator proposed by Barab´asi and Albert [3].",
                "We also generate random networks as follows.",
                "First we connect each agent to another agent such that all agents are connected.",
                "Next, we randomly add connections until the desired average degree has been reached.",
                "We now describe the different settings used in our experiments with both small and large-scale problems.",
                "Setting 1.",
                "The number of agents is 40, and the number of tasks is 20.",
                "The number of different resource types is bounded by 5, and the average number of resources required by a task is 30.",
                "Consequently, the total number of resources required by the tasks is fixed.",
                "However, the resources available to the agents are varied.",
                "We define the resource ratio to refer to the ratio between the total number of available resources and the total number of required resources.",
                "Resources are allocated uniformly to the agents.",
                "The average degrees of the networks may also change.",
                "In this setting the task benefits are distributed normally around the number of resources required.",
                "Setting 2.",
                "This setting is similar to Setting 1, but here we let the benefits of the tasks vary dramatically-40% of the tasks have around 10 times higher benefit than the other 60% of the tasks.",
                "Setting 3.",
                "This setting is for large-scale problems.",
                "The ratio between the number of agents and the number of tasks is set to 5/3, and the number of agents varies from 100 to 2000.",
                "We also fix the resource ratio to 1.2 and the average degree to 6.",
                "The number of different resource types is 20, and the average resource requirement of a tasks is 100.",
                "The task benefits are again normally distributed. 5.2 Experimental results The experiments are done with the three different settings in the three different networks mentioned before, where each recorded data is the average over 20 random instances. 5.2.1 Experiment 1 Experimental setting 1 is used for this set of experiments.",
                "We would like to see how the GDAP behaves in the different networks when the number of resources available to the agents is changing.",
                "We also study the behavior of our upper bound algorithm.",
                "For this experiment we fix the average number of neighbors (degree) in each network type to six.",
                "In Figure 2 we see how the quality of both the upper bound and the GDAP algorithm depends on the resource ratio.",
                "Remarkably, for lower resource ratios our GDAP is much closer to the optimal allocation than the upper bound.",
                "When the resource ratio grows above 1.5, the graphs of the upper bound and the GDAP converge, meaning that both are really close to the optimal solution.",
                "This can be explained by the fact that when plenty of resources are available, all tasks can be allocated without any conflicts.",
                "However, when resources are very scarce, the upper bound is much too optimistic, because it is based on the allocation of sub-tasks per resource type, and does not reason about how many of the tasks can actually be allocated completely.",
                "We also notice from the graph that the solution quality of the GDAP on all three networks is quite high (over 0.8) when the available resource is very limited (0.3).",
                "It drops below 0.8 with the increased ratio and goes up again once there are plenty of resources available (resource ratio 0.9).",
                "Clearly, if 504 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 4: The quality of the GDAP and the upper bound depend on the network degree. resources are really scarce, only a few tasks can be successfully allocated even by the optimal algorithm.",
                "Therefore, the GDAP is able to give quite a good allocation.",
                "Although the differences are minor, it can also be seen that the results for the small-world network are consistently slightly better than those of random networks, which in turn outperform scale-free networks.",
                "This can be understood by looking at the distribution of the agents degree, as shown in Figure 3.",
                "In this experiment, in the small-world network almost every manager has a degree of six.",
                "In random networks, the degree varies between one and about ten.",
                "However, in the scale-free network, most nodes have only three or four connections, and only a very few have up to twenty connections.",
                "As we will see in the next experiment, having more connections means getting better results.",
                "For the next experiment we fix the resource ratio to 1.0 and study the quality of both the upper bound and the GDAP algorithm related to the degree of the social network.",
                "The result can be found in Figure 4.",
                "In this figure we can see that a high average degree also leads to convergence of the upper bound and the GDAP.",
                "Obviously, when managers have many connections, it becomes easier to allocate tasks.",
                "An exception is, similar to what we have seen in Figure 2, that the solution of the GDAP is also very good if the connections are extremely limited (degree 2), due to the fact that the number of possibly allocated tasks is very small.",
                "Again we see that the upper bound is not that good for problems where resources are hard to reach, i.e. in social networks with a low average degree.2 Since the solution quality clearly depends on the resource ratio as well as on the degree of the social network, we study the effect of changing both, to see whether they influence each other.",
                "Figure 5 shows how the solution quality depends on both the resource ratio and the network degree.",
                "This graph confirms the results that the GDAP performs better for problems with higher degree and higher resource ratio.",
                "However, it is now also more clear that it performs better for very low degree and resource availability.",
                "For this experiment with 40 agents and 20 tasks, the worst performance is met for instances with degree six and resource ratio 0.6 to instances with degree twelve and resource ratio 0.3.",
                "But even for those instances, the performance lies above 0.7. 2 The consistent standard deviation of about 15% over the 20 problem instances is not displayed as error-bars in these first graphs, because it would obfuscate the interesting correlations that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Relative reward small-world Average degree Resource ratio Relative reward Figure 5: The quality of the GDAP depends on both the resource ratio and the network degree. 5.2.2 Experiment 2 To study the robustness of the GDAP against different problem settings, we generate instances where the task benefit distribution is different: 40% of the tasks gets a 10 times higher benefit (as described in Setting 2).",
                "The effect of this different distribution can be seen in Figure 6.",
                "These two graphs show that the results for the skewed task benefit distribution are slightly better on average, both when varying the resource ratio, and when varying the average degree of the network.",
                "We argue that this can be explained by the greedy nature of GDAP, which causes the tasks with high efficiency to be allocated first, and makes the algorithm perform better in this heterogeneous setting. 5.2.3 Experiment 3 The purpose of this final experiment is to test whether the algorithm can be scaled to large problems, like applications running on the internet.",
                "We therefore generate instances where the number of agents varies from 100 to 2000, and simultaneously increase the number of tasks from 166 to 3333 (Setting 3).",
                "Figure 7 shows the run time for these instances on a Linux machine with an AMD Opteron 2.4 GHz processor.",
                "These graphs confirm the theoretical analysis from the previous section, saying that both the upper bound and the GDAP are polynomial.",
                "In fact, the graphs show that the GDAP almost behaves linearly.",
                "Here we see that the locality of the GDAP really helps in reducing the computation time.",
                "Also note that the GDAP requires even less computation time than the upper bound.",
                "The quality of the GDAP for these large instances cannot be compared to the optimal solution.",
                "Therefore, in Figure 8 the upper bound is used instead.",
                "This result shows that the GDAP behaves stably and consistently well with the increasing problem size.",
                "It also shows once more that the GDAP performs better in a small-world network. 6.",
                "RELATED WORK Task allocation in <br>multiagent system</br>s has been investigated by many researchers in recent years with different assumptions and emphases.",
                "However, most of the research to date on task allocation does not consider social connections among agents, and studies the problem in a centralized The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free Figure 6: The quality of the GDAP algorithm for a uniform and a skewed task benefit distribution related to the resource ratio (the first graph), and the network degree (the second graph). setting.",
                "For example, Kraus et al. [12] develop an auction protocol that enables agents to form coalitions with time constraints.",
                "It assumes each agent knows the capabilities of all others.",
                "The proposed protocol is centralized, where one manager is responsible for allocating the tasks to all coalitions.",
                "Manisterski at al. [14] discuss the possibilities of achieving efficient allocations in both cooperative and noncooperative settings.",
                "They propose a centralized algorithm to find the optimal solution.",
                "In contrast to this work, we introduce also an efficient completely distributed protocol that takes the social network into account.",
                "Task allocation has also been studied in distributed settings by for example Shehory and Kraus [18] and by Lerman and Shehory [13].",
                "They propose distributed algorithms with low communication complexity for forming coalitions in large-scale <br>multiagent system</br>s.",
                "However, they do not assume the existence of any agent network.",
                "The work of Sander et al. [16] introduces computational geometry-based algorithms for distributed task allocation in geographical domains.",
                "Agents are then allowed to move and actively search for tasks, and the capability of agents to perform tasks is homogeneous.",
                "In order to apply their approach, agents need to have some knowledge about the geographical positions of tasks and some other agents.",
                "Other work [17] proposes a location mechanism for open <br>multiagent system</br>s to allocate tasks to unknown agents.",
                "In this approach each agent caches a list of agents they know.",
                "The analysis of the communication complexity of this method is based on lattice-like graphs, while we investigate how to efficiently solve task allocation in a social network, whose topology can be arbitrary.",
                "Networks have been employed in the context of task allocation in some other works as well, for example to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time(ms) Agents upper bound - small-world upper bound - random upper bound - scale-free GDAP - small-world GDAP - random GDAP - scale-free Figure 7: The run time of the GDAP algorithm. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Rewardrelativetoupperbound Agents small-world random scale-free Figure 8: The quality of the GDAP algorithm compared to the upper bound. interactions between agents and mediators [1].",
                "Mediators in this context are agents who receive the task and have connections to other agents.",
                "They break up the task into subtasks, and negotiate with other agents to obtain commitments to execute these subtasks.",
                "Their focus is on modeling the decision process of just a single mediator.",
                "Another approach is to partition the network into cliques of nodes, representing coalitions which the agents involved may use as a coordination mechanism [20].",
                "The focus of that work is distributed coalition formation among agents, but in our approach, we do not need agents to form groups before allocating tasks.",
                "Easwaran and Pitt [6] study complex tasks that require services for their accomplishment.",
                "The problem concerns the allocation of subtasks to service providers in a supply chain.",
                "Another study of task allocation in supply chains is [21], where it is argued that the defining characteristic of Supply Chain Formation is hierarchical subtask decomposition (HSD).",
                "HSD is implemented using task dependency networks (TDN), with agents and goods as nodes, and I/O relations between them as edges.",
                "Here, the network is given, and the problem is to select a subgraph, for which the authors propose a market-based algorithm, in particular, a series of auctions.",
                "Compared to these works, our approach is more general in the sense that we are able to model different types of connections or constraints among agents for different problem domains in addition to supply chain formation.",
                "Finally, social networks have been used in the context of team formation.",
                "Previous work has shown how to learn which relations are more beneficial in the long run [8], and adapt the social network accordingly.",
                "We believe these results can be transferred to the domain of task allocation as well, leaving this as a topic for further study. 506 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 7.",
                "CONCLUSIONS In this paper we studied the task allocation problem in a social network (STAP), which can be seen as a new, more general, variant of the TAP.",
                "We believe it has a great amount of potential for realistic problems.",
                "We provided complexity results on computing the efficient solution for the STAP, as well as a bound on possible approximation algorithms.",
                "Next, we presented a distributed protocol, related to the contractnet protocol.",
                "We also introduced an exponential algorithm to compute the optimal solution, as well as a fast upperbound algorithm.",
                "Finally, we used the optimal solution and the upper-bound (for larger instances) to conduct an extensive set of experiments to assess the solution quality and the computational efficiency of the proposed distributed algorithm in different types of networks, namely, small-world networks, random networks, and scale-free networks.",
                "The results presented in this paper show that the distributed algorithm performs well in small-world, scale-free, and random networks, and for many different settings.",
                "Also other experiments were done (e.g. on grid networks) and these results held up over a wider range of scenarios.",
                "Furthermore, we showed that it scales well to large networks, both in terms of quality and of required computation time.",
                "The results also suggest that small-world networks are slightly better suited for local task allocation, because there are no nodes with very few neighbors.",
                "There are many interesting extensions to our current work.",
                "In this paper, we focus on the computational aspect in the design of the distributed algorithm.",
                "In our future work, we would also like to address some of the related issues in game theory, such as strategic agents, and show desirable properties of a distributed protocol in such a context.",
                "In the current algorithm we assume that agents can only contact their neighbors to request resources, which may explain why our algorithm performs not as good in the scalefree networks as in the small-world networks.",
                "Our future work may allow agents to reallocate (sub)tasks.",
                "We are interested in seeing how such interactions will affect the performance of task allocation in different social networks.",
                "A third interesting topic for further work is the addition of reputation information among the agents.",
                "This may help to model changing business relations and incentivize agents to follow the protocol.",
                "Finally, it would be interesting to study real-life instances of the social task allocation problem, and see how they relate to the randomly generated networks of different types studied in this paper.",
                "Acknowledgments.",
                "This work is supported by the Technology Foundation STW, applied science division of NWO, and the Ministry of Economic Affairs. 8.",
                "REFERENCES [1] S. Abdallah and V. Lesser.",
                "Modeling Task Allocation Using a Decision Theoretic Model.",
                "In Proc.",
                "AAMAS, pages 719-726.",
                "ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson, and D. Zuckerman.",
                "Derandomized Graph Products.",
                "Computational Complexity, 5(1):60-75, 1995. [3] A.-L. Barab´asi and R. Albert.",
                "Emergence of scaling in random networks.",
                "Science, 286(5439):509-512, 1999. [4] R. H. Coase.",
                "The Nature of the Firm.",
                "Economica NS, 4(16):386-405, 1937. [5] R. H. Coase.",
                "My Evolution as an Economist.",
                "In W. Breit and R. W. Spencer, editors, Lives of the Laureates, pages 227-249.",
                "MIT Press, 1995. [6] A. M. Easwaran and J. Pitt.",
                "Supply Chain Formation in Open, Market-Based Multi-Agent Systems.",
                "International J. of Computational Intelligence and Applications, 2(3):349-363, 2002. [7] I.",
                "Foster, N. R. Jennings, and C. Kesselman.",
                "Brain Meets Brawn: Why Grid and Agents Need Each Other.",
                "In Proc.",
                "AAMAS, pages 8-15, Washington, DC, USA, 2004.",
                "IEEE Computer Society. [8] M. E. Gaston and M. desJardins.",
                "Agent-organized networks for dynamic team formation.",
                "In Proc.",
                "AAMAS, pages 230-237, New York, NY, USA, 2005.",
                "ACM Press. [9] A. Goldberg.",
                "An Efficient Implementation of a Scaling Minimum-Cost Flow Algorithm.",
                "J. of Algorithms, 22:1-29, 1997. [10] R. Gulati.",
                "Does Familiarity Breed Trust?",
                "The Implications of Repeated Ties for Contractual Choice in Alliances.",
                "Academy of Management Journal, 38(1):85-112, 1995. [11] T. Klos and B. Nooteboom.",
                "Agent-based Computational Transaction Cost Economics.",
                "Economic Dynamics and Control, 25(3-4):503-526, 01. [12] S. Kraus, O. Shehory, and G. Taase.",
                "Coalition formation with uncertain heterogeneous information.",
                "In Proc.",
                "AAMAS, pages 1-8.",
                "ACM, 2003. [13] K. Lerman and O. Shehory.",
                "Coalition formation for large-scale electronic markets.",
                "In Proc.",
                "ICMAS, pages 167-174.",
                "IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus, and N. Jennings.",
                "Forming Efficient Agent Groups for Completing Complex Tasks.",
                "In Proc.",
                "AAMAS, pages 257-264.",
                "ACM, 2006. [15] J. Patel et al.",
                "Agent-Based Virtual Organizations for the Grid.",
                "Multi-Agent and Grid Systems, 1(4):237-249, 2005. [16] P. V. Sander, D. Peleshchuk, and B. J. Grosz.",
                "A scalable, distributed algorithm for efficient task allocation.",
                "In Proc.",
                "AAMAS, pages 1191-1198, New York, NY, USA, 2002.",
                "ACM Press. [17] O. Shehory.",
                "A scalable agent location mechanism.",
                "In Proc.",
                "ATAL, volume 1757 of LNCS, pages 162-172.",
                "Springer, 2000. [18] O. Shehory and S. Kraus.",
                "Methods for Task Allocation via Agent Coalition Formation.",
                "Artificial Intelligence, 101(1-2):165-200, 1998. [19] R. M. Sreenath and M. P. Singh.",
                "Agent-based service selection.",
                "Web Semantics, 1(3):261-279, 2004. [20] P. T. Toˇsi´c and G. A. Agha.",
                "Maximal Clique Based Distributed Coalition Formation for Task Allocation in Large-Scale Multi-Agent Systems.",
                "In Proc.",
                "MMAS, volume 3446 of LNAI, pages 104-120.",
                "Springer, 2005. [21] W. E. Walsh and M. P. Wellman.",
                "Modeling Supply Chain Formation in Multiagent Systems.",
                "In Proc.",
                "AMEC II, volume 1788 of LNAI, pages 94-101.",
                "Springer, 2000. [22] D. J. Watts and S. H. Strogatz.",
                "Collective dynamics of small world networks.",
                "Nature, 393:440-442, 1998.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 507"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Los investigadores han investigado la asignación de tareas de trabajo relacionadas en el \"sistema multiagente\" s en los últimos años con diferentes supuestos y énfasis.",
                "Proponen algoritmos distribuidos con baja complejidad de comunicación para formar coaliciones en el \"sistema multiagente\" a gran escala.",
                "Otro trabajo [17] propone un mecanismo de ubicación para los \"sistemas multiagentes\" abiertos para asignar tareas a agentes desconocidos."
            ],
            "translated_text": "",
            "candidates": [
                "sistema multiagente",
                "sistema multiagente",
                "sistema multiagente",
                "sistema multiagente",
                "sistema multiagente",
                "sistemas multiagentes"
            ],
            "error": []
        },
        "strategic agent": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Distributed Task Allocation in Social Networks Mathijs de Weerdt Delft Technical University Delft, The Netherlands M.M.deWeerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, The Netherlands Yingqian.Zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI) Amsterdam, The Netherlands tomas.klos@cwi.nl ABSTRACT This paper proposes a new variant of the task allocation problem, where the agents are connected in a social network and tasks arrive at the agents distributed over the network.",
                "We show that the complexity of this problem remains NPhard.",
                "Moreover, it is not approximable within some factor.",
                "We develop an algorithm based on the contract-net protocol.",
                "Our algorithm is completely distributed, and it assumes that agents have only local knowledge about tasks and resources.",
                "We conduct a set of experiments to evaluate the performance and scalability of the proposed algorithm in terms of solution quality and computation time.",
                "Three different types of networks, namely small-world, random and scale-free networks, are used to represent various social relationships among agents in realistic applications.",
                "The results demonstrate that our algorithm works well and that it scales well to large-scale applications.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Recent years have seen a lot of work on task and resource allocation methods, which can potentially be applied to many real-world applications.",
                "However, some interesting applications where relations between agents play a role require a slightly more general model.",
                "Such situations appear very frequently in real-world scenarios, and recent technological developments are bringing more of them within the range of task allocation methods.",
                "Especially in business applications, preferential partner selection and interaction is very common, and this aspect becomes more important for task allocation research, to the extent that technological developments need to be able to support it.",
                "For example, the development of semantic web and grid technologies leads to increased and renewed attention for the potential of the web to support business processes [7, 15].",
                "As an example, virtual organizations (VOs) are being re-invented in the context of the grid, where they are composed of a number of autonomous entities (representing different individuals, departments and organizations), each of which has a range of problem-solving capabilities and resources at its disposal [15, p. 237].",
                "The question is how VOs are to be dynamically composed and re-composed from individual agents, when different tasks and subtasks need to be performed.",
                "This would be done by allocating them to different agents who may each be capable of performing different subsets of those tasks.",
                "Similarly, supply chain formation (SCF) is concerned with the, possibly ad-hoc, allocation of services to providers in the supply chain, in such a way that overall profit is optimized [6, 21].",
                "Traditionally, such allocation decisions have been analyzed using transaction cost economics (TCE) [4], which takes the transaction between consecutive stages of development as its basic unit of analysis, and considers the firm and the market as alternative structural forms for organizing transactions. (Transaction cost) economics has traditionally built on analysis of comparative statics: the central problem of economic organization is considered to be the adaptation of organizational forms to the characteristics of transactions.",
                "More recently, TCEs founding father, Ronald Coase, acknowledged that this is too simplistic an approach [5, p. 245]: The analysis cannot be confined to what happens within a single firm. (. . . )",
                "What we are dealing with is a complex interrelated structure.",
                "In this paper, we study the problem of task allocation from the perspective of such a complex interrelated structure.",
                "In particular, the market cannot be considered as an organizational form without considering specific partners to interact with on the market [11].",
                "Specifically, therefore, we consider agents to be connected to each other in a social network.",
                "Furthermore, this network is not fully connected: as informed by the business literature, firms typically have established working relations with limited numbers of preferred partners [10]; these are the ones they consider when new tasks arrive and they have to form supply chains to allocate those tasks [19].",
                "Other than modeling the interrelated 500 978-81-904262-7-5 (RPS) c 2007 IFAAMAS structure between business partners, the social network introduced in this paper can also be used to represent other types of connections or constraints among autonomous entities that arise from other application domains.",
                "The next section gives a formal description of the task allocation problem on social networks.",
                "In Section 3, we prove that the complexity of this problem remains NP-hard.",
                "We then proceed to develop a distributed algorithm in Section 4, and perform a series of experiments with this algorithm, as described in Section 5.",
                "Section 6 discusses related work, and Section 7 concludes. 2.",
                "PROBLEM DESCRIPTION We formulate the social task allocation problem in this section.",
                "There is a set A of agents: A = {a1, . . . , am}.",
                "Agents need resources to complete tasks.",
                "Let R = {r1, . . . , rk} denote the collection of the resource types available to the agents A.",
                "Each agent a ∈ A controls a fixed amount of resources for each resource type in R, which is defined by a resource function: rsc : A × R → N. Moreover, we assume agents are connected by a social network.",
                "Definition 1 (Social network).",
                "An agent social network SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ∈ AE indicates the existence of a social connection between agents ai and aj.",
                "Suppose a set of tasks T = {t1, t2, . . . , tn} arrives at such an agent social network.",
                "Each task t ∈ T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the utility gained if task t is accomplished, and the resource function rsc : T ×R → N specifies the amount of resources required for the accomplishment of task t. Furthermore, a location function loc : T → A defines the locations (i.e., agents) at which the tasks arrive in the social network.",
                "An agent a that is the location of a task t, i.e. loc(t) = a, is called the manager of this task.",
                "Each task t ∈ T needs some specific resources from the agents in order to complete the task.",
                "The exact assignment of tasks to agents is defined by a task allocation.",
                "Definition 2 (Task allocation).",
                "Given a set of tasks T = {t1, . . . , tn} and a set of agents A = {a1, . . . , am} in a social network SN, a task allocation is a mapping φ : T × A × R → N. A valid task allocation in SN must satisfy the following constrains: • A task allocation must be correct.",
                "Each agent a ∈ A cannot use more than its available resources, i.e. for each r ∈ R, P t∈T φ(t, a, r) ≤ rsc(a, r). • A task allocation must be complete.",
                "For each task t ∈ T , either all allocated agents resources are sufficient, i.e. for each r ∈ R, P a∈A φ(t, a, r) ≥ rsc(t, r), or t is not allocated, i.e. φ(t, ·, ·) = 0. • A task allocation must obey the social relationships.",
                "Each task t ∈ T can only be allocated to agents that are (direct) neighbors of agent loc(t) in the social network SN.",
                "Each such agent that can contribute to a task is called a contractor.",
                "We write Tφ to represent the tasks that are fully allocated in φ.",
                "The utility of φ is then the summation of the utilities of each task in Tφ, i.e., Uφ = P t∈Tφ u(t).",
                "Using this notation, we define the efficient task allocation below.",
                "Definition 3 (Efficient task allocation).",
                "We say a task allocation φ is efficient if it is valid and Uφ is maximized, i.e., Uφ = max( P t∈Tφ u(t)).",
                "We are now ready to define the task allocation problem in social network that we study in this paper.",
                "Definition 4 (Social task allocation problem).",
                "Given a set of agents A connected by a social network SN = (A, AE), and a finite set of tasks T , the social task allocation problem (or STAP for short) is the problem of finding the efficient task allocation φ, such that φ is valid and the social welfare Uφ is maximized. 3.",
                "COMPLEXITY RESULTS The traditional task allocation problem, TAP (without the condition of the social network SN), is NP-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set.",
                "Although we may consider the TAP as a special case of the STAP by assuming agents are fully connected, we cannot directly use the complexity results from the TAP, since we study the STAP in an arbitrary social network, which, as we argued in the introduction, should be partially connected.",
                "We now show that the TAP with an arbitrary social network is also NP-complete, even when the utility of each task is 1, and the quantity of all required and available resources is 1.",
                "Theorem 1.",
                "Given the social task allocation problem with an arbitrary social network, as defined in Definition 4, the problem of deciding whether a task allocation φ with utility more than k exists is NP-complete.",
                "Proof.",
                "We first show that the problem is in NP.",
                "Given an instance of the problem and an integer k, we can verify in polynomial time whether an allocation φ is a valid allocation and whether the utility of φ is greater than k. We now prove that the STAP is NP-hard by showing that MAXIMUM INDEPENDENT SET ≤P STAP.",
                "Given an undirected graph G = (V, E) and an integer k, we construct a network G = (V , E ) which has an efficient task allocation with k tasks of utility 1 allocated if and only if G has an independent set (IS) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 Figure 1: The MIS problem can be reduced to the STAP.",
                "The left figure is an undirected graph G, which has the optimal solution {v1, v4} or {v2, v3}; the right figure is the constructed instance of the STAP, where the optimal allocation is {t1, t4} or {t2, t3}.",
                "An instance of the following construction is shown in Figure 1.",
                "For each node v ∈ V and each edge e ∈ E in the graph G, we create a vertex agent av and an edge agent ae in G .",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 501 When v was incident to e in G we correspondingly add an edge e in G between av and ae.",
                "We assign each agent in G one resource, which is related to the node or the edge in the graph G, i.e., for each v ∈ V , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ E, rsc(ae) = {e}.",
                "Each vertex agent avi in G has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ E}.",
                "There is no task on the edge agents in G .",
                "We define utility 1 for each task, and the quantity of all required and available resources to be 1.",
                "Taken an instance of the IS problem, suppose there is a solution of size k, i.e., a subset N ⊆ V such that no two vertices in N are joined by an edge in E and |N| = k. N specifies a set of vertex agents AN in the corresponding graph G .",
                "Given two agents a1, a2 ∈ AN we now know that there is no edge agent ae connected to both a1 and a2.",
                "Thus, for each agent a ∈ AN , a assigns its task to the edge agents which are connected to a.",
                "All other vertex agents a /∈ AN are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ AN .",
                "The set of tasks of the agents AN (|AN | = k) is thus the maximum set of tasks that can be allocated.",
                "The utility of this allocation is k. Similarly, if there is a solution for the STAP with the utility value k, and the allocated task set is N, then for the IS problem, there exists a maximum independent set N of size k in G. An example can be found in Figure 1.",
                "We just proved that the STAP is NP-hard for an arbitrary graph.",
                "In our proof, the complexity comes from the introduction of a social network.",
                "One may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant.",
                "We now give a complexity result on this class of networks as follows.",
                "Theorem 2.",
                "Let the number of neighbors of each agent in the social network SN be bounded by Δ for Δ ≥ 3.",
                "Computing the efficient task allocation given such a network is NP-complete.",
                "In addition, it is not approximable within Δε for some ε > 0.",
                "Proof.",
                "It has been shown in [2] that the maximum independent set problem in the case of the degree bounded by Δ for Δ ≥ 3 is NP-complete and is not approximable within Δε for some ε > 0.",
                "Using the similar reduction from the proof of Theorem 1, this result also holds for the STAP.",
                "Since our problem is as hard as MIS as shown in Theorem 1, it is not possible to give a worst case bound better than Δε for any polynomial time algorithm, unless P = NP. 4.",
                "ALGORITHMS To deal with the problem of allocating tasks in a social network, we present a distributed algorithm.",
                "We introduce this algorithm by describing the protocol for the agents.",
                "After that we give the optimal, centralized algorithm and an upper bound algorithm, which we use in Section 5 to benchmark the quality of our distributed algorithm. 4.1 Protocol for distributed task allocation We can summarize the description of the task allocation problem in social networks from Section 2 as follows.",
                "We Algorithm 1 Greedy distributed allocation protocol (GDAP).",
                "Each manager a calculates the efficiency e(t) for each of their tasks t ∈ Ta, and then while Ta = ∅: 1.",
                "Each manager a selects the most efficient task t ∈ Ta such that for each task t ∈ Ta: e(t ) ≤ e(t). 2.",
                "Each manager a requests help for t from all its neighbors (of a) by informing these neighbors of the efficiency e(t) and the required resources for t. 3.",
                "Contractors receive and store all requests, and then offer all relevant resources to the manager for the task with the highest efficiency. 4.",
                "The managers that have received sufficient offers allocate their tasks, and inform each contractor which part of the offer is accepted.",
                "When a task is allocated, or when a manager has received offers from all neighbors, but still cannot satisfy its task, the task is removed from the task list Ta. 5.",
                "Contractors update their used resources. have a (social) network of agents.",
                "Each agent has a set of resources of different types at its disposal.",
                "We also have a set of tasks.",
                "Each task requires some resources, has a fixed benefit, and is located at a certain agent.",
                "This agent is called a manager.",
                "We only allow neighboring agents to help with a task.",
                "These agents are called contractors.",
                "Agents can fulfill the role of manager as well as contractor.",
                "The problem is to find out which tasks to execute, and which resources of which contractors to use for these tasks.",
                "The idea of the protocol is as follows.",
                "All manager agents a ∈ A try to find neighboring contractors to help them with their task(s) Ta = {ti ∈ T | loc(ti) = a}.",
                "They start with offering the task that is most efficient in terms of the ratio between benefit and required resources.",
                "Out of all tasks offered, contractors select the task with the highest efficiency, and send a bid to the related manager.",
                "A bid consists of all the resources the agent is able to supply for this task.",
                "If sufficient resources have been offered, the manager selects the required resources and informs all contractors of its choice.",
                "The efficiency of a task is defined as follows: Definition 5.",
                "The efficiency e of a task t ∈ T is defined by the utility of this task divided by the sum of all required resources: e(t) = u(t)P r∈R rsc(t,r) .",
                "A more detailed description of this protocol can be found in Algorithm 1.",
                "Here it is also defined how to determine when a task should not be offered anymore, because it is impossible to fulfill locally.",
                "Obviously, a task is also not offered anymore when it has been allocated.",
                "This protocol is such that, when no two tasks have exactly the same efficiency, in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the algorithm follows.",
                "Proposition 1.",
                "For a STAP with n tasks and m agents, the run time of the distributed algorithm is O(nm), and the number of communication messages is O(n2 m). 1 Even when some tasks have the same efficiency, it is straightforward to make this result work.",
                "For example, the implementation can ensure that the contractors choose the task with the lowest task-id. 502 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 2 Optimal social task allocation (OPT).",
                "Repeat the following for each combination of tasks: 1.",
                "If the total reward for this combination is higher than any previous combination, test if this combination is feasible as follows: 2.",
                "Create a network flow problem for each resource type r ∈ R (separately) as follows: (a) Create a source s and a sink s . (b) For each agent a ∈ A create an agent node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has. (c) For each task t ∈ T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires. (d) For each agent a connect the agent node to all task nodes of neighboring tasks, i.e., t ∈ {t ∈ T | (a, loc(t)) ∈ AE}.",
                "Give this connection unlimited capacity. 3.",
                "Solve the maximum flow problem for the created flow networks.",
                "If the maximum flow in each network is equal to the total required resources of that type, the current combination of tasks is feasible.",
                "In that case, this is the current best combination of tasks.",
                "Proof.",
                "In the worst case, in each iteration exactly one task is removed from a task list, so there are n iterations.",
                "In each iteration in the worst case (i.e., a fully connected network), for each of the O(n) managers, O(m) messages are sent.",
                "Next the task with the highest efficiency can be selected by each contractor in O(n).",
                "Assigning an allocation can be done in O(m).",
                "This leads to a total of O(n + m) operations for each iteration, and thus O(n2 + nm) operations in total.",
                "The number of messages sent is O(n(nm + nm + nm)) = O(n2 m).",
                "We establish the quality of this protocol experimentally (in Section 5).",
                "Preferably, we compare the results to the optimal solution. 4.2 Optimal social task allocation The optimal task allocation algorithm should deal with the restrictions posed by the social network.",
                "For this NPcomplete problem we used an exponential brute-force algorithm to consider relevant combinations of tasks to execute.",
                "For each combination we use a maximum-flow algorithm to check whether the resources are sufficient for the selected subset of tasks.",
                "The flow network describes which resources can be used for which tasks, depending on the social network.",
                "If the maximum flow is equal to the sum of all resources required by the subset of tasks, we know that a feasible solution exists (see Algorithm 2).",
                "Clearly, we cannot expect this optimal algorithm to be able to find solutions for larger problem sizes.",
                "To establish the quality of our protocol for large instances, we use the following method to determine an upper bound. 4.3 Upper bound for social task allocation Given a social task allocation problem, if the number of resource types for every task t ∈ T is bounded by 1, the Algorithm 3 An upper bound for social task allocation (UB).",
                "Create a network flow problem with costs as follows: 1.",
                "Create a source s and a sink s . 2.",
                "For each agent a ∈ A and each resource type ri ∈ R, create an agent-resource node ai, and an edge from s to this node with capacity equal to the amount of resources of type r agent a has available and with costs 0. 3.",
                "For each task t ∈ T and each resource type ri ∈ R, create a task-resource node ti, and an edge from this node to s with capacity equal to the amount of resources of type r task t requires and costs −e(t). 4.",
                "For each resource type ri ∈ R and for each agent a connect the agent-resource node ai to all task-resource nodes ti for neighboring tasks t ∈ {t ∈ T | (a, loc(t)) ∈ AE or a = loc(t)}.",
                "Give this connection unlimited capacity and zero costs. 5.",
                "Create an edge directly from s to s with unlimited capacity and zero costs.",
                "Solve the minimum cost flow network problem for this network.",
                "The costs of the resulting network is an upper bound for the social task allocation problem. problem is polynomially solvable by transforming it to a flow network problem.",
                "Our method for efficiently calculating an upper bound for STAP makes use of this special case by converting any given STAP instance P into a new problem P where each task only has one resource type.",
                "More specifically, for every task t ∈ T with utility u(t), we do the following.",
                "Let m be the number of resource types {r1, . . . , rm} required by t. We then split t into a set of m tasks T = {t1, . . . , tm} where each task ti only has one unique resource type (of {r1, . . . , rm}) and each task has a fair share of the utility, i.e., the efficiency of t from Definition 5 times the amount of this resource type rsc(ti, ri).",
                "After polynomially performing this conversion for every task in T , the original problem P becomes the special case P .",
                "Note that the set of valid allocations in P is only a subset of the set of valid allocations in P , because it is now possible to partially allocate a task.",
                "From this it is easy to see that the solution of P gives an upper bound of the solution of the original problem P. To compute the optimal solution for P , we transform it to a minimum cost flow problem.",
                "We model the cost in the flow network by the negation of the new tasks utility.",
                "A polynomial-time implementation of a scaling minimum cost flow algorithm [9] is used for the computation.",
                "The resulting minimum cost flow represents a maximum allocation of the tasks for P .",
                "The detailed modeling is described in Algorithm 3.",
                "In the next section, we use this upper bound to estimate the quality of the GDAP for large-scale instances. 5.",
                "EXPERIMENTS We implemented the greedy distributed allocation protocol (GDAP), the optimal allocation algorithm (OPT), and the upper bound algorithm (UB) in Java, and tested them on a Linux PC.",
                "The purpose of these experiments is to study the performance of the distributed algorithm in different problem settings using different social networks.",
                "The perThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 2: The solution qualities of the GDAP and the upper bound depend on the resource ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 Numberofagents Degree small-world random scale-free Figure 3: The histogram of the degrees. formance measurements are the solution quality and computation time, where the solution quality (SQ) is computed as follows.",
                "When the number of tasks is small, we compare the output of the distributed algorithm with the optimal solution, i.e., SQ = GDAP OP T , but if it is not feasible to compute the optimal solution, we use the value returned by the upper bound algorithm for evaluation, i.e., SQ = GDAP UB .",
                "To see whether the latter is a good measure, we also compare the quality of the upper bound to the optimal solution for smaller problems.",
                "In the following, we describe the setup of all experiments, and present the results. 5.1 Experimental settings We consider several experimental environments.",
                "In all environments the agents are connected by a social network.",
                "In the experiments, three different networks are used to simulate the social relationships among agents in potential realworld problems.",
                "Small-world networks are networks where most neighbors of an agent are also connected to each other.",
                "For the experiments we use a method for generating random small-world networks proposed by Watts et al. [22], with a fixed rewiring probability p = 0.05.",
                "Scale-free networks have the property that a couple of nodes have many connections, and many nodes have only a small number of connections.",
                "To generate these we use the implementation in the JUNG library of the generator proposed by Barab´asi and Albert [3].",
                "We also generate random networks as follows.",
                "First we connect each agent to another agent such that all agents are connected.",
                "Next, we randomly add connections until the desired average degree has been reached.",
                "We now describe the different settings used in our experiments with both small and large-scale problems.",
                "Setting 1.",
                "The number of agents is 40, and the number of tasks is 20.",
                "The number of different resource types is bounded by 5, and the average number of resources required by a task is 30.",
                "Consequently, the total number of resources required by the tasks is fixed.",
                "However, the resources available to the agents are varied.",
                "We define the resource ratio to refer to the ratio between the total number of available resources and the total number of required resources.",
                "Resources are allocated uniformly to the agents.",
                "The average degrees of the networks may also change.",
                "In this setting the task benefits are distributed normally around the number of resources required.",
                "Setting 2.",
                "This setting is similar to Setting 1, but here we let the benefits of the tasks vary dramatically-40% of the tasks have around 10 times higher benefit than the other 60% of the tasks.",
                "Setting 3.",
                "This setting is for large-scale problems.",
                "The ratio between the number of agents and the number of tasks is set to 5/3, and the number of agents varies from 100 to 2000.",
                "We also fix the resource ratio to 1.2 and the average degree to 6.",
                "The number of different resource types is 20, and the average resource requirement of a tasks is 100.",
                "The task benefits are again normally distributed. 5.2 Experimental results The experiments are done with the three different settings in the three different networks mentioned before, where each recorded data is the average over 20 random instances. 5.2.1 Experiment 1 Experimental setting 1 is used for this set of experiments.",
                "We would like to see how the GDAP behaves in the different networks when the number of resources available to the agents is changing.",
                "We also study the behavior of our upper bound algorithm.",
                "For this experiment we fix the average number of neighbors (degree) in each network type to six.",
                "In Figure 2 we see how the quality of both the upper bound and the GDAP algorithm depends on the resource ratio.",
                "Remarkably, for lower resource ratios our GDAP is much closer to the optimal allocation than the upper bound.",
                "When the resource ratio grows above 1.5, the graphs of the upper bound and the GDAP converge, meaning that both are really close to the optimal solution.",
                "This can be explained by the fact that when plenty of resources are available, all tasks can be allocated without any conflicts.",
                "However, when resources are very scarce, the upper bound is much too optimistic, because it is based on the allocation of sub-tasks per resource type, and does not reason about how many of the tasks can actually be allocated completely.",
                "We also notice from the graph that the solution quality of the GDAP on all three networks is quite high (over 0.8) when the available resource is very limited (0.3).",
                "It drops below 0.8 with the increased ratio and goes up again once there are plenty of resources available (resource ratio 0.9).",
                "Clearly, if 504 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 4: The quality of the GDAP and the upper bound depend on the network degree. resources are really scarce, only a few tasks can be successfully allocated even by the optimal algorithm.",
                "Therefore, the GDAP is able to give quite a good allocation.",
                "Although the differences are minor, it can also be seen that the results for the small-world network are consistently slightly better than those of random networks, which in turn outperform scale-free networks.",
                "This can be understood by looking at the distribution of the agents degree, as shown in Figure 3.",
                "In this experiment, in the small-world network almost every manager has a degree of six.",
                "In random networks, the degree varies between one and about ten.",
                "However, in the scale-free network, most nodes have only three or four connections, and only a very few have up to twenty connections.",
                "As we will see in the next experiment, having more connections means getting better results.",
                "For the next experiment we fix the resource ratio to 1.0 and study the quality of both the upper bound and the GDAP algorithm related to the degree of the social network.",
                "The result can be found in Figure 4.",
                "In this figure we can see that a high average degree also leads to convergence of the upper bound and the GDAP.",
                "Obviously, when managers have many connections, it becomes easier to allocate tasks.",
                "An exception is, similar to what we have seen in Figure 2, that the solution of the GDAP is also very good if the connections are extremely limited (degree 2), due to the fact that the number of possibly allocated tasks is very small.",
                "Again we see that the upper bound is not that good for problems where resources are hard to reach, i.e. in social networks with a low average degree.2 Since the solution quality clearly depends on the resource ratio as well as on the degree of the social network, we study the effect of changing both, to see whether they influence each other.",
                "Figure 5 shows how the solution quality depends on both the resource ratio and the network degree.",
                "This graph confirms the results that the GDAP performs better for problems with higher degree and higher resource ratio.",
                "However, it is now also more clear that it performs better for very low degree and resource availability.",
                "For this experiment with 40 agents and 20 tasks, the worst performance is met for instances with degree six and resource ratio 0.6 to instances with degree twelve and resource ratio 0.3.",
                "But even for those instances, the performance lies above 0.7. 2 The consistent standard deviation of about 15% over the 20 problem instances is not displayed as error-bars in these first graphs, because it would obfuscate the interesting correlations that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Relative reward small-world Average degree Resource ratio Relative reward Figure 5: The quality of the GDAP depends on both the resource ratio and the network degree. 5.2.2 Experiment 2 To study the robustness of the GDAP against different problem settings, we generate instances where the task benefit distribution is different: 40% of the tasks gets a 10 times higher benefit (as described in Setting 2).",
                "The effect of this different distribution can be seen in Figure 6.",
                "These two graphs show that the results for the skewed task benefit distribution are slightly better on average, both when varying the resource ratio, and when varying the average degree of the network.",
                "We argue that this can be explained by the greedy nature of GDAP, which causes the tasks with high efficiency to be allocated first, and makes the algorithm perform better in this heterogeneous setting. 5.2.3 Experiment 3 The purpose of this final experiment is to test whether the algorithm can be scaled to large problems, like applications running on the internet.",
                "We therefore generate instances where the number of agents varies from 100 to 2000, and simultaneously increase the number of tasks from 166 to 3333 (Setting 3).",
                "Figure 7 shows the run time for these instances on a Linux machine with an AMD Opteron 2.4 GHz processor.",
                "These graphs confirm the theoretical analysis from the previous section, saying that both the upper bound and the GDAP are polynomial.",
                "In fact, the graphs show that the GDAP almost behaves linearly.",
                "Here we see that the locality of the GDAP really helps in reducing the computation time.",
                "Also note that the GDAP requires even less computation time than the upper bound.",
                "The quality of the GDAP for these large instances cannot be compared to the optimal solution.",
                "Therefore, in Figure 8 the upper bound is used instead.",
                "This result shows that the GDAP behaves stably and consistently well with the increasing problem size.",
                "It also shows once more that the GDAP performs better in a small-world network. 6.",
                "RELATED WORK Task allocation in multiagent systems has been investigated by many researchers in recent years with different assumptions and emphases.",
                "However, most of the research to date on task allocation does not consider social connections among agents, and studies the problem in a centralized The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free Figure 6: The quality of the GDAP algorithm for a uniform and a skewed task benefit distribution related to the resource ratio (the first graph), and the network degree (the second graph). setting.",
                "For example, Kraus et al. [12] develop an auction protocol that enables agents to form coalitions with time constraints.",
                "It assumes each agent knows the capabilities of all others.",
                "The proposed protocol is centralized, where one manager is responsible for allocating the tasks to all coalitions.",
                "Manisterski at al. [14] discuss the possibilities of achieving efficient allocations in both cooperative and noncooperative settings.",
                "They propose a centralized algorithm to find the optimal solution.",
                "In contrast to this work, we introduce also an efficient completely distributed protocol that takes the social network into account.",
                "Task allocation has also been studied in distributed settings by for example Shehory and Kraus [18] and by Lerman and Shehory [13].",
                "They propose distributed algorithms with low communication complexity for forming coalitions in large-scale multiagent systems.",
                "However, they do not assume the existence of any agent network.",
                "The work of Sander et al. [16] introduces computational geometry-based algorithms for distributed task allocation in geographical domains.",
                "Agents are then allowed to move and actively search for tasks, and the capability of agents to perform tasks is homogeneous.",
                "In order to apply their approach, agents need to have some knowledge about the geographical positions of tasks and some other agents.",
                "Other work [17] proposes a location mechanism for open multiagent systems to allocate tasks to unknown agents.",
                "In this approach each agent caches a list of agents they know.",
                "The analysis of the communication complexity of this method is based on lattice-like graphs, while we investigate how to efficiently solve task allocation in a social network, whose topology can be arbitrary.",
                "Networks have been employed in the context of task allocation in some other works as well, for example to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time(ms) Agents upper bound - small-world upper bound - random upper bound - scale-free GDAP - small-world GDAP - random GDAP - scale-free Figure 7: The run time of the GDAP algorithm. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Rewardrelativetoupperbound Agents small-world random scale-free Figure 8: The quality of the GDAP algorithm compared to the upper bound. interactions between agents and mediators [1].",
                "Mediators in this context are agents who receive the task and have connections to other agents.",
                "They break up the task into subtasks, and negotiate with other agents to obtain commitments to execute these subtasks.",
                "Their focus is on modeling the decision process of just a single mediator.",
                "Another approach is to partition the network into cliques of nodes, representing coalitions which the agents involved may use as a coordination mechanism [20].",
                "The focus of that work is distributed coalition formation among agents, but in our approach, we do not need agents to form groups before allocating tasks.",
                "Easwaran and Pitt [6] study complex tasks that require services for their accomplishment.",
                "The problem concerns the allocation of subtasks to service providers in a supply chain.",
                "Another study of task allocation in supply chains is [21], where it is argued that the defining characteristic of Supply Chain Formation is hierarchical subtask decomposition (HSD).",
                "HSD is implemented using task dependency networks (TDN), with agents and goods as nodes, and I/O relations between them as edges.",
                "Here, the network is given, and the problem is to select a subgraph, for which the authors propose a market-based algorithm, in particular, a series of auctions.",
                "Compared to these works, our approach is more general in the sense that we are able to model different types of connections or constraints among agents for different problem domains in addition to supply chain formation.",
                "Finally, social networks have been used in the context of team formation.",
                "Previous work has shown how to learn which relations are more beneficial in the long run [8], and adapt the social network accordingly.",
                "We believe these results can be transferred to the domain of task allocation as well, leaving this as a topic for further study. 506 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 7.",
                "CONCLUSIONS In this paper we studied the task allocation problem in a social network (STAP), which can be seen as a new, more general, variant of the TAP.",
                "We believe it has a great amount of potential for realistic problems.",
                "We provided complexity results on computing the efficient solution for the STAP, as well as a bound on possible approximation algorithms.",
                "Next, we presented a distributed protocol, related to the contractnet protocol.",
                "We also introduced an exponential algorithm to compute the optimal solution, as well as a fast upperbound algorithm.",
                "Finally, we used the optimal solution and the upper-bound (for larger instances) to conduct an extensive set of experiments to assess the solution quality and the computational efficiency of the proposed distributed algorithm in different types of networks, namely, small-world networks, random networks, and scale-free networks.",
                "The results presented in this paper show that the distributed algorithm performs well in small-world, scale-free, and random networks, and for many different settings.",
                "Also other experiments were done (e.g. on grid networks) and these results held up over a wider range of scenarios.",
                "Furthermore, we showed that it scales well to large networks, both in terms of quality and of required computation time.",
                "The results also suggest that small-world networks are slightly better suited for local task allocation, because there are no nodes with very few neighbors.",
                "There are many interesting extensions to our current work.",
                "In this paper, we focus on the computational aspect in the design of the distributed algorithm.",
                "In our future work, we would also like to address some of the related issues in game theory, such as <br>strategic agent</br>s, and show desirable properties of a distributed protocol in such a context.",
                "In the current algorithm we assume that agents can only contact their neighbors to request resources, which may explain why our algorithm performs not as good in the scalefree networks as in the small-world networks.",
                "Our future work may allow agents to reallocate (sub)tasks.",
                "We are interested in seeing how such interactions will affect the performance of task allocation in different social networks.",
                "A third interesting topic for further work is the addition of reputation information among the agents.",
                "This may help to model changing business relations and incentivize agents to follow the protocol.",
                "Finally, it would be interesting to study real-life instances of the social task allocation problem, and see how they relate to the randomly generated networks of different types studied in this paper.",
                "Acknowledgments.",
                "This work is supported by the Technology Foundation STW, applied science division of NWO, and the Ministry of Economic Affairs. 8.",
                "REFERENCES [1] S. Abdallah and V. Lesser.",
                "Modeling Task Allocation Using a Decision Theoretic Model.",
                "In Proc.",
                "AAMAS, pages 719-726.",
                "ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson, and D. Zuckerman.",
                "Derandomized Graph Products.",
                "Computational Complexity, 5(1):60-75, 1995. [3] A.-L. Barab´asi and R. Albert.",
                "Emergence of scaling in random networks.",
                "Science, 286(5439):509-512, 1999. [4] R. H. Coase.",
                "The Nature of the Firm.",
                "Economica NS, 4(16):386-405, 1937. [5] R. H. Coase.",
                "My Evolution as an Economist.",
                "In W. Breit and R. W. Spencer, editors, Lives of the Laureates, pages 227-249.",
                "MIT Press, 1995. [6] A. M. Easwaran and J. Pitt.",
                "Supply Chain Formation in Open, Market-Based Multi-Agent Systems.",
                "International J. of Computational Intelligence and Applications, 2(3):349-363, 2002. [7] I.",
                "Foster, N. R. Jennings, and C. Kesselman.",
                "Brain Meets Brawn: Why Grid and Agents Need Each Other.",
                "In Proc.",
                "AAMAS, pages 8-15, Washington, DC, USA, 2004.",
                "IEEE Computer Society. [8] M. E. Gaston and M. desJardins.",
                "Agent-organized networks for dynamic team formation.",
                "In Proc.",
                "AAMAS, pages 230-237, New York, NY, USA, 2005.",
                "ACM Press. [9] A. Goldberg.",
                "An Efficient Implementation of a Scaling Minimum-Cost Flow Algorithm.",
                "J. of Algorithms, 22:1-29, 1997. [10] R. Gulati.",
                "Does Familiarity Breed Trust?",
                "The Implications of Repeated Ties for Contractual Choice in Alliances.",
                "Academy of Management Journal, 38(1):85-112, 1995. [11] T. Klos and B. Nooteboom.",
                "Agent-based Computational Transaction Cost Economics.",
                "Economic Dynamics and Control, 25(3-4):503-526, 01. [12] S. Kraus, O. Shehory, and G. Taase.",
                "Coalition formation with uncertain heterogeneous information.",
                "In Proc.",
                "AAMAS, pages 1-8.",
                "ACM, 2003. [13] K. Lerman and O. Shehory.",
                "Coalition formation for large-scale electronic markets.",
                "In Proc.",
                "ICMAS, pages 167-174.",
                "IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus, and N. Jennings.",
                "Forming Efficient Agent Groups for Completing Complex Tasks.",
                "In Proc.",
                "AAMAS, pages 257-264.",
                "ACM, 2006. [15] J. Patel et al.",
                "Agent-Based Virtual Organizations for the Grid.",
                "Multi-Agent and Grid Systems, 1(4):237-249, 2005. [16] P. V. Sander, D. Peleshchuk, and B. J. Grosz.",
                "A scalable, distributed algorithm for efficient task allocation.",
                "In Proc.",
                "AAMAS, pages 1191-1198, New York, NY, USA, 2002.",
                "ACM Press. [17] O. Shehory.",
                "A scalable agent location mechanism.",
                "In Proc.",
                "ATAL, volume 1757 of LNCS, pages 162-172.",
                "Springer, 2000. [18] O. Shehory and S. Kraus.",
                "Methods for Task Allocation via Agent Coalition Formation.",
                "Artificial Intelligence, 101(1-2):165-200, 1998. [19] R. M. Sreenath and M. P. Singh.",
                "Agent-based service selection.",
                "Web Semantics, 1(3):261-279, 2004. [20] P. T. Toˇsi´c and G. A. Agha.",
                "Maximal Clique Based Distributed Coalition Formation for Task Allocation in Large-Scale Multi-Agent Systems.",
                "In Proc.",
                "MMAS, volume 3446 of LNAI, pages 104-120.",
                "Springer, 2005. [21] W. E. Walsh and M. P. Wellman.",
                "Modeling Supply Chain Formation in Multiagent Systems.",
                "In Proc.",
                "AMEC II, volume 1788 of LNAI, pages 94-101.",
                "Springer, 2000. [22] D. J. Watts and S. H. Strogatz.",
                "Collective dynamics of small world networks.",
                "Nature, 393:440-442, 1998.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 507"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "En nuestro trabajo futuro, también nos gustaría abordar algunos de los temas relacionados en la teoría de juegos, como los \"agentes estratégicos\", y mostrar propiedades deseables de un protocolo distribuido en tal contexto."
            ],
            "translated_text": "",
            "candidates": [
                "agente estratégico",
                "agentes estratégicos"
            ],
            "error": []
        },
        "interaction": {
            "translated_key": "interacción",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Distributed Task Allocation in Social Networks Mathijs de Weerdt Delft Technical University Delft, The Netherlands M.M.deWeerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, The Netherlands Yingqian.Zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI) Amsterdam, The Netherlands tomas.klos@cwi.nl ABSTRACT This paper proposes a new variant of the task allocation problem, where the agents are connected in a social network and tasks arrive at the agents distributed over the network.",
                "We show that the complexity of this problem remains NPhard.",
                "Moreover, it is not approximable within some factor.",
                "We develop an algorithm based on the contract-net protocol.",
                "Our algorithm is completely distributed, and it assumes that agents have only local knowledge about tasks and resources.",
                "We conduct a set of experiments to evaluate the performance and scalability of the proposed algorithm in terms of solution quality and computation time.",
                "Three different types of networks, namely small-world, random and scale-free networks, are used to represent various social relationships among agents in realistic applications.",
                "The results demonstrate that our algorithm works well and that it scales well to large-scale applications.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Recent years have seen a lot of work on task and resource allocation methods, which can potentially be applied to many real-world applications.",
                "However, some interesting applications where relations between agents play a role require a slightly more general model.",
                "Such situations appear very frequently in real-world scenarios, and recent technological developments are bringing more of them within the range of task allocation methods.",
                "Especially in business applications, preferential partner selection and <br>interaction</br> is very common, and this aspect becomes more important for task allocation research, to the extent that technological developments need to be able to support it.",
                "For example, the development of semantic web and grid technologies leads to increased and renewed attention for the potential of the web to support business processes [7, 15].",
                "As an example, virtual organizations (VOs) are being re-invented in the context of the grid, where they are composed of a number of autonomous entities (representing different individuals, departments and organizations), each of which has a range of problem-solving capabilities and resources at its disposal [15, p. 237].",
                "The question is how VOs are to be dynamically composed and re-composed from individual agents, when different tasks and subtasks need to be performed.",
                "This would be done by allocating them to different agents who may each be capable of performing different subsets of those tasks.",
                "Similarly, supply chain formation (SCF) is concerned with the, possibly ad-hoc, allocation of services to providers in the supply chain, in such a way that overall profit is optimized [6, 21].",
                "Traditionally, such allocation decisions have been analyzed using transaction cost economics (TCE) [4], which takes the transaction between consecutive stages of development as its basic unit of analysis, and considers the firm and the market as alternative structural forms for organizing transactions. (Transaction cost) economics has traditionally built on analysis of comparative statics: the central problem of economic organization is considered to be the adaptation of organizational forms to the characteristics of transactions.",
                "More recently, TCEs founding father, Ronald Coase, acknowledged that this is too simplistic an approach [5, p. 245]: The analysis cannot be confined to what happens within a single firm. (. . . )",
                "What we are dealing with is a complex interrelated structure.",
                "In this paper, we study the problem of task allocation from the perspective of such a complex interrelated structure.",
                "In particular, the market cannot be considered as an organizational form without considering specific partners to interact with on the market [11].",
                "Specifically, therefore, we consider agents to be connected to each other in a social network.",
                "Furthermore, this network is not fully connected: as informed by the business literature, firms typically have established working relations with limited numbers of preferred partners [10]; these are the ones they consider when new tasks arrive and they have to form supply chains to allocate those tasks [19].",
                "Other than modeling the interrelated 500 978-81-904262-7-5 (RPS) c 2007 IFAAMAS structure between business partners, the social network introduced in this paper can also be used to represent other types of connections or constraints among autonomous entities that arise from other application domains.",
                "The next section gives a formal description of the task allocation problem on social networks.",
                "In Section 3, we prove that the complexity of this problem remains NP-hard.",
                "We then proceed to develop a distributed algorithm in Section 4, and perform a series of experiments with this algorithm, as described in Section 5.",
                "Section 6 discusses related work, and Section 7 concludes. 2.",
                "PROBLEM DESCRIPTION We formulate the social task allocation problem in this section.",
                "There is a set A of agents: A = {a1, . . . , am}.",
                "Agents need resources to complete tasks.",
                "Let R = {r1, . . . , rk} denote the collection of the resource types available to the agents A.",
                "Each agent a ∈ A controls a fixed amount of resources for each resource type in R, which is defined by a resource function: rsc : A × R → N. Moreover, we assume agents are connected by a social network.",
                "Definition 1 (Social network).",
                "An agent social network SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ∈ AE indicates the existence of a social connection between agents ai and aj.",
                "Suppose a set of tasks T = {t1, t2, . . . , tn} arrives at such an agent social network.",
                "Each task t ∈ T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the utility gained if task t is accomplished, and the resource function rsc : T ×R → N specifies the amount of resources required for the accomplishment of task t. Furthermore, a location function loc : T → A defines the locations (i.e., agents) at which the tasks arrive in the social network.",
                "An agent a that is the location of a task t, i.e. loc(t) = a, is called the manager of this task.",
                "Each task t ∈ T needs some specific resources from the agents in order to complete the task.",
                "The exact assignment of tasks to agents is defined by a task allocation.",
                "Definition 2 (Task allocation).",
                "Given a set of tasks T = {t1, . . . , tn} and a set of agents A = {a1, . . . , am} in a social network SN, a task allocation is a mapping φ : T × A × R → N. A valid task allocation in SN must satisfy the following constrains: • A task allocation must be correct.",
                "Each agent a ∈ A cannot use more than its available resources, i.e. for each r ∈ R, P t∈T φ(t, a, r) ≤ rsc(a, r). • A task allocation must be complete.",
                "For each task t ∈ T , either all allocated agents resources are sufficient, i.e. for each r ∈ R, P a∈A φ(t, a, r) ≥ rsc(t, r), or t is not allocated, i.e. φ(t, ·, ·) = 0. • A task allocation must obey the social relationships.",
                "Each task t ∈ T can only be allocated to agents that are (direct) neighbors of agent loc(t) in the social network SN.",
                "Each such agent that can contribute to a task is called a contractor.",
                "We write Tφ to represent the tasks that are fully allocated in φ.",
                "The utility of φ is then the summation of the utilities of each task in Tφ, i.e., Uφ = P t∈Tφ u(t).",
                "Using this notation, we define the efficient task allocation below.",
                "Definition 3 (Efficient task allocation).",
                "We say a task allocation φ is efficient if it is valid and Uφ is maximized, i.e., Uφ = max( P t∈Tφ u(t)).",
                "We are now ready to define the task allocation problem in social network that we study in this paper.",
                "Definition 4 (Social task allocation problem).",
                "Given a set of agents A connected by a social network SN = (A, AE), and a finite set of tasks T , the social task allocation problem (or STAP for short) is the problem of finding the efficient task allocation φ, such that φ is valid and the social welfare Uφ is maximized. 3.",
                "COMPLEXITY RESULTS The traditional task allocation problem, TAP (without the condition of the social network SN), is NP-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set.",
                "Although we may consider the TAP as a special case of the STAP by assuming agents are fully connected, we cannot directly use the complexity results from the TAP, since we study the STAP in an arbitrary social network, which, as we argued in the introduction, should be partially connected.",
                "We now show that the TAP with an arbitrary social network is also NP-complete, even when the utility of each task is 1, and the quantity of all required and available resources is 1.",
                "Theorem 1.",
                "Given the social task allocation problem with an arbitrary social network, as defined in Definition 4, the problem of deciding whether a task allocation φ with utility more than k exists is NP-complete.",
                "Proof.",
                "We first show that the problem is in NP.",
                "Given an instance of the problem and an integer k, we can verify in polynomial time whether an allocation φ is a valid allocation and whether the utility of φ is greater than k. We now prove that the STAP is NP-hard by showing that MAXIMUM INDEPENDENT SET ≤P STAP.",
                "Given an undirected graph G = (V, E) and an integer k, we construct a network G = (V , E ) which has an efficient task allocation with k tasks of utility 1 allocated if and only if G has an independent set (IS) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 Figure 1: The MIS problem can be reduced to the STAP.",
                "The left figure is an undirected graph G, which has the optimal solution {v1, v4} or {v2, v3}; the right figure is the constructed instance of the STAP, where the optimal allocation is {t1, t4} or {t2, t3}.",
                "An instance of the following construction is shown in Figure 1.",
                "For each node v ∈ V and each edge e ∈ E in the graph G, we create a vertex agent av and an edge agent ae in G .",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 501 When v was incident to e in G we correspondingly add an edge e in G between av and ae.",
                "We assign each agent in G one resource, which is related to the node or the edge in the graph G, i.e., for each v ∈ V , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ E, rsc(ae) = {e}.",
                "Each vertex agent avi in G has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ E}.",
                "There is no task on the edge agents in G .",
                "We define utility 1 for each task, and the quantity of all required and available resources to be 1.",
                "Taken an instance of the IS problem, suppose there is a solution of size k, i.e., a subset N ⊆ V such that no two vertices in N are joined by an edge in E and |N| = k. N specifies a set of vertex agents AN in the corresponding graph G .",
                "Given two agents a1, a2 ∈ AN we now know that there is no edge agent ae connected to both a1 and a2.",
                "Thus, for each agent a ∈ AN , a assigns its task to the edge agents which are connected to a.",
                "All other vertex agents a /∈ AN are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ AN .",
                "The set of tasks of the agents AN (|AN | = k) is thus the maximum set of tasks that can be allocated.",
                "The utility of this allocation is k. Similarly, if there is a solution for the STAP with the utility value k, and the allocated task set is N, then for the IS problem, there exists a maximum independent set N of size k in G. An example can be found in Figure 1.",
                "We just proved that the STAP is NP-hard for an arbitrary graph.",
                "In our proof, the complexity comes from the introduction of a social network.",
                "One may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant.",
                "We now give a complexity result on this class of networks as follows.",
                "Theorem 2.",
                "Let the number of neighbors of each agent in the social network SN be bounded by Δ for Δ ≥ 3.",
                "Computing the efficient task allocation given such a network is NP-complete.",
                "In addition, it is not approximable within Δε for some ε > 0.",
                "Proof.",
                "It has been shown in [2] that the maximum independent set problem in the case of the degree bounded by Δ for Δ ≥ 3 is NP-complete and is not approximable within Δε for some ε > 0.",
                "Using the similar reduction from the proof of Theorem 1, this result also holds for the STAP.",
                "Since our problem is as hard as MIS as shown in Theorem 1, it is not possible to give a worst case bound better than Δε for any polynomial time algorithm, unless P = NP. 4.",
                "ALGORITHMS To deal with the problem of allocating tasks in a social network, we present a distributed algorithm.",
                "We introduce this algorithm by describing the protocol for the agents.",
                "After that we give the optimal, centralized algorithm and an upper bound algorithm, which we use in Section 5 to benchmark the quality of our distributed algorithm. 4.1 Protocol for distributed task allocation We can summarize the description of the task allocation problem in social networks from Section 2 as follows.",
                "We Algorithm 1 Greedy distributed allocation protocol (GDAP).",
                "Each manager a calculates the efficiency e(t) for each of their tasks t ∈ Ta, and then while Ta = ∅: 1.",
                "Each manager a selects the most efficient task t ∈ Ta such that for each task t ∈ Ta: e(t ) ≤ e(t). 2.",
                "Each manager a requests help for t from all its neighbors (of a) by informing these neighbors of the efficiency e(t) and the required resources for t. 3.",
                "Contractors receive and store all requests, and then offer all relevant resources to the manager for the task with the highest efficiency. 4.",
                "The managers that have received sufficient offers allocate their tasks, and inform each contractor which part of the offer is accepted.",
                "When a task is allocated, or when a manager has received offers from all neighbors, but still cannot satisfy its task, the task is removed from the task list Ta. 5.",
                "Contractors update their used resources. have a (social) network of agents.",
                "Each agent has a set of resources of different types at its disposal.",
                "We also have a set of tasks.",
                "Each task requires some resources, has a fixed benefit, and is located at a certain agent.",
                "This agent is called a manager.",
                "We only allow neighboring agents to help with a task.",
                "These agents are called contractors.",
                "Agents can fulfill the role of manager as well as contractor.",
                "The problem is to find out which tasks to execute, and which resources of which contractors to use for these tasks.",
                "The idea of the protocol is as follows.",
                "All manager agents a ∈ A try to find neighboring contractors to help them with their task(s) Ta = {ti ∈ T | loc(ti) = a}.",
                "They start with offering the task that is most efficient in terms of the ratio between benefit and required resources.",
                "Out of all tasks offered, contractors select the task with the highest efficiency, and send a bid to the related manager.",
                "A bid consists of all the resources the agent is able to supply for this task.",
                "If sufficient resources have been offered, the manager selects the required resources and informs all contractors of its choice.",
                "The efficiency of a task is defined as follows: Definition 5.",
                "The efficiency e of a task t ∈ T is defined by the utility of this task divided by the sum of all required resources: e(t) = u(t)P r∈R rsc(t,r) .",
                "A more detailed description of this protocol can be found in Algorithm 1.",
                "Here it is also defined how to determine when a task should not be offered anymore, because it is impossible to fulfill locally.",
                "Obviously, a task is also not offered anymore when it has been allocated.",
                "This protocol is such that, when no two tasks have exactly the same efficiency, in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the algorithm follows.",
                "Proposition 1.",
                "For a STAP with n tasks and m agents, the run time of the distributed algorithm is O(nm), and the number of communication messages is O(n2 m). 1 Even when some tasks have the same efficiency, it is straightforward to make this result work.",
                "For example, the implementation can ensure that the contractors choose the task with the lowest task-id. 502 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 2 Optimal social task allocation (OPT).",
                "Repeat the following for each combination of tasks: 1.",
                "If the total reward for this combination is higher than any previous combination, test if this combination is feasible as follows: 2.",
                "Create a network flow problem for each resource type r ∈ R (separately) as follows: (a) Create a source s and a sink s . (b) For each agent a ∈ A create an agent node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has. (c) For each task t ∈ T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires. (d) For each agent a connect the agent node to all task nodes of neighboring tasks, i.e., t ∈ {t ∈ T | (a, loc(t)) ∈ AE}.",
                "Give this connection unlimited capacity. 3.",
                "Solve the maximum flow problem for the created flow networks.",
                "If the maximum flow in each network is equal to the total required resources of that type, the current combination of tasks is feasible.",
                "In that case, this is the current best combination of tasks.",
                "Proof.",
                "In the worst case, in each iteration exactly one task is removed from a task list, so there are n iterations.",
                "In each iteration in the worst case (i.e., a fully connected network), for each of the O(n) managers, O(m) messages are sent.",
                "Next the task with the highest efficiency can be selected by each contractor in O(n).",
                "Assigning an allocation can be done in O(m).",
                "This leads to a total of O(n + m) operations for each iteration, and thus O(n2 + nm) operations in total.",
                "The number of messages sent is O(n(nm + nm + nm)) = O(n2 m).",
                "We establish the quality of this protocol experimentally (in Section 5).",
                "Preferably, we compare the results to the optimal solution. 4.2 Optimal social task allocation The optimal task allocation algorithm should deal with the restrictions posed by the social network.",
                "For this NPcomplete problem we used an exponential brute-force algorithm to consider relevant combinations of tasks to execute.",
                "For each combination we use a maximum-flow algorithm to check whether the resources are sufficient for the selected subset of tasks.",
                "The flow network describes which resources can be used for which tasks, depending on the social network.",
                "If the maximum flow is equal to the sum of all resources required by the subset of tasks, we know that a feasible solution exists (see Algorithm 2).",
                "Clearly, we cannot expect this optimal algorithm to be able to find solutions for larger problem sizes.",
                "To establish the quality of our protocol for large instances, we use the following method to determine an upper bound. 4.3 Upper bound for social task allocation Given a social task allocation problem, if the number of resource types for every task t ∈ T is bounded by 1, the Algorithm 3 An upper bound for social task allocation (UB).",
                "Create a network flow problem with costs as follows: 1.",
                "Create a source s and a sink s . 2.",
                "For each agent a ∈ A and each resource type ri ∈ R, create an agent-resource node ai, and an edge from s to this node with capacity equal to the amount of resources of type r agent a has available and with costs 0. 3.",
                "For each task t ∈ T and each resource type ri ∈ R, create a task-resource node ti, and an edge from this node to s with capacity equal to the amount of resources of type r task t requires and costs −e(t). 4.",
                "For each resource type ri ∈ R and for each agent a connect the agent-resource node ai to all task-resource nodes ti for neighboring tasks t ∈ {t ∈ T | (a, loc(t)) ∈ AE or a = loc(t)}.",
                "Give this connection unlimited capacity and zero costs. 5.",
                "Create an edge directly from s to s with unlimited capacity and zero costs.",
                "Solve the minimum cost flow network problem for this network.",
                "The costs of the resulting network is an upper bound for the social task allocation problem. problem is polynomially solvable by transforming it to a flow network problem.",
                "Our method for efficiently calculating an upper bound for STAP makes use of this special case by converting any given STAP instance P into a new problem P where each task only has one resource type.",
                "More specifically, for every task t ∈ T with utility u(t), we do the following.",
                "Let m be the number of resource types {r1, . . . , rm} required by t. We then split t into a set of m tasks T = {t1, . . . , tm} where each task ti only has one unique resource type (of {r1, . . . , rm}) and each task has a fair share of the utility, i.e., the efficiency of t from Definition 5 times the amount of this resource type rsc(ti, ri).",
                "After polynomially performing this conversion for every task in T , the original problem P becomes the special case P .",
                "Note that the set of valid allocations in P is only a subset of the set of valid allocations in P , because it is now possible to partially allocate a task.",
                "From this it is easy to see that the solution of P gives an upper bound of the solution of the original problem P. To compute the optimal solution for P , we transform it to a minimum cost flow problem.",
                "We model the cost in the flow network by the negation of the new tasks utility.",
                "A polynomial-time implementation of a scaling minimum cost flow algorithm [9] is used for the computation.",
                "The resulting minimum cost flow represents a maximum allocation of the tasks for P .",
                "The detailed modeling is described in Algorithm 3.",
                "In the next section, we use this upper bound to estimate the quality of the GDAP for large-scale instances. 5.",
                "EXPERIMENTS We implemented the greedy distributed allocation protocol (GDAP), the optimal allocation algorithm (OPT), and the upper bound algorithm (UB) in Java, and tested them on a Linux PC.",
                "The purpose of these experiments is to study the performance of the distributed algorithm in different problem settings using different social networks.",
                "The perThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 2: The solution qualities of the GDAP and the upper bound depend on the resource ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 Numberofagents Degree small-world random scale-free Figure 3: The histogram of the degrees. formance measurements are the solution quality and computation time, where the solution quality (SQ) is computed as follows.",
                "When the number of tasks is small, we compare the output of the distributed algorithm with the optimal solution, i.e., SQ = GDAP OP T , but if it is not feasible to compute the optimal solution, we use the value returned by the upper bound algorithm for evaluation, i.e., SQ = GDAP UB .",
                "To see whether the latter is a good measure, we also compare the quality of the upper bound to the optimal solution for smaller problems.",
                "In the following, we describe the setup of all experiments, and present the results. 5.1 Experimental settings We consider several experimental environments.",
                "In all environments the agents are connected by a social network.",
                "In the experiments, three different networks are used to simulate the social relationships among agents in potential realworld problems.",
                "Small-world networks are networks where most neighbors of an agent are also connected to each other.",
                "For the experiments we use a method for generating random small-world networks proposed by Watts et al. [22], with a fixed rewiring probability p = 0.05.",
                "Scale-free networks have the property that a couple of nodes have many connections, and many nodes have only a small number of connections.",
                "To generate these we use the implementation in the JUNG library of the generator proposed by Barab´asi and Albert [3].",
                "We also generate random networks as follows.",
                "First we connect each agent to another agent such that all agents are connected.",
                "Next, we randomly add connections until the desired average degree has been reached.",
                "We now describe the different settings used in our experiments with both small and large-scale problems.",
                "Setting 1.",
                "The number of agents is 40, and the number of tasks is 20.",
                "The number of different resource types is bounded by 5, and the average number of resources required by a task is 30.",
                "Consequently, the total number of resources required by the tasks is fixed.",
                "However, the resources available to the agents are varied.",
                "We define the resource ratio to refer to the ratio between the total number of available resources and the total number of required resources.",
                "Resources are allocated uniformly to the agents.",
                "The average degrees of the networks may also change.",
                "In this setting the task benefits are distributed normally around the number of resources required.",
                "Setting 2.",
                "This setting is similar to Setting 1, but here we let the benefits of the tasks vary dramatically-40% of the tasks have around 10 times higher benefit than the other 60% of the tasks.",
                "Setting 3.",
                "This setting is for large-scale problems.",
                "The ratio between the number of agents and the number of tasks is set to 5/3, and the number of agents varies from 100 to 2000.",
                "We also fix the resource ratio to 1.2 and the average degree to 6.",
                "The number of different resource types is 20, and the average resource requirement of a tasks is 100.",
                "The task benefits are again normally distributed. 5.2 Experimental results The experiments are done with the three different settings in the three different networks mentioned before, where each recorded data is the average over 20 random instances. 5.2.1 Experiment 1 Experimental setting 1 is used for this set of experiments.",
                "We would like to see how the GDAP behaves in the different networks when the number of resources available to the agents is changing.",
                "We also study the behavior of our upper bound algorithm.",
                "For this experiment we fix the average number of neighbors (degree) in each network type to six.",
                "In Figure 2 we see how the quality of both the upper bound and the GDAP algorithm depends on the resource ratio.",
                "Remarkably, for lower resource ratios our GDAP is much closer to the optimal allocation than the upper bound.",
                "When the resource ratio grows above 1.5, the graphs of the upper bound and the GDAP converge, meaning that both are really close to the optimal solution.",
                "This can be explained by the fact that when plenty of resources are available, all tasks can be allocated without any conflicts.",
                "However, when resources are very scarce, the upper bound is much too optimistic, because it is based on the allocation of sub-tasks per resource type, and does not reason about how many of the tasks can actually be allocated completely.",
                "We also notice from the graph that the solution quality of the GDAP on all three networks is quite high (over 0.8) when the available resource is very limited (0.3).",
                "It drops below 0.8 with the increased ratio and goes up again once there are plenty of resources available (resource ratio 0.9).",
                "Clearly, if 504 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 4: The quality of the GDAP and the upper bound depend on the network degree. resources are really scarce, only a few tasks can be successfully allocated even by the optimal algorithm.",
                "Therefore, the GDAP is able to give quite a good allocation.",
                "Although the differences are minor, it can also be seen that the results for the small-world network are consistently slightly better than those of random networks, which in turn outperform scale-free networks.",
                "This can be understood by looking at the distribution of the agents degree, as shown in Figure 3.",
                "In this experiment, in the small-world network almost every manager has a degree of six.",
                "In random networks, the degree varies between one and about ten.",
                "However, in the scale-free network, most nodes have only three or four connections, and only a very few have up to twenty connections.",
                "As we will see in the next experiment, having more connections means getting better results.",
                "For the next experiment we fix the resource ratio to 1.0 and study the quality of both the upper bound and the GDAP algorithm related to the degree of the social network.",
                "The result can be found in Figure 4.",
                "In this figure we can see that a high average degree also leads to convergence of the upper bound and the GDAP.",
                "Obviously, when managers have many connections, it becomes easier to allocate tasks.",
                "An exception is, similar to what we have seen in Figure 2, that the solution of the GDAP is also very good if the connections are extremely limited (degree 2), due to the fact that the number of possibly allocated tasks is very small.",
                "Again we see that the upper bound is not that good for problems where resources are hard to reach, i.e. in social networks with a low average degree.2 Since the solution quality clearly depends on the resource ratio as well as on the degree of the social network, we study the effect of changing both, to see whether they influence each other.",
                "Figure 5 shows how the solution quality depends on both the resource ratio and the network degree.",
                "This graph confirms the results that the GDAP performs better for problems with higher degree and higher resource ratio.",
                "However, it is now also more clear that it performs better for very low degree and resource availability.",
                "For this experiment with 40 agents and 20 tasks, the worst performance is met for instances with degree six and resource ratio 0.6 to instances with degree twelve and resource ratio 0.3.",
                "But even for those instances, the performance lies above 0.7. 2 The consistent standard deviation of about 15% over the 20 problem instances is not displayed as error-bars in these first graphs, because it would obfuscate the interesting correlations that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Relative reward small-world Average degree Resource ratio Relative reward Figure 5: The quality of the GDAP depends on both the resource ratio and the network degree. 5.2.2 Experiment 2 To study the robustness of the GDAP against different problem settings, we generate instances where the task benefit distribution is different: 40% of the tasks gets a 10 times higher benefit (as described in Setting 2).",
                "The effect of this different distribution can be seen in Figure 6.",
                "These two graphs show that the results for the skewed task benefit distribution are slightly better on average, both when varying the resource ratio, and when varying the average degree of the network.",
                "We argue that this can be explained by the greedy nature of GDAP, which causes the tasks with high efficiency to be allocated first, and makes the algorithm perform better in this heterogeneous setting. 5.2.3 Experiment 3 The purpose of this final experiment is to test whether the algorithm can be scaled to large problems, like applications running on the internet.",
                "We therefore generate instances where the number of agents varies from 100 to 2000, and simultaneously increase the number of tasks from 166 to 3333 (Setting 3).",
                "Figure 7 shows the run time for these instances on a Linux machine with an AMD Opteron 2.4 GHz processor.",
                "These graphs confirm the theoretical analysis from the previous section, saying that both the upper bound and the GDAP are polynomial.",
                "In fact, the graphs show that the GDAP almost behaves linearly.",
                "Here we see that the locality of the GDAP really helps in reducing the computation time.",
                "Also note that the GDAP requires even less computation time than the upper bound.",
                "The quality of the GDAP for these large instances cannot be compared to the optimal solution.",
                "Therefore, in Figure 8 the upper bound is used instead.",
                "This result shows that the GDAP behaves stably and consistently well with the increasing problem size.",
                "It also shows once more that the GDAP performs better in a small-world network. 6.",
                "RELATED WORK Task allocation in multiagent systems has been investigated by many researchers in recent years with different assumptions and emphases.",
                "However, most of the research to date on task allocation does not consider social connections among agents, and studies the problem in a centralized The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free Figure 6: The quality of the GDAP algorithm for a uniform and a skewed task benefit distribution related to the resource ratio (the first graph), and the network degree (the second graph). setting.",
                "For example, Kraus et al. [12] develop an auction protocol that enables agents to form coalitions with time constraints.",
                "It assumes each agent knows the capabilities of all others.",
                "The proposed protocol is centralized, where one manager is responsible for allocating the tasks to all coalitions.",
                "Manisterski at al. [14] discuss the possibilities of achieving efficient allocations in both cooperative and noncooperative settings.",
                "They propose a centralized algorithm to find the optimal solution.",
                "In contrast to this work, we introduce also an efficient completely distributed protocol that takes the social network into account.",
                "Task allocation has also been studied in distributed settings by for example Shehory and Kraus [18] and by Lerman and Shehory [13].",
                "They propose distributed algorithms with low communication complexity for forming coalitions in large-scale multiagent systems.",
                "However, they do not assume the existence of any agent network.",
                "The work of Sander et al. [16] introduces computational geometry-based algorithms for distributed task allocation in geographical domains.",
                "Agents are then allowed to move and actively search for tasks, and the capability of agents to perform tasks is homogeneous.",
                "In order to apply their approach, agents need to have some knowledge about the geographical positions of tasks and some other agents.",
                "Other work [17] proposes a location mechanism for open multiagent systems to allocate tasks to unknown agents.",
                "In this approach each agent caches a list of agents they know.",
                "The analysis of the communication complexity of this method is based on lattice-like graphs, while we investigate how to efficiently solve task allocation in a social network, whose topology can be arbitrary.",
                "Networks have been employed in the context of task allocation in some other works as well, for example to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time(ms) Agents upper bound - small-world upper bound - random upper bound - scale-free GDAP - small-world GDAP - random GDAP - scale-free Figure 7: The run time of the GDAP algorithm. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Rewardrelativetoupperbound Agents small-world random scale-free Figure 8: The quality of the GDAP algorithm compared to the upper bound. interactions between agents and mediators [1].",
                "Mediators in this context are agents who receive the task and have connections to other agents.",
                "They break up the task into subtasks, and negotiate with other agents to obtain commitments to execute these subtasks.",
                "Their focus is on modeling the decision process of just a single mediator.",
                "Another approach is to partition the network into cliques of nodes, representing coalitions which the agents involved may use as a coordination mechanism [20].",
                "The focus of that work is distributed coalition formation among agents, but in our approach, we do not need agents to form groups before allocating tasks.",
                "Easwaran and Pitt [6] study complex tasks that require services for their accomplishment.",
                "The problem concerns the allocation of subtasks to service providers in a supply chain.",
                "Another study of task allocation in supply chains is [21], where it is argued that the defining characteristic of Supply Chain Formation is hierarchical subtask decomposition (HSD).",
                "HSD is implemented using task dependency networks (TDN), with agents and goods as nodes, and I/O relations between them as edges.",
                "Here, the network is given, and the problem is to select a subgraph, for which the authors propose a market-based algorithm, in particular, a series of auctions.",
                "Compared to these works, our approach is more general in the sense that we are able to model different types of connections or constraints among agents for different problem domains in addition to supply chain formation.",
                "Finally, social networks have been used in the context of team formation.",
                "Previous work has shown how to learn which relations are more beneficial in the long run [8], and adapt the social network accordingly.",
                "We believe these results can be transferred to the domain of task allocation as well, leaving this as a topic for further study. 506 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 7.",
                "CONCLUSIONS In this paper we studied the task allocation problem in a social network (STAP), which can be seen as a new, more general, variant of the TAP.",
                "We believe it has a great amount of potential for realistic problems.",
                "We provided complexity results on computing the efficient solution for the STAP, as well as a bound on possible approximation algorithms.",
                "Next, we presented a distributed protocol, related to the contractnet protocol.",
                "We also introduced an exponential algorithm to compute the optimal solution, as well as a fast upperbound algorithm.",
                "Finally, we used the optimal solution and the upper-bound (for larger instances) to conduct an extensive set of experiments to assess the solution quality and the computational efficiency of the proposed distributed algorithm in different types of networks, namely, small-world networks, random networks, and scale-free networks.",
                "The results presented in this paper show that the distributed algorithm performs well in small-world, scale-free, and random networks, and for many different settings.",
                "Also other experiments were done (e.g. on grid networks) and these results held up over a wider range of scenarios.",
                "Furthermore, we showed that it scales well to large networks, both in terms of quality and of required computation time.",
                "The results also suggest that small-world networks are slightly better suited for local task allocation, because there are no nodes with very few neighbors.",
                "There are many interesting extensions to our current work.",
                "In this paper, we focus on the computational aspect in the design of the distributed algorithm.",
                "In our future work, we would also like to address some of the related issues in game theory, such as strategic agents, and show desirable properties of a distributed protocol in such a context.",
                "In the current algorithm we assume that agents can only contact their neighbors to request resources, which may explain why our algorithm performs not as good in the scalefree networks as in the small-world networks.",
                "Our future work may allow agents to reallocate (sub)tasks.",
                "We are interested in seeing how such interactions will affect the performance of task allocation in different social networks.",
                "A third interesting topic for further work is the addition of reputation information among the agents.",
                "This may help to model changing business relations and incentivize agents to follow the protocol.",
                "Finally, it would be interesting to study real-life instances of the social task allocation problem, and see how they relate to the randomly generated networks of different types studied in this paper.",
                "Acknowledgments.",
                "This work is supported by the Technology Foundation STW, applied science division of NWO, and the Ministry of Economic Affairs. 8.",
                "REFERENCES [1] S. Abdallah and V. Lesser.",
                "Modeling Task Allocation Using a Decision Theoretic Model.",
                "In Proc.",
                "AAMAS, pages 719-726.",
                "ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson, and D. Zuckerman.",
                "Derandomized Graph Products.",
                "Computational Complexity, 5(1):60-75, 1995. [3] A.-L. Barab´asi and R. Albert.",
                "Emergence of scaling in random networks.",
                "Science, 286(5439):509-512, 1999. [4] R. H. Coase.",
                "The Nature of the Firm.",
                "Economica NS, 4(16):386-405, 1937. [5] R. H. Coase.",
                "My Evolution as an Economist.",
                "In W. Breit and R. W. Spencer, editors, Lives of the Laureates, pages 227-249.",
                "MIT Press, 1995. [6] A. M. Easwaran and J. Pitt.",
                "Supply Chain Formation in Open, Market-Based Multi-Agent Systems.",
                "International J. of Computational Intelligence and Applications, 2(3):349-363, 2002. [7] I.",
                "Foster, N. R. Jennings, and C. Kesselman.",
                "Brain Meets Brawn: Why Grid and Agents Need Each Other.",
                "In Proc.",
                "AAMAS, pages 8-15, Washington, DC, USA, 2004.",
                "IEEE Computer Society. [8] M. E. Gaston and M. desJardins.",
                "Agent-organized networks for dynamic team formation.",
                "In Proc.",
                "AAMAS, pages 230-237, New York, NY, USA, 2005.",
                "ACM Press. [9] A. Goldberg.",
                "An Efficient Implementation of a Scaling Minimum-Cost Flow Algorithm.",
                "J. of Algorithms, 22:1-29, 1997. [10] R. Gulati.",
                "Does Familiarity Breed Trust?",
                "The Implications of Repeated Ties for Contractual Choice in Alliances.",
                "Academy of Management Journal, 38(1):85-112, 1995. [11] T. Klos and B. Nooteboom.",
                "Agent-based Computational Transaction Cost Economics.",
                "Economic Dynamics and Control, 25(3-4):503-526, 01. [12] S. Kraus, O. Shehory, and G. Taase.",
                "Coalition formation with uncertain heterogeneous information.",
                "In Proc.",
                "AAMAS, pages 1-8.",
                "ACM, 2003. [13] K. Lerman and O. Shehory.",
                "Coalition formation for large-scale electronic markets.",
                "In Proc.",
                "ICMAS, pages 167-174.",
                "IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus, and N. Jennings.",
                "Forming Efficient Agent Groups for Completing Complex Tasks.",
                "In Proc.",
                "AAMAS, pages 257-264.",
                "ACM, 2006. [15] J. Patel et al.",
                "Agent-Based Virtual Organizations for the Grid.",
                "Multi-Agent and Grid Systems, 1(4):237-249, 2005. [16] P. V. Sander, D. Peleshchuk, and B. J. Grosz.",
                "A scalable, distributed algorithm for efficient task allocation.",
                "In Proc.",
                "AAMAS, pages 1191-1198, New York, NY, USA, 2002.",
                "ACM Press. [17] O. Shehory.",
                "A scalable agent location mechanism.",
                "In Proc.",
                "ATAL, volume 1757 of LNCS, pages 162-172.",
                "Springer, 2000. [18] O. Shehory and S. Kraus.",
                "Methods for Task Allocation via Agent Coalition Formation.",
                "Artificial Intelligence, 101(1-2):165-200, 1998. [19] R. M. Sreenath and M. P. Singh.",
                "Agent-based service selection.",
                "Web Semantics, 1(3):261-279, 2004. [20] P. T. Toˇsi´c and G. A. Agha.",
                "Maximal Clique Based Distributed Coalition Formation for Task Allocation in Large-Scale Multi-Agent Systems.",
                "In Proc.",
                "MMAS, volume 3446 of LNAI, pages 104-120.",
                "Springer, 2005. [21] W. E. Walsh and M. P. Wellman.",
                "Modeling Supply Chain Formation in Multiagent Systems.",
                "In Proc.",
                "AMEC II, volume 1788 of LNAI, pages 94-101.",
                "Springer, 2000. [22] D. J. Watts and S. H. Strogatz.",
                "Collective dynamics of small world networks.",
                "Nature, 393:440-442, 1998.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 507"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Especialmente en aplicaciones comerciales, la selección preferencial de los socios y la \"interacción\" es muy común, y este aspecto se vuelve más importante para la investigación de asignación de tareas, en la medida en que los desarrollos tecnológicos deben poder apoyarlo."
            ],
            "translated_text": "",
            "candidates": [
                "interacción",
                "interacción"
            ],
            "error": []
        },
        "agent": {
            "translated_key": "agente",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Distributed Task Allocation in Social Networks Mathijs de Weerdt Delft Technical University Delft, The Netherlands M.M.deWeerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, The Netherlands Yingqian.Zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI) Amsterdam, The Netherlands tomas.klos@cwi.nl ABSTRACT This paper proposes a new variant of the task allocation problem, where the agents are connected in a social network and tasks arrive at the agents distributed over the network.",
                "We show that the complexity of this problem remains NPhard.",
                "Moreover, it is not approximable within some factor.",
                "We develop an algorithm based on the contract-net protocol.",
                "Our algorithm is completely distributed, and it assumes that agents have only local knowledge about tasks and resources.",
                "We conduct a set of experiments to evaluate the performance and scalability of the proposed algorithm in terms of solution quality and computation time.",
                "Three different types of networks, namely small-world, random and scale-free networks, are used to represent various social relationships among agents in realistic applications.",
                "The results demonstrate that our algorithm works well and that it scales well to large-scale applications.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Recent years have seen a lot of work on task and resource allocation methods, which can potentially be applied to many real-world applications.",
                "However, some interesting applications where relations between agents play a role require a slightly more general model.",
                "Such situations appear very frequently in real-world scenarios, and recent technological developments are bringing more of them within the range of task allocation methods.",
                "Especially in business applications, preferential partner selection and interaction is very common, and this aspect becomes more important for task allocation research, to the extent that technological developments need to be able to support it.",
                "For example, the development of semantic web and grid technologies leads to increased and renewed attention for the potential of the web to support business processes [7, 15].",
                "As an example, virtual organizations (VOs) are being re-invented in the context of the grid, where they are composed of a number of autonomous entities (representing different individuals, departments and organizations), each of which has a range of problem-solving capabilities and resources at its disposal [15, p. 237].",
                "The question is how VOs are to be dynamically composed and re-composed from individual agents, when different tasks and subtasks need to be performed.",
                "This would be done by allocating them to different agents who may each be capable of performing different subsets of those tasks.",
                "Similarly, supply chain formation (SCF) is concerned with the, possibly ad-hoc, allocation of services to providers in the supply chain, in such a way that overall profit is optimized [6, 21].",
                "Traditionally, such allocation decisions have been analyzed using transaction cost economics (TCE) [4], which takes the transaction between consecutive stages of development as its basic unit of analysis, and considers the firm and the market as alternative structural forms for organizing transactions. (Transaction cost) economics has traditionally built on analysis of comparative statics: the central problem of economic organization is considered to be the adaptation of organizational forms to the characteristics of transactions.",
                "More recently, TCEs founding father, Ronald Coase, acknowledged that this is too simplistic an approach [5, p. 245]: The analysis cannot be confined to what happens within a single firm. (. . . )",
                "What we are dealing with is a complex interrelated structure.",
                "In this paper, we study the problem of task allocation from the perspective of such a complex interrelated structure.",
                "In particular, the market cannot be considered as an organizational form without considering specific partners to interact with on the market [11].",
                "Specifically, therefore, we consider agents to be connected to each other in a social network.",
                "Furthermore, this network is not fully connected: as informed by the business literature, firms typically have established working relations with limited numbers of preferred partners [10]; these are the ones they consider when new tasks arrive and they have to form supply chains to allocate those tasks [19].",
                "Other than modeling the interrelated 500 978-81-904262-7-5 (RPS) c 2007 IFAAMAS structure between business partners, the social network introduced in this paper can also be used to represent other types of connections or constraints among autonomous entities that arise from other application domains.",
                "The next section gives a formal description of the task allocation problem on social networks.",
                "In Section 3, we prove that the complexity of this problem remains NP-hard.",
                "We then proceed to develop a distributed algorithm in Section 4, and perform a series of experiments with this algorithm, as described in Section 5.",
                "Section 6 discusses related work, and Section 7 concludes. 2.",
                "PROBLEM DESCRIPTION We formulate the social task allocation problem in this section.",
                "There is a set A of agents: A = {a1, . . . , am}.",
                "Agents need resources to complete tasks.",
                "Let R = {r1, . . . , rk} denote the collection of the resource types available to the agents A.",
                "Each <br>agent</br> a ∈ A controls a fixed amount of resources for each resource type in R, which is defined by a resource function: rsc : A × R → N. Moreover, we assume agents are connected by a social network.",
                "Definition 1 (Social network).",
                "An <br>agent</br> social network SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ∈ AE indicates the existence of a social connection between agents ai and aj.",
                "Suppose a set of tasks T = {t1, t2, . . . , tn} arrives at such an <br>agent</br> social network.",
                "Each task t ∈ T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the utility gained if task t is accomplished, and the resource function rsc : T ×R → N specifies the amount of resources required for the accomplishment of task t. Furthermore, a location function loc : T → A defines the locations (i.e., agents) at which the tasks arrive in the social network.",
                "An <br>agent</br> a that is the location of a task t, i.e. loc(t) = a, is called the manager of this task.",
                "Each task t ∈ T needs some specific resources from the agents in order to complete the task.",
                "The exact assignment of tasks to agents is defined by a task allocation.",
                "Definition 2 (Task allocation).",
                "Given a set of tasks T = {t1, . . . , tn} and a set of agents A = {a1, . . . , am} in a social network SN, a task allocation is a mapping φ : T × A × R → N. A valid task allocation in SN must satisfy the following constrains: • A task allocation must be correct.",
                "Each <br>agent</br> a ∈ A cannot use more than its available resources, i.e. for each r ∈ R, P t∈T φ(t, a, r) ≤ rsc(a, r). • A task allocation must be complete.",
                "For each task t ∈ T , either all allocated agents resources are sufficient, i.e. for each r ∈ R, P a∈A φ(t, a, r) ≥ rsc(t, r), or t is not allocated, i.e. φ(t, ·, ·) = 0. • A task allocation must obey the social relationships.",
                "Each task t ∈ T can only be allocated to agents that are (direct) neighbors of <br>agent</br> loc(t) in the social network SN.",
                "Each such <br>agent</br> that can contribute to a task is called a contractor.",
                "We write Tφ to represent the tasks that are fully allocated in φ.",
                "The utility of φ is then the summation of the utilities of each task in Tφ, i.e., Uφ = P t∈Tφ u(t).",
                "Using this notation, we define the efficient task allocation below.",
                "Definition 3 (Efficient task allocation).",
                "We say a task allocation φ is efficient if it is valid and Uφ is maximized, i.e., Uφ = max( P t∈Tφ u(t)).",
                "We are now ready to define the task allocation problem in social network that we study in this paper.",
                "Definition 4 (Social task allocation problem).",
                "Given a set of agents A connected by a social network SN = (A, AE), and a finite set of tasks T , the social task allocation problem (or STAP for short) is the problem of finding the efficient task allocation φ, such that φ is valid and the social welfare Uφ is maximized. 3.",
                "COMPLEXITY RESULTS The traditional task allocation problem, TAP (without the condition of the social network SN), is NP-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set.",
                "Although we may consider the TAP as a special case of the STAP by assuming agents are fully connected, we cannot directly use the complexity results from the TAP, since we study the STAP in an arbitrary social network, which, as we argued in the introduction, should be partially connected.",
                "We now show that the TAP with an arbitrary social network is also NP-complete, even when the utility of each task is 1, and the quantity of all required and available resources is 1.",
                "Theorem 1.",
                "Given the social task allocation problem with an arbitrary social network, as defined in Definition 4, the problem of deciding whether a task allocation φ with utility more than k exists is NP-complete.",
                "Proof.",
                "We first show that the problem is in NP.",
                "Given an instance of the problem and an integer k, we can verify in polynomial time whether an allocation φ is a valid allocation and whether the utility of φ is greater than k. We now prove that the STAP is NP-hard by showing that MAXIMUM INDEPENDENT SET ≤P STAP.",
                "Given an undirected graph G = (V, E) and an integer k, we construct a network G = (V , E ) which has an efficient task allocation with k tasks of utility 1 allocated if and only if G has an independent set (IS) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 Figure 1: The MIS problem can be reduced to the STAP.",
                "The left figure is an undirected graph G, which has the optimal solution {v1, v4} or {v2, v3}; the right figure is the constructed instance of the STAP, where the optimal allocation is {t1, t4} or {t2, t3}.",
                "An instance of the following construction is shown in Figure 1.",
                "For each node v ∈ V and each edge e ∈ E in the graph G, we create a vertex <br>agent</br> av and an edge <br>agent</br> ae in G .",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 501 When v was incident to e in G we correspondingly add an edge e in G between av and ae.",
                "We assign each <br>agent</br> in G one resource, which is related to the node or the edge in the graph G, i.e., for each v ∈ V , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ E, rsc(ae) = {e}.",
                "Each vertex <br>agent</br> avi in G has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ E}.",
                "There is no task on the edge agents in G .",
                "We define utility 1 for each task, and the quantity of all required and available resources to be 1.",
                "Taken an instance of the IS problem, suppose there is a solution of size k, i.e., a subset N ⊆ V such that no two vertices in N are joined by an edge in E and |N| = k. N specifies a set of vertex agents AN in the corresponding graph G .",
                "Given two agents a1, a2 ∈ AN we now know that there is no edge <br>agent</br> ae connected to both a1 and a2.",
                "Thus, for each <br>agent</br> a ∈ AN , a assigns its task to the edge agents which are connected to a.",
                "All other vertex agents a /∈ AN are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ AN .",
                "The set of tasks of the agents AN (|AN | = k) is thus the maximum set of tasks that can be allocated.",
                "The utility of this allocation is k. Similarly, if there is a solution for the STAP with the utility value k, and the allocated task set is N, then for the IS problem, there exists a maximum independent set N of size k in G. An example can be found in Figure 1.",
                "We just proved that the STAP is NP-hard for an arbitrary graph.",
                "In our proof, the complexity comes from the introduction of a social network.",
                "One may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant.",
                "We now give a complexity result on this class of networks as follows.",
                "Theorem 2.",
                "Let the number of neighbors of each <br>agent</br> in the social network SN be bounded by Δ for Δ ≥ 3.",
                "Computing the efficient task allocation given such a network is NP-complete.",
                "In addition, it is not approximable within Δε for some ε > 0.",
                "Proof.",
                "It has been shown in [2] that the maximum independent set problem in the case of the degree bounded by Δ for Δ ≥ 3 is NP-complete and is not approximable within Δε for some ε > 0.",
                "Using the similar reduction from the proof of Theorem 1, this result also holds for the STAP.",
                "Since our problem is as hard as MIS as shown in Theorem 1, it is not possible to give a worst case bound better than Δε for any polynomial time algorithm, unless P = NP. 4.",
                "ALGORITHMS To deal with the problem of allocating tasks in a social network, we present a distributed algorithm.",
                "We introduce this algorithm by describing the protocol for the agents.",
                "After that we give the optimal, centralized algorithm and an upper bound algorithm, which we use in Section 5 to benchmark the quality of our distributed algorithm. 4.1 Protocol for distributed task allocation We can summarize the description of the task allocation problem in social networks from Section 2 as follows.",
                "We Algorithm 1 Greedy distributed allocation protocol (GDAP).",
                "Each manager a calculates the efficiency e(t) for each of their tasks t ∈ Ta, and then while Ta = ∅: 1.",
                "Each manager a selects the most efficient task t ∈ Ta such that for each task t ∈ Ta: e(t ) ≤ e(t). 2.",
                "Each manager a requests help for t from all its neighbors (of a) by informing these neighbors of the efficiency e(t) and the required resources for t. 3.",
                "Contractors receive and store all requests, and then offer all relevant resources to the manager for the task with the highest efficiency. 4.",
                "The managers that have received sufficient offers allocate their tasks, and inform each contractor which part of the offer is accepted.",
                "When a task is allocated, or when a manager has received offers from all neighbors, but still cannot satisfy its task, the task is removed from the task list Ta. 5.",
                "Contractors update their used resources. have a (social) network of agents.",
                "Each <br>agent</br> has a set of resources of different types at its disposal.",
                "We also have a set of tasks.",
                "Each task requires some resources, has a fixed benefit, and is located at a certain <br>agent</br>.",
                "This <br>agent</br> is called a manager.",
                "We only allow neighboring agents to help with a task.",
                "These agents are called contractors.",
                "Agents can fulfill the role of manager as well as contractor.",
                "The problem is to find out which tasks to execute, and which resources of which contractors to use for these tasks.",
                "The idea of the protocol is as follows.",
                "All manager agents a ∈ A try to find neighboring contractors to help them with their task(s) Ta = {ti ∈ T | loc(ti) = a}.",
                "They start with offering the task that is most efficient in terms of the ratio between benefit and required resources.",
                "Out of all tasks offered, contractors select the task with the highest efficiency, and send a bid to the related manager.",
                "A bid consists of all the resources the <br>agent</br> is able to supply for this task.",
                "If sufficient resources have been offered, the manager selects the required resources and informs all contractors of its choice.",
                "The efficiency of a task is defined as follows: Definition 5.",
                "The efficiency e of a task t ∈ T is defined by the utility of this task divided by the sum of all required resources: e(t) = u(t)P r∈R rsc(t,r) .",
                "A more detailed description of this protocol can be found in Algorithm 1.",
                "Here it is also defined how to determine when a task should not be offered anymore, because it is impossible to fulfill locally.",
                "Obviously, a task is also not offered anymore when it has been allocated.",
                "This protocol is such that, when no two tasks have exactly the same efficiency, in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the algorithm follows.",
                "Proposition 1.",
                "For a STAP with n tasks and m agents, the run time of the distributed algorithm is O(nm), and the number of communication messages is O(n2 m). 1 Even when some tasks have the same efficiency, it is straightforward to make this result work.",
                "For example, the implementation can ensure that the contractors choose the task with the lowest task-id. 502 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) Algorithm 2 Optimal social task allocation (OPT).",
                "Repeat the following for each combination of tasks: 1.",
                "If the total reward for this combination is higher than any previous combination, test if this combination is feasible as follows: 2.",
                "Create a network flow problem for each resource type r ∈ R (separately) as follows: (a) Create a source s and a sink s . (b) For each <br>agent</br> a ∈ A create an <br>agent</br> node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has. (c) For each task t ∈ T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires. (d) For each agent a connect the agent node to all task nodes of neighboring tasks, i.e., t ∈ {t ∈ T | (a, loc(t)) ∈ AE}.",
                "Give this connection unlimited capacity. 3.",
                "Solve the maximum flow problem for the created flow networks.",
                "If the maximum flow in each network is equal to the total required resources of that type, the current combination of tasks is feasible.",
                "In that case, this is the current best combination of tasks.",
                "Proof.",
                "In the worst case, in each iteration exactly one task is removed from a task list, so there are n iterations.",
                "In each iteration in the worst case (i.e., a fully connected network), for each of the O(n) managers, O(m) messages are sent.",
                "Next the task with the highest efficiency can be selected by each contractor in O(n).",
                "Assigning an allocation can be done in O(m).",
                "This leads to a total of O(n + m) operations for each iteration, and thus O(n2 + nm) operations in total.",
                "The number of messages sent is O(n(nm + nm + nm)) = O(n2 m).",
                "We establish the quality of this protocol experimentally (in Section 5).",
                "Preferably, we compare the results to the optimal solution. 4.2 Optimal social task allocation The optimal task allocation algorithm should deal with the restrictions posed by the social network.",
                "For this NPcomplete problem we used an exponential brute-force algorithm to consider relevant combinations of tasks to execute.",
                "For each combination we use a maximum-flow algorithm to check whether the resources are sufficient for the selected subset of tasks.",
                "The flow network describes which resources can be used for which tasks, depending on the social network.",
                "If the maximum flow is equal to the sum of all resources required by the subset of tasks, we know that a feasible solution exists (see Algorithm 2).",
                "Clearly, we cannot expect this optimal algorithm to be able to find solutions for larger problem sizes.",
                "To establish the quality of our protocol for large instances, we use the following method to determine an upper bound. 4.3 Upper bound for social task allocation Given a social task allocation problem, if the number of resource types for every task t ∈ T is bounded by 1, the Algorithm 3 An upper bound for social task allocation (UB).",
                "Create a network flow problem with costs as follows: 1.",
                "Create a source s and a sink s . 2.",
                "For each <br>agent</br> a ∈ A and each resource type ri ∈ R, create an <br>agent</br>-resource node ai, and an edge from s to this node with capacity equal to the amount of resources of type r agent a has available and with costs 0. 3.",
                "For each task t ∈ T and each resource type ri ∈ R, create a task-resource node ti, and an edge from this node to s with capacity equal to the amount of resources of type r task t requires and costs −e(t). 4.",
                "For each resource type ri ∈ R and for each <br>agent</br> a connect the <br>agent</br>-resource node ai to all task-resource nodes ti for neighboring tasks t ∈ {t ∈ T | (a, loc(t)) ∈ AE or a = loc(t)}.",
                "Give this connection unlimited capacity and zero costs. 5.",
                "Create an edge directly from s to s with unlimited capacity and zero costs.",
                "Solve the minimum cost flow network problem for this network.",
                "The costs of the resulting network is an upper bound for the social task allocation problem. problem is polynomially solvable by transforming it to a flow network problem.",
                "Our method for efficiently calculating an upper bound for STAP makes use of this special case by converting any given STAP instance P into a new problem P where each task only has one resource type.",
                "More specifically, for every task t ∈ T with utility u(t), we do the following.",
                "Let m be the number of resource types {r1, . . . , rm} required by t. We then split t into a set of m tasks T = {t1, . . . , tm} where each task ti only has one unique resource type (of {r1, . . . , rm}) and each task has a fair share of the utility, i.e., the efficiency of t from Definition 5 times the amount of this resource type rsc(ti, ri).",
                "After polynomially performing this conversion for every task in T , the original problem P becomes the special case P .",
                "Note that the set of valid allocations in P is only a subset of the set of valid allocations in P , because it is now possible to partially allocate a task.",
                "From this it is easy to see that the solution of P gives an upper bound of the solution of the original problem P. To compute the optimal solution for P , we transform it to a minimum cost flow problem.",
                "We model the cost in the flow network by the negation of the new tasks utility.",
                "A polynomial-time implementation of a scaling minimum cost flow algorithm [9] is used for the computation.",
                "The resulting minimum cost flow represents a maximum allocation of the tasks for P .",
                "The detailed modeling is described in Algorithm 3.",
                "In the next section, we use this upper bound to estimate the quality of the GDAP for large-scale instances. 5.",
                "EXPERIMENTS We implemented the greedy distributed allocation protocol (GDAP), the optimal allocation algorithm (OPT), and the upper bound algorithm (UB) in Java, and tested them on a Linux PC.",
                "The purpose of these experiments is to study the performance of the distributed algorithm in different problem settings using different social networks.",
                "The perThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 2: The solution qualities of the GDAP and the upper bound depend on the resource ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 Numberofagents Degree small-world random scale-free Figure 3: The histogram of the degrees. formance measurements are the solution quality and computation time, where the solution quality (SQ) is computed as follows.",
                "When the number of tasks is small, we compare the output of the distributed algorithm with the optimal solution, i.e., SQ = GDAP OP T , but if it is not feasible to compute the optimal solution, we use the value returned by the upper bound algorithm for evaluation, i.e., SQ = GDAP UB .",
                "To see whether the latter is a good measure, we also compare the quality of the upper bound to the optimal solution for smaller problems.",
                "In the following, we describe the setup of all experiments, and present the results. 5.1 Experimental settings We consider several experimental environments.",
                "In all environments the agents are connected by a social network.",
                "In the experiments, three different networks are used to simulate the social relationships among agents in potential realworld problems.",
                "Small-world networks are networks where most neighbors of an <br>agent</br> are also connected to each other.",
                "For the experiments we use a method for generating random small-world networks proposed by Watts et al. [22], with a fixed rewiring probability p = 0.05.",
                "Scale-free networks have the property that a couple of nodes have many connections, and many nodes have only a small number of connections.",
                "To generate these we use the implementation in the JUNG library of the generator proposed by Barab´asi and Albert [3].",
                "We also generate random networks as follows.",
                "First we connect each <br>agent</br> to another <br>agent</br> such that all agents are connected.",
                "Next, we randomly add connections until the desired average degree has been reached.",
                "We now describe the different settings used in our experiments with both small and large-scale problems.",
                "Setting 1.",
                "The number of agents is 40, and the number of tasks is 20.",
                "The number of different resource types is bounded by 5, and the average number of resources required by a task is 30.",
                "Consequently, the total number of resources required by the tasks is fixed.",
                "However, the resources available to the agents are varied.",
                "We define the resource ratio to refer to the ratio between the total number of available resources and the total number of required resources.",
                "Resources are allocated uniformly to the agents.",
                "The average degrees of the networks may also change.",
                "In this setting the task benefits are distributed normally around the number of resources required.",
                "Setting 2.",
                "This setting is similar to Setting 1, but here we let the benefits of the tasks vary dramatically-40% of the tasks have around 10 times higher benefit than the other 60% of the tasks.",
                "Setting 3.",
                "This setting is for large-scale problems.",
                "The ratio between the number of agents and the number of tasks is set to 5/3, and the number of agents varies from 100 to 2000.",
                "We also fix the resource ratio to 1.2 and the average degree to 6.",
                "The number of different resource types is 20, and the average resource requirement of a tasks is 100.",
                "The task benefits are again normally distributed. 5.2 Experimental results The experiments are done with the three different settings in the three different networks mentioned before, where each recorded data is the average over 20 random instances. 5.2.1 Experiment 1 Experimental setting 1 is used for this set of experiments.",
                "We would like to see how the GDAP behaves in the different networks when the number of resources available to the agents is changing.",
                "We also study the behavior of our upper bound algorithm.",
                "For this experiment we fix the average number of neighbors (degree) in each network type to six.",
                "In Figure 2 we see how the quality of both the upper bound and the GDAP algorithm depends on the resource ratio.",
                "Remarkably, for lower resource ratios our GDAP is much closer to the optimal allocation than the upper bound.",
                "When the resource ratio grows above 1.5, the graphs of the upper bound and the GDAP converge, meaning that both are really close to the optimal solution.",
                "This can be explained by the fact that when plenty of resources are available, all tasks can be allocated without any conflicts.",
                "However, when resources are very scarce, the upper bound is much too optimistic, because it is based on the allocation of sub-tasks per resource type, and does not reason about how many of the tasks can actually be allocated completely.",
                "We also notice from the graph that the solution quality of the GDAP on all three networks is quite high (over 0.8) when the available resource is very limited (0.3).",
                "It drops below 0.8 with the increased ratio and goes up again once there are plenty of resources available (resource ratio 0.9).",
                "Clearly, if 504 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 4: The quality of the GDAP and the upper bound depend on the network degree. resources are really scarce, only a few tasks can be successfully allocated even by the optimal algorithm.",
                "Therefore, the GDAP is able to give quite a good allocation.",
                "Although the differences are minor, it can also be seen that the results for the small-world network are consistently slightly better than those of random networks, which in turn outperform scale-free networks.",
                "This can be understood by looking at the distribution of the agents degree, as shown in Figure 3.",
                "In this experiment, in the small-world network almost every manager has a degree of six.",
                "In random networks, the degree varies between one and about ten.",
                "However, in the scale-free network, most nodes have only three or four connections, and only a very few have up to twenty connections.",
                "As we will see in the next experiment, having more connections means getting better results.",
                "For the next experiment we fix the resource ratio to 1.0 and study the quality of both the upper bound and the GDAP algorithm related to the degree of the social network.",
                "The result can be found in Figure 4.",
                "In this figure we can see that a high average degree also leads to convergence of the upper bound and the GDAP.",
                "Obviously, when managers have many connections, it becomes easier to allocate tasks.",
                "An exception is, similar to what we have seen in Figure 2, that the solution of the GDAP is also very good if the connections are extremely limited (degree 2), due to the fact that the number of possibly allocated tasks is very small.",
                "Again we see that the upper bound is not that good for problems where resources are hard to reach, i.e. in social networks with a low average degree.2 Since the solution quality clearly depends on the resource ratio as well as on the degree of the social network, we study the effect of changing both, to see whether they influence each other.",
                "Figure 5 shows how the solution quality depends on both the resource ratio and the network degree.",
                "This graph confirms the results that the GDAP performs better for problems with higher degree and higher resource ratio.",
                "However, it is now also more clear that it performs better for very low degree and resource availability.",
                "For this experiment with 40 agents and 20 tasks, the worst performance is met for instances with degree six and resource ratio 0.6 to instances with degree twelve and resource ratio 0.3.",
                "But even for those instances, the performance lies above 0.7. 2 The consistent standard deviation of about 15% over the 20 problem instances is not displayed as error-bars in these first graphs, because it would obfuscate the interesting correlations that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Relative reward small-world Average degree Resource ratio Relative reward Figure 5: The quality of the GDAP depends on both the resource ratio and the network degree. 5.2.2 Experiment 2 To study the robustness of the GDAP against different problem settings, we generate instances where the task benefit distribution is different: 40% of the tasks gets a 10 times higher benefit (as described in Setting 2).",
                "The effect of this different distribution can be seen in Figure 6.",
                "These two graphs show that the results for the skewed task benefit distribution are slightly better on average, both when varying the resource ratio, and when varying the average degree of the network.",
                "We argue that this can be explained by the greedy nature of GDAP, which causes the tasks with high efficiency to be allocated first, and makes the algorithm perform better in this heterogeneous setting. 5.2.3 Experiment 3 The purpose of this final experiment is to test whether the algorithm can be scaled to large problems, like applications running on the internet.",
                "We therefore generate instances where the number of agents varies from 100 to 2000, and simultaneously increase the number of tasks from 166 to 3333 (Setting 3).",
                "Figure 7 shows the run time for these instances on a Linux machine with an AMD Opteron 2.4 GHz processor.",
                "These graphs confirm the theoretical analysis from the previous section, saying that both the upper bound and the GDAP are polynomial.",
                "In fact, the graphs show that the GDAP almost behaves linearly.",
                "Here we see that the locality of the GDAP really helps in reducing the computation time.",
                "Also note that the GDAP requires even less computation time than the upper bound.",
                "The quality of the GDAP for these large instances cannot be compared to the optimal solution.",
                "Therefore, in Figure 8 the upper bound is used instead.",
                "This result shows that the GDAP behaves stably and consistently well with the increasing problem size.",
                "It also shows once more that the GDAP performs better in a small-world network. 6.",
                "RELATED WORK Task allocation in multiagent systems has been investigated by many researchers in recent years with different assumptions and emphases.",
                "However, most of the research to date on task allocation does not consider social connections among agents, and studies the problem in a centralized The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free Figure 6: The quality of the GDAP algorithm for a uniform and a skewed task benefit distribution related to the resource ratio (the first graph), and the network degree (the second graph). setting.",
                "For example, Kraus et al. [12] develop an auction protocol that enables agents to form coalitions with time constraints.",
                "It assumes each <br>agent</br> knows the capabilities of all others.",
                "The proposed protocol is centralized, where one manager is responsible for allocating the tasks to all coalitions.",
                "Manisterski at al. [14] discuss the possibilities of achieving efficient allocations in both cooperative and noncooperative settings.",
                "They propose a centralized algorithm to find the optimal solution.",
                "In contrast to this work, we introduce also an efficient completely distributed protocol that takes the social network into account.",
                "Task allocation has also been studied in distributed settings by for example Shehory and Kraus [18] and by Lerman and Shehory [13].",
                "They propose distributed algorithms with low communication complexity for forming coalitions in large-scale multiagent systems.",
                "However, they do not assume the existence of any <br>agent</br> network.",
                "The work of Sander et al. [16] introduces computational geometry-based algorithms for distributed task allocation in geographical domains.",
                "Agents are then allowed to move and actively search for tasks, and the capability of agents to perform tasks is homogeneous.",
                "In order to apply their approach, agents need to have some knowledge about the geographical positions of tasks and some other agents.",
                "Other work [17] proposes a location mechanism for open multiagent systems to allocate tasks to unknown agents.",
                "In this approach each <br>agent</br> caches a list of agents they know.",
                "The analysis of the communication complexity of this method is based on lattice-like graphs, while we investigate how to efficiently solve task allocation in a social network, whose topology can be arbitrary.",
                "Networks have been employed in the context of task allocation in some other works as well, for example to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time(ms) Agents upper bound - small-world upper bound - random upper bound - scale-free GDAP - small-world GDAP - random GDAP - scale-free Figure 7: The run time of the GDAP algorithm. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Rewardrelativetoupperbound Agents small-world random scale-free Figure 8: The quality of the GDAP algorithm compared to the upper bound. interactions between agents and mediators [1].",
                "Mediators in this context are agents who receive the task and have connections to other agents.",
                "They break up the task into subtasks, and negotiate with other agents to obtain commitments to execute these subtasks.",
                "Their focus is on modeling the decision process of just a single mediator.",
                "Another approach is to partition the network into cliques of nodes, representing coalitions which the agents involved may use as a coordination mechanism [20].",
                "The focus of that work is distributed coalition formation among agents, but in our approach, we do not need agents to form groups before allocating tasks.",
                "Easwaran and Pitt [6] study complex tasks that require services for their accomplishment.",
                "The problem concerns the allocation of subtasks to service providers in a supply chain.",
                "Another study of task allocation in supply chains is [21], where it is argued that the defining characteristic of Supply Chain Formation is hierarchical subtask decomposition (HSD).",
                "HSD is implemented using task dependency networks (TDN), with agents and goods as nodes, and I/O relations between them as edges.",
                "Here, the network is given, and the problem is to select a subgraph, for which the authors propose a market-based algorithm, in particular, a series of auctions.",
                "Compared to these works, our approach is more general in the sense that we are able to model different types of connections or constraints among agents for different problem domains in addition to supply chain formation.",
                "Finally, social networks have been used in the context of team formation.",
                "Previous work has shown how to learn which relations are more beneficial in the long run [8], and adapt the social network accordingly.",
                "We believe these results can be transferred to the domain of task allocation as well, leaving this as a topic for further study. 506 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 7.",
                "CONCLUSIONS In this paper we studied the task allocation problem in a social network (STAP), which can be seen as a new, more general, variant of the TAP.",
                "We believe it has a great amount of potential for realistic problems.",
                "We provided complexity results on computing the efficient solution for the STAP, as well as a bound on possible approximation algorithms.",
                "Next, we presented a distributed protocol, related to the contractnet protocol.",
                "We also introduced an exponential algorithm to compute the optimal solution, as well as a fast upperbound algorithm.",
                "Finally, we used the optimal solution and the upper-bound (for larger instances) to conduct an extensive set of experiments to assess the solution quality and the computational efficiency of the proposed distributed algorithm in different types of networks, namely, small-world networks, random networks, and scale-free networks.",
                "The results presented in this paper show that the distributed algorithm performs well in small-world, scale-free, and random networks, and for many different settings.",
                "Also other experiments were done (e.g. on grid networks) and these results held up over a wider range of scenarios.",
                "Furthermore, we showed that it scales well to large networks, both in terms of quality and of required computation time.",
                "The results also suggest that small-world networks are slightly better suited for local task allocation, because there are no nodes with very few neighbors.",
                "There are many interesting extensions to our current work.",
                "In this paper, we focus on the computational aspect in the design of the distributed algorithm.",
                "In our future work, we would also like to address some of the related issues in game theory, such as strategic agents, and show desirable properties of a distributed protocol in such a context.",
                "In the current algorithm we assume that agents can only contact their neighbors to request resources, which may explain why our algorithm performs not as good in the scalefree networks as in the small-world networks.",
                "Our future work may allow agents to reallocate (sub)tasks.",
                "We are interested in seeing how such interactions will affect the performance of task allocation in different social networks.",
                "A third interesting topic for further work is the addition of reputation information among the agents.",
                "This may help to model changing business relations and incentivize agents to follow the protocol.",
                "Finally, it would be interesting to study real-life instances of the social task allocation problem, and see how they relate to the randomly generated networks of different types studied in this paper.",
                "Acknowledgments.",
                "This work is supported by the Technology Foundation STW, applied science division of NWO, and the Ministry of Economic Affairs. 8.",
                "REFERENCES [1] S. Abdallah and V. Lesser.",
                "Modeling Task Allocation Using a Decision Theoretic Model.",
                "In Proc.",
                "AAMAS, pages 719-726.",
                "ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson, and D. Zuckerman.",
                "Derandomized Graph Products.",
                "Computational Complexity, 5(1):60-75, 1995. [3] A.-L. Barab´asi and R. Albert.",
                "Emergence of scaling in random networks.",
                "Science, 286(5439):509-512, 1999. [4] R. H. Coase.",
                "The Nature of the Firm.",
                "Economica NS, 4(16):386-405, 1937. [5] R. H. Coase.",
                "My Evolution as an Economist.",
                "In W. Breit and R. W. Spencer, editors, Lives of the Laureates, pages 227-249.",
                "MIT Press, 1995. [6] A. M. Easwaran and J. Pitt.",
                "Supply Chain Formation in Open, Market-Based Multi-<br>agent</br> Systems.",
                "International J. of Computational Intelligence and Applications, 2(3):349-363, 2002. [7] I.",
                "Foster, N. R. Jennings, and C. Kesselman.",
                "Brain Meets Brawn: Why Grid and Agents Need Each Other.",
                "In Proc.",
                "AAMAS, pages 8-15, Washington, DC, USA, 2004.",
                "IEEE Computer Society. [8] M. E. Gaston and M. desJardins.",
                "<br>agent</br>-organized networks for dynamic team formation.",
                "In Proc.",
                "AAMAS, pages 230-237, New York, NY, USA, 2005.",
                "ACM Press. [9] A. Goldberg.",
                "An Efficient Implementation of a Scaling Minimum-Cost Flow Algorithm.",
                "J. of Algorithms, 22:1-29, 1997. [10] R. Gulati.",
                "Does Familiarity Breed Trust?",
                "The Implications of Repeated Ties for Contractual Choice in Alliances.",
                "Academy of Management Journal, 38(1):85-112, 1995. [11] T. Klos and B. Nooteboom.",
                "<br>agent</br>-based Computational Transaction Cost Economics.",
                "Economic Dynamics and Control, 25(3-4):503-526, 01. [12] S. Kraus, O. Shehory, and G. Taase.",
                "Coalition formation with uncertain heterogeneous information.",
                "In Proc.",
                "AAMAS, pages 1-8.",
                "ACM, 2003. [13] K. Lerman and O. Shehory.",
                "Coalition formation for large-scale electronic markets.",
                "In Proc.",
                "ICMAS, pages 167-174.",
                "IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus, and N. Jennings.",
                "Forming Efficient <br>agent</br> Groups for Completing Complex Tasks.",
                "In Proc.",
                "AAMAS, pages 257-264.",
                "ACM, 2006. [15] J. Patel et al.",
                "<br>agent</br>-Based Virtual Organizations for the Grid.",
                "Multi-<br>agent</br> and Grid Systems, 1(4):237-249, 2005. [16] P. V. Sander, D. Peleshchuk, and B. J. Grosz.",
                "A scalable, distributed algorithm for efficient task allocation.",
                "In Proc.",
                "AAMAS, pages 1191-1198, New York, NY, USA, 2002.",
                "ACM Press. [17] O. Shehory.",
                "A scalable <br>agent</br> location mechanism.",
                "In Proc.",
                "ATAL, volume 1757 of LNCS, pages 162-172.",
                "Springer, 2000. [18] O. Shehory and S. Kraus.",
                "Methods for Task Allocation via <br>agent</br> Coalition Formation.",
                "Artificial Intelligence, 101(1-2):165-200, 1998. [19] R. M. Sreenath and M. P. Singh.",
                "<br>agent</br>-based service selection.",
                "Web Semantics, 1(3):261-279, 2004. [20] P. T. Toˇsi´c and G. A. Agha.",
                "Maximal Clique Based Distributed Coalition Formation for Task Allocation in Large-Scale Multi-<br>agent</br> Systems.",
                "In Proc.",
                "MMAS, volume 3446 of LNAI, pages 104-120.",
                "Springer, 2005. [21] W. E. Walsh and M. P. Wellman.",
                "Modeling Supply Chain Formation in Multiagent Systems.",
                "In Proc.",
                "AMEC II, volume 1788 of LNAI, pages 94-101.",
                "Springer, 2000. [22] D. J. Watts and S. H. Strogatz.",
                "Collective dynamics of small world networks.",
                "Nature, 393:440-442, 1998.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-<br>agent</br> Systems (AAMAS 07) 507"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Cada \"agente\" a ∈ A controla una cantidad fija de recursos para cada tipo de recurso en R, que se define por una función de recursos: RSC: A × R → N. Además, suponemos que los agentes están conectados por una red social.",
                "Una red social de \"agente\" sn = (a, ae) es un gráfico no dirigido, donde los vértices A son agentes, y cada borde (AI, AJ) ∈ Ae indica la existencia de una conexión social entre los agentes AI y AJ.",
                "Suponga un conjunto de tareas t = {t1, t2 ,..., TN} llega a una red social de \"agente\".",
                "Un \"agente\" A que es la ubicación de una tarea t, es decir, loc (t) = a, se llama gerente de esta tarea.",
                "Cada \"agente\" a ∈ A no puede usar más que sus recursos disponibles, es decir, para cada r ∈ R, p t∈T φ (t, a, r) ≤ rsc (a, r).• Una asignación de tareas debe estar completa.",
                "Cada tarea t ∈ T solo puede asignarse a los agentes que son vecinos (directos) de \"agente\" loc (t) en la red social Sn.",
                "Cada uno de estos \"agente\" que puede contribuir a una tarea se denomina contratista.",
                "Para cada nodo v ∈ V y cada borde e ∈ E en el gráfico G, creamos un vértice \"agente\" AV y un borde \"agente\" ae en g.",
                "Conf.En agentes autónomos y sistemas múltiples de \"agente\" (AAMAS 07) 501 Cuando V fue incidente a E en G, agregamos correspondientemente un borde E en G entre AV y AE.",
                "Asignamos cada \"agente\" en un recurso G, que está relacionado con el nodo o el borde en el gráfico G, es decir, para cada v ∈ V, RSC (av) = {V} (aquí escribimos RSC (a) yRSC (t) representar el conjunto de recursos disponibles para/requerido por A y T), y para cada e ∈ E, RSC (AE) = {E}."
            ],
            "translated_text": "",
            "candidates": [
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente",
                "agente"
            ],
            "error": []
        },
        "resource": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Distributed Task Allocation in Social Networks Mathijs de Weerdt Delft Technical University Delft, The Netherlands M.M.deWeerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, The Netherlands Yingqian.Zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI) Amsterdam, The Netherlands tomas.klos@cwi.nl ABSTRACT This paper proposes a new variant of the task allocation problem, where the agents are connected in a social network and tasks arrive at the agents distributed over the network.",
                "We show that the complexity of this problem remains NPhard.",
                "Moreover, it is not approximable within some factor.",
                "We develop an algorithm based on the contract-net protocol.",
                "Our algorithm is completely distributed, and it assumes that agents have only local knowledge about tasks and resources.",
                "We conduct a set of experiments to evaluate the performance and scalability of the proposed algorithm in terms of solution quality and computation time.",
                "Three different types of networks, namely small-world, random and scale-free networks, are used to represent various social relationships among agents in realistic applications.",
                "The results demonstrate that our algorithm works well and that it scales well to large-scale applications.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Recent years have seen a lot of work on task and <br>resource</br> allocation methods, which can potentially be applied to many real-world applications.",
                "However, some interesting applications where relations between agents play a role require a slightly more general model.",
                "Such situations appear very frequently in real-world scenarios, and recent technological developments are bringing more of them within the range of task allocation methods.",
                "Especially in business applications, preferential partner selection and interaction is very common, and this aspect becomes more important for task allocation research, to the extent that technological developments need to be able to support it.",
                "For example, the development of semantic web and grid technologies leads to increased and renewed attention for the potential of the web to support business processes [7, 15].",
                "As an example, virtual organizations (VOs) are being re-invented in the context of the grid, where they are composed of a number of autonomous entities (representing different individuals, departments and organizations), each of which has a range of problem-solving capabilities and resources at its disposal [15, p. 237].",
                "The question is how VOs are to be dynamically composed and re-composed from individual agents, when different tasks and subtasks need to be performed.",
                "This would be done by allocating them to different agents who may each be capable of performing different subsets of those tasks.",
                "Similarly, supply chain formation (SCF) is concerned with the, possibly ad-hoc, allocation of services to providers in the supply chain, in such a way that overall profit is optimized [6, 21].",
                "Traditionally, such allocation decisions have been analyzed using transaction cost economics (TCE) [4], which takes the transaction between consecutive stages of development as its basic unit of analysis, and considers the firm and the market as alternative structural forms for organizing transactions. (Transaction cost) economics has traditionally built on analysis of comparative statics: the central problem of economic organization is considered to be the adaptation of organizational forms to the characteristics of transactions.",
                "More recently, TCEs founding father, Ronald Coase, acknowledged that this is too simplistic an approach [5, p. 245]: The analysis cannot be confined to what happens within a single firm. (. . . )",
                "What we are dealing with is a complex interrelated structure.",
                "In this paper, we study the problem of task allocation from the perspective of such a complex interrelated structure.",
                "In particular, the market cannot be considered as an organizational form without considering specific partners to interact with on the market [11].",
                "Specifically, therefore, we consider agents to be connected to each other in a social network.",
                "Furthermore, this network is not fully connected: as informed by the business literature, firms typically have established working relations with limited numbers of preferred partners [10]; these are the ones they consider when new tasks arrive and they have to form supply chains to allocate those tasks [19].",
                "Other than modeling the interrelated 500 978-81-904262-7-5 (RPS) c 2007 IFAAMAS structure between business partners, the social network introduced in this paper can also be used to represent other types of connections or constraints among autonomous entities that arise from other application domains.",
                "The next section gives a formal description of the task allocation problem on social networks.",
                "In Section 3, we prove that the complexity of this problem remains NP-hard.",
                "We then proceed to develop a distributed algorithm in Section 4, and perform a series of experiments with this algorithm, as described in Section 5.",
                "Section 6 discusses related work, and Section 7 concludes. 2.",
                "PROBLEM DESCRIPTION We formulate the social task allocation problem in this section.",
                "There is a set A of agents: A = {a1, . . . , am}.",
                "Agents need resources to complete tasks.",
                "Let R = {r1, . . . , rk} denote the collection of the <br>resource</br> types available to the agents A.",
                "Each agent a ∈ A controls a fixed amount of resources for each <br>resource</br> type in R, which is defined by a <br>resource</br> function: rsc : A × R → N. Moreover, we assume agents are connected by a social network.",
                "Definition 1 (Social network).",
                "An agent social network SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ∈ AE indicates the existence of a social connection between agents ai and aj.",
                "Suppose a set of tasks T = {t1, t2, . . . , tn} arrives at such an agent social network.",
                "Each task t ∈ T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the utility gained if task t is accomplished, and the <br>resource</br> function rsc : T ×R → N specifies the amount of resources required for the accomplishment of task t. Furthermore, a location function loc : T → A defines the locations (i.e., agents) at which the tasks arrive in the social network.",
                "An agent a that is the location of a task t, i.e. loc(t) = a, is called the manager of this task.",
                "Each task t ∈ T needs some specific resources from the agents in order to complete the task.",
                "The exact assignment of tasks to agents is defined by a task allocation.",
                "Definition 2 (Task allocation).",
                "Given a set of tasks T = {t1, . . . , tn} and a set of agents A = {a1, . . . , am} in a social network SN, a task allocation is a mapping φ : T × A × R → N. A valid task allocation in SN must satisfy the following constrains: • A task allocation must be correct.",
                "Each agent a ∈ A cannot use more than its available resources, i.e. for each r ∈ R, P t∈T φ(t, a, r) ≤ rsc(a, r). • A task allocation must be complete.",
                "For each task t ∈ T , either all allocated agents resources are sufficient, i.e. for each r ∈ R, P a∈A φ(t, a, r) ≥ rsc(t, r), or t is not allocated, i.e. φ(t, ·, ·) = 0. • A task allocation must obey the social relationships.",
                "Each task t ∈ T can only be allocated to agents that are (direct) neighbors of agent loc(t) in the social network SN.",
                "Each such agent that can contribute to a task is called a contractor.",
                "We write Tφ to represent the tasks that are fully allocated in φ.",
                "The utility of φ is then the summation of the utilities of each task in Tφ, i.e., Uφ = P t∈Tφ u(t).",
                "Using this notation, we define the efficient task allocation below.",
                "Definition 3 (Efficient task allocation).",
                "We say a task allocation φ is efficient if it is valid and Uφ is maximized, i.e., Uφ = max( P t∈Tφ u(t)).",
                "We are now ready to define the task allocation problem in social network that we study in this paper.",
                "Definition 4 (Social task allocation problem).",
                "Given a set of agents A connected by a social network SN = (A, AE), and a finite set of tasks T , the social task allocation problem (or STAP for short) is the problem of finding the efficient task allocation φ, such that φ is valid and the social welfare Uφ is maximized. 3.",
                "COMPLEXITY RESULTS The traditional task allocation problem, TAP (without the condition of the social network SN), is NP-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set.",
                "Although we may consider the TAP as a special case of the STAP by assuming agents are fully connected, we cannot directly use the complexity results from the TAP, since we study the STAP in an arbitrary social network, which, as we argued in the introduction, should be partially connected.",
                "We now show that the TAP with an arbitrary social network is also NP-complete, even when the utility of each task is 1, and the quantity of all required and available resources is 1.",
                "Theorem 1.",
                "Given the social task allocation problem with an arbitrary social network, as defined in Definition 4, the problem of deciding whether a task allocation φ with utility more than k exists is NP-complete.",
                "Proof.",
                "We first show that the problem is in NP.",
                "Given an instance of the problem and an integer k, we can verify in polynomial time whether an allocation φ is a valid allocation and whether the utility of φ is greater than k. We now prove that the STAP is NP-hard by showing that MAXIMUM INDEPENDENT SET ≤P STAP.",
                "Given an undirected graph G = (V, E) and an integer k, we construct a network G = (V , E ) which has an efficient task allocation with k tasks of utility 1 allocated if and only if G has an independent set (IS) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 Figure 1: The MIS problem can be reduced to the STAP.",
                "The left figure is an undirected graph G, which has the optimal solution {v1, v4} or {v2, v3}; the right figure is the constructed instance of the STAP, where the optimal allocation is {t1, t4} or {t2, t3}.",
                "An instance of the following construction is shown in Figure 1.",
                "For each node v ∈ V and each edge e ∈ E in the graph G, we create a vertex agent av and an edge agent ae in G .",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 501 When v was incident to e in G we correspondingly add an edge e in G between av and ae.",
                "We assign each agent in G one <br>resource</br>, which is related to the node or the edge in the graph G, i.e., for each v ∈ V , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ E, rsc(ae) = {e}.",
                "Each vertex agent avi in G has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ E}.",
                "There is no task on the edge agents in G .",
                "We define utility 1 for each task, and the quantity of all required and available resources to be 1.",
                "Taken an instance of the IS problem, suppose there is a solution of size k, i.e., a subset N ⊆ V such that no two vertices in N are joined by an edge in E and |N| = k. N specifies a set of vertex agents AN in the corresponding graph G .",
                "Given two agents a1, a2 ∈ AN we now know that there is no edge agent ae connected to both a1 and a2.",
                "Thus, for each agent a ∈ AN , a assigns its task to the edge agents which are connected to a.",
                "All other vertex agents a /∈ AN are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ AN .",
                "The set of tasks of the agents AN (|AN | = k) is thus the maximum set of tasks that can be allocated.",
                "The utility of this allocation is k. Similarly, if there is a solution for the STAP with the utility value k, and the allocated task set is N, then for the IS problem, there exists a maximum independent set N of size k in G. An example can be found in Figure 1.",
                "We just proved that the STAP is NP-hard for an arbitrary graph.",
                "In our proof, the complexity comes from the introduction of a social network.",
                "One may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant.",
                "We now give a complexity result on this class of networks as follows.",
                "Theorem 2.",
                "Let the number of neighbors of each agent in the social network SN be bounded by Δ for Δ ≥ 3.",
                "Computing the efficient task allocation given such a network is NP-complete.",
                "In addition, it is not approximable within Δε for some ε > 0.",
                "Proof.",
                "It has been shown in [2] that the maximum independent set problem in the case of the degree bounded by Δ for Δ ≥ 3 is NP-complete and is not approximable within Δε for some ε > 0.",
                "Using the similar reduction from the proof of Theorem 1, this result also holds for the STAP.",
                "Since our problem is as hard as MIS as shown in Theorem 1, it is not possible to give a worst case bound better than Δε for any polynomial time algorithm, unless P = NP. 4.",
                "ALGORITHMS To deal with the problem of allocating tasks in a social network, we present a distributed algorithm.",
                "We introduce this algorithm by describing the protocol for the agents.",
                "After that we give the optimal, centralized algorithm and an upper bound algorithm, which we use in Section 5 to benchmark the quality of our distributed algorithm. 4.1 Protocol for distributed task allocation We can summarize the description of the task allocation problem in social networks from Section 2 as follows.",
                "We Algorithm 1 Greedy distributed allocation protocol (GDAP).",
                "Each manager a calculates the efficiency e(t) for each of their tasks t ∈ Ta, and then while Ta = ∅: 1.",
                "Each manager a selects the most efficient task t ∈ Ta such that for each task t ∈ Ta: e(t ) ≤ e(t). 2.",
                "Each manager a requests help for t from all its neighbors (of a) by informing these neighbors of the efficiency e(t) and the required resources for t. 3.",
                "Contractors receive and store all requests, and then offer all relevant resources to the manager for the task with the highest efficiency. 4.",
                "The managers that have received sufficient offers allocate their tasks, and inform each contractor which part of the offer is accepted.",
                "When a task is allocated, or when a manager has received offers from all neighbors, but still cannot satisfy its task, the task is removed from the task list Ta. 5.",
                "Contractors update their used resources. have a (social) network of agents.",
                "Each agent has a set of resources of different types at its disposal.",
                "We also have a set of tasks.",
                "Each task requires some resources, has a fixed benefit, and is located at a certain agent.",
                "This agent is called a manager.",
                "We only allow neighboring agents to help with a task.",
                "These agents are called contractors.",
                "Agents can fulfill the role of manager as well as contractor.",
                "The problem is to find out which tasks to execute, and which resources of which contractors to use for these tasks.",
                "The idea of the protocol is as follows.",
                "All manager agents a ∈ A try to find neighboring contractors to help them with their task(s) Ta = {ti ∈ T | loc(ti) = a}.",
                "They start with offering the task that is most efficient in terms of the ratio between benefit and required resources.",
                "Out of all tasks offered, contractors select the task with the highest efficiency, and send a bid to the related manager.",
                "A bid consists of all the resources the agent is able to supply for this task.",
                "If sufficient resources have been offered, the manager selects the required resources and informs all contractors of its choice.",
                "The efficiency of a task is defined as follows: Definition 5.",
                "The efficiency e of a task t ∈ T is defined by the utility of this task divided by the sum of all required resources: e(t) = u(t)P r∈R rsc(t,r) .",
                "A more detailed description of this protocol can be found in Algorithm 1.",
                "Here it is also defined how to determine when a task should not be offered anymore, because it is impossible to fulfill locally.",
                "Obviously, a task is also not offered anymore when it has been allocated.",
                "This protocol is such that, when no two tasks have exactly the same efficiency, in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the algorithm follows.",
                "Proposition 1.",
                "For a STAP with n tasks and m agents, the run time of the distributed algorithm is O(nm), and the number of communication messages is O(n2 m). 1 Even when some tasks have the same efficiency, it is straightforward to make this result work.",
                "For example, the implementation can ensure that the contractors choose the task with the lowest task-id. 502 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 2 Optimal social task allocation (OPT).",
                "Repeat the following for each combination of tasks: 1.",
                "If the total reward for this combination is higher than any previous combination, test if this combination is feasible as follows: 2.",
                "Create a network flow problem for each <br>resource</br> type r ∈ R (separately) as follows: (a) Create a source s and a sink s . (b) For each agent a ∈ A create an agent node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has. (c) For each task t ∈ T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires. (d) For each agent a connect the agent node to all task nodes of neighboring tasks, i.e., t ∈ {t ∈ T | (a, loc(t)) ∈ AE}.",
                "Give this connection unlimited capacity. 3.",
                "Solve the maximum flow problem for the created flow networks.",
                "If the maximum flow in each network is equal to the total required resources of that type, the current combination of tasks is feasible.",
                "In that case, this is the current best combination of tasks.",
                "Proof.",
                "In the worst case, in each iteration exactly one task is removed from a task list, so there are n iterations.",
                "In each iteration in the worst case (i.e., a fully connected network), for each of the O(n) managers, O(m) messages are sent.",
                "Next the task with the highest efficiency can be selected by each contractor in O(n).",
                "Assigning an allocation can be done in O(m).",
                "This leads to a total of O(n + m) operations for each iteration, and thus O(n2 + nm) operations in total.",
                "The number of messages sent is O(n(nm + nm + nm)) = O(n2 m).",
                "We establish the quality of this protocol experimentally (in Section 5).",
                "Preferably, we compare the results to the optimal solution. 4.2 Optimal social task allocation The optimal task allocation algorithm should deal with the restrictions posed by the social network.",
                "For this NPcomplete problem we used an exponential brute-force algorithm to consider relevant combinations of tasks to execute.",
                "For each combination we use a maximum-flow algorithm to check whether the resources are sufficient for the selected subset of tasks.",
                "The flow network describes which resources can be used for which tasks, depending on the social network.",
                "If the maximum flow is equal to the sum of all resources required by the subset of tasks, we know that a feasible solution exists (see Algorithm 2).",
                "Clearly, we cannot expect this optimal algorithm to be able to find solutions for larger problem sizes.",
                "To establish the quality of our protocol for large instances, we use the following method to determine an upper bound. 4.3 Upper bound for social task allocation Given a social task allocation problem, if the number of <br>resource</br> types for every task t ∈ T is bounded by 1, the Algorithm 3 An upper bound for social task allocation (UB).",
                "Create a network flow problem with costs as follows: 1.",
                "Create a source s and a sink s . 2.",
                "For each agent a ∈ A and each <br>resource</br> type ri ∈ R, create an agent-<br>resource</br> node ai, and an edge from s to this node with capacity equal to the amount of resources of type r agent a has available and with costs 0. 3.",
                "For each task t ∈ T and each <br>resource</br> type ri ∈ R, create a task-<br>resource</br> node ti, and an edge from this node to s with capacity equal to the amount of resources of type r task t requires and costs −e(t). 4.",
                "For each <br>resource</br> type ri ∈ R and for each agent a connect the agent-<br>resource</br> node ai to all task-resource nodes ti for neighboring tasks t ∈ {t ∈ T | (a, loc(t)) ∈ AE or a = loc(t)}.",
                "Give this connection unlimited capacity and zero costs. 5.",
                "Create an edge directly from s to s with unlimited capacity and zero costs.",
                "Solve the minimum cost flow network problem for this network.",
                "The costs of the resulting network is an upper bound for the social task allocation problem. problem is polynomially solvable by transforming it to a flow network problem.",
                "Our method for efficiently calculating an upper bound for STAP makes use of this special case by converting any given STAP instance P into a new problem P where each task only has one <br>resource</br> type.",
                "More specifically, for every task t ∈ T with utility u(t), we do the following.",
                "Let m be the number of <br>resource</br> types {r1, . . . , rm} required by t. We then split t into a set of m tasks T = {t1, . . . , tm} where each task ti only has one unique <br>resource</br> type (of {r1, . . . , rm}) and each task has a fair share of the utility, i.e., the efficiency of t from Definition 5 times the amount of this resource type rsc(ti, ri).",
                "After polynomially performing this conversion for every task in T , the original problem P becomes the special case P .",
                "Note that the set of valid allocations in P is only a subset of the set of valid allocations in P , because it is now possible to partially allocate a task.",
                "From this it is easy to see that the solution of P gives an upper bound of the solution of the original problem P. To compute the optimal solution for P , we transform it to a minimum cost flow problem.",
                "We model the cost in the flow network by the negation of the new tasks utility.",
                "A polynomial-time implementation of a scaling minimum cost flow algorithm [9] is used for the computation.",
                "The resulting minimum cost flow represents a maximum allocation of the tasks for P .",
                "The detailed modeling is described in Algorithm 3.",
                "In the next section, we use this upper bound to estimate the quality of the GDAP for large-scale instances. 5.",
                "EXPERIMENTS We implemented the greedy distributed allocation protocol (GDAP), the optimal allocation algorithm (OPT), and the upper bound algorithm (UB) in Java, and tested them on a Linux PC.",
                "The purpose of these experiments is to study the performance of the distributed algorithm in different problem settings using different social networks.",
                "The perThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal <br>resource</br> ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 2: The solution qualities of the GDAP and the upper bound depend on the <br>resource</br> ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 Numberofagents Degree small-world random scale-free Figure 3: The histogram of the degrees. formance measurements are the solution quality and computation time, where the solution quality (SQ) is computed as follows.",
                "When the number of tasks is small, we compare the output of the distributed algorithm with the optimal solution, i.e., SQ = GDAP OP T , but if it is not feasible to compute the optimal solution, we use the value returned by the upper bound algorithm for evaluation, i.e., SQ = GDAP UB .",
                "To see whether the latter is a good measure, we also compare the quality of the upper bound to the optimal solution for smaller problems.",
                "In the following, we describe the setup of all experiments, and present the results. 5.1 Experimental settings We consider several experimental environments.",
                "In all environments the agents are connected by a social network.",
                "In the experiments, three different networks are used to simulate the social relationships among agents in potential realworld problems.",
                "Small-world networks are networks where most neighbors of an agent are also connected to each other.",
                "For the experiments we use a method for generating random small-world networks proposed by Watts et al. [22], with a fixed rewiring probability p = 0.05.",
                "Scale-free networks have the property that a couple of nodes have many connections, and many nodes have only a small number of connections.",
                "To generate these we use the implementation in the JUNG library of the generator proposed by Barab´asi and Albert [3].",
                "We also generate random networks as follows.",
                "First we connect each agent to another agent such that all agents are connected.",
                "Next, we randomly add connections until the desired average degree has been reached.",
                "We now describe the different settings used in our experiments with both small and large-scale problems.",
                "Setting 1.",
                "The number of agents is 40, and the number of tasks is 20.",
                "The number of different <br>resource</br> types is bounded by 5, and the average number of resources required by a task is 30.",
                "Consequently, the total number of resources required by the tasks is fixed.",
                "However, the resources available to the agents are varied.",
                "We define the <br>resource</br> ratio to refer to the ratio between the total number of available resources and the total number of required resources.",
                "Resources are allocated uniformly to the agents.",
                "The average degrees of the networks may also change.",
                "In this setting the task benefits are distributed normally around the number of resources required.",
                "Setting 2.",
                "This setting is similar to Setting 1, but here we let the benefits of the tasks vary dramatically-40% of the tasks have around 10 times higher benefit than the other 60% of the tasks.",
                "Setting 3.",
                "This setting is for large-scale problems.",
                "The ratio between the number of agents and the number of tasks is set to 5/3, and the number of agents varies from 100 to 2000.",
                "We also fix the <br>resource</br> ratio to 1.2 and the average degree to 6.",
                "The number of different <br>resource</br> types is 20, and the average <br>resource</br> requirement of a tasks is 100.",
                "The task benefits are again normally distributed. 5.2 Experimental results The experiments are done with the three different settings in the three different networks mentioned before, where each recorded data is the average over 20 random instances. 5.2.1 Experiment 1 Experimental setting 1 is used for this set of experiments.",
                "We would like to see how the GDAP behaves in the different networks when the number of resources available to the agents is changing.",
                "We also study the behavior of our upper bound algorithm.",
                "For this experiment we fix the average number of neighbors (degree) in each network type to six.",
                "In Figure 2 we see how the quality of both the upper bound and the GDAP algorithm depends on the <br>resource</br> ratio.",
                "Remarkably, for lower <br>resource</br> ratios our GDAP is much closer to the optimal allocation than the upper bound.",
                "When the <br>resource</br> ratio grows above 1.5, the graphs of the upper bound and the GDAP converge, meaning that both are really close to the optimal solution.",
                "This can be explained by the fact that when plenty of resources are available, all tasks can be allocated without any conflicts.",
                "However, when resources are very scarce, the upper bound is much too optimistic, because it is based on the allocation of sub-tasks per <br>resource</br> type, and does not reason about how many of the tasks can actually be allocated completely.",
                "We also notice from the graph that the solution quality of the GDAP on all three networks is quite high (over 0.8) when the available <br>resource</br> is very limited (0.3).",
                "It drops below 0.8 with the increased ratio and goes up again once there are plenty of resources available (<br>resource</br> ratio 0.9).",
                "Clearly, if 504 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 4: The quality of the GDAP and the upper bound depend on the network degree. resources are really scarce, only a few tasks can be successfully allocated even by the optimal algorithm.",
                "Therefore, the GDAP is able to give quite a good allocation.",
                "Although the differences are minor, it can also be seen that the results for the small-world network are consistently slightly better than those of random networks, which in turn outperform scale-free networks.",
                "This can be understood by looking at the distribution of the agents degree, as shown in Figure 3.",
                "In this experiment, in the small-world network almost every manager has a degree of six.",
                "In random networks, the degree varies between one and about ten.",
                "However, in the scale-free network, most nodes have only three or four connections, and only a very few have up to twenty connections.",
                "As we will see in the next experiment, having more connections means getting better results.",
                "For the next experiment we fix the <br>resource</br> ratio to 1.0 and study the quality of both the upper bound and the GDAP algorithm related to the degree of the social network.",
                "The result can be found in Figure 4.",
                "In this figure we can see that a high average degree also leads to convergence of the upper bound and the GDAP.",
                "Obviously, when managers have many connections, it becomes easier to allocate tasks.",
                "An exception is, similar to what we have seen in Figure 2, that the solution of the GDAP is also very good if the connections are extremely limited (degree 2), due to the fact that the number of possibly allocated tasks is very small.",
                "Again we see that the upper bound is not that good for problems where resources are hard to reach, i.e. in social networks with a low average degree.2 Since the solution quality clearly depends on the <br>resource</br> ratio as well as on the degree of the social network, we study the effect of changing both, to see whether they influence each other.",
                "Figure 5 shows how the solution quality depends on both the <br>resource</br> ratio and the network degree.",
                "This graph confirms the results that the GDAP performs better for problems with higher degree and higher <br>resource</br> ratio.",
                "However, it is now also more clear that it performs better for very low degree and <br>resource</br> availability.",
                "For this experiment with 40 agents and 20 tasks, the worst performance is met for instances with degree six and <br>resource</br> ratio 0.6 to instances with degree twelve and <br>resource</br> ratio 0.3.",
                "But even for those instances, the performance lies above 0.7. 2 The consistent standard deviation of about 15% over the 20 problem instances is not displayed as error-bars in these first graphs, because it would obfuscate the interesting correlations that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Relative reward small-world Average degree <br>resource</br> ratio Relative reward Figure 5: The quality of the GDAP depends on both the <br>resource</br> ratio and the network degree. 5.2.2 Experiment 2 To study the robustness of the GDAP against different problem settings, we generate instances where the task benefit distribution is different: 40% of the tasks gets a 10 times higher benefit (as described in Setting 2).",
                "The effect of this different distribution can be seen in Figure 6.",
                "These two graphs show that the results for the skewed task benefit distribution are slightly better on average, both when varying the <br>resource</br> ratio, and when varying the average degree of the network.",
                "We argue that this can be explained by the greedy nature of GDAP, which causes the tasks with high efficiency to be allocated first, and makes the algorithm perform better in this heterogeneous setting. 5.2.3 Experiment 3 The purpose of this final experiment is to test whether the algorithm can be scaled to large problems, like applications running on the internet.",
                "We therefore generate instances where the number of agents varies from 100 to 2000, and simultaneously increase the number of tasks from 166 to 3333 (Setting 3).",
                "Figure 7 shows the run time for these instances on a Linux machine with an AMD Opteron 2.4 GHz processor.",
                "These graphs confirm the theoretical analysis from the previous section, saying that both the upper bound and the GDAP are polynomial.",
                "In fact, the graphs show that the GDAP almost behaves linearly.",
                "Here we see that the locality of the GDAP really helps in reducing the computation time.",
                "Also note that the GDAP requires even less computation time than the upper bound.",
                "The quality of the GDAP for these large instances cannot be compared to the optimal solution.",
                "Therefore, in Figure 8 the upper bound is used instead.",
                "This result shows that the GDAP behaves stably and consistently well with the increasing problem size.",
                "It also shows once more that the GDAP performs better in a small-world network. 6.",
                "RELATED WORK Task allocation in multiagent systems has been investigated by many researchers in recent years with different assumptions and emphases.",
                "However, most of the research to date on task allocation does not consider social connections among agents, and studies the problem in a centralized The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal <br>resource</br> ratio skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free Figure 6: The quality of the GDAP algorithm for a uniform and a skewed task benefit distribution related to the <br>resource</br> ratio (the first graph), and the network degree (the second graph). setting.",
                "For example, Kraus et al. [12] develop an auction protocol that enables agents to form coalitions with time constraints.",
                "It assumes each agent knows the capabilities of all others.",
                "The proposed protocol is centralized, where one manager is responsible for allocating the tasks to all coalitions.",
                "Manisterski at al. [14] discuss the possibilities of achieving efficient allocations in both cooperative and noncooperative settings.",
                "They propose a centralized algorithm to find the optimal solution.",
                "In contrast to this work, we introduce also an efficient completely distributed protocol that takes the social network into account.",
                "Task allocation has also been studied in distributed settings by for example Shehory and Kraus [18] and by Lerman and Shehory [13].",
                "They propose distributed algorithms with low communication complexity for forming coalitions in large-scale multiagent systems.",
                "However, they do not assume the existence of any agent network.",
                "The work of Sander et al. [16] introduces computational geometry-based algorithms for distributed task allocation in geographical domains.",
                "Agents are then allowed to move and actively search for tasks, and the capability of agents to perform tasks is homogeneous.",
                "In order to apply their approach, agents need to have some knowledge about the geographical positions of tasks and some other agents.",
                "Other work [17] proposes a location mechanism for open multiagent systems to allocate tasks to unknown agents.",
                "In this approach each agent caches a list of agents they know.",
                "The analysis of the communication complexity of this method is based on lattice-like graphs, while we investigate how to efficiently solve task allocation in a social network, whose topology can be arbitrary.",
                "Networks have been employed in the context of task allocation in some other works as well, for example to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time(ms) Agents upper bound - small-world upper bound - random upper bound - scale-free GDAP - small-world GDAP - random GDAP - scale-free Figure 7: The run time of the GDAP algorithm. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Rewardrelativetoupperbound Agents small-world random scale-free Figure 8: The quality of the GDAP algorithm compared to the upper bound. interactions between agents and mediators [1].",
                "Mediators in this context are agents who receive the task and have connections to other agents.",
                "They break up the task into subtasks, and negotiate with other agents to obtain commitments to execute these subtasks.",
                "Their focus is on modeling the decision process of just a single mediator.",
                "Another approach is to partition the network into cliques of nodes, representing coalitions which the agents involved may use as a coordination mechanism [20].",
                "The focus of that work is distributed coalition formation among agents, but in our approach, we do not need agents to form groups before allocating tasks.",
                "Easwaran and Pitt [6] study complex tasks that require services for their accomplishment.",
                "The problem concerns the allocation of subtasks to service providers in a supply chain.",
                "Another study of task allocation in supply chains is [21], where it is argued that the defining characteristic of Supply Chain Formation is hierarchical subtask decomposition (HSD).",
                "HSD is implemented using task dependency networks (TDN), with agents and goods as nodes, and I/O relations between them as edges.",
                "Here, the network is given, and the problem is to select a subgraph, for which the authors propose a market-based algorithm, in particular, a series of auctions.",
                "Compared to these works, our approach is more general in the sense that we are able to model different types of connections or constraints among agents for different problem domains in addition to supply chain formation.",
                "Finally, social networks have been used in the context of team formation.",
                "Previous work has shown how to learn which relations are more beneficial in the long run [8], and adapt the social network accordingly.",
                "We believe these results can be transferred to the domain of task allocation as well, leaving this as a topic for further study. 506 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 7.",
                "CONCLUSIONS In this paper we studied the task allocation problem in a social network (STAP), which can be seen as a new, more general, variant of the TAP.",
                "We believe it has a great amount of potential for realistic problems.",
                "We provided complexity results on computing the efficient solution for the STAP, as well as a bound on possible approximation algorithms.",
                "Next, we presented a distributed protocol, related to the contractnet protocol.",
                "We also introduced an exponential algorithm to compute the optimal solution, as well as a fast upperbound algorithm.",
                "Finally, we used the optimal solution and the upper-bound (for larger instances) to conduct an extensive set of experiments to assess the solution quality and the computational efficiency of the proposed distributed algorithm in different types of networks, namely, small-world networks, random networks, and scale-free networks.",
                "The results presented in this paper show that the distributed algorithm performs well in small-world, scale-free, and random networks, and for many different settings.",
                "Also other experiments were done (e.g. on grid networks) and these results held up over a wider range of scenarios.",
                "Furthermore, we showed that it scales well to large networks, both in terms of quality and of required computation time.",
                "The results also suggest that small-world networks are slightly better suited for local task allocation, because there are no nodes with very few neighbors.",
                "There are many interesting extensions to our current work.",
                "In this paper, we focus on the computational aspect in the design of the distributed algorithm.",
                "In our future work, we would also like to address some of the related issues in game theory, such as strategic agents, and show desirable properties of a distributed protocol in such a context.",
                "In the current algorithm we assume that agents can only contact their neighbors to request resources, which may explain why our algorithm performs not as good in the scalefree networks as in the small-world networks.",
                "Our future work may allow agents to reallocate (sub)tasks.",
                "We are interested in seeing how such interactions will affect the performance of task allocation in different social networks.",
                "A third interesting topic for further work is the addition of reputation information among the agents.",
                "This may help to model changing business relations and incentivize agents to follow the protocol.",
                "Finally, it would be interesting to study real-life instances of the social task allocation problem, and see how they relate to the randomly generated networks of different types studied in this paper.",
                "Acknowledgments.",
                "This work is supported by the Technology Foundation STW, applied science division of NWO, and the Ministry of Economic Affairs. 8.",
                "REFERENCES [1] S. Abdallah and V. Lesser.",
                "Modeling Task Allocation Using a Decision Theoretic Model.",
                "In Proc.",
                "AAMAS, pages 719-726.",
                "ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson, and D. Zuckerman.",
                "Derandomized Graph Products.",
                "Computational Complexity, 5(1):60-75, 1995. [3] A.-L. Barab´asi and R. Albert.",
                "Emergence of scaling in random networks.",
                "Science, 286(5439):509-512, 1999. [4] R. H. Coase.",
                "The Nature of the Firm.",
                "Economica NS, 4(16):386-405, 1937. [5] R. H. Coase.",
                "My Evolution as an Economist.",
                "In W. Breit and R. W. Spencer, editors, Lives of the Laureates, pages 227-249.",
                "MIT Press, 1995. [6] A. M. Easwaran and J. Pitt.",
                "Supply Chain Formation in Open, Market-Based Multi-Agent Systems.",
                "International J. of Computational Intelligence and Applications, 2(3):349-363, 2002. [7] I.",
                "Foster, N. R. Jennings, and C. Kesselman.",
                "Brain Meets Brawn: Why Grid and Agents Need Each Other.",
                "In Proc.",
                "AAMAS, pages 8-15, Washington, DC, USA, 2004.",
                "IEEE Computer Society. [8] M. E. Gaston and M. desJardins.",
                "Agent-organized networks for dynamic team formation.",
                "In Proc.",
                "AAMAS, pages 230-237, New York, NY, USA, 2005.",
                "ACM Press. [9] A. Goldberg.",
                "An Efficient Implementation of a Scaling Minimum-Cost Flow Algorithm.",
                "J. of Algorithms, 22:1-29, 1997. [10] R. Gulati.",
                "Does Familiarity Breed Trust?",
                "The Implications of Repeated Ties for Contractual Choice in Alliances.",
                "Academy of Management Journal, 38(1):85-112, 1995. [11] T. Klos and B. Nooteboom.",
                "Agent-based Computational Transaction Cost Economics.",
                "Economic Dynamics and Control, 25(3-4):503-526, 01. [12] S. Kraus, O. Shehory, and G. Taase.",
                "Coalition formation with uncertain heterogeneous information.",
                "In Proc.",
                "AAMAS, pages 1-8.",
                "ACM, 2003. [13] K. Lerman and O. Shehory.",
                "Coalition formation for large-scale electronic markets.",
                "In Proc.",
                "ICMAS, pages 167-174.",
                "IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus, and N. Jennings.",
                "Forming Efficient Agent Groups for Completing Complex Tasks.",
                "In Proc.",
                "AAMAS, pages 257-264.",
                "ACM, 2006. [15] J. Patel et al.",
                "Agent-Based Virtual Organizations for the Grid.",
                "Multi-Agent and Grid Systems, 1(4):237-249, 2005. [16] P. V. Sander, D. Peleshchuk, and B. J. Grosz.",
                "A scalable, distributed algorithm for efficient task allocation.",
                "In Proc.",
                "AAMAS, pages 1191-1198, New York, NY, USA, 2002.",
                "ACM Press. [17] O. Shehory.",
                "A scalable agent location mechanism.",
                "In Proc.",
                "ATAL, volume 1757 of LNCS, pages 162-172.",
                "Springer, 2000. [18] O. Shehory and S. Kraus.",
                "Methods for Task Allocation via Agent Coalition Formation.",
                "Artificial Intelligence, 101(1-2):165-200, 1998. [19] R. M. Sreenath and M. P. Singh.",
                "Agent-based service selection.",
                "Web Semantics, 1(3):261-279, 2004. [20] P. T. Toˇsi´c and G. A. Agha.",
                "Maximal Clique Based Distributed Coalition Formation for Task Allocation in Large-Scale Multi-Agent Systems.",
                "In Proc.",
                "MMAS, volume 3446 of LNAI, pages 104-120.",
                "Springer, 2005. [21] W. E. Walsh and M. P. Wellman.",
                "Modeling Supply Chain Formation in Multiagent Systems.",
                "In Proc.",
                "AMEC II, volume 1788 of LNAI, pages 94-101.",
                "Springer, 2000. [22] D. J. Watts and S. H. Strogatz.",
                "Collective dynamics of small world networks.",
                "Nature, 393:440-442, 1998.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 507"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Introducción Los últimos años han visto mucho trabajo en tareas y métodos de asignación de \"recursos\", que potencialmente pueden aplicarse a muchas aplicaciones del mundo real.",
                "Sea r = {r1 ,..., rk} denota la colección de los tipos de \"recursos\" disponibles para los agentes A.",
                "Cada agente A ∈ A controla una cantidad fija de recursos para cada tipo de \"recurso\" en R, que se define por una función de \"recurso\": RSC: A × R → N. Además, suponemos que los agentes están conectados por una red social.",
                "Cada tarea t ∈ T se define por una tupla u (t), rsc (t), loc (t), donde u (t) es la utilidad obtenida si se realiza la tarea t, y la función de \"recurso\" RSC: t× R → N Especifica la cantidad de recursos necesarios para el logro de la tarea t.Además, una función de ubicación LOC: T → A define las ubicaciones (es decir, agentes) en las que las tareas llegan a la red social.",
                "Asignamos a cada agente en G un \"recurso\", que está relacionado con el nodo o el borde en el gráfico G, es decir, para cada v ∈ V, RSC (av) = {V} (aquí escribimos RSC (a) yRSC (t) representar el conjunto de recursos disponibles para/requerido por A y T), y para cada e ∈ E, RSC (AE) = {E}.",
                "Cree un problema de flujo de red para cada tipo de \"recurso\" r ∈ R (por separado) de la siguiente manera: (a) Cree una fuente S y un sumidero S.(b) Para cada agente a ∈ A, cree un nodo de agente y un borde de S a este nodo con capacidad igual a la cantidad de recursos de tipo R que tiene el agente A.(c) Para cada tarea t ∈ T, cree un nodo de tarea y un borde de este nodo a S con una capacidad igual a la cantidad de recursos de la tarea T de tipo R requiere.(d) Para cada agente A conecte el nodo del agente a todos los nodos de tareas de las tareas vecinas, es decir, t ∈ {t ∈ T |(a, loc (t)) ∈ Ae}.",
                "Para establecer la calidad de nuestro protocolo para grandes instancias, utilizamos el siguiente método para determinar un límite superior.4.3 Bound superior para la asignación de tareas sociales Dado un problema de asignación de tareas sociales, si el número de tipos de \"recursos\" para cada tarea t ∈ T está limitado por 1, el algoritmo 3 un límite superior para la asignación de tareas sociales (UB).",
                "Para cada agente a ∈ A y cada tipo de \"recurso\" ri ∈ R, cree un agente: el nodo de \"recurso\" ai, y un borde de s a este nodo con capacidad igual a la cantidad de recursos del tipo R agente A ha disponible ycon costos 0. 3.",
                "Para cada tarea t ∈ T y cada tipo de \"recurso\" ri ∈ R, cree una tarea: el nodo \"recurso\" TI, y un borde de este nodo a s con capacidad igual a la cantidad de recursos de la tarea T de tipo R requiere y los costos−E (t).4.",
                "Para cada tipo de \"recurso\" ri ∈ R y para cada agente A conecte el agente: el nodo \"recurso\" ai a todos los nodos de recursos de tareas ti para tareas vecinas t ∈ {t ∈ T |(a, loc (t)) ∈ Ae o a = loc (t)}."
            ],
            "translated_text": "",
            "candidates": [
                "recurso",
                "recursos",
                "recurso",
                "recursos",
                "recurso",
                "recurso",
                "recurso",
                "recurso",
                "recurso",
                "recurso",
                "recurso",
                "recurso",
                "recurso",
                "recurso",
                "recursos",
                "Recurso",
                "recurso",
                "recurso",
                "Recurso",
                "recurso",
                "recurso",
                "recurso",
                "recurso",
                "recurso"
            ],
            "error": []
        },
        "computational complexity": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Distributed Task Allocation in Social Networks Mathijs de Weerdt Delft Technical University Delft, The Netherlands M.M.deWeerdt@tudelft.nl Yingqian Zhang Delft Technical University Delft, The Netherlands Yingqian.Zhang@tudelft.nl Tomas Klos Center for Mathematics and Computer Science (CWI) Amsterdam, The Netherlands tomas.klos@cwi.nl ABSTRACT This paper proposes a new variant of the task allocation problem, where the agents are connected in a social network and tasks arrive at the agents distributed over the network.",
                "We show that the complexity of this problem remains NPhard.",
                "Moreover, it is not approximable within some factor.",
                "We develop an algorithm based on the contract-net protocol.",
                "Our algorithm is completely distributed, and it assumes that agents have only local knowledge about tasks and resources.",
                "We conduct a set of experiments to evaluate the performance and scalability of the proposed algorithm in terms of solution quality and computation time.",
                "Three different types of networks, namely small-world, random and scale-free networks, are used to represent various social relationships among agents in realistic applications.",
                "The results demonstrate that our algorithm works well and that it scales well to large-scale applications.",
                "Categories and Subject Descriptors I.2.11 [Distributed Artificial Intelligence]: Multiagent systems General Terms Algorithms, Experimentation 1.",
                "INTRODUCTION Recent years have seen a lot of work on task and resource allocation methods, which can potentially be applied to many real-world applications.",
                "However, some interesting applications where relations between agents play a role require a slightly more general model.",
                "Such situations appear very frequently in real-world scenarios, and recent technological developments are bringing more of them within the range of task allocation methods.",
                "Especially in business applications, preferential partner selection and interaction is very common, and this aspect becomes more important for task allocation research, to the extent that technological developments need to be able to support it.",
                "For example, the development of semantic web and grid technologies leads to increased and renewed attention for the potential of the web to support business processes [7, 15].",
                "As an example, virtual organizations (VOs) are being re-invented in the context of the grid, where they are composed of a number of autonomous entities (representing different individuals, departments and organizations), each of which has a range of problem-solving capabilities and resources at its disposal [15, p. 237].",
                "The question is how VOs are to be dynamically composed and re-composed from individual agents, when different tasks and subtasks need to be performed.",
                "This would be done by allocating them to different agents who may each be capable of performing different subsets of those tasks.",
                "Similarly, supply chain formation (SCF) is concerned with the, possibly ad-hoc, allocation of services to providers in the supply chain, in such a way that overall profit is optimized [6, 21].",
                "Traditionally, such allocation decisions have been analyzed using transaction cost economics (TCE) [4], which takes the transaction between consecutive stages of development as its basic unit of analysis, and considers the firm and the market as alternative structural forms for organizing transactions. (Transaction cost) economics has traditionally built on analysis of comparative statics: the central problem of economic organization is considered to be the adaptation of organizational forms to the characteristics of transactions.",
                "More recently, TCEs founding father, Ronald Coase, acknowledged that this is too simplistic an approach [5, p. 245]: The analysis cannot be confined to what happens within a single firm. (. . . )",
                "What we are dealing with is a complex interrelated structure.",
                "In this paper, we study the problem of task allocation from the perspective of such a complex interrelated structure.",
                "In particular, the market cannot be considered as an organizational form without considering specific partners to interact with on the market [11].",
                "Specifically, therefore, we consider agents to be connected to each other in a social network.",
                "Furthermore, this network is not fully connected: as informed by the business literature, firms typically have established working relations with limited numbers of preferred partners [10]; these are the ones they consider when new tasks arrive and they have to form supply chains to allocate those tasks [19].",
                "Other than modeling the interrelated 500 978-81-904262-7-5 (RPS) c 2007 IFAAMAS structure between business partners, the social network introduced in this paper can also be used to represent other types of connections or constraints among autonomous entities that arise from other application domains.",
                "The next section gives a formal description of the task allocation problem on social networks.",
                "In Section 3, we prove that the complexity of this problem remains NP-hard.",
                "We then proceed to develop a distributed algorithm in Section 4, and perform a series of experiments with this algorithm, as described in Section 5.",
                "Section 6 discusses related work, and Section 7 concludes. 2.",
                "PROBLEM DESCRIPTION We formulate the social task allocation problem in this section.",
                "There is a set A of agents: A = {a1, . . . , am}.",
                "Agents need resources to complete tasks.",
                "Let R = {r1, . . . , rk} denote the collection of the resource types available to the agents A.",
                "Each agent a ∈ A controls a fixed amount of resources for each resource type in R, which is defined by a resource function: rsc : A × R → N. Moreover, we assume agents are connected by a social network.",
                "Definition 1 (Social network).",
                "An agent social network SN = (A, AE) is an undirected graph, where vertices A are agents, and each edge (ai, aj) ∈ AE indicates the existence of a social connection between agents ai and aj.",
                "Suppose a set of tasks T = {t1, t2, . . . , tn} arrives at such an agent social network.",
                "Each task t ∈ T is then defined by a tuple u(t), rsc(t), loc(t) , where u(t) is the utility gained if task t is accomplished, and the resource function rsc : T ×R → N specifies the amount of resources required for the accomplishment of task t. Furthermore, a location function loc : T → A defines the locations (i.e., agents) at which the tasks arrive in the social network.",
                "An agent a that is the location of a task t, i.e. loc(t) = a, is called the manager of this task.",
                "Each task t ∈ T needs some specific resources from the agents in order to complete the task.",
                "The exact assignment of tasks to agents is defined by a task allocation.",
                "Definition 2 (Task allocation).",
                "Given a set of tasks T = {t1, . . . , tn} and a set of agents A = {a1, . . . , am} in a social network SN, a task allocation is a mapping φ : T × A × R → N. A valid task allocation in SN must satisfy the following constrains: • A task allocation must be correct.",
                "Each agent a ∈ A cannot use more than its available resources, i.e. for each r ∈ R, P t∈T φ(t, a, r) ≤ rsc(a, r). • A task allocation must be complete.",
                "For each task t ∈ T , either all allocated agents resources are sufficient, i.e. for each r ∈ R, P a∈A φ(t, a, r) ≥ rsc(t, r), or t is not allocated, i.e. φ(t, ·, ·) = 0. • A task allocation must obey the social relationships.",
                "Each task t ∈ T can only be allocated to agents that are (direct) neighbors of agent loc(t) in the social network SN.",
                "Each such agent that can contribute to a task is called a contractor.",
                "We write Tφ to represent the tasks that are fully allocated in φ.",
                "The utility of φ is then the summation of the utilities of each task in Tφ, i.e., Uφ = P t∈Tφ u(t).",
                "Using this notation, we define the efficient task allocation below.",
                "Definition 3 (Efficient task allocation).",
                "We say a task allocation φ is efficient if it is valid and Uφ is maximized, i.e., Uφ = max( P t∈Tφ u(t)).",
                "We are now ready to define the task allocation problem in social network that we study in this paper.",
                "Definition 4 (Social task allocation problem).",
                "Given a set of agents A connected by a social network SN = (A, AE), and a finite set of tasks T , the social task allocation problem (or STAP for short) is the problem of finding the efficient task allocation φ, such that φ is valid and the social welfare Uφ is maximized. 3.",
                "COMPLEXITY RESULTS The traditional task allocation problem, TAP (without the condition of the social network SN), is NP-complete [18], and the complexity comes from the fact that we need to evaluate the exponential number of subsets of the task set.",
                "Although we may consider the TAP as a special case of the STAP by assuming agents are fully connected, we cannot directly use the complexity results from the TAP, since we study the STAP in an arbitrary social network, which, as we argued in the introduction, should be partially connected.",
                "We now show that the TAP with an arbitrary social network is also NP-complete, even when the utility of each task is 1, and the quantity of all required and available resources is 1.",
                "Theorem 1.",
                "Given the social task allocation problem with an arbitrary social network, as defined in Definition 4, the problem of deciding whether a task allocation φ with utility more than k exists is NP-complete.",
                "Proof.",
                "We first show that the problem is in NP.",
                "Given an instance of the problem and an integer k, we can verify in polynomial time whether an allocation φ is a valid allocation and whether the utility of φ is greater than k. We now prove that the STAP is NP-hard by showing that MAXIMUM INDEPENDENT SET ≤P STAP.",
                "Given an undirected graph G = (V, E) and an integer k, we construct a network G = (V , E ) which has an efficient task allocation with k tasks of utility 1 allocated if and only if G has an independent set (IS) of size k. av1 av3 ae3 rsc(ae1 ) = {e1} rsc(ae4 ) = {e4} av4 ae2 av2 ae4 ae1 rsc(ae2 ) = {e2}{e3} rsc(av3 ) = {v3} rsc(av4 ) = {v4} t1 = {v1, e1, e3} t2 = {v2, e1, e2} rsc(ae3 ) = rsc(av1 ) = {v1} rsc(av2 ) = {v2} t3 = {v3, e3, e4} t4 = {v4, e2, e4} e1 e2 e4 e3 v1 v2 v4v3 Figure 1: The MIS problem can be reduced to the STAP.",
                "The left figure is an undirected graph G, which has the optimal solution {v1, v4} or {v2, v3}; the right figure is the constructed instance of the STAP, where the optimal allocation is {t1, t4} or {t2, t3}.",
                "An instance of the following construction is shown in Figure 1.",
                "For each node v ∈ V and each edge e ∈ E in the graph G, we create a vertex agent av and an edge agent ae in G .",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 501 When v was incident to e in G we correspondingly add an edge e in G between av and ae.",
                "We assign each agent in G one resource, which is related to the node or the edge in the graph G, i.e., for each v ∈ V , rsc(av) = {v} (here we write rsc(a) and rsc(t) to represent the set of resources available to/required by a and t), and for each e ∈ E, rsc(ae) = {e}.",
                "Each vertex agent avi in G has a task ti that requires a set of neighboring resources ti = {vi} ∪ {e|e = (u, vi) ∈ E}.",
                "There is no task on the edge agents in G .",
                "We define utility 1 for each task, and the quantity of all required and available resources to be 1.",
                "Taken an instance of the IS problem, suppose there is a solution of size k, i.e., a subset N ⊆ V such that no two vertices in N are joined by an edge in E and |N| = k. N specifies a set of vertex agents AN in the corresponding graph G .",
                "Given two agents a1, a2 ∈ AN we now know that there is no edge agent ae connected to both a1 and a2.",
                "Thus, for each agent a ∈ AN , a assigns its task to the edge agents which are connected to a.",
                "All other vertex agents a /∈ AN are not able to assign their tasks, since the required resources of the edge agents are already used by the agents a ∈ AN .",
                "The set of tasks of the agents AN (|AN | = k) is thus the maximum set of tasks that can be allocated.",
                "The utility of this allocation is k. Similarly, if there is a solution for the STAP with the utility value k, and the allocated task set is N, then for the IS problem, there exists a maximum independent set N of size k in G. An example can be found in Figure 1.",
                "We just proved that the STAP is NP-hard for an arbitrary graph.",
                "In our proof, the complexity comes from the introduction of a social network.",
                "One may expect that the complexity of this problem can be reduced for some networks where the number of neighbors of the agents is bounded by a fixed constant.",
                "We now give a complexity result on this class of networks as follows.",
                "Theorem 2.",
                "Let the number of neighbors of each agent in the social network SN be bounded by Δ for Δ ≥ 3.",
                "Computing the efficient task allocation given such a network is NP-complete.",
                "In addition, it is not approximable within Δε for some ε > 0.",
                "Proof.",
                "It has been shown in [2] that the maximum independent set problem in the case of the degree bounded by Δ for Δ ≥ 3 is NP-complete and is not approximable within Δε for some ε > 0.",
                "Using the similar reduction from the proof of Theorem 1, this result also holds for the STAP.",
                "Since our problem is as hard as MIS as shown in Theorem 1, it is not possible to give a worst case bound better than Δε for any polynomial time algorithm, unless P = NP. 4.",
                "ALGORITHMS To deal with the problem of allocating tasks in a social network, we present a distributed algorithm.",
                "We introduce this algorithm by describing the protocol for the agents.",
                "After that we give the optimal, centralized algorithm and an upper bound algorithm, which we use in Section 5 to benchmark the quality of our distributed algorithm. 4.1 Protocol for distributed task allocation We can summarize the description of the task allocation problem in social networks from Section 2 as follows.",
                "We Algorithm 1 Greedy distributed allocation protocol (GDAP).",
                "Each manager a calculates the efficiency e(t) for each of their tasks t ∈ Ta, and then while Ta = ∅: 1.",
                "Each manager a selects the most efficient task t ∈ Ta such that for each task t ∈ Ta: e(t ) ≤ e(t). 2.",
                "Each manager a requests help for t from all its neighbors (of a) by informing these neighbors of the efficiency e(t) and the required resources for t. 3.",
                "Contractors receive and store all requests, and then offer all relevant resources to the manager for the task with the highest efficiency. 4.",
                "The managers that have received sufficient offers allocate their tasks, and inform each contractor which part of the offer is accepted.",
                "When a task is allocated, or when a manager has received offers from all neighbors, but still cannot satisfy its task, the task is removed from the task list Ta. 5.",
                "Contractors update their used resources. have a (social) network of agents.",
                "Each agent has a set of resources of different types at its disposal.",
                "We also have a set of tasks.",
                "Each task requires some resources, has a fixed benefit, and is located at a certain agent.",
                "This agent is called a manager.",
                "We only allow neighboring agents to help with a task.",
                "These agents are called contractors.",
                "Agents can fulfill the role of manager as well as contractor.",
                "The problem is to find out which tasks to execute, and which resources of which contractors to use for these tasks.",
                "The idea of the protocol is as follows.",
                "All manager agents a ∈ A try to find neighboring contractors to help them with their task(s) Ta = {ti ∈ T | loc(ti) = a}.",
                "They start with offering the task that is most efficient in terms of the ratio between benefit and required resources.",
                "Out of all tasks offered, contractors select the task with the highest efficiency, and send a bid to the related manager.",
                "A bid consists of all the resources the agent is able to supply for this task.",
                "If sufficient resources have been offered, the manager selects the required resources and informs all contractors of its choice.",
                "The efficiency of a task is defined as follows: Definition 5.",
                "The efficiency e of a task t ∈ T is defined by the utility of this task divided by the sum of all required resources: e(t) = u(t)P r∈R rsc(t,r) .",
                "A more detailed description of this protocol can be found in Algorithm 1.",
                "Here it is also defined how to determine when a task should not be offered anymore, because it is impossible to fulfill locally.",
                "Obviously, a task is also not offered anymore when it has been allocated.",
                "This protocol is such that, when no two tasks have exactly the same efficiency, in every iteration at least one task is removed from a task list.1 From this the computation and communication property of the algorithm follows.",
                "Proposition 1.",
                "For a STAP with n tasks and m agents, the run time of the distributed algorithm is O(nm), and the number of communication messages is O(n2 m). 1 Even when some tasks have the same efficiency, it is straightforward to make this result work.",
                "For example, the implementation can ensure that the contractors choose the task with the lowest task-id. 502 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) Algorithm 2 Optimal social task allocation (OPT).",
                "Repeat the following for each combination of tasks: 1.",
                "If the total reward for this combination is higher than any previous combination, test if this combination is feasible as follows: 2.",
                "Create a network flow problem for each resource type r ∈ R (separately) as follows: (a) Create a source s and a sink s . (b) For each agent a ∈ A create an agent node and an edge from s to this node with capacity equal to the amount of resources of type r agent a has. (c) For each task t ∈ T create a task node and an edge from this node to s with capacity equal to the amount of resources of type r task T requires. (d) For each agent a connect the agent node to all task nodes of neighboring tasks, i.e., t ∈ {t ∈ T | (a, loc(t)) ∈ AE}.",
                "Give this connection unlimited capacity. 3.",
                "Solve the maximum flow problem for the created flow networks.",
                "If the maximum flow in each network is equal to the total required resources of that type, the current combination of tasks is feasible.",
                "In that case, this is the current best combination of tasks.",
                "Proof.",
                "In the worst case, in each iteration exactly one task is removed from a task list, so there are n iterations.",
                "In each iteration in the worst case (i.e., a fully connected network), for each of the O(n) managers, O(m) messages are sent.",
                "Next the task with the highest efficiency can be selected by each contractor in O(n).",
                "Assigning an allocation can be done in O(m).",
                "This leads to a total of O(n + m) operations for each iteration, and thus O(n2 + nm) operations in total.",
                "The number of messages sent is O(n(nm + nm + nm)) = O(n2 m).",
                "We establish the quality of this protocol experimentally (in Section 5).",
                "Preferably, we compare the results to the optimal solution. 4.2 Optimal social task allocation The optimal task allocation algorithm should deal with the restrictions posed by the social network.",
                "For this NPcomplete problem we used an exponential brute-force algorithm to consider relevant combinations of tasks to execute.",
                "For each combination we use a maximum-flow algorithm to check whether the resources are sufficient for the selected subset of tasks.",
                "The flow network describes which resources can be used for which tasks, depending on the social network.",
                "If the maximum flow is equal to the sum of all resources required by the subset of tasks, we know that a feasible solution exists (see Algorithm 2).",
                "Clearly, we cannot expect this optimal algorithm to be able to find solutions for larger problem sizes.",
                "To establish the quality of our protocol for large instances, we use the following method to determine an upper bound. 4.3 Upper bound for social task allocation Given a social task allocation problem, if the number of resource types for every task t ∈ T is bounded by 1, the Algorithm 3 An upper bound for social task allocation (UB).",
                "Create a network flow problem with costs as follows: 1.",
                "Create a source s and a sink s . 2.",
                "For each agent a ∈ A and each resource type ri ∈ R, create an agent-resource node ai, and an edge from s to this node with capacity equal to the amount of resources of type r agent a has available and with costs 0. 3.",
                "For each task t ∈ T and each resource type ri ∈ R, create a task-resource node ti, and an edge from this node to s with capacity equal to the amount of resources of type r task t requires and costs −e(t). 4.",
                "For each resource type ri ∈ R and for each agent a connect the agent-resource node ai to all task-resource nodes ti for neighboring tasks t ∈ {t ∈ T | (a, loc(t)) ∈ AE or a = loc(t)}.",
                "Give this connection unlimited capacity and zero costs. 5.",
                "Create an edge directly from s to s with unlimited capacity and zero costs.",
                "Solve the minimum cost flow network problem for this network.",
                "The costs of the resulting network is an upper bound for the social task allocation problem. problem is polynomially solvable by transforming it to a flow network problem.",
                "Our method for efficiently calculating an upper bound for STAP makes use of this special case by converting any given STAP instance P into a new problem P where each task only has one resource type.",
                "More specifically, for every task t ∈ T with utility u(t), we do the following.",
                "Let m be the number of resource types {r1, . . . , rm} required by t. We then split t into a set of m tasks T = {t1, . . . , tm} where each task ti only has one unique resource type (of {r1, . . . , rm}) and each task has a fair share of the utility, i.e., the efficiency of t from Definition 5 times the amount of this resource type rsc(ti, ri).",
                "After polynomially performing this conversion for every task in T , the original problem P becomes the special case P .",
                "Note that the set of valid allocations in P is only a subset of the set of valid allocations in P , because it is now possible to partially allocate a task.",
                "From this it is easy to see that the solution of P gives an upper bound of the solution of the original problem P. To compute the optimal solution for P , we transform it to a minimum cost flow problem.",
                "We model the cost in the flow network by the negation of the new tasks utility.",
                "A polynomial-time implementation of a scaling minimum cost flow algorithm [9] is used for the computation.",
                "The resulting minimum cost flow represents a maximum allocation of the tasks for P .",
                "The detailed modeling is described in Algorithm 3.",
                "In the next section, we use this upper bound to estimate the quality of the GDAP for large-scale instances. 5.",
                "EXPERIMENTS We implemented the greedy distributed allocation protocol (GDAP), the optimal allocation algorithm (OPT), and the upper bound algorithm (UB) in Java, and tested them on a Linux PC.",
                "The purpose of these experiments is to study the performance of the distributed algorithm in different problem settings using different social networks.",
                "The perThe Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 503 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 2: The solution qualities of the GDAP and the upper bound depend on the resource ratio. 0 5 10 15 20 25 30 0 2 4 6 8 10 12 14 16 18 Numberofagents Degree small-world random scale-free Figure 3: The histogram of the degrees. formance measurements are the solution quality and computation time, where the solution quality (SQ) is computed as follows.",
                "When the number of tasks is small, we compare the output of the distributed algorithm with the optimal solution, i.e., SQ = GDAP OP T , but if it is not feasible to compute the optimal solution, we use the value returned by the upper bound algorithm for evaluation, i.e., SQ = GDAP UB .",
                "To see whether the latter is a good measure, we also compare the quality of the upper bound to the optimal solution for smaller problems.",
                "In the following, we describe the setup of all experiments, and present the results. 5.1 Experimental settings We consider several experimental environments.",
                "In all environments the agents are connected by a social network.",
                "In the experiments, three different networks are used to simulate the social relationships among agents in potential realworld problems.",
                "Small-world networks are networks where most neighbors of an agent are also connected to each other.",
                "For the experiments we use a method for generating random small-world networks proposed by Watts et al. [22], with a fixed rewiring probability p = 0.05.",
                "Scale-free networks have the property that a couple of nodes have many connections, and many nodes have only a small number of connections.",
                "To generate these we use the implementation in the JUNG library of the generator proposed by Barab´asi and Albert [3].",
                "We also generate random networks as follows.",
                "First we connect each agent to another agent such that all agents are connected.",
                "Next, we randomly add connections until the desired average degree has been reached.",
                "We now describe the different settings used in our experiments with both small and large-scale problems.",
                "Setting 1.",
                "The number of agents is 40, and the number of tasks is 20.",
                "The number of different resource types is bounded by 5, and the average number of resources required by a task is 30.",
                "Consequently, the total number of resources required by the tasks is fixed.",
                "However, the resources available to the agents are varied.",
                "We define the resource ratio to refer to the ratio between the total number of available resources and the total number of required resources.",
                "Resources are allocated uniformly to the agents.",
                "The average degrees of the networks may also change.",
                "In this setting the task benefits are distributed normally around the number of resources required.",
                "Setting 2.",
                "This setting is similar to Setting 1, but here we let the benefits of the tasks vary dramatically-40% of the tasks have around 10 times higher benefit than the other 60% of the tasks.",
                "Setting 3.",
                "This setting is for large-scale problems.",
                "The ratio between the number of agents and the number of tasks is set to 5/3, and the number of agents varies from 100 to 2000.",
                "We also fix the resource ratio to 1.2 and the average degree to 6.",
                "The number of different resource types is 20, and the average resource requirement of a tasks is 100.",
                "The task benefits are again normally distributed. 5.2 Experimental results The experiments are done with the three different settings in the three different networks mentioned before, where each recorded data is the average over 20 random instances. 5.2.1 Experiment 1 Experimental setting 1 is used for this set of experiments.",
                "We would like to see how the GDAP behaves in the different networks when the number of resources available to the agents is changing.",
                "We also study the behavior of our upper bound algorithm.",
                "For this experiment we fix the average number of neighbors (degree) in each network type to six.",
                "In Figure 2 we see how the quality of both the upper bound and the GDAP algorithm depends on the resource ratio.",
                "Remarkably, for lower resource ratios our GDAP is much closer to the optimal allocation than the upper bound.",
                "When the resource ratio grows above 1.5, the graphs of the upper bound and the GDAP converge, meaning that both are really close to the optimal solution.",
                "This can be explained by the fact that when plenty of resources are available, all tasks can be allocated without any conflicts.",
                "However, when resources are very scarce, the upper bound is much too optimistic, because it is based on the allocation of sub-tasks per resource type, and does not reason about how many of the tasks can actually be allocated completely.",
                "We also notice from the graph that the solution quality of the GDAP on all three networks is quite high (over 0.8) when the available resource is very limited (0.3).",
                "It drops below 0.8 with the increased ratio and goes up again once there are plenty of resources available (resource ratio 0.9).",
                "Clearly, if 504 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree small-world - upper bound random - upper bound scale-free - upper bound small-world - GDAP random - GDAP scale-free - GDAP Figure 4: The quality of the GDAP and the upper bound depend on the network degree. resources are really scarce, only a few tasks can be successfully allocated even by the optimal algorithm.",
                "Therefore, the GDAP is able to give quite a good allocation.",
                "Although the differences are minor, it can also be seen that the results for the small-world network are consistently slightly better than those of random networks, which in turn outperform scale-free networks.",
                "This can be understood by looking at the distribution of the agents degree, as shown in Figure 3.",
                "In this experiment, in the small-world network almost every manager has a degree of six.",
                "In random networks, the degree varies between one and about ten.",
                "However, in the scale-free network, most nodes have only three or four connections, and only a very few have up to twenty connections.",
                "As we will see in the next experiment, having more connections means getting better results.",
                "For the next experiment we fix the resource ratio to 1.0 and study the quality of both the upper bound and the GDAP algorithm related to the degree of the social network.",
                "The result can be found in Figure 4.",
                "In this figure we can see that a high average degree also leads to convergence of the upper bound and the GDAP.",
                "Obviously, when managers have many connections, it becomes easier to allocate tasks.",
                "An exception is, similar to what we have seen in Figure 2, that the solution of the GDAP is also very good if the connections are extremely limited (degree 2), due to the fact that the number of possibly allocated tasks is very small.",
                "Again we see that the upper bound is not that good for problems where resources are hard to reach, i.e. in social networks with a low average degree.2 Since the solution quality clearly depends on the resource ratio as well as on the degree of the social network, we study the effect of changing both, to see whether they influence each other.",
                "Figure 5 shows how the solution quality depends on both the resource ratio and the network degree.",
                "This graph confirms the results that the GDAP performs better for problems with higher degree and higher resource ratio.",
                "However, it is now also more clear that it performs better for very low degree and resource availability.",
                "For this experiment with 40 agents and 20 tasks, the worst performance is met for instances with degree six and resource ratio 0.6 to instances with degree twelve and resource ratio 0.3.",
                "But even for those instances, the performance lies above 0.7. 2 The consistent standard deviation of about 15% over the 20 problem instances is not displayed as error-bars in these first graphs, because it would obfuscate the interesting correlations that can now be seen. 4 6 8 10 12 14 16 0.4 0.6 0.8 1 1.2 1.4 1.6 0.7 0.75 0.8 0.85 0.9 0.95 1 Relative reward small-world Average degree Resource ratio Relative reward Figure 5: The quality of the GDAP depends on both the resource ratio and the network degree. 5.2.2 Experiment 2 To study the robustness of the GDAP against different problem settings, we generate instances where the task benefit distribution is different: 40% of the tasks gets a 10 times higher benefit (as described in Setting 2).",
                "The effect of this different distribution can be seen in Figure 6.",
                "These two graphs show that the results for the skewed task benefit distribution are slightly better on average, both when varying the resource ratio, and when varying the average degree of the network.",
                "We argue that this can be explained by the greedy nature of GDAP, which causes the tasks with high efficiency to be allocated first, and makes the algorithm perform better in this heterogeneous setting. 5.2.3 Experiment 3 The purpose of this final experiment is to test whether the algorithm can be scaled to large problems, like applications running on the internet.",
                "We therefore generate instances where the number of agents varies from 100 to 2000, and simultaneously increase the number of tasks from 166 to 3333 (Setting 3).",
                "Figure 7 shows the run time for these instances on a Linux machine with an AMD Opteron 2.4 GHz processor.",
                "These graphs confirm the theoretical analysis from the previous section, saying that both the upper bound and the GDAP are polynomial.",
                "In fact, the graphs show that the GDAP almost behaves linearly.",
                "Here we see that the locality of the GDAP really helps in reducing the computation time.",
                "Also note that the GDAP requires even less computation time than the upper bound.",
                "The quality of the GDAP for these large instances cannot be compared to the optimal solution.",
                "Therefore, in Figure 8 the upper bound is used instead.",
                "This result shows that the GDAP behaves stably and consistently well with the increasing problem size.",
                "It also shows once more that the GDAP performs better in a small-world network. 6.",
                "RELATED WORK Task allocation in multiagent systems has been investigated by many researchers in recent years with different assumptions and emphases.",
                "However, most of the research to date on task allocation does not consider social connections among agents, and studies the problem in a centralized The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 505 0.65 0.7 0.75 0.8 0.85 0.9 0.95 1 0.4 0.6 0.8 1 1.2 1.4 1.6 Rewardrelativetooptimal Resource ratio skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free 0.7 0.75 0.8 0.85 0.9 0.95 1 2 4 6 8 10 12 14 16 Rewardrelativetooptimal Degree skewed small-world skewed random skewed scale-free uniform small-world uniform random uniform scale-free Figure 6: The quality of the GDAP algorithm for a uniform and a skewed task benefit distribution related to the resource ratio (the first graph), and the network degree (the second graph). setting.",
                "For example, Kraus et al. [12] develop an auction protocol that enables agents to form coalitions with time constraints.",
                "It assumes each agent knows the capabilities of all others.",
                "The proposed protocol is centralized, where one manager is responsible for allocating the tasks to all coalitions.",
                "Manisterski at al. [14] discuss the possibilities of achieving efficient allocations in both cooperative and noncooperative settings.",
                "They propose a centralized algorithm to find the optimal solution.",
                "In contrast to this work, we introduce also an efficient completely distributed protocol that takes the social network into account.",
                "Task allocation has also been studied in distributed settings by for example Shehory and Kraus [18] and by Lerman and Shehory [13].",
                "They propose distributed algorithms with low communication complexity for forming coalitions in large-scale multiagent systems.",
                "However, they do not assume the existence of any agent network.",
                "The work of Sander et al. [16] introduces computational geometry-based algorithms for distributed task allocation in geographical domains.",
                "Agents are then allowed to move and actively search for tasks, and the capability of agents to perform tasks is homogeneous.",
                "In order to apply their approach, agents need to have some knowledge about the geographical positions of tasks and some other agents.",
                "Other work [17] proposes a location mechanism for open multiagent systems to allocate tasks to unknown agents.",
                "In this approach each agent caches a list of agents they know.",
                "The analysis of the communication complexity of this method is based on lattice-like graphs, while we investigate how to efficiently solve task allocation in a social network, whose topology can be arbitrary.",
                "Networks have been employed in the context of task allocation in some other works as well, for example to limit the 0 1000 2000 3000 4000 5000 6000 7000 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Time(ms) Agents upper bound - small-world upper bound - random upper bound - scale-free GDAP - small-world GDAP - random GDAP - scale-free Figure 7: The run time of the GDAP algorithm. 0.75 0.8 0.85 0.9 0.95 1 0 200 400 600 800 1000 1200 1400 1600 1800 2000 Rewardrelativetoupperbound Agents small-world random scale-free Figure 8: The quality of the GDAP algorithm compared to the upper bound. interactions between agents and mediators [1].",
                "Mediators in this context are agents who receive the task and have connections to other agents.",
                "They break up the task into subtasks, and negotiate with other agents to obtain commitments to execute these subtasks.",
                "Their focus is on modeling the decision process of just a single mediator.",
                "Another approach is to partition the network into cliques of nodes, representing coalitions which the agents involved may use as a coordination mechanism [20].",
                "The focus of that work is distributed coalition formation among agents, but in our approach, we do not need agents to form groups before allocating tasks.",
                "Easwaran and Pitt [6] study complex tasks that require services for their accomplishment.",
                "The problem concerns the allocation of subtasks to service providers in a supply chain.",
                "Another study of task allocation in supply chains is [21], where it is argued that the defining characteristic of Supply Chain Formation is hierarchical subtask decomposition (HSD).",
                "HSD is implemented using task dependency networks (TDN), with agents and goods as nodes, and I/O relations between them as edges.",
                "Here, the network is given, and the problem is to select a subgraph, for which the authors propose a market-based algorithm, in particular, a series of auctions.",
                "Compared to these works, our approach is more general in the sense that we are able to model different types of connections or constraints among agents for different problem domains in addition to supply chain formation.",
                "Finally, social networks have been used in the context of team formation.",
                "Previous work has shown how to learn which relations are more beneficial in the long run [8], and adapt the social network accordingly.",
                "We believe these results can be transferred to the domain of task allocation as well, leaving this as a topic for further study. 506 The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 7.",
                "CONCLUSIONS In this paper we studied the task allocation problem in a social network (STAP), which can be seen as a new, more general, variant of the TAP.",
                "We believe it has a great amount of potential for realistic problems.",
                "We provided complexity results on computing the efficient solution for the STAP, as well as a bound on possible approximation algorithms.",
                "Next, we presented a distributed protocol, related to the contractnet protocol.",
                "We also introduced an exponential algorithm to compute the optimal solution, as well as a fast upperbound algorithm.",
                "Finally, we used the optimal solution and the upper-bound (for larger instances) to conduct an extensive set of experiments to assess the solution quality and the computational efficiency of the proposed distributed algorithm in different types of networks, namely, small-world networks, random networks, and scale-free networks.",
                "The results presented in this paper show that the distributed algorithm performs well in small-world, scale-free, and random networks, and for many different settings.",
                "Also other experiments were done (e.g. on grid networks) and these results held up over a wider range of scenarios.",
                "Furthermore, we showed that it scales well to large networks, both in terms of quality and of required computation time.",
                "The results also suggest that small-world networks are slightly better suited for local task allocation, because there are no nodes with very few neighbors.",
                "There are many interesting extensions to our current work.",
                "In this paper, we focus on the computational aspect in the design of the distributed algorithm.",
                "In our future work, we would also like to address some of the related issues in game theory, such as strategic agents, and show desirable properties of a distributed protocol in such a context.",
                "In the current algorithm we assume that agents can only contact their neighbors to request resources, which may explain why our algorithm performs not as good in the scalefree networks as in the small-world networks.",
                "Our future work may allow agents to reallocate (sub)tasks.",
                "We are interested in seeing how such interactions will affect the performance of task allocation in different social networks.",
                "A third interesting topic for further work is the addition of reputation information among the agents.",
                "This may help to model changing business relations and incentivize agents to follow the protocol.",
                "Finally, it would be interesting to study real-life instances of the social task allocation problem, and see how they relate to the randomly generated networks of different types studied in this paper.",
                "Acknowledgments.",
                "This work is supported by the Technology Foundation STW, applied science division of NWO, and the Ministry of Economic Affairs. 8.",
                "REFERENCES [1] S. Abdallah and V. Lesser.",
                "Modeling Task Allocation Using a Decision Theoretic Model.",
                "In Proc.",
                "AAMAS, pages 719-726.",
                "ACM, 2005. [2] N. Alon, U. Feige, A. Wigderson, and D. Zuckerman.",
                "Derandomized Graph Products.",
                "<br>computational complexity</br>, 5(1):60-75, 1995. [3] A.-L. Barab´asi and R. Albert.",
                "Emergence of scaling in random networks.",
                "Science, 286(5439):509-512, 1999. [4] R. H. Coase.",
                "The Nature of the Firm.",
                "Economica NS, 4(16):386-405, 1937. [5] R. H. Coase.",
                "My Evolution as an Economist.",
                "In W. Breit and R. W. Spencer, editors, Lives of the Laureates, pages 227-249.",
                "MIT Press, 1995. [6] A. M. Easwaran and J. Pitt.",
                "Supply Chain Formation in Open, Market-Based Multi-Agent Systems.",
                "International J. of Computational Intelligence and Applications, 2(3):349-363, 2002. [7] I.",
                "Foster, N. R. Jennings, and C. Kesselman.",
                "Brain Meets Brawn: Why Grid and Agents Need Each Other.",
                "In Proc.",
                "AAMAS, pages 8-15, Washington, DC, USA, 2004.",
                "IEEE Computer Society. [8] M. E. Gaston and M. desJardins.",
                "Agent-organized networks for dynamic team formation.",
                "In Proc.",
                "AAMAS, pages 230-237, New York, NY, USA, 2005.",
                "ACM Press. [9] A. Goldberg.",
                "An Efficient Implementation of a Scaling Minimum-Cost Flow Algorithm.",
                "J. of Algorithms, 22:1-29, 1997. [10] R. Gulati.",
                "Does Familiarity Breed Trust?",
                "The Implications of Repeated Ties for Contractual Choice in Alliances.",
                "Academy of Management Journal, 38(1):85-112, 1995. [11] T. Klos and B. Nooteboom.",
                "Agent-based Computational Transaction Cost Economics.",
                "Economic Dynamics and Control, 25(3-4):503-526, 01. [12] S. Kraus, O. Shehory, and G. Taase.",
                "Coalition formation with uncertain heterogeneous information.",
                "In Proc.",
                "AAMAS, pages 1-8.",
                "ACM, 2003. [13] K. Lerman and O. Shehory.",
                "Coalition formation for large-scale electronic markets.",
                "In Proc.",
                "ICMAS, pages 167-174.",
                "IEEE Computer Society, 2000. [14] E. Manisterski, E. David, S. Kraus, and N. Jennings.",
                "Forming Efficient Agent Groups for Completing Complex Tasks.",
                "In Proc.",
                "AAMAS, pages 257-264.",
                "ACM, 2006. [15] J. Patel et al.",
                "Agent-Based Virtual Organizations for the Grid.",
                "Multi-Agent and Grid Systems, 1(4):237-249, 2005. [16] P. V. Sander, D. Peleshchuk, and B. J. Grosz.",
                "A scalable, distributed algorithm for efficient task allocation.",
                "In Proc.",
                "AAMAS, pages 1191-1198, New York, NY, USA, 2002.",
                "ACM Press. [17] O. Shehory.",
                "A scalable agent location mechanism.",
                "In Proc.",
                "ATAL, volume 1757 of LNCS, pages 162-172.",
                "Springer, 2000. [18] O. Shehory and S. Kraus.",
                "Methods for Task Allocation via Agent Coalition Formation.",
                "Artificial Intelligence, 101(1-2):165-200, 1998. [19] R. M. Sreenath and M. P. Singh.",
                "Agent-based service selection.",
                "Web Semantics, 1(3):261-279, 2004. [20] P. T. Toˇsi´c and G. A. Agha.",
                "Maximal Clique Based Distributed Coalition Formation for Task Allocation in Large-Scale Multi-Agent Systems.",
                "In Proc.",
                "MMAS, volume 3446 of LNAI, pages 104-120.",
                "Springer, 2005. [21] W. E. Walsh and M. P. Wellman.",
                "Modeling Supply Chain Formation in Multiagent Systems.",
                "In Proc.",
                "AMEC II, volume 1788 of LNAI, pages 94-101.",
                "Springer, 2000. [22] D. J. Watts and S. H. Strogatz.",
                "Collective dynamics of small world networks.",
                "Nature, 393:440-442, 1998.",
                "The Sixth Intl.",
                "Joint Conf. on Autonomous Agents and Multi-Agent Systems (AAMAS 07) 507"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "\"Complexidad computacional\", 5 (1): 60-75, 1995. [3] A.-L.Barab´asi y R. Albert."
            ],
            "translated_text": "",
            "candidates": [
                "complejidad computacional",
                "Complexidad computacional"
            ],
            "error": []
        }
    }
}