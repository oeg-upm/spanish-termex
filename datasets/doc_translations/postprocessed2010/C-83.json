{
    "id": "C-83",
    "original_text": "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT Collaborative document processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing. We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system. It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices. Each user is always served with upto-date documents and can organize his work based on document meta data. For this, we present our conceptual architecture for such a system and discuss it with an example. Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1. INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization. Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge. Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world. Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected. Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious. In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management. Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on. Such meta data can be gathered during the documents creation process and can be used versatilely. Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives. Meta data could be used to give the user the best possible view on the documents, dependent of his actual information. On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents. As far as we know, no system exists, that satisfies the aforementioned requirements. A very good overview about realtime communication and collaboration system is described in [7]. We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device. In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality. It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data. Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation. Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing. TeNDaX is a Text Native Database eXtension. It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions. Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users. With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently. Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2]. The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology. As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2. APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management. We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.). DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1. TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document. Additionally, meta data gathered during the whole document creation process enables sophisticated document management. With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device. The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1). The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice. The business logic layer represents the interface between the database and the word-processing application. It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment. The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors. The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1).. In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices. All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3]. Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way. Each character of a text document is stored as a single object in the database [3]. When storing text in such a native form, the performance of the employed database system is of crucial importance. The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7]. Figure 2 depicts the core database schema. By connecting a client to the database, a Session instance is created. One important attribute of the Session is the DocumentSession. This attribute refers to DocumentSession instances, which administrates all opened documents. For each opened document, a DocumentSession instance is created. The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2. TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document. The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document. Instances of the class FileNode either represent a folder node or a document node. The folder node corresponds to a folder of a file system and the document node to that of a file. Instances of the class Char represent the characters of a document. The value of a character is stored in the attribute CharacterValue. The sequence is defined by the attributes After and Before of the class Char. Particular instances of Char mark the beginning and the end of a document. The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database. Our editor does not have a replica of one part of the native text database in the sense of database replicas. Instead, it has a so-called image as its replica. Even if several authors edit the same text at the same time, they work on one unique document at all times. The system guarantees this unique view. Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document. When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection). The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager. Then, the editor as well connects to the real-time server component. The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate. Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document. Therefore, a special communication protocol is used: the update protocol. Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors. Messages are sent from the database to the real-time server component, which sends the messages to the affected editors. The update protocol consists of different message types. Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3. Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id. Class Model Figure 4 depicts the class model as well as the environment of the real-time server component. The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect. ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors. Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively. EditorWorker: This class manages the connections of type editor. The connection (a socket and its input and output stream) is stored in the SessionManager. SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure. DatabaseMessageWorker: This class is responsible for the connections of type database. At run-time, only one connection exists for each database. Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients. ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4. Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database. At the same time, more information about the current transaction is gathered. As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents. Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6]. All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents. This meta data can be used to create an alternative storage system for documents. In any case, it is not an easy task to change users familiarity to the well known hierarchical file system. This is also the main reason why we do not completely disregard the classical file system, but rather enhance it. Folders which correspond to the classical hierarchical file system will be called static folders. Folders where the documents are organized according to meta data, will be called dynamic folders. As all information is stored in the database, the file system, too, is based on the database. The dynamic folders build up sub-trees, which are guided by the meta data selected by the user. Thus, the first step in using a dynamic folder is the definition of how it should be built. For each level of a dynamic folder, exactly one meta data item is used to. The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used. As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder. Furthermore, for each meta data used, restrictions and granularity must be defined by the user; if no restrictions are defined, all accessible documents are listed. The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for. The directory names indicate which meta data determines the content of the sub-folder in question. At each level, the documents, which have so far been found to match the meta data, can be inspected. Table 1. Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and restrictions are possible in order to maximize search comfort for the user. It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis. Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3. VALIDATION The proposed architecture is validated on the example of a character insertion. Insert operations are the mostly used operations in a (collaborative) editing system. The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following. The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage. Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed. AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2. The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it. For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network. Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC). Editors are connected to one or more real-time server components and to the corresponding databases. Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1. Editor B now inserts a character into this document. The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section. After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1). RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown. Occurring collaboration conflicts are solved and described in [3]. 4. SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database. With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management. Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents. Document editing and managing is consequently enabled anywhere, anytime and with any device. The above-descried system is implemented in a running prototype. The system will be tested soon in line with a student workshop next autumn. REFERENCES [1] Abiteboul, S., Agrawal, R., et al.: The Lowell Database Research Self Assessment. Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing. IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing. Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing. ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents. ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management. Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication. Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time. Application Strategies: In-Depth Research Report. Burton Group, 2005. 47",
    "original_translation": "Concepto y arquitectura de un sistema de edición y gestión de documentos generalizados Stefania Leone Thomas B. Hodel Harald Gall Universidad de Zúrich, Universidad de Suiza de Zúrich, Universidad de Suiza de Zúrich, Departamento de Informática de Suiza de Departamento de Informática de Informática, LEONE@IFI.UNIZH.CH.CHhodel@ifi.unizh.ch Gall@ifi.unizh.ch El procesamiento de documentos colaborativos abstractos ha sido abordado por muchos enfoques hasta ahora, la mayoría de los cuales se centran en el versículo de documentos y la edición colaborativa. Abordamos este problema desde un ángulo diferente y describimos el concepto y la arquitectura de un sistema de edición y administración de documentos generalizados. Explota técnicas de base de datos y actualización en tiempo real para escenarios de colaboración sofisticados en múltiples dispositivos. Cada usuario siempre recibe documentos actualizados y puede organizar su trabajo en función de los meta datos de documentos. Para esto, presentamos nuestra arquitectura conceptual para dicho sistema y lo discutimos con un ejemplo. Categorías y descriptores de sujetos c.2.4 Sistemas distribuidos [redes de comunicación informática]: organización del sistema informático, sistemas distribuidos, aplicaciones distribuidas de gestión de términos generales, medición, documentación, economía, factores humanos 1. Introducción Los documentos de texto son un recurso valioso para prácticamente cualquier empresa y organización. Documentos como documentos, informes y documentos comerciales generales contienen una gran parte del conocimiento de hoy. Los documentos se almacenan principalmente en una estructura de carpeta jerárquica en los servidores de archivos y es difícil organizarlos con respecto a la clasificación, versiones, etc., aunque es de suma importancia que los usuarios puedan encontrar, recuperar y editar versiones actualizadas de documentossiempre que quieran y, de manera fácil de usar.1.1 La descripción del problema con la mayoría de los documentos de aplicaciones de procesamiento de palabras comúnmente utilizados pueden ser manipulados por un solo usuario a la vez: las herramientas para la edición y la gestión de documentos colaborativos generalizados rara vez se implementan en el mundo de hoy. A pesar del hecho de que las personas se esfuerzan por la independencia de ubicación y tiempo, la importancia del trabajo colaborativo generalizado, es decir, la edición y gestión de documentos colaborativos está totalmente descuidada. Por lo tanto, los documentos podrían verse como una fuente vulnerable en el mundo de hoy, que exige una solución apropiada: la necesidad de almacenar, recuperar y editar estos documentos en colaboración en cualquier momento, en todas partes y con casi todos los dispositivos adecuados y con mecanismos garantizados de seguridad, consistencia, disponibilidady el control de acceso, es obvio. Además, los sistemas de procesamiento de textos ignoran el hecho de que el historial de un documento de texto contiene información crucial para su gestión. Dichos meta datos incluyen fecha de creación, creador, autores, versión, información basada en la ubicación, como el tiempo y el lugar cuando/donde un usuario lee/edita un documento, etc. Dichos meta datos se pueden recopilar durante el proceso de creación de documentos y se pueden usar versatiliamente. Especialmente en el campo de la gestión generalizada de documentos, los meta datos son de importancia crucial, ya que ofrece formas totalmente nuevas de organizar y clasificar documentos: por un lado, la situación real de los usuarios influye en los objetivos de los usuarios. Los meta datos podrían usarse para dar al usuario la mejor vista posible de los documentos, dependiendo de su información real. Por otro lado, tan pronto como el usuario comienza a funcionar, es decir, lee o edita un documento, se pueden recopilar nuevos meta datos para que el sistema sea más adaptable y, en cierto sentido, para la situación de los usuarios y, para ofrecer a los usuarios futuros unMejor vista sobre los documentos. Hasta donde sabemos, no existe ningún sistema que satisfaga los requisitos antes mencionados. Una muy buena descripción sobre el sistema de comunicación y colaboración en tiempo real se describe en [7]. Por lo tanto, nos esforzamos por un sistema de edición y gestión de documentos generalizados, que permite la edición y administración de documentos generalizadas (y colaborativas): los usuarios deben poder leer y editar documentos cuando, donde sea, con quien sea y con cualquier dispositivo. En este documento, presentamos un procesamiento de textos en tiempo real basado en la base de datos colaborativa, que proporciona una funcionalidad de edición y gestión de documentos generalizados. Permite al usuario trabajar en documentos en colaboración y ofrece una sofisticada instalación de gestión de documentos: el usuario siempre recibe documentos actualizados y puede organizar y administrar documentos sobre la base de meta datos. Además, los datos del documento se tratan como ciudadano de primera clase de la base de datos como se exige en [1].1.2 Conceptos subyacentes El concepto de nuestro sistema de edición y gestión de documentos generalizados requiere una base arquitectónica apropiada. Nuestro concepto e implementación se basan en el sistema de edición y gestión de documentos basado en la base de datos Tendax [3] basado en la base de datos, que permite la edición y administración de documentos generalizados. Tendax es una extensión de base de datos nativa de texto. Permite el almacenamiento de texto en bases de datos en forma nativa para que la edición del texto finalmente se represente como transacciones en tiempo real. En el término edición de texto, entendemos lo siguiente: escribir y eliminar texto (caracteres), copiar y pegar texto, definir el diseño y estructura del texto, insertar notas, establecer derechos de acceso, definir procesos comerciales, insertar tablas, imágenes, etc., es decir, todosLas acciones realizadas regularmente por usuarios de procesamiento de textos. Con la transacción en tiempo real, queremos decir que la edición del texto (por ejemplo, escribir un carácter/palabra) invoca una o varias transacciones de base de datos para que todo, que se escribe, aparece dentro del editor tan pronto como estos objetos se almacenan de manera persistente. En lugar de crear archivos y almacenarlos en un sistema de archivos, el contenido y todos los meta datos que pertenecen a los documentos se almacenan de manera especial en la base de datos, que permite transacciones en tiempo real muy rápidas para todas las tareas de edición [2]. El esquema de la base de datos y las transacciones mencionadas anteriormente se crean de tal manera que todo se puede hacer dentro de un entorno multiusuario, como lo hace la tecnología de la base de datos. Como consecuencia, muchos de los logros (con respecto a la organización de datos y la consulta, la aplicación de la recuperación, la integridad y la seguridad, la operación múltiple, la gestión de distribución, el acceso a las herramientas uniformes, etc.) ahora, por medio de este enfoque, también están disponiblespara el procesamiento de textos.2. Enfoque nuestro sistema de edición y gestión generalizada se basa en el enfoque Tendax basado en la base de datos mencionado anteriormente, donde los datos de documentos se almacenan de forma nativa en la base de datos y admite la edición de texto colaborativa generalizada y la gestión de documentos. Definimos el sistema de edición y gestión de documentos generalizados, como un sistema, donde se puede acceder fácilmente a los documentos y manipularse en todas partes (dentro de la red), en cualquier momento (independientemente del número de usuarios que trabajan en el mismo documento) y con cualquier dispositivo (escritorio,cuaderno, PDA, teléfono móvil, etc.). DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 dB 1 dB 2 AS 2 AS 4 dB 4 A B C D E F G Figura 1. Arquitectura de la aplicación Tendax En contraste con los documentos almacenados localmente en el disco duro o en un servidor de archivos, nuestro sistema sirve automáticamente al usuario con la versión actualizada de un documento y los cambios realizados en el documento se almacenan persistentemente en la base de datos e inmediatamentepropagado a todos los clientes que trabajan en el mismo documento. Además, los meta datos recopilados durante todo el proceso de creación de documentos permiten una gestión sofisticada de documentos. Con la API de texto SQL como interfaz abstracta, este enfoque puede ser utilizado por cualquier herramienta y para cualquier dispositivo. El sistema se basa en los siguientes componentes (ver Figura 1): un editor en Java implementa la capa de presentación (A-G en la Figura 1). El objetivo de esta capa es la integración en una aplicación de procesamiento de palabras bien conocida como OpenOffice. La capa lógica de negocios representa la interfaz entre la base de datos y la aplicación de procesamiento de palabras. Consiste en los siguientes tres componentes: el servidor de aplicaciones (marcado como 1-4 en la Figura 1) permite la edición de texto dentro del entorno de la base de datos y se encarga de la conciencia, la seguridad, la gestión de documentos, etc., todo dentro de una colaboración en tiempo real y en tiempo realy entorno múltiple. El componente del servidor en tiempo real (marcado como RTSC 14 en la Figura 1) es responsable de la propagación de la información, es decir, actualizaciones entre todos los editores conectados. El motor de almacenamiento (capa de datos) almacena principalmente el contenido de los documentos, así como todos los meta datos relacionados dentro de las bases de datos de la base de datos se pueden distribuir en una red de igual a igual (DB 1-4 en la Figura 1). A continuación, presentaremos brevemente el esquema de la base de datos, el editor y el componente del servidor en tiempo real, así como el concepto de carpetas dinámicas, que permite la gestión sofisticada de documentos sobre la base de meta datos.2.1 Arquitectura de aplicaciones Un editor colaborativo en tiempo real basado en la base de datos permite abrir y editar el mismo documento simultáneamente en la misma computadora o en una red de varias computadoras y dispositivos móviles. Todos los problemas de concurrencia, así como la propagación de mensajes, se resuelven dentro de este enfoque, mientras que se están abriendo múltiples instancias del mismo documento [3]. Cada acción de inserción o eliminación es una transacción de base de datos y, como tal, se almacena inmediatamente de manera persistente en la base de datos y se propaga a todos los clientes que trabajan en el mismo documento.2.1.1 Esquema de la base de datos como se mencionó anteriormente que el texto se almacena de manera nativa. Cada personaje de un documento de texto se almacena como un solo objeto en la base de datos [3]. Al almacenar texto en una forma tan nativa, el rendimiento del sistema de base de datos empleado es de crucial importancia. Los problemas de concepto y rendimiento de dicha base de datos de texto se describen en [3], diseña colaborativa en [2], procesos comerciales de colaboración dinámica dentro de los documentos en [5], el modelo de metadatos de tiempo de creación de edición de texto en [6] y la relacióna bases de datos XML en [7]. La Figura 2 muestra el esquema de la base de datos central. Al conectar un cliente a la base de datos, se crea una instancia de sesión. Un atributo importante de la sesión es el documento. Este atributo se refiere a las instancias de documentos, que administra todos los documentos abiertos. Para cada documento abierto, se crea una instancia de DocumentSession. El Documentsession es importante para el componente del servidor en tiempo real, que, en el caso de un 42, es antes que después de que Char (ID) tiene TextElement (ID) con el que se utiliza el archivo interno (ID).IR CaracterValue (Unicode) tiene List (ID) inicio de inicio con los extremos con los fines con filesse ha usador (id) Última lectura por último escrito por creado por creado por style dtd (id) usa usos usos es utilizado por los autores en su descripción de contraseña imagenUserColors UserListSeCurity ha tiene ha hecho que tiene referencias de FileNode (ID)/ISREFERENEDY es dinámica dinámica Dynstructure NodeDetails ha es es NodeType es padre de HA de que el matriz tiene un rol (id) creado por el nombre por nombre ha descripción descripción de usuarId) ha es accessmatrix opción de lectura de lectura de la opción de escritura contiene los tiempos de acceso que se abren ... tiempos con ... por contenido/ispartof ir ir es ... e incluye el linaje (id) referencias después de que las referencias de CopyPaste (ID) se encuentran en la copia dees una copia de HasCopyPaste (ID) IS ActiveLength ha str (stream) ha insertado / insertado regularchar startchar el archivo endchar externalfile es desde el tipo de url (extensión) es de título que el título tiene documentos (ID) se abre ha abierto la sesión ha abierto (ID (ID) ISCONNECTADO con el lanzado por VersionNumber usa ha lectura opción de lectura La opción Gran Opción de escritura termina con IN IN IN IS es un único dtd (stream) ha name la columna (id) se ha establecido encendido/apagadoMarcado de perfil de nombre (ID) tiene un padre interno es copia de HasRank IS Onposition comienza con los extremos con el estilo lógico que está detallado es que la cursiva es enumerada es subrayado es parte del tamaño de alineación de la alineación que ha font ha que hascolor is bold ha usado elementname stylesheetname se usa por el proceso (ID) está en ejecución por el sistema operativo que los roles de la sesión de la sesión web tienen los roles de la marca de tiempo de tiempo (fecha, hora) creada en la marca de tiempo de tiempo (fecha, hora) TimeStamp (fecha, hora) marca de tiempo de tiempo (fecha, hora) Timestamp (fecha, hora) creado en el tipo tiene puertoIP tiene MessagePropagator (ID) Imagen (transmisión) Imagen de nombre (ID) Contiene LayoutBlock WorkflowBlockLogicalBlock Contiene BlockDatatype tiene Propiedad BlockData es de Workflowinstance (ID) ISIN TaskInstance (ID) tiene marca de tiempo principal (fecha, hora) (fecha, hora, hora))TimeStamp (fecha, hora) TimeStamp (fecha, hora) Modificada por última vez en ComeTe At AT creado AT está en el nombre creado por ha adjunto el tipo de comentario adjunto de marca de tiempo de tiempo (fecha, hora) marca de tiempo de tiempo (fecha, hora) marca de tiempo (fecha, hora)creado en el inicio en << Último modificado en la categoría Los editores de la categoría tienen estado tienen marca de tiempo (fecha, hora) << Estado de la última marca de tiempo modificada (fecha, hora) se debe en duetype que tiene una zona horaria tiene notas de horno de homicisas de nivel de seguridad (fecha, hora) <<se completa en la tarea de isfollowedby (Código) Descripción tiene referencias de sangría que hasbeenopenedat ... por timestamp redohistory es antes después de las referencias que ha caseón de inhase ha compensado actionId (código) marca de tiempo (fecha, hora) invocada en invocado por la versión (id) isbuild from deha creado byarchived ha comment timeStamp (fecha, hora) << creatingat undohistory (id) inicia los extremos ha creado por el nombre que ha anterior es después de << referencias Charcounter que ha creado en Timestamp is Active creado por el desplazamiento ha creado que ha creado el desplazamiento ha creado.En el índice de marca de tiempo de tiempo (ID) LastModifiedby Léxico (ID) ISOF La frecuencia se produce la frecuencia de detener el término de la palabra está en los fines con los comienzos con << comienzos originales con WordNumber SentenceNumber Párraphnumber Citatons ha en IS IS IS en IStemporán<< Describe SpiderBuild (ID) se actualiza se elimina la marca de tiempo de tiempo (fecha, hora) << LastUpdatedat ha validado estructura << necesaria Tiempo de Index (MS) IndexUpdate NextUpdatein ha indicado isRunningbyos LastUpdate habilitado TimeStamp Time (S) Documentos StopCharChrooración parar es párrafo name de parada es es opciones de opciones. Mostrar información Mostrar excepciones de advertencia de advertencia Do Lineage Grabación Do Grabación de linaje interno Solicitar Fuente desconocida Show Intra Intra Información La información de linaje se establece para X X X VirtualBorder (ID) ISONHAS {1, 2}} {1, 2}IR IR usermode (código) usermode (código) Figura 2. El esquema de la base de datos de Tendax (diagrama de modelado de roles de objeto) cambia en un documento realizado por un cliente, es responsable de enviar información de actualización a todos los clientes que trabajan en el mismo documento. El documento en la clase Documentsession apunta a una instancia de FileNode y corresponde a la ID del documento abierto. Las instancias de la clase FileNode representan un nodo de carpeta o un nodo de documento. El nodo de carpeta corresponde a una carpeta de un sistema de archivos y el nodo de documento a el de un archivo. Las instancias de la clase Char representan los caracteres de un documento. El valor de un personaje se almacena en el Valor de caracteres del atributo. La secuencia se define por los atributos después y antes de la clase Char. Instancias particulares de Char Marcan el principio y el final de un documento. Los métodos InsertChars y Removechars se utilizan para agregar y eliminar caracteres.2.1.2 Editor Como se ve anteriormente, cada documento se almacena de forma nativa en la base de datos. Nuestro editor no tiene una réplica de una parte de la base de datos de texto nativa en el sentido de réplicas de la base de datos. En cambio, tiene una llamada imagen como su réplica. Incluso si varios autores editan el mismo texto al mismo tiempo, funcionan en un documento único en todo momento. El sistema garantiza esta vista única. La edición de un documento implica una serie de pasos: primero, sacar la información requerida de la imagen, en segundo lugar, invocar los métodos correspondientes dentro de la base de datos, en tercer lugar, cambiar la imagen y en cuarto lugar, informando a todos los demás clientes sobre los cambios.2.1.3 Componente del servidor en tiempo real El componente del servidor en tiempo real es responsable de la propagación en tiempo real de cualquier cambio en un documento realizado dentro de un editor a todos los editores que trabajan o han abierto el mismo documento. Cuando un editor se conecta al servidor de aplicaciones, que a su vez se conecta a la base de datos, la base de datos también establece una conexión con el componente del servidor en tiempo real (si ya no hay una conexión). El sistema de base de datos informa al componente del servidor en tiempo real sobre cada nueva sesión del editor (sesión), que el componente del servidor en tiempo real administra en su SessionManager. Luego, el editor también se conecta al componente del servidor en tiempo real. El componente del servidor en tiempo real agrega el socket del editor a la estructura de datos del cliente en el SessionManager y luego está listo para comunicarse. Cada vez que un cambio en un documento de un editor se almacena persistentemente en la base de datos, la base de datos envía un mensaje al componente del servidor en tiempo real, que a su vez, envía los cambios a todos los 43 editores que trabajan en el mismo documento. Por lo tanto, se utiliza un protocolo de comunicación especial: el protocolo de actualización. Protocolo de actualización El componente del servidor en tiempo real utiliza el protocolo de actualización para comunicarse con la base de datos y los editores. Los mensajes se envían desde la base de datos al componente del servidor en tiempo real, que envía los mensajes a los editores afectados. El protocolo de actualización consta de diferentes tipos de mensajes. Los mensajes consisten en dos paquetes: el paquete uno contiene información para el componente del servidor en tiempo real, mientras que el paquete dos se pasa a los editores y contiene la información de actualización, como se muestra en la Figura 3. ||RTSC ||Parámetro |… |Parámetro ||||Datos del editor ||Protocolo entre el sistema de bases de datos y el protocolo de componentes del servidor en tiempo real entre el componente del servidor en tiempo real y los editores Figura 3. Protocolo de actualización A continuación, se presentan dos tipos de mensajes: || u | sessionID, ..., sessionID |||| Datos del editor ||U: Actualizar mensaje, SessionID: ID de la sesión del cliente con este mensaje Tipo de componente del servidor en tiempo real envía el paquete de datos del editor a todos los editores especificados en la lista de SessionID.|| UD | FileID |||| Datos del editor ||UD: Actualizar mensaje del documento, fileid: ID del archivo con este tipo de mensaje, el componente del servidor en tiempo real envía los datos del editor a todos los editores que han abierto el documento con el ID de archivo indicado. Modelo de clase La Figura 4 muestra el modelo de clase, así como el entorno del componente del servidor en tiempo real. El entorno consiste principalmente en el editor y la base de datos, pero cualquier otra aplicación cliente que pueda hacer uso del componente del servidor en tiempo real puede conectarse. ConnectionListener: esta clase es responsable de la conexión con los clientes, es decir, a la base de datos y a los editores. Dependiendo del tipo de conexión (base de datos o editor), la conexión se pasa a una instancia de editorworker o una instancia de trabajo de datos de datos respectivamente. Editorworker: esta clase administra las conexiones de tipo editor. La conexión (un socket y su secuencia de entrada y salida) se almacena en el SessionManager. SessionManager: Esta clase es similar a una base de datos en memoria: toda la información de la sesión del editor, p.Los sockets del editor, qué editor ha abierto qué documento, etc. se almacenan dentro de esta estructura de datos. DataBAsEmessageWorker: esta clase es responsable de las conexiones de la base de datos de tipo. En tiempo de ejecución, solo existe una conexión para cada base de datos. Los mensajes de actualización de la base de datos se envían al DatabaseMessageWorker y, con la ayuda de información adicional del SessionManager, enviado a los clientes correspondientes. ServiceClass: esta clase ofrece un conjunto de métodos para leer, escribir y registrar mensajes.tdb.mp.editor tdb.mp.database tdb.mp.mgmt editorworker databaseMessageWorker sessionsManager MessageHandler ConnectionListener ServiceClass Messagequeue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1 * 1 * editores datenbanksystem 1sthstem 1sstem 1sstem 1sstem 1sstem 1sstem 1 SEMSEM 1 SECTUSTEME 1 STAMEME 1 SECTUSTEME 1 SECCIÓN 1 *2 1 * 1 * 1 * TCP/IP Figura 4. Diagrama de clase de componentes del servidor en tiempo real 2.1.4 Carpetas dinámicas Como se mencionó anteriormente, cada acción de edición invocada por un usuario se transfiere inmediatamente a la base de datos. Al mismo tiempo, se recopila más información sobre la transacción actual. Como toda la información se almacena en la base de datos, un carácter puede tener una multitud de información, que luego puede usarse para la recuperación de documentos. Los meta datos se recopilan a nivel de caracteres, a partir de la estructura de documentos (diseño, flujo de trabajo, plantilla, semántica, seguridad, flujo de trabajo y notas), en el nivel de una sección de documentos y en el nivel de todo el documento [6]. Todos los meta datos mencionados anteriormente son información crucial para crear contenido y conocimiento a partir de documentos de procesamiento de palabras. Este meta datos se puede utilizar para crear un sistema de almacenamiento alternativo para documentos. En cualquier caso, no es una tarea fácil cambiar la familiaridad de los usuarios al bien conocido sistema de archivos jerárquicos. Esta es también la razón principal por la que no ignoramos por completo el sistema de archivos clásico, sino que lo mejoramos. Las carpetas que corresponden al sistema de archivos jerárquico clásico se llamarán carpetas estáticas. Las carpetas donde los documentos se organizan según los meta datos, se denominarán carpetas dinámicas. Como toda la información se almacena en la base de datos, el sistema de archivos también se basa en la base de datos. Las carpetas dinámicas construyen subarres, que están guiados por los meta datos seleccionados por el usuario. Por lo tanto, el primer paso en el uso de una carpeta dinámica es la definición de cómo debe construirse. Para cada nivel de una carpeta dinámica, se utiliza exactamente un elemento de meta datos. El siguiente ejemplo ilustra los pasos que deben tomarse para definir una carpeta dinámica y los meta datos que deben usarse. Como primer paso, se deben elegir los meta datos que se utilizarán para la carpeta dinámica (ver Tabla 1): la secuencia de los meta datos influye en la estructura de la carpeta. Además, para cada meta datos utilizados, el usuario debe definir restricciones y granularidad;Si no se definen restricciones, se enumeran todos los documentos accesibles. Por lo tanto, la granularidad influye en el número de subcarpetas que se creará para la división de los documentos.44 A medida que el usuario ingresa a la estructura del árbol de la carpeta dinámica, puede navegar a través de las ramas para llegar a los documentos que está buscando. Los nombres de directorio indican qué meta datos determina el contenido del subcarpelo en cuestión. En cada nivel, se pueden inspeccionar los documentos, que hasta ahora coinciden con los meta datos. Tabla 1. Definición de las carpetas dinámicas (ejemplo) Restricciones de meta datos de nivel Granularidad 1 El creador solo muestra documentos que han sido creados por los usuarios Leona o Hodel o una carpeta una carpeta por Creador 2 Ubicación actual Solo muestra documentos que se leen en mi ubicación actual una carpeta por estado de tarea Estado de la tarea3 autores solo muestran documentos en los que al menos al 40% fue escrito por el usuario Leone cada 20% de una carpeta Los cambios ad-hoc de granularidad y restricciones son posibles para maximizar la comodidad de búsqueda para el usuario. Es posible predefinir carpetas dinámicas para un uso frecuente, p.Una carpeta basada en la ubicación, así como para crear y modificar carpetas dinámicas sobre una base ad-hoc. Además, el contenido de tales carpetas dinámicas puede cambiar de un segundo a otro, dependiendo de los cambios realizados por otros usuarios en ese momento.3. Validación La arquitectura propuesta se valida en el ejemplo de una inserción de caracteres. Las operaciones de inserción son las operaciones principalmente utilizadas en un sistema de edición (colaborativo). La inserción del carácter se basa en el algoritmo de inserción de Tendax que se describe formalmente a continuación. El algoritmo se simplifica para este propósito.3.1 Insertar Algoritmo de caracteres El símbolo C representa el carácter del objeto, P representa el carácter anterior, n representa el siguiente carácter de un objeto de caracteres C y el símbolo L representa una lista de objetos de caracteres.c = carácter p = carácter anterior n = siguiente carácter l = lista de caracteres El símbolo C1 representa el primer carácter de la lista L, CI significa un carácter en la lista L en la posición I, mientras que I es un valor entre 1y la longitud de la lista L y CN representa el último carácter de la lista l.c1 = primer carácter en la lista l Ci = carácter en la posición I en la lista l Cn = último carácter en la lista l El símbolo β representa el carácter especial que marca el comienzo de un documento y ε representa el carácter especial que marca el final deun documento.β = comienzo del documento ε = final del documento La función Startta inicia una transacción.startTA = transacción de inicio El comités de funciones comete una transacción que se inició.ComitA = Conjunto de la transacción La función verificaciones de checkwriteAccess si se otorga el acceso de escritura para una sesión de documentos.CheckwriteAccess (s) = Verifique si se otorga acceso a la sesión de documentos para la sesión de documentos, el bloqueo de la función adquiere un bloqueo exclusivo para un carácter C y devuelve 1 para un éxito y 0 para no tener éxito.bloqueo (c) = adquirir el bloqueo para el carácter c éxito: return 1, sin éxito: return 0 La función releSeSelocks libera todos los bloqueos que una transacción ha adquirido hasta ahora.ReleasElocks = Release Todos los bloqueos La función getPrevious devuelve el personaje anterior y getNext Devuelve el siguiente carácter de un carácter c.getPrevious (c) = return CARÁCTER anterior del carácter c getNext (c) = return siguiente carácter de carácter c la función enlace antes de un carácter p anterior con un carácter siguiente X y la función linkafter enlaza un carácter n con un carácter anterior y.linkbefore (p, x) = link carácter p a carácter x linkafter (n, y) = link carácter n a carácter y la función actualización de la función un carácter p con el primer carácter c1 de una lista de caracteres l y un carácter n con el últimoCarácter CN de una lista de caracteres L UpdateTring (L, P, N) = LinkBefore (P Cl) ∧ Linkafter (N, CN) La función InsertChar inserta un carácter C de caracteres en la tabla Char con los campos después de establecer un carácter P y antesestablecido en un personaje n.insertchar (c, p, n) = linkafter (c, p) ∧ linkbefore (c, n) ∧ linkbefore (p, c) ∧ linkafter (n, c) La función de verificación de la función determina el valor de caracteres anterior de los caracteres de un carácter c e ifEl estado de los caracteres anteriores está activo.CheckPreceding (c) = Estado de retorno y Valor de caracteres del carácter anterior La función de verificación de la función determina el siguiente Value de caracteres de un carácter C y si el siguiente estado de caracteres está activo.45 CheckSuceding (C) = Estado de retorno y Value de caracteres del siguiente carácter La función checkarvalue determina el intervalor de un carácter c.CheckCharValue (c) = return CaracterValue del carácter C La función sendupdate envía un mensaje de actualización (actualización) desde la base de datos al componente del servidor en tiempo real.sendupdate (UpdateMessage) La función leída se usa en el componente del servidor en tiempo real para leer el UpdateMessage. Leer (UpdateInformationMessage) La función asigna verificaciones de los aturdidos en la base del UpdateMessage y el SessionManager, que los editores deben estar informados. AllockEditors (UpdateInformationMessage, SessionManager) = Devuelve los editores afectados La función sendMessage (editORDATA) envía la parte del editor del actualatorepresentado en la Figura 2. Los parámetros relevantes para las definiciones debajo, se introducen en la siguiente lista: - Next Characteride: OID del personaje situado junto a la cadena que se insertará - Caracterioides anteriores: OID de la característica situada anteriormente a la cadena para ser insertadas - Carpoortoides (Lista): Lista de carácter que deben insertarse así, la inserción de los caracteres se puede definir paso a paso de la siguiente manera: iniciar una transacción.Startta Seleccione el personaje que se encuentra antes del personaje que sigue la cadena a insertar.getPrevious (NextCharacteriCeroid) = prátelo (prolioides) ⇐ π después de ϑoid = nextCharacteriD (char)) adquiere el bloqueo para el carácter que se encuentra en el documento antes del carácter que sigue la cadena que se insertará.LOCK (PRIMCHARID) En este momento, los caracterales de la lista contienen los caracteres C1 a CN que se insertarán.COMPARAMOIDS = {C1, ..., CN} Cada carácter de la cadena se inserta en la posición apropiada vinculando el carácter anterior y siguiente. Para cada caracteres CI de caracterales: Insertchar (ci, p, n) mientras que ci ∈ {c1, ..., cn} verifique si los caracteres anteriores y seguidos están activos o si es el comienzo o el final del documento.checkPreceding (prprecaroide) = ISOK (IsActive, CaracterValue) ⇐ π Isactive, CaracterValue (ϑ oid = nextCharacterOd (char)) CheckSuceding (NextCharacteriD) = ISOK (IsActive, CaracterValue) ⇐ π Isactive, carácter, Value (ϑ ϑ ϑ ϑ ϑ - nextaracteracteriCeroid (char)))Actualice los caracteres antes y después de la cadena que se insertará.UpdateString (carmoides, carcoides, NextCharacterian) libera todas las bloqueos y transacciones de confirmación.El Comité del Comité de ReleaseLocks Envía información de actualización al componente del servidor en tiempo real Sendupdate (UpdateTenMessage) Leer el mensaje de actualización e informar a los editores afectados de la lectura de cambio (UpdateMessage) Asignar editores (UpdateMessage, SessionManager) SendMessage (EditionAdata) 3.2 Insertar caracteres Figura 1 Da una instantánea.El sistema, es decir, de su arquitectura: cuatro bases de datos se distribuyen a través de una red de igual a igual. Cada base de datos está conectada a un servidor de aplicaciones (AS) y cada servidor de aplicaciones está conectado a un componente del servidor en tiempo real (RTSC). Los editores están conectados a uno o más componentes del servidor en tiempo real y a las bases de datos correspondientes. Teniendo en cuenta que el editor A (conectado a la base de datos 1 y 4) y el editor B (conectado a la base de datos 1 y 2) están trabajando en el mismo documento almacenado en la base de datos 1. El editor B ahora inserta un personaje en este documento. La operación de inserción se pasa al servidor de aplicaciones 1, que a su vez, la pasa a la base de datos 1, donde se invoca una operación de inserción;Los caracteres se insertan de acuerdo con el algoritmo discutido en la sección anterior. Después de la inserción, la base de datos 1 envía un mensaje de actualización (de acuerdo con el protocolo de actualización discutido antes) al Componente del servidor en tiempo real 1 (a través de AS 1). RTCS 1 combina la información de actualización recibida con la información en su SessionManager y envía los datos del editor a los editores afectados, en este caso al editor A y B, donde los cambios se muestran inmediatamente. Los conflictos de colaboración que ocurren se resuelven y describen en [3].4. Resumen Con el enfoque presentado en este documento y el prototipo implementado, ofrecemos edición y gestión de documentos colaborativos en tiempo real almacenados de manera especial en una base de datos. Con este enfoque, proporcionamos seguridad, consistencia y disponibilidad de documentos y, en consecuencia, ofrecemos edición y gestión de documentos generalizados. La edición y la gestión de documentos generalizados se habilitan debido a la arquitectura propuesta con el componente integrado del servidor de tiempo Real46 integrado, que propaga los cambios a un documento de inmediato y, en consecuencia, ofrece documentos actualizados. La edición y administración de documentos está habilitado en consecuencia en cualquier lugar, en cualquier momento y con cualquier dispositivo. El sistema de desorden anterior se implementa en un prototipo en ejecución. El sistema se probará pronto en línea con un taller de estudiantes el próximo otoño. Referencias [1] Abiteboul, S., Agrawal, R., et al.: La autoevaluación de la investigación de la base de datos Lowell. Massachusetts, EE. UU., 2003. [2] Hodel, T. B., Businger, D. y Dittrich, K. R.: Soporte de diseño colaborativo en el procesamiento de textos. IEEE International Conference on Cooperative Information Systems (Coopis), Larnaca, Chipre, IEEE, 2004. [3] Hodel, T. B. y Dittrich, K. R.: Concepto y prototipo de un entorno de procesos comerciales colaborativos para el procesamiento de documentos. Ingeniería de datos y conocimiento 52, Número especial: Tecnologías de procesos comerciales colaborativos (1): 61120, 2005. [4] Hodel, T. B., Dubacher, M. y Dittrich, K. R.: Uso de sistemas de gestión de bases de datos para edición de texto colaborativo. Conferencia Europea de ACM de trabajo cooperativo compuprado (ECSCW CEW 2003), Helsinki, Finlandia, 2003. [5] Hodel, T. B., Gall, H. y Dittrich, K. R.: Procesos comerciales colaborativos dinámicos dentro de los documentos. ACM Special Interest Group on Design of Communication (SIGDOC), Memphis, EE. UU., 2004. [6] Hodel, T. B., R. Hacmac y Dittrich, K. R.: Uso de meta datos de tiempo de creación de edición de texto para la gestión de documentos. Conferencia sobre Ingeniería de Sistemas de Información Avanzada (Caise05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. y Dittrich, K. R.: Servidor de jabón integrado en el nivel del sistema operativo para AD-HOC REAL AD-HOC-Tiempo de comunicación bidireccional. Asociación de Gestión de Recursos de Información (IRMA), San Diego, EE. UU., 2005. [8] Okelly, P.: Revolución en comunicación y colaboración en tiempo real: de verdad esta vez. Estrategias de aplicación: informe de investigación en profundidad. Burton Group, 2005. 47",
    "original_sentences": [
        "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT Collaborative document processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
        "We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system.",
        "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
        "Each user is always served with upto-date documents and can organize his work based on document meta data.",
        "For this, we present our conceptual architecture for such a system and discuss it with an example.",
        "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
        "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
        "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
        "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world.",
        "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected.",
        "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
        "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
        "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
        "Such meta data can be gathered during the documents creation process and can be used versatilely.",
        "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
        "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
        "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
        "As far as we know, no system exists, that satisfies the aforementioned requirements.",
        "A very good overview about realtime communication and collaboration system is described in [7].",
        "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
        "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
        "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
        "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
        "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
        "TeNDaX is a Text Native Database eXtension.",
        "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
        "Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
        "With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
        "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
        "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
        "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
        "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management.",
        "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
        "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
        "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
        "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
        "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
        "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
        "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
        "The business logic layer represents the interface between the database and the word-processing application.",
        "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
        "The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
        "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
        "In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
        "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
        "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
        "Each character of a text document is stored as a single object in the database [3].",
        "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
        "The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7].",
        "Figure 2 depicts the core database schema.",
        "By connecting a client to the database, a Session instance is created.",
        "One important attribute of the Session is the DocumentSession.",
        "This attribute refers to DocumentSession instances, which administrates all opened documents.",
        "For each opened document, a DocumentSession instance is created.",
        "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
        "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
        "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
        "Instances of the class FileNode either represent a folder node or a document node.",
        "The folder node corresponds to a folder of a file system and the document node to that of a file.",
        "Instances of the class Char represent the characters of a document.",
        "The value of a character is stored in the attribute CharacterValue.",
        "The sequence is defined by the attributes After and Before of the class Char.",
        "Particular instances of Char mark the beginning and the end of a document.",
        "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
        "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
        "Instead, it has a so-called image as its replica.",
        "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
        "The system guarantees this unique view.",
        "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
        "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection).",
        "The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager.",
        "Then, the editor as well connects to the real-time server component.",
        "The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
        "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document.",
        "Therefore, a special communication protocol is used: the update protocol.",
        "Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors.",
        "Messages are sent from the database to the real-time server component, which sends the messages to the affected editors.",
        "The update protocol consists of different message types.",
        "Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3.",
        "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id.",
        "Class Model Figure 4 depicts the class model as well as the environment of the real-time server component.",
        "The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect.",
        "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
        "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
        "EditorWorker: This class manages the connections of type editor.",
        "The connection (a socket and its input and output stream) is stored in the SessionManager.",
        "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
        "DatabaseMessageWorker: This class is responsible for the connections of type database.",
        "At run-time, only one connection exists for each database.",
        "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
        "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
        "Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
        "At the same time, more information about the current transaction is gathered.",
        "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
        "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
        "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
        "This meta data can be used to create an alternative storage system for documents.",
        "In any case, it is not an easy task to change users familiarity to the well known hierarchical file system.",
        "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
        "Folders which correspond to the classical hierarchical file system will be called static folders.",
        "Folders where the documents are organized according to meta data, will be called dynamic folders.",
        "As all information is stored in the database, the file system, too, is based on the database.",
        "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
        "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
        "For each level of a dynamic folder, exactly one meta data item is used to.",
        "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
        "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
        "Furthermore, for each meta data used, restrictions and granularity must be defined by the user; if no restrictions are defined, all accessible documents are listed.",
        "The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
        "The directory names indicate which meta data determines the content of the sub-folder in question.",
        "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
        "Table 1.",
        "Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and restrictions are possible in order to maximize search comfort for the user.",
        "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
        "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
        "VALIDATION The proposed architecture is validated on the example of a character insertion.",
        "Insert operations are the mostly used operations in a (collaborative) editing system.",
        "The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following.",
        "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage.",
        "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
        "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
        "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
        "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
        "Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC).",
        "Editors are connected to one or more real-time server components and to the corresponding databases.",
        "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
        "Editor B now inserts a character into this document.",
        "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
        "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1).",
        "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
        "Occurring collaboration conflicts are solved and described in [3]. 4.",
        "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
        "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
        "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
        "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
        "The above-descried system is implemented in a running prototype.",
        "The system will be tested soon in line with a student workshop next autumn.",
        "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
        "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing.",
        "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
        "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing.",
        "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
        "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management.",
        "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
        "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
        "Application Strategies: In-Depth Research Report.",
        "Burton Group, 2005. 47"
    ],
    "error_count": 0,
    "keys": {
        "collaborative document processing": {
            "translated_key": "Procesamiento de documentos colaborativos",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT <br>collaborative document processing</br> has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
                "We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system.",
                "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
                "Each user is always served with upto-date documents and can organize his work based on document meta data.",
                "For this, we present our conceptual architecture for such a system and discuss it with an example.",
                "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
                "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
                "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
                "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world.",
                "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected.",
                "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
                "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
                "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
                "Such meta data can be gathered during the documents creation process and can be used versatilely.",
                "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
                "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
                "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
                "As far as we know, no system exists, that satisfies the aforementioned requirements.",
                "A very good overview about realtime communication and collaboration system is described in [7].",
                "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
                "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
                "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
                "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
                "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
                "TeNDaX is a Text Native Database eXtension.",
                "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
                "Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
                "With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
                "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
                "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
                "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
                "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management.",
                "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
                "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
                "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
                "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
                "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
                "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
                "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
                "The business logic layer represents the interface between the database and the word-processing application.",
                "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
                "The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
                "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
                "In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
                "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
                "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
                "Each character of a text document is stored as a single object in the database [3].",
                "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
                "The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7].",
                "Figure 2 depicts the core database schema.",
                "By connecting a client to the database, a Session instance is created.",
                "One important attribute of the Session is the DocumentSession.",
                "This attribute refers to DocumentSession instances, which administrates all opened documents.",
                "For each opened document, a DocumentSession instance is created.",
                "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
                "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
                "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
                "Instances of the class FileNode either represent a folder node or a document node.",
                "The folder node corresponds to a folder of a file system and the document node to that of a file.",
                "Instances of the class Char represent the characters of a document.",
                "The value of a character is stored in the attribute CharacterValue.",
                "The sequence is defined by the attributes After and Before of the class Char.",
                "Particular instances of Char mark the beginning and the end of a document.",
                "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
                "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
                "Instead, it has a so-called image as its replica.",
                "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
                "The system guarantees this unique view.",
                "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
                "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection).",
                "The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager.",
                "Then, the editor as well connects to the real-time server component.",
                "The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
                "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document.",
                "Therefore, a special communication protocol is used: the update protocol.",
                "Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors.",
                "Messages are sent from the database to the real-time server component, which sends the messages to the affected editors.",
                "The update protocol consists of different message types.",
                "Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3.",
                "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id.",
                "Class Model Figure 4 depicts the class model as well as the environment of the real-time server component.",
                "The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect.",
                "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
                "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
                "EditorWorker: This class manages the connections of type editor.",
                "The connection (a socket and its input and output stream) is stored in the SessionManager.",
                "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
                "DatabaseMessageWorker: This class is responsible for the connections of type database.",
                "At run-time, only one connection exists for each database.",
                "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
                "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
                "Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
                "At the same time, more information about the current transaction is gathered.",
                "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
                "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
                "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
                "This meta data can be used to create an alternative storage system for documents.",
                "In any case, it is not an easy task to change users familiarity to the well known hierarchical file system.",
                "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
                "Folders which correspond to the classical hierarchical file system will be called static folders.",
                "Folders where the documents are organized according to meta data, will be called dynamic folders.",
                "As all information is stored in the database, the file system, too, is based on the database.",
                "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
                "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
                "For each level of a dynamic folder, exactly one meta data item is used to.",
                "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
                "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
                "Furthermore, for each meta data used, restrictions and granularity must be defined by the user; if no restrictions are defined, all accessible documents are listed.",
                "The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
                "The directory names indicate which meta data determines the content of the sub-folder in question.",
                "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
                "Table 1.",
                "Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and restrictions are possible in order to maximize search comfort for the user.",
                "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
                "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
                "VALIDATION The proposed architecture is validated on the example of a character insertion.",
                "Insert operations are the mostly used operations in a (collaborative) editing system.",
                "The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following.",
                "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage.",
                "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
                "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
                "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
                "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
                "Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC).",
                "Editors are connected to one or more real-time server components and to the corresponding databases.",
                "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
                "Editor B now inserts a character into this document.",
                "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
                "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1).",
                "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
                "Occurring collaboration conflicts are solved and described in [3]. 4.",
                "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
                "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
                "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
                "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
                "The above-descried system is implemented in a running prototype.",
                "The system will be tested soon in line with a student workshop next autumn.",
                "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
                "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing.",
                "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
                "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing.",
                "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
                "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management.",
                "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
                "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
                "Application Strategies: In-Depth Research Report.",
                "Burton Group, 2005. 47"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Concepto y arquitectura de un sistema de edición y gestión de documentos generalizados Stefania Leone Thomas B. Hodel Harald Gall Universidad de Zúrich, Universidad de Suiza de Zúrich, Universidad de Suiza de Zúrich, Departamento de Informática de Suiza de Departamento de Informática de Informática, LEONE@IFI.UNIZH.CH.CHhodel@ifi.unizh.ch Gall@ifi.unizh.ch Resumen \"Procesamiento de documentos colaborativos\" ha sido abordado por muchos enfoques hasta ahora, la mayoría de los cuales se centran en la versión de documentos y la edición colaborativa."
            ],
            "translated_text": "",
            "candidates": [
                "Procesamiento de documentos colaborativos",
                "Procesamiento de documentos colaborativos"
            ],
            "error": []
        },
        "pervasive document editing and managing system": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Concept and Architecture of a <br>pervasive document editing and managing system</br> Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT Collaborative document processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
                "We address this issue from a different angle and describe the concept and architecture of a <br>pervasive document editing and managing system</br>.",
                "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
                "Each user is always served with upto-date documents and can organize his work based on document meta data.",
                "For this, we present our conceptual architecture for such a system and discuss it with an example.",
                "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
                "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
                "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
                "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world.",
                "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected.",
                "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
                "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
                "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
                "Such meta data can be gathered during the documents creation process and can be used versatilely.",
                "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
                "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
                "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
                "As far as we know, no system exists, that satisfies the aforementioned requirements.",
                "A very good overview about realtime communication and collaboration system is described in [7].",
                "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
                "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
                "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
                "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
                "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
                "TeNDaX is a Text Native Database eXtension.",
                "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
                "Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
                "With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
                "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
                "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
                "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
                "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management.",
                "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
                "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
                "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
                "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
                "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
                "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
                "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
                "The business logic layer represents the interface between the database and the word-processing application.",
                "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
                "The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
                "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
                "In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
                "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
                "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
                "Each character of a text document is stored as a single object in the database [3].",
                "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
                "The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7].",
                "Figure 2 depicts the core database schema.",
                "By connecting a client to the database, a Session instance is created.",
                "One important attribute of the Session is the DocumentSession.",
                "This attribute refers to DocumentSession instances, which administrates all opened documents.",
                "For each opened document, a DocumentSession instance is created.",
                "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
                "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
                "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
                "Instances of the class FileNode either represent a folder node or a document node.",
                "The folder node corresponds to a folder of a file system and the document node to that of a file.",
                "Instances of the class Char represent the characters of a document.",
                "The value of a character is stored in the attribute CharacterValue.",
                "The sequence is defined by the attributes After and Before of the class Char.",
                "Particular instances of Char mark the beginning and the end of a document.",
                "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
                "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
                "Instead, it has a so-called image as its replica.",
                "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
                "The system guarantees this unique view.",
                "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
                "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection).",
                "The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager.",
                "Then, the editor as well connects to the real-time server component.",
                "The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
                "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document.",
                "Therefore, a special communication protocol is used: the update protocol.",
                "Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors.",
                "Messages are sent from the database to the real-time server component, which sends the messages to the affected editors.",
                "The update protocol consists of different message types.",
                "Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3.",
                "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id.",
                "Class Model Figure 4 depicts the class model as well as the environment of the real-time server component.",
                "The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect.",
                "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
                "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
                "EditorWorker: This class manages the connections of type editor.",
                "The connection (a socket and its input and output stream) is stored in the SessionManager.",
                "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
                "DatabaseMessageWorker: This class is responsible for the connections of type database.",
                "At run-time, only one connection exists for each database.",
                "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
                "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
                "Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
                "At the same time, more information about the current transaction is gathered.",
                "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
                "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
                "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
                "This meta data can be used to create an alternative storage system for documents.",
                "In any case, it is not an easy task to change users familiarity to the well known hierarchical file system.",
                "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
                "Folders which correspond to the classical hierarchical file system will be called static folders.",
                "Folders where the documents are organized according to meta data, will be called dynamic folders.",
                "As all information is stored in the database, the file system, too, is based on the database.",
                "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
                "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
                "For each level of a dynamic folder, exactly one meta data item is used to.",
                "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
                "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
                "Furthermore, for each meta data used, restrictions and granularity must be defined by the user; if no restrictions are defined, all accessible documents are listed.",
                "The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
                "The directory names indicate which meta data determines the content of the sub-folder in question.",
                "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
                "Table 1.",
                "Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and restrictions are possible in order to maximize search comfort for the user.",
                "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
                "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
                "VALIDATION The proposed architecture is validated on the example of a character insertion.",
                "Insert operations are the mostly used operations in a (collaborative) editing system.",
                "The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following.",
                "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage.",
                "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
                "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
                "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
                "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
                "Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC).",
                "Editors are connected to one or more real-time server components and to the corresponding databases.",
                "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
                "Editor B now inserts a character into this document.",
                "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
                "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1).",
                "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
                "Occurring collaboration conflicts are solved and described in [3]. 4.",
                "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
                "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
                "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
                "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
                "The above-descried system is implemented in a running prototype.",
                "The system will be tested soon in line with a student workshop next autumn.",
                "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
                "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing.",
                "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
                "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing.",
                "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
                "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management.",
                "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
                "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
                "Application Strategies: In-Depth Research Report.",
                "Burton Group, 2005. 47"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Concepto y arquitectura de un \"sistema de edición y gestión de documentos generalizados\" Stefania Leone Thomas B. Hodel Harald Gall Universidad de Zúrich, Universidad de Suiza de Zúrich, Universidad de Suiza de Zúrich, Departamento de Informática de Informática de Suiza, Departamento de Informática de Informatics, Leone@ifi.unizh.ch hodel@ifi.unizh.ch Gall@ifi.unizh.ch Abstract Colaborative Document Processing ha sido abordado por muchos enfoques hasta ahora, la mayoría de los cuales se centran en la versión de documentos y la edición colaborativa.",
                "Abordamos este problema desde un ángulo diferente y describimos el concepto y la arquitectura de un \"sistema de edición y administración de documentos generalizados\"."
            ],
            "translated_text": "",
            "candidates": [
                "Sistema de edición y administración de documentos generalizados",
                "sistema de edición y gestión de documentos generalizados",
                "Sistema de edición y administración de documentos generalizados",
                "sistema de edición y administración de documentos generalizados"
            ],
            "error": []
        },
        "text editing": {
            "translated_key": "edición de texto",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT Collaborative document processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
                "We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system.",
                "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
                "Each user is always served with upto-date documents and can organize his work based on document meta data.",
                "For this, we present our conceptual architecture for such a system and discuss it with an example.",
                "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
                "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
                "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
                "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world.",
                "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected.",
                "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
                "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
                "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
                "Such meta data can be gathered during the documents creation process and can be used versatilely.",
                "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
                "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
                "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
                "As far as we know, no system exists, that satisfies the aforementioned requirements.",
                "A very good overview about realtime communication and collaboration system is described in [7].",
                "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
                "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
                "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
                "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
                "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
                "TeNDaX is a Text Native Database eXtension.",
                "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
                "Under the term <br>text editing</br> we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
                "With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
                "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
                "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
                "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
                "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative <br>text editing</br> and document management.",
                "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
                "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
                "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
                "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
                "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
                "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
                "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
                "The business logic layer represents the interface between the database and the word-processing application.",
                "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables <br>text editing</br> within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
                "The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
                "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
                "In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
                "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
                "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
                "Each character of a text document is stored as a single object in the database [3].",
                "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
                "The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the <br>text editing</br> creation time meta data model in [6] and the relation to XML databases in [7].",
                "Figure 2 depicts the core database schema.",
                "By connecting a client to the database, a Session instance is created.",
                "One important attribute of the Session is the DocumentSession.",
                "This attribute refers to DocumentSession instances, which administrates all opened documents.",
                "For each opened document, a DocumentSession instance is created.",
                "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
                "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
                "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
                "Instances of the class FileNode either represent a folder node or a document node.",
                "The folder node corresponds to a folder of a file system and the document node to that of a file.",
                "Instances of the class Char represent the characters of a document.",
                "The value of a character is stored in the attribute CharacterValue.",
                "The sequence is defined by the attributes After and Before of the class Char.",
                "Particular instances of Char mark the beginning and the end of a document.",
                "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
                "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
                "Instead, it has a so-called image as its replica.",
                "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
                "The system guarantees this unique view.",
                "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
                "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection).",
                "The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager.",
                "Then, the editor as well connects to the real-time server component.",
                "The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
                "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document.",
                "Therefore, a special communication protocol is used: the update protocol.",
                "Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors.",
                "Messages are sent from the database to the real-time server component, which sends the messages to the affected editors.",
                "The update protocol consists of different message types.",
                "Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3.",
                "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id.",
                "Class Model Figure 4 depicts the class model as well as the environment of the real-time server component.",
                "The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect.",
                "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
                "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
                "EditorWorker: This class manages the connections of type editor.",
                "The connection (a socket and its input and output stream) is stored in the SessionManager.",
                "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
                "DatabaseMessageWorker: This class is responsible for the connections of type database.",
                "At run-time, only one connection exists for each database.",
                "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
                "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
                "Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
                "At the same time, more information about the current transaction is gathered.",
                "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
                "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
                "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
                "This meta data can be used to create an alternative storage system for documents.",
                "In any case, it is not an easy task to change users familiarity to the well known hierarchical file system.",
                "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
                "Folders which correspond to the classical hierarchical file system will be called static folders.",
                "Folders where the documents are organized according to meta data, will be called dynamic folders.",
                "As all information is stored in the database, the file system, too, is based on the database.",
                "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
                "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
                "For each level of a dynamic folder, exactly one meta data item is used to.",
                "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
                "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
                "Furthermore, for each meta data used, restrictions and granularity must be defined by the user; if no restrictions are defined, all accessible documents are listed.",
                "The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
                "The directory names indicate which meta data determines the content of the sub-folder in question.",
                "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
                "Table 1.",
                "Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and restrictions are possible in order to maximize search comfort for the user.",
                "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
                "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
                "VALIDATION The proposed architecture is validated on the example of a character insertion.",
                "Insert operations are the mostly used operations in a (collaborative) editing system.",
                "The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following.",
                "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage.",
                "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
                "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
                "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
                "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
                "Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC).",
                "Editors are connected to one or more real-time server components and to the corresponding databases.",
                "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
                "Editor B now inserts a character into this document.",
                "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
                "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1).",
                "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
                "Occurring collaboration conflicts are solved and described in [3]. 4.",
                "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
                "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
                "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
                "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
                "The above-descried system is implemented in a running prototype.",
                "The system will be tested soon in line with a student workshop next autumn.",
                "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
                "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing.",
                "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
                "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative <br>text editing</br>.",
                "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
                "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using <br>text editing</br> Creation Time Meta Data for Document Management.",
                "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
                "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
                "Application Strategies: In-Depth Research Report.",
                "Burton Group, 2005. 47"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Según el término \"edición de texto\", entendemos lo siguiente: escribir y eliminar texto (caracteres), copiar y pegar texto, definir el diseño y estructura del texto, insertar notas, establecer derechos de acceso, definir procesos comerciales, insertar tablas, imágenes, etc.es decir, todas las acciones realizadas regularmente por usuarios de procesamiento de textos.",
                "Enfoque nuestro sistema de edición y gestión generalizada se basa en el enfoque Tendax basado en la base de datos mencionado anteriormente, donde los datos de documentos se almacenan de forma nativa en la base de datos y admite la \"edición de texto\" colaborativa generalizada y la gestión de documentos.",
                "Consiste en los siguientes tres componentes: el servidor de aplicaciones (marcado como 1-4 en la Figura 1) habilita la \"edición de texto\" dentro del entorno de la base de datos y se encarga de la conciencia, la seguridad, la gestión de documentos, etc., todo dentro de una colaboración real y real-Turdo de tiempo y múltiples usuarios.",
                "Los problemas de concepto y rendimiento de dicha base de datos de texto se describen en [3], diseña colaborativa en [2], procesos comerciales de colaboración dinámica dentro de los documentos en [5], el modelo de metadatos de tiempo de creación de \"edición de texto\" en [6] yLa relación con las bases de datos XML en [7].",
                "Ingeniería de datos y conocimiento 52, Número especial: Tecnologías de procesos comerciales colaborativos (1): 61120, 2005. [4] Hodel, T. B., Dubacher, M. y Dittrich, K. R.: Uso de sistemas de gestión de bases de datos para la \"edición de texto\" colaborativa.",
                "ACM Special Interest Group on Design of Communication (SIGDOC), Memphis, EE. UU., 2004. [6] Hodel, T. B., R. Hacmac y Dittrich, K. R.: Uso de datos de meta de tiempo de creación de \"edición de texto\" para la gestión de documentos."
            ],
            "translated_text": "",
            "candidates": [
                "edición de texto",
                "edición de texto",
                "edición de texto",
                "edición de texto",
                "edición de texto",
                "edición de texto",
                "edición de texto",
                "edición de texto",
                "edición de texto",
                "edición de texto",
                "edición de texto",
                "edición de texto"
            ],
            "error": []
        },
        "real-time transaction": {
            "translated_key": "transacción en tiempo real",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT Collaborative document processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
                "We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system.",
                "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
                "Each user is always served with upto-date documents and can organize his work based on document meta data.",
                "For this, we present our conceptual architecture for such a system and discuss it with an example.",
                "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
                "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
                "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
                "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world.",
                "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected.",
                "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
                "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
                "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
                "Such meta data can be gathered during the documents creation process and can be used versatilely.",
                "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
                "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
                "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
                "As far as we know, no system exists, that satisfies the aforementioned requirements.",
                "A very good overview about realtime communication and collaboration system is described in [7].",
                "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
                "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
                "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
                "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
                "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
                "TeNDaX is a Text Native Database eXtension.",
                "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
                "Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
                "With <br>real-time transaction</br> we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
                "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
                "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
                "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
                "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management.",
                "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
                "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
                "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
                "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
                "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
                "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
                "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
                "The business logic layer represents the interface between the database and the word-processing application.",
                "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
                "The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
                "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
                "In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
                "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
                "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
                "Each character of a text document is stored as a single object in the database [3].",
                "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
                "The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7].",
                "Figure 2 depicts the core database schema.",
                "By connecting a client to the database, a Session instance is created.",
                "One important attribute of the Session is the DocumentSession.",
                "This attribute refers to DocumentSession instances, which administrates all opened documents.",
                "For each opened document, a DocumentSession instance is created.",
                "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
                "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
                "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
                "Instances of the class FileNode either represent a folder node or a document node.",
                "The folder node corresponds to a folder of a file system and the document node to that of a file.",
                "Instances of the class Char represent the characters of a document.",
                "The value of a character is stored in the attribute CharacterValue.",
                "The sequence is defined by the attributes After and Before of the class Char.",
                "Particular instances of Char mark the beginning and the end of a document.",
                "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
                "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
                "Instead, it has a so-called image as its replica.",
                "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
                "The system guarantees this unique view.",
                "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
                "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection).",
                "The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager.",
                "Then, the editor as well connects to the real-time server component.",
                "The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
                "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document.",
                "Therefore, a special communication protocol is used: the update protocol.",
                "Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors.",
                "Messages are sent from the database to the real-time server component, which sends the messages to the affected editors.",
                "The update protocol consists of different message types.",
                "Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3.",
                "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id.",
                "Class Model Figure 4 depicts the class model as well as the environment of the real-time server component.",
                "The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect.",
                "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
                "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
                "EditorWorker: This class manages the connections of type editor.",
                "The connection (a socket and its input and output stream) is stored in the SessionManager.",
                "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
                "DatabaseMessageWorker: This class is responsible for the connections of type database.",
                "At run-time, only one connection exists for each database.",
                "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
                "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
                "Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
                "At the same time, more information about the current transaction is gathered.",
                "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
                "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
                "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
                "This meta data can be used to create an alternative storage system for documents.",
                "In any case, it is not an easy task to change users familiarity to the well known hierarchical file system.",
                "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
                "Folders which correspond to the classical hierarchical file system will be called static folders.",
                "Folders where the documents are organized according to meta data, will be called dynamic folders.",
                "As all information is stored in the database, the file system, too, is based on the database.",
                "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
                "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
                "For each level of a dynamic folder, exactly one meta data item is used to.",
                "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
                "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
                "Furthermore, for each meta data used, restrictions and granularity must be defined by the user; if no restrictions are defined, all accessible documents are listed.",
                "The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
                "The directory names indicate which meta data determines the content of the sub-folder in question.",
                "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
                "Table 1.",
                "Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and restrictions are possible in order to maximize search comfort for the user.",
                "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
                "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
                "VALIDATION The proposed architecture is validated on the example of a character insertion.",
                "Insert operations are the mostly used operations in a (collaborative) editing system.",
                "The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following.",
                "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage.",
                "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
                "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
                "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
                "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
                "Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC).",
                "Editors are connected to one or more real-time server components and to the corresponding databases.",
                "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
                "Editor B now inserts a character into this document.",
                "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
                "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1).",
                "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
                "Occurring collaboration conflicts are solved and described in [3]. 4.",
                "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
                "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
                "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
                "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
                "The above-descried system is implemented in a running prototype.",
                "The system will be tested soon in line with a student workshop next autumn.",
                "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
                "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing.",
                "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
                "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing.",
                "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
                "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management.",
                "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
                "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
                "Application Strategies: In-Depth Research Report.",
                "Burton Group, 2005. 47"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Con \"Transacción en tiempo real\" queremos decir que la edición del texto (por ejemplo, escribir un carácter/palabra) invoca una o varias transacciones de bases de datos para que todo, que se escribe, aparece dentro del editor tan pronto como estos objetos se almacenan de manera persistente."
            ],
            "translated_text": "",
            "candidates": [
                "transacción en tiempo real",
                "Transacción en tiempo real"
            ],
            "error": []
        },
        "computer supported collaborative work": {
            "translated_key": "trabajo de colaboración compatible con la computadora",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT Collaborative document processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
                "We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system.",
                "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
                "Each user is always served with upto-date documents and can organize his work based on document meta data.",
                "For this, we present our conceptual architecture for such a system and discuss it with an example.",
                "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
                "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
                "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
                "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world.",
                "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected.",
                "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
                "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
                "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
                "Such meta data can be gathered during the documents creation process and can be used versatilely.",
                "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
                "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
                "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
                "As far as we know, no system exists, that satisfies the aforementioned requirements.",
                "A very good overview about realtime communication and collaboration system is described in [7].",
                "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
                "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
                "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
                "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
                "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
                "TeNDaX is a Text Native Database eXtension.",
                "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
                "Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
                "With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
                "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
                "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
                "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
                "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management.",
                "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
                "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
                "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
                "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
                "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
                "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
                "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
                "The business logic layer represents the interface between the database and the word-processing application.",
                "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
                "The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
                "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
                "In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
                "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
                "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
                "Each character of a text document is stored as a single object in the database [3].",
                "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
                "The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7].",
                "Figure 2 depicts the core database schema.",
                "By connecting a client to the database, a Session instance is created.",
                "One important attribute of the Session is the DocumentSession.",
                "This attribute refers to DocumentSession instances, which administrates all opened documents.",
                "For each opened document, a DocumentSession instance is created.",
                "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
                "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
                "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
                "Instances of the class FileNode either represent a folder node or a document node.",
                "The folder node corresponds to a folder of a file system and the document node to that of a file.",
                "Instances of the class Char represent the characters of a document.",
                "The value of a character is stored in the attribute CharacterValue.",
                "The sequence is defined by the attributes After and Before of the class Char.",
                "Particular instances of Char mark the beginning and the end of a document.",
                "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
                "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
                "Instead, it has a so-called image as its replica.",
                "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
                "The system guarantees this unique view.",
                "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
                "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection).",
                "The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager.",
                "Then, the editor as well connects to the real-time server component.",
                "The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
                "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document.",
                "Therefore, a special communication protocol is used: the update protocol.",
                "Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors.",
                "Messages are sent from the database to the real-time server component, which sends the messages to the affected editors.",
                "The update protocol consists of different message types.",
                "Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3.",
                "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id.",
                "Class Model Figure 4 depicts the class model as well as the environment of the real-time server component.",
                "The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect.",
                "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
                "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
                "EditorWorker: This class manages the connections of type editor.",
                "The connection (a socket and its input and output stream) is stored in the SessionManager.",
                "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
                "DatabaseMessageWorker: This class is responsible for the connections of type database.",
                "At run-time, only one connection exists for each database.",
                "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
                "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
                "Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
                "At the same time, more information about the current transaction is gathered.",
                "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
                "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
                "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
                "This meta data can be used to create an alternative storage system for documents.",
                "In any case, it is not an easy task to change users familiarity to the well known hierarchical file system.",
                "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
                "Folders which correspond to the classical hierarchical file system will be called static folders.",
                "Folders where the documents are organized according to meta data, will be called dynamic folders.",
                "As all information is stored in the database, the file system, too, is based on the database.",
                "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
                "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
                "For each level of a dynamic folder, exactly one meta data item is used to.",
                "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
                "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
                "Furthermore, for each meta data used, restrictions and granularity must be defined by the user; if no restrictions are defined, all accessible documents are listed.",
                "The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
                "The directory names indicate which meta data determines the content of the sub-folder in question.",
                "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
                "Table 1.",
                "Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and restrictions are possible in order to maximize search comfort for the user.",
                "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
                "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
                "VALIDATION The proposed architecture is validated on the example of a character insertion.",
                "Insert operations are the mostly used operations in a (collaborative) editing system.",
                "The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following.",
                "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage.",
                "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
                "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
                "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
                "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
                "Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC).",
                "Editors are connected to one or more real-time server components and to the corresponding databases.",
                "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
                "Editor B now inserts a character into this document.",
                "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
                "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1).",
                "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
                "Occurring collaboration conflicts are solved and described in [3]. 4.",
                "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
                "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
                "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
                "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
                "The above-descried system is implemented in a running prototype.",
                "The system will be tested soon in line with a student workshop next autumn.",
                "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
                "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing.",
                "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
                "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing.",
                "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
                "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management.",
                "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
                "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
                "Application Strategies: In-Depth Research Report.",
                "Burton Group, 2005. 47"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "business logic layer": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT Collaborative document processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
                "We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system.",
                "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
                "Each user is always served with upto-date documents and can organize his work based on document meta data.",
                "For this, we present our conceptual architecture for such a system and discuss it with an example.",
                "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
                "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
                "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
                "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world.",
                "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected.",
                "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
                "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
                "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
                "Such meta data can be gathered during the documents creation process and can be used versatilely.",
                "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
                "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
                "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
                "As far as we know, no system exists, that satisfies the aforementioned requirements.",
                "A very good overview about realtime communication and collaboration system is described in [7].",
                "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
                "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
                "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
                "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
                "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
                "TeNDaX is a Text Native Database eXtension.",
                "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
                "Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
                "With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
                "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
                "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
                "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
                "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management.",
                "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
                "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
                "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
                "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
                "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
                "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
                "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
                "The <br>business logic layer</br> represents the interface between the database and the word-processing application.",
                "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
                "The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
                "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
                "In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
                "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
                "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
                "Each character of a text document is stored as a single object in the database [3].",
                "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
                "The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7].",
                "Figure 2 depicts the core database schema.",
                "By connecting a client to the database, a Session instance is created.",
                "One important attribute of the Session is the DocumentSession.",
                "This attribute refers to DocumentSession instances, which administrates all opened documents.",
                "For each opened document, a DocumentSession instance is created.",
                "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
                "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
                "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
                "Instances of the class FileNode either represent a folder node or a document node.",
                "The folder node corresponds to a folder of a file system and the document node to that of a file.",
                "Instances of the class Char represent the characters of a document.",
                "The value of a character is stored in the attribute CharacterValue.",
                "The sequence is defined by the attributes After and Before of the class Char.",
                "Particular instances of Char mark the beginning and the end of a document.",
                "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
                "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
                "Instead, it has a so-called image as its replica.",
                "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
                "The system guarantees this unique view.",
                "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
                "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection).",
                "The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager.",
                "Then, the editor as well connects to the real-time server component.",
                "The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
                "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document.",
                "Therefore, a special communication protocol is used: the update protocol.",
                "Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors.",
                "Messages are sent from the database to the real-time server component, which sends the messages to the affected editors.",
                "The update protocol consists of different message types.",
                "Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3.",
                "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id.",
                "Class Model Figure 4 depicts the class model as well as the environment of the real-time server component.",
                "The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect.",
                "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
                "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
                "EditorWorker: This class manages the connections of type editor.",
                "The connection (a socket and its input and output stream) is stored in the SessionManager.",
                "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
                "DatabaseMessageWorker: This class is responsible for the connections of type database.",
                "At run-time, only one connection exists for each database.",
                "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
                "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
                "Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
                "At the same time, more information about the current transaction is gathered.",
                "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
                "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
                "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
                "This meta data can be used to create an alternative storage system for documents.",
                "In any case, it is not an easy task to change users familiarity to the well known hierarchical file system.",
                "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
                "Folders which correspond to the classical hierarchical file system will be called static folders.",
                "Folders where the documents are organized according to meta data, will be called dynamic folders.",
                "As all information is stored in the database, the file system, too, is based on the database.",
                "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
                "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
                "For each level of a dynamic folder, exactly one meta data item is used to.",
                "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
                "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
                "Furthermore, for each meta data used, restrictions and granularity must be defined by the user; if no restrictions are defined, all accessible documents are listed.",
                "The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
                "The directory names indicate which meta data determines the content of the sub-folder in question.",
                "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
                "Table 1.",
                "Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and restrictions are possible in order to maximize search comfort for the user.",
                "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
                "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
                "VALIDATION The proposed architecture is validated on the example of a character insertion.",
                "Insert operations are the mostly used operations in a (collaborative) editing system.",
                "The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following.",
                "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage.",
                "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
                "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
                "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
                "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
                "Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC).",
                "Editors are connected to one or more real-time server components and to the corresponding databases.",
                "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
                "Editor B now inserts a character into this document.",
                "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
                "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1).",
                "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
                "Occurring collaboration conflicts are solved and described in [3]. 4.",
                "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
                "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
                "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
                "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
                "The above-descried system is implemented in a running prototype.",
                "The system will be tested soon in line with a student workshop next autumn.",
                "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
                "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing.",
                "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
                "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing.",
                "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
                "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management.",
                "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
                "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
                "Application Strategies: In-Depth Research Report.",
                "Burton Group, 2005. 47"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "La \"capa lógica de negocios\" representa la interfaz entre la base de datos y la aplicación de procesamiento de palabras."
            ],
            "translated_text": "",
            "candidates": [
                "capa de lógica de negocios",
                "capa lógica de negocios"
            ],
            "error": []
        },
        "real-time server component": {
            "translated_key": "Componente del servidor en tiempo real",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT Collaborative document processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
                "We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system.",
                "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
                "Each user is always served with upto-date documents and can organize his work based on document meta data.",
                "For this, we present our conceptual architecture for such a system and discuss it with an example.",
                "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
                "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
                "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
                "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world.",
                "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected.",
                "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
                "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
                "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
                "Such meta data can be gathered during the documents creation process and can be used versatilely.",
                "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
                "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
                "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
                "As far as we know, no system exists, that satisfies the aforementioned requirements.",
                "A very good overview about realtime communication and collaboration system is described in [7].",
                "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
                "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
                "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
                "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
                "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
                "TeNDaX is a Text Native Database eXtension.",
                "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
                "Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
                "With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
                "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
                "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
                "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
                "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management.",
                "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
                "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
                "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
                "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
                "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
                "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
                "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
                "The business logic layer represents the interface between the database and the word-processing application.",
                "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
                "The <br>real-time server component</br> (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
                "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
                "In the following, we will briefly present the database schema, the editor and the <br>real-time server component</br> as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
                "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
                "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
                "Each character of a text document is stored as a single object in the database [3].",
                "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
                "The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7].",
                "Figure 2 depicts the core database schema.",
                "By connecting a client to the database, a Session instance is created.",
                "One important attribute of the Session is the DocumentSession.",
                "This attribute refers to DocumentSession instances, which administrates all opened documents.",
                "For each opened document, a DocumentSession instance is created.",
                "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
                "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
                "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
                "Instances of the class FileNode either represent a folder node or a document node.",
                "The folder node corresponds to a folder of a file system and the document node to that of a file.",
                "Instances of the class Char represent the characters of a document.",
                "The value of a character is stored in the attribute CharacterValue.",
                "The sequence is defined by the attributes After and Before of the class Char.",
                "Particular instances of Char mark the beginning and the end of a document.",
                "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
                "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
                "Instead, it has a so-called image as its replica.",
                "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
                "The system guarantees this unique view.",
                "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 <br>real-time server component</br> The <br>real-time server component</br> is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
                "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the <br>real-time server component</br> (if there isnt already a connection).",
                "The database system informs the <br>real-time server component</br> about each new editor session (session), which the realtime server component administrates in his SessionManager.",
                "Then, the editor as well connects to the <br>real-time server component</br>.",
                "The <br>real-time server component</br> adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
                "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the <br>real-time server component</br>, which in turns, sends the changes to all the 43 editors working on the same document.",
                "Therefore, a special communication protocol is used: the update protocol.",
                "Update Protocol The <br>real-time server component</br> uses the update protocol to communicate with the database and the editors.",
                "Messages are sent from the database to the <br>real-time server component</br>, which sends the messages to the affected editors.",
                "The update protocol consists of different message types.",
                "Messages consist of two packages: package one contains information for the <br>real-time server component</br> whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and <br>real-time server component</br> Protocol between real -time server component and editors Figure 3.",
                "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the <br>real-time server component</br> sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the <br>real-time server component</br> sends the editor data to all editors who have opened the document with the indicated file-Id.",
                "Class Model Figure 4 depicts the class model as well as the environment of the <br>real-time server component</br>.",
                "The environment consists mainly of the editor and the database, but any other client application that could make use of the <br>real-time server component</br> can connect.",
                "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
                "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
                "EditorWorker: This class manages the connections of type editor.",
                "The connection (a socket and its input and output stream) is stored in the SessionManager.",
                "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
                "DatabaseMessageWorker: This class is responsible for the connections of type database.",
                "At run-time, only one connection exists for each database.",
                "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
                "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
                "<br>real-time server component</br> Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
                "At the same time, more information about the current transaction is gathered.",
                "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
                "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
                "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
                "This meta data can be used to create an alternative storage system for documents.",
                "In any case, it is not an easy task to change users familiarity to the well known hierarchical file system.",
                "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
                "Folders which correspond to the classical hierarchical file system will be called static folders.",
                "Folders where the documents are organized according to meta data, will be called dynamic folders.",
                "As all information is stored in the database, the file system, too, is based on the database.",
                "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
                "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
                "For each level of a dynamic folder, exactly one meta data item is used to.",
                "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
                "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
                "Furthermore, for each meta data used, restrictions and granularity must be defined by the user; if no restrictions are defined, all accessible documents are listed.",
                "The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
                "The directory names indicate which meta data determines the content of the sub-folder in question.",
                "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
                "Table 1.",
                "Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and restrictions are possible in order to maximize search comfort for the user.",
                "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
                "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
                "VALIDATION The proposed architecture is validated on the example of a character insertion.",
                "Insert operations are the mostly used operations in a (collaborative) editing system.",
                "The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following.",
                "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the <br>real-time server component</br>. sendUpdate(UpdateMessage) The function Read is used in the <br>real-time server component</br> to read the UpdateMessage.",
                "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
                "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
                "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
                "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the <br>real-time server component</br> sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
                "Each database is connected to an application server (AS) and each application server is connected to a <br>real-time server component</br> (RTSC).",
                "Editors are connected to one or more real-time server components and to the corresponding databases.",
                "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
                "Editor B now inserts a character into this document.",
                "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
                "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to <br>real-time server component</br> 1 (via AS 1).",
                "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
                "Occurring collaboration conflicts are solved and described in [3]. 4.",
                "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
                "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
                "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
                "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
                "The above-descried system is implemented in a running prototype.",
                "The system will be tested soon in line with a student workshop next autumn.",
                "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
                "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing.",
                "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
                "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing.",
                "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
                "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management.",
                "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
                "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
                "Application Strategies: In-Depth Research Report.",
                "Burton Group, 2005. 47"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "El \"componente del servidor en tiempo real\" (marcado como RTSC 14 en la Figura 1) es responsable de la propagación de información, es decir, actualizaciones entre todos los editores conectados.",
                "A continuación, presentaremos brevemente el esquema de la base de datos, el editor y el \"componente del servidor en tiempo real\", así como el concepto de carpetas dinámicas, que permite la gestión sofisticada de documentos sobre la base de meta datos.2.1 Arquitectura de aplicaciones Un editor colaborativo en tiempo real basado en la base de datos permite abrir y editar el mismo documento simultáneamente en la misma computadora o en una red de varias computadoras y dispositivos móviles.",
                "La edición de un documento implica una serie de pasos: primero, sacar la información requerida de la imagen, en segundo lugar, invocar los métodos correspondientes dentro de la base de datos, en tercer lugar, cambiar la imagen y en cuarto lugar, informando a todos los demás clientes sobre los cambios.2.1.3 \"Componente del servidor en tiempo real\" El \"Componente del servidor en tiempo real\" es responsable de la propagación en tiempo real de cualquier cambio en un documento realizado dentro de un editor a todos los editores que trabajan o han abierto el mismo documento.",
                "Cuando un editor se conecta al servidor de aplicaciones, que a su vez se conecta a la base de datos, la base de datos también establece una conexión con el \"componente del servidor en tiempo real\" (si no hay una conexión).",
                "El sistema de base de datos informa el \"componente del servidor en tiempo real\" sobre cada nueva sesión del editor (sesión), que el componente del servidor en tiempo real administra en su sesion manager.",
                "Luego, el editor también se conecta al \"componente del servidor en tiempo real\".",
                "El \"Componente del servidor en tiempo real\" agrega el socket del editor a la estructura de datos de los clientes en el SessionManager y luego está listo para comunicarse.",
                "Cada vez que un cambio en un documento de un editor se almacena persistentemente en la base de datos, la base de datos envía un mensaje al \"componente del servidor en tiempo real\", que a su vez, envía los cambios a todos los 43 editores que trabajan en el mismo documento.",
                "Actualizar el protocolo El \"Componente del servidor en tiempo real\" utiliza el protocolo de actualización para comunicarse con la base de datos y los editores.",
                "Los mensajes se envían desde la base de datos a la \"componente del servidor en tiempo real\", que envía los mensajes a los editores afectados."
            ],
            "translated_text": "",
            "candidates": [
                "Componente del servidor en tiempo real",
                "componente del servidor en tiempo real",
                "Componente del servidor en tiempo real",
                "componente del servidor en tiempo real",
                "Componente del servidor en tiempo real",
                "Componente del servidor en tiempo real",
                "Componente del servidor en tiempo real",
                "Componente del servidor en tiempo real",
                "componente del servidor en tiempo real",
                "Componente del servidor en tiempo real",
                "componente del servidor en tiempo real",
                "Componente del servidor en tiempo real",
                "componente del servidor en tiempo real",
                "Componente del servidor en tiempo real",
                "Componente del servidor en tiempo real",
                "Componente del servidor en tiempo real",
                "componente del servidor en tiempo real",
                "Componente del servidor en tiempo real",
                "Componente del servidor en tiempo real",
                "Componente del servidor en tiempo real",
                "componente del servidor en tiempo real"
            ],
            "error": []
        },
        "collaborative layouting": {
            "translated_key": "diseño colaborativo",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT Collaborative document processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
                "We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system.",
                "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
                "Each user is always served with upto-date documents and can organize his work based on document meta data.",
                "For this, we present our conceptual architecture for such a system and discuss it with an example.",
                "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
                "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
                "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
                "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world.",
                "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected.",
                "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
                "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
                "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
                "Such meta data can be gathered during the documents creation process and can be used versatilely.",
                "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
                "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
                "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
                "As far as we know, no system exists, that satisfies the aforementioned requirements.",
                "A very good overview about realtime communication and collaboration system is described in [7].",
                "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
                "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
                "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
                "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
                "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
                "TeNDaX is a Text Native Database eXtension.",
                "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
                "Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
                "With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
                "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
                "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
                "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
                "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management.",
                "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
                "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
                "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
                "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
                "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
                "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
                "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
                "The business logic layer represents the interface between the database and the word-processing application.",
                "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
                "The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
                "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
                "In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
                "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
                "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
                "Each character of a text document is stored as a single object in the database [3].",
                "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
                "The concept and performance issues of such a text database are described in [3], <br>collaborative layouting</br> in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7].",
                "Figure 2 depicts the core database schema.",
                "By connecting a client to the database, a Session instance is created.",
                "One important attribute of the Session is the DocumentSession.",
                "This attribute refers to DocumentSession instances, which administrates all opened documents.",
                "For each opened document, a DocumentSession instance is created.",
                "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
                "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
                "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
                "Instances of the class FileNode either represent a folder node or a document node.",
                "The folder node corresponds to a folder of a file system and the document node to that of a file.",
                "Instances of the class Char represent the characters of a document.",
                "The value of a character is stored in the attribute CharacterValue.",
                "The sequence is defined by the attributes After and Before of the class Char.",
                "Particular instances of Char mark the beginning and the end of a document.",
                "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
                "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
                "Instead, it has a so-called image as its replica.",
                "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
                "The system guarantees this unique view.",
                "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
                "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection).",
                "The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager.",
                "Then, the editor as well connects to the real-time server component.",
                "The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
                "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document.",
                "Therefore, a special communication protocol is used: the update protocol.",
                "Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors.",
                "Messages are sent from the database to the real-time server component, which sends the messages to the affected editors.",
                "The update protocol consists of different message types.",
                "Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3.",
                "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id.",
                "Class Model Figure 4 depicts the class model as well as the environment of the real-time server component.",
                "The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect.",
                "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
                "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
                "EditorWorker: This class manages the connections of type editor.",
                "The connection (a socket and its input and output stream) is stored in the SessionManager.",
                "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
                "DatabaseMessageWorker: This class is responsible for the connections of type database.",
                "At run-time, only one connection exists for each database.",
                "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
                "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
                "Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
                "At the same time, more information about the current transaction is gathered.",
                "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
                "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
                "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
                "This meta data can be used to create an alternative storage system for documents.",
                "In any case, it is not an easy task to change users familiarity to the well known hierarchical file system.",
                "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
                "Folders which correspond to the classical hierarchical file system will be called static folders.",
                "Folders where the documents are organized according to meta data, will be called dynamic folders.",
                "As all information is stored in the database, the file system, too, is based on the database.",
                "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
                "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
                "For each level of a dynamic folder, exactly one meta data item is used to.",
                "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
                "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
                "Furthermore, for each meta data used, restrictions and granularity must be defined by the user; if no restrictions are defined, all accessible documents are listed.",
                "The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
                "The directory names indicate which meta data determines the content of the sub-folder in question.",
                "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
                "Table 1.",
                "Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and restrictions are possible in order to maximize search comfort for the user.",
                "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
                "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
                "VALIDATION The proposed architecture is validated on the example of a character insertion.",
                "Insert operations are the mostly used operations in a (collaborative) editing system.",
                "The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following.",
                "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage.",
                "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
                "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
                "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
                "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
                "Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC).",
                "Editors are connected to one or more real-time server components and to the corresponding databases.",
                "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
                "Editor B now inserts a character into this document.",
                "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
                "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1).",
                "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
                "Occurring collaboration conflicts are solved and described in [3]. 4.",
                "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
                "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
                "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
                "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
                "The above-descried system is implemented in a running prototype.",
                "The system will be tested soon in line with a student workshop next autumn.",
                "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
                "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting <br>collaborative layouting</br> in Word Processing.",
                "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
                "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing.",
                "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
                "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management.",
                "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
                "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
                "Application Strategies: In-Depth Research Report.",
                "Burton Group, 2005. 47"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "El concepto y los problemas de rendimiento de dicha base de datos de texto se describen en [3], \"diseño colaborativo\" en [2], procesos comerciales de colaboración dinámicos dentro de los documentos en [5], el modelo de meta datos de tiempo de creación de edición de texto en [6] yLa relación con las bases de datos XML en [7].",
                "Massachusetts, EE. UU., 2003. [2] Hodel, T. B., Businger, D. y Dittrich, K. R.: Apoyo de \"diseño colaborativo\" en el procesamiento de palabras."
            ],
            "translated_text": "",
            "candidates": [
                "diseño colaborativo",
                "diseño colaborativo",
                "diseño colaborativo",
                "diseño colaborativo"
            ],
            "error": []
        },
        "hierarchical file system": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT Collaborative document processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
                "We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system.",
                "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
                "Each user is always served with upto-date documents and can organize his work based on document meta data.",
                "For this, we present our conceptual architecture for such a system and discuss it with an example.",
                "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
                "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
                "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
                "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world.",
                "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected.",
                "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
                "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
                "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
                "Such meta data can be gathered during the documents creation process and can be used versatilely.",
                "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
                "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
                "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
                "As far as we know, no system exists, that satisfies the aforementioned requirements.",
                "A very good overview about realtime communication and collaboration system is described in [7].",
                "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
                "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
                "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
                "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
                "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
                "TeNDaX is a Text Native Database eXtension.",
                "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
                "Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
                "With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
                "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
                "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
                "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
                "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management.",
                "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
                "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
                "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
                "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
                "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
                "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
                "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
                "The business logic layer represents the interface between the database and the word-processing application.",
                "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
                "The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
                "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
                "In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
                "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
                "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
                "Each character of a text document is stored as a single object in the database [3].",
                "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
                "The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7].",
                "Figure 2 depicts the core database schema.",
                "By connecting a client to the database, a Session instance is created.",
                "One important attribute of the Session is the DocumentSession.",
                "This attribute refers to DocumentSession instances, which administrates all opened documents.",
                "For each opened document, a DocumentSession instance is created.",
                "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
                "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
                "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
                "Instances of the class FileNode either represent a folder node or a document node.",
                "The folder node corresponds to a folder of a file system and the document node to that of a file.",
                "Instances of the class Char represent the characters of a document.",
                "The value of a character is stored in the attribute CharacterValue.",
                "The sequence is defined by the attributes After and Before of the class Char.",
                "Particular instances of Char mark the beginning and the end of a document.",
                "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
                "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
                "Instead, it has a so-called image as its replica.",
                "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
                "The system guarantees this unique view.",
                "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
                "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection).",
                "The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager.",
                "Then, the editor as well connects to the real-time server component.",
                "The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
                "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document.",
                "Therefore, a special communication protocol is used: the update protocol.",
                "Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors.",
                "Messages are sent from the database to the real-time server component, which sends the messages to the affected editors.",
                "The update protocol consists of different message types.",
                "Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3.",
                "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id.",
                "Class Model Figure 4 depicts the class model as well as the environment of the real-time server component.",
                "The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect.",
                "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
                "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
                "EditorWorker: This class manages the connections of type editor.",
                "The connection (a socket and its input and output stream) is stored in the SessionManager.",
                "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
                "DatabaseMessageWorker: This class is responsible for the connections of type database.",
                "At run-time, only one connection exists for each database.",
                "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
                "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
                "Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
                "At the same time, more information about the current transaction is gathered.",
                "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
                "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
                "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
                "This meta data can be used to create an alternative storage system for documents.",
                "In any case, it is not an easy task to change users familiarity to the well known <br>hierarchical file system</br>.",
                "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
                "Folders which correspond to the classical <br>hierarchical file system</br> will be called static folders.",
                "Folders where the documents are organized according to meta data, will be called dynamic folders.",
                "As all information is stored in the database, the file system, too, is based on the database.",
                "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
                "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
                "For each level of a dynamic folder, exactly one meta data item is used to.",
                "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
                "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
                "Furthermore, for each meta data used, restrictions and granularity must be defined by the user; if no restrictions are defined, all accessible documents are listed.",
                "The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
                "The directory names indicate which meta data determines the content of the sub-folder in question.",
                "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
                "Table 1.",
                "Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and restrictions are possible in order to maximize search comfort for the user.",
                "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
                "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
                "VALIDATION The proposed architecture is validated on the example of a character insertion.",
                "Insert operations are the mostly used operations in a (collaborative) editing system.",
                "The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following.",
                "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage.",
                "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
                "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
                "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
                "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
                "Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC).",
                "Editors are connected to one or more real-time server components and to the corresponding databases.",
                "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
                "Editor B now inserts a character into this document.",
                "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
                "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1).",
                "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
                "Occurring collaboration conflicts are solved and described in [3]. 4.",
                "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
                "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
                "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
                "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
                "The above-descried system is implemented in a running prototype.",
                "The system will be tested soon in line with a student workshop next autumn.",
                "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
                "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing.",
                "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
                "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing.",
                "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
                "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management.",
                "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
                "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
                "Application Strategies: In-Depth Research Report.",
                "Burton Group, 2005. 47"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "En cualquier caso, no es una tarea fácil cambiar la familiaridad de los usuarios al conocido \"sistema de archivos jerárquicos\".",
                "Las carpetas que corresponden al \"sistema de archivos jerárquico\" clásico se denominarán carpetas estáticas."
            ],
            "translated_text": "",
            "candidates": [
                "sistema de archivos jerárquico",
                "sistema de archivos jerárquicos",
                "sistema de archivos jerárquico",
                "sistema de archivos jerárquico"
            ],
            "error": []
        },
        "restriction": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT Collaborative document processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
                "We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system.",
                "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
                "Each user is always served with upto-date documents and can organize his work based on document meta data.",
                "For this, we present our conceptual architecture for such a system and discuss it with an example.",
                "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
                "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
                "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
                "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world.",
                "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected.",
                "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
                "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
                "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
                "Such meta data can be gathered during the documents creation process and can be used versatilely.",
                "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
                "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
                "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
                "As far as we know, no system exists, that satisfies the aforementioned requirements.",
                "A very good overview about realtime communication and collaboration system is described in [7].",
                "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
                "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
                "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
                "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
                "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
                "TeNDaX is a Text Native Database eXtension.",
                "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
                "Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
                "With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
                "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
                "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
                "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
                "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management.",
                "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
                "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
                "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
                "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
                "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
                "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
                "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
                "The business logic layer represents the interface between the database and the word-processing application.",
                "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
                "The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
                "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
                "In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
                "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
                "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
                "Each character of a text document is stored as a single object in the database [3].",
                "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
                "The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7].",
                "Figure 2 depicts the core database schema.",
                "By connecting a client to the database, a Session instance is created.",
                "One important attribute of the Session is the DocumentSession.",
                "This attribute refers to DocumentSession instances, which administrates all opened documents.",
                "For each opened document, a DocumentSession instance is created.",
                "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
                "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
                "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
                "Instances of the class FileNode either represent a folder node or a document node.",
                "The folder node corresponds to a folder of a file system and the document node to that of a file.",
                "Instances of the class Char represent the characters of a document.",
                "The value of a character is stored in the attribute CharacterValue.",
                "The sequence is defined by the attributes After and Before of the class Char.",
                "Particular instances of Char mark the beginning and the end of a document.",
                "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
                "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
                "Instead, it has a so-called image as its replica.",
                "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
                "The system guarantees this unique view.",
                "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
                "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection).",
                "The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager.",
                "Then, the editor as well connects to the real-time server component.",
                "The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
                "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document.",
                "Therefore, a special communication protocol is used: the update protocol.",
                "Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors.",
                "Messages are sent from the database to the real-time server component, which sends the messages to the affected editors.",
                "The update protocol consists of different message types.",
                "Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3.",
                "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id.",
                "Class Model Figure 4 depicts the class model as well as the environment of the real-time server component.",
                "The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect.",
                "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
                "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
                "EditorWorker: This class manages the connections of type editor.",
                "The connection (a socket and its input and output stream) is stored in the SessionManager.",
                "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
                "DatabaseMessageWorker: This class is responsible for the connections of type database.",
                "At run-time, only one connection exists for each database.",
                "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
                "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
                "Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
                "At the same time, more information about the current transaction is gathered.",
                "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
                "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
                "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
                "This meta data can be used to create an alternative storage system for documents.",
                "In any case, it is not an easy task to change users familiarity to the well known hierarchical file system.",
                "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
                "Folders which correspond to the classical hierarchical file system will be called static folders.",
                "Folders where the documents are organized according to meta data, will be called dynamic folders.",
                "As all information is stored in the database, the file system, too, is based on the database.",
                "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
                "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
                "For each level of a dynamic folder, exactly one meta data item is used to.",
                "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
                "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
                "Furthermore, for each meta data used, <br>restriction</br>s and granularity must be defined by the user; if no <br>restriction</br>s are defined, all accessible documents are listed.",
                "The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
                "The directory names indicate which meta data determines the content of the sub-folder in question.",
                "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
                "Table 1.",
                "Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and <br>restriction</br>s are possible in order to maximize search comfort for the user.",
                "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
                "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
                "VALIDATION The proposed architecture is validated on the example of a character insertion.",
                "Insert operations are the mostly used operations in a (collaborative) editing system.",
                "The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following.",
                "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage.",
                "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
                "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
                "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
                "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
                "Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC).",
                "Editors are connected to one or more real-time server components and to the corresponding databases.",
                "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
                "Editor B now inserts a character into this document.",
                "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
                "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1).",
                "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
                "Occurring collaboration conflicts are solved and described in [3]. 4.",
                "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
                "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
                "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
                "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
                "The above-descried system is implemented in a running prototype.",
                "The system will be tested soon in line with a student workshop next autumn.",
                "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
                "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing.",
                "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
                "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing.",
                "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
                "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management.",
                "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
                "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
                "Application Strategies: In-Depth Research Report.",
                "Burton Group, 2005. 47"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Además, para cada meta datos utilizados, la \"restricción\" y la granularidad deben definir el usuario;Si no se definen \"restricciones\", se enumeran todos los documentos accesibles.",
                "Definición de las carpetas dinámicas (ejemplo) Restricciones de meta datos de nivel Granularidad 1 El creador solo muestra documentos que han sido creados por los usuarios Leona o Hodel o una carpeta una carpeta por Creador 2 Ubicación actual Solo muestra documentos que se leen en mi ubicación actual una carpeta por estado de tarea Estado de la tarea3 autores solo muestran documentos en los que al menos el 40% fue escrito por el usuario Leone cada 20% de una carpeta Los cambios ad-hoc de granularidad y la \"restricción\" son posibles para maximizar la comodidad de búsqueda para el usuario."
            ],
            "translated_text": "",
            "candidates": [
                "restricción",
                "restricción",
                "restricciones",
                "restricción",
                "restricción"
            ],
            "error": []
        },
        "granularity": {
            "translated_key": "granularidad",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT Collaborative document processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
                "We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system.",
                "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
                "Each user is always served with upto-date documents and can organize his work based on document meta data.",
                "For this, we present our conceptual architecture for such a system and discuss it with an example.",
                "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
                "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
                "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
                "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world.",
                "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected.",
                "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
                "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
                "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
                "Such meta data can be gathered during the documents creation process and can be used versatilely.",
                "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
                "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
                "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
                "As far as we know, no system exists, that satisfies the aforementioned requirements.",
                "A very good overview about realtime communication and collaboration system is described in [7].",
                "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
                "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
                "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
                "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
                "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
                "TeNDaX is a Text Native Database eXtension.",
                "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
                "Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
                "With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
                "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
                "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
                "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
                "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management.",
                "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
                "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
                "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
                "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
                "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
                "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
                "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
                "The business logic layer represents the interface between the database and the word-processing application.",
                "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
                "The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
                "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
                "In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
                "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
                "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
                "Each character of a text document is stored as a single object in the database [3].",
                "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
                "The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7].",
                "Figure 2 depicts the core database schema.",
                "By connecting a client to the database, a Session instance is created.",
                "One important attribute of the Session is the DocumentSession.",
                "This attribute refers to DocumentSession instances, which administrates all opened documents.",
                "For each opened document, a DocumentSession instance is created.",
                "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
                "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
                "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
                "Instances of the class FileNode either represent a folder node or a document node.",
                "The folder node corresponds to a folder of a file system and the document node to that of a file.",
                "Instances of the class Char represent the characters of a document.",
                "The value of a character is stored in the attribute CharacterValue.",
                "The sequence is defined by the attributes After and Before of the class Char.",
                "Particular instances of Char mark the beginning and the end of a document.",
                "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
                "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
                "Instead, it has a so-called image as its replica.",
                "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
                "The system guarantees this unique view.",
                "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
                "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection).",
                "The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager.",
                "Then, the editor as well connects to the real-time server component.",
                "The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
                "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document.",
                "Therefore, a special communication protocol is used: the update protocol.",
                "Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors.",
                "Messages are sent from the database to the real-time server component, which sends the messages to the affected editors.",
                "The update protocol consists of different message types.",
                "Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3.",
                "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id.",
                "Class Model Figure 4 depicts the class model as well as the environment of the real-time server component.",
                "The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect.",
                "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
                "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
                "EditorWorker: This class manages the connections of type editor.",
                "The connection (a socket and its input and output stream) is stored in the SessionManager.",
                "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
                "DatabaseMessageWorker: This class is responsible for the connections of type database.",
                "At run-time, only one connection exists for each database.",
                "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
                "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
                "Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
                "At the same time, more information about the current transaction is gathered.",
                "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
                "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
                "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
                "This meta data can be used to create an alternative storage system for documents.",
                "In any case, it is not an easy task to change users familiarity to the well known hierarchical file system.",
                "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
                "Folders which correspond to the classical hierarchical file system will be called static folders.",
                "Folders where the documents are organized according to meta data, will be called dynamic folders.",
                "As all information is stored in the database, the file system, too, is based on the database.",
                "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
                "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
                "For each level of a dynamic folder, exactly one meta data item is used to.",
                "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
                "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
                "Furthermore, for each meta data used, restrictions and <br>granularity</br> must be defined by the user; if no restrictions are defined, all accessible documents are listed.",
                "The <br>granularity</br> therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
                "The directory names indicate which meta data determines the content of the sub-folder in question.",
                "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
                "Table 1.",
                "Defining dynamic folders (example) Level Meta data Restrictions <br>granularity</br> 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of <br>granularity</br> and restrictions are possible in order to maximize search comfort for the user.",
                "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
                "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
                "VALIDATION The proposed architecture is validated on the example of a character insertion.",
                "Insert operations are the mostly used operations in a (collaborative) editing system.",
                "The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following.",
                "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage.",
                "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
                "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
                "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
                "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
                "Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC).",
                "Editors are connected to one or more real-time server components and to the corresponding databases.",
                "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
                "Editor B now inserts a character into this document.",
                "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
                "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1).",
                "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
                "Occurring collaboration conflicts are solved and described in [3]. 4.",
                "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
                "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
                "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
                "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
                "The above-descried system is implemented in a running prototype.",
                "The system will be tested soon in line with a student workshop next autumn.",
                "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
                "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing.",
                "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
                "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing.",
                "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
                "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management.",
                "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
                "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
                "Application Strategies: In-Depth Research Report.",
                "Burton Group, 2005. 47"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Además, para cada meta datos utilizados, el usuario debe definir las restricciones y la \"granularidad\";Si no se definen restricciones, se enumeran todos los documentos accesibles.",
                "Por lo tanto, la \"granularidad\" influye en el número de subcarpetas que se creará para la división de los documentos.44 A medida que el usuario ingresa a la estructura del árbol de la carpeta dinámica, puede navegar a través de las ramas para llegar a los documentos que está buscando.",
                "Definición de las restricciones de meta datos de niveles de carpetas dinámicas (ejemplo) \"granularidad\" 1 El creador solo muestra documentos que han sido creados por los usuarios Leona o Hodel o una carpeta de una vía por el creador 2 Ubicación actual solo muestran documentos que se leen en mi ubicación actual una carpeta PER PER PER PER PER PER PER IEl estado de la tarea 3 Los autores solo muestran documentos en los que al menos el 40% fue escrito por el usuario Leone cada 20% de una carpeta Los cambios ad-hoc de \"granularidad\" y las restricciones son posibles para maximizar la comodidad de búsqueda para el usuario."
            ],
            "translated_text": "",
            "candidates": [
                "granularidad",
                "granularidad",
                "granularidad",
                "granularidad",
                "granularidad",
                "granularidad",
                "granularidad"
            ],
            "error": []
        },
        "character insertion": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT Collaborative document processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
                "We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system.",
                "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
                "Each user is always served with upto-date documents and can organize his work based on document meta data.",
                "For this, we present our conceptual architecture for such a system and discuss it with an example.",
                "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
                "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
                "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
                "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world.",
                "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected.",
                "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
                "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
                "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
                "Such meta data can be gathered during the documents creation process and can be used versatilely.",
                "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
                "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
                "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
                "As far as we know, no system exists, that satisfies the aforementioned requirements.",
                "A very good overview about realtime communication and collaboration system is described in [7].",
                "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
                "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
                "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
                "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
                "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
                "TeNDaX is a Text Native Database eXtension.",
                "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
                "Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
                "With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
                "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
                "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
                "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
                "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management.",
                "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
                "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
                "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
                "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
                "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
                "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
                "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
                "The business logic layer represents the interface between the database and the word-processing application.",
                "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
                "The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
                "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
                "In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
                "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
                "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
                "Each character of a text document is stored as a single object in the database [3].",
                "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
                "The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7].",
                "Figure 2 depicts the core database schema.",
                "By connecting a client to the database, a Session instance is created.",
                "One important attribute of the Session is the DocumentSession.",
                "This attribute refers to DocumentSession instances, which administrates all opened documents.",
                "For each opened document, a DocumentSession instance is created.",
                "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
                "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
                "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
                "Instances of the class FileNode either represent a folder node or a document node.",
                "The folder node corresponds to a folder of a file system and the document node to that of a file.",
                "Instances of the class Char represent the characters of a document.",
                "The value of a character is stored in the attribute CharacterValue.",
                "The sequence is defined by the attributes After and Before of the class Char.",
                "Particular instances of Char mark the beginning and the end of a document.",
                "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
                "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
                "Instead, it has a so-called image as its replica.",
                "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
                "The system guarantees this unique view.",
                "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
                "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection).",
                "The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager.",
                "Then, the editor as well connects to the real-time server component.",
                "The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
                "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document.",
                "Therefore, a special communication protocol is used: the update protocol.",
                "Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors.",
                "Messages are sent from the database to the real-time server component, which sends the messages to the affected editors.",
                "The update protocol consists of different message types.",
                "Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3.",
                "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id.",
                "Class Model Figure 4 depicts the class model as well as the environment of the real-time server component.",
                "The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect.",
                "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
                "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
                "EditorWorker: This class manages the connections of type editor.",
                "The connection (a socket and its input and output stream) is stored in the SessionManager.",
                "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
                "DatabaseMessageWorker: This class is responsible for the connections of type database.",
                "At run-time, only one connection exists for each database.",
                "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
                "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
                "Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
                "At the same time, more information about the current transaction is gathered.",
                "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
                "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
                "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
                "This meta data can be used to create an alternative storage system for documents.",
                "In any case, it is not an easy task to change users familiarity to the well known hierarchical file system.",
                "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
                "Folders which correspond to the classical hierarchical file system will be called static folders.",
                "Folders where the documents are organized according to meta data, will be called dynamic folders.",
                "As all information is stored in the database, the file system, too, is based on the database.",
                "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
                "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
                "For each level of a dynamic folder, exactly one meta data item is used to.",
                "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
                "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
                "Furthermore, for each meta data used, restrictions and granularity must be defined by the user; if no restrictions are defined, all accessible documents are listed.",
                "The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
                "The directory names indicate which meta data determines the content of the sub-folder in question.",
                "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
                "Table 1.",
                "Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and restrictions are possible in order to maximize search comfort for the user.",
                "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
                "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
                "VALIDATION The proposed architecture is validated on the example of a <br>character insertion</br>.",
                "Insert operations are the mostly used operations in a (collaborative) editing system.",
                "The <br>character insertion</br> is based on the TeNDaX Insert Algorithm which is formally described in the following.",
                "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage.",
                "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
                "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
                "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
                "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
                "Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC).",
                "Editors are connected to one or more real-time server components and to the corresponding databases.",
                "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
                "Editor B now inserts a character into this document.",
                "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
                "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1).",
                "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
                "Occurring collaboration conflicts are solved and described in [3]. 4.",
                "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
                "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
                "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
                "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
                "The above-descried system is implemented in a running prototype.",
                "The system will be tested soon in line with a student workshop next autumn.",
                "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
                "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing.",
                "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
                "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing.",
                "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
                "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management.",
                "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
                "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
                "Application Strategies: In-Depth Research Report.",
                "Burton Group, 2005. 47"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Validación La arquitectura propuesta se valida en el ejemplo de una \"inserción de caracteres\".",
                "La \"inserción del carácter\" se basa en el algoritmo de inserción Tendax que se describe formalmente a continuación."
            ],
            "translated_text": "",
            "candidates": [
                "inserción del personaje",
                "inserción de caracteres",
                "inserción del personaje",
                "inserción del carácter"
            ],
            "error": []
        },
        "pervasive document edit and management system": {
            "translated_key": "Sistema de gestión de documentos generalizados",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT Collaborative document processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
                "We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system.",
                "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
                "Each user is always served with upto-date documents and can organize his work based on document meta data.",
                "For this, we present our conceptual architecture for such a system and discuss it with an example.",
                "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
                "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
                "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
                "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world.",
                "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected.",
                "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
                "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
                "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
                "Such meta data can be gathered during the documents creation process and can be used versatilely.",
                "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
                "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
                "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
                "As far as we know, no system exists, that satisfies the aforementioned requirements.",
                "A very good overview about realtime communication and collaboration system is described in [7].",
                "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
                "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
                "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
                "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
                "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
                "TeNDaX is a Text Native Database eXtension.",
                "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
                "Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
                "With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
                "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
                "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
                "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
                "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management.",
                "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
                "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
                "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
                "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
                "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
                "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
                "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
                "The business logic layer represents the interface between the database and the word-processing application.",
                "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
                "The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
                "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
                "In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
                "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
                "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
                "Each character of a text document is stored as a single object in the database [3].",
                "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
                "The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7].",
                "Figure 2 depicts the core database schema.",
                "By connecting a client to the database, a Session instance is created.",
                "One important attribute of the Session is the DocumentSession.",
                "This attribute refers to DocumentSession instances, which administrates all opened documents.",
                "For each opened document, a DocumentSession instance is created.",
                "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
                "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
                "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
                "Instances of the class FileNode either represent a folder node or a document node.",
                "The folder node corresponds to a folder of a file system and the document node to that of a file.",
                "Instances of the class Char represent the characters of a document.",
                "The value of a character is stored in the attribute CharacterValue.",
                "The sequence is defined by the attributes After and Before of the class Char.",
                "Particular instances of Char mark the beginning and the end of a document.",
                "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
                "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
                "Instead, it has a so-called image as its replica.",
                "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
                "The system guarantees this unique view.",
                "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
                "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection).",
                "The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager.",
                "Then, the editor as well connects to the real-time server component.",
                "The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
                "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document.",
                "Therefore, a special communication protocol is used: the update protocol.",
                "Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors.",
                "Messages are sent from the database to the real-time server component, which sends the messages to the affected editors.",
                "The update protocol consists of different message types.",
                "Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3.",
                "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id.",
                "Class Model Figure 4 depicts the class model as well as the environment of the real-time server component.",
                "The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect.",
                "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
                "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
                "EditorWorker: This class manages the connections of type editor.",
                "The connection (a socket and its input and output stream) is stored in the SessionManager.",
                "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
                "DatabaseMessageWorker: This class is responsible for the connections of type database.",
                "At run-time, only one connection exists for each database.",
                "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
                "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
                "Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
                "At the same time, more information about the current transaction is gathered.",
                "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
                "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
                "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
                "This meta data can be used to create an alternative storage system for documents.",
                "In any case, it is not an easy task to change users familiarity to the well known hierarchical file system.",
                "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
                "Folders which correspond to the classical hierarchical file system will be called static folders.",
                "Folders where the documents are organized according to meta data, will be called dynamic folders.",
                "As all information is stored in the database, the file system, too, is based on the database.",
                "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
                "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
                "For each level of a dynamic folder, exactly one meta data item is used to.",
                "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
                "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
                "Furthermore, for each meta data used, restrictions and granularity must be defined by the user; if no restrictions are defined, all accessible documents are listed.",
                "The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
                "The directory names indicate which meta data determines the content of the sub-folder in question.",
                "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
                "Table 1.",
                "Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and restrictions are possible in order to maximize search comfort for the user.",
                "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
                "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
                "VALIDATION The proposed architecture is validated on the example of a character insertion.",
                "Insert operations are the mostly used operations in a (collaborative) editing system.",
                "The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following.",
                "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage.",
                "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
                "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
                "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
                "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
                "Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC).",
                "Editors are connected to one or more real-time server components and to the corresponding databases.",
                "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
                "Editor B now inserts a character into this document.",
                "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
                "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1).",
                "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
                "Occurring collaboration conflicts are solved and described in [3]. 4.",
                "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
                "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
                "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
                "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
                "The above-descried system is implemented in a running prototype.",
                "The system will be tested soon in line with a student workshop next autumn.",
                "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
                "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing.",
                "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
                "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing.",
                "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
                "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management.",
                "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
                "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
                "Application Strategies: In-Depth Research Report.",
                "Burton Group, 2005. 47"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "computer support collaborative work": {
            "translated_key": "Soporte informático Trabajo colaborativo",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT Collaborative document processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
                "We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system.",
                "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
                "Each user is always served with upto-date documents and can organize his work based on document meta data.",
                "For this, we present our conceptual architecture for such a system and discuss it with an example.",
                "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
                "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
                "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
                "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world.",
                "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected.",
                "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
                "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
                "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
                "Such meta data can be gathered during the documents creation process and can be used versatilely.",
                "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
                "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
                "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
                "As far as we know, no system exists, that satisfies the aforementioned requirements.",
                "A very good overview about realtime communication and collaboration system is described in [7].",
                "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
                "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
                "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
                "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
                "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
                "TeNDaX is a Text Native Database eXtension.",
                "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
                "Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
                "With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
                "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
                "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
                "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
                "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management.",
                "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
                "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
                "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
                "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
                "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
                "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
                "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
                "The business logic layer represents the interface between the database and the word-processing application.",
                "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
                "The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
                "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
                "In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
                "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
                "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
                "Each character of a text document is stored as a single object in the database [3].",
                "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
                "The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7].",
                "Figure 2 depicts the core database schema.",
                "By connecting a client to the database, a Session instance is created.",
                "One important attribute of the Session is the DocumentSession.",
                "This attribute refers to DocumentSession instances, which administrates all opened documents.",
                "For each opened document, a DocumentSession instance is created.",
                "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
                "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
                "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
                "Instances of the class FileNode either represent a folder node or a document node.",
                "The folder node corresponds to a folder of a file system and the document node to that of a file.",
                "Instances of the class Char represent the characters of a document.",
                "The value of a character is stored in the attribute CharacterValue.",
                "The sequence is defined by the attributes After and Before of the class Char.",
                "Particular instances of Char mark the beginning and the end of a document.",
                "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
                "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
                "Instead, it has a so-called image as its replica.",
                "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
                "The system guarantees this unique view.",
                "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
                "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection).",
                "The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager.",
                "Then, the editor as well connects to the real-time server component.",
                "The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
                "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document.",
                "Therefore, a special communication protocol is used: the update protocol.",
                "Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors.",
                "Messages are sent from the database to the real-time server component, which sends the messages to the affected editors.",
                "The update protocol consists of different message types.",
                "Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3.",
                "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id.",
                "Class Model Figure 4 depicts the class model as well as the environment of the real-time server component.",
                "The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect.",
                "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
                "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
                "EditorWorker: This class manages the connections of type editor.",
                "The connection (a socket and its input and output stream) is stored in the SessionManager.",
                "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
                "DatabaseMessageWorker: This class is responsible for the connections of type database.",
                "At run-time, only one connection exists for each database.",
                "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
                "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
                "Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
                "At the same time, more information about the current transaction is gathered.",
                "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
                "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
                "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
                "This meta data can be used to create an alternative storage system for documents.",
                "In any case, it is not an easy task to change users familiarity to the well known hierarchical file system.",
                "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
                "Folders which correspond to the classical hierarchical file system will be called static folders.",
                "Folders where the documents are organized according to meta data, will be called dynamic folders.",
                "As all information is stored in the database, the file system, too, is based on the database.",
                "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
                "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
                "For each level of a dynamic folder, exactly one meta data item is used to.",
                "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
                "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
                "Furthermore, for each meta data used, restrictions and granularity must be defined by the user; if no restrictions are defined, all accessible documents are listed.",
                "The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
                "The directory names indicate which meta data determines the content of the sub-folder in question.",
                "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
                "Table 1.",
                "Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and restrictions are possible in order to maximize search comfort for the user.",
                "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
                "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
                "VALIDATION The proposed architecture is validated on the example of a character insertion.",
                "Insert operations are the mostly used operations in a (collaborative) editing system.",
                "The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following.",
                "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage.",
                "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
                "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
                "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
                "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
                "Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC).",
                "Editors are connected to one or more real-time server components and to the corresponding databases.",
                "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
                "Editor B now inserts a character into this document.",
                "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
                "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1).",
                "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
                "Occurring collaboration conflicts are solved and described in [3]. 4.",
                "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
                "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
                "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
                "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
                "The above-descried system is implemented in a running prototype.",
                "The system will be tested soon in line with a student workshop next autumn.",
                "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
                "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing.",
                "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
                "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing.",
                "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
                "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management.",
                "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
                "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
                "Application Strategies: In-Depth Research Report.",
                "Burton Group, 2005. 47"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "cscw": {
            "translated_key": "CSCW",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT Collaborative document processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
                "We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system.",
                "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
                "Each user is always served with upto-date documents and can organize his work based on document meta data.",
                "For this, we present our conceptual architecture for such a system and discuss it with an example.",
                "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
                "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
                "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
                "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive collaborative document editing and management, are rarely deployed in todays world.",
                "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. collaborative document editing and management is totally neglected.",
                "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
                "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
                "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
                "Such meta data can be gathered during the documents creation process and can be used versatilely.",
                "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
                "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
                "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
                "As far as we know, no system exists, that satisfies the aforementioned requirements.",
                "A very good overview about realtime communication and collaboration system is described in [7].",
                "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
                "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
                "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
                "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
                "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
                "TeNDaX is a Text Native Database eXtension.",
                "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
                "Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
                "With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
                "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
                "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
                "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
                "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management.",
                "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
                "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
                "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
                "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
                "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
                "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
                "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
                "The business logic layer represents the interface between the database and the word-processing application.",
                "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
                "The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
                "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
                "In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
                "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
                "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
                "Each character of a text document is stored as a single object in the database [3].",
                "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
                "The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7].",
                "Figure 2 depicts the core database schema.",
                "By connecting a client to the database, a Session instance is created.",
                "One important attribute of the Session is the DocumentSession.",
                "This attribute refers to DocumentSession instances, which administrates all opened documents.",
                "For each opened document, a DocumentSession instance is created.",
                "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
                "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
                "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
                "Instances of the class FileNode either represent a folder node or a document node.",
                "The folder node corresponds to a folder of a file system and the document node to that of a file.",
                "Instances of the class Char represent the characters of a document.",
                "The value of a character is stored in the attribute CharacterValue.",
                "The sequence is defined by the attributes After and Before of the class Char.",
                "Particular instances of Char mark the beginning and the end of a document.",
                "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
                "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
                "Instead, it has a so-called image as its replica.",
                "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
                "The system guarantees this unique view.",
                "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
                "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection).",
                "The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager.",
                "Then, the editor as well connects to the real-time server component.",
                "The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
                "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document.",
                "Therefore, a special communication protocol is used: the update protocol.",
                "Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors.",
                "Messages are sent from the database to the real-time server component, which sends the messages to the affected editors.",
                "The update protocol consists of different message types.",
                "Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3.",
                "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id.",
                "Class Model Figure 4 depicts the class model as well as the environment of the real-time server component.",
                "The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect.",
                "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
                "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
                "EditorWorker: This class manages the connections of type editor.",
                "The connection (a socket and its input and output stream) is stored in the SessionManager.",
                "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
                "DatabaseMessageWorker: This class is responsible for the connections of type database.",
                "At run-time, only one connection exists for each database.",
                "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
                "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
                "Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
                "At the same time, more information about the current transaction is gathered.",
                "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
                "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
                "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
                "This meta data can be used to create an alternative storage system for documents.",
                "In any case, it is not an easy task to change users familiarity to the well known hierarchical file system.",
                "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
                "Folders which correspond to the classical hierarchical file system will be called static folders.",
                "Folders where the documents are organized according to meta data, will be called dynamic folders.",
                "As all information is stored in the database, the file system, too, is based on the database.",
                "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
                "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
                "For each level of a dynamic folder, exactly one meta data item is used to.",
                "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
                "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
                "Furthermore, for each meta data used, restrictions and granularity must be defined by the user; if no restrictions are defined, all accessible documents are listed.",
                "The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
                "The directory names indicate which meta data determines the content of the sub-folder in question.",
                "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
                "Table 1.",
                "Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and restrictions are possible in order to maximize search comfort for the user.",
                "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
                "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
                "VALIDATION The proposed architecture is validated on the example of a character insertion.",
                "Insert operations are the mostly used operations in a (collaborative) editing system.",
                "The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following.",
                "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage.",
                "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
                "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
                "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
                "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
                "Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC).",
                "Editors are connected to one or more real-time server components and to the corresponding databases.",
                "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
                "Editor B now inserts a character into this document.",
                "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
                "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1).",
                "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
                "Occurring collaboration conflicts are solved and described in [3]. 4.",
                "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
                "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
                "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
                "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
                "The above-descried system is implemented in a running prototype.",
                "The system will be tested soon in line with a student workshop next autumn.",
                "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
                "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing.",
                "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
                "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing.",
                "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
                "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management.",
                "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
                "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
                "Application Strategies: In-Depth Research Report.",
                "Burton Group, 2005. 47"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "collaborative document": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Concept and Architecture of a Pervasive Document Editing and Managing System Stefania Leone Thomas B. Hodel Harald Gall University of Zurich, Switzerland University of Zurich, Switzerland University of Zurich, Switzerland Department of Informatics Department of Informatics Department of Informatics leone@ifi.unizh.ch hodel@ifi.unizh.ch gall@ifi.unizh.ch ABSTRACT <br>collaborative document</br> processing has been addressed by many approaches so far, most of which focus on document versioning and collaborative editing.",
                "We address this issue from a different angle and describe the concept and architecture of a pervasive document editing and managing system.",
                "It exploits database techniques and real-time updating for sophisticated collaboration scenarios on multiple devices.",
                "Each user is always served with upto-date documents and can organize his work based on document meta data.",
                "For this, we present our conceptual architecture for such a system and discuss it with an example.",
                "Categories and Subject Descriptors C.2.4 Distributed Systems [Computer-Communication Networks]: Computer System Organization, Distributed Systems, Distributed Applications General Terms Management, Measurement, Documentation, Economics, Human Factors 1.",
                "INTRODUCTION Text documents are a valuable resource for virtually any enterprise and organization.",
                "Documents like papers, reports and general business documentations contain a large part of todays (business) knowledge.",
                "Documents are mostly stored in a hierarchical folder structure on file servers and it is difficult to organize them in regard to classification, versioning etc., although it is of utmost importance that users can find, retrieve and edit up-to-date versions of documents whenever they want and, in a user-friendly way. 1.1 Problem Description With most of the commonly used word-processing applications documents can be manipulated by only one user at a time: tools for pervasive <br>collaborative document</br> editing and management, are rarely deployed in todays world.",
                "Despite the fact, that people strive for location- and time- independence, the importance of pervasive collaborative work, i.e. <br>collaborative document</br> editing and management is totally neglected.",
                "Documents could therefore be seen as a vulnerable source in todays world, which demands for an appropriate solution: The need to store, retrieve and edit these documents collaboratively anytime, everywhere and with almost every suitable device and with guaranteed mechanisms for security, consistency, availability and access control, is obvious.",
                "In addition, word processing systems ignore the fact that the history of a text document contains crucial information for its management.",
                "Such meta data includes creation date, creator, authors, version, location-based information such as time and place when/where a user reads/edits a document and so on.",
                "Such meta data can be gathered during the documents creation process and can be used versatilely.",
                "Especially in the field of pervasive document management, meta data is of crucial importance since it offers totally new ways of organizing and classifying documents: On the one hand, the users actual situation influences the users objectives.",
                "Meta data could be used to give the user the best possible view on the documents, dependent of his actual information.",
                "On the other hand, as soon as the user starts to work, i.e. reads or edits a document, new meta data can be gathered in order to make the system more adaptable and in a sense to the users situation and, to offer future users a better view on the documents.",
                "As far as we know, no system exists, that satisfies the aforementioned requirements.",
                "A very good overview about realtime communication and collaboration system is described in [7].",
                "We therefore strive for a pervasive document editing and management system, which enables pervasive (and collaborative) document editing and management: users should be able to read and edit documents whenever, wherever, with whomever and with whatever device.",
                "In this paper, we present collaborative database-based real-time word processing, which provides pervasive document editing and management functionality.",
                "It enables the user to work on documents collaboratively and offers sophisticated document management facility: the user is always served with up-to-date documents and can organize and manage documents on the base of meta data.",
                "Additionally document data is treated as first class citizen of the database as demanded in [1]. 1.2 Underlying Concepts The concept of our pervasive document editing and management system requires an appropriate architectural foundation.",
                "Our concept and implementation are based on the TeNDaX [3] collaborative database-based document editing and management system, which enables pervasive document editing and managing.",
                "TeNDaX is a Text Native Database eXtension.",
                "It enables the storage of text in databases in a native form so that editing text is finally represented as real-time transactions.",
                "Under the term text editing we understand the following: writing and deleting text (characters), copying & pasting text, defining text layout & structure, inserting notes, setting access rights, defining business processes, inserting tables, pictures, and so on i.e. all the actions regularly carried out by word processing users.",
                "With real-time transaction we mean that editing text (e.g. writing a character/word) invokes one or several database transactions so that everything, which is typed appears within the editor as soon as these objects are stored persistently.",
                "Instead of creating files and storing them in a file system, the content and all of the meta data belonging to the documents is stored in a special way in the database, which enables very fast real-time transactions for all editing tasks [2].",
                "The database schema and the above-mentioned transactions are created in such a way that everything can be done within a multiuser environment, as is usual done by database technology.",
                "As a consequence, many of the achievements (with respect to data organization and querying, recovery, integrity and security enforcement, multi-user operation, distribution management, uniform tool access, etc.) are now, by means of this approach, also available for word processing. 2.",
                "APPROACH Our pervasive editing and management system is based on the above-mentioned database-based TeNDaX approach, where document data is stored natively in the database and supports pervasive collaborative text editing and document management.",
                "We define the pervasive document editing and management system, as a system, where documents can easily be accessed and manipulated everywhere (within the network), anytime (independently of the number of users working on the same document) and with any device (desktop, notebook, PDA, mobile phone etc.).",
                "DB 3 RTSC 4 RTSC 1 RTSC 2 RTSC 3 AS 1 AS 3 DB 1 DB 2 AS 2 AS 4 DB 4 A B C D E F G Figure 1.",
                "TeNDaX Application Architecture In contrast to documents stored locally on the hard drive or on a file server, our system automatically serves the user with the up-to-date version of a document and changes done on the document are stored persistently in the database and immediately propagated to all clients who are working on the same document.",
                "Additionally, meta data gathered during the whole document creation process enables sophisticated document management.",
                "With the TeXt SQL API as abstract interface, this approach can be used by any tool and for any device.",
                "The system is built on the following components (see Figure 1): An editor in Java implements the presentation layer (A-G in Figure 1).",
                "The aim of this layer is the integration in a well-known wordprocessing application such as OpenOffice.",
                "The business logic layer represents the interface between the database and the word-processing application.",
                "It consists of the following three components: The application server (marked as AS 1-4 in Figure 1) enables text editing within the database environment and takes care of awareness, security, document management etc., all within a collaborative, real-time and multi-user environment.",
                "The real-time server component (marked as RTSC 14 in Figure 1) is responsible for the propagation of information, i.e. updates between all of the connected editors.",
                "The storage engine (data layer) primarily stores the content of documents as well as all related meta data within the database Databases can be distributed in a peer-to-peer network (DB 1-4 in Figure 1)..",
                "In the following, we will briefly present the database schema, the editor and the real-time server component as well as the concept of dynamic folders, which enables sophisticated document management on the basis of meta data. 2.1 Application Architecture A database-based real-time collaborative editor allows the same document to be opened and edited simultaneously on the same computer or over a network of several computers and mobile devices.",
                "All concurrency issues, as well as message propagation, are solved within this approach, while multiple instances of the same document are being opened [3].",
                "Each insert or delete action is a database transaction and as such, is immediately stored persistently in the database and propagated to all clients working on the same document. 2.1.1 Database Schema As it was mentioned earlier that text is stored in a native way.",
                "Each character of a text document is stored as a single object in the database [3].",
                "When storing text in such a native form, the performance of the employed database system is of crucial importance.",
                "The concept and performance issues of such a text database are described in [3], collaborative layouting in [2], dynamic collaborative business processes within documents in [5], the text editing creation time meta data model in [6] and the relation to XML databases in [7].",
                "Figure 2 depicts the core database schema.",
                "By connecting a client to the database, a Session instance is created.",
                "One important attribute of the Session is the DocumentSession.",
                "This attribute refers to DocumentSession instances, which administrates all opened documents.",
                "For each opened document, a DocumentSession instance is created.",
                "The DocumentSession is important for the realtime server component, which, in case of a 42 is beforeis after Char (ID) has TextElement (ID) starts with is used by InternalFile (ID) is in includes created at has inserted by inserted is active ir ir CharacterValue (Unicode) has List (ID) starts starts with ends ends with FileSize has User (ID) last read by last written by created at created by Style DTD (ID) is used by uses uses is used by Authors arehas Description Password Picture UserColors UserListSecurity has has has has has has FileNode (ID) references/isreferencedby is dynamic DynStructure NodeDetails has has is NodeType is parent of has parent has Role (ID) created at created created by Name has Description is user Name has has main role FileNodeAccessMatrix (ID) has is AccessMatrix read option grand option write option contains has access Times opened … times with … by contains/ispartof ir ir is...andincludes Lineage (ID) references is after is before CopyPaste (ID) references is in is copy of is a copy from hasCopyPaste (ID) is activeLength has Str (Stream) has inserted by / inserted RegularChar StartChar EndChar File ExternalFile is from URL Type (extension) is of Title has DocumentSession (ID) is opened by has opened has opened Session (ID) isconnectedwith launched by VersionNumber uses has read option grand option write option ends with is used by is in has is unique DTD (Stream) has has Name Column (ID) has set on On/off isvisible…for false LanguageProfile (ID) has contains Name Profile Marking (ID) has parent internal is copy from hasRank is onPosition starts with ends with is logical style is itemized is italic is enumerated is underline is is part of Alignment Size has Font has hasColor is bold has uses ElementName StylesheetName isused by Process (ID) is running by OS is web session MainRoles Roles has has Timestamp (Date, Time) created at Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time)created at Type has Port IP has has MessagePropagator (ID) Picture (Stream) Name Picture (ID) has contains LayoutBlock WorkflowBlockLogicalBlock contains BlockDataType has property BlockData is of WorkflowInstance (ID) isin TaskInstance (ID) has parent Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) last modified at completed at started at created at is on has Name created by has attached Comment Typeis of Timestamp (Date, Time) Timestamp (Date, Time) Timestamp (Date, Time) created at started at << last modified at is Category Editors has Status has Timestamp (Date, Time) << status last modified Timestamp (Date, Time) is due at DueType has Timezone has Notes has SecurityLevel hasset Timestamp (Date, Time) << is completed at isfollowedby Task (Code) Description has Indent references hasbeenopenedat...by Timestamp RedoHistory is before is after references hasCharCounter is inhas has Offset ActionID (Code) Timestamp (Date, Time) invoked at invoked by Version (ID) isbuild from has created byarchived has Comment Timestamp (Date, Time) <<createdat UndoHistory (ID) starts ends has Name created by Name has is before is after << references CharCounter has is in created at Timestamp is active created by is used by Offset has created at Timestamp Index (ID) lastmodifiedby Lexicon (ID) isof Frequency is occurring is stop word Term is is in ends with starts with << original starts with WordNumber SentenceNumber ParagraphNumber Citatons has is in is is in istemporary is in has Structure has ElementPath createdat Timestamp << describes SpiderBuild (ID) is updated is deleted Timestamp (Date, Time) <<lastupdatedat has validated structure <<neededtoindex Time (ms) IndexUpdate nextupdatein hasindexed isrunningbyOS lastupdate enabled Timestamp Time (s) Documents StopCharacter Description Character Value (ASCII) is sentence stop is paragraph stop Name has is is OptionsSettings show information show warningsshow exceptions do lineage recording do internal lineage recording ask for unknown source show intra document lineage information are set for X X X VirtualBorder (ID) isonhas {1, 2} {1, 2} ir ir UserMode (Code) UserMode (Code) Figure 2.",
                "TeNDaX Database Schema (Object Role Modeling Diagram) change on a document done by a client, is responsible for sending update information to all the clients working on the same document.",
                "The DocumentId in the class DocumentSession points to a FileNode instance, and corresponds to the ID of the opened document.",
                "Instances of the class FileNode either represent a folder node or a document node.",
                "The folder node corresponds to a folder of a file system and the document node to that of a file.",
                "Instances of the class Char represent the characters of a document.",
                "The value of a character is stored in the attribute CharacterValue.",
                "The sequence is defined by the attributes After and Before of the class Char.",
                "Particular instances of Char mark the beginning and the end of a document.",
                "The methods InsertChars and RemoveChars are used to add and delete characters. 2.1.2 Editor As seen above, each document is natively stored in the database.",
                "Our editor does not have a replica of one part of the native text database in the sense of database replicas.",
                "Instead, it has a so-called image as its replica.",
                "Even if several authors edit the same text at the same time, they work on one unique document at all times.",
                "The system guarantees this unique view.",
                "Editing a document involves a number of steps: first, getting the required information out of the image, secondly, invoking the corresponding methods within the database, thirdly, changing the image, and fourthly, informing all other clients about the changes. 2.1.3 Real-Time Server Component The real-time server component is responsible for the real-time propagation of any changes on a document done within an editor to all the editors who are working or have opened the same document.",
                "When an editor connects to the application server, which in turn connects to the database, the database also establishes a connection to the real-time server component (if there isnt already a connection).",
                "The database system informs the real-time server component about each new editor session (session), which the realtime server component administrates in his SessionManager.",
                "Then, the editor as well connects to the real-time server component.",
                "The real-time server component adds the editor socket to the clients data structure in the SessionManager and is then ready to communicate.",
                "Each time a change on a document from an editor is persistently stored in the database, the database sends a message to the real-time server component, which in turns, sends the changes to all the 43 editors working on the same document.",
                "Therefore, a special communication protocol is used: the update protocol.",
                "Update Protocol The real-time server component uses the update protocol to communicate with the database and the editors.",
                "Messages are sent from the database to the real-time server component, which sends the messages to the affected editors.",
                "The update protocol consists of different message types.",
                "Messages consist of two packages: package one contains information for the real-time server component whereas package two is passed to the editors and contains the update information, as depicted in Figure 3. || RTSC || Parameter | … | Parameter|| || Editor Data || Protocol between database system and real-time server component Protocol between real -time server component and editors Figure 3.",
                "Update Protocol In the following, two message types are presented: ||u|sessionId,...,sessionId||||editor data|| u: update message, sessionId: Id of the client session With this message type the real-time server component sends the editor data package to all editors specified in the sessionId list. ||ud|fileId||||editor data|| ud: update document message, fileId: Id of the file With this message type, the real-time server component sends the editor data to all editors who have opened the document with the indicated file-Id.",
                "Class Model Figure 4 depicts the class model as well as the environment of the real-time server component.",
                "The environment consists mainly of the editor and the database, but any other client application that could make use of the real-time server component can connect.",
                "ConnectionListener: This class is responsible for the connection to the clients, i.e. to the database and the editors.",
                "Depending on the connection type (database or editor) the connection is passed to an EditorWorker instance or DatabaseMessageWorker instance respectively.",
                "EditorWorker: This class manages the connections of type editor.",
                "The connection (a socket and its input and output stream) is stored in the SessionManager.",
                "SessionManager: This class is similar to an in-memory database: all editor session information, e.g. the editor sockets, which editor has opened which document etc. are stored within this data structure.",
                "DatabaseMessageWorker: This class is responsible for the connections of type database.",
                "At run-time, only one connection exists for each database.",
                "Update messages from the database are sent to the DatabaseMessageWorker and, with the help of additional information from the SessionManager, sent to the corresponding clients.",
                "ServiceClass: This class offers a set of methods for reading, writing and logging messages. tdb.mp.editor tdb.mp.database tdb.mp.mgmt EditorWorker DatabaseMessageWorker SessionManager MessageHandler ConnectionListener ServiceClass MessageQueue tdb.mp.listener tdb.mp.service junit.tests 1 * 1 * 1 * 1 * 1* 1 * Editors Datenbanksystem 1 2 1 * 1 * 1 * TCP/IP Figure 4.",
                "Real-Time Server Component Class Diagram 2.1.4 Dynamic Folders As mentioned above, every editing action invoked by a user is immediately transferred to the database.",
                "At the same time, more information about the current transaction is gathered.",
                "As all information is stored in the database, one character can hold a multitude of information, which can later be used for the retrieval of documents.",
                "Meta data is collected at character level, from document structure (layout, workflow, template, semantics, security, workflow and notes), on the level of a document section and on the level of the whole document [6].",
                "All of the above-mentioned meta data is crucial information for creating content and knowledge out of word processing documents.",
                "This meta data can be used to create an alternative storage system for documents.",
                "In any case, it is not an easy task to change users familiarity to the well known hierarchical file system.",
                "This is also the main reason why we do not completely disregard the classical file system, but rather enhance it.",
                "Folders which correspond to the classical hierarchical file system will be called static folders.",
                "Folders where the documents are organized according to meta data, will be called dynamic folders.",
                "As all information is stored in the database, the file system, too, is based on the database.",
                "The dynamic folders build up sub-trees, which are guided by the meta data selected by the user.",
                "Thus, the first step in using a dynamic folder is the definition of how it should be built.",
                "For each level of a dynamic folder, exactly one meta data item is used to.",
                "The following example illustrates the steps which have to be taken in order to define a dynamic folder, and the meta data which should be used.",
                "As a first step, the meta data which will be used for the dynamic folder must be chosen (see Table 1): The sequence of the meta data influences the structure of the folder.",
                "Furthermore, for each meta data used, restrictions and granularity must be defined by the user; if no restrictions are defined, all accessible documents are listed.",
                "The granularity therefore influences the number of sub-folders which will be created for the partitioning of the documents. 44 As the user enters the tree structure of the dynamic folder, he can navigate through the branches to arrive at the document(s) he is looking for.",
                "The directory names indicate which meta data determines the content of the sub-folder in question.",
                "At each level, the documents, which have so far been found to match the meta data, can be inspected.",
                "Table 1.",
                "Defining dynamic folders (example) Level Meta data Restrictions Granularity 1 Creator Only show documents which have been created by the users Leone or Hodel or Gall One folder per creator 2 Current location Only show documents which where read at my current location One folder per task status 3 Authors Only show documents where at least 40% was written by user Leone Each 20% one folder ad-hoc changes of granularity and restrictions are possible in order to maximize search comfort for the user.",
                "It is possible to predefine dynamic folders for frequent use, e.g. a location-based folder, as well as to create and modify dynamic folders on an ad-hoc basis.",
                "Furthermore, the content of such dynamic folders can change from one second to another, depending on the changes made by other users at that moment. 3.",
                "VALIDATION The proposed architecture is validated on the example of a character insertion.",
                "Insert operations are the mostly used operations in a (collaborative) editing system.",
                "The character insertion is based on the TeNDaX Insert Algorithm which is formally described in the following.",
                "The algorithm is simplified for this purpose. 3.1 Insert Characters Algorithm The symbol c stands for the object character, p stands for the previous character, n stands for the next character of a character object c and the symbol l stands for a list of character objects. c = character p=previous character n = next character l = list of characters The symbol c1 stands for the first character in the list l, ci stands for a character in the list l at the position i, whereas i is a value between 1 and the length of the list l, and cn stands for the last character in the list l. c1 = first character in list l ci = character at position i in list l cn = last character in list l The symbol β stands for the special character that marks the beginning of a document and ε stands for the special character that marks the end of a document. β=beginning of document ε=end of document The function startTA starts a transaction. startTA = start transaction The function commitTA commits a transaction that was started. commitTA = commit transaction The function checkWriteAccess checks if the write access for a document session s is granted. checkWriteAccess(s) = check if write access for document session s is granted The function lock acquires an exclusive lock for a character c and returns 1 for a success and 0 for no success. lock(c) = acquire the lock for character c success : return 1, no success : return 0 The function releaseLocks releases all locks that a transaction has acquired so far. releaseLocks = release all locks The function getPrevious returns the previous character and getNext returns the next character of a character c. getPrevious(c) = return previous character of character c getNext(c) = return next character of character c The function linkBefore links a preceding character p with a succeeding character x and the function linkAfter links a succeeding character n with a preceding character y. linkBefore(p,x) = link character p to character x linkAfter(n,y) = link character n to character y The function updateString links a character p with the first character c1 of a character list l and a character n with the last character cn of a character list l updateString(l, p, n) = linkBefore(p cl)∧ linkAfter(n, cn ) The function insertChar inserts a character c in the table Char with the fields After set to a character p and Before set to a character n. insertChar(c, p, n) = linkAfter(c,p) ∧ linkBefore(c,n) ∧ linkBefore(p,c) ∧ linkAfter(n,c) The function checkPreceding determines the previous characters CharacterValue of a character c and if the previous characters status is active. checkPreceding(c) = return status and CharacterValue of the previous character The function checkSucceeding determines the next characters CharacterValue of a character c and if the next characters status is active. 45 checkSucceeding(c) = return status and CharacterValue of the next character The function checkCharValue determines the CharacterValue of a character c. checkCharValue(c) = return CharacterValue of character c The function sendUpdate sends an update message (UpdateMessage) from the database to the real-time server component. sendUpdate(UpdateMessage) The function Read is used in the real-time server component to read the UpdateMessage.",
                "Read(UpdateInformationMessage) The function AllocatEditors checks on the base of the UpdateMessage and the SessionManager, which editors have to be informed.",
                "AllocateEditors(UpdateInformationMessage, SessionManager) = returns the affected editors The function SendMessage(EditorData) sends the editor part of the UpdateMessage to the editors SendMessage(EditorData) In TeNDaX, the Insert Algorithm is implemented in the class method InsertChars of the class Char which is depicted in Figure 2.",
                "The relevant parameters for the definitions beneath, are introduced in the following list: - nextCharacterOID: OID of the character situated next to the string to be inserted - previousCharacterOID: OID of the character situated previously to the string to be inserted - characterOIDs (List): List of character which have to be inserted Thus, the insertion of characters can be defined stepwise as follows: Start a transaction. startTA Select the character that is situated before the character that follows the string to be inserted. getPrevious(nextCharacterOID) = PrevChar(prevCharOID) ⇐ Π After ϑOID = nextCharacterOID(Char)) Acquire the lock for the character that is situated in the document before the character that follows the string which shall be inserted. lock(prevCharId) At this time the list characterOIDs contains the characters c1 to cn that shall be inserted. characterOIDs={ c1, …, cn } Each character of the string is inserted at the appropriate position by linking the preceding and the succeeding character to it.",
                "For each character ci of characterOIDs: insertChar(ci, p, n) Whereas ci ∈ { c1,…, cn } Check if the preceding and succeeding characters are active or if it is the beginning or the end of the document. checkPreceding(prevCharOID) = IsOK(IsActive, CharacterValue) ⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) checkSucceeding(nextCharacterOID) = IsOK(IsActive, CharacterValue)⇐ Π IsActive, CharacterValue (ϑ OID = nextCharacterOID(Char)) Update characters before and after the string to be inserted. updateString(characterOIDs, prevCharOID, nextCharacterOID) Release all locks and commit Transaction. releaseLocks commitTA Send update information to the real-time server component sendUpdate(UpdatenMessage) Read update message and inform affected editors of the change Read(UpdateMessage) Allocate Editors(UpdateMessage, SessionManager) SendMessage(EditorData) 3.2 Insert Characters Example Figure 1 gives a snapshot the system, i.e. of its architecture: four databases are distributed over a peer-to-peer network.",
                "Each database is connected to an application server (AS) and each application server is connected to a real-time server component (RTSC).",
                "Editors are connected to one or more real-time server components and to the corresponding databases.",
                "Considering that editor A (connected to database 1 and 4) and editor B (connected to database 1 and 2) are working on the same document stored in database 1.",
                "Editor B now inserts a character into this document.",
                "The insert operation is passed to application server 1, which in turns, passes it to the database 1, where an insert operation is invoked; the characters are inserted according to the algorithm discussed in the previous section.",
                "After the insertion, database 1 sends an update message (according to the update protocol discussed before) to real-time server component 1 (via AS 1).",
                "RTCS 1 combines the received update information with the information in his SessionManager and sends the editor data to the affected editors, in this case to editor A and B, where the changes are immediately shown.",
                "Occurring collaboration conflicts are solved and described in [3]. 4.",
                "SUMMARY With the approach presented in this paper and the implemented prototype, we offer real-time collaborative editing and management of documents stored in a special way in a database.",
                "With this approach we provide security, consistency and availability of documents and consequently offer pervasive document editing and management.",
                "Pervasive document editing and management is enabled due to the proposed architecture with the embedded real46 time server component, which propagates changes to a document immediately and consequently offers up-to-date documents.",
                "Document editing and managing is consequently enabled anywhere, anytime and with any device.",
                "The above-descried system is implemented in a running prototype.",
                "The system will be tested soon in line with a student workshop next autumn.",
                "REFERENCES [1] Abiteboul, S., Agrawal, R., et al. : The Lowell Database Research Self Assessment.",
                "Massachusetts, USA, 2003. [2] Hodel, T. B., Businger, D., and Dittrich, K. R.: Supporting Collaborative Layouting in Word Processing.",
                "IEEE International Conference on Cooperative Information Systems (CoopIS), Larnaca, Cyprus, IEEE, 2004. [3] Hodel, T. B. and Dittrich, K. R.: Concept and prototype of a collaborative business process environment for document processing.",
                "Data & Knowledge Engineering 52, Special Issue: Collaborative Business Process Technologies(1): 61120, 2005. [4] Hodel, T. B., Dubacher, M., and Dittrich, K. R.: Using Database Management Systems for Collaborative Text Editing.",
                "ACM European Conference of Computersupported Cooperative Work (ECSCW CEW 2003), Helsinki, Finland, 2003. [5] Hodel, T. B., Gall, H., and Dittrich, K. R.: Dynamic Collaborative Business Processes within Documents.",
                "ACM Special Interest Group on Design of Communication (SIGDOC) , Memphis, USA, 2004. [6] Hodel, T. B., R. Hacmac, and Dittrich, K. R.: Using Text Editing Creation Time Meta Data for Document Management.",
                "Conference on Advanced Information Systems Engineering (CAiSE05), Porto, Portugal, Springer Lecture Notes, 2005. [7] Hodel, T. B., Specker, F. and Dittrich, K. R.: Embedded SOAP Server on the Operating System Level for ad-hoc Automatic Real-Time Bidirectional Communication.",
                "Information Resources Management Association (IRMA), San Diego, USA, 2005. [8] OKelly, P.: Revolution in Real-Time Communication and Collaboration: For Real This Time.",
                "Application Strategies: In-Depth Research Report.",
                "Burton Group, 2005. 47"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Concepto y arquitectura de un sistema de edición y gestión de documentos generalizados Stefania Leone Thomas B. Hodel Harald Gall Universidad de Zúrich, Universidad de Suiza de Zúrich, Universidad de Suiza de Zúrich, Departamento de Informática de Suiza de Departamento de Informática de Informática, LEONE@IFI.UNIZH.CH.CHhodel@ifi.unizh.ch Gall@ifi.unizh.ch Resumen El procesamiento de \"documento colaborativo\" ha sido abordado por muchos enfoques hasta ahora, la mayoría de los cuales se centran en la versión de documentos y la edición colaborativa.",
                "Los documentos se almacenan principalmente en una estructura de carpeta jerárquica en los servidores de archivos y es difícil organizarlos con respecto a la clasificación, versiones, etc., aunque es de suma importancia que los usuarios puedan encontrar, recuperar y editar versiones actualizadas de documentossiempre que quieran y, de manera fácil de usar.1.1 Descripción del problema Con la mayoría de los documentos de aplicaciones de procesamiento de palabras comúnmente utilizados pueden ser manipulados por un solo usuario a la vez: las herramientas para la edición y la gestión generalizada de \"documentos colaborativos\", rara vez se implementan en el mundo de hoy.",
                "A pesar del hecho de que las personas se esfuerzan por la independencia de ubicación y tiempo, la importancia del trabajo colaborativo generalizado, es decir, la edición y gestión de \"documento colaborativo\" está totalmente descuidada."
            ],
            "translated_text": "",
            "candidates": [
                "documento colaborativo",
                "documento colaborativo",
                "documento colaborativo",
                "documentos colaborativos",
                "documento colaborativo",
                "documento colaborativo"
            ],
            "error": []
        }
    }
}