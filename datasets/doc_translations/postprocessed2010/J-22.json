{
    "id": "J-22",
    "original_text": "Betting on Permutations Yiling Chen Yahoo! Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo! Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race. We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers. Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! . We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case. Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2. For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible. Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B. We prove that the auctioneer problem becomes NP-hard for pair betting. We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time. We also show that a natural greedy algorithm gives a poor approximation for indivisible orders. Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1. INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value. For example, buying a stock is a bet that the stocks value is greater than its current price. Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment. The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs. In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15]. Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election. The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win. In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event. Almost all existing financial and betting exchanges pair up bilateral trading partners. For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite. However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible. For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist. We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements. In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates. For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally. Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc. The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match. As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively. Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote. There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem. We want to offer traders the most expressive bidding language possible while maintaining computational feasibility. We explore two bidding languages that seem natural from a trader perspective. Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10. Symetrically, traders can also bet on which candidates will fall in a particular position. In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets. The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders. Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem. We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2. BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates. The final outcome or state s ∈ S is an ordinal ranking of the n candidates. For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times. The state space S contains all n! mutually exclusive and exhaustive permutations of candidates. In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively. In practice at the racetrack, each of these different types of bets are processed in separate pools or groups. In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix. This separation can hurt liquidity and information aggregation. For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show. Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically. Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer. In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders. We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem. We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true. Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.) A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order. The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles. In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities). This is the so-called complete Arrow-Debreu securities market [1] for our setting. In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings. Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows. A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks. The corresponding matching problem is polynomial, however the language is not very expressive. A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market. The price space of the market reveals the collective estimates of win probabilities but nothing else. Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility. Our work is in direct analogy to work by Fortnow et. al. [6]. Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics. The authors consider a state space of the 2n possible outcomes of n binary variables. Traders express bets in Boolean logic. The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete. Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes. The market starts with a joint probability distribution across all outcomes. It works like a sequential version of a scoring rule. Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule. The market maker pays the last trader. Hence, he bears risk and may incur loss. Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded. However, the computational aspects on how to operate the mechanism have not been fully explored. Our mechanisms have an auctioneer who does not bear any risk and only matches orders. Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue. Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods. Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare. Our mechanisms allow traders to construct bets for an event with n! outcomes. Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3. PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market. We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates. The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome. A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem. For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows. Consider an index set of bets or orders O which traders submit to the auctioneer. Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi. Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized. Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context. The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order. Let xi be the fraction of order i ∈ O accepted. In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1]. Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise. There are two possible problems that the auctioneer may want to solve. The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome. We call this problem the existence of a match or sometimes simply, the matching problem. The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc. Definition 1 (Existence of match, indivisible orders). Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders. Definition 2 (Existence of match, divisible orders). Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem. It only returns whether trade can occur at no risk to the auctioneer. In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept. Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer. The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit. Definition 3 (Optimal match, indivisible orders). Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definition 4 (Optimal match, divisible orders). Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. The variable c is the worst-case profit for the auctioneer. Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed. The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets. Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position. A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise. For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth. Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j. For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second. The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O. Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions. With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time. In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems. When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed. The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state. The following example illustrates the matching problem for indivisible orders in the subset-betting market. Example 1. Suppose n = 3. Objects α, β, and γ compete for positions 1, 2, and 3 in a competition. The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7. There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα. The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states. For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates. A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise. There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates. Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1. Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders. The same definitions for existence of a match and optimal match from Section 3.1 apply. The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe. With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit. Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one. However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall. The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4. COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints. Brute-force methods would take exponential time to solve. However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time. Theorem 1. The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof. Consider the linear programming problem (4) for finding an optimal match. This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints. However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8]. The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint. For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3]. The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions. For every order of the form α|Φ there are edges from candidate node α to every position node in Φ. For orders of the form Ψ|j there are edges from each candidate in Ψ to position j. For each order i we put weight qixi on each of these edges. All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge. Every state s then corresponds to a perfect matching in the bipartite graph. In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate. Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13]. Hence, the separation problem can be solved in polynomial time. Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching. Thus, the matching problem can be solved in polynomial time also. 5. COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer. In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders. We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match. The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities. In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match. Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution. In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1. A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on. An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be. All edges have equal weight of 1. We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number. Where not stated, < 1/(2|E|) for a graph H(V, E). In other cases, the value is determined in context. A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG). Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight. Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10]. We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3. Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem. The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG. Our hardness proof is based on the following lemmas. Lemma 2. Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1. Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof. If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge. For any state s, all winning edges necessarily form a DAG. Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers). Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges. Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners. This gives the maximum number of winning edges wmax. All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges. The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H). The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax. Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|. Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6). We have the following lemma. Lemma 3. If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G). Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof. G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G). Suppose k(G∗ ) < k(G). Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|. Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ . Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized. Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G). The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set. Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard. Theorem 4. Computing the maximum worst-case profit in indivisible pair betting is NP-hard. Proof. By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges. Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G). Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard. Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard. However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard. It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit. Next, we prove that the indivisible optimal matching problem is actually NP-hard. We will use the following short fact repeatedly. Lemma 5 (Edge removal lemma). Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1. Proof. Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe. Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe. Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F . Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1. Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1. Theorem 6. Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof. We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle. Consider an instance graph G of the minimum feedback arc set problem. We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem. Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges. By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G . The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations. In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ). At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma. Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1. Hence the number of iterations is equal to k(G). Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3. Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders. Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution. Example 2. We show that the linear program (7) sometimes has a non-integer optimal solution. A B C D E F b b b b b b b b b Figure 2: An order graph. Letters on edges represent order prices. Consider the graph in Figure 2. There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD. Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78. With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3). On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3). Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems. Lemma 7. Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof. For any state s, the winning edges form a DAG. Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized. The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H). Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7). We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G). Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ . When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ). When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ). Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G). Hence, we have the above relation. Lemma 9. There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G). Proof. From lemma 8, l(G∗ ) ≤ k(G). We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe. When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|. Suppose l(G∗ ) < k(G). If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G). If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ). Because xes are less than 1, l(G∗ ) > k(G) is impossible. Thus, l(G∗ ) = k(G). Theorem 10. Finding the optimal worst-case profit in divisible pair betting is NP-hard. Proof. Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard. Hence, finding the optimal worst-case profit is NP-hard. Theorem 10 states that solving the linear program (7) is NP-hard. Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit. Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly. However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well. First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9. Lemma 11. Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1. Then, k(H − {e}) = k(H). Proof. Assume the contrary, namely k(H−{e}) < k(H). Then by Lemma 5, k(H − {e}) = k(H) − 1. Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1. The contradiction arises. Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph. We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows. Theorem 12. Finding the optimal match in divisible pair betting is NP-hard. Proof. We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H). The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted. In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G). It remains to verify that each iteration reduces k(G) by exactly 1. Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph. We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight. By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged. Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight. By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure. Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease. Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders. Lemma 13. A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof. The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full. Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates. Hence, whichever state is realized, not all of the edges in the cycle can be winning edges. The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders. Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle. It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time. Lemma 14. It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof. Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be). Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem. For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v). The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized. Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time. If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match. Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit. Figure 1 exhibits such a situation. If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist. However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle. The labels in the faces give the number of edges in the corresponding cycle. Lemma 15. The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles. Proof. Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges. Suppose all edge weights are (1 − ). The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1. Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2. In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best. Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19]. Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11]. When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6. CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates. While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting. In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering. Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate. We examine the auctioneer problem of matching orders without incurring risk. We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible. The complexity changes dramatically for pair betting. We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem. We identify a sufficient condition for the existence of a match, which can be verified in polynomial time. A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting. Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets. We are interested in further exploring better approximation algorithms for pair betting markets. 7. ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo! Research for valuable insights and discussions. 8. REFERENCES [1] K. J. Arrow. The role of securities in the optimal allocation of risk-bearing. Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz. Results from a dozen years of election futures markets research. In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein. Introduction to Algorithms (Second Edition). MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg. Combinatorial Auctions. MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross. Wishes, expectations, and actions: A survey on price formation in election stock markets. Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman. Betting boolean-style: A framework for trading in securities based on logical formulas. Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver. The ellipsoid method and its consequences in combinatorial optimization. Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver. Geometric Algorithms and Combinatorial Optimization. Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson. Combinatorial information market design. Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp. Reducibility among combinatorial problems. In Complexity of computer computations (Proc. Sympos., IBM Thomas J. Watson Res. Center, Yorktown Heights, N.Y.), pages 85-103. Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster. Approximation algorithms for cycle packing problems. Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn. The hungarian method for the assignment problem. Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres. Algorithms for the assignment and transportation problems. Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan. Bidding and allocation in combinatorial auctions. In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen. The real power of artificial markets. Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder. Efficiency of experimental security markets with insider information: An application of rational expectations models. Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder. Rational expectations and the aggregation of diverse information in laboratory security markets. Econometrica, 56:1085-1118, 1988. [18] T. Sandholm. Algorithm for optimal winner determination in combinatorial auctions. Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov. Packing directed cycles efficiently. Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335",
    "original_translation": "Apuestas por permutaciones yiling Chen Yahoo! Investigación 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Departamento de Ciencias de la Computación Universidad de Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratorio Massachusetts Instituto de Tecnología Cambridge, MA 02139 David M. Pennock Yahoo! Investigación 45 W. 18th St. 6th Floor New York, NY 10011 Resumen Consideramos un escenario de apuestas de permutación, donde la gente apuesta por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos. Examinamos el problema del subastador de que coincidan sin riesgos con apuestas o, de manera equivalente, de encontrar oportunidades de arbitraje entre las apuestas propuestas. Exigir a los postores que enumeren explícitamente los pedidos en los que les gustaría apostar no es natural e intratable, porque el número de pedidos es n!¡Y el número de subconjuntos de pedidos es 2n!. Proponemos dos idiomas de apuestas expresivos que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso. Las apuestas del subconjunto permiten a los comerciantes apostar que un candidato terminará clasificado entre algunos subconjuntos de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que se tomará una posición porAlgunos subconjuntos de candidatos, por ejemplo, el caballo A, B o D terminarán en la posición 2. Para las apuestas de subconjunto, mostramos que el problema del subastador se puede resolver en el tiempo polinomial si las órdenes son divisibles. Las apuestas de parejas permiten a los comerciantes apostar sobre si un candidato terminará clasificado más alto que otro candidato, por ejemplo, Horse A vencerá a Horse B. Probamos que el problema del subastador se convierte en NP-Hard para las apuestas de pares. Identificamos una condición suficiente para la existencia de una combinación de apuestas de par que se puede verificar en el tiempo polinomial. También mostramos que un algoritmo codicioso natural da una aproximación pobre para las órdenes indivisibles. Categorías y descriptores de asignaturas J.4 [Aplicaciones informáticas]: Ciencias sociales y conductuales-economía Términos generales Economía, Teoría 1. Introducción Comprar o vender una seguridad financiera vigente es una apuesta en el valor de seguridad. Por ejemplo, comprar una acción es una apuesta de que el valor de las acciones es mayor que su precio actual. Cada operador evalúa su ganancia esperada para decidir la cantidad de comprar o vender de acuerdo con su propia información y evaluación subjetiva de probabilidad. La interacción colectiva de todas las apuestas conduce a un equilibrio que refleja una agregación de la información y las creencias de todos los comerciantes. En la práctica, esta evaluación agregada del mercado del valor de seguridad a menudo es más precisa que otros pronósticos que dependen de expertos, encuestas o inferencia estadística [16, 17, 5, 2, 15]. Considere comprar una seguridad al precio de cincuenta y dos centavos, eso paga $ 1 si y solo si un demócrata gana las elecciones presidenciales de los Estados Unidos en 2008. La transacción es un compromiso de aceptar una pérdida de cincuenta y dos centavos si un demócrata no gana a cambio de una ganancia de cuarenta y ocho centavos si un demócrata gana. En este caso de una seguridad contingente de eventos, el valor de precio de los mercados de la seguridad corresponde directamente a la probabilidad estimada del evento. Casi todos los intercambios financieros y de apuestas existentes combinan socios comerciales bilaterales. Por ejemplo, un comerciante dispuesto a aceptar una pérdida de x dólar si un demócrata no gana a cambio de una ganancia de dólar y si un demócrata gana se corresponde con un segundo comerciante dispuesto a aceptar lo contrario. Sin embargo, en muchos escenarios, incluso si no existen acuerdos bilaterales entre los comerciantes, pueden ser posibles acuerdos multilaterales. Por ejemplo, si un comerciante apuesta a que el candidato demócrata recibirá más votos que el candidato republicano, un segundo comerciante apuesta a que el candidato republicano recibirá más votos que el candidato libertario, y un tercer comerciante apostará que el candidato libertario recibirá más votosque el candidato demócrata, entonces, dependiendo de las probabilidades que cada uno ofrece, puede haber un partido de tres vías agradable a pesar de que no existen partidos bidireccionales. Proponemos un intercambio en el que los comerciantes tienen una flexibilidad considerable para expresar de forma natural y sucintamente sus apuestas, 326 y examinar la complejidad computacional de los subastadores que resulta en el problema correspondiente de identificar acuerdos bilaterales y multilaterales. En particular, nos centramos en un entorno en el que los comerciantes apuestan sobre el resultado de una competencia entre N candidatos. Por ejemplo, supongamos que hay n candidatos en una elección (o n caballos en una raza, etc.) y, por lo tanto, n!Posibles pedidos de candidatos después de la cuenta de votación final. Los comerciantes pueden apostar por las propiedades arbitrarias del orden final, por ejemplo, el candidato D ganará, el candidato D terminará en primer lugar o en el último lugar, el candidato D derrotará al candidato R, los candidatos D y R derrotarán al candidato L, etc.. El objetivo del intercambio es buscar entre todas las ofertas para encontrar dos o más que juntos formen una coincidencia agradable. Como veremos, el problema de coincidencia se puede configurar como un programa lineal o entero, dependiendo de si las órdenes son divisibles o indivisibles, respectivamente. Intentando reducir el problema a un problema de correspondencia bilateral creando explícitamente n!Los valores, uno para cada posible pedido final, es engorroso para los comerciantes y computacionalmente inviables incluso para N de tamaño modesto.Además, la atención de los comerciantes se extendería entre n!Las opciones independientes, lo que hace que la probabilidad de que dos comerciantes converjan al mismo tiempo y lugar parezcan remotas. Existe una compensación entre la expresividad del lenguaje de licitación y la complejidad computacional del problema de correspondencia. Queremos ofrecer a los comerciantes el lenguaje de licitación más expresivo posible mientras mantenemos la viabilidad computacional. Exploramos dos idiomas de licitación que parecen naturales desde una perspectiva de comerciante. Las apuestas de subconjunto, descritas en la Sección 3.2, permite a los comerciantes apostar en qué posiciones en la clasificación, un candidato caerá, por ejemplo, el candidato D terminará en la posición 1, 3-5 o 10. Simétricamente, los comerciantes también pueden apostar en qué candidatos caerán en una posición particular. En la Sección 4, derivamos un algoritmo de tiempo polinomial para las apuestas de subconjunto (divisibles) (divisibles). La clave del resultado es mostrar que el programa lineal exponencialmente grande tiene un problema de separación correspondiente que se reduce a la coincidencia bipartita máxima ponderada y, en consecuencia, podemos resolverlo en el polinomio de tiempo en el número de órdenes. Las apuestas de pares, descritas en la Sección 3.3, permiten a los comerciantes apostar por la clasificación final de dos candidatos, por ejemplo, el candidato D derrotará al candidato R. En la Sección 5, mostramos que la coincidencia óptima de las apuestas de pares (divisibles o indivisibles) es np-Difícil, a través de una reducción del problema del arco mínimo de retroalimentación no ponderada. También proporcionamos una condición suficiente polinomialmenteverificable para la existencia de una combinación de empasas y mostramos que un algoritmo codicioso ofrece una aproximación deficiente para las apuestas de pares indivisibles.2. Antecedentes y trabajos relacionados consideramos apuestas de permutación o apuestas sobre el resultado de una competencia entre n candidatos. El resultado final o el estado s ∈ S es una clasificación ordinal de los n candidatos. Por ejemplo, los candidatos podrían ser caballos en una carrera y el resultado de la lista de caballos en orden creciente de sus tiempos de finalización. El espacio estatal s contiene todo n!Permutaciones mutuamente excluyentes y exhaustivas de candidatos. En una carrera de caballos típica, la gente apuesta por las propiedades del resultado como el caballo A ganará, el caballo A mostrará o terminará en primer o segundo lugar, o los caballos A y B terminarán en primer y segundo lugar, respectivamente. En la práctica en la pista de carreras, cada uno de estos diferentes tipos de apuestas se procesa en grupos o grupos separados. En otras palabras, todas las apuestas de victorias se procesan juntas, y todas las apuestas del espectáculo se procesan juntas, pero los dos tipos de apuestas no se mezclan. Esta separación puede dañar la liquidez y la agregación de información. Por ejemplo, a pesar de que Horse A es muy favorecido para ganar, eso puede no impulsar directamente las probabilidades de los caballos para mostrar. En cambio, describimos un intercambio central donde todas las apuestas sobre el resultado se procesan juntas, agregando así la liquidez y asegurando que la inferencia informativa ocurra automáticamente. Idealmente, a Wed le gusta permitir a los comerciantes apostar por cualquier propiedad del orden final que deseen, declarado exactamente el idioma que prefieren. En la práctica, permitir un lenguaje demasiado flexible crea una carga computacional para el subastador que intenta igualar a los comerciantes dispuestos. Exploramos la compensación entre la expresividad del lenguaje de licitación y la complejidad computacional del problema de correspondencia. Consideramos un marco en el que las personas proponen comprar valores que pagan $ 1 si y solo si alguna propiedad del pedido final es verdadera. Los comerciantes indican el precio que están dispuestos a pagar por acción y la cantidad de acciones que les gustaría comprar.(Los pedidos de venta no pueden ser necesarios explícitamente, ya que comprar la negación de un evento es equivalente a vender el evento). Una orden divisible permite al operador recibir menos acciones de lo solicitado, siempre que se cumpla la restricción de precios;Una orden indivisible es una orden de todo o nada. La descripción de las apuestas en términos de precios y acciones es sin pérdida de generalidad: también podemos permitir que las apuestas se describan en términos de probabilidades, vectores de pago o cualquiera de los diversos enfoques practicados en los círculos financieros y de juego. En principio, podemos hacer todo lo que queramos ofreciendo explícitamente n!valores, uno para cada estado s ∈ S (o de hecho cualquier conjunto de valores n! Este es el llamado mercado completo de valores de flecha-debreu [1] para nuestro entorno. En la práctica, los comerciantes no quieren lidiar con las especificaciones de bajo nivel de pedidos completos: las personas piensan más naturalmente en términos de propiedades de alto nivel de pedidos. Además, operando n!Securities es inviable en la práctica desde un punto de vista computacional a medida que N crece. Un lenguaje de licitación muy simple podría permitir a los comerciantes apostar solo sobre quién gana la competencia, como se hace en el grupo de victorias en las carreras de carreras. El problema correspondiente correspondiente es polinomio, sin embargo, el lenguaje no es muy expresivo. Un comerciante que cree que A derecha a B, pero que ninguno de los dos ganará directamente no puede impartir útilmente su información al mercado. El espacio de precios del mercado revela las estimaciones colectivas de las probabilidades de ganar pero nada más. Nuestro objetivo es encontrar idiomas que sean lo más expresivos e intuitivos posible y revelen la mayor cantidad de información posible, mientras mantienen la viabilidad computacional. Nuestro trabajo está en analogía directa al trabajo de Fortnow et.Alabama.[6]. Mientras que exploramos la combinatoria de permutación, Fortnow et.Alabama.Explore la combinatoria booleana. Los autores consideran un espacio de estado de los 2n posibles resultados de n variables binarias. Los comerciantes expresan apuestas en lógica booleana. Los autores muestran que la coincidencia divisible es CO-NP-COMPLETA y la coincidencia indivisible es σp 2 complete. Hanson [9] describe un mecanismo de regla de puntuación del mercado que puede permitir la apuesta en el número combinatorio de resultados. El mercado comienza con una distribución de probabilidad conjunta en todos los resultados. Funciona como una versión secuencial de una regla de puntuación. Cualquier operador puede cambiar la distribución de probabilidad siempre que acepte pagar al operador más reciente 327 de acuerdo con la regla de puntuación. El fabricante de mercado paga al último comerciante. Por lo tanto, él tiene riesgo y puede incurrir en pérdida. Los mecanismos de reglas de puntuación del mercado tienen una buena propiedad de que se limita la peor pérdida del fabricante de mercado. Sin embargo, los aspectos computacionales sobre cómo operar el mecanismo no se han explorado completamente. Nuestros mecanismos tienen un subastador que no tiene ningún riesgo y solo coincide con las órdenes. La investigación sobre los idiomas de licitación y la determinación del ganador en las subastas combinatorias [4, 14, 18] considera desafíos computacionales similares para encontrar una asignación de elementos a los licitadores que maximicen los ingresos de los subastadores. Las subastas combinatorias permiten a los licitadores colocar valores distintos en paquetes de bienes en lugar de solo en bienes individuales. La incertidumbre y el riesgo generalmente no se consideran y el problema del subastador central es maximizar el bienestar social. ¡Nuestros mecanismos permiten a los comerciantes construir apuestas para un evento con n!resultados. Se consideran la incertidumbre y el riesgo y el problema del subastador es explorar las oportunidades de arbitraje y las apuestas sin riesgo.3. Permutación de permutación En esta sección, definimos los problemas de correspondencia óptimos y de correspondencia que un subastador necesita resolver en un mercado general de apuestas de permutación. Luego ilustramos las definiciones de problemas en el contexto de los mercados de subconjuntos y empotrizas.3.1 Valores, pedidos y problemas de correspondencia consideran un evento con n candidatos competitivos donde el resultado (estado) es una clasificación de los n candidatos. El lenguaje de licitación de un mercado que ofrece valores en los resultados futuros determina el tipo y el número de valores disponibles y afecta directamente qué información puede agregarse sobre el resultado. Un lenguaje de licitación totalmente expresivo puede capturar cualquier información posible que los comerciantes puedan tener sobre la clasificación final;Un lenguaje menos expresivo limita el tipo de información que puede agregarse, aunque puede permitir una solución más eficiente al problema de correspondencia. Para cualquier lenguaje de licitación y el número de valores en un mercado de apuestas de permutación, podemos representar sucintamente el problema del subastador con las ofertas sin riesgos de la siguiente manera. Considere un conjunto de índice de apuestas u órdenes o que los operadores presentan al subastador. Cada orden i ∈ O es un triple (bi, qi, φi), donde bi denota cuánto el comerciante está dispuesto a pagar por una unidad de seguridad φi y Qi es la cantidad de acciones de la seguridad que quiere comprar a preciobi. Naturalmente, bi ∈ (0, 1) ya que una unidad de seguridad vale la pena como máximo $ 1 cuando el evento se realiza. Dado que el orden I se define para una sola seguridad φi, omitiremos la variable de seguridad siempre que esté claro desde el contexto. El subastador puede aceptar o rechazar cada orden, o en un mundo divisible aceptar una fracción de la orden. Deje que Xi sea la fracción del orden I ∈ O aceptado. En la versión indivisible del mercado xi = 0 o 1 mientras en la versión divisible xi ∈ [0, 1]. Además, II (s) sea la variable indicadora de si el orden I está ganando en el estado s, es decir, II (s) = 1 si el pedido se devuelve $ 1 en el estado S y II (S) = 0 de lo contrario. Hay dos posibles problemas que el subastador puede querer resolver. El más simple es encontrar un subconjunto de pedidos que puedan coincidir con el riesgo sin riesgos, es decir, un subconjunto de órdenes que aceptan juntos otorgan una ganancia no negativa al subastador en todos los resultados posibles. Llamamos a este problema la existencia de una coincidencia o, a veces, simplemente, el problema coincidente. El problema más complejo es que el subastador encuentre la coincidencia óptima con respecto a algún criterio, como ganancias, volumen de negociación, etc. Definición 1 (existencia de coincidencia, órdenes indivisibles). Dado un conjunto de órdenes o, ¿existe un conjunto de xi ∈ {0, 1}, i ∈ O, con al menos un xi = 1 tal que i (bi - ii (s)) qixi ≥ 0, ∀s ∈¿S?(1) Del mismo modo podemos definir la existencia de un partido con órdenes divisibles. Definición 2 (existencia de coincidencia, órdenes divisibles). Dado un conjunto de órdenes o, ¿existe un conjunto de xi ∈ [0, 1], i ∈ O, con al menos un xi> 0 tal que yo (bi - ii (s)) qixi ≥ 0, ∀s ∈¿S?(2) La existencia de una coincidencia es un problema de decisión. Solo devuelve si el comercio puede ocurrir sin riesgo para el subastador. Además del requisito libre de riesgos, el subastador puede optimizar algún criterio para determinar las órdenes de aceptar. Algunos objetivos razonables incluyen maximizar el volumen de negociación total en el mercado o la peor ganancia del subastador. Los siguientes problemas de correspondencia óptimos se definen para un subastador que maximiza su peor ganancias. Definición 3 (coincidencia óptima, órdenes indivisibles). Dado un conjunto de órdenes o, elija Xi ∈ {0, 1} de modo que el siguiente problema de programación de enteros mixtos alcance su optimización Max Xi, C C (3) S.T.i bi - ii (s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O. Definición 4 (coincidencia óptima, órdenes divisibles). Dado un conjunto de pedidos o, elija xi ∈ [0, 1] de modo que el siguiente problema de programación lineal logre su optimización Max Xi, C C (4) S.T.i bi - ii (s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O. La variable C es la peor ganancia para el subastador. Tenga en cuenta que, estrictamente hablando, los problemas de coincidencia óptimos no requieren resolver los problemas de optimización (3) y (4), porque solo se necesita el conjunto óptimo de pedidos. La ganancia óptima del peor de los casos puede permanecer desconocida.3.2 Subconjunto de apuestas Un mercado de apuestas de subconjunto permite dos tipos diferentes de apuestas. Los comerciantes pueden apostar por un subconjunto de puestos en los que un candidato puede terminar, o pueden apostar por un subconjunto de candidatos que ocuparán una posición particular. Una seguridad α | φ donde φ es un subconjunto de posiciones paga $ 1 si el candidato α se encuentra en una posición que es un elemento de φ y paga $ 0 de lo contrario. Por ejemplo, la seguridad α | {2, 4} paga $ 1 cuando el candidato α 328 ocupa el segundo o cuarto. Del mismo modo, una seguridad ψ | j donde ψ es un subconjunto de candidatos paga $ 1 si alguno de los candidatos en el set ψ rangos en la posición j. Por ejemplo, la seguridad {α, γ} | 2 paga $ 1 cuando el candidato α o el candidato γ ocupan el segundo lugar. El subastador en un mercado de apuestas de subconjunto enfrenta un problema de correspondencia no trivial, es decir, determinar qué órdenes aceptar entre todos los pedidos presentados I ∈ O. Tenga en cuenta que aunque solo hay n candidatos y n posibles puestos, el número de valores disponibles para apostar es exponencial ya que un comerciante puede apostar en cualquiera de los 2n subconjuntos de candidatos o posiciones. Con esto, no está claro de inmediato si uno puede encontrar un socio comercial o una coincidencia para que ocurra el comercio, o que el subastador pueda resolver el problema de correspondencia en el tiempo polinomial. En la siguiente sección, mostraremos que algo sorprendentemente existe una solución polinómica elegante tanto para los problemas de coincidencia de coincidencia como para los problemas combinados clásicos. Cuando se acepta un pedido, el comerciante correspondiente paga el precio de pedido presentado al subastador y el subastador paga los pedidos ganadores $ 1 por acción después de que se revela el resultado. El subastador tiene que elegir cuidadosamente qué órdenes y qué fracciones de ellos aceptar para que se les garantice una ganancia no negativa en cualquier estado futuro. El siguiente ejemplo ilustra el problema de correspondencia para órdenes indivisibles en el mercado de apuestas de subconjuntos. Ejemplo 1. Supongamos n = 3. Los objetos α, β y γ compiten por las posiciones 1, 2 y 3 en una competencia. El subastador recibe los siguientes 4 pedidos: (1) Compre 1 acción α | {1} al precio $ 0.6;(2) comprar 1 acción β | {1, 2} al precio $ 0.7;(3) comprar 1 acción γ | {1, 3} al precio $ 0.8;y (4) comprar 1 acción β | {3} al precio $ 0.7. Hay 6 posibles estados de ordenamiento: αβγ, αγβ, βαγ, βγα, γαβ y γβα. El beneficio dependiente del estado correspondiente del subastador para cada orden se puede calcular como los siguientes vectores, C1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) C2 = (−0.3, 0.7, −0.3, −0.3, 0.7, 0.7, 0.7, 0.7,, −0.3) C3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) C4 = (0.7, −0.3, 0.7, 0.7, −0.3, 0.7).6 columnas corresponden a los 6 estados futuros. Para las órdenes indivisibles, el subastador puede aceptar órdenes (2) y (4) y obtener el vector de ganancias C = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), o aceptar órdenes (2), (3) y ((4) y tiene ganancias en el estado C = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2).3.3 APUTADORES DE PARTIDOS Un par de apuestas de pareja permite a los comerciantes apostar sobre si un candidato se clasificará más alto que otro candidato, en un resultado que es una permutación de n candidatos. Una seguridad α> β paga $ 1 si el α candidato se clasifica más alto que el candidato β y $ 0 de lo contrario. Hay un total de valores n (n -1) diferentes ofrecidos en el mercado, cada uno correspondiente a un par de candidatos ordenados. Los comerciantes colocan pedidos de la forma compran acciones de Qi de α> β al precio por acción no más grande que BI.BI en general debe estar entre 0 y 1. Una vez más, la orden puede ser indivisible o divisible y el subastador necesita decidir qué fracción xi de cada orden aceptar para no incurrir en ninguna pérdida, con un b c d e f .99 .99 .5 .5 .5 .99 .99 .99.99 Figura 1: Cada ciclo tiene un beneficio negativo en el peor de los casos de −0.02 (para los ciclos de longitud 4) o menos (para los ciclos de longitud 6), sin embargo, aceptar todos los bordes en su totalidad proporciona una ganancia positiva en el peor de los casos de 0.44.xi ∈ {0, 1} para indivisible y xi ∈ [0, 1] para órdenes divisibles. Se aplican las mismas definiciones para la existencia de una coincidencia y una coincidencia óptima de la Sección 3.1. Los órdenes en el mercado de apuestas de pares tienen una interpretación natural como un gráfico, donde los candidatos son nodos en el gráfico y cada orden que clasifica un par de candidatos α> β está representado por un borde dirigido e = (α, β) conprecio ser y peso qe. Con esta interpretación, es tentador asumir que una condición necesaria para una coincidencia es tener un ciclo en el gráfico con una ganancia no negativa en el peor de los casos. Suponiendo Qe = 1 para todas las E, este es un ciclo C con un total de | C |bordes de tal manera que la ganancia del peor de los casos para el subastador sea e∈C be-(| c |-1) ≥ 0, ya que en el peor estado de casos el subastador necesita pagar $, 1 a cada orden del ciclo, excepto uno. Sin embargo, el ejemplo en la Figura 1 muestra que este no es el caso: podemos tener un conjunto de órdenes en los que cada ciclo tiene una ganancia negativa en el peor de los casos y, sin embargo, hay una coincidencia positiva en el peor de los peores en general. Las etiquetas de borde en la figura son los precios;Tanto la solución óptima divisible e indivisible en este caso aceptan todos los pedidos en su totalidad, xe = 1. 4. Complejidad de las apuestas de subconjunto Los problemas de correspondencia del subastador en cualquier mercado de permutación, incluido el mercado de apuestas de subconjunto, ¡tienen n!restricciones. Los métodos de fuerza bruta tomarían tiempo exponencial para resolver. Sin embargo, dada la forma especial de los valores en el mercado de apuestas de subconjunto, podemos demostrar que los problemas de correspondencia para los pedidos divisibles pueden resolverse en el tiempo polinomial. Teorema 1. La existencia de una coincidencia y los problemas óptimos de partidos con órdenes divisibles en un mercado de apuestas de subconjunto se pueden resolver en tiempo polinomial.329 Prueba. Considere el problema de programación lineal (4) para encontrar una coincidencia óptima. Este programa lineal tiene | o |+ 1 Variables, una variable Xi para cada pedido I y la variable de ganancias c.También tiene exponencialmente muchas limitaciones. Sin embargo, podemos resolver el programa en tiempo polinomio en el número de pedidos | O |Al usar el algoritmo elipsoide, siempre que podamos resolver eficientemente su problema de separación correspondiente en el tiempo polinomial [7, 8]. El problema de separación para un programa lineal toma como entrada un vector de valores variables y devuelve si el vector es factible, o de lo contrario devuelve una restricción violada. Para los valores dados de las variables, una restricción violada en la ecuación.(4) Pregunta si hay un estado o permutación en el que la ganancia es menor que C, y puede reescribirse como i II (S) qixi <i biqixi - c ∀s ∈ S. (5) Por lo tanto, es suficiente para mostrarCómo encontrar eficientemente un estado que satisface la desigualdad anterior (5) o verificar que la desigualdad opuesta se mantenga para todos los estados.Mostraremos que el problema de separación se puede reducir al problema de coincidencia bipartita máxima 1 [3]. El lado izquierdo en la ecuación.(5) es el dinero total que el subastador necesita pagar a los comerciantes ganadores en el estado s.El primer término en el lado derecho es el dinero total recaudado por el subastador y se fija para un vector de solución dado de XIS y C.Se puede construir un gráfico bipartito ponderado entre el conjunto de candidatos y el conjunto de posiciones. Para cada orden de la forma α | φ hay bordes desde el nodo candidato α hasta cada nodo de posición en φ. Para las órdenes de la forma ψ | j hay bordes de cada candidato en ψ a la posición j. Para cada pedido, ponemos peso Qixi en cada uno de estos bordes. Todos los bordes múltiples con los mismos puntos finales se reemplazan con un solo borde que conlleva el peso total del OCTS múltiple. Cada estado S corresponde a una coincidencia perfecta en el gráfico bipartito. Además, el subastador paga a los ganadores la suma de todos los pesos de borde en la coincidencia perfecta, ya que cada candidato solo puede estar en una posición y cada puesto es tomado por un candidato. Por lo tanto, el estado y el pago del peor fundido de los subastadores son la solución al problema de correspondencia bipartita máxima ponderado, que ha conocido algoritmos de tiempo polinomial [12, 13]. Por lo tanto, el problema de separación se puede resolver en el tiempo polinomial. Naturalmente, si la solución óptima a (4) ofrece una ganancia en el peor de los casos de C ∗> 0, existe una coincidencia. Por lo tanto, el problema de correspondencia también se puede resolver en el tiempo polinomial.5. La complejidad de las apuestas de pares en esta sección mostramos que un ligero cambio del lenguaje de licitación puede provocar un cambio dramático en la complejidad del problema de correspondencia óptimo del subastador. En particular, mostramos que encontrar la coincidencia óptima en el mercado de apuestas de pares es NP-Hard para órdenes divisibles e indivisibles. Luego identificamos una condición suficiente verificable polinomialmente para decidir la existencia de una coincidencia. Los resultados de la dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas de parejas tiene un lenguaje de licitación aparentemente más restrictivo que solo ofrece N (n - 1) 1 la noción de coincidencia perfecta en un gráfico bipartito, que solo usamos en esta prueba, no debe confundirse con la noción de apuestas coincidentes que usamos en todo el papel.valores. En contraste, el mercado de apuestas de subconjunto permite a los operadores apostar por un número exponencial de valores y, sin embargo, tuvo una solución de tiempo polinómico para encontrar la coincidencia óptima. Nuestra esperanza es que la comparación de las complejidades del subconjunto y los mercados de apuestas de pares ofrezcan información sobre lo que hace que un lenguaje de licitación sea expresivo y al mismo tiempo permitir una solución de correspondencia eficiente. En todo el análisis que sigue, suponemos que los comerciantes presentan órdenes unitarias en los mercados de apuestas de pares, es decir Qi = 1. Un conjunto de pedidos o recibidos por el subastador en un mercado de apuestas de pares con pedidos unitarios puede representarse mediante un gráfico dirigido, G (V, E), donde el conjunto de vértices V contiene candidatos que los comerciantes apuestan. Un borde e ∈ E, denotado (α, β, BE), representa una orden para comprar 1 parte de la seguridad α> β al precio BE. Todos los bordes tienen el mismo peso de 1. Adoptamos las siguientes anotaciones en todo el documento: • G (V, E): Gráfico dirigido original igualmente ponderado para el conjunto de pedidos unitarios O. • BE: Precio del pedido de borde e.• G ∗ (V ∗, E ∗);Una gráfica dirigida de pedidos aceptados para una coincidencia óptima, donde el peso de borde Xe es la cantidad de orden E aceptada por el subastador.xe = 1 para órdenes indivisibles y 0 <xe ≤ 1 para órdenes divisibles.• H (V, E): un gráfico dirigido genérico de pedidos aceptados.• K (H): la solución al problema de arco de arco de retroalimentación mínima no ponderada en el gráfico H. K (h) es el número mínimo de bordes para eliminar para que H se vuelva acíclico.• L (H): la solución al problema de arco de arco de retroalimentación mínima ponderada en el gráfico H. L (H) es el peso total mínimo para el conjunto de bordes que, cuando se eliminan, dejan h acíclico.• C (H): la peor ganancia del subastador si acepta todos los pedidos en el gráfico H. •: un número real positivo suficientemente pequeño. Donde no se indique, <1/(2 | e |) para un gráfico H (v, e). En otros casos, el valor se determina en el contexto. Un conjunto de arco de retroalimentación de un gráfico dirigido es un conjunto de bordes que, cuando se eliminan del gráfico, deja un gráfico acíclico dirigido (DAG). El problema del conjunto de arco de retroalimentación mínima no ponderada es encontrar un arco de retroalimentación con la cardinalidad mínima, mientras que el problema de arco de retroalimentación mínima ponderada busca encontrar un arco de retroalimentación con el peso mínimo total del borde. Se ha demostrado que los problemas del conjunto de arco de retroalimentación mínima no ponderada y ponderada son NP completas [10]. Utilizaremos este resultado en nuestro análisis de complejidad en los mercados de apuestas de pares.5.1 COMPARACIÓN INDIVISIBLES óptimas El problema de correspondencia óptimo de coincidencia óptima se introduce en la definición 3 de la Sección 3. Suponiendo las órdenes de la unidad y considerando el gráfico de pedidos G (v, E), reafiremos el problema de coincidencia óptimo de los subastadores en un mercado de apuestas de pares como eligiendo un subconjunto de bordes para aceptar de tal manera que 330 ganancias en el peor de los casos se maximice en el siguiente problema de optimización,Max Xe, C C (6) S.T.e be-es decir (s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin perder la generalidad, suponemos que no hay bordes múltiples en el gráfico de orden G. mostramosQue el problema de correspondencia óptimo para órdenes indivisibles es NP-HARD a través de una reducción del problema del conjunto de arco de retroalimentación mínima no ponderada. Este último toma como entrada un gráfico dirigido y pregunta cuál es el número mínimo de bordes para eliminar del gráfico para dejar un DAG. Nuestra prueba de dureza se basa en los siguientes lemas. Lema 2. Supongamos que el subastador acepta todos los bordes en un gráfico dirigido igualmente ponderado H (V, E) con precio de borde BE = (1 -) y peso de borde Xe = 1. Entonces, la ganancia del peor de los casos es igual a k (h)-| e |, donde k (h) es la solución al problema de arco de retroalimentación mínima no ponderada en H. prueba. Si el pedido de una ventaja obtiene una recompensa de $ 1 al final del mercado, llamamos a la ventaja una ventaja ganadora, de lo contrario se llama una ventaja perdedora. Para cualquier estado, todos los bordes ganadores necesariamente forman un DAG. Por el contrario, para cada DAG hay un estado en el que los bordes DAG son ganadores (aunque los bordes restantes en G no son necesariamente perdedores). Supongamos que en el estado s hay WS ganadores y ls = | e |- WS perdiendo bordes. Entonces, LS es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los bordes perdedores en el estado s.Los bordes que permanecen después de eliminar el conjunto de arco de retroalimentación mínima forman el DAG máximo para el gráfico H. Considere el estado SMAX en el que todos los bordes del DAG máximo son ganadores. Esto proporciona el número máximo de bordes ganadores WMAX. Todos los demás bordes son necesariamente perdedores en el estado SMAX, ya que cualquier borde que no esté en el máximo DAG debe formar un ciclo junto con algunos de los bordes DAG. El número de bordes perdedores en el estado SMAX es la cardinalidad del conjunto mínimo de arco de retroalimentación de H, es decir, | E |- wmax = k (h). El beneficio del subastador en un estado s es ganancias (s) = e∈E be - w = (1 -) | e |- W ≥ (1 -) | E |- Wmax, donde la igualdad se mantiene cuando s = smax. Por lo tanto, la ganancia del peor de los casos se logra en el estado smax, ganancias (smax) = (| e |-wmax)-| e |= k (h) - | e |. Considere el gráfico de los órdenes aceptados para una coincidencia óptima, G ∗ (V ∗, E ∗), que consiste en el subconjunto óptimo de los bordes E ∗ para ser aceptado por el subastador, es decir, es un bordes con Xe = 1 en la solución de la optimizaciónproblema (6). Tenemos el siguiente lema. Lema 3. Si los precios del borde son = (1−), entonces el gráfico de solución indivisible óptimo G ∗ tiene el mismo tamaño de arco de arco de retroalimentación mínima no ponderada que el gráfico de todos los órdenes G, es decir, k (g ∗) = k (g). Además, G ∗ es el subgrafo de G más pequeño de G, es decir, es el subgrafio de G con el menor número de bordes, que tiene el mismo tamaño del arco de retroalimentación mínima no ponderada como G. Prueba. G ∗ es un subgrafio de G, de ahí el número mínimo de bordes para romper los ciclos en G ∗ no es más que eso en G, a saber, K (G ∗) ≤ K (G). Supongamos que k (g ∗) <k (g). Dado que tanto K (G ∗) como K (g) son enteros, para cualquier <1 | E |Tenemos que k (g ∗) - | e ∗ |<k (g) - | e |. Por lo tanto, por Lemma 2, el subastador tiene una ganancia más alta en el peor de los casos al aceptar G que aceptar G ∗, lo que contradice la optimización de G ∗. Finalmente, la ganancia del peor de los casos k (g)-| e ∗ |se maximiza cuando | E ∗ |se minimiza. Por lo tanto, G ∗ es el subgrafo más pequeño de G tal que K (G ∗) = K (G). Los dos lemas anteriores demuestran que la ganancia máxima del peor de los peores en la coincidencia indivisible óptima está directamente relacionada con el tamaño del conjunto de arco de retroalimentación mínima. Por lo tanto, calcular cada uno da automáticamente al otro, por lo tanto, calcular la ganancia máxima del peor de los casos en el problema de apuestas de pares indivisibles es NP-Hard. Teorema 4. Calcular el máximo ganancias del peor de los casos en las apuestas de pares indivisibles es NP-HARD. Prueba. Por Lemma 3, la ganancia máxima del peor de los casos que es el óptimo para el problema de programación de enteros mixtos (6), es k (g)-| e ∗ |, donde | e ∗ |es el número de bordes aceptados. Ya que k (g) es entero y | e ∗ |≤ | E |<1, resolver (6) automáticamente nos dará la cardinalidad del conjunto de arco de retroalimentación mínima de G, K (G). Debido a que el problema del conjunto de arco de retroalimentación mínima es NP-Complete [10], calcular la ganancia máxima en el peor de los casos es NP-HARD. El teorema 4 establece que resolver el problema de optimización es difícil, porque incluso si el conjunto óptimo de pedidos se proporciona calculando la ganancia óptima del peor de los casos al aceptar esas órdenes es NP-HARD. Sin embargo, no implica si el problema de coincidencia óptimo, es decir, encontrar el conjunto óptimo de pedidos para aceptar, es NP-Hard. Es posible poder determinar qué bordes en un gráfico que participan en la coincidencia óptima, pero no puede calcular la ganancia del peor de los casos correspondiente. A continuación, demostramos que el problema de coincidencia óptima indivisible es en realidad NP-Hard. Usaremos el siguiente hecho breve repetidamente. Lema 5 (Lemma de extracción de borde). Dado un gráfico ponderado H (V, E), eliminar un solo borde E con peso XE de la gráfica disminuye la solución de arco de arco de retroalimentación mínima ponderada L (H) por no más de XE y reduce la solución del conjunto de arco de retroalimentación mínima no ponderada K ((H) por no más de 1. Prueba. Suponga que el arco de retroalimentación mínima ponderada para el gráfico H - {E} es F. Entonces F ∪ {E} es un conjunto de arco de retroalimentación para H, y tiene peso de borde total L (H− {E})+Xe. Debido a que L (h) es la solución al problema del arco del arco de retroalimentación mínima ponderada en h, tenemos l (h) ≤ l (h - {e})+xe, lo que implica que l (h - {e}) ≥ l (H) - xe. Del mismo modo, suponga que el arco de retroalimentación mínima no ponderada para el gráfico h - {e} es f. Entonces F ∪ {e} es un arco de retroalimentación para H, y ha establecido cardinalidad k (h− {e})+1. Debido a que k (h) es la solución al problema del arco del arco de retroalimentación mínima no ponderada en h, tenemos k (h) ≤ k (h - {e}) + 1, dando esa k (h - {e}) ≥ k (H) - 1. Teorema 6. Encontrar el partido óptimo en las apuestas de pares indivisibles es NP-Hard.331 Prueba. Nos reducimos del problema del arco del arco de retroalimentación mínima no ponderada, aunque con una transformación polinomial ligeramente más compleja que implica múltiples llamadas al oráculo óptimo de coincidencia. Considere un gráfico de instancia G del problema de conjunto de arco de retroalimentación mínima. Estamos interesados en calcular k (g), el tamaño del conjunto de arco de retroalimentación mínima de G. Supongamos que tenemos un oráculo que resuelve el problema de coincidencia óptimo. Denote por coincidencia óptima (g) la salida del oráculo óptimo de coincidencia en el gráfico G con precios BE = (1-) en todos sus bordes. Por Lemma 3, en la entrada G, el Oracle Optimal Match devuelve el subgrafo de G con el menor número de bordes, que tiene el mismo tamaño de arco de retroalimentación mínima establecida como G. El siguiente procedimiento encuentra k (g) utilizando polinomialmente muchas llamadas al oráculo óptimo de coincidencia en una secuencia de subgrafías de G. set g: = g iteraciones: = 0 while (g tiene un conjunto de borde no vacío) Restablecer G: = coincidencia óptima ((G) if (G tiene un ajuste de borde no vacío) iteraciones de incremento en 1 restablecimiento g eliminando cualquier borde E End si finaliza mientras return (iteraciones) Este procedimiento elimina los bordes del gráfico original G capa por capa hasta que el gráfico esté vacío, mientras que en elAl mismo tiempo, calculando el conjunto mínimo de arco del arco K (g) del gráfico original como el número de iteraciones. En cada iteración, comenzamos con un gráfico G y lo reemplazamos con el subgrafio G más pequeño que tiene la misma k (g). En esta etapa, eliminar un borde adicional e necesariamente da como resultado k (g - {e}) = k (g) −1, porque k (g - {e}) <k (g) por la optimización de g y k(G - {e}) ≥ k (g) - 1 por el lema Edgeremoval. Por lo tanto, en cada iteración, la cardinalidad del conjunto de arco de retroalimentación mínima se reduce exactamente en 1. Por lo tanto, el número de iteraciones es igual a k (g). Tenga en cuenta que este procedimiento proporciona una transformación polinómica del problema de coincidencia óptima al problema del conjunto de arco de retroalimentación mínima no ponderada, que llama al oráculo óptimo de coincidencia exactamente k (g) ≤ | e |tiempos, donde | E |es el número de bordes de G. de ahí el problema de coincidencia óptimo es NP-HARD.5.2 COMPARACIÓN DE DIVISIBLES óptimas Cuando los pedidos son divisibles, el problema de coincidencia óptima de los subastadores se describe en la definición 4 de la Sección 3. Suponiendo que las órdenes de la unidad y considerando el gráfico de la orden G (v, e), reafirmamos el problema de coincidencia óptima de los subastadores para las órdenes divisibles como la elección de la cantidad de órdenes para aceptar, xe ∈ [0, 1], de modo que la ganancia del peor de los casos se maximiza enEl siguiente problema de programación lineal, Max XE, C C (7) S.T.e be-es decir (s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. Todavía suponemos que no hay bordes multiedios en el gráfico de orden G. Cuando las órdenes son divisibles, elEl subastador puede estar mejor aceptando órdenes parciales. El ejemplo 2 muestra una situación en la que aceptar órdenes parciales genera mayores ganancias en el peor de los casos que la solución óptima indivisible. Ejemplo 2. Mostramos que el programa lineal (7) a veces tiene una solución óptima no entera. A B C D E F B B B B B B B B B B FIGURA 2: Un gráfico de pedido. Las cartas en los bordes representan los precios de los pedidos. Considere el gráfico en la Figura 2. Hay un total de cinco ciclos en el gráfico: tres ciclos de cuatro borde ABCD, ABEF, CDEF y dos ciclos de seis borde ABCDEF y ABEFCD. Suponga que cada borde tiene el precio B tal que 4B - 3> 0 y 6B - 5 <0, a saber, b ∈ (.75, .80), por ejemplo B = .78. Con esto, la solución indivisible óptima consiste en como máximo un ciclo de cuatro fuentes, con el peor beneficio de los casos (4B-3). Por otro lado, tomar 1 2 fracción de cada uno de los tres ciclos de cuatro fuentes produciría una mayor ganancia en el peor de los casos de 3 2 (4B-3). A pesar del aumento potencial de ganancias para aceptar órdenes divisibles, el problema de correspondencia óptimo de los subastadores sigue siendo NP-Hard para órdenes divisibles, que se presenta a continuación a través de varios lemas y teoremas. Lema 7. Supongamos que el subastador acepta órdenes descritos por un gráfico ponderado dirigido H (v, e) con peso de borde Xe como la cantidad aceptada para el pedido de borde e.La peor ganancia de los casos para el subastador es c (h) = e∈E (be-1) xe + l (h).(8) Prueba. Para cualquier estado de estado, los bordes ganadores forman un DAG. Por lo tanto, la ganancia del peor de los casos para el subastador logra en los estados cuando se minimiza la cantidad total de pedidos perdedores. La cantidad total mínima de pedidos perdedores es la solución al problema de establecimiento de arco de retroalimentación mínima ponderada en H, es decir, L (H). Considere el gráfico de los órdenes aceptados para una coincidencia divisible óptima, g ∗ (v ∗, e ∗), que consiste en el subconjunto óptimo de los bordes e ∗ para ser aceptado por el subastador, con peso de borde xe> 0 obteniendo la solución óptima deEl programa lineal (7). Tenemos los siguientes lemas.332 Lema 8. L (G ∗) ≤ K (G ∗) ≤ K (G). Prueba.L (G ∗) es la solución del problema del arco del arco de retroalimentación mínima ponderada en G ∗, mientras que K (G ∗) es la solución del problema del arco del arco de retroalimentación mínima no ponderada en G ∗. Cuando todos los pesos de borde en G ∗ son 1, L (G ∗) = K (G ∗). Cuando los XE son inferiores a 1, L (G ∗) puede ser menor o igual a K (G ∗). Dado que G ∗ es un subgrafio de G pero posiblemente con diferentes pesos de borde, K (G ∗) ≤ K (G). Por lo tanto, tenemos la relación anterior. Lema 9. Existe algo así que cuando todos los precios de borde son (1 -), l (g ∗) = k (g). Prueba. De Lemma 8, L (G ∗) ≤ K (G). Sabemos que la ganancia de los subastadores en el peor de los casos al aceptar G ∗ es c (g ∗) = e∈E ∗ (be-1) xe + l (g ∗) = l (g ∗)-e∈E ∗ xe. Cuando acepta el gráfico de orden original G en su totalidad, su peor beneficio es c (g) = e∈E (be - 1) + k (g) = k (g) - | e |. Supongamos l (g ∗) <k (g). Si | E |− E∈E ∗ xe = 0, significa que G ∗ es G. Por lo tanto, l (g ∗) = k (g) independientemente de, lo que contradice con la suposición l (g ∗) <k (g). Si | E |- e∈E ∗ xe> 0, entonces cuando <k (g) - l (g ∗) | e |- E∈E ∗ Xe, C (G) es estrictamente mayor que C (G ∗), que contradice con la optimización de C (G ∗). Porque los XE son menos de 1, L (G ∗)> K (G) es imposible. Por lo tanto, l (g ∗) = k (g). Teorema 10. Encontrar la ganancia óptima del peor de los casos en las apuestas de pares divisibles es NP-Hard. Prueba. Dado el conjunto óptimo de órdenes parciales para aceptar para G cuando los pesos de borde son (1-), si podemos calcular la ganancia óptima del peor de los casos, por Lemma 9 podemos resolver el problema del arco del arco de retroalimentación mínima no ponderada en G, que es NP, que es NP-duro. Por lo tanto, encontrar la ganancia óptima del peor de los casos es NP-Hard. El teorema 10 establece que resolver el programa lineal (7) es NP-Hard. De manera similar al caso indivisible, todavía necesitamos demostrar que solo encontrar la coincidencia divisible óptima es difícil, en lugar de poder calcular la ganancia óptima del peor de los peores. Dado que en el caso divisible, los bordes no necesariamente tienen pesos unitarios, la prueba en el Teorema 6 no se aplica directamente. Sin embargo, con una propiedad adicional del caso divisible, podemos aumentar el procedimiento de la prueba de dureza indivisible para calcular el conjunto de arco mínimo de retroalimentación mínima no ponderada K (g) aquí también. Primero, tenga en cuenta que el subgrafio divisible óptimo G ∗ de un gráfico G es el subgrafio ponderado con mínimo de retroalimentación ponderada Tamaño del conjunto L (g ∗) = k (g) y la mayor suma de pesos de borde e∈E ∗ Xe, ya que su correspondienteEl peor beneficio de los casos es K (g) - e∈E ∗ xe según Lemmas 7 y 9. Lema 11. Supongamos que el gráfico H satisface l (h) = k (h) y eliminamos el borde e con peso xe <1. Entonces, k (h - {e}) = k (h). Prueba. Suponga lo contrario, a saber, k (h− {e}) <k (h). Luego por Lemma 5, K (H - {e}) = k (h) - 1. Dado que la eliminación de un solo borde no puede reducir el arco de retroalimentación mínima establecida en más del peso del borde, L (h) - xe ≤ L (H - {E}).(9) Por otro lado, h - {e} ⊂ h así tenemos, l (h - {e}) ≤ k (h - {e}) = k (h) - 1 = l (h) - 1.(10) Combinando (9) y (10), obtenemos Xe ≥ 1. Surge la contradicción. Por lo tanto, eliminar cualquier borde con menos de peso unitario de un gráfico divisible óptimo no cambia K (h), el tamaño mínimo de arco de retroalimentación de la versión no ponderada del gráfico. Ahora podemos aumentar el procedimiento para el caso indivisible en el Teorema 6, para demostrar la dureza de la versión divisible, como sigue. Teorema 12. Encontrar el partido óptimo en las apuestas de pares divisibles es NP-Hard. Prueba. Reducimos del problema del arco del arco de retroalimentación mínima no ponderada para Graph G. Suponga que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en la gráfica de entrada H calcula los pesos de borde xe ∈ (0, 1] para el subgrafio óptimo H ∗de h, satisfactorio l (h ∗) = k (h). El siguiente procedimiento sale k (g).Establecer g: = g iteraciones: = 0 while (g tiene un borde no vacío) Restablecer G: = coincidencia divisible óptima (g) mientras (g tiene bordes con peso <1) Retire un borde con peso <1 de g restableciendo g configurandoTodos los pesos de borde a 1 restablecimiento G: = coincidencia divisible óptima (g) Fin mientras (g tiene un conjunto de borde no vacío) iteraciones de incremento en 1 restablecimiento g eliminando cualquier borde E final si finalTeorema 6 correspondiente para el caso indivisible, calculamos K (g) eliminando iterativamente los bordes y recomputando la solución divisible óptima en el subgrafio restante, hasta que se eliminen todos los bordes. En cada iteración del bucle externo, el conjunto de arco de retroalimentación mínima se reduce en 1, por lo tanto, el número de iteraciones es igual a k (g). Queda por verificar que cada iteración reduce K (g) en exactamente 1. A partir de un gráfico al comienzo de una iteración, calculamos su subgrafio divisible óptimo. Luego seguimos eliminando un borde de peso sin unidades a la vez y recomputando el subgrafio divisible óptimo, hasta que este último contiene solo bordes con peso unitario. Por Lemma 11 a lo largo de la iteración hasta ahora, el conjunto de arco de retroalimentación mínima del gráfico no ponderado correspondiente permanece sin cambios. Una vez que el Oracle devuelve un gráfico G con pesos de borde unitario, eliminar cualquier borde reduciría el conjunto mínimo de arco de retroalimentación: de lo contrario, G no es óptimo ya que G - {E} tendría 333 el mismo conjunto de arco de retroalimentación mínima pero menor peso de borde total. Al Lemma 5, eliminar un solo borde no puede reducir el arco de retroalimentación mínima establecido en más de uno, por lo tanto, ya que todos los bordes tienen peso unitario, K (g) se reduce exactamente en uno.k (g) es igual al valor devuelto del procedimiento. Por lo tanto, el problema de correspondencia óptimo para las órdenes divisibles es NP-Hard.5.3 Existencia de una coincidencia Sabiendo que el problema de coincidencia óptimo es NP-Hard para órdenes indivisibles y divisibles en las apuestas de pares, verificamos si el subastador puede identificar la existencia de un partido con facilidad. Lema 13 establece una condición suficiente para el problema de correspondencia con órdenes indivisibles y divisibles. Lema 13. Una condición suficiente para la existencia de una coincidencia para las apuestas de pares es que existe un ciclo c en g de tal manera que, es ≥ | c |- 1, (11) donde | c |es el número de bordes en el ciclo C. prueba. El lado izquierdo de la desigualdad (11) representa el pago total que el subastador recibe al aceptar cada unidad de pedidos en el ciclo C en su totalidad. Debido a que la dirección de un borde representa el orden predicho de los dos nodos conectados en la clasificación final, formando un ciclo, lo que significa que hay alguna contradicción lógica en los ordenamientos predichos de los candidatos. Por lo tanto, el estado se realiza, no todos los bordes en el ciclo pueden ser bordes ganadores. El peor de los casos para el subastador corresponde a un estado donde cada borde del ciclo se paga por $ 1 excepto uno, con | c |- 1 Sea el pago máximo a los comerciantes. Por lo tanto, si se cumple la desigualdad (11), el subastador tiene ganancias no negativas en el peor de los casos al aceptar las órdenes en el ciclo. Se puede demostrar que identificar un ciclo de ganancia de peor de los casos tan no negativo en un gráfico de pedidos G se puede lograr en el tiempo polinomial. Lema 14. Se necesita tiempo polinomial para encontrar un ciclo en un gráfico de orden G (v, e) que tiene la ganancia más alta en el peor de los casos, es decir, max c∈C e∈C be-(| c |-1), donde c es el es elConjunto de todos los ciclos en G. Prueba. Porque E∈C be-(| c |-1) = e∈C (be-1) + 1 = 1-e∈C (1-be), encontrando el ciclo que da la ganancia más alta en el original en el originalEl gráfico de pedidos G es equivalente a encontrar el ciclo más corto en un gráfico convertido H (V, E), donde H se logra estableciendo el peso para que el borde E en G sea (1 - BE). Encontrar el ciclo más corto en el gráfico H se puede hacer dentro del tiempo polinomial al recurrir al problema de ruta más corto. Para cualquier vértice V en V, consideramos cada vértice vecino W tal que (v, w) ∈ E. luego encontramos la ruta más corta de W a V, denotada como ruta (W, V). El ciclo más corto que pasa el vértice V se encuentra eligiendo la W de tal manera que E (V, W) + Path (W, V) se minimice. Comparando el ciclo más corto que se encuentra para cada vértice, podemos determinar el ciclo general más corto para el gráfico H. Debido a que el problema de la ruta corta se puede resolver en el tiempo polinomial [3], podemos encontrar la solución a nuestro problema en el tiempo polinomial. Si la ganancia del peor de los casos para el ciclo óptimo no es negativo, sabemos que existe una coincidencia en G. Sin embargo, la condición en Lemma 13 no es una condición necesaria para la existencia de una coincidencia. Incluso si todos los ciclos individuales en el gráfico de pedidos tienen ganancias negativas en el peor de los casos, el subastador puede aceptar múltiples ciclos de entrelazamiento para tener ganancias positivas del peor de los peores. La Figura 1 exhibe tal situación. Si la coincidencia indivisible óptima consiste solo en ciclos de disjunto de borde, un algoritmo codicioso natural puede encontrar el ciclo que brinda la mayor ganancia del peor de los casos, eliminar sus bordes del gráfico y continuar hasta que no existan más ciclos. Sin embargo, mostramos que tal algoritmo codicioso puede dar una aproximación muy pobre.√ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n bordes en los que el algoritmo codicioso encuentra solo dos ciclos, elciclo punteado en el centro y el ciclo restante único. Las etiquetas en las caras dan el número de bordes en el ciclo correspondiente. Lema 15. El algoritmo codicioso da como máximo una aproximación O (√ n) al número máximo de ciclos disjuntos. Prueba. Considere el gráfico en la Figura 3 que consiste en un ciclo con √ n bordes, cada uno de los cuales participa en otro ciclo (de lo contrario disjunto) con √ n + 1 bordes. Supongamos que todos los pesos de borde son (1 -). El número máximo de ciclos disjuntos es claramente √ n, tomando todos los ciclos con longitud √ n + 1. Debido a que los ciclos más pequeños ofrecen una ganancia más alta en el peor de los casos, el algoritmo codicioso seleccionaría primero el ciclo de longitud √ n, después de lo cual solo habría un ciclo restante de longitud n.Por lo tanto, el número total de ciclos seleccionados por Greedy es 2 y el factor de aproximación en este caso es √ n/2. A la luz del Lemma 15, uno puede esperar que los algoritmos codiciosos le den √ n-acroximaciones en el mejor de los casos. Los algoritmos de aproximación 334 para encontrar el número máximo de ciclos de disjunto de borde han sido considerados por Krivelevich, Nutov y Yuster [11, 19]. De hecho, para el caso de los gráficos dirigidos, los autores muestran que un algoritmo codicioso ofrece una acroximación n [11]. Cuando la coincidencia óptima no consiste en ciclos de disco de borde como en el ejemplo de la Figura 3, el algoritmo codicioso que intenta encontrar ciclos individuales óptimos falla obviamente.6. Conclusión Consideramos un escenario de apuestas de permutación, donde los comerciantes apuestan al orden final de n candidatos. ¡Mientras no es natural e intratable permitir que los comerciantes aposen directamente en el n!Diferentes ordenos finales, proponemos dos lenguajes de apuestas expresivos, apuestas de subconjunto y apuestas de par. En un mercado de apuestas de subconjunto, los comerciantes pueden apostar en un subconjunto de puestos que se encuentra un candidato o en un subconjunto de candidatos que ocupan una posición específica en el orden final. Las apuestas de pares permiten a los comerciantes apostar a si uno dado el candidato se clasifica más alto que otro candidato dado. Examinamos el problema del subastador de igualar pedidos sin incurrir en riesgos. Encontramos que en un mercado de apuestas de subconjunto, un subastador puede encontrar el conjunto óptimo y la cantidad de órdenes de aceptar de tal manera que su peor beneficio se maximice en el tiempo polinómico si las órdenes son divisibles. La complejidad cambia drásticamente para las apuestas de pares. Probamos que el problema de correspondencia óptimo para el subastador es NP-Hard para las apuestas de pares con órdenes indivisibles y divisibles a través de reducciones al problema del conjunto de arco de retroalimentación mínima. Identificamos una condición suficiente para la existencia de una coincidencia, que puede verificarse en tiempo polinomial. Se ha demostrado que un algoritmo codicioso natural da una aproximación pobre para las apuestas de pares indivisibles. Las preguntas abiertas interesantes para nuestras apuestas de permutación incluyen la complejidad computacional de la coincidencia indivisible óptima para las apuestas de subconjunto y la condición necesaria para la existencia de una coincidencia en los mercados de apuestas de pares. Estamos interesados en explorar más algoritmos de aproximación para los mercados de apuestas de parejas.7. Agradecimientos Agradecemos a Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin y miembros de Yahoo! Investigación para ideas y discusiones valiosas.8. Referencias [1] K. J. Arrow. El papel de los valores en la asignación óptima de la carga de riesgos. Review of Economic Studies, 31 (2): 91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson y T. A. Rietz. Resultados de una docena de años de investigación en mercados de futuros electorales. En C. A. Plott y V. Smith, editores, Manual de resultados económicos experimentales (de próxima publicación).2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest y C. Stein. Introducción a los algoritmos (segunda edición). MIT Press y McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham y R. Steinberg. Subastas combinatorias. MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz y T. W. Ross. Deseos, expectativas y acciones: una encuesta sobre la formación de precios en los mercados de valores electorales. Journal of Economic Behavior and Organization, 39: 83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock y M. P. Wellman. Estilo booleano de apuestas: un marco para el comercio de valores basados en fórmulas lógicas. Sistemas de soporte de decisiones, 39 (1): 87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz y A. Schrijver. El método elipsoide y sus consecuencias en la optimización combinatoria. Combinatorica, 1 (2): 169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz y A. Schrijver. Algoritmos geométricos y optimización combinatoria. Springer-Verlag, Berlín Heidelberg, 1993. [9] R. D. Hanson. Diseño del mercado de la información combinatoria. Information Systems Frontiers, 5 (1): 107-119, 2003. [10] R. M. Karp. Reducibilidad entre problemas combinatorios. En complejidad de los cálculos de la computadora (Proc. Simpos., IBM Thomas J. Watson Res. Centro, Yorktown Heights, N.Y.), páginas 85-103. Plenum, Nueva York, 1972. [11] M. Krivelevich, Z. Nutov y R. Yuster. Algoritmos de aproximación para problemas de embalaje de ciclo. Actas del decimosexto Simposio ACM-SIAM anual sobre algoritmos discretos, páginas 556-561, 2005. [12] H. W. Kuhn. El método húngaro para el problema de asignación. Naval Research Logistic Quarterly, 2: 83-97, 1955. [13] J. Munkres. Algoritmos para los problemas de asignación y transporte. Revista de la Sociedad de Matemáticas Industriales y Aplicadas, 5 (1): 32-38, 1957. [14] N. Nisan. Licitación y asignación en subastas combinatorias. En Actas de la 2da Conferencia ACM sobre Comercio Electrónico (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles y F. A. Nielsen. El verdadero poder de los mercados artificiales. Science, 291: 987-988, febrero de 2002. [16] C. Plott y S. Sunder. Eficiencia de los mercados de seguridad experimentales con información privilegiada: una aplicación de modelos de expectativas racionales. Journal of Political Economy, 90: 663-98, 1982. [17] C. Plott y S. Sunder. Expectativas racionales y la agregación de información diversa en los mercados de seguridad de laboratorio. Econometrica, 56: 1085-1118, 1988. [18] T. Sandholm. Algoritmo para una determinación óptima del ganador en subastas combinatorias. Artificial Intelligence, 135: 1-54, 2002. [19] R. Yuster y Z. Nutov. Embalaje ciclos dirigidos de manera eficiente. Actas del 29º Simposio Internacional sobre Fundaciones Matemáticas de la Computación (MFCS), 2004. 335",
    "original_sentences": [
        "Betting on Permutations Yiling Chen Yahoo!",
        "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
        "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
        "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
        "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
        "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
        "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
        "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
        "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
        "We prove that the auctioneer problem becomes NP-hard for pair betting.",
        "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
        "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
        "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
        "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
        "For example, buying a stock is a bet that the stocks value is greater than its current price.",
        "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
        "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
        "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
        "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
        "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
        "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
        "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
        "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
        "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
        "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
        "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
        "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
        "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
        "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
        "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
        "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
        "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
        "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
        "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
        "We explore two bidding languages that seem natural from a trader perspective.",
        "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
        "Symetrically, traders can also bet on which candidates will fall in a particular position.",
        "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
        "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
        "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
        "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
        "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
        "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
        "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
        "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
        "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
        "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
        "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
        "This separation can hurt liquidity and information aggregation.",
        "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
        "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
        "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
        "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
        "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
        "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
        "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
        "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
        "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
        "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
        "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
        "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
        "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
        "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
        "The corresponding matching problem is polynomial, however the language is not very expressive.",
        "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
        "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
        "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
        "Our work is in direct analogy to work by Fortnow et. al. [6].",
        "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
        "The authors consider a state space of the 2n possible outcomes of n binary variables.",
        "Traders express bets in Boolean logic.",
        "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
        "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
        "The market starts with a joint probability distribution across all outcomes.",
        "It works like a sequential version of a scoring rule.",
        "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
        "The market maker pays the last trader.",
        "Hence, he bears risk and may incur loss.",
        "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
        "However, the computational aspects on how to operate the mechanism have not been fully explored.",
        "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
        "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
        "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
        "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
        "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
        "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
        "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
        "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
        "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
        "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
        "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
        "Consider an index set of bets or orders O which traders submit to the auctioneer.",
        "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
        "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
        "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
        "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
        "Let xi be the fraction of order i ∈ O accepted.",
        "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
        "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
        "There are two possible problems that the auctioneer may want to solve.",
        "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
        "We call this problem the existence of a match or sometimes simply, the matching problem.",
        "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
        "Definition 1 (Existence of match, indivisible orders).",
        "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
        "Definition 2 (Existence of match, divisible orders).",
        "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
        "It only returns whether trade can occur at no risk to the auctioneer.",
        "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
        "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
        "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
        "Definition 3 (Optimal match, indivisible orders).",
        "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
        "Definition 4 (Optimal match, divisible orders).",
        "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
        "The variable c is the worst-case profit for the auctioneer.",
        "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
        "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
        "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
        "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
        "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
        "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
        "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
        "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
        "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
        "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
        "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
        "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
        "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
        "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
        "Example 1.",
        "Suppose n = 3.",
        "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
        "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
        "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
        "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
        "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
        "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
        "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
        "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
        "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
        "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
        "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
        "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
        "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
        "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
        "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
        "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
        "Brute-force methods would take exponential time to solve.",
        "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
        "Theorem 1.",
        "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
        "Consider the linear programming problem (4) for finding an optimal match.",
        "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
        "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
        "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
        "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
        "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
        "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
        "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
        "For each order i we put weight qixi on each of these edges.",
        "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
        "Every state s then corresponds to a perfect matching in the bipartite graph.",
        "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
        "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
        "Hence, the separation problem can be solved in polynomial time.",
        "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
        "Thus, the matching problem can be solved in polynomial time also. 5.",
        "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
        "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
        "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
        "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
        "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
        "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
        "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
        "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
        "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
        "All edges have equal weight of 1.",
        "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
        "Where not stated, < 1/(2|E|) for a graph H(V, E).",
        "In other cases, the value is determined in context.",
        "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
        "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
        "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
        "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
        "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
        "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
        "Our hardness proof is based on the following lemmas.",
        "Lemma 2.",
        "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
        "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
        "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
        "For any state s, all winning edges necessarily form a DAG.",
        "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
        "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
        "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
        "This gives the maximum number of winning edges wmax.",
        "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
        "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
        "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
        "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
        "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
        "We have the following lemma.",
        "Lemma 3.",
        "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
        "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
        "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
        "Suppose k(G∗ ) < k(G).",
        "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
        "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
        "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
        "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
        "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
        "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
        "Theorem 4.",
        "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
        "Proof.",
        "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
        "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
        "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
        "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
        "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
        "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
        "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
        "We will use the following short fact repeatedly.",
        "Lemma 5 (Edge removal lemma).",
        "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
        "Proof.",
        "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
        "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
        "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
        "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
        "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
        "Theorem 6.",
        "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
        "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
        "Consider an instance graph G of the minimum feedback arc set problem.",
        "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
        "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
        "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
        "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
        "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
        "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
        "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
        "Hence the number of iterations is equal to k(G).",
        "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
        "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
        "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
        "Example 2.",
        "We show that the linear program (7) sometimes has a non-integer optimal solution.",
        "A B C D E F b b b b b b b b b Figure 2: An order graph.",
        "Letters on edges represent order prices.",
        "Consider the graph in Figure 2.",
        "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
        "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
        "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
        "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
        "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
        "Lemma 7.",
        "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
        "For any state s, the winning edges form a DAG.",
        "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
        "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
        "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
        "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
        "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
        "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
        "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
        "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
        "Hence, we have the above relation.",
        "Lemma 9.",
        "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
        "Proof.",
        "From lemma 8, l(G∗ ) ≤ k(G).",
        "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
        "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
        "Suppose l(G∗ ) < k(G).",
        "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
        "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
        "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
        "Thus, l(G∗ ) = k(G).",
        "Theorem 10.",
        "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
        "Proof.",
        "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
        "Hence, finding the optimal worst-case profit is NP-hard.",
        "Theorem 10 states that solving the linear program (7) is NP-hard.",
        "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
        "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
        "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
        "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
        "Lemma 11.",
        "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
        "Then, k(H − {e}) = k(H).",
        "Proof.",
        "Assume the contrary, namely k(H−{e}) < k(H).",
        "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
        "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
        "The contradiction arises.",
        "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
        "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
        "Theorem 12.",
        "Finding the optimal match in divisible pair betting is NP-hard.",
        "Proof.",
        "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
        "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
        "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
        "It remains to verify that each iteration reduces k(G) by exactly 1.",
        "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
        "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
        "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
        "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
        "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
        "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
        "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
        "Lemma 13.",
        "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
        "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
        "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
        "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
        "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
        "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
        "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
        "Lemma 14.",
        "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
        "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
        "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
        "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
        "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
        "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
        "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
        "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
        "Figure 1 exhibits such a situation.",
        "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
        "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
        "The labels in the faces give the number of edges in the corresponding cycle.",
        "Lemma 15.",
        "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
        "Proof.",
        "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
        "Suppose all edge weights are (1 − ).",
        "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
        "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
        "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
        "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
        "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
        "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
        "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
        "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
        "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
        "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
        "We examine the auctioneer problem of matching orders without incurring risk.",
        "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
        "The complexity changes dramatically for pair betting.",
        "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
        "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
        "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
        "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
        "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
        "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
        "Research for valuable insights and discussions. 8.",
        "REFERENCES [1] K. J. Arrow.",
        "The role of securities in the optimal allocation of risk-bearing.",
        "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
        "Results from a dozen years of election futures markets research.",
        "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
        "Introduction to Algorithms (Second Edition).",
        "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
        "Combinatorial Auctions.",
        "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
        "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
        "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
        "Betting boolean-style: A framework for trading in securities based on logical formulas.",
        "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
        "The ellipsoid method and its consequences in combinatorial optimization.",
        "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
        "Geometric Algorithms and Combinatorial Optimization.",
        "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
        "Combinatorial information market design.",
        "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
        "Reducibility among combinatorial problems.",
        "In Complexity of computer computations (Proc.",
        "Sympos., IBM Thomas J. Watson Res.",
        "Center, Yorktown Heights, N.Y.), pages 85-103.",
        "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
        "Approximation algorithms for cycle packing problems.",
        "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
        "The hungarian method for the assignment problem.",
        "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
        "Algorithms for the assignment and transportation problems.",
        "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
        "Bidding and allocation in combinatorial auctions.",
        "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
        "The real power of artificial markets.",
        "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
        "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
        "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
        "Rational expectations and the aggregation of diverse information in laboratory security markets.",
        "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
        "Algorithm for optimal winner determination in combinatorial auctions.",
        "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
        "Packing directed cycles efficiently.",
        "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
    ],
    "error_count": 0,
    "keys": {
        "permutation betting": {
            "translated_key": "apuestas de permutación",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a <br>permutation betting</br> scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider <br>permutation betting</br>, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "<br>permutation betting</br> In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general <br>permutation betting</br> market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a <br>permutation betting</br> market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a <br>permutation betting</br> scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our <br>permutation betting</br> include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Investigación 45 W. 18th St. 6th Floor New York, NY 10011 Resumen Consideramos un escenario de \"apuestas de permutación\", donde la gente apuesta por el orden final de n candidatos: por ejemplo, el resultado de una carrera de caballos.",
                "Antecedentes y trabajos relacionados consideramos \"apuestas de permutación\" o apuestas sobre el resultado de una competencia entre n candidatos.",
                "\"apuestas de permutación\" En esta sección, definimos los problemas de correspondencia óptimos y de correspondencia que un subastador necesita resolver en un mercado general de \"apuestas de permutación\".",
                "Para cualquier lenguaje de licitación y el número de valores en un mercado de \"apuestas de permutación\", podemos representar sucintamente el problema del subastador para igualar las ofertas sin riesgos de la siguiente manera.",
                "Conclusión Consideramos un escenario de \"apuestas de permutación\", donde los comerciantes apuestan al orden final de n candidatos.",
                "Las preguntas abiertas interesantes para nuestras \"apuestas de permutación\" incluyen la complejidad computacional de la coincidencia indivisible óptima para las apuestas de subconjuntos y la condición necesaria para la existencia de una coincidencia en los mercados de apuestas de pares."
            ],
            "translated_text": "",
            "candidates": [
                "apuestas de permutación",
                "apuestas de permutación",
                "apuestas de permutación",
                "apuestas de permutación",
                "apuestas de permutación",
                "apuestas de permutación",
                "apuestas de permutación",
                "apuestas de permutación",
                "apuestas de permutación",
                "apuestas de permutación",
                "apuestas de permutación",
                "apuestas de permutación",
                "apuestas de permutación"
            ],
            "error": []
        },
        "subset betting": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "<br>subset betting</br> allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For <br>subset betting</br>, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "<br>subset betting</br>, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 <br>subset betting</br> A <br>subset betting</br> market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a <br>subset betting</br> market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF <br>subset betting</br> The matching problems of the auctioneer in any permutation market, including the <br>subset betting</br> market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the <br>subset betting</br> market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a <br>subset betting</br> market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the <br>subset betting</br> market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, <br>subset betting</br> and pair betting.",
                "In a <br>subset betting</br> market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a <br>subset betting</br> market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for <br>subset betting</br> and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "\"Las apuestas de subconjunto\" permiten a los comerciantes apostar que un candidato terminará clasificado entre algunos subconjuntos de posiciones en el orden final, por ejemplo, el caballo A terminará en las posiciones 4, 9 o 13-21, o que una posición seráTomado por algún subconjunto de candidatos, por ejemplo, el caballo A, B o D terminará en la posición 2.",
                "Para las \"apuestas de subconjunto\", mostramos que el problema del subastador se puede resolver en el tiempo polinómico si las órdenes son divisibles.",
                "Las \"apuestas de subconjunto\", descritas en la Sección 3.2, permiten a los comerciantes apostar en qué posiciones en la clasificación caerán un candidato, por ejemplo, el candidato D finalizará en la posición 1, 3-5 o 10.",
                "La ganancia óptima del peor de los casos puede permanecer desconocida.3.2 El mercado de apuestas de \"subconjunto\" A \"subconjuntas\" permite dos tipos diferentes de apuestas.",
                "El subastador en un mercado de \"apuestas de subconjunto\" enfrenta un problema de correspondencia no trivial, es decir, qué órdenes aceptar entre todas las órdenes enviadas I ∈ O.",
                "Complejidad de \"apuestas subconjunto\" Los problemas de correspondencia del subastador en cualquier mercado de permutación, incluido el mercado de \"apuestas de subconjunto\" tienen n!restricciones.",
                "Sin embargo, dada la forma especial de los valores en el mercado de \"apuestas de subconjunto\", podemos demostrar que los problemas de correspondencia para los pedidos divisibles pueden resolverse en el tiempo polinomial.",
                "La existencia de una coincidencia y los problemas óptimos de partidos con órdenes divisibles en un mercado de \"apuestas de subconjunto\" se pueden resolver en tiempo polinomial.329 Prueba.",
                "En contraste, el mercado de \"apuestas de subconjunto\" permite a los operadores apostar por un número exponencial de valores y, sin embargo, tuvo una solución de tiempo polinomial para encontrar la coincidencia óptima.",
                "¡Mientras no es natural e intratable permitir que los comerciantes aposen directamente en el n!Diferentes ordenos finales, proponemos dos lenguajes de apuestas expresivos, \"apuestas de subconjunto\" y apuestas de pares.",
                "En un mercado de \"subcontrol\", los comerciantes pueden apostar en un subconjunto de puestos que se encuentra un candidato o en un subconjunto de candidatos que ocupan una posición específica en el orden final.",
                "Encontramos que en un mercado de \"apuestas de subconjunto\" un subastador puede encontrar el conjunto óptimo y la cantidad de órdenes de aceptar de tal manera que su peor ganancias se maximice en el tiempo polinómico si los pedidos son divisibles.",
                "Preguntas abiertas interesantes para nuestras apuestas de permutación incluyen la complejidad computacional de la coincidencia indivisible óptima para las \"apuestas de subconjunto\" y la condición necesaria para la existencia de una coincidencia en los mercados de apuestas de parejas."
            ],
            "translated_text": "",
            "candidates": [
                "Subconsulador de apuestas",
                "Las apuestas de subconjunto",
                "subcontar apuestas",
                "apuestas de subconjunto",
                "Apuestas de subconjunto",
                "apuestas de subconjunto",
                "subcontar apuestas",
                "subconjunto",
                "subconjuntas",
                "Apuestas de subconjunto",
                "apuestas de subconjunto",
                "subcontar apuestas",
                "apuestas subconjunto",
                "apuestas de subconjunto",
                "subcontar apuestas",
                "apuestas de subconjunto",
                "subcontar apuestas",
                "apuestas de subconjunto",
                "subcontar apuestas",
                "apuestas de subconjunto",
                "subcontar apuestas",
                "apuestas de subconjunto",
                "subcontar apuestas",
                "subcontrol",
                "subcontar apuestas",
                "apuestas de subconjunto",
                "subcontar apuestas",
                "apuestas de subconjunto"
            ],
            "error": []
        },
        "bilateral trading partner": {
            "translated_key": "socio comercial bilateral",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up <br>bilateral trading partner</br>s.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Casi todos los intercambios financieros y de apuestas existentes combinan \"socio comercial bilateral\" s."
            ],
            "translated_text": "",
            "candidates": [
                "socio comercial bilateral",
                "socio comercial bilateral"
            ],
            "error": []
        },
        "polynomial-time algorithm": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a <br>polynomial-time algorithm</br> for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "En la Sección 4, derivamos un \"algoritmo de tiempo polinomial\" para las apuestas de subconjunto (divisibles) coincidentes."
            ],
            "translated_text": "",
            "candidates": [
                "algoritmo de tiempo polinómico",
                "algoritmo de tiempo polinomial"
            ],
            "error": []
        },
        "information aggregation": {
            "translated_key": "agregación de información",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and <br>information aggregation</br>.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Esta separación puede dañar la liquidez y la \"agregación de información\"."
            ],
            "translated_text": "",
            "candidates": [
                "agregación de información",
                "agregación de información"
            ],
            "error": []
        },
        "permutation combinatoric": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore <br>permutation combinatoric</br>s, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Mientras que exploramos la \"combinatoria de la permutación\" S, Fortnow et.Alabama.Explore la combinatoria booleana."
            ],
            "translated_text": "",
            "candidates": [
                "permutación combinatoria",
                "combinatoria de la permutación"
            ],
            "error": []
        },
        "pair-betting market": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the <br>pair-betting market</br> have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Los órdenes en el \"mercado de apuestas de pares\" tienen una interpretación natural como gráfico, donde los candidatos son nodos en el gráfico y cada orden que clasifica un par de candidatos α> β está representado por un borde dirigido E = (α, β) con precio y peso qe."
            ],
            "translated_text": "",
            "candidates": [
                "mercado de apuestas",
                "mercado de apuestas de pares"
            ],
            "error": []
        },
        "bipartite graph": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted <br>bipartite graph</br> can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the <br>bipartite graph</br>.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a <br>bipartite graph</br>, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "El lado izquierdo en la ecuación.(5) es el dinero total que el subastador necesita pagar a los comerciantes ganadores en el estado s.El primer término en el lado derecho es el dinero total recaudado por el subastador y se fija para un vector de solución dado de XIS y C.Se puede construir un \"gráfico bipartito\" ponderado entre el conjunto de candidatos y el conjunto de posiciones.",
                "Cada estado se corresponde a una coincidencia perfecta en el \"gráfico bipartito\".",
                "Los resultados de la dureza son sorprendentes, especialmente a la luz de la observación de que un mercado de apuestas de pares tiene un lenguaje de licitación aparentemente más restrictivo que solo ofrece N (n - 1) 1 la noción de coincidencia perfecta en un \"gráfico bipartito\", que usamos solo enEsta prueba no debe confundirse con la noción de apuestas coincidentes que usamos en todo el documento.valores."
            ],
            "translated_text": "",
            "candidates": [
                "gráfica bipartita",
                "gráfico bipartito",
                "gráfica bipartita",
                "gráfico bipartito",
                "gráfica bipartita",
                "gráfico bipartito"
            ],
            "error": []
        },
        "minimum feedback": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted <br>minimum feedback</br> arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted <br>minimum feedback</br> arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted <br>minimum feedback</br> arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted <br>minimum feedback</br> arc set problem is to find a feedback arc set with the minimum cardinality, while weighted <br>minimum feedback</br> arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted <br>minimum feedback</br> arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted <br>minimum feedback</br> arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted <br>minimum feedback</br> arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the <br>minimum feedback</br> arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the <br>minimum feedback</br> arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted <br>minimum feedback</br> arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted <br>minimum feedback</br> arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the <br>minimum feedback</br> arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the <br>minimum feedback</br> arc set of G, k(G).",
                "Because the <br>minimum feedback</br> arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted <br>minimum feedback</br> arc set solution l(H) by no more than xe and reduces the unweighted <br>minimum feedback</br> arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted <br>minimum feedback</br> arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted <br>minimum feedback</br> arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted <br>minimum feedback</br> arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted <br>minimum feedback</br> arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted <br>minimum feedback</br> arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the <br>minimum feedback</br> arc set problem.",
                "We are interested in computing k(G), the size of the <br>minimum feedback</br> arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of <br>minimum feedback</br> arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the <br>minimum feedback</br> arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the <br>minimum feedback</br> arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted <br>minimum feedback</br> arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted <br>minimum feedback</br> arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted <br>minimum feedback</br> arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted <br>minimum feedback</br> arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted <br>minimum feedback</br> arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the <br>minimum feedback</br> arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted <br>minimum feedback</br> arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the <br>minimum feedback</br> arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the <br>minimum feedback</br> arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the <br>minimum feedback</br> arc set: otherwise G is not optimal since G − {e} would have 333 the same <br>minimum feedback</br> arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the <br>minimum feedback</br> arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the <br>minimum feedback</br> arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Las apuestas de pares, descritas en la Sección 3.3, permiten a los comerciantes apostar por la clasificación final de dos candidatos, por ejemplo, el candidato D derrotará al candidato R. En la Sección 5, mostramos que la coincidencia óptima de las apuestas de pares (divisibles o indivisibles) es np-Difícil, a través de una reducción del problema del arco de \"comentarios mínimos\" no ponderados.",
                "Adoptamos las siguientes anotaciones en todo el documento: • G (V, E): Gráfico dirigido original igualmente ponderado para el conjunto de pedidos unitarios O. • BE: Precio del pedido de borde e.• G ∗ (V ∗, E ∗);Una gráfica dirigida de pedidos aceptados para una coincidencia óptima, donde el peso de borde Xe es la cantidad de orden E aceptada por el subastador.xe = 1 para órdenes indivisibles y 0 <xe ≤ 1 para órdenes divisibles.• H (V, E): un gráfico dirigido genérico de pedidos aceptados.• K (H): la solución al problema del arco de \"retroalimentación mínima\" no ponderada en el gráfico H. K (H) es el número mínimo de bordes para eliminar para que H se vuelva acíclico.• L (H): la solución al problema de arco de \"retroalimentación mínima\" ponderada en el gráfico H. L (H) es el peso total mínimo para el conjunto de bordes que, cuando se eliminan, dejan H acíclico.• C (H): la peor ganancia del subastador si acepta todos los pedidos en el gráfico H. •: un número real positivo suficientemente pequeño.",
                "El problema del conjunto de arco de \"retroalimentación mínima\" no ponderada es encontrar un arco de retroalimentación con la cardinalidad mínima, mientras que el problema de arco de \"retroalimentación mínima\" ponderada busca encontrar un arco de retroalimentación con el peso mínimo de borde total.",
                "Se ha demostrado que los problemas del conjunto de arco de \"retroalimentación mínima\" no ponderada y ponderada son NP completas [10].",
                "Suponiendo las órdenes de la unidad y considerando el gráfico de pedidos G (v, E), reafiremos el problema de coincidencia óptimo de los subastadores en un mercado de apuestas de pares como eligiendo un subconjunto de bordes para aceptar de tal manera que 330 ganancias en el peor de los casos se maximice en el siguiente problema de optimización,Max Xe, C C (6) S.T.e be-es decir (s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Sin perder la generalidad, suponemos que no hay bordes múltiples en el gráfico de orden G. mostramosQue el problema de coincidencia óptimo para órdenes indivisibles es NP-HARD a través de una reducción del problema del arco del arco \"Comentarios mínimos\" no ponderados.",
                "Entonces, la ganancia del peor de los casos es igual a k (h)-| e |, donde k (h) es la solución al problema del arco de \"retroalimentación mínima\" no ponderada en H. prueba.",
                "Entonces, LS es la cardinalidad de un conjunto de arcos de retroalimentación que consiste en todos los bordes perdedores en el estado s.Los bordes que permanecen después de eliminar el conjunto de arco de \"retroalimentación mínima\" forman el DAG máximo para el gráfico H. Considere el smax de estado en el que todos los bordes del DAG máximo son ganadores.",
                "El número de bordes perdedores en el estado SMAX es la cardinalidad del conjunto de arco de \"retroalimentación mínima\" de H, es decir, | E |- wmax = k (h).",
                "Si los precios del borde son = (1-), entonces el gráfico óptimo de solución indivisible G ∗ tiene el mismo tamaño de conjunto de arco de \"retroalimentación mínima\" no ponderada como la gráfica de todos los órdenes G, es decir, k (g ∗) = k (g).",
                "Además, G ∗ es el subgrafio más pequeño de G, es decir, es el subgrafo de G con el menor número de bordes, que tiene el mismo tamaño de arco de \"retroalimentación mínima\" no ponderada como prueba de G.",
                "Los dos lemas anteriores demuestran que el beneficio máximo del peor de los peores en la coincidencia indivisible óptima está directamente relacionada con el tamaño del conjunto de arco de \"retroalimentación mínima\".",
                "Ya que k (g) es entero y | e ∗ |≤ | E |<1, resolver (6) automáticamente nos dará la cardinalidad del conjunto de arco de \"retroalimentación mínima\" de G, K (G).",
                "Debido a que el problema del conjunto de arco de \"retroalimentación mínima\" es NP-complete [10], calcular la ganancia máxima en el peor de los casos es NP-Hard.",
                "Dado un gráfico ponderado H (V, E), eliminar un solo borde E con peso Xe del gráfico disminuye la solución de arco de \"retroalimentación mínima\" ponderada L (H) por no más de XE y reduce el arco no ponderado de \"retroalimentación mínima\"Establezca la solución k (h) por no más de 1.",
                "Suponga que el conjunto de arco de \"retroalimentación mínima\" ponderada para el gráfico H - {E} es F. Entonces F ∪ {E} es un conjunto de arco de retroalimentación para H, y tiene un peso de borde total L (h− {e})+xe.",
                "Debido a que L (h) es la solución al problema de arco de \"retroalimentación mínima\" ponderada en h, tenemos l (h) ≤ l (h - {e})+xe, lo que implica que l (h - {e}) ≥l (h) - xe.",
                "Del mismo modo, suponga que el arco de \"retroalimentación mínima\" no ponderada para el gráfico h - {e} es f.",
                "Debido a que k (h) es la solución al problema del arco de \"retroalimentación mínima\" no ponderada en h, tenemos k (h) ≤ k (h - {e}) + 1, dando esa k (h - {e}) ≥k (h) - 1.",
                "Reducimos del problema del arco del arco de \"retroalimentación mínima\" no ponderada, aunque con una transformación polinomial ligeramente más compleja que implica múltiples llamadas al oráculo óptimo de coincidencia.",
                "Considere un gráfico de instancia G del problema de conjunto de arco de \"retroalimentación mínima\".",
                "Estamos interesados en calcular k (g), el tamaño del conjunto de arco de \"retroalimentación mínima\" de G. Supongamos que tenemos un oráculo que resuelve el problema de correspondencia óptimo.",
                "Por Lemma 3, en la entrada G, el Oracle Optimal Match devuelve el subgrafo de G con el menor número de bordes, que tiene el mismo tamaño de arco de \"retroalimentación mínima\" establecido como G.",
                "El siguiente procedimiento encuentra k (g) utilizando polinomialmente muchas llamadas al oráculo óptimo de coincidencia en una secuencia de subgrafías de G. set g: = g iteraciones: = 0 while (g tiene un conjunto de borde no vacío) Restablecer G: = coincidencia óptima ((G) if (G tiene un ajuste de borde no vacío) iteraciones de incremento en 1 restablecimiento g eliminando cualquier borde E End si finaliza mientras return (iteraciones) Este procedimiento elimina los bordes del gráfico original G capa por capa hasta que el gráfico esté vacío, mientras que en elAl mismo tiempo, calculando el tamaño del arco del arco de \"retroalimentación mínima\" K (g) del gráfico original como el número de iteraciones.",
                "Por lo tanto, en cada iteración, la cardinalidad del conjunto de arco de \"retroalimentación mínima\" se reduce exactamente en 1.",
                "Tenga en cuenta que este procedimiento proporciona una transformación polinómica del problema de coincidencia óptimo al problema del conjunto de arco de \"retroalimentación mínima\" no ponderada, que llama al oráculo óptimo de coincidencia exactamente k (g) ≤ | e |tiempos, donde | E |es el número de bordes de G. de ahí el problema de coincidencia óptimo es NP-HARD.5.2 COCARACIÓN DE DIVISIBLE óptimo Cuando los pedidos son divisibles, el problema de correspondencia óptimo de los subastadores se describe en la definición 4 de la Sección 3.",
                "Prueba.L (G ∗) es la solución del problema del conjunto de arco de \"retroalimentación mínima\" ponderada en G ∗, mientras que K (G ∗) es la solución del problema del arco del arco \"retroalimentación mínima\" no ponderada en G ∗.",
                "Dado el conjunto óptimo de órdenes parciales para aceptar G para G cuando los pesos de borde son (1-), si podemos calcular la ganancia óptima del peor de los casos, por Lemma 9 podemos resolver el problema del arco de \"retroalimentación mínima\" no ponderada en G, quees np-hard.",
                "Sin embargo, con una propiedad adicional del caso divisible, podemos aumentar el procedimiento de la prueba de dureza indivisible para calcular el tamaño del arco del arco no ponderado de \"retroalimentación mínima\".",
                "Dado que eliminar un solo borde no puede reducir el arco de \"retroalimentación mínima\" establecido en más del peso del borde, L (h) - xe ≤ L (H - {E}).(9) Por otro lado, h - {e} ⊂ h así tenemos, l (h - {e}) ≤ k (h - {e}) = k (h) - 1 = l (h) - 1.(10) Combinando (9) y (10), obtenemos Xe ≥ 1.",
                "Reducimos del problema del arco del arco de \"retroalimentación mínima\" no ponderada para el gráfico G. Suponga que tenemos un oráculo para el problema divisible óptimo llamado coincidencia divisible óptima, que en la entrada gráfica h calcula los pesos de borde xe ∈ (0, 1] para la subgraph óptimaH ∗ de H, satisfaciendo L (H ∗) = K (H).",
                "En cada iteración del bucle externo, el bucle, el conjunto de arco de \"retroalimentación mínima\" se reduce en 1, por lo tanto, el número de iteraciones es igual a k (g).",
                "Por Lemma 11 a lo largo de la iteración hasta ahora, el conjunto de arco de \"retroalimentación mínima\" del gráfico no ponderado correspondiente permanece sin cambios.",
                "Una vez que el Oracle devuelve un gráfico G con pesos de borde unitario, eliminar cualquier borde reduciría el conjunto de arco de \"retroalimentación mínima\": de lo contrario, G no es óptimo ya que G - {e} tendría 333 el mismo arco de \"retroalimentación mínima\" pero un total de arco totalpeso de borde.",
                "Al Lemma 5, eliminar un solo borde no puede reducir el arco de \"retroalimentación mínima\" establecido en más de uno, por lo tanto, ya que todos los bordes tienen peso unitario, K (g) se reduce exactamente en uno.k (g) es igual al valor devuelto del procedimiento.",
                "Probamos que el problema de correspondencia óptimo para el subastador es NP-Hard para las apuestas de pares con órdenes indivisibles y divisibles a través de reducciones al problema del conjunto de arco de \"retroalimentación mínima\"."
            ],
            "translated_text": "",
            "candidates": [
                "retroalimentación mínima",
                "comentarios mínimos",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "Comentarios mínimos",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "Comentarios mínimos",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "Comentarios mínimos",
                "retroalimentación mínima",
                "Comentarios mínimos",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "Comentarios mínimos",
                "retroalimentación mínima",
                "Comentarios mínimos",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima",
                "retroalimentación mínima"
            ],
            "error": []
        },
        "greedy algorithm": {
            "translated_key": "algoritmo codicioso",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural <br>greedy algorithm</br> gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a <br>greedy algorithm</br> offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural <br>greedy algorithm</br> can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such <br>greedy algorithm</br> can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the <br>greedy algorithm</br> finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The <br>greedy algorithm</br> gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the <br>greedy algorithm</br> would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a <br>greedy algorithm</br> gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, <br>greedy algorithm</br> trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural <br>greedy algorithm</br> has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "También mostramos que un \"algoritmo codicioso\" natural da una aproximación pobre para las órdenes indivisibles.",
                "También proporcionamos una condición polinomialmenteverificable suficiente para la existencia de una combinación de emparejamiento y mostramos que un \"algoritmo codicioso\" ofrece una aproximación pobre para las apuestas de pares indivisibles.2.",
                "Si la coincidencia indivisible óptima consiste solo en ciclos disjuntos de borde, un \"algoritmo codicioso\" natural puede encontrar el ciclo que brinda la mayor ganancia del peor de los casos, eliminar sus bordes del gráfico y continuar hasta que no existan más ciclos.",
                "Sin embargo, mostramos que tal \"algoritmo codicioso\" puede dar una aproximación muy pobre.√ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figura 3: Gráfico con n vértices y n + √ n bordes en los que el \"algoritmo codicioso\" encuentra solo dos ciclos, el ciclo punteado en el centro y el ciclo restante único.",
                "El \"algoritmo codicioso\" da como máximo una aproximación O (√ n) al número máximo de ciclos disjuntos.",
                "Debido a que los ciclos más pequeños ofrecen una ganancia más alta en el peor de los casos, el \"algoritmo codicioso\" seleccionaría primero el ciclo de longitud √ n, después de lo cual solo habría un ciclo restante de longitud n.Por lo tanto, el número total de ciclos seleccionados por Greedy es 2 y el factor de aproximación en este caso es √ n/2.",
                "De hecho, para el caso de los gráficos dirigidos, los autores muestran que un \"algoritmo codicioso\" da una acroximación n [11].",
                "Cuando la coincidencia óptima no consiste en ciclos de disco discográfico como en el ejemplo de la Figura 3, el \"algoritmo codicioso\" que intenta encontrar ciclos individuales óptimos falla obviamente.6.",
                "Se ha demostrado que un \"algoritmo codicioso\" natural da una aproximación pobre para las apuestas de parejas indivisibles."
            ],
            "translated_text": "",
            "candidates": [
                "algoritmo codicioso",
                "algoritmo codicioso",
                "Algoritmo codicioso",
                "algoritmo codicioso",
                "algoritmo codicioso",
                "algoritmo codicioso",
                "algoritmo codicioso",
                "algoritmo codicioso",
                "algoritmo codicioso",
                "algoritmo codicioso",
                "algoritmo codicioso",
                "algoritmo codicioso",
                "algoritmo codicioso",
                "algoritmo codicioso",
                "algoritmo codicioso",
                "Algoritmo codicioso",
                "algoritmo codicioso",
                "algoritmo codicioso",
                "algoritmo codicioso"
            ],
            "error": []
        },
        "complex polynomial transformation": {
            "translated_key": "",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more <br>complex polynomial transformation</br> involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Reducimos del problema del arco del arco de retroalimentación mínima no ponderada, aunque con una \"transformación polinómica compleja\" ligeramente más que implica múltiples llamadas al oráculo óptimo de coincidencia."
            ],
            "translated_text": "",
            "candidates": [
                "Transformación polinomial compleja",
                "transformación polinómica compleja"
            ],
            "error": []
        },
        "prediction market": {
            "translated_key": "mercado de la predicción",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "expressive bet": {
            "translated_key": "apuesta expresiva",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two <br>expressive bet</br>ting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two <br>expressive bet</br>ting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Proponemos dos idiomas de \"apuesta expresiva\" que parecen naturales para los postores, y examinamos la complejidad computacional del problema del subastador en cada caso.",
                "¡Mientras no es natural e intratable permitir que los comerciantes aposen directamente en el n!Diferentes ordenos finales, proponemos dos lenguajes de \"apuesta expresiva\", apuestas de subconjunto y apuestas de par."
            ],
            "translated_text": "",
            "candidates": [
                "apuesta expresiva",
                "apuesta expresiva",
                "apuesta expresiva",
                "apuesta expresiva"
            ],
            "error": []
        },
        "order match": {
            "translated_key": "Partido de pedido",
            "is_in_text": false,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the computational complexity of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the computational complexity of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the computational complexity of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the computational complexity of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [],
            "translated_text": "",
            "candidates": [],
            "error": []
        },
        "computational complexity": {
            "translated_key": "complejidad computacional",
            "is_in_text": true,
            "original_annotated_sentences": [
                "Betting on Permutations Yiling Chen Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 Lance Fortnow Department of Computer Science University of Chicago Chicago, IL 60637 Evdokia Nikolova ∗ CS & AI Laboratory Massachusetts Institute of Technology Cambridge, MA 02139 David M. Pennock Yahoo!",
                "Research 45 W. 18th St. 6th Floor New York, NY 10011 ABSTRACT We consider a permutation betting scenario, where people wager on the final ordering of n candidates: for example, the outcome of a horse race.",
                "We examine the auctioneer problem of risklessly matching up wagers or, equivalently, finding arbitrage opportunities among the proposed wagers.",
                "Requiring bidders to explicitly list the orderings that theyd like to bet on is both unnatural and intractable, because the number of orderings is n! and the number of subsets of orderings is 2n! .",
                "We propose two expressive betting languages that seem natural for bidders, and examine the <br>computational complexity</br> of the auctioneer problem in each case.",
                "Subset betting allows traders to bet either that a candidate will end up ranked among some subset of positions in the final ordering, for example, horse A will finish in positions 4, 9, or 13-21, or that a position will be taken by some subset of candidates, for example horse A, B, or D will finish in position 2.",
                "For subset betting, we show that the auctioneer problem can be solved in polynomial time if orders are divisible.",
                "Pair betting allows traders to bet on whether one candidate will end up ranked higher than another candidate, for example horse A will beat horse B.",
                "We prove that the auctioneer problem becomes NP-hard for pair betting.",
                "We identify a sufficient condition for the existence of a pair betting match that can be verified in polynomial time.",
                "We also show that a natural greedy algorithm gives a poor approximation for indivisible orders.",
                "Categories and Subject Descriptors J.4 [Computer Applications]: Social and Behavioral Sciences-Economics General Terms Economics, Theory 1.",
                "INTRODUCTION Buying or selling a financial security in effect is a wager on the securitys value.",
                "For example, buying a stock is a bet that the stocks value is greater than its current price.",
                "Each trader evaluates his expected profit to decide the quantity to buy or sell according to his own information and subjective probability assessment.",
                "The collective interaction of all bets leads to an equilibrium that reflects an aggregation of all the traders information and beliefs.",
                "In practice, this aggregate market assessment of the securitys value is often more accurate than other forecasts relying on experts, polls, or statistical inference [16, 17, 5, 2, 15].",
                "Consider buying a security at price fifty-two cents, that pays $1 if and only if a Democrat wins the 2008 US Presidential election.",
                "The transaction is a commitment to accept a fifty-two cent loss if a Democrat does not win in return for a forty-eight cent profit if a Democrat does win.",
                "In this case of an event-contingent security, the price-the markets value of the security-corresponds directly to the estimated probability of the event.",
                "Almost all existing financial and betting exchanges pair up bilateral trading partners.",
                "For example, one trader willing to accept an x dollar loss if a Democrat does not win in return for a y dollar profit if a Democrat wins is matched up with a second trader willing to accept the opposite.",
                "However in many scenarios, even if no bilateral agreements exist among traders, multilateral agreements may be possible.",
                "For example, if one trader bets that the Democratic candidate will receive more votes than the Republican candidate, a second trader bets that the Republican candidate will receive more votes than the Libertarian candidate, and a third trader bets that the Libertarian candidate will receive more votes than the Democratic candidate, then, depending on the odds they each offer, there may be a three-way agreeable match even though no two-way matches exist.",
                "We propose an exchange where traders have considerable flexibility to naturally and succinctly express their wagers, 326 and examine the <br>computational complexity</br> of the auctioneers resulting matching problem of identifying bilateral and multilateral agreements.",
                "In particular, we focus on a setting where traders bet on the outcome of a competition among n candidates.",
                "For example, suppose that there are n candidates in an election (or n horses in a race, etc.) and thus n! possible orderings of candidates after the final vote tally.",
                "Traders may like to bet on arbitrary properties of the final ordering, for example candidate D will win, candidate D will finish in either first place or last place, candidate D will defeat candidate R, candidates D and R will both defeat candidate L, etc.",
                "The goal of the exchange is to search among all the offers to find two or more that together form an agreeable match.",
                "As we shall see, the matching problem can be set up as a linear or integer program, depending on whether orders are divisible or indivisible, respectively.",
                "Attempting to reduce the problem to a bilateral matching problem by explicitly creating n! securities, one for each possible final ordering, is both cumbersome for the traders and computationally infeasible even for modest sized n. Moreover, traders attention would be spread among n! independent choices, making the likelihood of two traders converging at the same time and place seem remote.",
                "There is a tradeoff between the expressiveness of the bidding language and the <br>computational complexity</br> of the matching problem.",
                "We want to offer traders the most expressive bidding language possible while maintaining computational feasibility.",
                "We explore two bidding languages that seem natural from a trader perspective.",
                "Subset betting, described in Section 3.2, allows traders to bet on which positions in the ranking a candidate will fall, for example candidate D will finish in position 1, 3-5, or 10.",
                "Symetrically, traders can also bet on which candidates will fall in a particular position.",
                "In Section 4, we derive a polynomial-time algorithm for matching (divisible) subset bets.",
                "The key to the result is showing that the exponentially big linear program has a corresponding separation problem that reduces to maximum weighted bipartite matching and consequently we can solve it in time polynomial in the number of orders.",
                "Pair betting, described in Section 3.3, allows traders to bet on the final ranking of any two candidates, for example candidate D will defeat candidate R. In Section 5, we show that optimal matching of (divisible or indivisible) pair bets is NP-hard, via a reduction from the unweighted minimum feedback arc set problem.",
                "We also provide a polynomiallyverifiable sufficient condition for the existence of a pairbetting match and show that a greedy algorithm offers poor approximation for indivisible pair bets. 2.",
                "BACKGROUND AND RELATED WORK We consider permutation betting, or betting on the outcome of a competition among n candidates.",
                "The final outcome or state s ∈ S is an ordinal ranking of the n candidates.",
                "For example, the candidates could be horses in a race and the outcome the list of horses in increasing order of their finishing times.",
                "The state space S contains all n! mutually exclusive and exhaustive permutations of candidates.",
                "In a typical horse race, people bet on properties of the outcome like horse A will win, horse A will show, or finish in either first or second place, or horses A and B will finish in first and second place, respectively.",
                "In practice at the racetrack, each of these different types of bets are processed in separate pools or groups.",
                "In other words, all the win bets are processed together, and all the show bets are processed together, but the two types of bets do not mix.",
                "This separation can hurt liquidity and information aggregation.",
                "For example, even though horse A is heavily favored to win, that may not directly boost the horses odds to show.",
                "Instead, we describe a central exchange where all bets on the outcome are processed together, thus aggregating liquidity and ensuring that informational inference happens automatically.",
                "Ideally, wed like to allow traders to bet on any property of the final ordering they like, stated in exactly the language they prefer.",
                "In practice, allowing too flexible a language creates a computational burden for the auctioneer attempting to match willing traders.",
                "We explore the tradeoff between the expressiveness of the bidding language and the <br>computational complexity</br> of the matching problem.",
                "We consider a framework where people propose to buy securities that pay $1 if and only if some property of the final ordering is true.",
                "Traders state the price they are willing to pay per share and the number of shares they would like to purchase. (Sell orders may not be explicitly needed, since buying the negation of an event is equivalent to selling the event.)",
                "A divisible order permits the trader to receive fewer shares than requested, as long as the price constraint is met; an indivisible order is an all-or-nothing order.",
                "The description of bets in terms of prices and shares is without loss of generality: we can also allow bets to be described in terms of odds, payoff vectors, or any of the diverse array of approaches practiced in financial and gambling circles.",
                "In principle, we can do everything we want by explicitly offering n! securities, one for every state s ∈ S (or in fact any set of n! linearly independent securities).",
                "This is the so-called complete Arrow-Debreu securities market [1] for our setting.",
                "In practice, traders do not want to deal with low-level specification of complete orderings: people think more naturally in terms of high-level properties of orderings.",
                "Moreover, operating n! securities is infeasible in practice from a computational point of view as n grows.",
                "A very simple bidding language might allow traders to bet only on who wins the competition, as is done in the win pool at racetracks.",
                "The corresponding matching problem is polynomial, however the language is not very expressive.",
                "A trader who believes that A will defeat B, but that neither will win outright cannot usefully impart his information to the market.",
                "The price space of the market reveals the collective estimates of win probabilities but nothing else.",
                "Our goal is to find languages that are as expressive and intuitive as possible and reveal as much information as possible, while maintaining computational feasibility.",
                "Our work is in direct analogy to work by Fortnow et. al. [6].",
                "Whereas we explore permutation combinatorics, Fortnow et. al. explore Boolean combinatorics.",
                "The authors consider a state space of the 2n possible outcomes of n binary variables.",
                "Traders express bets in Boolean logic.",
                "The authors show that divisible matching is co-NP-complete and indivisible matching is Σp 2-complete.",
                "Hanson [9] describes a market scoring rule mechanism which can allow betting on combinatorial number of outcomes.",
                "The market starts with a joint probability distribution across all outcomes.",
                "It works like a sequential version of a scoring rule.",
                "Any trader can change the probability distribution as long as he agrees to pay the most recent trader 327 according to the scoring rule.",
                "The market maker pays the last trader.",
                "Hence, he bears risk and may incur loss.",
                "Market scoring rule mechanisms have a nice property that the worst-case loss of the market maker is bounded.",
                "However, the computational aspects on how to operate the mechanism have not been fully explored.",
                "Our mechanisms have an auctioneer who does not bear any risk and only matches orders.",
                "Research on bidding languages and winner determination in combinatorial auctions [4, 14, 18] considers similar computational challenges in finding an allocation of items to bidders that maximizes the auctioneers revenue.",
                "Combinatorial auctions allow bidders to place distinct values on bundles of goods rather than just on individual goods.",
                "Uncertainty and risk are typically not considered and the central auctioneer problem is to maximize social welfare.",
                "Our mechanisms allow traders to construct bets for an event with n! outcomes.",
                "Uncertainty and risk are considered and the auctioneer problem is to explore arbitrage opportunities and risklessly match up wagers. 3.",
                "PERMUTATION BETTING In this section, we define the matching and optimal matching problems that an auctioneer needs to solve in a general permutation betting market.",
                "We then illustrate the problem definitions in the context of the subset-betting and pairbetting markets. 3.1 Securities, Orders and Matching Problems Consider an event with n competing candidates where the outcome (state) is a ranking of the n candidates.",
                "The bidding language of a market offering securities in the future outcomes determines the type and number of securities available and directly affects what information can be aggregated about the outcome.",
                "A fully expressive bidding language can capture any possible information that traders may have about the final ranking; a less expressive language limits the type of information that can be aggregated though it may enable a more efficient solution to the matching problem.",
                "For any bidding language and number of securities in a permutation betting market, we can succinctly represent the problem of the auctioneer to risklessly match offers as follows.",
                "Consider an index set of bets or orders O which traders submit to the auctioneer.",
                "Each order i ∈ O is a triple (bi, qi, φi), where bi denotes how much the trader is willing to pay for a unit share of security φi and qi is the number of shares of the security he wants to purchase at price bi.",
                "Naturally, bi ∈ (0, 1) since a unit of the security pays off at most $1 when the event is realized.",
                "Since order i is defined for a single security φi, we will omit the security variable whenever it is clear from the context.",
                "The auctioneer can accept or reject each order, or in a divisible world accept a fraction of the order.",
                "Let xi be the fraction of order i ∈ O accepted.",
                "In the indivisible version of the market xi = 0 or 1 while in the divisible version xi ∈ [0, 1].",
                "Further let Ii(s) be the indicator variable for whether order i is winning in state s, that is Ii(s) = 1 if the order is paid back $1 in state s and Ii(s) = 0 otherwise.",
                "There are two possible problems that the auctioneer may want to solve.",
                "The simpler one is to find a subset of orders that can be matched risk-free, namely a subset of orders which accepted together give a nonnegative profit to the auctioneer in every possible outcome.",
                "We call this problem the existence of a match or sometimes simply, the matching problem.",
                "The more complex problem is for the auctioneer to find the optimal match with respect to some criterion such as profit, trading volume, etc.",
                "Definition 1 (Existence of match, indivisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ {0, 1}, i ∈ O, with at least one xi = 1 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (1) Similarly we can define the existence of a match with divisible orders.",
                "Definition 2 (Existence of match, divisible orders).",
                "Given a set of orders O, does there exist a set of xi ∈ [0, 1], i ∈ O, with at least one xi > 0 such that i (bi − Ii(s))qixi ≥ 0, ∀s ∈ S? (2) The existence of a match is a decision problem.",
                "It only returns whether trade can occur at no risk to the auctioneer.",
                "In addition to the risk-free requirement, the auctioneer can optimize some criterion in determining the orders to accept.",
                "Some reasonable objectives include maximizing the total trading volume in the market or the worst-case profit of the auctioneer.",
                "The following optimal matching problems are defined for an auctioneer who maximizes his worst-case profit.",
                "Definition 3 (Optimal match, indivisible orders).",
                "Given a set of orders O, choose xi ∈ {0, 1} such that the following mixed integer programming problem achieves its optimality max xi,c c (3) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S xi ∈ {0, 1}, ∀i ∈ O.",
                "Definition 4 (Optimal match, divisible orders).",
                "Given a set of orders O, choose xi ∈ [0, 1] such that the following linear programming problem achieves its optimality max xi,c c (4) s.t. i bi − Ii(s) qixi ≥ c, ∀s ∈ S 0 ≤ xi ≤ 1, ∀i ∈ O.",
                "The variable c is the worst-case profit for the auctioneer.",
                "Note that, strictly speaking, the optimal matching problems do not require to solve the optimization problems (3) and (4), because only the optimal set of orders are needed.",
                "The optimal worst-case profit may remain unknown. 3.2 Subset Betting A subset betting market allows two different types of bets.",
                "Traders can bet on a subset of positions a candidate may end up at, or they can bet on a subset of candidates that will occupy a particular position.",
                "A security α|Φ where Φ is a subset of positions pays off $1 if candidate α stands at a position that is an element of Φ and it pays $0 otherwise.",
                "For example, security α|{2, 4} pays $1 when candidate α 328 is ranked second or fourth.",
                "Similarly, a security Ψ|j where Ψ is a subset of candidates pays off $1 if any of the candidates in the set Ψ ranks at position j.",
                "For instance, security {α, γ}|2 pays off $1 when either candidate α or candidate γ is ranked second.",
                "The auctioneer in a subset betting market faces a nontrivial matching problem, that is to determine which orders to accept among all submitted orders i ∈ O.",
                "Note that although there are only n candidates and n possible positions, the number of available securities to bet on is exponential since a trader may bet on any of the 2n subsets of candidates or positions.",
                "With this, it is not immediately clear whether one can even find a trading partner or a match for trade to occur, or that the auctioneer can solve the matching problem in polynomial time.",
                "In the next section, we will show that somewhat surprisingly there is an elegant polynomial solution to both the matching and optimal matching problems, based on classic combinatorial problems.",
                "When an order is accepted, the corresponding trader pays the submitted order price bi to the auctioneer and the auctioneer pays the winning orders $1 per share after the outcome is revealed.",
                "The auctioneer has to carefully choose which orders and what fractions of them to accept so as to be guaranteed a nonnegative profit in any future state.",
                "The following example illustrates the matching problem for indivisible orders in the subset-betting market.",
                "Example 1.",
                "Suppose n = 3.",
                "Objects α, β, and γ compete for positions 1, 2, and 3 in a competition.",
                "The auctioneer receives the following 4 orders: (1) buy 1 share α|{1} at price $0.6; (2) buy 1 share β|{1, 2} at price $0.7; (3) buy 1 share γ|{1, 3} at price $0.8; and (4) buy 1 share β|{3} at price $0.7.",
                "There are 6 possible states of ordering: αβγ, αγβ, βαγ, βγα, γαβ,and γβα.",
                "The corresponding statedependent profit of the auctioneer for each order can be calculated as the following vectors, c1 = (−0.4, −0.4, 0.6, 0.6, 0.6, 0.6) c2 = (−0.3, 0.7, −0.3, −0.3, 0.7, −0.3) c3 = (−0.2, 0.8, −0.2, 0.8, −0.2, −0.2) c4 = ( 0.7, −0.3, 0.7, 0.7, −0.3, 0.7). 6 columns correspond to the 6 future states.",
                "For indivisible orders, the auctioneer can either accept orders (2) and (4) and obtain profit vector c = (0.4, 0.4, 0.4, 0.4, 0.4, 0.4), or accept orders (2), (3), and (4) and has profit across state c = (0.2, 1.2, 0.2, 1.2, 0.2, 0.2). 3.3 Pair Betting A pair betting market allows traders to bet on whether one candidate will rank higher than another candidate, in an outcome which is a permutation of n candidates.",
                "A security α > β pays off $ 1 if candidate α is ranked higher than candidate β and $ 0 otherwise.",
                "There are a total of N(N −1) different securities offered in the market, each corresponding to an ordered pair of candidates.",
                "Traders place orders of the form buy qi shares of α > β at price per share no greater than bi. bi in general should be between 0 and 1.",
                "Again the order can be either indivisible or divisible and the auctioneer needs to decide what fraction xi of each order to accept so as not to incur any loss, with A B C D E F .99 .99 .5 .5 .5 .99 .99 .99 .99 Figure 1: Every cycle has negative worst-case profit of −0.02 (for the cycles of length 4) or less (for the cycles of length 6), however accepting all edges in full gives a positive worst-case profit of 0.44. xi ∈ {0, 1} for indivisible and xi ∈ [0, 1] for divisible orders.",
                "The same definitions for existence of a match and optimal match from Section 3.1 apply.",
                "The orders in the pair-betting market have a natural interpretation as a graph, where the candidates are nodes in the graph and each order which ranks a pair of candidates α > β is represented by a directed edge e = (α, β) with price be and weight qe.",
                "With this interpretation, it is tempting to assume that a necessary condition for a match is to have a cycle in the graph with a nonnegative worst-case profit.",
                "Assuming qe = 1 for all e, this is a cycle C with a total of |C| edges such that the worst-case profit for the auctioneer is e∈C be − (|C| − 1) ≥ 0, since in the worst-case state the auctioneer needs to pay $,1 to every order in the cycle except one.",
                "However, the example in Figure 1 shows that this is not the case: we may have a set of orders in which every single cycle has a negative worst-case profit, and yet there is a positive worstcase match overall.",
                "The edge labels in the figure are the prices be; both the optimal divisible and indivisible solution in this case accept all orders in full, xe = 1. 4.",
                "COMPLEXITY OF SUBSET BETTING The matching problems of the auctioneer in any permutation market, including the subset betting market have n! constraints.",
                "Brute-force methods would take exponential time to solve.",
                "However, given the special form of the securities in the subset betting market, we can show that the matching problems for divisible orders can be solved in polynomial time.",
                "Theorem 1.",
                "The existence of a match and the optimal match problems with divisible orders in a subset betting market can both be solved in polynomial time. 329 Proof.",
                "Consider the linear programming problem (4) for finding an optimal match.",
                "This linear program has |O| + 1 variables, one variable xi for each order i and the profit variable c. It also has exponentially many constraints.",
                "However, we can solve the program in time polynomial in the number of orders |O| by using the ellipsoid algorithm, as long as we can efficiently solve its corresponding separation problem in polynomial time [7, 8].",
                "The separation problem for a linear program takes as input a vector of variable values and returns if the vector is feasible, or otherwise it returns a violated constraint.",
                "For given values of the variables, a violated constraint in Eq. (4) asks whether there is a state or permutation s in which the profit is less than c, and can be rewritten as i Ii(s)qixi < i biqixi − c ∀s ∈ S. (5) Thus it suffices to show how to find efficiently a state s satisfying the above inequality (5) or verify that the opposite inequality holds for all states s. We will show that the separation problem can be reduced to the maximum weighted bipartite matching1 problem [3].",
                "The left hand side in Eq. (5) is the total money that the auctioneer needs to pay back to the winning traders in state s. The first term on the right hand side is the total money collected by the auctioneer and it is fixed for a given solution vector of xis and c. A weighted bipartite graph can be constructed between the set of candidates and the set of positions.",
                "For every order of the form α|Φ there are edges from candidate node α to every position node in Φ.",
                "For orders of the form Ψ|j there are edges from each candidate in Ψ to position j.",
                "For each order i we put weight qixi on each of these edges.",
                "All multi-edges with the same end points are then replaced with a single edge that carries the total weight of the multi-edge.",
                "Every state s then corresponds to a perfect matching in the bipartite graph.",
                "In addition, the auctioneer pays out to the winners the sum of all edge weights in the perfect matching since every candidate can only stand in one position and every position is taken by one candidate.",
                "Thus, the auctioneers worst-cast state and payment are the solution to the maximum weighted bipartite matching problem, which has known polynomial-time algorithms [12, 13].",
                "Hence, the separation problem can be solved in polynomial time.",
                "Naturally, if the optimal solution to (4) gives a worst-case profit of c∗ > 0, there exists a matching.",
                "Thus, the matching problem can be solved in polynomial time also. 5.",
                "COMPLEXITY OF PAIR BETTING In this section we show that a slight change of the bidding language may bring about a dramatic change in the complexity of the optimal matching problem of the auctioneer.",
                "In particular, we show that finding the optimal match in the pair betting market is NP-hard for both divisible and indivisible orders.",
                "We then identify a polynomially-verifiable sufficient condition for deciding the existence of a match.",
                "The hardness results are surprising especially in light of the observation that a pair betting market has a seemingly more restrictive bidding language which only offers n(n−1) 1 The notion of perfect matching in a bipartite graph, which we use only in this proof, should not be confused with the notion of matching bets which we use throughout the paper. securities.",
                "In contrast, the subset betting market enables traders to bet on an exponential number of securities and yet had a polynomial time solution for finding the optimal match.",
                "Our hope is that the comparison of the complexities of the subset and pair betting markets would offer insight into what makes a bidding language expressive while at the same time enabling an efficient matching solution.",
                "In all analysis that follows, we assume that traders submit unit orders in pair betting markets, that is qi = 1.",
                "A set of orders O received by the auctioneer in a pair betting market with unit orders can be represented by a directed graph, G(V, E), where the vertex set V contains candidates that traders bet on.",
                "An edge e ∈ E, denoted (α, β, be), represents an order to buy 1 share of the security α > β at price be.",
                "All edges have equal weight of 1.",
                "We adopt the following notations throughout the paper: • G(V, E): original equally weighted directed graph for the set of unit orders O. • be: price of the order for edge e. • G∗ (V ∗ , E∗ ); a weighted directed graph of accepted orders for optimal matching, where edge weight xe is the quantity of order e accepted by the auctioneer. xe = 1 for indivisible orders and 0 < xe ≤ 1 for divisible orders. • H(V, E): a generic weighted directed graph of accepted orders. • k(H): solution to the unweighted minimum feedback arc set problem on graph H. k(H) is the minimum number of edges to remove so that H becomes acyclic. • l(H): solution to the weighted minimum feedback arc set problem on graph H. l(H) is the minimum total weights for the set of edges which, when removed, leave H acyclic. • c(H): worst-case profit of the auctioneer if he accepts all orders in graph H. • : a sufficiently small positive real number.",
                "Where not stated, < 1/(2|E|) for a graph H(V, E).",
                "In other cases, the value is determined in context.",
                "A feedback arc set of a directed graph is a set of edges which, when removed from the graph, leave a directed acyclic graph (DAG).",
                "Unweighted minimum feedback arc set problem is to find a feedback arc set with the minimum cardinality, while weighted minimum feedback arc set problem seeks to find a feedback arc set with the minimum total edge weight.",
                "Both unweighted and weighted minimum feedback arc set problems have been shown to be NP-complete [10].",
                "We will use this result in our complexity analysis on pair betting markets. 5.1 Optimal Indivisible Matching The auctioneers optimal indivisible matching problem is introduced in Definition 3 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem in a pair betting market as picking a subset of edges to accept such that 330 worst-case profit is maximized in the following optimization problem, max xe,c c (6) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ {0, 1}, ∀e ∈ E. Without lose of generality, we assume that there are no multi-edges in the order graph G. We show that the optimal matching problem for indivisible orders is NP-hard via a reduction from the unweighted minimum feedback arc set problem.",
                "The latter takes as input a directed graph, and asks what is the minimum number of edges to delete from the graph so as to be left with a DAG.",
                "Our hardness proof is based on the following lemmas.",
                "Lemma 2.",
                "Suppose the auctioneer accepts all edges in an equally weighted directed graph H(V, E) with edge price be = (1 − ) and edge weight xe = 1.",
                "Then the worst-case profit is equal to k(H) − |E|, where k(H) is the solution to the unweighted minimum feedback arc problem on H. Proof.",
                "If the order of an edge gets $1 payoff at the end of the market we call the edge a winning edge, otherwise it is called a losing edge.",
                "For any state s, all winning edges necessarily form a DAG.",
                "Conversely, for every DAG there is a state in which the DAG edges are winners (though the remaining edges in G are not necessarily losers).",
                "Suppose that in state s there are ws winning edges and ls = |E| − ws losing edges.",
                "Then, ls is the cardinality of a feedback arc set that consists of all losing edges in state s. The edges that remain after deleting the minimum feedback arc set form the maximum DAG for the graph H. Consider the state smax in which all edges of the maximum DAG are winners.",
                "This gives the maximum number of winning edges wmax.",
                "All other edges are necessarily losers in the state smax, since any edge which is not in the max DAG must form a cycle together with some of the DAG edges.",
                "The number of losing edges in state smax is the cardinality of the minimum feedback arc set of H, that is |E| − wmax = k(H).",
                "The profit of the auctioneer in a state s is profit(s) = e∈E be − w = (1 − )|E| − w ≥ (1 − )|E| − wmax, where equality holds when s = smax.",
                "Thus, the worst-case profit is achieved at state smax, profit(smax) = (|E| − wmax) − |E| = k(H) − |E|.",
                "Consider the graph of accepted orders for optimal matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, that is edges with xe = 1 in the solution of the optimization problem (6).",
                "We have the following lemma.",
                "Lemma 3.",
                "If the edge prices are be = (1− ), then the optimal indivisible solution graph G∗ has the same unweighted minimum feedback arc set size as the graph of all orders G, that is k(G∗ ) = k(G).",
                "Furthermore, G∗ is the smallest such subgraph of G, i.e., it is the subgraph of G with the smallest number of edges, that has the same size of unweighted minimum feedback arc set as G. Proof.",
                "G∗ is a subgraph of G, hence the minimum number of edges to break cycles in G∗ is no more than that in G, namely k(G∗ ) ≤ k(G).",
                "Suppose k(G∗ ) < k(G).",
                "Since both k(G∗ ) and k(G) are integers, for any < 1 |E| we have that k(G∗ ) − |E∗ | < k(G)− |E|.",
                "Hence by Lemma 2, the auctioneer has a higher worst-case profit by accepting G than accepting G∗ , which contradicts the optimality of G∗ .",
                "Finally, the worst-case profit k(G) − |E∗ | is maximized when |E∗ | is minimized.",
                "Hence, G∗ is the smallest subgraph of G such that k(G∗ ) = k(G).",
                "The above two lemmas prove that the maximum worstcase profit in the optimal indivisible matching is directly related to the size of the minimum feedback arc set.",
                "Thus computing each automatically gives the other, hence computing the maximum worst-case profit in the indivisible pair betting problem is NP-hard.",
                "Theorem 4.",
                "Computing the maximum worst-case profit in indivisible pair betting is NP-hard.",
                "Proof.",
                "By Lemma 3, the maximum worst-case profit which is the optimum to the mixed integer programming problem (6), is k(G) − |E∗ |, where |E∗ | is the number of accepted edges.",
                "Since k(G) is integer and |E∗ | ≤ |E| < 1, solving (6) will automatically give us the cardinality of the minimum feedback arc set of G, k(G).",
                "Because the minimum feedback arc set problem is NP-complete [10], computing the maximum worst-case profit is NP-hard.",
                "Theorem 4 states that solving the optimization problem is hard, because even if the optimal set of orders are provided computing the optimal worst-case profit from accepting those orders is NP-hard.",
                "However, it does not imply whether the optimal matching problem, i.e. finding the optimal set of orders to accept, is NP-hard.",
                "It is possible to be able to determine which edges in a graph participating in the optimal match, yet unable to compute the corresponding worst-case profit.",
                "Next, we prove that the indivisible optimal matching problem is actually NP-hard.",
                "We will use the following short fact repeatedly.",
                "Lemma 5 (Edge removal lemma).",
                "Given a weighted graph H(V, E), removing a single edge e with weight xe from the graph decreases the weighted minimum feedback arc set solution l(H) by no more than xe and reduces the unweighted minimum feedback arc set solution k(H) by no more than 1.",
                "Proof.",
                "Suppose the weighted minimum feedback arc set for the graph H − {e} is F. Then F ∪ {e} is a feedback arc set for H, and has total edge weight l(H−{e})+xe.",
                "Because l(H) is the solution to the weighted minimum feedback arc set problem on H, we have l(H) ≤ l(H −{e})+xe, implying that l(H − {e}) ≥ l(H) − xe.",
                "Similarly, suppose the unweighted minimum feedback arc set for the graph H − {e} is F .",
                "Then F ∪ {e} is a feedback arc set for H, and has set cardinality k(H−{e})+1.",
                "Because k(H) is the solution to the unweighted minimum feedback arc set problem on H, we have k(H) ≤ k(H − {e}) + 1, giving that k(H − {e}) ≥ k(H) − 1.",
                "Theorem 6.",
                "Finding the optimal match in indivisible pair betting is NP-hard. 331 Proof.",
                "We reduce from the unweighted minimum feedback arc set problem again, although with a slightly more complex polynomial transformation involving multiple calls to the optimal match oracle.",
                "Consider an instance graph G of the minimum feedback arc set problem.",
                "We are interested in computing k(G), the size of the minimum feedback arc set of G. Suppose we have an oracle which solves the optimal matching problem.",
                "Denote by optimal match(G ) the output of the optimal matching oracle on graph G with prices be = (1− ) on all its edges.",
                "By Lemma 3, on input G , the oracle optimal match returns the subgraph of G with the smallest number of edges, that has the same size of minimum feedback arc set as G .",
                "The following procedure finds k(G) by using polynomially many calls to the optimal match oracle on a sequence of subgraphs of G. set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal match(G ) if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) This procedure removes edges from the original graph G layer by layer until the graph is empty, while at the same time computing the minimum feedback arc set size k(G) of the original graph as the number of iterations.",
                "In each iteration, we start with a graph G and replace it with the smallest subgraph G that has the same k(G ).",
                "At this stage, removing an additional edge e necessarily results in k(G −{e}) = k(G )−1, because k(G −{e}) < k(G ) by the optimality of G , and k(G − {e}) ≥ k(G ) − 1 by the edgeremoval lemma.",
                "Therefore, in each iteration the cardinality of the minimum feedback arc set gets reduced exactly by 1.",
                "Hence the number of iterations is equal to k(G).",
                "Note that this procedure gives a polynomial transformation from the optimal matching problem to the unweighted minimum feedback arc set problem, which calls the optimal matching oracle exactly k(G) ≤ |E| times, where |E| is the number of edges of G. Hence the optimal matching problem is NP-hard. 5.2 Optimal Divisible Matching When orders are divisible, the auctioneers optimal matching problem is described in Definition 4 of Section 3.",
                "Assuming unit orders and considering the order graph G(V, E), we restate the auctioneers optimal matching problem for divisible orders as choosing quantity of orders to accept, xe ∈ [0, 1], such that worst-case profit is maximized in the following linear programming problem, max xe,c c (7) s.t. e be − Ie(s) xe ≥ c, ∀s ∈ S xe ∈ [0, 1], ∀e ∈ E. We still assume that there are no multi-edges in the order graph G. When orders are divisible, the auctioneer can be better off by accepting partial orders.",
                "Example 2 shows a situation when accepting partial orders generates higher worst-case profit than the optimal indivisible solution.",
                "Example 2.",
                "We show that the linear program (7) sometimes has a non-integer optimal solution.",
                "A B C D E F b b b b b b b b b Figure 2: An order graph.",
                "Letters on edges represent order prices.",
                "Consider the graph in Figure 2.",
                "There are a total of five cycles in the graph: three four-edge cycles ABCD, ABEF, CDEF, and two six-edge cycles ABCDEF and ABEFCD.",
                "Suppose each edge has price b such that 4b − 3 > 0 and 6b − 5 < 0, namely b ∈ (.75, .80), for example b = .78.",
                "With this, the optimal indivisible solution consists of at most one four-edge cycle, with worst case profit (4b−3).",
                "On the other hand, taking 1 2 fraction of each of the three four-edge cycles would yield higher worst-case profit of 3 2 (4b − 3).",
                "Despite the potential profit increase for accepting divisible orders, the auctioneers optimal matching problem remains to be NP-hard for divisible orders, which is presented below via several lemmas and theorems.",
                "Lemma 7.",
                "Suppose the auctioneer accept orders described by a weighted directed graph H(V, E) with edge weight xe to be the quantity accepted for edge order e. The worst-case profit for the auctioneer is c(H) = e∈E (be − 1)xe + l(H). (8) Proof.",
                "For any state s, the winning edges form a DAG.",
                "Thus, the worst-case profit for the auctioneer achieves at the state(s) when the total quantity of losing orders is minimized.",
                "The minimum total quantity of losing orders is the solution to weighted minimal feedback arc set problem on H, that is l(H).",
                "Consider the graph of accepted orders for optimal divisible matching, G∗ (V ∗ , E∗ ), which consists of the optimal subset of edges E∗ to be accepted by the auctioneer, with edge weight xe > 0 getting from the optimal solution of the linear program (7).",
                "We have the following lemmas. 332 Lemma 8. l(G∗ ) ≤ k(G∗ ) ≤ k(G).",
                "Proof. l(G∗ ) is the solution of the weighted minimum feedback arc set problem on G∗ , while k(G∗ ) is the solution of the unweighted minimum feedback arc set problem on G∗ .",
                "When all edge weights in G∗ are 1, l(G∗ ) = k(G∗ ).",
                "When xes are less than 1, l(G∗ ) can be less than or equal to k(G∗ ).",
                "Since G∗ is a subgraph of G but possibly with different edge weights, k(G∗ ) ≤ k(G).",
                "Hence, we have the above relation.",
                "Lemma 9.",
                "There exists some such that when all edge prices bes are (1 − ), l(G∗ ) = k(G).",
                "Proof.",
                "From lemma 8, l(G∗ ) ≤ k(G).",
                "We know that the auctioneers worst-case profit when accepting G∗ is c(G∗ ) = e∈E∗ (be − 1)xe + l(G∗ ) = l(G∗ ) − e∈E∗ xe.",
                "When he accepts the original order graph G in full, his worstcase profit is c(G) = e∈E (be − 1) + k(G) = k(G) − |E|.",
                "Suppose l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe = 0, it means that G∗ is G. Hence, l(G∗ ) = k(G) regardless of , which contradicts with the assumption l(G∗ ) < k(G).",
                "If |E| − e∈E∗ xe > 0, then when < k(G) − l(G∗ ) |E| − e∈E∗ xe , c(G) is strictly greater than c(G∗ ), contradicting with the optimality of c(G∗ ).",
                "Because xes are less than 1, l(G∗ ) > k(G) is impossible.",
                "Thus, l(G∗ ) = k(G).",
                "Theorem 10.",
                "Finding the optimal worst-case profit in divisible pair betting is NP-hard.",
                "Proof.",
                "Given the optimal set of partial orders to accept for G when edge weights are (1 − ), if we can calculate the optimal worst-case profit, by lemma 9 we can solve the unweighted minimum feedback arc set problem on G, which is NP-hard.",
                "Hence, finding the optimal worst-case profit is NP-hard.",
                "Theorem 10 states that solving the linear program (7) is NP-hard.",
                "Similarly to the indivisible case, we still need to prove that just finding the optimal divisible match is hard, as opposed to being able to compute the optimal worstcase profit.",
                "Since in the divisible case the edges do not necessarily have unit weights, the proof in Theorem 6 does not apply directly.",
                "However, with an additional property of the divisible case, we can augment the procedure from the indivisible hardness proof to compute the unweighted minimum feedback arc set size k(G) here as well.",
                "First, note that the optimal divisible subgraph G∗ of a graph G is the weighted subgraph with minimum weighted feedback arc set size l(G∗ ) = k(G) and smallest sum of edge weights e∈E∗ xe, since its corresponding worst case profit is k(G) − e∈E∗ xe according to lemmas 7 and 9.",
                "Lemma 11.",
                "Suppose graph H satisfies l(H) = k(H) and we remove edge e from it with weight xe < 1.",
                "Then, k(H − {e}) = k(H).",
                "Proof.",
                "Assume the contrary, namely k(H−{e}) < k(H).",
                "Then by Lemma 5, k(H − {e}) = k(H) − 1.",
                "Since removing a single edge cannot reduce the minimum feedback arc set by more than the edge weight, l(H) − xe ≤ l(H − {e}). (9) On the other hand H − {e} ⊂ H so we have, l(H − {e}) ≤ k(H − {e}) = k(H) − 1 = l(H) − 1. (10) Combining (9) and (10), we get xe ≥ 1.",
                "The contradiction arises.",
                "Therefore, removing any edge with less than unit weight from an optimal divisible graph does not change k(H), the minimal feedback arc set size of the unweighted version of the graph.",
                "We now can augment the procedure for the indivisible case in Theorem 6, to prove hardness of the divisible version, as follows.",
                "Theorem 12.",
                "Finding the optimal match in divisible pair betting is NP-hard.",
                "Proof.",
                "We reduce from the unweighted minimum feedback arc set problem for graph G. Suppose we have an oracle for the optimal divisible problem called optimal divisible match, which on input graph H computes edge weights xe ∈ (0, 1] for the optimal subgraph H∗ of H, satisfying l(H∗ ) = k(H).",
                "The following procedure outputs k(G). set G := G iterations := 0 while (G has nonempty edge set) reset G := optimal divisible match(G ) while (G has edges with weight < 1) remove an edge with weight < 1 from G reset G by setting all edge weights to 1 reset G := optimal divisible match(G ) end while if (G has nonempty edge set) increment iterations by 1 reset G by removing any edge e end if end while return (iterations) As in the proof of the corresponding Theorem 6 for the indivisible case, we compute k(G) by iteratively removing edges and recomputing the optimal divisible solution on the remaining subgraph, until all edges are deleted.",
                "In each iteration of the outer while loop, the minimum feedback arc set is reduced by 1, thus the number of iterations is equal to k(G).",
                "It remains to verify that each iteration reduces k(G) by exactly 1.",
                "Starting from a graph at the beginning of an iteration, we compute its optimal divisible subgraph.",
                "We then keep removing one non-unit weight edge at a time and recomputing the optimal divisible subgraph, until the latter contains only edges with unit weight.",
                "By Lemma 11 throughout the iteration so far the minimum feedback arc set of the corresponding unweighted graph remains unchanged.",
                "Once the oracle returns a graph G with unit edge weights, removing any edge would reduce the minimum feedback arc set: otherwise G is not optimal since G − {e} would have 333 the same minimum feedback arc set but smaller total edge weight.",
                "By Lemma 5 removing a single edge cannot reduce the minimum feedback arc set by more than one, thus as all edges have unit weight, k(G ) gets reduced by exactly one. k(G) is equal to the returned value from the procedure.",
                "Hence, the optimal matching problem for divisible orders is NP-hard. 5.3 Existence of a Match Knowing that the optimal matching problem is NP-hard for both indivisible and divisible orders in pair betting, we check whether the auctioneer can identify the existence of a match with ease.",
                "Lemma 13 states a sufficient condition for the matching problem with both indivisible and divisible orders.",
                "Lemma 13.",
                "A sufficient condition for the existence of a match for pair betting is that there exists a cycle C in G such that, e∈C be ≥ |C| − 1, (11) where |C| is the number of edges in the cycle C. Proof.",
                "The left-hand side of the inequality (11) represents the total payment that the auctioneer receives by accepting every unit orders in the cycle C in full.",
                "Because the direction of an edge represents predicted ordering of the two connected nodes in the final ranking, forming a cycle meaning that there is some logical contradiction on the predicted orderings of candidates.",
                "Hence, whichever state is realized, not all of the edges in the cycle can be winning edges.",
                "The worst-case for the auctioneer corresponds to a state where every edge in the cycle gets paid by $ 1 except one, with |C| − 1 be the maximum payment to traders.",
                "Hence, if inequality (11) is satisfied, the auctioneer has non-negative worst-case profit by accepting the orders in the cycle.",
                "It can be shown that identifying such a non-negative worstcase profit cycle in an order graph G can be achieved in polynomial time.",
                "Lemma 14.",
                "It takes polynomial time to find a cycle in an order graph G(V, E) that has the highest worst-case profit, that is max C∈C e∈C be − (|C| − 1) , where C is the set of all cycles in G. Proof.",
                "Because e∈C be − (|C| − 1) = e∈C (be − 1) + 1 = 1 − e∈C (1 − be), finding the cycle that gives the highest worst-case profit in the original order graph G is equivalent to finding the shortest cycle in a converted graph H(V, E), where H is achieved by setting the weight for edge e in G to be (1 − be).",
                "Finding the shortest cycle in graph H can be done within polynomial time by resorting to the shortest path problem.",
                "For any vertex v in V , we consider every neighbor vertex w such that (v, w) ∈ E. We then find the shortest path from w to v, denoted as path(w, v).",
                "The shortest cycle that passes vertex v is found by choosing the w such that e(v,w) + path(w, v) is minimized.",
                "Comparing the shortest cycle found for every vertex, we then can determine the shortest overall cycle for the graph H. Because the short path problem can be solved in polynomial time [3], we can find the solution to our problem in polynomial time.",
                "If the worst-case profit for the optimal cycle is non-negative, we know that there exists a match in G. However, the condition in lemma 13 is not a necessary condition for the existence of a match.",
                "Even if all single cycles in the order graph have negative worst-case profit, the auctioneer may accept multiple interweaving cycles to have positive worstcase profit.",
                "Figure 1 exhibits such a situation.",
                "If the optimal indivisible match consists only of edge disjoint cycles, a natural greedy algorithm can find the cycle that gives the highest worst-case profit, remove its edges from the graph, and proceed until no more cycles exist.",
                "However, we show that such greedy algorithm can give a very poor approximation. √ n + 1 √ n + 1 √ n √ n + 1 √ n + 1 √ n + 1 √ n + 1 Figure 3: Graph with n vertices and n + √ n edges on which the greedy algorithm finds only two cycles, the dotted cycle in the center and the unique remaining cycle.",
                "The labels in the faces give the number of edges in the corresponding cycle.",
                "Lemma 15.",
                "The greedy algorithm gives at most an O( √ n)approximation to the maximum number of disjoint cycles.",
                "Proof.",
                "Consider the graph in Figure 3 consisting of a cycle with √ n edges, each of which participates in another (otherwise disjoint) cycle with √ n + 1 edges.",
                "Suppose all edge weights are (1 − ).",
                "The maximum number of disjoint cycles is clearly √ n, taking all cycles with length √ n + 1.",
                "Because smaller cycles gives higher worst-case profit, the greedy algorithm would first select the cycle of length √ n, after which there would be only one remaining cycle of length n. Thus the total number of cycles selected by greedy is 2 and the approximation factor in this case is √ n/2.",
                "In light of Lemma 15, one may expect that greedy algorithms would give √ n-approximations at best.",
                "Approxima334 tion algorithms for finding the maximum number of edgedisjoint cycles have been considered by Krivelevich, Nutov and Yuster [11, 19].",
                "Indeed, for the case of directed graphs, the authors show that a greedy algorithm gives a√ n-approximation [11].",
                "When the optimal match does not consist of edge-disjoint cycles as in the example of Figure 3, greedy algorithm trying to finding optimal single cycles fails obviously. 6.",
                "CONCLUSION We consider a permutation betting scenario, where traders wager on the final ordering of n candidates.",
                "While it is unnatural and intractable to allow traders to bet directly on the n! different final orderings, we propose two expressive betting languages, subset betting and pair betting.",
                "In a subset betting market, traders can bet either on a subset of positions that a candidate stands or on a subset of candidates who occupy a specific position in the final ordering.",
                "Pair betting allows traders bet on whether one given candidate ranks higher than another given candidate.",
                "We examine the auctioneer problem of matching orders without incurring risk.",
                "We find that in a subset betting market an auctioneer can find the optimal set and quantity of orders to accept such that his worst-case profit is maximized in polynomial time if orders are divisible.",
                "The complexity changes dramatically for pair betting.",
                "We prove that the optimal matching problem for the auctioneer is NP-hard for pair betting with both indivisible and divisible orders via reductions to the minimum feedback arc set problem.",
                "We identify a sufficient condition for the existence of a match, which can be verified in polynomial time.",
                "A natural greedy algorithm has been shown to give poor approximation for indivisible pair betting.",
                "Interesting open questions for our permutation betting include the <br>computational complexity</br> of optimal indivisible matching for subset betting and the necessary condition for the existence of a match in pair betting markets.",
                "We are interested in further exploring better approximation algorithms for pair betting markets. 7.",
                "ACKNOWLEDGMENTS We thank Ravi Kumar, Yishay Mansour, Amin Saberi, Andrew Tomkins, John Tomlin, and members of Yahoo!",
                "Research for valuable insights and discussions. 8.",
                "REFERENCES [1] K. J. Arrow.",
                "The role of securities in the optimal allocation of risk-bearing.",
                "Review of Economic Studies, 31(2):91-96, 1964. [2] J. E. Berg, R. Forsythe, F. D. Nelson, and T. A. Rietz.",
                "Results from a dozen years of election futures markets research.",
                "In C. A. Plott and V. Smith, editors, Handbook of Experimental Economic Results (forthcoming). 2001. [3] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein.",
                "Introduction to Algorithms (Second Edition).",
                "MIT Press and McGraw-Hill, 2001. [4] P. Cramton, Y. Shoham, and R. Steinberg.",
                "Combinatorial Auctions.",
                "MIT Press, Cambridge, MA, 2005. [5] R. Forsythe, T. A. Rietz, and T. W. Ross.",
                "Wishes, expectations, and actions: A survey on price formation in election stock markets.",
                "Journal of Economic Behavior and Organization, 39:83-110, 1999. [6] L. Fortnow, J. Kilian, D. M. Pennock, and M. P. Wellman.",
                "Betting boolean-style: A framework for trading in securities based on logical formulas.",
                "Decision Support Systems, 39(1):87-104, 2004. [7] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "The ellipsoid method and its consequences in combinatorial optimization.",
                "Combinatorica, 1(2):169-197, 1981. [8] M. Gr¨otschel, L. Lov´asz, and A. Schrijver.",
                "Geometric Algorithms and Combinatorial Optimization.",
                "Springer-Verlag, Berlin Heidelberg, 1993. [9] R. D. Hanson.",
                "Combinatorial information market design.",
                "Information Systems Frontiers, 5(1):107-119, 2003. [10] R. M. Karp.",
                "Reducibility among combinatorial problems.",
                "In Complexity of computer computations (Proc.",
                "Sympos., IBM Thomas J. Watson Res.",
                "Center, Yorktown Heights, N.Y.), pages 85-103.",
                "Plenum, New York, 1972. [11] M. Krivelevich, Z. Nutov, and R. Yuster.",
                "Approximation algorithms for cycle packing problems.",
                "Proceedings of the sixteenth annual ACM-SIAM symposium on Discrete algorithms, pages 556-561, 2005. [12] H. W. Kuhn.",
                "The hungarian method for the assignment problem.",
                "Naval Research Logistic Quarterly, 2:83-97, 1955. [13] J. Munkres.",
                "Algorithms for the assignment and transportation problems.",
                "Journal of the Society of Industrial and Applied Mathematics, 5(1):32-38, 1957. [14] N. Nisan.",
                "Bidding and allocation in combinatorial auctions.",
                "In Proceedings of the 2nd ACM Conference on Electronic Commerce (EC00), Minneapolis, MN, 2000. [15] D. M. Pennock, S. Lawrence, C. L. Giles, and F. A. Nielsen.",
                "The real power of artificial markets.",
                "Science, 291:987-988, February 2002. [16] C. Plott and S. Sunder.",
                "Efficiency of experimental security markets with insider information: An application of rational expectations models.",
                "Journal of Political Economy, 90:663-98, 1982. [17] C. Plott and S. Sunder.",
                "Rational expectations and the aggregation of diverse information in laboratory security markets.",
                "Econometrica, 56:1085-1118, 1988. [18] T. Sandholm.",
                "Algorithm for optimal winner determination in combinatorial auctions.",
                "Artificial Intelligence, 135:1-54, 2002. [19] R. Yuster and Z. Nutov.",
                "Packing directed cycles efficiently.",
                "Proceedings of the 29th International Symposium on Mathematical Foundations of Computer Science (MFCS), 2004. 335"
            ],
            "original_annotated_samples": [],
            "translated_annotated_samples": [
                "Proponemos dos idiomas de apuestas expresivos que parecen naturales para los postores, y examinamos la \"complejidad computacional\" del problema del subastador en cada caso.",
                "Proponemos un intercambio en el que los comerciantes tienen una flexibilidad considerable para expresar de forma natural y sucintamente sus apuestas, 326 y examinamos la \"complejidad computacional\" de los subastadores que resulta en el problema correspondiente de identificar acuerdos bilaterales y multilaterales.",
                "Existe una compensación entre la expresividad del lenguaje de licitación y la \"complejidad computacional\" del problema de correspondencia.",
                "Exploramos la compensación entre la expresividad del lenguaje de licitación y la \"complejidad computacional\" del problema de correspondencia.",
                "Las preguntas abiertas interesantes para nuestras apuestas de permutación incluyen la \"complejidad computacional\" de la coincidencia indivisible óptima para las apuestas de subconjunto y la condición necesaria para la existencia de una coincidencia en los mercados de apuestas de parejas."
            ],
            "translated_text": "",
            "candidates": [
                "complejidad computacional",
                "complejidad computacional",
                "complejidad computacional",
                "complejidad computacional",
                "complejidad computacional",
                "complejidad computacional",
                "complejidad computacional",
                "complejidad computacional",
                "complejidad computacional",
                "complejidad computacional"
            ],
            "error": []
        }
    }
}