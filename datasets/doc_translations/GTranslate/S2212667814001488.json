{
    "original_text": "This paper presents general results on the Java source code snippet detection problem. We propose the tool which uses graph and subgraph isomorphism detection. A number of solutions for all of these tasks have been proposed in the literature. However, although that all these solutions are really fast, they compare just the constant static trees. Our solution offers to enter an input sample dynamically with the Scripthon language while preserving an acceptable speed. We used several optimizations to achieve very low number of comparisons during the matching algorithm.",
    "original_translation": "Este documento presenta resultados generales en el problema de detección del fragmento de código fuente Java.Proponemos la herramienta que utiliza la detección de isomorfismo gráfico y subgrafismo.Se han propuesto varias soluciones para todas estas tareas en la literatura.Sin embargo, aunque todas estas soluciones son realmente rápidas, comparan solo los árboles estáticos constantes.Nuestra solución ofrece ingresar una muestra de entrada dinámicamente con el lenguaje de Scripton al tiempo que preserva una velocidad aceptable.Utilizamos varias optimizaciones para lograr un número muy bajo de comparaciones durante el algoritmo coincidente.",
    "error_count": 0,
    "keys": {
        "compare just the constant static trees": {
            "translated_key": "comparan solo los árboles estáticos constantes",
            "translated_annotated_text": "Este documento presenta resultados generales en el problema de detección del fragmento de código fuente Java.Proponemos la herramienta que utiliza la detección de isomorfismo gráfico y subgrafismo.Se han propuesto varias soluciones para todas estas tareas en la literatura.Sin embargo, aunque todas estas soluciones son realmente rápidas, \"comparan solo los árboles estáticos constantes\".Nuestra solución ofrece ingresar una muestra de entrada dinámicamente con el lenguaje de Scripton al tiempo que preserva una velocidad aceptable.Utilizamos varias optimizaciones para lograr un número muy bajo de comparaciones durante el algoritmo coincidente.",
            "error": [
                ""
            ]
        },
        "comparisons": {
            "translated_key": "comparaciones",
            "translated_annotated_text": "Este documento presenta resultados generales en el problema de detección del fragmento de código fuente Java.Proponemos la herramienta que utiliza la detección de isomorfismo gráfico y subgrafismo.Se han propuesto varias soluciones para todas estas tareas en la literatura.Sin embargo, aunque todas estas soluciones son realmente rápidas, comparan solo los árboles estáticos constantes.Nuestra solución ofrece ingresar una muestra de entrada dinámicamente con el lenguaje de Scripton al tiempo que preserva una velocidad aceptable.Utilizamos varias optimizaciones para lograr un número muy bajo de \"comparaciones\" durante el algoritmo coincidente.",
            "error": [
                ""
            ]
        },
        "enter an input sample dynamically": {
            "translated_key": "ingresar una muestra de entrada dinámicamente",
            "translated_annotated_text": "Este documento presenta resultados generales en el problema de detección del fragmento de código fuente Java.Proponemos la herramienta que utiliza la detección de isomorfismo gráfico y subgrafismo.Se han propuesto varias soluciones para todas estas tareas en la literatura.Sin embargo, aunque todas estas soluciones son realmente rápidas, comparan solo los árboles estáticos constantes.Nuestra solución ofrece \"ingresar una muestra de entrada dinámicamente\" con el lenguaje de scripto al tiempo que preserva una velocidad aceptable.Utilizamos varias optimizaciones para lograr un número muy bajo de comparaciones durante el algoritmo coincidente.",
            "error": [
                ""
            ]
        },
        "graph and subgraph isomorphism detection": {
            "translated_key": "detección de isomorfismo de gráficos y subgrafías",
            "translated_annotated_text": "Este documento presenta resultados generales en el problema de detección del fragmento de código fuente Java.Proponemos la herramienta que utiliza \"detección de isomorfismo de gráficos y subgrafías\".Se han propuesto varias soluciones para todas estas tareas en la literatura.Sin embargo, aunque todas estas soluciones son realmente rápidas, comparan solo los árboles estáticos constantes.Nuestra solución ofrece ingresar una muestra de entrada dinámicamente con el lenguaje de Scripton al tiempo que preserva una velocidad aceptable.Utilizamos varias optimizaciones para lograr un número muy bajo de comparaciones durante el algoritmo coincidente.",
            "error": [
                ""
            ]
        },
        "Java source code snippet detection": {
            "translated_key": "Detección de fragmentos de código fuente Java",
            "translated_annotated_text": "Este documento presenta resultados generales en el problema de \"Detección de fragmentos de código fuente Java\".Proponemos la herramienta que utiliza la detección de isomorfismo gráfico y subgrafismo.Se han propuesto varias soluciones para todas estas tareas en la literatura.Sin embargo, aunque todas estas soluciones son realmente rápidas, comparan solo los árboles estáticos constantes.Nuestra solución ofrece ingresar una muestra de entrada dinámicamente con el lenguaje de Scripton al tiempo que preserva una velocidad aceptable.Utilizamos varias optimizaciones para lograr un número muy bajo de comparaciones durante el algoritmo coincidente.",
            "error": [
                ""
            ]
        },
        "matching algorithm": {
            "translated_key": "algoritmo coincidente",
            "translated_annotated_text": "Este documento presenta resultados generales en el problema de detección del fragmento de código fuente Java.Proponemos la herramienta que utiliza la detección de isomorfismo gráfico y subgrafismo.Se han propuesto varias soluciones para todas estas tareas en la literatura.Sin embargo, aunque todas estas soluciones son realmente rápidas, comparan solo los árboles estáticos constantes.Nuestra solución ofrece ingresar una muestra de entrada dinámicamente con el lenguaje de Scripton al tiempo que preserva una velocidad aceptable.Utilizamos varias optimizaciones para lograr un número muy bajo de comparaciones durante el \"algoritmo coincidente\".",
            "error": [
                ""
            ]
        },
        "preserving an acceptable speed": {
            "translated_key": "preservar una velocidad aceptable",
            "translated_annotated_text": "Este documento presenta resultados generales en el problema de detección del fragmento de código fuente Java.Proponemos la herramienta que utiliza la detección de isomorfismo gráfico y subgrafismo.Se han propuesto varias soluciones para todas estas tareas en la literatura.Sin embargo, aunque todas estas soluciones son realmente rápidas, comparan solo los árboles estáticos constantes.Nuestra solución ofrece ingresar una muestra de entrada dinámicamente con el lenguaje de Scripton mientras \"preservar una velocidad aceptable\".Utilizamos varias optimizaciones para lograr un número muy bajo de comparaciones durante el algoritmo coincidente.",
            "error": [
                ""
            ]
        },
        "Scripthon language": {
            "translated_key": "lenguaje de scripto",
            "translated_annotated_text": "Este documento presenta resultados generales en el problema de detección del fragmento de código fuente Java.Proponemos la herramienta que utiliza la detección de isomorfismo gráfico y subgrafismo.Se han propuesto varias soluciones para todas estas tareas en la literatura.Sin embargo, aunque todas estas soluciones son realmente rápidas, comparan solo los árboles estáticos constantes.Nuestra solución ofrece ingresar una muestra de entrada dinámicamente con el \"lenguaje de scripto\" al tiempo que preserva una velocidad aceptable.Utilizamos varias optimizaciones para lograr un número muy bajo de comparaciones durante el algoritmo coincidente.",
            "error": [
                ""
            ]
        },
        "several optimizations": {
            "translated_key": "varias optimizaciones",
            "translated_annotated_text": "Este documento presenta resultados generales en el problema de detección del fragmento de código fuente Java.Proponemos la herramienta que utiliza la detección de isomorfismo gráfico y subgrafismo.Se han propuesto varias soluciones para todas estas tareas en la literatura.Sin embargo, aunque todas estas soluciones son realmente rápidas, comparan solo los árboles estáticos constantes.Nuestra solución ofrece ingresar una muestra de entrada dinámicamente con el lenguaje de Scripton al tiempo que preserva una velocidad aceptable.Utilizamos \"varias optimizaciones\" para lograr un número muy bajo de comparaciones durante el algoritmo coincidente.",
            "error": [
                ""
            ]
        }
    }
}