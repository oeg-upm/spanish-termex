{
    "original_text": "Remote Access to Large Spatial Databases ∗ Egemen Tanin Frantiˇsek Brabec Hanan Samet Computer Science Department Center for Automation Research Institute for Advanced Computer Studies University of Maryland, College Park, MD 20742 {egemen,brabec,hjs}@umiacs.umd.edu www.cs.umd.edu/{~egemen,~brabec,~hjs} ABSTRACT Enterprises in the public and private sectors have been making their large spatial data archives available over the Internet. However, interactive work with such large volumes of online spatial data is a challenging task. We propose two efficient approaches to remote access to large spatial data. First, we introduce a client-server architecture where the work is distributed between the server and the individual clients for spatial query evaluation, data visualization, and data management. We enable the minimization of the requirements for system resources on the client side while maximizing system responsiveness as well as the number of connections one server can handle concurrently. Second, for prolonged periods of access to large online data, we introduce APPOINT (an Approach for Peer-to-Peer Oﬄoading the INTernet). This is a centralized peer-to-peer approach that helps Internet users transfer large volumes of online data efficiently. In APPOINT, active clients of the clientserver architecture act on the servers behalf and communicate with each other to decrease network latency, improve service bandwidth, and resolve server congestions. Categories and Subject Descriptors C.2.4 [Computer-Communication Networks]: Distributed Systems-Client/server, Distributed applications, Distributed databases; H.2.8 [Database Management]: Database Applications-Spatial databases and GIS General Terms Performance, Management 1. INTRODUCTION In recent years, enterprises in the public and private sectors have provided access to large volumes of spatial data over the Internet. Interactive work with such large volumes of online spatial data is a challenging task. We have been developing an interactive browser for accessing spatial online databases: the SAND (Spatial and Non-spatial Data) Internet Browser. Users of this browser can interactively and visually manipulate spatial data remotely. Unfortunately, interactive remote access to spatial data slows to a crawl without proper data access mechanisms. We developed two separate methods for improving the system performance, together, form a dynamic network infrastructure that is highly scalable and provides a satisfactory user experience for interactions with large volumes of online spatial data. The core functionality responsible for the actual database operations is performed by the server-based SAND system. SAND is a spatial database system developed at the University of Maryland [12]. The client-side SAND Internet Browser provides a graphical user interface to the facilities of SAND over the Internet. Users specify queries by choosing the desired selection conditions from a variety of menus and dialog boxes. SAND Internet Browser is Java-based, which makes it deployable across many platforms. In addition, since Java has often been installed on target computers beforehand, our clients can be deployed on these systems with little or no need for any additional software installation or customization. The system can start being utilized immediately without any prior setup which can be extremely beneficial in time-sensitive usage scenarios such as emergencies. There are two ways to deploy SAND. First, any standard Web browser can be used to retrieve and run the client piece (SAND Internet Browser) as a Java application or an applet. This way, users across various platforms can continuously access large spatial data on a remote location with little or 15 no need for any preceding software installation. The second option is to use a stand-alone SAND Internet Browser along with a locally-installed Internet-enabled database management system (server piece). In this case, the SAND Internet Browser can still be utilized to view data from remote locations. However, frequently accessed data can be downloaded to the local database on demand, and subsequently accessed locally. Power users can also upload large volumes of spatial data back to the remote server using this enhanced client. We focused our efforts in two directions. We first aimed at developing a client-server architecture with efficient caching methods to balance local resources on one side and the significant latency of the network connection on the other. The low bandwidth of this connection is the primary concern in both cases. The outcome of this research primarily addresses the issues of our first type of usage (i.e., as a remote browser application or an applet) for our browser and other similar applications. The second direction aims at helping users that wish to manipulate large volumes of online data for prolonged periods. We have developed a centralized peerto-peer approach to provide the users with the ability to transfer large volumes of data (i.e., whole data sets to the local database) more efficiently by better utilizing the distributed network resources among active clients of a clientserver architecture. We call this architecture APPOINTApproach for Peer-to-Peer Oﬄoading the INTernet. The results of this research addresses primarily the issues of the second type of usage for our SAND Internet Browser (i.e., as a stand-alone application). The rest of this paper is organized as follows. Section 2 describes our client-server approach in more detail. Section 3 focuses on APPOINT, our peer-to-peer approach. Section 4 discusses our work in relation to existing work. Section 5 outlines a sample SAND Internet Browser scenario for both of our remote access approaches. Section 6 contains concluding remarks as well as future research directions. 2. THE CLIENT-SERVER APPROACH Traditionally, Geographic Information Systems (GIS) such as ArcInfo from ESRI [2] and many spatial databases are designed to be stand-alone products. The spatial database is kept on the same computer or local area network from where it is visualized and queried. This architecture allows for instantaneous transfer of large amounts of data between the spatial database and the visualization module so that it is perfectly reasonable to use large-bandwidth protocols for communication between them. There are however many applications where a more distributed approach is desirable. In these cases, the database is maintained in one location while users need to work with it from possibly distant sites over the network (e.g., the Internet). These connections can be far slower and less reliable than local area networks and thus it is desirable to limit the data flow between the database (server) and the visualization unit (client) in order to get a timely response from the system. Our client-server approach (Figure 1) allows the actual database engine to be run in a central location maintained by spatial database experts, while end users acquire a Javabased client component that provides them with a gateway into the SAND spatial database engine. Our client is more than a simple image viewer. Instead, it operates on vector data allowing the client to execute many operations such as zooming or locational queries locally. In Figure 1: SAND Internet Browser - Client-Server architecture. essence, a simple spatial database engine is run on the client. This database keeps a copy of a subset of the whole database whose full version is maintained on the server. This is a concept similar to caching. In our case, the client acts as a lightweight server in that given data, it evaluates queries and provides the visualization module with objects to be displayed. It initiates communication with the server only in cases where it does not have enough data stored locally. Since the locally run database is only updated when additional or newer data is needed, our architecture allows the system to minimize the network traffic between the client and the server when executing the most common user-side operations such as zooming and panning. In fact, as long as the user explores one region at a time (i.e., he or she is not panning all over the database), no additional data needs to be retrieved after the initial population of the client-side database. This makes the system much more responsive than the Web mapping services. Due to the complexity of evaluating arbitrary queries (i.e., more complex queries than window queries that are needed for database visualization), we do not perform user-specified queries on the client. All user queries are still evaluated on the server side and the results are downloaded onto the client for display. However, assuming that the queries are selective enough (i.e., there are far fewer elements returned from the query than the number of elements in the database), the response delay is usually within reasonable limits. 2.1 Client-Server Communication As mentioned above, the SAND Internet Browser is a client piece of the remotely accessible spatial database server built around the SAND kernel. In order to communicate with the server, whose application programming interface (API) is a Tcl-based scripting language, a servlet specifically designed to interface the SAND Internet Browser with the SAND kernel is required on the server side. This servlet listens on a given port of the server for incoming requests from the client. It translates these requests into the SAND-Tcl language. Next, it transmits these SAND-Tcl commands or scripts to the SAND kernel. After results are provided by the kernel, the servlet fetches and processes them, and then sends those results back to the originating client. Once the Java servlet is launched, it waits for a client to initiate a connection. It handles both requests for the actual client Java code (needed when the client is run as an applet) and the SAND traffic. When the client piece is launched, it connects back to the SAND servlet, the communication is driven by the client piece; the server only responds to the clients queries. The client initiates a transaction by 6 sending a query. The Java servlet parses the query and creates a corresponding SAND-Tcl expression or script in the SAND kernels native format. It is then sent to the kernel for evaluation or execution. The kernels response naturally depends on the query and can be a boolean value, a number or a string representing a value (e.g., a default color) or, a whole tuple (e.g., in response to a nearest tuple query). If a script was sent to the kernel (e.g., requesting all the tuples matching some criteria), then an arbitrary amount of data can be returned by the SAND server. In this case, the data is first compressed before it is sent over the network to the client. The data stream gets decompressed at the client before the results are parsed. Notice, that if another spatial database was to be used instead of the SAND kernel, then only a simple modification to the servlet would need to be made in order for the SAND Internet Browser to function properly. In particular, the queries sent by the client would need to be recoded into another query language which is native to this different spatial database. The format of the protocol used for communication between the servlet and the client is unaffected. 3. THE PEER-TO-PEER APPROACH Many users may want to work on a complete spatial data set for a prolonged period of time. In this case, making an initial investment of downloading the whole data set may be needed to guarantee a satisfactory session. Unfortunately, spatial data tends to be large. A few download requests to a large data set from a set of idle clients waiting to be served can slow the server to a crawl. This is due to the fact that the common client-server approach to transferring data between the two ends of a connection assumes a designated role for each one of the ends (i.e, some clients and a server). We built APPOINT as a centralized peer-to-peer system to demonstrate our approach for improving the common client-server systems. A server still exists. There is a central source for the data and a decision mechanism for the service. The environment still functions as a client-server environment under many circumstances. Yet, unlike many common client-server environments, APPOINT maintains more information about the clients. This includes, inventories of what each client downloads, their availabilities, etc. When the client-server service starts to perform poorly or a request for a data item comes from a client with a poor connection to the server, APPOINT can start appointing appropriate active clients of the system to serve on behalf of the server, i.e., clients who have already volunteered their services and can take on the role of peers (hence, moving from a client-server scheme to a peer-to-peer scheme). The directory service for the active clients is still performed by the server but the server no longer serves all of the requests. In this scheme, clients are used mainly for the purpose of sharing their networking resources rather than introducing new content and hence they help oﬄoad the server and scale up the service. The existence of a server is simpler in terms of management of dynamic peers in comparison to pure peerto-peer approaches where a flood of messages to discover who is still active in the system should be used by each peer that needs to make a decision. The server is also the main source of data and under regular circumstances it may not forward the service. Data is assumed to be formed of files. A single file forms the atomic means of communication. APPOINT optimizes requests with respect to these atomic requests. Frequently accessed data sets are replicated as a byproduct of having been requested by a large number of users. This opens up the potential for bypassing the server in future downloads for the data by other users as there are now many new points of access to it. Bypassing the server is useful when the servers bandwidth is limited. Existence of a server assures that unpopular data is also available at all times. The service depends on the availability of the server. The server is now more resilient to congestion as the service is more scalable. Backups and other maintenance activities are already being performed on the server and hence no extra administrative effort is needed for the dynamic peers. If a peer goes down, no extra precautions are taken. In fact, APPOINT does not require any additional resources from an already existing client-server environment but, instead, expands its capability. The peers simply get on to or get off from a table on the server. Uploading data is achieved in a similar manner as downloading data. For uploads, the active clients can again be utilized. Users can upload their data to a set of peers other than the server if the server is busy or resides in a distant location. Eventually the data is propagated to the server. All of the operations are performed in a transparent fashion to the clients. Upon initial connection to the server, they can be queried as to whether or not they want to share their idle networking time and disk space. The rest of the operations follow transparently after the initial contact. APPOINT works on the application layer but not on lower layers. This achieves platform independence and easy deployment of the system. APPOINT is not a replacement but an addition to the current client-server architectures. We developed a library of function calls that when placed in a client-server architecture starts the service. We are developing advanced peer selection schemes that incorporate the location of active clients, bandwidth among active clients, data-size to be transferred, load on active clients, and availability of active clients to form a complete means of selecting the best clients that can become efficient alternatives to the server. With APPOINT we are defining a very simple API that could be used within an existing client-server system easily. Instead of denial of service or a slow connection, this API can be utilized to forward the service appropriately. The API for the server side is: start(serverPortNo) makeFileAvailable(file,location,boolean) callback receivedFile(file,location) callback errorReceivingFile(file,location,error) stop() Similarly the API for the client side is: start(clientPortNo,serverPortNo,serverAddress) makeFileAvailable(file,location,boolean) receiveFile(file,location) sendFile(file,location) stop() The server, after starting the APPOINT service, can make all of the data files available to the clients by using the makeFileAvailable method. This will enable APPOINT to treat the server as one of the peers. The two callback methods of the server are invoked when a file is received from a client, or when an error is encountered while receiving a file from a client. APPOINT guar7 Figure 2: The localization operation in APPOINT. antees that at least one of the callbacks will be called so that the user (who may not be online anymore) can always be notified (i.e., via email). Clients localizing large data files can make these files available to the public by using the makeFileAvailable method on the client side. For example, in our SAND Internet Browser, we have the localization of spatial data as a function that can be chosen from our menus. This functionality enables users to download data sets completely to their local disks before starting their queries or analysis. In our implementation, we have calls to the APPOINT service both on the client and the server sides as mentioned above. Hence, when a localization request comes to the SAND Internet Browser, the browser leaves the decisions to optimally find and localize a data set to the APPOINT service. Our server also makes its data files available over APPOINT. The mechanism for the localization operation is shown with more details from the APPOINT protocols in Figure 2. The upload operation is performed in a similar fashion. 4. RELATED WORK There has been a substantial amount of research on remote access to spatial data. One specific approach has been adopted by numerous Web-based mapping services (MapQuest [5], MapsOnUs [6], etc.). The goal in this approach is to enable remote users, typically only equipped with standard Web browsers, to access the companys spatial database server and retrieve information in the form of pictorial maps from them. The solution presented by most of these vendors is based on performing all the calculations on the server side and transferring only bitmaps that represent results of user queries and commands. Although the advantage of this solution is the minimization of both hardware and software resources on the client site, the resulting product has severe limitations in terms of available functionality and response time (each user action results in a new bitmap being transferred to the client). Work described in [9] examines a client-server architecture for viewing large images that operates over a lowbandwidth network connection. It presents a technique based on wavelet transformations that allows the minimization of the amount of data needed to be transferred over the network between the server and the client. In this case, while the server holds the full representation of the large image, only a limited amount of data needs to be transferred to the client to enable it to display a currently requested view into the image. On the client side, the image is reconstructed into a pyramid representation to speed up zooming and panning operations. Both the client and the server keep a common mask that indicates what parts of the image are available on the client and what needs to be requested. This also allows dropping unnecessary parts of the image from the main memory on the server. Other related work has been reported in [16] where a client-server architecture is described that is designed to provide end users with access to a server. It is assumed that this data server manages vast databases that are impractical to be stored on individual clients. This work blends raster data management (stored in pyramids [22]) with vector data stored in quadtrees [19, 20]. For our peer-to-peer transfer approach (APPOINT), Napster is the forefather where a directory service is centralized on a server and users exchange music files that they have stored on their local disks. Our application domain, where the data is already freely available to the public, forms a prime candidate for such a peer-to-peer approach. Gnutella is a pure (decentralized) peer-to-peer file exchange system. Unfortunately, it suffers from scalability issues, i.e., floods of messages between peers in order to map connectivity in the system are required. Other systems followed these popular systems, each addressing a different flavor of sharing over the Internet. Many peer-to-peer storage systems have also recently emerged. PAST [18], Eternity Service [7], CFS [10], and OceanStore [15] are some peer-to-peer storage systems. Some of these systems have focused on anonymity while others have focused on persistence of storage. Also, other approaches, like SETI@Home [21], made other resources, such as idle CPUs, work together over the Internet to solve large scale computational problems. Our goal is different than these approaches. With APPOINT, we want to improve existing client-server systems in terms of performance by using idle networking resources among active clients. Hence, other issues like anonymity, decentralization, and persistence of storage were less important in our decisions. Confirming the authenticity of the indirectly delivered data sets is not yet addressed with APPOINT. We want to expand our research, in the future, to address this issue. From our perspective, although APPOINT employs some of the techniques used in peer-to-peer systems, it is also closely related to current Web caching architectures. Squirrel [13] forms the middle ground. It creates a pure peer-topeer collaborative Web cache among the Web browser caches of the machines in a local-area network. Except for this recent peer-to-peer approach, Web caching is mostly a wellstudied topic in the realm of server/proxy level caching [8, 11, 14, 17]. Collaborative Web caching systems, the most relevant of these for our research, focus on creating either a hierarchical, hash-based, central directory-based, or multicast-based caching schemes. We do not compete with these approaches. In fact, APPOINT can work in tandem with collaborative Web caching if they are deployed together. We try to address the situation where a request arrives at a server, meaning all the caches report a miss. Hence, the point where the server is reached can be used to take a central decision but then the actual service request can be forwarded to a set of active clients, i.e., the down8 load and upload operations. Cache misses are especially common in the type of large data-based services on which we are working. Most of the Web caching schemes that are in use today employ a replacement policy that gives a priority to replacing the largest sized items over smaller-sized ones. Hence, these policies would lead to the immediate replacement of our relatively large data files even though they may be used frequently. In addition, in our case, the user community that accesses a certain data file may also be very dispersed from a network point of view and thus cannot take advantage of any of the caching schemes. Finally, none of the Web caching methods address the symmetric issue of large data uploads. 5. A SAMPLE APPLICATION FedStats [1] is an online source that enables ordinary citizens access to official statistics of numerous federal agencies without knowing in advance which agency produced them. We are using a FedStats data set as a testbed for our work. Our goal is to provide more power to the users of FedStats by utilizing the SAND Internet Browser. As an example, we looked at two data files corresponding to Environmental Protection Agency (EPA)-regulated facilities that have chlorine and arsenic, respectively. For each file, we had the following information available: EPA-ID, name, street, city, state, zip code, latitude, longitude, followed by flags to indicate if that facility is in the following EPA programs: Hazardous Waste, Wastewater Discharge, Air Emissions, Abandoned Toxic Waste Dump, and Active Toxic Release. We put this data into a SAND relation where the spatial attribute location corresponds to the latitude and longitude. Some queries that can be handled with our system on this data include: 1. Find all EPA-regulated facilities that have arsenic and participate in the Air Emissions program, and: (a) Lie in Georgia to Illinois, alphabetically. (b) Lie within Arkansas or 30 miles within its border. (c) Lie within 30 miles of the border of Arkansas (i.e., both sides of the border). 2. For each EPA-regulated facility that has arsenic, find all EPA-regulated facilities that have chlorine and: (a) That are closer to it than to any other EPAregulated facility that has arsenic. (b) That participate in the Air Emissions program and are closer to it than to any other EPAregulated facility which has arsenic. In order to avoid reporting a particular facility more than once, we use our group by EPA-ID mechanism. Figure 3 illustrates the output of an example query that finds all arsenic sites within a given distance of the border of Arkansas. The sites are obtained in an incremental manner with respect to a given point. This ordering is shown by using different color shades. With this example data, it is possible to work with the SAND Internet Browser online as an applet (connecting to a remote server) or after localizing the data and then opening it locally. In the first case, for each action taken, the client-server architecture will decide what to ask for from the server. In the latter case, the browser will use the peerto-peer APPOINT architecture for first localizing the data. 6. CONCLUDING REMARKS An overview of our efforts in providing remote access to large spatial data has been given. We have outlined our approaches and introduced their individual elements. Our client-server approach improves the system performance by using efficient caching methods when a remote server is accessed from thin-clients. APPOINT forms an alternative approach that improves performance under an existing clientserver system by using idle client resources when individual users want work on a data set for longer periods of time using their client computers. For the future, we envision development of new efficient algorithms that will support large online data transfers within our peer-to-peer approach using multiple peers simultaneously. We assume that a peer (client) can become unavailable at any anytime and hence provisions need to be in place to handle such a situation. To address this, we will augment our methods to include efficient dynamic updates. Upon completion of this step of our work, we also plan to run comprehensive performance studies on our methods. Another issue is how to access data from different sources in different formats. In order to access multiple data sources in real time, it is desirable to look for a mechanism that would support data exchange by design. The XML protocol [3] has emerged to become virtually a standard for describing and communicating arbitrary data. GML [4] is an XML variant that is becoming increasingly popular for exchange of geographical data. We are currently working on making SAND XML-compatible so that the user can instantly retrieve spatial data provided by various agencies in the GML format via their Web services and then explore, query, or process this data further within the SAND framework. This will turn the SAND system into a universal tool for accessing any spatial data set as it will be deployable on most platforms, work efficiently given large amounts of data, be able to tap any GML-enabled data source, and provide an easy to use graphical user interface. This will also convert the SAND system from a research-oriented prototype into a product that could be used by end users for accessing, viewing, and analyzing their data efficiently and with minimum effort. 7. REFERENCES [1] Fedstats: The gateway to statistics from over 100 U.S. federal agencies. http://www.fedstats.gov/, 2001. [2] Arcinfo: Scalable system of software for geographic data creation, management, integration, analysis, and dissemination. http://www.esri.com/software/ arcgis/arcinfo/index.html, 2002. [3] Extensible markup language (xml). http://www.w3.org/XML/, 2002. [4] Geography markup language (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Consumer-focused interactive mapping site on the web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite of online geographic services. http://www.mapsonus.com, 2002. [7] R. Anderson. The Eternity Service. In Proceedings of the PRAGOCRYPT96, pages 242-252, Prague, Czech Republic, September 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips, and S. Shenker. Web caching and Zipf-like distributions: 9 Figure 3: Sample output from the SAND Internet Browser - Large dark dots indicate the result of a query that looks for all arsenic sites within a given distance from Arkansas. Different color shades are used to indicate ranking order by the distance from a given point. Evidence and implications. In Proceedings of the IEEE Infocom99, pages 126-134, New York, NY, March 1999. [9] E. Chang, C. Yap, and T. Yen. Realtime visualization of large images over a thinwire. In R. Yagel and H. Hagen, editors, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), pages 45-48, Phoenix, AZ, October 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris, and I. Stoica. Wide-area cooperative storage with CFS. In Proceedings of the ACM SOSP01, pages 202-215, Banff, AL, October 2001. [11] A. Dingle and T. Partl. Web cache coherence. Computer Networks and ISDN Systems, 28(7-11):907-920, May 1996. [12] C. Esperan¸ca and H. Samet. Experience with SAND/Tcl: a scripting tool for spatial databases. Journal of Visual Languages and Computing, 13(2):229-255, April 2002. [13] S. Iyer, A. Rowstron, and P. Druschel. Squirrel: A decentralized peer-to-peer Web cache. Rice University/Microsoft Research, submitted for publication, 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins, and Y. Yerushalmi. Web caching with consistent hashing. Computer Networks, 31(11-16):1203-1213, May 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, and B. Zhao. OceanStore: An architecture for global-scale persistent store. In Proceedings of the ACM ASPLOS00, pages 190-201, Cambridge, MA, November 2000. [16] M. Potmesil. Maps alive: viewing geospatial information on the WWW. Computer Networks and ISDN Systems, 29(8-13):1327-1342, September 1997. Also Hyper Proceedings of the 6th International World Wide Web Conference, Santa Clara, CA, April 1997. [17] M. Rabinovich, J. Chase, and S. Gadde. Not all hits are created equal: Cooperative proxy caching over a wide-area network. Computer Networks and ISDN Systems, 30(22-23):2253-2259, November 1998. [18] A. Rowstron and P. Druschel. Storage management and caching in PAST, a large-scale, persistent peer-to-peer storage utility. In Proceedings of the ACM SOSP01, pages 160-173, Banff, AL, October 2001. [19] H. Samet. Applications of Spatial Data Structures: Computer Graphics, Image Processing, and GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. The Design and Analysis of Spatial Data Structures. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Pyramidal parametrics. Computer Graphics, 17(3):1-11, July 1983. Also Proceedings of the SIGGRAPH83 Conference, Detroit, July 1983. 10",
    "original_translation": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el acceso remoto a grandes datos espaciales. En primer lugar, introducimos una arquitectura cliente-servidor donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Este es un enfoque centralizado entre pares que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el acceso remoto interactivo a los datos espaciales disminuye a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una arquitectura cliente-servidor con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque entre pares. En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de acceso remoto. En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado entre pares para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema de pares). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una arquitectura cliente-servidor inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad considerable de investigaciones sobre el acceso remoto a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura cliente-servidor para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una arquitectura cliente-servidor que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia entre pares (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicaciones, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque entre pares. Gnutella es un sistema de intercambio de archivos entre pares puro (descentralizado). Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. También han surgido recientemente muchos sistemas de almacenamiento entre pares. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en sistemas entre pares, también está estrechamente relacionada con las arquitecturas de almacenamiento en caché web actuales. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque entre pares, el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción realizada, la arquitectura cliente-servidor decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar acceso remoto a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado entre pares. Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento a gran escala y persistente entre pares. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10",
    "error_count": 9,
    "keys": {
        "remote access": {
            "translated_key": "acceso remoto",
            "translated_annotated_text": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el \"acceso remoto\" a los grandes datos espaciales. En primer lugar, introducimos una arquitectura cliente-servidor donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Este es un enfoque centralizado entre pares que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el \"acceso remoto\" interactivo a los datos espaciales se desacelera a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una arquitectura cliente-servidor con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque entre pares. En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de \"acceso remoto\". En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado entre pares para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema de pares). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una arquitectura cliente-servidor inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad sustancial de investigación sobre el \"acceso remoto\" a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura cliente-servidor para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una arquitectura cliente-servidor que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia entre pares (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicaciones, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque entre pares. Gnutella es un sistema de intercambio de archivos entre pares puro (descentralizado). Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. También han surgido recientemente muchos sistemas de almacenamiento entre pares. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en sistemas entre pares, también está estrechamente relacionada con las arquitecturas de almacenamiento en caché web actuales. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque entre pares, el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción realizada, la arquitectura cliente-servidor decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar \"acceso remoto\" a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado entre pares. Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento a gran escala y persistente entre pares. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10 ",
            "error": [
                ""
            ]
        },
        "large spatial datum": {
            "translated_key": [],
            "translated_annotated_text": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el acceso remoto a grandes datos espaciales. En primer lugar, introducimos una arquitectura cliente-servidor donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Este es un enfoque centralizado entre pares que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el acceso remoto interactivo a los datos espaciales disminuye a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una arquitectura cliente-servidor con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque entre pares. En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de acceso remoto. En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado entre pares para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema de pares). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una arquitectura cliente-servidor inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad considerable de investigaciones sobre el acceso remoto a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura cliente-servidor para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una arquitectura cliente-servidor que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia entre pares (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicaciones, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque entre pares. Gnutella es un sistema de intercambio de archivos entre pares puro (descentralizado). Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. También han surgido recientemente muchos sistemas de almacenamiento entre pares. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en sistemas entre pares, también está estrechamente relacionada con las arquitecturas de almacenamiento en caché web actuales. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque entre pares, el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción realizada, la arquitectura cliente-servidor decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar acceso remoto a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado entre pares. Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento a gran escala y persistente entre pares. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10 ",
            "error": []
        },
        "client-server architecture": {
            "translated_key": "arquitectura cliente-servidor",
            "translated_annotated_text": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el acceso remoto a grandes datos espaciales. En primer lugar, introducimos una \"arquitectura cliente-servidor\" donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Este es un enfoque centralizado entre pares que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el acceso remoto interactivo a los datos espaciales disminuye a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una \"arquitectura cliente-servidor\" con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión a la red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque entre pares. En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de acceso remoto. En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado entre pares para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema de pares). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una \"arquitectura cliente-servidor\" inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad considerable de investigaciones sobre el acceso remoto a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una \"arquitectura cliente-servidor\" para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una \"arquitectura cliente-servidor\" que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia entre pares (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicaciones, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque entre pares. Gnutella es un sistema de intercambio de archivos entre pares puro (descentralizado). Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. También han surgido recientemente muchos sistemas de almacenamiento entre pares. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en sistemas entre pares, también está estrechamente relacionada con las arquitecturas de almacenamiento en caché web actuales. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque entre pares, el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción tomada, la \"arquitectura cliente-servidor\" decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar acceso remoto a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado entre pares. Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento a gran escala y persistente entre pares. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10 ",
            "error": [
                ""
            ]
        },
        "spatial query evaluation": {
            "translated_key": "evaluación de consultas espaciales",
            "translated_annotated_text": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el acceso remoto a grandes datos espaciales. En primer lugar, introducimos una arquitectura cliente-servidor donde el trabajo se distribuye entre el servidor y los clientes individuales para \"evaluación de consultas espaciales\", visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Este es un enfoque centralizado entre pares que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el acceso remoto interactivo a los datos espaciales disminuye a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una arquitectura cliente-servidor con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque entre pares. En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de acceso remoto. En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado entre pares para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema de pares). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una arquitectura cliente-servidor inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad considerable de investigaciones sobre el acceso remoto a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura cliente-servidor para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una arquitectura cliente-servidor que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia entre pares (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicaciones, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque entre pares. Gnutella es un sistema de intercambio de archivos entre pares puro (descentralizado). Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. También han surgido recientemente muchos sistemas de almacenamiento entre pares. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en sistemas entre pares, también está estrechamente relacionada con las arquitecturas de almacenamiento en caché web actuales. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque entre pares, el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción realizada, la arquitectura cliente-servidor decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar acceso remoto a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado entre pares. Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento a gran escala y persistente entre pares. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10 ",
            "error": [
                ""
            ]
        },
        "datum visualization": {
            "translated_key": [],
            "translated_annotated_text": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el acceso remoto a grandes datos espaciales. En primer lugar, introducimos una arquitectura cliente-servidor donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Este es un enfoque centralizado entre pares que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el acceso remoto interactivo a los datos espaciales disminuye a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una arquitectura cliente-servidor con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque entre pares. En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de acceso remoto. En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado entre pares para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema de pares). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una arquitectura cliente-servidor inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad considerable de investigaciones sobre el acceso remoto a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura cliente-servidor para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una arquitectura cliente-servidor que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia entre pares (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicaciones, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque entre pares. Gnutella es un sistema de intercambio de archivos entre pares puro (descentralizado). Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. También han surgido recientemente muchos sistemas de almacenamiento entre pares. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en sistemas entre pares, también está estrechamente relacionada con las arquitecturas de almacenamiento en caché web actuales. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque entre pares, el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción realizada, la arquitectura cliente-servidor decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar acceso remoto a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado entre pares. Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento a gran escala y persistente entre pares. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10 ",
            "error": []
        },
        "datum management": {
            "translated_key": [],
            "translated_annotated_text": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el acceso remoto a grandes datos espaciales. En primer lugar, introducimos una arquitectura cliente-servidor donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Este es un enfoque centralizado entre pares que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el acceso remoto interactivo a los datos espaciales disminuye a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una arquitectura cliente-servidor con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque entre pares. En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de acceso remoto. En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado entre pares para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema de pares). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una arquitectura cliente-servidor inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad considerable de investigaciones sobre el acceso remoto a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura cliente-servidor para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una arquitectura cliente-servidor que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia entre pares (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicaciones, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque entre pares. Gnutella es un sistema de intercambio de archivos entre pares puro (descentralizado). Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. También han surgido recientemente muchos sistemas de almacenamiento entre pares. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en sistemas entre pares, también está estrechamente relacionada con las arquitecturas de almacenamiento en caché web actuales. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque entre pares, el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción realizada, la arquitectura cliente-servidor decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar acceso remoto a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado entre pares. Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento a gran escala y persistente entre pares. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10 ",
            "error": []
        },
        "centralized peer-to-peer approach": {
            "translated_key": "enfoque centralizado entre pares",
            "translated_annotated_text": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el acceso remoto a grandes datos espaciales. En primer lugar, introducimos una arquitectura cliente-servidor donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Se trata de un \"enfoque centralizado entre pares\" que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el acceso remoto interactivo a los datos espaciales disminuye a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una arquitectura cliente-servidor con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque entre pares. En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de acceso remoto. En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado entre pares para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema de pares). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una arquitectura cliente-servidor inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad considerable de investigaciones sobre el acceso remoto a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura cliente-servidor para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una arquitectura cliente-servidor que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia entre pares (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicaciones, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque entre pares. Gnutella es un sistema de intercambio de archivos entre pares puro (descentralizado). Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. También han surgido recientemente muchos sistemas de almacenamiento entre pares. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en sistemas entre pares, también está estrechamente relacionada con las arquitecturas de almacenamiento en caché web actuales. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque entre pares, el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción realizada, la arquitectura cliente-servidor decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar acceso remoto a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado entre pares. Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento a gran escala y persistente entre pares. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10 ",
            "error": [
                ""
            ]
        },
        "network latency": {
            "translated_key": "latencia de la red",
            "translated_annotated_text": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el acceso remoto a grandes datos espaciales. En primer lugar, introducimos una arquitectura cliente-servidor donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Este es un enfoque centralizado entre pares que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la \"latencia de la red\", mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el acceso remoto interactivo a los datos espaciales disminuye a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una arquitectura cliente-servidor con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque entre pares. En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de acceso remoto. En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado entre pares para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema de pares). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una arquitectura cliente-servidor inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad considerable de investigaciones sobre el acceso remoto a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura cliente-servidor para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una arquitectura cliente-servidor que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia entre pares (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicaciones, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque entre pares. Gnutella es un sistema de intercambio de archivos entre pares puro (descentralizado). Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. También han surgido recientemente muchos sistemas de almacenamiento entre pares. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en sistemas entre pares, también está estrechamente relacionada con las arquitecturas de almacenamiento en caché web actuales. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque entre pares, el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción realizada, la arquitectura cliente-servidor decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar acceso remoto a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado entre pares. Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento a gran escala y persistente entre pares. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10 ",
            "error": [
                ""
            ]
        },
        "sand": {
            "translated_key": [],
            "translated_annotated_text": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el acceso remoto a grandes datos espaciales. En primer lugar, introducimos una arquitectura cliente-servidor donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Este es un enfoque centralizado entre pares que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el acceso remoto interactivo a los datos espaciales disminuye a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una arquitectura cliente-servidor con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque entre pares. En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de acceso remoto. En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado entre pares para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema de pares). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una arquitectura cliente-servidor inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad considerable de investigaciones sobre el acceso remoto a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura cliente-servidor para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una arquitectura cliente-servidor que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia entre pares (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicaciones, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque entre pares. Gnutella es un sistema de intercambio de archivos entre pares puro (descentralizado). Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. También han surgido recientemente muchos sistemas de almacenamiento entre pares. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en sistemas entre pares, también está estrechamente relacionada con las arquitecturas de almacenamiento en caché web actuales. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque entre pares, el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción realizada, la arquitectura cliente-servidor decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar acceso remoto a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado entre pares. Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento a gran escala y persistente entre pares. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10 ",
            "error": []
        },
        "dynamic network infrastructure": {
            "translated_key": "infraestructura de red dinámica",
            "translated_annotated_text": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el acceso remoto a grandes datos espaciales. En primer lugar, introducimos una arquitectura cliente-servidor donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Este es un enfoque centralizado entre pares que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el acceso remoto interactivo a los datos espaciales disminuye a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una \"infraestructura de red dinámica\" que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una arquitectura cliente-servidor con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque entre pares. En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de acceso remoto. En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado entre pares para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema de pares). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una arquitectura cliente-servidor inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad considerable de investigaciones sobre el acceso remoto a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura cliente-servidor para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una arquitectura cliente-servidor que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia entre pares (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicaciones, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque entre pares. Gnutella es un sistema de intercambio de archivos entre pares puro (descentralizado). Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. También han surgido recientemente muchos sistemas de almacenamiento entre pares. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en sistemas entre pares, también está estrechamente relacionada con las arquitecturas de almacenamiento en caché web actuales. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque entre pares, el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción realizada, la arquitectura cliente-servidor decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar acceso remoto a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado entre pares. Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento a gran escala y persistente entre pares. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10 ",
            "error": [
                ""
            ]
        },
        "web browser": {
            "translated_key": [],
            "translated_annotated_text": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el acceso remoto a grandes datos espaciales. En primer lugar, introducimos una arquitectura cliente-servidor donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Este es un enfoque centralizado entre pares que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el acceso remoto interactivo a los datos espaciales disminuye a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una arquitectura cliente-servidor con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque entre pares. En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de acceso remoto. En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado entre pares para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema de pares). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una arquitectura cliente-servidor inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad considerable de investigaciones sobre el acceso remoto a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura cliente-servidor para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una arquitectura cliente-servidor que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia entre pares (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicaciones, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque entre pares. Gnutella es un sistema de intercambio de archivos entre pares puro (descentralizado). Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. También han surgido recientemente muchos sistemas de almacenamiento entre pares. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en sistemas entre pares, también está estrechamente relacionada con las arquitecturas de almacenamiento en caché web actuales. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque entre pares, el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción realizada, la arquitectura cliente-servidor decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar acceso remoto a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado entre pares. Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento a gran escala y persistente entre pares. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10 ",
            "error": []
        },
        "internet-enabled database management system": {
            "translated_key": [],
            "translated_annotated_text": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el acceso remoto a grandes datos espaciales. En primer lugar, introducimos una arquitectura cliente-servidor donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Este es un enfoque centralizado entre pares que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el acceso remoto interactivo a los datos espaciales disminuye a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una arquitectura cliente-servidor con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque entre pares. En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de acceso remoto. En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado entre pares para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema de pares). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una arquitectura cliente-servidor inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad considerable de investigaciones sobre el acceso remoto a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura cliente-servidor para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una arquitectura cliente-servidor que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia entre pares (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicaciones, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque entre pares. Gnutella es un sistema de intercambio de archivos entre pares puro (descentralizado). Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. También han surgido recientemente muchos sistemas de almacenamiento entre pares. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en sistemas entre pares, también está estrechamente relacionada con las arquitecturas de almacenamiento en caché web actuales. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque entre pares, el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción realizada, la arquitectura cliente-servidor decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar acceso remoto a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado entre pares. Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento a gran escala y persistente entre pares. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10 ",
            "error": []
        },
        "gi": {
            "translated_key": [],
            "translated_annotated_text": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el acceso remoto a grandes datos espaciales. En primer lugar, introducimos una arquitectura cliente-servidor donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Este es un enfoque centralizado entre pares que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el acceso remoto interactivo a los datos espaciales disminuye a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una arquitectura cliente-servidor con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque entre pares. En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de acceso remoto. En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado entre pares para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema de pares). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una arquitectura cliente-servidor inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad considerable de investigaciones sobre el acceso remoto a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura cliente-servidor para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una arquitectura cliente-servidor que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia entre pares (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicaciones, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque entre pares. Gnutella es un sistema de intercambio de archivos entre pares puro (descentralizado). Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. También han surgido recientemente muchos sistemas de almacenamiento entre pares. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en sistemas entre pares, también está estrechamente relacionada con las arquitecturas de almacenamiento en caché web actuales. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque entre pares, el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción realizada, la arquitectura cliente-servidor decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar acceso remoto a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado entre pares. Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento a gran escala y persistente entre pares. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10 ",
            "error": []
        },
        "internet": {
            "translated_key": [],
            "translated_annotated_text": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el acceso remoto a grandes datos espaciales. En primer lugar, introducimos una arquitectura cliente-servidor donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Este es un enfoque centralizado entre pares que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el acceso remoto interactivo a los datos espaciales disminuye a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una arquitectura cliente-servidor con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque entre pares. En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de acceso remoto. En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado entre pares para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema de pares). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una arquitectura cliente-servidor inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad considerable de investigaciones sobre el acceso remoto a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura cliente-servidor para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una arquitectura cliente-servidor que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia entre pares (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicaciones, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque entre pares. Gnutella es un sistema de intercambio de archivos entre pares puro (descentralizado). Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. También han surgido recientemente muchos sistemas de almacenamiento entre pares. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en sistemas entre pares, también está estrechamente relacionada con las arquitecturas de almacenamiento en caché web actuales. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque entre pares, el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción realizada, la arquitectura cliente-servidor decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar acceso remoto a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado entre pares. Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento a gran escala y persistente entre pares. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10 ",
            "error": []
        },
        "client/server": {
            "translated_key": [],
            "translated_annotated_text": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el acceso remoto a grandes datos espaciales. En primer lugar, introducimos una arquitectura cliente-servidor donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Este es un enfoque centralizado entre pares que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el acceso remoto interactivo a los datos espaciales disminuye a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una arquitectura cliente-servidor con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque entre pares. En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de acceso remoto. En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado entre pares para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema de pares). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una arquitectura cliente-servidor inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad considerable de investigaciones sobre el acceso remoto a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura cliente-servidor para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una arquitectura cliente-servidor que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia entre pares (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicaciones, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque entre pares. Gnutella es un sistema de intercambio de archivos entre pares puro (descentralizado). Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. También han surgido recientemente muchos sistemas de almacenamiento entre pares. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento entre pares. Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en sistemas entre pares, también está estrechamente relacionada con las arquitecturas de almacenamiento en caché web actuales. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque entre pares, el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción realizada, la arquitectura cliente-servidor decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar acceso remoto a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque entre pares utilizando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado entre pares. Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento a gran escala y persistente entre pares. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10 ",
            "error": []
        },
        "peer-to-peer": {
            "translated_key": "peer-to-peer",
            "translated_annotated_text": "Acceso remoto a grandes bases de datos espaciales ∗ Egemen Tanin Frantičsek Brabec Hanan Samet Centro del Departamento de Ciencias Informáticas del Instituto de Investigación de Automatización para Estudios Avanzados de Computación de la Universidad de Maryland, College Park, MD 20742 {egemen,brabec,hjsumiacs.umd.edu www.cs.umd.edu/egem Sin embargo, el trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Proponemos dos enfoques eficientes para el acceso remoto a grandes datos espaciales. En primer lugar, introducimos una arquitectura cliente-servidor donde el trabajo se distribuye entre el servidor y los clientes individuales para la evaluación de consultas espaciales, visualización de datos y gestión de datos. Habilitamos la minimización de los requisitos para los recursos del sistema en el lado del cliente, al tiempo que maximizamos la capacidad de respuesta del sistema, así como el número de conexiones que un servidor puede manejar simultáneamente. En segundo lugar, durante períodos prolongados de acceso a grandes datos en línea, introducimos APPOINT (un enfoque para descargar de pares a pares la red INTERNET). Este es un enfoque centralizado \"peer-to-peer\" que ayuda a los usuarios de Internet a transferir grandes volúmenes de datos en línea de manera eficiente. En APPOINT, los clientes activos de la arquitectura clientserver actúan en nombre de los servidores y se comunican entre sí para disminuir la latencia de la red, mejorar el ancho de banda del servicio y resolver congestiones del servidor. Categorías y Descriptores de Temas C.2.4 [Redes de Computer-Communication]: Sistemas distribuidos-Cliente/servidor, Aplicaciones distribuidas, Bases de datos distribuidas; H.2.8 [Gestión de bases de datos]: Bases de datos-Base de datos-Base de datos espaciales y GIS Términos generales Desempeño, Gestión 1. INTRODUCCIÓN En los últimos años, las empresas de los sectores público y privado han proporcionado acceso a grandes volúmenes de datos espaciales a través de Internet. El trabajo interactivo con grandes volúmenes de datos espaciales en línea es una tarea difícil. Hemos estado desarrollando un navegador interactivo para acceder a bases de datos espaciales en línea: el navegador de Internet SAND (Datos espaciales y no espaciales). Los usuarios de este navegador pueden manipular los datos espaciales de forma interactiva y visual a distancia. Desafortunadamente, el acceso remoto interactivo a los datos espaciales disminuye a un rastreo sin mecanismos adecuados de acceso a los datos. Desarrollamos dos métodos separados para mejorar el rendimiento del sistema, juntos, formando una infraestructura de red dinámica que es altamente escalable y proporciona una experiencia de usuario satisfactoria para interacciones con grandes volúmenes de datos espaciales en línea. La funcionalidad principal responsable de las operaciones reales de la base de datos es realizada por el sistema SAND basado en el servidor. SAND es un sistema de bases de datos espaciales desarrollado en la Universidad de Maryland [12]. El navegador de Internet SAND del lado del cliente proporciona una interfaz gráfica de usuario a las instalaciones de SAND a través de Internet. Los usuarios especifican las consultas eligiendo las condiciones de selección deseadas de una variedad de menús y cuadros de diálogo. SAND Internet Browser está basado en Java, lo que hace que se pueda implementar en muchas plataformas. Además, dado que Java se ha instalado a menudo en ordenadores de destino de antemano, nuestros clientes pueden ser implementados en estos sistemas con poca o ninguna necesidad de instalación de software adicional o personalización. El sistema puede comenzar a ser utilizado inmediatamente sin ninguna configuración previa que puede ser extremadamente beneficioso en escenarios de uso sensibles al tiempo, como emergencias. Hay dos maneras de desplegar el SAND. En primer lugar, cualquier navegador web estándar se puede utilizar para recuperar y ejecutar la pieza del cliente (SAND Internet Browser) como una aplicación Java o un applet. De esta manera, los usuarios de varias plataformas pueden acceder continuamente a grandes datos espaciales en una ubicación remota con poca o 15 ninguna necesidad de cualquier instalación de software anterior. La segunda opción es utilizar un navegador de Internet SAND independiente junto con un sistema de gestión de bases de datos instalado localmente en Internet (servidor). En este caso, el navegador de Internet SAND todavía se puede utilizar para ver datos desde ubicaciones remotas. Sin embargo, los datos a los que se accede con frecuencia pueden descargarse en la base de datos local a petición y, posteriormente, accederse localmente. Los usuarios de energía también pueden subir grandes volúmenes de datos espaciales al servidor remoto utilizando este cliente mejorado. Centramos nuestros esfuerzos en dos direcciones. Primero nos propusimos desarrollar una arquitectura cliente-servidor con métodos de caché eficientes para equilibrar los recursos locales por un lado y la importante latencia de la conexión de red por el otro. El bajo ancho de banda de esta conexión es la principal preocupación en ambos casos. El resultado de esta investigación aborda principalmente los problemas de nuestro primer tipo de uso (es decir, como una aplicación de navegador remoto o un applet) para nuestro navegador y otras aplicaciones similares. La segunda dirección tiene por objeto ayudar a los usuarios que deseen manipular grandes volúmenes de datos en línea durante períodos prolongados. Hemos desarrollado un enfoque de pares centralizado para proporcionar a los usuarios la capacidad de transferir grandes volúmenes de datos (es decir, conjuntos de datos completos a la base de datos local) de manera más eficiente mediante una mejor utilización de los recursos de red distribuidos entre los clientes activos de una arquitectura de customerver. Llamamos a esta arquitectura APPOINTApproach para la descarga de Peer-to-Peer. Los resultados de esta investigación abordan principalmente los problemas del segundo tipo de uso para nuestro navegador de Internet SAND (es decir, como una aplicación independiente). El resto de este documento está organizado de la siguiente manera. La sección 2 describe nuestro enfoque cliente-servidor con más detalle. La sección 3 se centra en APPOINT, nuestro enfoque \"peer-to-peer\". En la sección 4 se examina nuestra labor en relación con la labor existente. En la sección 5 se esboza un ejemplo de escenario de navegador de Internet SAND para ambos de nuestros enfoques de acceso remoto. En la sección 6 figuran las observaciones finales y las futuras orientaciones de la investigación. 2. Tradicionalmente, los sistemas de información geográfica (SIG) como ArcInfo de ESRI [2] y muchas bases de datos espaciales están diseñados para ser productos independientes. La base de datos espacial se mantiene en la misma computadora o red de área local desde donde se visualiza y se pregunta. Esta arquitectura permite la transferencia instantánea de grandes cantidades de datos entre la base de datos espacial y el módulo de visualización para que sea perfectamente razonable utilizar protocolos de ancho de banda grande para la comunicación entre ellos. Sin embargo, hay muchas aplicaciones en las que es deseable un enfoque más distribuido. En estos casos, la base de datos se mantiene en un solo lugar, mientras que los usuarios necesitan trabajar con ella desde sitios posiblemente distantes a través de la red (por ejemplo, Internet). Estas conexiones pueden ser mucho más lentas y menos fiables que las redes de área local y por lo tanto es deseable limitar el flujo de datos entre la base de datos (servidor) y la unidad de visualización (cliente) para obtener una respuesta oportuna del sistema. Nuestro enfoque cliente-servidor (Figura 1) permite que el motor de base de datos real se ejecute en una ubicación central mantenida por expertos en bases de datos espaciales, mientras que los usuarios finales adquieren un componente cliente basado en Java que les proporciona una puerta de enlace en el motor de base de datos espaciales SAND. Nuestro cliente es más que un simple visor de imágenes. En su lugar, opera con datos vectoriales que permiten al cliente ejecutar muchas operaciones como zoom o consultas de localización localmente. En la Figura 1: Navegador de Internet SAND - Arquitectura cliente-servidor. esencia, un simple motor de base de datos espacial se ejecuta en el cliente. Esta base de datos mantiene una copia de un subconjunto de toda la base de datos cuya versión completa se mantiene en el servidor. Este es un concepto similar al caché. En nuestro caso, el cliente actúa como un servidor ligero en los datos dados, evalúa consultas y proporciona el módulo de visualización con objetos a mostrar. Inicia la comunicación con el servidor sólo en los casos en que no tiene suficientes datos almacenados localmente. Dado que la base de datos de ejecución local sólo se actualiza cuando se necesitan datos adicionales o más recientes, nuestra arquitectura permite al sistema minimizar el tráfico de red entre el cliente y el servidor al ejecutar las operaciones más comunes del lado del usuario, tales como zoom y panning. De hecho, siempre y cuando el usuario explore una región a la vez (es decir, no esté recorriendo toda la base de datos), no es necesario recuperar datos adicionales después de la población inicial de la base de datos del lado del cliente. Esto hace que el sistema sea mucho más sensible que los servicios de mapeo web. Debido a la complejidad de evaluar consultas arbitrarias (es decir, consultas más complejas que las consultas de ventanas que se necesitan para la visualización de bases de datos), no realizamos consultas especificadas por el usuario en el cliente. Todas las consultas del usuario todavía se evalúan en el lado del servidor y los resultados se descargan en el cliente para su visualización. Sin embargo, suponiendo que las consultas sean suficientemente selectivas (es decir, hay muchos menos elementos devueltos de la consulta que el número de elementos en la base de datos), el retraso de la respuesta suele estar dentro de límites razonables. 2.1 Comunicación cliente-servidor Como se mencionó anteriormente, el navegador de Internet SAND es una pieza cliente del servidor de bases de datos espaciales remotamente accesible construido alrededor del núcleo SAND. Para comunicarse con el servidor, cuya interfaz de programación de aplicaciones (API) es un lenguaje de scripts basado en Tcl, se requiere un servlet diseñado específicamente para interconectar el navegador de Internet SAND con el núcleo SAND en el lado del servidor. Este servlet escucha en un puerto dado del servidor las solicitudes entrantes del cliente. Traduce estas peticiones al lenguaje SAND-Tcl. A continuación, transmite estos comandos o scripts SAND-Tcl al núcleo SAND. Después de que los resultados son proporcionados por el kernel, el servlet los obtiene y los procesa, y luego envía esos resultados de vuelta al cliente originario. Una vez que el servidor Java es lanzado, espera a que un cliente inicie una conexión. Se encarga de las dos peticiones para el código Java cliente real (necesario cuando el cliente se ejecuta como un applet) y el tráfico SAND. Cuando la pieza cliente es lanzada, se conecta de nuevo al servlet SAND, la comunicación es impulsada por la pieza cliente; el servidor sólo responde a las consultas de los clientes. El cliente inicia una transacción por 6 enviando una consulta. El servlet Java analiza la consulta y crea una expresión o script SAND-Tcl correspondiente en el formato nativo de los núcleos SAND. Luego se envía al kernel para su evaluación o ejecución. La respuesta de los núcleos depende naturalmente de la consulta y puede ser un valor booleano, un número o una cadena que represente un valor (por ejemplo, un color predeterminado) o, una tupla completa (por ejemplo, en respuesta a una consulta de tupla más cercana). Si un script fue enviado al kernel (por ejemplo, solicitando todas las tuplas que coincidan con algunos criterios), entonces una cantidad arbitraria de datos puede ser devuelta por el servidor SAND. En este caso, los datos se comprimen primero antes de enviarlos a través de la red al cliente. El flujo de datos se descomprime en el cliente antes de analizar los resultados. Note, que si otra base de datos espacial fuera a ser usada en lugar del núcleo SAND, entonces sólo una simple modificación al servlet tendría que ser hecha para que el navegador de Internet SAND funcione correctamente. En particular, las consultas enviadas por el cliente tendrían que ser codificadas en otro idioma de consulta que es nativo de esta base de datos espacial diferente. El formato del protocolo utilizado para la comunicación entre el servlet y el cliente no se ve afectado. 3. EL ENFOQUE PEER-TO-PEER Muchos usuarios pueden querer trabajar en un conjunto completo de datos espaciales durante un período de tiempo prolongado. En este caso, puede ser necesario realizar una inversión inicial para descargar todo el conjunto de datos a fin de garantizar una sesión satisfactoria. Desafortunadamente, los datos espaciales tienden a ser grandes. Algunas peticiones de descarga a un gran conjunto de datos de un conjunto de clientes inactivos que esperan ser servidos pueden ralentizar el servidor a un rastreo. Esto se debe al hecho de que el enfoque común cliente-servidor para transferir datos entre los dos extremos de una conexión asume un papel designado para cada uno de los fines (es decir, algunos clientes y un servidor). Construimos APPOINT como un sistema centralizado \"peer-to-peer\" para demostrar nuestro enfoque para mejorar los sistemas comunes cliente-servidor. Todavía existe un servidor. Existe una fuente central para los datos y un mecanismo de decisión para el servicio. El entorno todavía funciona como un entorno cliente-servidor en muchas circunstancias. Sin embargo, a diferencia de muchos entornos comunes cliente-servidor, APPOINT mantiene más información sobre los clientes. Esto incluye, inventarios de lo que cada cliente descarga, sus disponibilidades, etc. Cuando el servicio cliente-servidor comienza a funcionar mal o una solicitud de un elemento de datos proviene de un cliente con una mala conexión con el servidor, APPOINT puede comenzar a nombrar clientes activos apropiados del sistema para servir en nombre del servidor, es decir, clientes que ya han ofrecido sus servicios y pueden asumir el papel de pares (por lo tanto, pasar de un esquema cliente-servidor a un esquema \"peer-to-peer\"). El servicio de directorio para los clientes activos sigue siendo realizado por el servidor, pero el servidor ya no atiende todas las solicitudes. En este esquema, los clientes se utilizan principalmente con el propósito de compartir sus recursos de red en lugar de introducir nuevos contenidos y, por lo tanto, ayudan a descargar el servidor y ampliar el servicio. La existencia de un servidor es más simple en términos de gestión de pares dinámicos en comparación con enfoques de pares puros donde una inundación de mensajes para descubrir quién está todavía activo en el sistema debe ser utilizado por cada pares que necesita tomar una decisión. El servidor es también la principal fuente de datos y en circunstancias regulares no puede enviar el servicio. Se supone que los datos están formados por archivos. Un solo archivo forma los medios atómicos de comunicación. NOMBRAMIENTO optimiza las solicitudes con respecto a estas solicitudes atómicas. Los conjuntos de datos de acceso frecuente se reproducen como un subproducto de haber sido solicitados por un gran número de usuarios. Esto abre el potencial para eludir el servidor en futuras descargas de los datos por parte de otros usuarios, ya que ahora hay muchos nuevos puntos de acceso a él. Pasar por alto el servidor es útil cuando el ancho de banda de los servidores es limitado. La existencia de un servidor asegura que los datos impopulares también están disponibles en todo momento. El servicio depende de la disponibilidad del servidor. El servidor es ahora más resistente a la congestión ya que el servicio es más escalable. Las copias de seguridad y otras actividades de mantenimiento ya se están realizando en el servidor y, por lo tanto, no se necesita ningún esfuerzo administrativo adicional para los pares dinámicos. Si un compañero cae, no se toman precauciones adicionales. De hecho, APPOINT no requiere recursos adicionales de un entorno cliente-servidor ya existente, sino que, en cambio, amplía su capacidad. Los compañeros simplemente se acercan o se bajan de una mesa en el servidor. La carga de datos se logra de una manera similar a la descarga de datos. Para las subidas, los clientes activos pueden ser utilizados de nuevo. Los usuarios pueden subir sus datos a un conjunto de pares distintos del servidor si el servidor está ocupado o reside en una ubicación distante. Eventualmente los datos se propagan al servidor. Todas las operaciones se realizan de manera transparente para los clientes. En la conexión inicial con el servidor, se les puede preguntar si quieren o no compartir su tiempo de red inactivo y espacio en disco. El resto de las operaciones siguen de forma transparente después del contacto inicial. APTOINT trabaja en la capa de aplicación pero no en las capas inferiores. Esto logra la independencia de la plataforma y el fácil despliegue del sistema. APPOINT no es un reemplazo, sino una adición a las actuales arquitecturas cliente-servidor. Desarrollamos una biblioteca de llamadas de función que cuando se coloca en una arquitectura cliente-servidor inicia el servicio. Estamos desarrollando esquemas avanzados de selección por pares que incorporan la ubicación de clientes activos, ancho de banda entre clientes activos, tamaño de datos a transferir, carga en clientes activos y disponibilidad de clientes activos para formar un medio completo de seleccionar los mejores clientes que pueden convertirse en alternativas eficientes al servidor. Con APPOINT estamos definiendo una API muy simple que podría utilizarse fácilmente dentro de un sistema cliente-servidor existente. En lugar de negar el servicio o una conexión lenta, esta API se puede utilizar para reenviar el servicio adecuadamente. La API para el lado del servidor es: start(serverPortNo) makeFileDisponible(file,location,boolean) callback receiveFile(file,location,error) stop() Del mismo modo, la API para el lado del cliente es: start(clientPortNo,serverPortNo,serverAddress) makeFileDisponible(file, Esto permitirá a APPOINT tratar el servidor como uno de los pares. Los dos métodos de devolución de llamada del servidor se invocan cuando un archivo es recibido de un cliente, o cuando se encuentra un error al recibir un archivo de un cliente. APPOINT guar7 Figura 2: La operación de localización en APPOINT. antees que al menos una de las callbacks será llamada para que el usuario (que puede que ya no esté en línea) siempre pueda ser notificado (es decir, por correo electrónico). Los clientes que localizan archivos de datos grandes pueden hacer estos archivos disponibles al público utilizando el método makeFileDisponible en el lado del cliente. Por ejemplo, en nuestro navegador de Internet SAND, tenemos la localización de datos espaciales como una función que se puede elegir de nuestros menús. Esta funcionalidad permite a los usuarios descargar los conjuntos de datos completamente en sus discos locales antes de iniciar sus consultas o análisis. En nuestra implementación, tenemos llamadas al servicio APPOINT tanto en el lado del cliente como en el servidor, como se mencionó anteriormente. Por lo tanto, cuando una solicitud de localización llega al navegador de Internet SAND, el navegador deja las decisiones de encontrar y localizar de manera óptima un conjunto de datos al servicio APPOINT. Nuestro servidor también pone sus archivos de datos disponibles a través de APPOINT. El mecanismo para la operación de localización se muestra con más detalles de los protocolos APPOINT en la Figura 2. La operación de carga se realiza de una manera similar. 4. TRABAJOS RELACIONADOS Ha habido una cantidad considerable de investigaciones sobre el acceso remoto a los datos espaciales. Numerosos servicios de mapeo basados en la Web (MapQuest [5], MapsOnUs [6], etc.) han adoptado un enfoque específico. El objetivo de este enfoque es permitir a los usuarios remotos, normalmente equipados sólo con navegadores web estándar, acceder al servidor de bases de datos espaciales de las empresas y recuperar información en forma de mapas pictóricos de ellos. La solución presentada por la mayoría de estos proveedores se basa en la realización de todos los cálculos en el lado del servidor y la transferencia de sólo bitmaps que representan los resultados de consultas y comandos del usuario. Aunque la ventaja de esta solución es la minimización de los recursos de hardware y software en el sitio del cliente, el producto resultante tiene graves limitaciones en términos de funcionalidad disponible y tiempo de respuesta (cada acción del usuario resulta en un nuevo mapa de bits que se transfiere al cliente). El trabajo descrito en [9] examina una arquitectura cliente-servidor para ver imágenes grandes que operan a través de una conexión de red de ancho de banda bajo. Presenta una técnica basada en transformaciones de wavelet que permite minimizar la cantidad de datos necesarios para ser transferidos a través de la red entre el servidor y el cliente. En este caso, mientras que el servidor tiene la representación completa de la imagen grande, sólo una cantidad limitada de datos necesita ser transferida al cliente para poder mostrar una vista actualmente solicitada en la imagen. En el lado del cliente, la imagen se reconstruye en una representación piramidal para acelerar las operaciones de zoom y panning. Tanto el cliente como el servidor mantienen una máscara común que indica qué partes de la imagen están disponibles en el cliente y qué es necesario solicitar. Esto también permite soltar partes innecesarias de la imagen desde la memoria principal en el servidor. Otros trabajos relacionados han sido reportados en [16] donde se describe una arquitectura cliente-servidor que está diseñada para proporcionar a los usuarios finales acceso a un servidor. Se supone que este servidor de datos gestiona vastas bases de datos que no son prácticas para ser almacenadas en clientes individuales. Este trabajo combina la gestión de datos de raster (almacenado en pirámides [22]) con los datos vectoriales almacenados en quadtrees [19, 20]. Para nuestro enfoque de transferencia \"peer-to-peer\" (APPOINT), Napster es el antepasado donde un servicio de directorio está centralizado en un servidor y los usuarios intercambian archivos de música que han almacenado en sus discos locales. Nuestro dominio de aplicación, donde los datos ya están disponibles libremente para el público, forma un candidato principal para tal enfoque \"peer-to-peer\". Gnutella es un sistema de intercambio de archivos puro (descentralizado) \"peer-to-peer\". Desafortunadamente, sufre de problemas de escalabilidad, es decir, se requieren inundaciones de mensajes entre pares para mapear la conectividad en el sistema. Otros sistemas siguieron estos sistemas populares, cada uno abordando un sabor diferente de compartir a través de Internet. Muchos sistemas de almacenamiento \"peer-to-peer\" también han surgido recientemente. PAST [18], Eternity Service [7], CFS [10] y OceanStore [15] son algunos sistemas de almacenamiento \"peer-to-peer\". Algunos de estos sistemas se han centrado en el anonimato, mientras que otros se han centrado en la persistencia del almacenamiento. Además, otros enfoques, como SETI@Home [21], hicieron que otros recursos, como CPUs inactivas, trabajaran juntos a través de Internet para resolver problemas computacionales a gran escala. Nuestro objetivo es diferente de estos enfoques. Con APPOINT, queremos mejorar los sistemas cliente-servidor existentes en términos de rendimiento mediante el uso de recursos de red inactivos entre los clientes activos. Por lo tanto, otras cuestiones como el anonimato, la descentralización y la persistencia del almacenamiento fueron menos importantes en nuestras decisiones. La confirmación de la autenticidad de los conjuntos de datos entregados indirectamente aún no se aborda con APPOINT. Queremos ampliar nuestra investigación, en el futuro, para abordar esta cuestión. Desde nuestra perspectiva, aunque APPOINT emplea algunas de las técnicas utilizadas en los sistemas \"peer-to-peer\", también está estrechamente relacionada con las arquitecturas actuales de caché web. Ardilla [13] forma el suelo medio. Crea una caché web colaborativa pura de peer-topeer entre las cachés del navegador web de las máquinas en una red de área local. A excepción de este reciente enfoque \"peer-to-peer\", el caché web es en su mayoría un tema bien estudiado en el ámbito del caché de nivel servidor/proxy [8, 11, 14, 17]. Los sistemas colaborativos de almacenamiento en caché en la Web, los más relevantes para nuestra investigación, se centran en crear esquemas de almacenamiento en caché jerárquicos, basados en hash, basados en directorios centrales o basados en multicast. No compitemos con estos enfoques. De hecho, APPOINT puede trabajar en conjunto con el almacenamiento colaborativo en la Web si se despliegan juntos. Tratamos de abordar la situación en la que una solicitud llega a un servidor, lo que significa que todas las cachés reportan una falta. Por lo tanto, el punto donde se alcanza el servidor se puede utilizar para tomar una decisión central, pero luego la solicitud de servicio real se puede enviar a un conjunto de clientes activos, es decir, las operaciones de carga y carga down8. Las fallas de caché son especialmente comunes en el tipo de grandes servicios basados en datos en los que estamos trabajando. La mayoría de los sistemas de almacenamiento en caché en la Web que se utilizan actualmente emplean una política de sustitución que da prioridad a la sustitución de los artículos de mayor tamaño sobre los de menor tamaño. Por lo tanto, estas políticas conducirían a la sustitución inmediata de nuestros archivos de datos relativamente grandes a pesar de que pueden ser utilizados con frecuencia. Además, en nuestro caso, la comunidad de usuarios que accede a un determinado archivo de datos también puede estar muy dispersa desde el punto de vista de la red y por lo tanto no puede aprovechar ninguno de los esquemas de almacenamiento en caché. Por último, ninguno de los métodos de almacenamiento en caché Web abordan la cuestión simétrica de las cargas de datos grandes. 5. UNA SOLICITUD DE MUESTRAS FedStats [1] es una fuente en línea que permite a los ciudadanos de a pie acceder a las estadísticas oficiales de numerosas agencias federales sin saber de antemano qué agencia las produjo. Utilizamos un conjunto de datos de FedStats como banco de pruebas para nuestro trabajo. Nuestro objetivo es proporcionar más poder a los usuarios de FedStats mediante la utilización del navegador de Internet SAND. Como ejemplo, examinamos dos archivos de datos correspondientes a instalaciones reguladas por la Agencia de Protección del Medio Ambiente (EPA) que tienen cloro y arsénico, respectivamente. Para cada archivo, teníamos la siguiente información disponible: EPA-ID, nombre, calle, ciudad, estado, código postal, latitud, longitud, seguido de banderas para indicar si esa instalación está en los siguientes programas de la EPA: Residuos peligrosos, descarga de aguas residuales, emisiones de aire, descarga de desechos tóxicos abandonados y liberación tóxica activa. Ponemos estos datos en una relación SAND donde la ubicación del atributo espacial corresponde a la latitud y longitud. Algunas consultas que se pueden manejar con nuestro sistema sobre estos datos incluyen: 1. Encuentre todas las instalaciones reguladas por la EPA que tengan arsénico y participen en el programa de Emisiones Aéreas, y: (a) Mentira en Georgia a Illinois, alfabéticamente. b) Se encuentran en Arkansas o a 30 millas de su frontera. c) A unos 30 kilómetros de la frontera de Arkansas (es decir, a ambos lados de la frontera). 2. Para cada instalación regulada por la EPA que tenga arsénico, busque todas las instalaciones reguladas por la EPA que tengan cloro y: a) que estén más cerca de ella que de cualquier otra instalación regulada por la EPA que tenga arsénico. b) Que participen en el programa de emisiones aéreas y estén más cerca de él que de cualquier otra instalación regulada por la EPA que tenga arsénico. Para evitar reportar una instalación en particular más de una vez, utilizamos nuestro grupo por mecanismo EPA-ID. La Figura 3 ilustra la salida de una consulta de ejemplo que encuentra todos los sitios de arsénico a una distancia dada de la frontera de Arkansas. Los sitios se obtienen de manera gradual con respecto a un punto dado. Este pedido se muestra utilizando diferentes tonos de color. Con este ejemplo de datos, es posible trabajar con el navegador de Internet SAND en línea como un applet (conectado a un servidor remoto) o después de localizar los datos y luego abrirlos localmente. En el primer caso, para cada acción realizada, la arquitectura cliente-servidor decidirá qué pedir desde el servidor. En este último caso, el navegador utilizará la arquitectura APPOINT para localizar primero los datos. 6. OBSERVACIONES FINALES Se ha dado una visión general de nuestros esfuerzos para proporcionar acceso remoto a grandes datos espaciales. Hemos esbozado nuestros enfoques e introducido sus elementos individuales. Nuestro enfoque cliente-servidor mejora el rendimiento del sistema utilizando métodos de caché eficientes cuando se accede a un servidor remoto desde clientes delgados. APPOINT forma un enfoque alternativo que mejora el rendimiento bajo un sistema existente de customerserver mediante el uso de recursos de clientes inactivos cuando los usuarios individuales quieren trabajar en un conjunto de datos durante períodos de tiempo más largos utilizando sus computadoras cliente. Para el futuro, imaginamos el desarrollo de nuevos algoritmos eficientes que soportarán grandes transferencias de datos en línea dentro de nuestro enfoque \"peer-to-peer\" usando múltiples pares simultáneamente. Asumimos que un compañero (cliente) puede no estar disponible en cualquier momento y por lo tanto las provisiones deben estar en su lugar para manejar tal situación. Para hacer frente a esto, aumentaremos nuestros métodos para incluir actualizaciones dinámicas eficientes. Al finalizar este paso de nuestro trabajo, también planeamos realizar estudios completos de rendimiento sobre nuestros métodos. Otra cuestión es cómo acceder a los datos de diferentes fuentes en diferentes formatos. Para acceder a múltiples fuentes de datos en tiempo real, es conveniente buscar un mecanismo que apoye el intercambio de datos por diseño. El protocolo XML [3] se ha convertido prácticamente en un estándar para describir y comunicar datos arbitrarios. GML [4] es una variante XML que se está volviendo cada vez más popular para el intercambio de datos geográficos. Actualmente estamos trabajando en hacer compatible con XML SAND para que el usuario pueda recuperar instantáneamente los datos espaciales proporcionados por varias agencias en el formato GML a través de sus servicios web y luego explorar, consultar o procesar estos datos más dentro del marco SAND. Esto convertirá el sistema SAND en una herramienta universal para acceder a cualquier conjunto de datos espaciales, ya que será implementable en la mayoría de las plataformas, funcionará eficientemente dada la gran cantidad de datos, será capaz de tocar cualquier fuente de datos habilitada por GML y proporcionará una interfaz gráfica de usuario fácil de usar. Esto también convertirá el sistema SAND de un prototipo orientado a la investigación en un producto que podría ser utilizado por los usuarios finales para acceder, ver y analizar sus datos de manera eficiente y con el mínimo esfuerzo. 7. REFERENCIAS [1] Fedstats: La puerta de entrada a las estadísticas de más de 100 agencias federales estadounidenses. http://www.fedstats.gov/, 2001. [2] Arcinfo: Sistema escalable de software para la creación, gestión, integración, análisis y difusión de datos geográficos. http://www.esri.com/software/arcgis/arcinfo/index.html, 2002. [3] Lenguaje de marcado extensible (xml). http://www.w3.org/XML/, 2002. [4] Lenguaje de marcado geográfico (gml) 2.0. http://opengis.net/gml/01-029/GML2.html, 2002. [5] Mapquest: Sitio de mapeo interactivo centrado en el consumidor en la web. http://www.mapquest.com, 2002. [6] Mapsonus: Suite de servicios geográficos en línea. http://www.mapsonus.com, 2002. [7] R. Anderson. El Servicio de Eternidad. En las actas del PRAGOCRYPT96, págs. 242 a 252, Praga (República Checa), septiembre de 1996. [8] L. Breslau, P. Cao, L. Fan, G. Phillips y S. Shenker. Caché web y distribuciones tipo Zipf: 9 Figura 3: Muestra de salida del navegador de Internet SAND - Los grandes puntos oscuros indican el resultado de una consulta que busca todos los sitios de arsénico dentro de una distancia determinada de Arkansas. Diferentes tonos de color se utilizan para indicar el orden de clasificación por la distancia de un punto dado. Pruebas e implicaciones. En Actas de la IEEE Infocom99, páginas 126-134, Nueva York, NY, marzo de 1999. [9] E. Chang, C. Yap, y T. Yen. Visualización en tiempo real de imágenes grandes sobre un alambre delgado. En R. Yagel y H. Hagen, editores, Proceedings IEEE Visualization97 (Late Breaking Hot Topics), páginas 45-48, Phoenix, AZ, octubre de 1997. [10] F. Dabek, M. F. Kaashoek, D. Karger, R. Morris e I. Stoica. Almacenamiento cooperativo de área amplia con CFS. En Actas de la ACM SOSP01, págs. 202 a 215, Banff, AL, octubre de 2001. [11] A. Dingle y T. Partl. Coherencia de la caché web. Redes informáticas y sistemas RDSI, 28(7-11):907-920, mayo de 1996. [12] C. Esperan Łca y H. Samet. Experiencia con SAND/Tcl: una herramienta de scripting para bases de datos espaciales. Revista de Lenguas Visuales e Informática, 13(2):229-255, abril 2002. [13] S. Iyer, A. Rowstron y P. Druschel. Ardilla: Un caché web descentralizado \"peer-to-peer\". Rice University/Microsoft Research, presentado para su publicación en 2002. [14] D. Karger, A. Sherman, A. Berkheimer, B. Bogstad, R. Dhanidina, K. Iwamoto, B. Kim, L. Matkins e Y. Yerushalmi. Caché web con hachís consistente. Redes informáticas, 31(11-16):1203-1213, mayo de 1999. [15] J. Kubiatowicz, D. Bindel, Y. Chen, S. Czerwinski, P. Eaton, D. Geels, R. Gummadi, S. Rhea, H. Weatherspoon, W. Weimer, C. Wells, y B. Zhao. OceanStore: Una arquitectura para una tienda persistente a escala mundial. En Actas de la ACM ASPLOS00, páginas 190-201, Cambridge, MA, noviembre 2000. [16] Sr. Potmesil. Mapas vivos: visualización de información geoespacial sobre la WWW. Redes informáticas y sistemas RDSI, 29(8-13):1327-1342, septiembre de 1997. También Hyper Proceedings de la 6a Conferencia Internacional de la Web, Santa Clara, CA, abril de 1997. [17] M. Rabinovich, J. Chase, y S. Gadde. No todos los hits se crean iguales: Cooperative proxy caching en una red de área amplia. Redes informáticas y sistemas RDSI, 30(22-23):2253-2259, noviembre de 1998. [18] A. Rowstron y P. Druschel. Gestión de almacenamiento y almacenamiento en caché en PAST, una utilidad de almacenamiento \"peer-to-peer\" persistente a gran escala. En Actas de la ACM SOSP01, págs. 160 a 173, Banff, AL, octubre de 2001. [19] H. Samet. Aplicaciones de Estructuras de Datos Espaciales: Gráficos de Computación, Procesamiento de Imágenes y GIS. Addison-Wesley, Reading, MA, 1990. [20] H. Samet. El diseño y análisis de estructuras de datos espaciales. Addison-Wesley, Reading, MA, 1990. [21] SETI@Home. http://setiathome.ssl.berkeley.edu/, 2001. [22] L. J. Williams. Parametría piramidal. Computer Graphics, 17(3):1-11, julio 1983. También Actas de la Conferencia SIGGRAPH83, Detroit, julio de 1983. 10 ",
            "error": [
                ""
            ]
        }
    }
}