{
    "original_text": "Controlling Overlap in Content-Oriented XML Retrieval Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca ABSTRACT The direct application of standard ranking techniques to retrieve individual elements from a collection of XML documents often produces a result set in which the top ranks are dominated by a large number of elements taken from a small number of highly relevant documents. This paper presents and evaluates an algorithm that re-ranks this result set, with the aim of minimizing redundant content while preserving the benefits of element retrieval, including the benefit of identifying topic-focused components contained within relevant documents. The test collection developed by the INitiative for the Evaluation of XML Retrieval (INEX) forms the basis for the evaluation. Categories and Subject Descriptors H.3.3 [Information Systems]: Information Storage and Retrieval-Information Search and Retrieval General Terms Algorithms, Measurement, Performance, Experimentation 1. INTRODUCTION The representation of documents in XML provides an opportunity for information retrieval systems to take advantage of document structure, returning individual document components when appropriate, rather than complete documents in all circumstances. In response to a user query, an XML information retrieval system might return a mixture of paragraphs, sections, articles, bibliographic entries and other components. This facility is of particular benefit when a collection contains very long documents, such as product manuals or books, where the user should be directed to the most relevant portions of these documents. <article> <fm> <atl>Text Compression for Dynamic Document Databases</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <abs><p><b>Abstract</b> For ...</p></abs> </fm> <bdy> <sec><st>INTRODUCTION</st> <ip1>Modern document databases...</ip1> <p>There are good reasons to compress...</p> </sec> <sec><st>REDUCING MEMORY REQUIREMENTS</st>... <ss1><st>2.1 Method A</st>... </sec> ... </bdy> </article> Figure 1: A journal article encoded in XML. Figure 1 provides an example of a journal article encoded in XML, illustrating many of the important characteristics of XML documents. Tags indicate the beginning and end of each element, with elements varying widely in size, from one word to thousands of words. Some elements, such as paragraphs and sections, may be reasonably presented to the user as retrieval results, but others are not appropriate. Elements overlap each other - articles contain sections, sections contain subsections, and subsections contain paragraphs. Each of these characteristics affects the design of an XML IR system, and each leads to fundamental problems that must be solved in an successful system. Most of these fundamental problems can be solved through the careful adaptation of standard IR techniques, but the problems caused by overlap are unique to this area [4,11] and form the primary focus of this paper. The article of figure 1 may be viewed as an XML tree, as illustrated in figure 2. Formally, a collection of XML documents may be represented as a forest of ordered, rooted trees, consisting of a set of nodes N and a set of directed edges E connecting these nodes. For each node x ∈ N , the notation x.parent refers to the parent node of x, if one exists, and the notation x.children refers to the set of child nodes sec bdyfm atl au au au abs p b st ip1 sec st ss1 st article p Figure 2: Example XML tree. of x. Since an element may be represented by the node at its root, the output of an XML IR system may be viewed as a ranked list of the top-m nodes. The direct application of a standard relevance ranking technique to a set of XML elements can produce a result in which the top ranks are dominated by many structurally related elements. A high scoring section is likely to contain several high scoring paragraphs and to be contained in an high scoring article. For example, many of the elements in figure 2 would receive a high score on the keyword query text index compression algorithms. If each of these elements are presented to a user as an individual and separate result, she may waste considerable time reviewing and rejecting redundant content. One possible solution is to report only the highest scoring element along a given path in the tree, and to remove from the lower ranks any element containing it, or contained within it. Unfortunately, this approach destroys some of the possible benefits of XML IR. For example, an outer element may contain a substantial amount of information that does not appear in an inner element, but the inner element may be heavily focused on the query topic and provide a short overview of the key concepts. In such cases, it is reasonable to report elements which contain, or are contained in, higher ranking elements. Even when an entire book is relevant, a user may still wish to have the most important paragraphs highlighted, to guide her reading and to save time [6]. This paper presents a method for controlling overlap. Starting with an initial element ranking, a re-ranking algorithm adjusts the scores of lower ranking elements that contain, or are contained within, higher ranking elements, reflecting the fact that this information may now be redundant. For example, once an element representing a section appears in the ranking, the scores for the paragraphs it contains and the article that contains it are reduced. The inspiration for this strategy comes partially from recent work on structured documents retrieval, where terms appearing in different fields, such as the title and body, are given different weights [20]. Extending that approach, the re-ranking algorithm varies weights dynamically as elements are processed. The remainder of the paper is organized as follows: After a discussion of background work and evaluation methodology, a baseline retrieval method is presented in section 4. This baseline method represents a reasonable adaptation of standard IR technology to XML. Section 5 then outlines a strategy for controlling overlap, using the baseline method as a starting point. A re-ranking algorithm implementing this strategy is presented in section 6 and evaluated in section 7. Section 8 discusses an extended version of the algorithm. 2. BACKGROUND This section provides a general overview of XML information retrieval and discusses related work, with an emphasis on the fundamental problems mentioned in the introduction. Much research in the area of XML retrieval views it from a traditional database perspective, being concerned with such problems as the implementation of structured query languages [5] and the processing of joins [1]. Here, we take a content oriented IR perceptive, focusing on XML documents that primarily contain natural language data and queries that are primarily expressed in natural language. We assume that these queries indicate only the nature of desired content, not its structure, and that the role of the IR system is to determine which elements best satisfy the underlying information need. Other IR research has considered mixed queries, in which both content and structural requirements are specified [2,6,14,17,23]. 2.1 Term and Document Statistics In traditional information retrieval applications the standard unit of retrieval is taken to be the document. Depending on the application, this term might be interpreted to encompass many different objects, including web pages, newspaper articles and email messages. When applying standard relevance ranking techniques in the context of XML IR, a natural approach is to treat each element as a separate document, with term statistics available for each [16]. In addition, most ranking techniques require global statistics (e.g. inverse document frequency) computed over the collection as a whole. If we consider this collection to include all elements that might be returned by the system, a specific occurrence of a term may appear in several different documents, perhaps in elements representing a paragraph, a subsection, a section and an article. It is not appropriate to compute inverse document frequency under the assumption that the term is contained in all of these elements, since the number of elements that contain a term depends entirely on the structural arrangement of the documents [13,23]. 2.2 Retrievable Elements While an XML IR system might potentially retrieve any element, many elements may not be appropriate as retrieval results. This is usually the case when elements contain very little text [10]. For example, a section title containing only the query terms may receive a high score from a ranking algorithm, but alone it would be of limited value to a user, who might prefer the actual section itself. Other elements may reflect the documents physical, rather than logical, structure, which may have little or no meaning to a user. An effective XML IR system must return only those elements that have sufficient content to be usable and are able to stand alone as independent objects [15,18]. Standard document components such as paragraphs, sections, subsections, and abstracts usually meet these requirements; titles, italicized phrases, and individual metadata fields often do not. 2.3 Evaluation Methodology Over the past three years, the INitiative for the Evaluation of XML Retrieval (INEX) has encouraged research into XML information retrieval technology [7,8]. INEX is an experimental conference series, similar to TREC, with groups from different institutions completing one or more experimental tasks using their own tools and systems, and comparing their results at the conference itself. Over 50 groups participated in INEX 2004, and the conference has become as influential in the area of XML IR as TREC is in other IR areas. The research described in this paper, as well as much of the related work it cites, depends on the test collections developed by INEX. Overlap causes considerable problems with retrieval evaluation, and the INEX organizers and participants have wrestled with these problems since the beginning. While substantial progress has been made, these problem are still not completely solved. Kazai et al. [11] provide a detailed exposition of the overlap problem in the context of INEX retrieval evaluation and discuss both current and proposed evaluation metrics. Many of these metrics are applied to evaluate the experiments reported in this paper, and they are briefly outlined in the next section. 3. INEX 2004 Space limitations prevent the inclusion of more than a brief summary of INEX 2004 tasks and evaluation methodology. For detailed information, the proceedings of the conference itself should be consulted [8]. 3.1 Tasks For the main experimental tasks, INEX 2004 participants were provided with a collection of 12,107 articles taken from the IEEE Computer Societies magazines and journals between 1995 and 2002. Each document is encoded in XML using a common DTD, with the document of figures 1 and 2 providing one example. At INEX 2004, the two main experimental tasks were both adhoc retrieval tasks, investigating the performance of systems searching a static collection using previously unseen topics. The two tasks differed in the types of topics they used. For one task, the content-only or CO task, the topics consist of short natural language statements with no direct reference to the structure of the documents in the collection. For this task, the IR system is required to select the elements to be returned. For the other task, the contentand-structure or CAS task, the topics are written in an XML query language [22] and contain explicit references to document structure, which the IR system must attempt to satisfy. Since the work described in this paper is directed at the content-only task, where the IR system receives no guidance regarding the elements to return, the CAS task is ignored in the remainder of our description. In 2004, 40 new CO topics were selected by the conference organizers from contributions provided by the conference participants. Each topic includes a short keyword query, which is executed over the collection by each participating group on their own XML IR system. Each group could submit up to three experimental runs consisting of the top m = 1500 elements for each topic. 3.2 Relevance Assessment Since XML IR is concerned with locating those elements that provide complete coverage of a topic while containing as little extraneous information as possible, simple relevant vs. not relevant judgments are not sufficient. Instead, the INEX organizers adopted two dimensions for relevance assessment: The exhaustivity dimension reflects the degree to which an element covers the topic, and the specificity dimension reflects the degree to which an element is focused on the topic. A four-point scale is used in both dimensions. Thus, a (3,3) element is highly exhaustive and highly specific, a (1,3) element is marginally exhaustive and highly specific, and a (0,0) element is not relevant. Additional information on the assessment methodology may be found in Piwowarski and Lalmas [19], who provide a detailed rationale. 3.3 Evaluation Metrics The principle evaluation metric used at INEX 2004 is a version of mean average precision (MAP), adjusted by various quantization functions to give different weights to different elements, depending on their exhaustivity and specificity values. One variant, the strict quantization function gives a weight of 1 to (3,3) elements and a weight of 0 to all others. This variant is essentially the familiar MAP value, with (3,3) elements treated as relevant and all other elements treated as not relevant. Other quantization functions are designed to give partial credit to elements which are near misses, due to a lack or exhaustivity and/or specificity. Both the generalized quantization function and the specificity-oriented generalization (sog) function credit elements according to their degree of relevance [11], with the second function placing greater emphasis on specificity. This paper reports results of this metric using all three of these quantization functions. Since this metric was first introduced at INEX 2002, it is generally referred as the inex-2002 metric. The inex-2002 metric does not penalize overlap. In particular, both the generalized and sog quantization functions give partial credit to a near miss even when a (3,3) element overlapping it is reported at a higher rank. To address this problem, Kazai et al. [11] propose an XML cumulated gain metric, which compares the cumulated gain [9] of a ranked list to an ideal gain vector. This ideal gain vector is constructed from the relevance judgments by eliminating overlap and retaining only best element along a given path. Thus, the XCG metric rewards retrieval runs that avoid overlap. While XCG was not used officially at INEX 2004, a version of it is likely to be used in the future. At INEX 2003, yet another metric was introduced to ameliorate the perceived limitations of the inex-2002 metric. This inex-2003 metric extends the definitions of precision and recall to consider both the size of reported components and the overlap between them. Two versions were created, one that considered only component size and another that considered both size and overlap. While the inex-2003 metric exhibits undesirable anomalies [11], and was not used in 2004, values are reported in the evaluation section to provide an additional instrument for investigating overlap. 4. BASELINE RETRIEVAL METHOD This section provides an overview of baseline XML information retrieval method currently used in the MultiText IR system, developed by the Information Retrieval Group at the University of Waterloo [3]. This retrieval method results from the adaptation and tuning of the Okapi BM25 measure [21] to the XML information retrieval task. The MultiText system performed respectably at INEX 2004, placing in the top ten under all of the quantization functions, and placing first when the quantization function emphasized exhaustivity. To support retrieval from XML and other structured document types, the system provides generalized queries of the form: rank X by Y where X is a sub-query specifying a set of document elements to be ranked and Y is a vector of sub-queries specifying individual retrieval terms. For our INEX 2004 runs, the sub-query X specified a list of retrievable elements as those with tag names as follows: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt This list includes bibliographic entries (bb) and figure captions (fig) as well as paragraphs, sections and subsections. Prior to INEX 2004, the INEX collection and the INEX 2003 relevance judgments were manually analyzed to select these tag names. Tag names were selected on the basis of their frequency in the collection, the average size of their associated elements, and the relative number of positive relevance judgments they received. Automating this selection process is planned as future work. For INEX 2004, the term vector Y was derived from the topic by splitting phrases into individual words, eliminating stopwords and negative terms (those starting with -), and applying a stemmer. For example, keyword field of topic 166 +tree edit distance + XML -image became the four-term query $tree $edit $distance $xml where the $ operator within a quoted string stems the term that follows it. Our implementation of Okapi BM25 is derived from the formula of Robertson et al. [21] by setting parameters k2 = 0 and k3 = ∞. Given a term set Q, an element x is assigned the score   t∈Q w(1) qt (k1 + 1)xt K + xt (1) where w(1) = log ¡ D − Dt + 0.5 Dt + 0.5 ¢ D = number of documents in the corpus Dt = number of documents containing t qt = frequency that t occurs in the topic xt = frequency that t occurs in x K = k1((1 − b) + b · lx/lavg) lx = length of x lavg = average document length 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14 0.15 0 2 4 6 8 10 12 14 16 MeanAveragePrecision(inex-2002) k1 strict generalized sog Figure 3: Impact of k1 on inex-2002 mean average precision with b = 0.75 (INEX 2003 CO topics). Prior to INEX 2004, the INEX 2003 topics and judgments were used to tune the b and k1 parameters, and the impact of this tuning is discussed later in this section. For the purposes of computing document-level statistics (D, Dt and lavg) a document is defined to be an article. These statistics are used for ranking all element types. Following the suggestion of Kamps et al. [10], the retrieval results are filtered to eliminate very short elements, those less than 25 words in length. The use of article statistics for all element types might be questioned. This approach may be justified by viewing the collection as a set of articles to be searched using standard document-oriented techniques, where only articles may be returned. The score computed for an element is essentially the score it would receive if it were added to the collection as a new document, ignoring the minor adjustments needed to the document-level statistics. Nonetheless, we plan to examine this issue again in the future. In our experience, the performance of BM25 typically benefits from tuning the b and k1 parameters to the collection, whenever training queries are available for this purpose. Prior to INEX 2004, we trained the MultiText system using the INEX 2003 queries. As a starting point we used the values b = 0.75 and k1 = 1.2, which perform well on TREC adhoc collections and are used as default values in our system. The results were surprising. Figure 3 shows the result of varying k1 with b = 0.75 on the MAP values under three quantization functions. In our experience, optimal values for k1 are typically in the range 0.0 to 2.0. In this case, large values are required for good performance. Between k1 = 1.0 and k1 = 6.0 MAP increases by over 15% under the strict quantization. Similar improvements are seen under the generalized and sog quantizations. In contrast, our default value of b = 0.75 works well under all quantization functions (figure 4). After tuning over a wide range of values under several quantization functions, we selected values of k = 10.0 and b = 0.80 for our INEX 2004 experiments, and these values are used for the experiments reported in section 7. 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14 0.15 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 MeanAveragePrecision(inex-2002) b strict generalized sog Figure 4: Impact of b on inex-2002 mean average precision with k1 = 10 (INEX 2003 CO topics). 5. CONTROLLING OVERLAP Starting with an element ranking generated by the baseline method described in the previous section, elements are re-ranked to control overlap by iteratively adjusting the scores of those elements containing or contained in higher ranking elements. At a conceptual level, re-ranking proceeds as follows: 1. Report the highest ranking element. 2. Adjust the scores of the unreported elements. 3. Repeat steps 1 and 2 until m elements are reported. One approach to adjusting the scores of unreported elements in step 2 might be based on the Okapi BM25 scores of the involved elements. For example, assume a paragraph with score p is reported in step 1. In step 2, the section containing the paragraph might then have its score s lowered by an amount α · p to reflect the reduced contribution the paragraph should make to the sections score. In a related context, Robertson et al. [20] argue strongly against the linear combination of Okapi scores in this fashion. That work considers the problem of assigning different weights to different document fields, such as the title and body associated with Web pages. A common approach to this problem scores the title and body separately and generates a final score as a linear combination of the two. Robertson et al. discuss the theoretical flaws in this approach and demonstrate experimentally that it can actually harm retrieval effectiveness. Instead, they apply the weights at the term frequency level, with an occurrence of a query term t in the title making a greater contribution to the score than an occurrence in the body. In equation 1, xt becomes α0 · yt + α1 · zt, where yt is the number of times t occurs in the title and zt is the number of times t occurs in the body. Translating this approach to our context, the contribution of terms appearing in elements is dynamically reduced as they are reported. The next section presents and analysis a simple re-ranking algorithm that follows this strategy. The algorithm is evaluated experimentally in section 7. One limitation of the algorithm is that the contribution of terms appearing in reported elements is reduced by the same factor regardless of the number of reported elements in which it appears. In section 8 the algorithm is extended to apply increasing weights, lowering the score, when a term appears in more than one reported element. 6. RE-RANKING ALGORITHM The re-ranking algorithm operates over XML trees, such as the one appearing in figure 2. Input to the algorithm is a list of n elements ranked according to their initial BM25 scores. During the initial ranking the XML tree is dynamically re-constructed to include only those nodes with nonzero BM25 scores, so n may be considerably less than |N |. Output from the algorithm is a list of the top m elements, ranked according to their adjusted scores. An element is represented by the node x ∈ N at its root. Associated with this node are fields storing the length of element, term frequencies, and other information required by the re-ranking algorithm, as follows: x.f - term frequency vector x.g - term frequency adjustments x.l - element length x.score - current Okapi BM25 score x.reported - boolean flag, initially false x.children - set of child nodes x.parent - parent node, if one exists These fields are populated during the initial ranking process, and updated as the algorithm progresses. The vector x.f contains term frequency information corresponding to each term in the query. The vector x.g is initially zero and is updated by the algorithm as elements are reported. The score field contains the current BM25 score for the element, which will change as the values in x.g change. The score is computed using equation 1, with the xt value for each term determined by a combination of the values in x.f and x.g. Given a term t ∈ Q, let ft be the component of x.f corresponding to t, and let gt be the component of x.g corresponding to t, then: xt = ft − α · gt (2) For processing by the re-ranking algorithm, nodes are stored in priority queues, ordered by decreasing score. Each priority queue PQ supports three operations: PQ.front() - returns the node with greatest score PQ.add (x) - adds node x to the queue PQ.remove(x) - removes node x from the queue When implemented using standard data structures, the front operation requires O(1) time, and the other operations require O(log n) time, where n is the size of the queue. The core of the re-ranking algorithm is presented in figure 5. The algorithm takes as input the priority queue S containing the initial ranking, and produces the top-m reranked nodes in the priority queue F. After initializing F to be empty on line 1, the algorithm loops m times over lines 215, transferring at least one node from S to F during each iteration. At the start of each iteration, the unreported node at the front of S has the greatest adjusted score, and it is removed and added to F. The algorithm then traverses the 1 F ← ∅ 2 for i ← 1 to m do 3 x ← S.front() 4 S.remove(x) 5 x.reported ← true 6 F.add(x) 7 8 foreach y ∈ x.children do 9 Down (y) 10 end do 11 12 if x is not a root node then 13 Up (x, x.parent) 14 end if 15 end do Figure 5: Re-Ranking Algorithm - As input, the algorithm takes a priority queue S, containing XML nodes ranked by their initial scores, and returns its results in priority queue F, ranked by adjusted scores. 1 Up(x, y) ≡ 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.add(y) 6 if y is not a root node then 7 Up (x, y.parent) 8 end if 9 10 Down(x) ≡ 11 if not x.reported then 12 S.remove(x) 14 x.g ← x.f 15 recompute x.score 16 if x.score > 0 then 17 F.add(x) 18 end if 19 x.reported ← true 20 foreach y ∈ x.children do 21 Down (y) 22 end do 23 end if Figure 6: Tree traversal routines called by the reranking algorithm. 0.0 0.02 0.04 0.06 0.08 0.10 0.12 0.14 0.16 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 0.25 0.26 0.27 0.28 0.29 0.30 0.31 0.32 0.33 0.34 0.35 0.36 MeanAveragePrecision(inex-2002) XMLCumulatedGain(XCG) alpha MAP (strict) MAP (generalized) MAP (sog) XCG (sog2) Figure 7: Impact of α on XCG and inex-2002 MAP (INEX 2004 CO topics; assessment set I). nodes ancestors (lines 8-10) and descendants (lines 12-14) adjusting the scores of these nodes. The tree traversal routines, Up and Down are given in figure 6. The Up routine removes each ancestor node from S, adjusts its term frequency values, recomputes its score, and adds it back into S. The adjustment of the term frequency values (line 3) adds to y.g only the previously unreported term occurrences in x. Re-computation of the score on line 4 uses equations 1 and 2. The Down routine performs a similar operation on each descendant. However, since the contents of each descendant are entirely contained in a reported element its final score may be computed, and it is removed from S and added to F. In order to determine the time complexity of the algorithm, first note that a node may be an argument to Down at most once. Thereafter, the reported flag of its parent is true. During each call to Down a node may be moved from S to F, requiring O(log n) time. Thus, the total time for all calls to Down is O(n log n), and we may temporarily ignore lines 8-10 of figure 5 when considering the time complexity of the loop over lines 2-15. During each iteration of this loop, a node and each of its ancestors are removed from a priority queue and then added back into a priority queue. Since a node may have at most h ancestors, where h is the maximum height of any tree in the collection, each of the m iterations requires O(h log n) time. Combining these observations produces an overall time complexity of O((n + mh) log n). In practice, re-ranking an INEX result set requires less than 200ms on a three-year-old desktop PC. 7. EVALUATION None of the metrics described in section 3.3 is a close fit with the view of overlap advocated by this paper. Nonetheless, when taken together they provide insight into the behaviour of the re-ranking algorithm. The INEX evaluation packages (inex_eval and inex_eval_ng) were used to compute values for the inex-2002 and inex-2003 metrics. Values for the XCG metrics were computed using software supplied by its inventors [11]. Figure 7 plots the three variants of inex-2002 MAP metric together with the XCG metric. Values for these metrics 0.0 0.02 0.04 0.06 0.08 0.10 0.12 0.14 0.16 0.18 0.20 0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 MeanAveragePrecision(inex-2003) alpha strict, overlap not considered strict, overlap considered generalized, overlap not considered generalized, overlap considered Figure 8: Impact of α on inex-2003 MAP (INEX 2004 CO topics; assessment set I). are plotted for values of α between 0.0 and 1.0. Recalling that the XCG metric is designed to penalize overlap, while the inex-2002 metric ignores overlap, the conflict between the metrics is obvious. The MAP values at one extreme (α = 0.0) and the XCG value at the other extreme (α = 1.0) represent retrieval performance comparable to the best systems at INEX 2004 [8,12]. Figure 8 plots values of the inex-2003 MAP metric for two quantizations, with and without consideration of overlap. Once again, conflict is apparent, with the influence of α substantially lessened when overlap is considered. 8. EXTENDED ALGORITHM One limitation of the re-ranking algorithm is that a single weight α is used to adjust the scores of both the ancestors and descendants of reported elements. An obvious extension is to use different weights in these two cases. Furthermore, the same weight is used regardless of the number of times an element is contained in a reported element. For example, a paragraph may form part of a reported section and then form part of a reported article. Since the user may now have seen this paragraph twice, its score should be further lowered by increasing the value of the weight. Motivated by these observations, the re-ranking algorithm may be extended with a series of weights 1 = β0 ≥ β1 ≥ β2 ≥ ... ≥ βM ≥ 0. where βj is the weight applied to a node that has been a descendant of a reported node j times. Note that an upper bound on M is h, the maximum height of any XML tree in the collection. However, in practice M is likely to be relatively small (perhaps 3 or 4). Figure 9 presents replacements for the Up and Down routines of figure 6, incorporating this series of weights. One extra field is required in each node, as follows: x.j - down count The value of x.j is initially set to zero in all nodes and is incremented each time Down is called with x as its argument. When computing the score of node, the value of x.j selects 1 Up(x, y) ≡ 2 if not y.reported then 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 if y is not a root node then 9 Up (x, y.parent) 10 end if 11 end if 12 13 Down(x) ≡ 14 if x.j < M then 15 x.j ← x.j + 1 16 if not x.reported then 17 S.remove(x) 18 recompute x.score 19 S.add(x) 20 end if 21 foreach y ∈ x.children do 22 Down (y) 23 end do 24 end if Figure 9: Extended tree traversal routines. the weight to be applied to the node by adjusting the value of xt in equation 1, as follows: xt = βx.j · (ft − α · gt) (3) where ft and gt are the components of x.f and x.g corresponding to term t. A few additional changes are required to extend Up and Down. The Up routine returns immediately (line 2) if its argument has already been reported, since term frequencies have already been adjusted in its ancestors. The Down routine does not report its argument, but instead recomputes its score and adds it back into S. A node cannot be an argument to Down more than M +1 times, which in turn implies an overall time complexity of O((nM + mh) log n). Since M ≤ h and m ≤ n, the time complexity is also O(nh log n). 9. CONCLUDING DISCUSSION When generating retrieval results over an XML collection, some overlap in the results should be tolerated, and may be beneficial. For example, when a highly exhaustive and fairly specific (3,2) element contains a much smaller (2,3) element, both should be reported to the user, and retrieval algorithms and evaluation metrics should respect this relationship. The algorithm presented in this paper controls overlap by weighting the terms occurring in reported elements to reflect their reduced importance. Other approaches may also help to control overlap. For example, when XML retrieval results are presented to users it may be desirable to cluster structurally related elements together, visually illustrating the relationships between them. While this style of user interface may help a user cope with overlap, the strategy presented in this paper continues to be applicable, by determining the best elements to include in each cluster. At Waterloo, we continue to develop and test our ideas for INEX 2005. In particular, we are investigating methods for learning the α and βj weights. We are also re-evaluating our approach to document statistics and examining appropriate adjustments to the k1 parameter as term weights change [20]. 10. ACKNOWLEDGMENTS Thanks to Gabriella Kazai and Arjen de Vries for providing an early version of their software for computing the XCG metric, and thanks to Phil Tilker and Stefan B¨uttcher for their help with the experimental evaluation. In part, funding for this project was provided by IBM Canada through the National Institute for Software Research. 11. REFERENCES [1] N. Bruno, N. Koudas, and D. Srivastava. Holistic twig joins: Optimal XML pattern matching. In Proceedings of the 2002 ACM SIGMOD International Conference on the Management of Data, pages 310-321, Madison, Wisconsin, June 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Mass, and A. Soffer. Searching XML documents via XML fragments. In Proceedings of the 26th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, pages 151-158, Toronto, Canada, 2003. [3] C. L. A. Clarke and P. L. Tilker. MultiText experiments for INEX 2004. In INEX 2004 Workshop Proceedings, 2004. Published in LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai, and M. Lalmas. Tolerance to irrelevance: A user-effort oriented evaluation of retrieval systems without predefined retrieval unit. In RIAO 2004 Conference Proceedings, pages 463-473, Avignon, France, April 2004. [5] D. DeHaan, D. Toman, M. P. Consens, and M. T. ¨Ozsu. A comprehensive XQuery to SQL translation using dynamic interval encoding. In Proceedings of the 2003 ACM SIGMOD International Conference on the Management of Data, San Diego, June 2003. [6] N. Fuhr and K. Großjohann. XIRQL: A query language for information retrieval in XML documents. In Proceedings of the 24th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, pages 172-180, New Orleans, September 2001. [7] N. Fuhr, M. Lalmas, and S. Malik, editors. Initiative for the Evaluation of XML Retrieval. Proceedings of the Second Workshop (INEX 2003), Dagstuhl, Germany, December 2003. [8] N. Fuhr, M. Lalmas, S. Malik, and Zolt´an Szl´avik, editors. Initiative for the Evaluation of XML Retrieval. Proceedings of the Third Workshop (INEX 2004), Dagstuhl, Germany, December 2004. Published as Advances in XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J¨avelin and J. Kek¨al¨ainen. Cumulated gain-based evaluation of IR techniques. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, and B. Sigurbj¨ornsson. Length normalization in XML retrieval. In Proceedings of the 27th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, pages 80-87, Sheffield, UK, July 2004. [11] G. Kazai, M. Lalmas, and A. P. de Vries. The overlap problem in content-oriented XML retrieval evaluation. In Proceedings of the 27th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, pages 72-79, Sheffield, UK, July 2004. [12] G. Kazai, M. Lalmas, and A. P. de Vries. Reliability tests for the XCG and inex-2002 metrics. In INEX 2004 Workshop Proceedings, 2004. Published in LNCS 3493 [8]. [13] J. Kek¨al¨ainen, M. Junkkari, P. Arvola, and T. Aalto. TRIX 2004 - Struggling with the overlap. In INEX 2004 Workshop Proceedings, 2004. Published in LNCS 3493 [8]. [14] S. Liu, Q. Zou, and W. W. Chu. Configurable indexing and ranking for XML information retrieval. In Proceedings of the 27th Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, pages 88-95, Sheffield, UK, July 2004. [15] Y. Mass and M. Mandelbrod. Retrieving the most relevant XML components. In INEX 2003 Workshop Proceedings, Dagstuhl, Germany, December 2003. [16] Y. Mass and M. Mandelbrod. Component ranking and automatic query refinement for XML retrieval. In INEX 2004 Workshop Proceedings, 2004. Published in LNCS 3493 [8]. [17] P. Ogilvie and J. Callan. Hierarchical language models for XML component retrieval. In INEX 2004 Workshop Proceedings, 2004. Published in LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, and A. Vercoustre. Hybrid XML retrieval re-visited. In INEX 2004 Workshop Proceedings, 2004. Published in LNCS 3493 [8]. [19] B. Piwowarski and M. Lalmas. Providing consistent and exhaustive relevance assessments for XML retrieval evaluation. In Proceedings of the 13th ACM Conference on Information and Knowledge Management, pages 361-370, Washington, DC, November 2004. [20] S. Robertson, H. Zaragoza, and M. Taylor. Simple BM25 extension to multiple weighted fields. In Proceedings of the 13th ACM Conference on Information and Knowledge Management, pages 42-50, Washington, DC, November 2004. [21] S. E. Robertson, S. Walker, and M. Beaulieu. Okapi at TREC-7: Automatic ad-hoc, filtering, VLC and interactive track. In Proceedings of the Seventh Text REtrieval Conference, Gaithersburg, MD, November 1998. [22] A. Trotman and B. Sigurbj¨ornsson. NEXI, now and next. In INEX 2004 Workshop Proceedings, 2004. Published in LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, and P. Gallinari. An algebra for structured queries in bayesian networks. In INEX 2004 Workshop Proceedings, 2004. Published in LNCS 3493 [8].",
    "original_translation": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de elemento, frecuencias de término y otra información requerida por el algoritmo de re-ranking, como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reported - bandera booleana, inicialmente false x.children - conjunto de no El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8].",
    "error_count": 8,
    "keys": {
        "information retrieval": {
            "translated_key": "recuperación de información",
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de documentos en XML ofrece una oportunidad para que los sistemas de \"recuperación de información\" aprovechen la estructura de documentos, devolviendo componentes individuales de documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema XML de \"recuperación de información\" podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección proporciona una visión general de la \"recuperación de información\" XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de \"recuperación de información\" la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la INitiative for the Evaluation of XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología XML de \"recuperación de información\" [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de \"recuperación de información\" XML de referencia actualmente utilizado en el sistema IR MultiText, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de \"recuperación de información\" XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de elemento, frecuencias de término y otra información requerida por el algoritmo de re-ranking, como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reported - bandera booleana, inicialmente false x.children - conjunto de no El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para \"recuperación de información\" en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para XML \"recuperación de información\". En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": [
                ""
            ]
        },
        "xml ir": {
            "translated_key": [],
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de elemento, frecuencias de término y otra información requerida por el algoritmo de re-ranking, como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reported - bandera booleana, inicialmente false x.children - conjunto de no El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": []
        },
        "baseline retrieval": {
            "translated_key": "recuperación de base",
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Después de una discusión sobre el trabajo de fondo y la metodología de evaluación, un método de \"recuperación de base\" se presenta en la sección 4. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de elemento, frecuencias de término y otra información requerida por el algoritmo de re-ranking, como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reported - bandera booleana, inicialmente false x.children - conjunto de no El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": [
                ""
            ]
        },
        "inex": {
            "translated_key": "inex",
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica \"inex\"-2002. La métrica \"inex\"-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica \"inex\"-2002. Esta métrica \"inex\"-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Mientras que la métrica \"inex\"-2003 muestra anomalías indeseables [11], y no fue utilizada en 2004, los valores se reportan en la sección de evaluación para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,6 0,6 0,8 0,9 1,0 MedioPrecisión(\"inex\"-2002) b sog generalizado estricto Figura 4: Impacto de b en \"inex\"-2002 media de precisión media con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de elemento, frecuencias de término y otra información requerida por el algoritmo de re-ranking, como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reported - bandera booleana, inicialmente false x.children - conjunto de no El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,0 0,2 0,3 0,4 0,5 0,6 0,8 0,9 1,0 0,25 0,28 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(\"inex\"-2002) XMLCumulatedGain(XCG) alfa MAP (strict) MAP (generalizado) MAP (sog) XCG (sog2) nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas \"inex\"-2002 e \"inex\"-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica \"inex\"-2002 MAP junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,2 0,4 0,5 0,6 0,8 0,9 1,0 MedioPrecisión(\"inex\"-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en \"inex\"-2003 MAP (INEX 2004 se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica \"inex\"-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica \"inex\"-2003 MAP para dos cuantificaciones, con y sin consideración de superposición. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG y \"inex\"-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": [
                ""
            ]
        },
        "sog quantization": {
            "translated_key": "sog cuantization",
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones generalizadas y \"sog cuantization\" dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de elemento, frecuencias de término y otra información requerida por el algoritmo de re-ranking, como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reported - bandera booleana, inicialmente false x.children - conjunto de no El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": [
                ""
            ]
        },
        "xml cumulated gain metric": {
            "translated_key": [],
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de elemento, frecuencias de término y otra información requerida por el algoritmo de re-ranking, como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reported - bandera booleana, inicialmente false x.children - conjunto de no El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": []
        },
        "cumulated gain": {
            "translated_key": "ganancia acumulada",
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de \"ganancia acumulada\" XML, que compara la \"ganancia acumulada\" [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de elemento, frecuencias de término y otra información requerida por el algoritmo de re-ranking, como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reported - bandera booleana, inicialmente false x.children - conjunto de no El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": [
                ""
            ]
        },
        "ideal gain vector": {
            "translated_key": "vector de ganancia ideal",
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un \"vector de ganancia ideal\". Este \"vector de ganancia ideal\" se construye a partir de los juicios de relevancia eliminando la superposición y reteniendo sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de elemento, frecuencias de término y otra información requerida por el algoritmo de re-ranking, como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reported - bandera booleana, inicialmente false x.children - conjunto de no El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": [
                ""
            ]
        },
        "xcg metric reward retrieval": {
            "translated_key": [],
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de elemento, frecuencias de término y otra información requerida por el algoritmo de re-ranking, como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reported - bandera booleana, inicialmente false x.children - conjunto de no El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": []
        },
        "multitext system": {
            "translated_key": [],
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de elemento, frecuencias de término y otra información requerida por el algoritmo de re-ranking, como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reported - bandera booleana, inicialmente false x.children - conjunto de no El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": []
        },
        "re-ranking algorithm": {
            "translated_key": [
                "algoritmo de recalificación",
                "algoritmo de recalificación",
                "algoritmo de recalificación",
                "algoritmo de recalificación",
                "algoritmo de recalificación",
                "algoritmo de re-calificación",
                "algoritmo de recalificación",
                "algoritmo de recalificación",
                "algoritmo de recalificación",
                "algoritmo de recalificación",
                "algoritmo de recalificación"
            ],
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un \"algoritmo de recalificación\" ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el \"algoritmo de recalificación\" varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un \"algoritmo de recalificación\" que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un simple \"algoritmo de recalificación\" que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El \"algoritmo de recalificación\" opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud del elemento, frecuencias de término y otra información requerida por el \"algoritmo de re-calificación\", como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud del elemento x.score - puntuación actual Okapi BM25 x.reportado - bandera booleana, inicialmente falso x.niños - conjunto de El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el \"algoritmo de recalificación\", los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del \"algoritmo de recalificación\" se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del \"algoritmo de recalificación\". Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO EXTENIDO Una limitación del \"algoritmo de recalificación\" es que un solo peso α se utiliza para ajustar los puntajes tanto de los antepasados como de los descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el \"algoritmo de recalificación\" puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": [
                "algoritmo de recalificación",
                "algoritmo de recalificación",
                "algoritmo de recalificación",
                "algoritmo de recalificación",
                "algoritmo de recalificación",
                "algoritmo de re-calificación",
                "algoritmo de recalificación",
                "algoritmo de recalificación",
                "algoritmo de recalificación",
                "algoritmo de recalificación",
                "algoritmo de recalificación"
            ]
        },
        "term frequency vector": {
            "translated_key": "vector de frecuencia de término",
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de los elementos, frecuencias de término y otra información requerida por el algoritmo de recalificación, como sigue: x.f - \"vector de frecuencia de término\" x.g - ajustes de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reportado - bandera booleana, inicialmente falso x.niños - conjunto de El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": [
                ""
            ]
        },
        "priority queue": {
            "translated_key": "cola de prioridad",
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de elemento, frecuencias de término y otra información requerida por el algoritmo de re-ranking, como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reported - bandera booleana, inicialmente false x.children - conjunto de no El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada \"cola de prioridad\" PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere O(1) tiempo, y las otras operaciones requieren O(log n) tiempo, donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la \"cola de prioridad\" S que contiene la clasificación inicial, y produce los nodos de rango superior m en la \"cola de prioridad\" F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una \"cola de prioridad\" y luego añadidos de nuevo a una \"cola de prioridad\". Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": [
                ""
            ]
        },
        "time complexity": {
            "translated_key": [
                "complejidad del tiempo",
                "complejidad del tiempo",
                "complejidad temporal",
                "complejidad temporal",
                "complejidad del tiempo"
            ],
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de elemento, frecuencias de término y otra información requerida por el algoritmo de re-ranking, como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reported - bandera booleana, inicialmente false x.children - conjunto de no El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la \"complejidad del tiempo\" del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down al menos una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la \"complejidad del tiempo\" del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una \"complejidad temporal\" global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una \"complejidad temporal\" global de O(nM + mh) log n). Puesto que M ≤ h y m ≤ n, la \"complejidad del tiempo\" es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": [
                "complejidad del tiempo",
                "complejidad del tiempo",
                "complejidad temporal",
                "complejidad temporal",
                "complejidad del tiempo"
            ]
        },
        "extended tree traversal routine": {
            "translated_key": [],
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de elemento, frecuencias de término y otra información requerida por el algoritmo de re-ranking, como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reported - bandera booleana, inicialmente false x.children - conjunto de no El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": []
        },
        "xml": {
            "translated_key": "xml",
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un rango más alto. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: rango X por Y donde X es una sub-consulta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-consultas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $\"xml\" donde el operador de $ dentro de una cadena cotizada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de elemento, frecuencias de término y otra información requerida por el algoritmo de re-ranking, como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reported - bandera booleana, inicialmente false x.children - conjunto de no El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": [
                ""
            ]
        },
        "rank": {
            "translated_key": [
                "rango",
                "rank"
            ],
            "translated_annotated_text": "Controlando la superposición en la recuperación XML orientada al contenido Charles L. A. Clarke School of Computer Science, University of Waterloo, Canada claclark@plg.uwaterloo.ca RESUMEN La aplicación directa de técnicas de clasificación estándar para recuperar elementos individuales de una colección de documentos XML a menudo produce un resultado en el que las categorías superiores están dominadas por un gran número de elementos tomados de un pequeño número de documentos altamente relevantes. Este artículo presenta y evalúa un algoritmo que recalifica este conjunto de resultados, con el objetivo de minimizar el contenido redundante, preservando al mismo tiempo los beneficios de la recuperación de elementos, incluyendo el beneficio de identificar los componentes centrados en temas contenidos en los documentos pertinentes. La colección de pruebas desarrollada por la INitiative for the Evaluation of XML Retrieval (INEX) constituye la base de la evaluación. Categorías y Descriptores de Asunto H.3.3 [Sistemas de Información]: Almacenamiento de Información e Información de Recuperación Búsqueda y Recuperación Términos generales Algoritmos, Medición, Rendimiento, Experimentación 1. INTRODUCCIÓN La representación de los documentos en XML ofrece una oportunidad para que los sistemas de recuperación de información aprovechen la estructura de los documentos y devuelvan los componentes individuales de los documentos cuando proceda, en lugar de documentos completos en todas las circunstancias. En respuesta a una consulta del usuario, un sistema de recuperación de información XML podría devolver una mezcla de párrafos, secciones, artículos, entradas bibliográficas y otros componentes. Este servicio es especialmente beneficioso cuando una colección contiene documentos muy largos, como manuales de productos o libros, en los que el usuario debe dirigirse a las partes más relevantes de estos documentos. <article> <fm> <atl>Compresión de texto para bases de datos de documentos dinámicos</atl> <au>Alistair Moffat</au> <au>Justin Zobel</au> <au>Neil Sharman</au> <absÃ3pÃ3b>Abstract</b>Para...</pÃ3n La Figura 1 proporciona un ejemplo de un artículo de revista codificado en XML, que ilustra muchas de las características importantes de los documentos XML. Las etiquetas indican el comienzo y el final de cada elemento, con elementos que varían ampliamente en tamaño, de una palabra a miles de palabras. Algunos elementos, como párrafos y secciones, pueden presentarse razonablemente al usuario como resultados de recuperación, pero otros no son apropiados. Los elementos se superponen: los artículos contienen secciones, las secciones contienen subsecciones y las subsecciones contienen párrafos. Cada una de estas características afecta al diseño de un sistema XML IR, y cada una conduce a problemas fundamentales que deben ser resueltos en un sistema exitoso. La mayoría de estos problemas fundamentales se pueden resolver mediante una cuidadosa adaptación de las técnicas estándar de IR, pero los problemas causados por la superposición son exclusivos de esta área [4,11] y forman el foco principal de este artículo. El artículo de la figura 1 puede verse como un árbol XML, como se ilustra en la figura 2. Formalmente, una colección de documentos XML puede representarse como un bosque de árboles ordenados y enraizados, formado por un conjunto de nodos N y un conjunto de bordes dirigidos E que conectan estos nodos. Para cada nodo x • N, la notación x.parent se refiere al nodo padre de x, si existe, y la notación x.children se refiere al conjunto de nodos hijos sec bdyfm atl au au au abs p b st ip1 sec st ss1 st artículo p Figura 2: Ejemplo árbol XML. de x. Dado que un elemento puede ser representado por el nodo en su raíz, la salida de un sistema IR XML puede ser vista como una lista clasificada de los nodos superiores m. La aplicación directa de una técnica estándar de clasificación de relevancia a un conjunto de elementos XML puede producir un resultado en el que los rangos superiores están dominados por muchos elementos relacionados estructuralmente. Es probable que una sección de puntuación alta contenga varios párrafos de puntuación alta y que esté contenida en un artículo de puntuación alta. Por ejemplo, muchos de los elementos de la figura 2 recibirían una puntuación alta en los algoritmos de compresión de índice de texto de consulta de palabras clave. Si cada uno de estos elementos se presenta a un usuario como un resultado individual y separado, puede perder mucho tiempo revisando y rechazando el contenido redundante. Una posible solución es reportar sólo el elemento de puntuación más alto a lo largo de un camino dado en el árbol, y eliminar de las filas inferiores cualquier elemento que lo contenga, o contenido dentro de él. Desafortunadamente, este enfoque destruye algunos de los posibles beneficios de XML IR. Por ejemplo, un elemento externo puede contener una cantidad sustancial de información que no aparece en un elemento interno, pero el elemento interno puede estar muy centrado en el tema de consulta y proporcionar una breve visión general de los conceptos clave. En tales casos, es razonable informar de los elementos que contienen o están contenidos en elementos de mayor rango. Incluso cuando todo un libro es relevante, es posible que un usuario desee tener los párrafos más importantes resaltados, para guiar su lectura y para ahorrar tiempo [6]. Este artículo presenta un método para controlar la superposición. Comenzando con una clasificación inicial de elementos, un algoritmo de recalificación ajusta las puntuaciones de los elementos de menor clasificación que contienen, o están contenidos dentro de, elementos de mayor clasificación, reflejando el hecho de que esta información puede ahora ser redundante. Por ejemplo, una vez que un elemento que representa una sección aparece en el ranking, se reducen los puntajes de los párrafos que contiene y el artículo que lo contiene. La inspiración de esta estrategia proviene en parte del trabajo reciente sobre la recuperación de documentos estructurados, donde los términos que aparecen en diferentes campos, como el título y el cuerpo, se dan diferentes pesos [20]. Al extender ese enfoque, el algoritmo de re-calificación varía los pesos dinámicamente a medida que se procesan los elementos. El resto del documento se organiza de la siguiente manera: Tras un examen de la labor de base y la metodología de evaluación, en la sección 4 se presenta un método de recuperación de la base de referencia. Este método de referencia representa una adaptación razonable de la tecnología IR estándar a XML. A continuación, en la sección 5 se esboza una estrategia para controlar la superposición, utilizando el método de referencia como punto de partida. En la sección 6 se presenta un algoritmo de recalificación que implementa esta estrategia y se evalúa en la sección 7. La Sección 8 discute una versión extendida del algoritmo. 2. ANTECEDENTES Esta sección ofrece una visión general de la recuperación de información XML y discute el trabajo relacionado, con énfasis en los problemas fundamentales mencionados en la introducción. Gran parte de la investigación en el ámbito de la recuperación de XML lo ve desde una perspectiva de base de datos tradicional, preocupado por problemas tales como la implementación de lenguajes de consulta estructurados [5] y el procesamiento de uniones [1]. Aquí, tomamos un enfoque IR orientado al contenido, centrándose en documentos XML que contienen principalmente datos de lenguaje natural y consultas que se expresan principalmente en lenguaje natural. Asumimos que estas consultas sólo indican la naturaleza del contenido deseado, no su estructura, y que el papel del sistema IR es determinar qué elementos satisfacen mejor la necesidad de información subyacente. Otras investigaciones de IR han considerado consultas mixtas, en las que se especifican tanto el contenido como los requisitos estructurales [2,6,14,17,23]. 2.1 Estadísticas de términos y documentos En las aplicaciones tradicionales de recuperación de información, la unidad estándar de recuperación se considera el documento. Dependiendo de la aplicación, este término podría interpretarse para abarcar muchos objetos diferentes, incluyendo páginas web, artículos de periódicos y mensajes de correo electrónico. Al aplicar técnicas estándar de clasificación de relevancia en el contexto de XML IR, un enfoque natural es tratar cada elemento como un documento separado, con estadísticas de término disponibles para cada [16]. Además, la mayoría de las técnicas de clasificación requieren estadísticas mundiales (por ejemplo: frecuencia inversa del documento) calculada sobre la colección en su conjunto. Si consideramos que esta colección incluye todos los elementos que podría devolver el sistema, puede aparecer una aparición específica de un término en varios documentos diferentes, tal vez en elementos que representan un párrafo, una subsección, una sección y un artículo. No procede calcular la frecuencia inversa de los documentos partiendo del supuesto de que el término está contenido en todos estos elementos, ya que el número de elementos que contienen un término depende enteramente de la disposición estructural de los documentos [13,23]. 2.2 Elementos recuperables Aunque un sistema IR XML podría potencialmente recuperar cualquier elemento, muchos elementos pueden no ser apropiados como resultados de recuperación. Este suele ser el caso cuando los elementos contienen muy poco texto [10]. Por ejemplo, un título de sección que contenga sólo los términos de consulta puede recibir una puntuación alta de un algoritmo de clasificación, pero solo sería de valor limitado para un usuario, que podría preferir la sección real en sí. Otros elementos pueden reflejar la estructura física de los documentos, en lugar de lógica, que puede tener poco o ningún significado para un usuario. Un sistema XML IR eficaz solo debe devolver aquellos elementos que tengan contenido suficiente para ser utilizables y que puedan permanecer solos como objetos independientes [15,18]. Los componentes de documentos estándar, como párrafos, secciones, subsecciones y resúmenes, suelen cumplir estos requisitos; los títulos, las frases en cursiva y los campos de metadatos individuales a menudo no lo hacen. 2.3 Metodología de evaluación En los últimos tres años, la iniciativa para la evaluación de XML Retrieval (INEX) ha fomentado la investigación sobre la tecnología de recuperación de información XML [7,8]. INEX es una serie de conferencias experimentales, similares a TREC, con grupos de diferentes instituciones que completan una o más tareas experimentales utilizando sus propias herramientas y sistemas, y comparando sus resultados en la propia conferencia. Más de 50 grupos participaron en INEX 2004, y la conferencia se ha vuelto tan influyente en el área de XML IR como el TREC en otras áreas IR. La investigación descrita en este trabajo, así como gran parte del trabajo relacionado que cita, depende de las colecciones de pruebas desarrolladas por INEX. La superposición causa problemas considerables con la evaluación de la recuperación, y los organizadores y participantes del INEX han luchado con estos problemas desde el principio. Si bien se han logrado progresos sustanciales, este problema todavía no se ha resuelto por completo. Kazai y otros [11] proporcionar una exposición detallada del problema de superposición en el contexto de la evaluación de recuperación INEX y discutir tanto las métricas de evaluación actuales como las propuestas. Muchas de estas métricas se aplican para evaluar los experimentos reportados en este artículo, y se describen brevemente en la siguiente sección. 3. INEX 2004 Las limitaciones de espacio impiden la inclusión de más de un breve resumen de las tareas y la metodología de evaluación del INEX 2004. Para obtener información detallada, conviene consultar los trabajos de la propia conferencia [8]. 3.1 Tareas Para las principales tareas experimentales, entre 1995 y 2002 se proporcionó a los participantes del INEX 2004 una colección de 12.107 artículos extraídos de las revistas y revistas del IEEE Computer Societies. Cada documento está codificado en XML utilizando un DTD común, con el documento de las figuras 1 y 2 proporcionando un ejemplo. En el INEX 2004, las dos principales tareas experimentales fueron ambas tareas de recuperación adhoc, investigando el rendimiento de los sistemas de búsqueda de una colección estática utilizando temas previamente invisibles. Las dos tareas diferían en los tipos de temas que utilizaban. Para una tarea, la tarea de sólo contenido o CO, los temas consisten en breves declaraciones en lenguaje natural sin referencia directa a la estructura de los documentos de la colección. Para esta tarea, se requiere el sistema IR para seleccionar los elementos a devolver. Para la otra tarea, la tarea de contenido y estructura o CAS, los temas están escritos en un lenguaje de consulta XML [22] y contienen referencias explícitas a la estructura de documentos, que el sistema IR debe intentar satisfacer. Dado que el trabajo descrito en este artículo está dirigido a la tarea de contenido único, donde el sistema IR no recibe ninguna orientación sobre los elementos a devolver, la tarea CAS es ignorada en el resto de nuestra descripción. En 2004, los organizadores de la conferencia seleccionaron 40 nuevos temas de CO a partir de las contribuciones de los participantes en la conferencia. Cada tema incluye una breve consulta de palabras clave, que cada grupo participante ejecuta sobre la colección en su propio sistema XML IR. Cada grupo podría presentar hasta tres carreras experimentales consistentes en la parte superior m = 1500 elementos para cada tema. 3.2 Evaluación de la relevancia Dado que XML IR se ocupa de localizar aquellos elementos que proporcionan una cobertura completa de un tema mientras contienen tan poca información extraña como sea posible, los juicios simples relevantes vs. no relevantes no son suficientes. En cambio, los organizadores del INEX adoptaron dos dimensiones para la evaluación de la relevancia: La dimensión de la exhaustividad refleja el grado en que un elemento cubre el tema, y la dimensión de especificidad refleja el grado en que un elemento se centra en el tema. En ambas dimensiones se utiliza una escala de cuatro puntos. Así, un elemento (3,3) es altamente exhaustivo y muy específico, un elemento (1,3) es marginalmente exhaustivo y muy específico, y un elemento (0,0) no es relevante. Se puede encontrar información adicional sobre la metodología de evaluación en Piwowarski y Lalmas [19], que proporcionan una justificación detallada. 3.3 Métricas de evaluación La métrica de evaluación de principio utilizada en el INEX 2004 es una versión de precisión media (MAP), ajustada por diversas funciones de cuantificación para dar diferentes pesos a diferentes elementos, dependiendo de su exhaustividad y valores de especificidad. Una variante, la función de cuantificación estricta da un peso de 1 a (3,3) elementos y un peso de 0 a todos los demás. Esta variante es esencialmente el valor MAP familiar, con (3,3) elementos tratados como relevantes y todos los demás elementos tratados como no relevantes. Otras funciones de cuantificación están diseñadas para dar crédito parcial a elementos que están cerca de fallas, debido a una falta o exhaustividad y/o especificidad. Tanto la función de cuantificación generalizada como la generalización orientada a la especificidad (sog) funcionan elementos de crédito según su grado de relevancia [11], con la segunda función poniendo mayor énfasis en la especificidad. Este artículo reporta los resultados de esta métrica usando las tres funciones de cuantificación. Desde que esta métrica se introdujo por primera vez en el INEX 2002, generalmente se conoce como la métrica inex-2002. La métrica inex-2002 no penaliza la superposición. En particular, tanto las funciones de cuantificación generalizada y sog dan crédito parcial a una falta cercana incluso cuando un elemento (3,3) que se superpone se informa en un \"rango\" superior. Para abordar este problema, Kazai et al. [11] proponen una métrica de ganancia acumulada XML, que compara la ganancia acumulada [9] de una lista clasificada con un vector de ganancia ideal. Este vector de ganancia ideal se construye a partir de los juicios de relevancia al eliminar la superposición y retener sólo el mejor elemento a lo largo de un camino dado. Por lo tanto, la métrica XCG recompensas de recuperación se ejecuta que evitan la superposición. Aunque XCG no se utilizó oficialmente en el INEX 2004, es probable que en el futuro se utilice una versión del mismo. En el INEX 2003 se introdujo otra métrica para mejorar las limitaciones percibidas de la métrica inex-2002. Esta métrica de inex-2003 amplía las definiciones de precisión y memoria para considerar tanto el tamaño de los componentes reportados como la superposición entre ellos. Se crearon dos versiones, una que consideraba sólo el tamaño de los componentes y otra que consideraba tanto el tamaño como la superposición. Si bien la métrica de inex-2003 presenta anomalías indeseables [11], y no se utilizó en 2004, en la sección de evaluación se informa de los valores para proporcionar un instrumento adicional para investigar la superposición. 4. MÉTODO DE RETRIEVACIÓN BASELINE Esta sección proporciona una visión general del método de recuperación de información XML de referencia utilizado actualmente en el sistema MultiText IR, desarrollado por el Grupo de Recuperación de Información de la Universidad de Waterloo [3]. Este método de recuperación resulta de la adaptación y afinación de la medida Okapi BM25 [21] a la tarea de recuperación de información XML. El sistema MultiText se realizó de manera respetable en INEX 2004, colocando en el top ten bajo todas las funciones de cuantificación, y colocando primero cuando la función de cuantificación enfatizaba la exhaustividad. Para soportar la recuperación de XML y otros tipos de documentos estructurados, el sistema proporciona consultas generalizadas del formulario: \"rank\" X by Y donde X es una sub-pregunta especificando un conjunto de elementos de documento a clasificar y Y es un vector de sub-preguntas especificando términos de recuperación individuales. Para nuestras ejecuciones INEX 2004, la sub-pregunta X especificó una lista de elementos recuperables como aquellos con nombres de etiquetas como sigue: abs app article bb bdy bm fig fm ip1 li p sec ss1 ss2 vt Esta lista incluye entradas bibliográficas (bb) y subtítulos de figuras (fig), así como párrafos, secciones y subsecciones. Antes de INEX 2004, la colección INEX y los juicios de relevancia INEX 2003 fueron analizados manualmente para seleccionar estos nombres de etiquetas. Los nombres de las etiquetas se seleccionaron sobre la base de su frecuencia en la colección, el tamaño medio de sus elementos asociados y el número relativo de juicios de relevancia positiva que recibieron. La automatización de este proceso de selección está planeada como trabajo futuro. Para el INEX 2004, el término vector Y se deriva del tema dividiendo frases en palabras individuales, eliminando palabras de parada y términos negativos (los que comienzan con -), y aplicando un paralelismo. Por ejemplo, keyword field of topic 166 +tree edit distance + XML -image se convirtió en la consulta de cuatro plazos $tree $edit $distancia $xml donde el operador de $ dentro de una cadena citada se basa en el término que lo sigue. Nuestra implementación de Okapi BM25 se deriva de la fórmula de Robertson et al. [21] estableciendo parámetros k2 = 0 y k3 =. Dado un conjunto de términos Q, a un elemento x se le asigna la puntuación t+Q w(1) qt (k1 + 1)xt K + xt (1) donde w(1) = log i D − Dt + 0,5 Dt + 0,5 ¢ D = número de documentos en el corpus Dt = número de documentos que contienen t qt = frecuencia que t ocurre en el tema xt = frecuencia que t ocurre Antes del INEX 2004, los temas y juicios del INEX 2003 fueron utilizados para afinar los parámetros b y k1, y el impacto de esta afinación se discute más adelante en esta sección. A los efectos de calcular las estadísticas a nivel de documento (D, Dt y lavg), un documento se define como un artículo. Estas estadísticas se utilizan para clasificar todos los tipos de elementos. Siguiendo la sugerencia de Kamps et al. [10], los resultados de recuperación se filtran para eliminar elementos muy cortos, aquellos de menos de 25 palabras de longitud. Se podría poner en tela de juicio el uso de estadísticas de artículos para todos los tipos de elementos. Este enfoque puede justificarse considerando la colección como un conjunto de artículos que deben buscarse utilizando técnicas normalizadas orientadas a la documentación, en las que sólo se pueden devolver artículos. La puntuación calculada para un elemento es esencialmente la puntuación que recibiría si se agregara a la colección como un nuevo documento, ignorando los pequeños ajustes necesarios para las estadísticas a nivel de documento. No obstante, tenemos previsto volver a examinar esta cuestión en el futuro. En nuestra experiencia, el rendimiento de BM25 normalmente se beneficia de la afinación de los parámetros b y k1 a la colección, siempre que las consultas de formación están disponibles para este propósito. Antes del INEX 2004, formamos el sistema MultiText utilizando las consultas del INEX 2003. Como punto de partida utilizamos los valores b = 0,75 y k1 = 1,2, que funcionan bien en las colecciones de adhoc TREC y se utilizan como valores predeterminados en nuestro sistema. Los resultados fueron sorprendentes. La Figura 3 muestra el resultado de la variación de k1 con b = 0,75 en los valores de MAP bajo tres funciones de cuantificación. En nuestra experiencia, los valores óptimos para k1 están típicamente en el rango 0,0 a 2.0. En este caso, se requieren grandes valores para un buen rendimiento. Entre k1 = 1,0 y k1 = 6,0 MAP aumenta en más de 15% bajo la cuantificación estricta. Mejoras similares se observan en las cuantificaciones generalizadas y sog. En contraste, nuestro valor predeterminado de b = 0,75 funciona bien bajo todas las funciones de cuantificación (figura 4). Después de sintonizar un amplio rango de valores bajo varias funciones de cuantificación, seleccionamos valores de k = 10.0 y b = 0.80 para nuestros experimentos INEX 2004, y estos valores se utilizan para los experimentos reportados en la sección 7. 0,07 0,08 0,09 0,10 0,11 0,11 0,13 0,14 0,15 0,0 0,2 0,3 0,4 0,5 0,7 0,8 0,9 1,0 MedioPrecisión(inex-2002) b sog generalizado estricto Figura 4: Impacto de b en inex-2002 media de precisión con k1 = 10 (INEX 2003 CO tópicos). 5. CONTROLAR OVERLAP A partir de un ranking de elementos generado por el método de base descrito en la sección anterior, los elementos se vuelven a clasificar para controlar la superposición mediante el ajuste iterativo de los puntajes de los elementos que contienen o están contenidos en elementos de mayor rango. En el plano conceptual, la nueva clasificación de los productos es la siguiente: 1. Informe del elemento de mayor rango. 2. Ajustar las puntuaciones de los elementos no notificados. 3. Repita los pasos 1 y 2 hasta que se notifiquen los elementos m. Un enfoque para ajustar las puntuaciones de los elementos no notificados en el paso 2 podría basarse en las puntuaciones de Okapi BM25 de los elementos involucrados. Por ejemplo, supongamos que un párrafo con puntuación p es reportado en el paso 1. En el paso 2, la sección que contiene el párrafo podría entonces bajar su puntuación en una cantidad α · p para reflejar la contribución reducida que el párrafo debe hacer a la puntuación de las secciones. En un contexto relacionado, Robertson et al. [20] argumentan fuertemente en contra de la combinación lineal de los puntajes de Okapi de esta manera. Ese trabajo considera el problema de asignar diferentes pesos a diferentes campos de documentos, como el título y el cuerpo asociado a las páginas web. Un enfoque común a este problema anota el título y el cuerpo por separado y genera una puntuación final como una combinación lineal de los dos. Robertson et al. discutir las fallas teóricas en este enfoque y demostrar experimentalmente que en realidad puede dañar la eficacia de recuperación. En su lugar, aplican los pesos en el nivel de frecuencia del término, con una ocurrencia de un término de consulta t en el título haciendo una mayor contribución a la puntuación que una ocurrencia en el cuerpo. En la ecuación 1, xt se convierte en α0 · yt + α1 · zt, donde yt es el número de veces t ocurre en el título y zt es el número de veces t ocurre en el cuerpo. Al traducir este enfoque a nuestro contexto, la contribución de los términos que aparecen en los elementos se reduce dinámicamente a medida que se informa de ellos. La siguiente sección presenta y analiza un algoritmo simple de recalificación que sigue esta estrategia. El algoritmo se evalúa experimentalmente en la sección 7. Una limitación del algoritmo es que la contribución de los términos que aparecen en los elementos reportados se reduce en el mismo factor independientemente del número de elementos reportados en los que aparece. En la sección 8 el algoritmo se extiende para aplicar pesos crecientes, bajando la puntuación, cuando un término aparece en más de un elemento reportado. 6. ALGORITMO DE REGISTRO El algoritmo de reordenamiento opera sobre árboles XML, como el que aparece en la figura 2. La entrada al algoritmo es una lista de n elementos clasificados de acuerdo a sus puntuaciones iniciales BM25. Durante la clasificación inicial, el árbol XML se reconstruye dinámicamente para incluir sólo aquellos nodos con puntuaciones BM25 no nulas, por lo que n puede ser considerablemente menor que N. La salida del algoritmo es una lista de los elementos m superiores, clasificados de acuerdo a sus puntuaciones ajustadas. Un elemento está representado por el nodo x • N en su raíz. Los campos asociados a este nodo son campos que almacenan la longitud de elemento, frecuencias de término y otra información requerida por el algoritmo de re-ranking, como sigue: x.f - vector de frecuencia de término x.g - ajuste de frecuencia de término x.l - longitud de elemento x.score - puntuación actual Okapi BM25 x.reported - bandera booleana, inicialmente false x.children - conjunto de no El vector x.f contiene información de frecuencia de término correspondiente a cada término en la consulta. El vector x.g es inicialmente cero y es actualizado por el algoritmo como los elementos son reportados. El campo de puntuación contiene la puntuación BM25 actual para el elemento, que cambiará como los valores en x.g cambian. La puntuación se calcula utilizando la ecuación 1, con el valor xt para cada término determinado por una combinación de los valores en x.f y x.g. Dado un término t • Q, dejar que ft sea el componente de x.f correspondiente a t, y dejar que gt sea el componente de x.g correspondiente a t, entonces: xt = ft − α · gt (2) Para el procesamiento por el algoritmo de recalificación, los nodos se almacenan en colas de prioridad, ordenadas por puntuación decreciente. Cada cola de prioridad PQ soporta tres operaciones: PQ.front() - devuelve el nodo con mayor puntuación PQ.add (x) - añade nodo x a la cola PQ.remove(x) - elimina el nodo x de la cola Cuando se implementa utilizando estructuras de datos estándar, la operación frontal requiere tiempo O(1), y las otras operaciones requieren tiempo O(log n), donde n es el tamaño de la cola. El núcleo del algoritmo de recalificación se presenta en la figura 5. El algoritmo toma como entrada la cola de prioridad S que contiene la clasificación inicial, y produce los nodos de rango superior m en la cola de prioridad F. Después de inicializar F para estar vacío en la línea 1, el algoritmo loops m veces sobre las líneas 215, transfiriendo al menos un nodo de S a F durante cada iteración. Al comienzo de cada iteración, el nodo no declarado en la parte delantera de S tiene la mayor puntuación ajustada, y se elimina y se añade a F. El algoritmo luego atraviesa el 1 F ← فارسى 2 para i ← 1 para m hacer 3 x ← S.front() 4 S.remove(x) 5 x.reportado ← true 6 F.add(x) 7 8 foreach y.» 2 S.remove(y) 3 y.g ← y.g + x.f − x.g 4 recompute y.score 5 S.remove(y) 6 si y no es un nodo raíz entonces 7 Up (x, y.parent) 8 end si 9 10 Down(x) 11 si no x.reported entonces 12 S.remove(x) 14 x.g 0,0 0,02 0,04 0,06 0,08 0,10 0,10 0,14 0,16 0,0 0,2 0,30 0,4 0,6 0,7 0,9 1,0 0,20 0,26 0,29 0,31 0,31 0,32 0,33 0,34 0,35 0,36 MedioPrecisión(inex-2002) XMLCumulatedGain(XCG) alfa MAP (stricto) MAP (generalizado) MAP (sog) XCG (s nodos antepasados (líneas 8-10) y descendientes (líneas 12-14) ajustando las puntuaciones de estos nodos. Las rutinas transversales del árbol, arriba y abajo se dan en la figura 6. La rutina Up elimina cada nodo ancestro de S, ajusta sus valores de frecuencia de término, recomputa su puntuación y lo añade de nuevo a S. El ajuste de los valores de frecuencia de término (línea 3) se suma a y.g sólo las ocurrencias de término no declaradas anteriormente en x. La recomputación de la puntuación en la línea 4 utiliza ecuaciones 1 y 2. La rutina de Down realiza una operación similar en cada descendiente. Sin embargo, dado que el contenido de cada descendiente está totalmente contenido en un elemento reportado, su puntuación final puede ser computada, y se elimina de S y se añade a F. Para determinar la complejidad temporal del algoritmo, primero tenga en cuenta que un nodo puede ser un argumento a Down como máximo una vez. A partir de entonces, la bandera reportada de sus padres es verdadera. Durante cada llamada a Down se puede mover un nodo de S a F, requiriendo O(log n) tiempo. Por lo tanto, el tiempo total para todas las llamadas a Down es O(n log n), y podemos ignorar temporalmente las líneas 8-10 de la figura 5 al considerar la complejidad temporal del bucle sobre las líneas 2-15. Durante cada iteración de este bucle, un nodo y cada uno de sus antepasados son eliminados de una cola de prioridad y luego añadidos de nuevo a una cola de prioridad. Dado que un nodo puede tener como máximo h antepasados, donde h es la altura máxima de cualquier árbol en la colección, cada una de las iteraciones m requiere O(h log n) tiempo. La combinación de estas observaciones produce una complejidad temporal global de O(n + mh) log n). En la práctica, la recalificación de un conjunto de resultados INEX requiere menos de 200 ms en un PC de escritorio de tres años. 7. EVALUACIÓN Ninguna de las métricas descritas en la sección 3.3 encaja estrechamente con la visión de superposición preconizada por este documento. Sin embargo, cuando se toman en conjunto proporcionan una visión del comportamiento del algoritmo de recalificación. Los paquetes de evaluación INEX (inex_eval e inex_eval_ng) se utilizaron para calcular los valores de las métricas inex-2002 e inex-2003. Los valores de las métricas XCG se computaron utilizando software suministrado por sus inventores [11]. La Figura 7 traza las tres variantes de la métrica MAP inex-2002 junto con la métrica XCG. Valores para estas métricas 0,0 0,02 0,04 0,06 0,08 0,10 0,12 0,14 0,16 0,18 0,20 0,10 0,10 0,3 0,4 0,6 0,8 0,9 1,0 MedioPrecisión(inex-2003) alfa estricta, superposición no considerada estricta, superposición considerada generalizada, superposición no considerada generalizada, superposición considerada Figura 8: Impacto de α en inex-2003 MAP (INEX 2004 CO tópicos se trazan para valores de α entre 0,0 y 1,0. Recordando que la métrica XCG está diseñada para penalizar la superposición, mientras que la métrica inex-2002 ignora la superposición, el conflicto entre las métricas es obvio. Los valores MAP en un extremo (α = 0,0) y el valor XCG en el otro extremo (α = 1,0) representan un rendimiento de recuperación comparable a los mejores sistemas en INEX 2004 [8,12]. Figura 8 parcelas valores de la métrica MAP inex-2003 para dos cuantificaciones, con y sin consideración de solapamiento. Una vez más, el conflicto es evidente, con la influencia de α disminuido sustancialmente cuando se considera la superposición. 8. ALGORITMO AMPLIADO Una limitación del algoritmo de recalificación es que un solo peso α se utiliza para ajustar los puntajes de los antepasados y descendientes de los elementos reportados. Una extensión obvia es utilizar diferentes pesos en estos dos casos. Además, se utiliza el mismo peso independientemente del número de veces que un elemento esté contenido en un elemento informado. Por ejemplo, un párrafo puede formar parte de una sección de la que se informa y luego formar parte de un artículo de la que se informa. Dado que el usuario puede haber visto este párrafo dos veces, su puntuación debe reducirse aún más aumentando el valor del peso. Motivado por estas observaciones, el algoritmo de recalificación puede ampliarse con una serie de pesos 1 = β0 ≥ β1 ≥ β2 ≥... ≥ βM ≥ 0. donde βj es el peso aplicado a un nodo que ha sido descendiente de un nodo notificado j veces. Tenga en cuenta que un límite superior en M es h, la altura máxima de cualquier árbol XML en la colección. Sin embargo, en la práctica es probable que la M sea relativamente pequeña (quizás 3 ó 4). La Figura 9 presenta reemplazos para las rutinas Up and Down de la Figura 6, incorporando esta serie de pesos. Se requiere un campo adicional en cada nodo, como sigue: x.j - cuenta descendente El valor de x.j se establece inicialmente en cero en todos los nodos y se incrementa cada vez que Down se llama con x como su argumento. Cuando se calcula la puntuación del nodo, el valor de x.j selecciona 1 Up(x, y) 2 si no es y.reportado entonces 3 S.remove(y) 4 y.g ← y.g + x.f − x.g 5 recompute y.score 6 S.add(y) 8 si y no es un nodo raíz entonces 9 Up (x, y.parent) 10 el peso que debe aplicarse al nodo ajustando el valor de xt en la ecuación 1, de la siguiente manera: xt = βx.j · (ft − α · gt) (3) donde pies y gt son los componentes de x.f y x.g correspondientes al término t. Se requieren algunos cambios adicionales para extender hacia arriba y hacia abajo. La rutina Up regresa inmediatamente (línea 2) si su argumento ya ha sido reportado, ya que las frecuencias de término ya han sido ajustadas en sus antepasados. La rutina de Down no reporta su argumento, sino que recomputa su puntaje y lo añade de nuevo a S. Un nodo no puede ser un argumento a Down más de M + 1 veces, lo que a su vez implica una complejidad global del tiempo de O(nM + mh) log n). Dado que M ≤ h y m ≤ n, la complejidad del tiempo es también O(nh log n). 9. CONCLUSIÓN DE DISCUSIÓN Al generar resultados de recuperación a través de una colección XML, algunos solapamientos en los resultados deben ser tolerados y pueden ser beneficiosos. Por ejemplo, cuando un elemento altamente exhaustivo y bastante específico (3,2) contiene un elemento mucho más pequeño (2,3), ambos deben ser reportados al usuario, y algoritmos de recuperación y métricas de evaluación deben respetar esta relación. El algoritmo presentado en este artículo se superpone al ponderar los términos que ocurren en los elementos reportados para reflejar su menor importancia. Otros enfoques también pueden ayudar a controlar la superposición. Por ejemplo, cuando los resultados de recuperación XML se presentan a los usuarios puede ser conveniente agrupar elementos estructuralmente relacionados, ilustrando visualmente las relaciones entre ellos. Si bien este estilo de interfaz de usuario puede ayudar a un usuario a hacer frente a la superposición, la estrategia presentada en este documento sigue siendo aplicable, determinando los mejores elementos para incluir en cada clúster. En Waterloo, continuamos desarrollando y probando nuestras ideas para INEX 2005. En particular, estamos investigando métodos para aprender los pesos α y βj. También estamos reevaluando nuestro enfoque para documentar estadísticas y examinando ajustes apropiados al parámetro k1 a medida que cambian los pesos de término [20]. 10. AGRADECIMIENTOS Gracias a Gabriella Kazai y Arjen de Vries por proporcionar una versión temprana de su software para la computación de la métrica XCG, y gracias a Phil Tilker y Stefan B ̈uttcher por su ayuda con la evaluación experimental. En parte, la financiación de este proyecto fue proporcionada por IBM Canada a través del Instituto Nacional de Investigación de Software. 11. REFERENCIAS [1] N. Bruno, N. Koudas y D. Srivastava. Se une una ramita holística: coincidencia óptima de patrones XML. En Actas de la Conferencia Internacional de la ACM SIGMOD sobre la Gestión de Datos, 2002, págs. 310 a 321, Madison, Wisconsin, junio de 2002. [2] D. Carmel, Y. S. Maarek, M. Mandelbrod, Y. Misa, y A. Soffer. Búsqueda de documentos XML a través de fragmentos XML. En Actas de la 26a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 151 a 158, Toronto, Canadá, 2003. [3] C. L. A. Clarke y P. L. Tilker. Experimentos multitexto para INEX 2004. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [4] A. P. de Vries, G. Kazai y M. Lalmas. Tolerancia a la irrelevancia: Una evaluación orientada al usuario-esfuerzo de los sistemas de recuperación sin unidad de recuperación predefinida. En RIAO 2004 Conference Proceedings, págs. 463-473, Avignon (Francia), abril de 2004. [5] D. DeHaan, D. Toman, M. P. Consens, y M. T. ̈Ozsu. Una traducción completa de XQuery a SQL usando codificación de intervalos dinámicos. En Actas de la Conferencia Internacional de 2003 de la ACM SIGMOD sobre el Manejo de Datos, San Diego, junio de 2003. [6] N. Fuhr y K. Großjohann. XIRQL: Un lenguaje de consulta para la recuperación de información en documentos XML. En Actas de la 24a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, págs. 172 a 180, Nueva Orleans, septiembre de 2001. [7] N. Fuhr, M. Lalmas, y S. Malik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Segundo Taller (INEX 2003), Dagstuhl (Alemania), diciembre de 2003. [8] N. Fuhr, M. Lalmas, S. Malik, y Zolt ́an Szl ́avik, editores. Iniciativa para la evaluación de la recuperación de XML. Actas del Tercer Curso Práctico (INEX 2004), Dagstuhl (Alemania), diciembre de 2004. Publicado como Avances en XML Information Retrieval, Lecture Notes in Computer Science, volume 3493, Springer, 2005. [9] K. J ̈avelin y J. Kek ̈al ̈ainen. Evaluación acumulada basada en ganancias de las técnicas de IR. ACM Transactions on Information Systems, 20(4):422-446, 2002. [10] J. Kamps, M. de Rijke, y B. Sigurbj ̈ornsson. Normalización de longitud en la recuperación XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 80-87, Sheffield, Reino Unido, julio de 2004. [11] G. Kazai, M. Lalmas, y A. P. de Vries. El problema de superposición en la evaluación de recuperación XML orientada al contenido. En Actas de la 27a Conferencia Internacional de la ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de la Información, páginas 72-79, Sheffield, Reino Unido, julio de 2004. [12] G. Kazai, M. Lalmas, y A. P. de Vries. Pruebas de fiabilidad para las métricas XCG e inex-2002. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [13] J. Kek ̈al ̈ainen, M. Junkkari, P. Arvola y T. Aalto. TRIX 2004 - Luchando con la superposición. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [14] S. Liu, Q. Zou y W. W. Chu. indexación configurable y clasificación para la recuperación de información XML. En Actas de la 27a Conferencia Internacional de ACM SIGIR sobre Investigación y Desarrollo en la Recuperación de Información, páginas 88-95, Sheffield, Reino Unido, julio de 2004. [15] Y. Mass y M. Mandelbrod. Recuperando los componentes XML más relevantes. En el curso práctico INEX 2003, Dagstuhl (Alemania), diciembre de 2003. [16] Y. Mass y M. Mandelbrod. Clasificación de componentes y refinamiento automático de la consulta para la recuperación XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [17] P. Ogilvie y J. Callan. Modelos de lenguaje jerárquico para la recuperación de componentes XML. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [18] J. Pehcevski, J. A. Thom, y A. Vercoustre. Recuperación XML híbrida revisitada. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [19] B. Piwowarski y M. Lalmas. Proporcionar evaluaciones de relevancia consistentes y exhaustivas para la evaluación de recuperación de XML. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 361 a 370, Washington, DC, noviembre de 2004. [20] S. Robertson, H. Zaragoza y M. Taylor. Extensión BM25 simple a múltiples campos ponderados. En Actas de la 13a Conferencia de la ACM sobre Gestión de la Información y el Conocimiento, págs. 42 a 50, Washington, DC, noviembre de 2004. [21] S. E. Robertson, S. Walker y M. Beaulieu. Okapi en TREC-7: Automático ad-hoc, filtrado, VLC y pista interactiva. En Actas de la Séptima Conferencia Retrieval de Texto, Gaithersburg, MD, noviembre de 1998. [22] A. Trotman y B. Sigurbj ̈ornsson. NEXI, ahora y después. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. [23] J. Vittaut, B. Piwowarski, y P. Gallinari. Un álgebra para consultas estructuradas en redes bayesianas. En el curso práctico INEX 2004, 2004. Publicado en LNCS 3493 [8]. ",
            "error": [
                "rango",
                "rank"
            ]
        }
    }
}