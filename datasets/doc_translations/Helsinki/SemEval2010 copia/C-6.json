{
    "original_text": "Design and Implementation of a Distributed Content Management System C. D. Cranor, R. Ethington, A. Sehgal† , D. Shur, C. Sreenan‡ and J.E. van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland ABSTRACT The convergence of advances in storage, encoding, and networking technologies has brought us to an environment where huge amounts of continuous media content is routinely stored and exchanged between network enabled devices. Keeping track of (or managing) such content remains challenging due to the sheer volume of data. Storing live continuous media (such as TV or radio content) adds to the complexity in that this content has no well defined start or end and is therefore cumbersome to deal with. Networked storage allows content that is logically viewed as part of the same collection to in fact be distributed across a network, making the task of content management all but impossible to deal with without a content management system. In this paper we present the design and implementation of the Spectrum content management system, which deals with rich media content effectively in this environment. Spectrum has a modular architecture that allows its application to both stand-alone and various networked scenarios. A unique aspect of Spectrum is that it requires one (or more) retention policies to apply to every piece of content that is stored in the system. This means that there are no eviction policies. Content that no longer has a retention policy applied to it is simply removed from the system. Different retention policies can easily be applied to the same content thus naturally facilitating sharing without duplication. This approach also allows Spectrum to easily apply time based policies which are basic building blocks required to deal with the storage of live continuous media, to content. We not only describe the details of the Spectrum architecture but also give typical use cases. Categories and Subject Descriptors C.2.4 [Computer Systems Organization]: Computer-communication Networks-distributed systems; H.3.4 [Information Systems]: Information Storage and Retrieval-systems and software General Terms Design, Management 1. INTRODUCTION Manipulating and managing content is and has always been one of the primary functions of a computer. Initial computing applications include text formatters and program compilers. Content was initially managed by explicit user interaction through the use of files and filesystems. As technology has advanced, both the types of content and the way people wish to use it have greatly changed. New content types such as continuous multimedia streams have become commonplace due to the convergence of advances in storage, encoding, and networking technologies. For example, by combining improvements in storage and encoding, it is now possible to store many hours of TV-quality encoded video on a single disk drive. This has led to the introduction of stand alone digital video recording or personal video recording (PVR) systems such as TiVO [8] and ReplayTV [7]. Another example is the combination of encoding and broadband networking technology. This combination has allowed users to access and share multimedia content in both local and remote area networks with the network itself acting as a huge data repository. The proliferation of high quality content enabled by these advances in storage, encoding, and networking technology creates the need for new ways to manipulate and manage the data. The focus of our work is on the storage of media rich content and in particular the storage of continuous media content in either pre-packaged or live forms. The need for content management in this area is apparent when one consider the following: • Increases in the capacity and decreases in the cost of storage means that even modest desktop systems today have the ability to store massive amounts of content. Managing such content manually (or more correctly manual non-management of such content) lead to great inefficiencies where unwanted and forgotten content waste storage and where wanted content cannot be found. • While true for all types of content the storage of continuous media content is especially problematic. First continuous media content is still very demanding in terms of storage resources which means that a policy-less approach to storing it will not work for all but the smallest systems. Second, the storing of live content such as TV or radio is inherently problematic as these signals are continuous streams with no endpoints. This means that before one can even think about managing such content there is a need to abstract it into something that could be manipulated and managed. 4 • When dealing with stored continuous media there is a need to manage such content at both a fine-grained as well as an aggregate level. For example, an individual PVR user wanting to keep only the highlights of a particular sporting event should not be required to have to store the content pertaining to the complete event. At the same time the user might want to think of content in the aggregate, e.g. remove all of the content that I have not watched for the last month except that content which was explicitly marked for archival. • As indicated above, trying to keep track of content on a standalone system without a content management system is very difficult. However, when the actual storage devices are distributed across a network the task of keeping track of content is almost impossible. This scenario is increasingly common in network based content distribution systems and is likely to also become important in home-networking scenarios. It would seem clear then that a content management system that can efficiently handle media rich content while also exploiting the networked capability of storage devices is needed. This system should allow efficient storage of and access to content across heterogeneous network storage devices according to user preferences. The content management system should translate user preferences into appropriate low-level storage policies and should allow those preferences to be expressed at a fine level of granularity (while not requiring it in general). The content management system should allow the user to manipulate and reason about (i.e. change the storage policy associated with) the storage of (parts of) continuous media content. Addressing this distributed content management problem is difficult due to the number of requirements placed on the system. For example: • The content management system must operate on a large number of heterogeneous systems. In some cases the system may be managing content stored on a local filesystem, while in others the content may be stored on a separate network storage appliance. The content manager may be responsible for implementing the policies it uses to reference content or that role may be delegated to a separate computer. A application program interface (API) and associated network protocols are needed in order for the content management system to provide a uniform interface. • The content management system should be flexible and be able to handle differing requirements for content management policies. These policies reflect what content should be obtained, when it should be fetched, how long it should be retained, and under what circumstances it should be discarded. This means that the content management system should allow multiple applications to reference content with a rich set of policies and that it should all work together seamlessly. • The content management system needs to be able to monitor references for content and use that information to place content in the right location in the network for efficient application access. • The content management system must handle the interaction between implicit and explicit population of content at the network edge. • The content system must be able to efficiently manage large sets of content, including continuous streams. It needs to be able to package this content in such a way that it is convenient for users to access. To address these issues we have designed and implemented the Spectrum content management system architecture. Our layered architecture is flexible - its API allows the layers to reside either on a single computer or on multiple networked heterogeneous computers. It allows multiple applications to reference content using differing policies. Note that the Spectrum architecture assumes the existence of a content distribution network (CDN) that can facilitate the efficient distribution of content (for example, the PRISM CDN architecture [2]). The rest of this paper is organized as follows. Section 2 describes the architecture of our content management system. In Section 3 we describe both our implementation of the Spectrum architecture and examples of its use. Related work is described in Section 4, and Section 5 contains our conclusion and suggestions for future work. 2. THE SPECTRUM DISTRIBUTED CONTENT MANAGEMENT SYSTEM ARCHITECTURE The Spectrum architecture consists of three distinct management layers that may or may not be distributed across multiple machines, as shown in Figure 1. The three layers are: content manager: contains application specific information that is used to manage all of an applications content according to user preferences. For example, in a personal video recorder (PVR) application the content manager receives requests for content from a user interface and interacts with the lower layers of the Spectrum architecture to store and manage content on the device. policy manager: implements and enforces various storage polices that the content manager uses to refer to content. The policy manager exports an interface to the content manager that allows the content manager to request that a piece content be treated according to a specific policy. Spectrum allows for arbitrary policies to be realized by providing a fixed set of base-policy templates that can easily be parameterized. It is our belief that for most implementations this will be adequate (if not, Spectrum can easily be extended to dynamically load new base-policy template code at run time). A key aspect of the policy manager is that it allows different policies to be simultaneously applied to the same content (or parts of the same content). Furthermore content can only exist in the system so long as it is referenced by at least one existing policy. Policy conflicts are eliminated by having the policy manager deal exclusively with retention policies rather than with a mix of retention and eviction policies. This means that content with no policy associated with it is immediately and automatically removed from the system. This approach allows us to naturally support sharing of content across different policies which is critical to the efficient storage of large objects. Note that a key difference between the content manager and the policy manager is that the content manager manages references to multiple pieces of content, i.e. it has an applicationview of content. On the other hand, the policy manager is only concerned with the policy used to manage standalone pieces of content. For example, in a PVR application, the content manager layer would know about the different groups of managed content such as keep-indefinitely, keep for one day, and keep if available diskspace. However, at the policy manager level, each piece of content has 5 Content Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figure 1: The components of the Spectrum architecture and the four ways they can be configured its own policy (or policies) applied to it and is independent from other content. storage manager: stores content in an efficient manner while facilitating the objectives of the higher layers. Specifically the storage manager stores content in sub-object chunks. This approach has advantages for the efficient retrieval of content but more importantly allows policies to be applied at a subobject level which is critically important when dealing with very large objects such as parts of continuous media, e.g. selected pieces of TV content being stored on a PVR. Note that the storage manager has no knowledge of the policies being used by the content and policy managers. Another unique part of our approach is that the interfaces between the layers can either be local or distributed. Figure 1 shows the four possible cases. The case on the far left of the Figure shows the simplest (non-distributed) case where all the layers are implemented on a single box. This configuration would be used in selfcontained applications such as PVRs. The next case over corresponds to the case where there is a centralized content manager that controls distributed storage devices each of which is responsible for implementing policy based storage. In this case although the remote devices are controlled by the central manager they operate much more independently. For example, once they receive instructions from the central manager they typically operate in autonomous fashion. An example of this type of configuration is a content distribution network (CDN) that distributes and stores content based on a schedule determined by some centralized controller. For example, the CDN could pre-populate edge devices with content that is expected to be very popular or distribute large files to branch offices during off-peak hours in a bandwidth constrained enterprise environment. Allowing a single policy manager to control several storage managers leads to the next combination of functions and the most distributed case. The need for this sort of separation might occur for scalability reasons or when different specialized storage devices or appliances are required to be controlled by a single policy manager. The final case shows a content manager combined with a policy manager controlling a remote storage manager. This separation would be possible if the storage manager is somewhat autonomous and does not require continuous fine grained control by the policy manager. We now examine the function of the three layers in detail. 2.1 Content Manager The content manager layer is the primary interface through which specific applications use the Spectrum architecture. As such the content manager layer provides an API for the application to manipulate all aspects of the Spectrum architecture at different levels of granularity. The content manager API has functions that handle: Physical devices: This set of functions allows physical storage devices to be added to Spectrum thereby putting them under control of the content manager and making the storage available to the system. Physical devices can be local or remote - this is the only place in the architecture where the application is required to be aware of this distinction. Once a device is mapped into the application through this interface, the system tracks its type and location. Users simply refer to the content through an application-provided label. Stores: Stores are subsets of physical storage devices. Through these functions an application can create a store on a physical device and assign resources (e.g. disk space) to it. Stores can only be created in physical devices that are mapped into the system. Policy Groups: Policy groups are the means whereby an application specifies, instantiates, and modifies the policies that are applied to Spectrum content. Typical usage of this set of functions is to select one of a small set of base policies and to parameterize this specific instance of the policy. Policy groups are created within existing stores in the system. The Spectrum architecture has policies that are normally associated with storage that aim to optimize disk usage. In addition a set of policies that take a sophisticated time specification enable storage that is cognizant of time. For example, a simple time-based policy could evict content from the system at a certain absolute or relative time. A slightly more involved time-based policy enabled by the Spectrum architecture could allow content to be stored in rolling window of a number of hours (for example, the most recent N-number of hours is kept in the system). Time-based polices are of particular use when dealing with continuous content like a live broadcast. 6 Content: At the finest level of granularity content can be added to or removed from the system. Content is specified to the system by means of a uniform resource locator (URL) which concisely indicates the location of the content as well as the protocol to be used to retrieve it. Optionally a time specification can be associated with content. This allows content to be fetched into the system at some future time, or at future time intervals. Again, this is particularly useful for dealing with the storage and management of live content. 2.2 Policy Manager The policy manager layer of the Spectrum architecture has two main types of API functions. First, there are functions that operate on managed storage areas and policy-based references (prefs) to content stored there. Second, there are sets of functions used to implement each management policy. The first class of functions is used by the content manager layer to access storage. Operations include: create, open, and close: These operations are used by the content manager to control its access to storage. The policy managers create operation is used to establish contact with a store for the first time. Once this is done, the store can be open and closed using the appropriate routines. Note that the parameters used to create a store contain information on how to reach it. For example, local stores have a path associated with them, while remote stores have a remote host and remote path associated with them. The information only needs to be passed to the policy manager once at create time. For open operations, the policy manager will use cached information to contact the store. lookup: The lookup operation provides a way for the content manager to query the policy manager about what content is currently present for a given URL. For continuous media time ranges of present media will be returned. resource: The resource routines are used to query the policy manager about its current resource usage. There are two resource routines: one that applies to the store as a whole and another that applies to a particular policy reference. The resource API is extensible, we currently support queries on disk usage and I/O load. pref establish/update: The pref establish operation is used by the content manager to reference content on the store. If the content is not present, this call will result in the content being fetched (or being scheduled to be fetched if the content is not currently available). Parameters of this function include the URL to store it under, the URL to fetch data from if it is not present, the policy to store the content under, and the arguments used to parameterize the policy. The result of a successful pref establish operation is a policy reference ID string. This ID can be used with the update operation to either change the storage policy parameters or delete the reference entirely. The second group of policy manager functions are used to implement all the polices supported by Spectrum. We envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices. For example, a policy that implements recording a repeating time window can be parameterized to function daily, weekly, or monthly. Note that the policy manager is only concerned with executing a specific policy. The higher-level reasons for choosing a given policy are handled by the content and application manager. A base policy is implemented using six functions: establish: called when a pref is established with the required URLs and base policys parameters. The establish routine references any content already present in the store and then determines the next time it needs to take action (e.g. start a download) and schedules a callback for that time. It can also register to receive callbacks if new content is received for a given URL. update: called to change the parameters of a pref, or to discard the policy reference. newclip: called when a chunk of new content is received for a URL of interest. The base policy typically arranges for newclip to be called for a given URL when the pref is established. When newclip is called, the base policy checks its parameters to determine if it wishes to add a reference to the clip just received. callback: called when the pref schedules a timer-based callback. This is a useful wakeup mechanism for prefs that need to be idle for a long period of time (e.g. between programs). boot/shutdown: called when the content management system is booting or shutting down. The boot operation is typically used to schedule initial callbacks or start I/O operations. The shutdown operation is used to gracefully shutdown I/O streams and save state. 2.3 Storage Manager The role of Spectrums storage manager is to control all I/O operations associated with a given store. Spectrums storage manager supports storing content both on a local filesystem and on a remote fileserver (e.g. a storage appliance). For continuous media, at the storage manager level content is stored as a collection of time-based chunks. Depending on the underlying filesystem, a chunk could correspond to a single file or a data node in a storage database. The two main storage manager operations are input and output. The input routine is used to store content in a store under a given name. The output routine is used to send data from the store to a client. For streaming media both the input and output routines take time ranges that schedule when the I/O operation should happen, and both routines return an I/O handle that can be used to modify or cancel the I/O request in the future. Much like the policy manager, the storage manager also provides API functions to create, open, and close stores. It also supports operations to query the resource usages and options supported by the store. Finally, the storage manager also has a discard routine that may be used by the policy manager to inform the store to remove content from the store. 3. IMPLEMENTATION AND USE CASES In this section we describe our implementation of Spectrum and describe how it can be used. 3.1 Implementation We have implemented Spectrums three layers in C as part of a library that can be linked with Spectrum-based applications. Each layer keeps track of its state through a set of local data files that persist across reboots, thus allowing Spectrum to smoothly handle power cycles. For layers that reside on remote systems (e.g. a remote store) only the meta-information needed to contact the remote 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Graphical User Interface Network Enabled DVR Program Information Content DVR Application Figure 2: Spectrum in a Network Enabled DVR node is stored locally. Our test application uses a local policy and storage manager to fetch content and store it in a normal Unixbased filesystem. To efficiently handle communications with layers running on remote systems, all Spectrums API calls support both synchronous and asynchronous modes through a uniform interface defined by the reqinfo structure. Each API call takes a pointer to a reqinfo structure as one of its arguments. This structure is used to hold the call state and return status. For async calls, the reqinfo also contains a pointer to a callback function. To use a Spectrum API function, the caller first chooses either the sync or async mode and allocates a reqinfo structure. For sync calls, the reqinfo can be allocated on the stack, otherwise it is allocated with malloc. For async calls, a callback function must be provided when the reqinfo is allocated. Next the caller invokes the desired Spectrum API function passing the reqinfo structure as an argument. For sync calls, the result of the calls is returned immediately in the reqinfo structure. For successful async calls, a call in progress value is returned. Later, when the async call completes or a timeout occurs, the async callback function is called with the appropriate information needed to complete processing. The modular/layered design of the Spectrum architecture simplifies the objective of distribution of functionality. Furthermore, communication between functions is typically of a master-slave(s) nature. This means that several approaches to distributed operation are possible that would satisfy the architectural requirements. In our implementation we have opted to realize this functionality with a simple modular design. We provide a set of asynchronous remote access stub routines that allow users to select the transport protocol to use and to select the encoding method that should be used with the data to be transferred. Transport protocols can range simple protocols such as UDP up to more complex protocols such as HTTP. We currently are using plain TCP for most of our transport. Function calls across the different Spectrum APIs can be encoded using a variety of formats include plain text, XDR, and XML. We are currently using the eXpat XML library [4] to encode our calls. While we are current transferring our XML encoded messages using a simple TCP connection, in a real world setting this can easily be replaced with an implementation based on secure sockets layer (SSL) to improve security by adding SSL as a transport protocol. An important aspect of Spectrum is that it can manage content based on a given policy across heterogenous platforms. As we explained previously in Section 2.2, envision a small set of base-level policy functions that can be parameterized to produce a wide range of storage polices. In order for this to work properly, all Spectrumbased applications must understand the base-level policies and how they can be parameterized. To address this issue, we treat each base-level policy as if it was a separate program. Each base-level policy should have a well known name and command line options for parameterization. In fact, in our implementation we pass parameters to base-level policies as a string that can be parsed using a getopt-like function. This format is easily understood and provides portability since byte order is not an issue in a string. Since this part of Spectrum is not on the critical data path, this type of formatting is not a performance issue. 3.2 Using the Spectrum Content Management System In this section we show two examples of the use of the Spectrum Content Management System in our environment. The focus of our previous work has been content distribution for streaming media content [2] and network enabled digital video recording [3]. The Spectrum system is applicable to both scenarios as follows. Figure 2 shows the Network Enabled DVR (NED) architecture. In this case all layers of the Spectrum architecture reside on the same physical device in a local configuration. The DVR application obtains program listings from some network source, deals with user presentation through a graphical user interface (GUI), and interface with the Spectrum system through the content management layer APIs. This combination of higher level functions allows the user to select both content to be stored and what storage policies to 8 Content Manager Centralized Content Management station Content InformationUser Interface Policy Manager Storage Manager Storage Fetcher Edge Portal Server Policy Manager Storage Manager Storage Fetcher Edge Portal Server Distributed Content To Media Endpoints To Media Endpoints Figure 3: Spectrum in a Content Distribution Architecture apply to such content. Obtaining the content (through the network or locally) and the subsequent storage on the local system is then handled by the policy and storage managers. The use of Spectrum in a streaming content distribution architecture (e.g. PRISM [2]) is depicted in Figure 3. In this environment streaming media content (both live, canned-live and on-demand) is being distributed to edge portals from where streaming endpoints are being served. In our environment content distribution and storage is done from a centralized content management station which controls several of the edge portals. The centralized station allows administrators to manage the distribution and storage of content without requiring continuous communication between the content manager and the edge devices, i.e. once instructions have been given to edge devices they can operate independently until changes are to be made. 3.3 Spectrum Operational Example To illustrate how Spectrum handles references to content, consider a Spectrum-based PVR application programmed to store one days worth of streaming content in a rolling window. To set up the rolling window, the application would use the content manager API to create a policy group and policy reference to the desired content. The establishment of the one-day rolling window policy reference would cause the policy manger to ask the storage manager to start receiving the stream. As each chunk of streaming data arrives, the policy manager executes the policy references newclip function. The newclip function adds a reference to each arriving chunk, and schedules a callback a day later. At that time, the policy will drop its now day-old reference to the content and the content will be discarded unless it is referenced by some other policy. Now, consider the case where the user decides to save part of the content (e.g. a specific program) in the rolling window for an extra week. To do this, the application requests that the content manager add an additional new policy reference to the part of the content to preserved. Thus, the preserved content has two references to it: one from the rolling window and one from the request to preserve the content for an additional week. After one day the reference from the rolling window will be discarded, but the content will be 9 ref2, etc. base data url1 url2 (media files...) (media files...) meta store (general info...) url1 chunks prefs ranges media chunks, etc.url2 poly host ref1 ref1.files ref1.state Figure 4: Data layout of Spectrum policy store preserved by the second reference. After the additional week has past, the callback function for the second reference will be called. This function will discard the remaining reference to the content and as there are no remaining references the content will be freed. In order to function in scenarios like the ones described above, Spectrums policy manager must manage and maintain all the references to various chunks of media. These references are persistent and thus must be able to survive even if the machine maintaining them is rebooted. Our Spectrum policy manager implementation accomplishes this using the file and directory structure shown in Figure 4. There are three classes of data stored, and each class has its own top level directory. The directories are: data: this directory is used by the storage manager to store each active URLs chunks of media. The media files can be encoded in any format, for example MPEG, Windows Media, or QuickTime. Note that this directory is used only if the storage manager is local. If the policy manager is using an external storage manager (e.g. a storage appliance), then the media files are stored remotely and are only remotely referenced by the policy manager. meta: this directory contains general meta information about the storage manager being used and the data it is storing. General information is stored in the store subdirectory and includes the location of the store (local or remote) and information about the types of chunks of data the store can handle. The meta directory also contains a subdirectory per-URL that contains information about the chunks of data stored. The chunks file contains a list of chunks currently stored and their reference counts. The prefs file contains a list of active policy references that point to this URL. The ranges file contains a list of time ranges of data currently stored. Finally, the media file describes the format of the media being stored under the current URL. poly: this directory contains a set of host subdirectories. Each host subdirectory contains the set of policy references created by that host. Information on each policy reference is broken up into three files. For example, a policy reference named ref1 would be stored in ref1, ref1.files, and ref1.state. The ref1 file contains information about the policy reference that does not change frequently. This information includes the base-policy and the parameters used to create the reference. The ref1.files file contains the list of references to chunks that pref ref1 owns. Finally, the ref1.state file contains optional policy-specific state information that can change over time. Together, these files and directories are used to track references in our implementation of Spectrum. Note that other implementations are possible. For example, a carrier-grade Spectrum manager might store all its policy and reference information in a high-performance database system. 10 4. RELATED WORK Several authors have addressed the problem of the management of content in distributed networks. Much of the work focuses on the policy management aspect. For example in [5], the problem of serving multimedia content via distributed servers is considered. Content is distributed among server resources in proportion to user demand using a Demand Dissemination Protocol. The performance of the scheme is benchmarked via simulation. In [1] content is distributed among sub-caches. The authors construct a system employing various components, such as a Central Router, Cache Knowledge base, Subcaches, and a Subcache eviction judge. The Cache Knowledge base allows sophisticated policies to be employed. Simulation is used to compare the proposed scheme with well-known replacement algorithms. Our work differs in that we are considering more than the policy management aspects of the problem. After carefully considering the required functionality to implement content management in the networked environment, we have partitioned the system into three simple functions, namely Content manager, Policy manager and Storage manager. This has allowed us to easily implement and experiment with a prototype system. Other related work involves so called TV recommendation systems which are used in PVRs to automatically select content for users, e.g. [6]. In the case where Spectrum is used in a PVR configuration this type of system would perform a higher level function and could clearly benefit from the functionalities of the Spectrum architecture. Finally, in the commercial CDN environment vendors (e.g. Cisco and Netapp) have developed and implemented content management products and tools. Unlike the Spectrum architecture which allows edge devices to operate in a largely autonomous fashion, the vendor solutions typically are more tightly coupled to a centralized controller and do not have the sophisticated time-based operations offered by Spectrum. 5. CONCLUSION AND FUTURE WORK In this paper we presented the design and implementation of the Spectrum content management architecture. Spectrum allows storage policies to be applied to large volumes of content to facilitate efficient storage. Specifically, the system allows different policies to be applied to the same content without replication. Spectrum can also apply policies that are time-aware which effectively deals with the storage of continuous media content. Finally, the modular design of the Spectrum architecture allows both stand-alone and distributed realizations so that the system can be deployed in a variety of applications. There are a number of open issues that will require future work. Some of these issues include: • We envision Spectrum being able to manage content on systems ranging from large CDNs down to smaller appliances such as TiVO [8]. In order for these smaller systems to support Spectrum they will require networking and an external API. When that API becomes available, we will have to work out how it can be fit into the Spectrum architecture. • Spectrum names content by URL, but we have intentionally not defined the format of Spectrum URLs, how they map back to the contents actual name, or how the names and URLs should be presented to the user. While we previously touched on these issues elsewhere [2], we believe there is more work to be done and that consensus-based standards on naming need to be written. • In this paper weve focused on content management for continuous media objects. We also believe the Spectrum architecture can be applied to any type of document including plain files, but we have yet to work out the details necessary to support this in our prototype environment. • Any project that helps allow multimedia content to be easily shared over the Internet will have legal hurdles to overcome before it can achieve widespread acceptance. Adapting Spectrum to meet legal requirements will likely require more technical work. 6. REFERENCES [1] K. . Cheng and Y. Kambayashi. Multicache-based Content Management for Web Caching. Proceedings of the First International Conference on Web Information Systems Engineering, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe. PRISM Architecture: Supporting Enhanced Streaming Services in a Content Distribution Network. IEEE Internet Computing, July/August 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan, and J. van der Merwe. NED: a Network-Enabled Digital Video Recorder. 11th IEEE Workshop on Local and Metropolitan Area Networks, March 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, and P. Shenoy. A Demand Adaptive and Locality Aware (DALA) Streaming Media Server Cluster Architecture. NOSSDAV, May 2002. [6] K. Kurapati and S. Gutta and D. Schaffer and J. Martino and J. Zimmerman. A multi-agent TV recommender. Proceedings of the UM 2001 workshop, July 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11",
    "original_translation": "Diseño e implementación de un sistema de gestión de contenido distribuido C. D. Cranor, R. Ethington, A. Sehgal†, D. Shur, C. Sreenan‡ y J.E. van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland RESUMEN La convergencia de los avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan e intercambian de forma rutinaria entre dispositivos habilitados para la red. Mantener un seguimiento de (o gestionar) dicho contenido sigue siendo un reto debido al gran volumen de datos. El almacenamiento de medios continuos en vivo (como contenidos de televisión o radio) aumenta la complejidad en el sentido de que este contenido no tiene un inicio o un final bien definidos y, por lo tanto, resulta engorroso de tratar. El almacenamiento en red permite que los contenidos que se consideran lógicamente como parte de la misma colección se distribuyan de hecho a través de una red, haciendo que la tarea de gestión de contenidos sea casi imposible de manejar sin un sistema de gestión de contenidos. En este trabajo presentamos el diseño y la implementación del sistema de gestión de contenidos Spectrum, que trata de contenido multimedia rico de manera efectiva en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto a escenarios independientes como a diversos escenarios en red. Un aspecto único de Spectrum es que requiere una (o más) políticas de retención para aplicarse a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido que ya no tiene una política de retención aplicada se elimina simplemente del sistema. Las diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así naturalmente el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo que son elementos básicos necesarios para hacer frente al almacenamiento de medios continuos en vivo, a los contenidos. No sólo describimos los detalles de la arquitectura Spectrum, sino que también damos casos de uso típicos. Categorías y Descriptores de Asunto C.2.4 [Organización de Sistemas de Computación]: Sistemas distribuidos por redes de comunicación informática; H.3.4 [Sistemas de Información]: Sistemas de almacenamiento y recuperación de información y software Términos generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar el contenido es y siempre ha sido una de las funciones principales de un ordenador. Las aplicaciones de computación inicial incluyen formateadores de texto y compiladores de programas. El contenido fue administrado inicialmente por interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que la gente desea utilizarlo han cambiado enormemente. Los nuevos tipos de contenidos, como los flujos multimedia continuos, se han convertido en algo común debido a la convergencia de los avances en las tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de vídeo codificado de calidad de TV en una sola unidad de disco. Esto ha llevado a la introducción de sistemas independientes de grabación de vídeo digital o de grabación de vídeo personal (PVR), como TiVO [8] y ReplayTV [7]. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas con la propia red actuando como un enorme repositorio de datos. La proliferación de contenidos de alta calidad gracias a estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. Nuestro trabajo se centra en el almacenamiento de contenidos multimedia ricos y, en particular, el almacenamiento de contenidos multimedia continuos en formatos preenvasados o en directo. La necesidad de gestión de contenidos en esta área es evidente cuando se tiene en cuenta lo siguiente: • El aumento de la capacidad y la disminución del costo de almacenamiento significa que incluso los modestos sistemas de escritorio hoy en día tienen la capacidad de almacenar cantidades masivas de contenido. La gestión manual de dichos contenidos (o, más correctamente, la no gestión manual de dichos contenidos) produce grandes ineficiencias en los casos en que el almacenamiento de residuos de contenidos no deseados y olvidados no es posible y en los que no se puede encontrar el contenido deseado. • Si bien es cierto para todo tipo de contenido, el almacenamiento de contenido multimedia continuo es especialmente problemático. El primer contenido continuo de los medios sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque de almacenamiento sin políticas no funcionará para todos, sino para los sistemas más pequeños. En segundo lugar, el almacenamiento de contenido en vivo como TV o radio es inherentemente problemático, ya que estas señales son corrientes continuas sin terminales. Esto significa que antes de que uno pueda siquiera pensar en manejar tal contenido hay una necesidad de abstraerlo en algo que podría ser manipulado y manejado. 4 • Cuando se trata de medios continuos almacenados, es necesario gestionar dichos contenidos tanto a un nivel de grano fino como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar sólo los aspectos más destacados de un evento deportivo en particular no debe tener que almacenar el contenido correspondiente al evento completo. Al mismo tiempo, el usuario podría querer pensar en el contenido en el agregado, por ejemplo. eliminar todo el contenido que no he visto en el último mes, excepto el contenido que fue explícitamente marcado para archivo. • Como se ha indicado anteriormente, es muy difícil tratar de hacer un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenidos. Sin embargo, cuando los dispositivos de almacenamiento reales se distribuyen a través de una red, la tarea de realizar un seguimiento del contenido es casi imposible. Este escenario es cada vez más común en los sistemas de distribución de contenidos basados en la red y es probable que también sea importante en los escenarios de creación de redes en el hogar. Parece entonces claro que se necesita un sistema de gestión de contenidos que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que se explota la capacidad en red de los dispositivos de almacenamiento. Este sistema debería permitir el almacenamiento eficiente de contenidos y el acceso a ellos a través de dispositivos de almacenamiento de redes heterogéneos, de acuerdo con las preferencias del usuario. El sistema de gestión de contenidos debe traducir las preferencias de los usuarios en políticas adecuadas de almacenamiento de bajo nivel y permitir que esas preferencias se expresen en un nivel fino de granularidad (aunque no lo exijan en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar (es decir. cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenidos distribuidos es difícil debido al número de requisitos que se imponen al sistema. Por ejemplo: • El sistema de gestión de contenidos debe funcionar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando el contenido almacenado en un sistema de archivos local, mientras que en otros, el contenido puede almacenarse en un dispositivo de almacenamiento de red separado. El gestor de contenidos podrá ser responsable de la aplicación de las políticas que utilice para hacer referencia al contenido o de la delegación de dicho papel en un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. • El sistema de gestión de contenidos debe ser flexible y ser capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe obtenerse, cuándo debe obtenerse, cuánto tiempo debe conservarse y en qué circunstancias debe desecharse. Esto significa que el sistema de gestión de contenidos debería permitir a múltiples aplicaciones hacer referencia al contenido con un rico conjunto de políticas y que todos deberían trabajar juntos sin problemas. • El sistema de gestión de contenidos debe poder controlar las referencias de contenido y utilizar esa información para colocar el contenido en la ubicación correcta de la red para un acceso eficiente a las aplicaciones. • El sistema de gestión de contenidos debe manejar la interacción entre la población implícita y explícita de contenidos en el borde de la red. • El sistema de contenidos debe ser capaz de gestionar eficientemente grandes conjuntos de contenidos, incluyendo flujos continuos. Necesita poder empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas hemos diseñado e implementado la arquitectura del sistema de gestión de contenidos Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite a múltiples aplicaciones hacer referencia al contenido utilizando políticas diferentes. Tenga en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenidos (CDN) que puede facilitar la distribución eficiente de contenidos (por ejemplo, la arquitectura PRISM CDN [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. La labor conexa se describe en la sección 4, y la sección 5 contiene nuestras conclusiones y sugerencias para la labor futura. 2. LA ARQUITECTURA DEL SISTEMA DE GESTIÓN DE CONTENIDO DISTRIBUIDO POR ESPECTRO La arquitectura del espectro consta de tres capas de gestión distintas que pueden o no distribuirse entre múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todos los contenidos de las aplicaciones de acuerdo con las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de vídeo personal (PVR), el gestor de contenidos recibe solicitudes de contenido de una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y administrar contenido en el dispositivo. gestor de políticas: implementa y hace cumplir varias políticas de almacenamiento que el gestor de contenidos utiliza para referirse al contenido. El gestor de políticas exporta una interfaz al gestor de contenidos que permite al gestor de contenidos solicitar que el contenido de una pieza sea tratado de acuerdo con una política específica. Spectrum permite que las políticas arbitrarias se realicen proporcionando un conjunto fijo de plantillas de políticas de base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (si no, Spectrum puede ampliarse fácilmente para cargar dinámicamente nuevo código de plantilla de política de base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido sólo puede existir en el sistema mientras se haga referencia a él al menos mediante una política existente. Los conflictos políticos se eliminan haciendo que el director de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin ninguna política asociada con él se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar naturalmente el intercambio de contenidos entre diferentes políticas, lo que es fundamental para el almacenamiento eficiente de objetos de gran tamaño. Tenga en cuenta que una diferencia clave entre el gestor de contenidos y el gestor de políticas es que el gestor de contenidos gestiona referencias a múltiples piezas de contenido, es decir. tiene una visión de aplicación del contenido. Por otra parte, el gestor de políticas sólo se ocupa de la política utilizada para gestionar contenidos independientes. Por ejemplo, en una aplicación PVR, la capa del gestor de contenidos sabría acerca de los diferentes grupos de contenido gestionado, como mantener-indefinidamente, guardar durante un día, y mantener si el espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada contenido tiene 5 contenido Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figura 1: Los componentes de la arquitectura Spectrum y las cuatro formas en que pueden configurarse su propia política (o políticas) se le aplican y son independientes de otros contenidos. administrador de almacenamiento: almacena el contenido de una manera eficiente al tiempo que facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento almacena contenido en trozos de subobjeto. Este enfoque tiene ventajas para la recuperación eficiente de contenidos, pero lo que es más importante, permite que las políticas se apliquen a un nivel de subobjetos que es de importancia crítica cuando se trata de objetos muy grandes como partes de medios continuos, por ejemplo. piezas seleccionadas de contenido de TV que se almacenan en un PVR. Tenga en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas utilizadas por los gestores de contenido y políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la Figura muestra el caso más simple (no distribuido) donde todas las capas se implementan en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como PVRs. El siguiente caso corresponde al caso en que existe un gestor de contenidos centralizado que controla los dispositivos de almacenamiento distribuidos, cada uno de los cuales es responsable de la aplicación del almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, funcionan de forma mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, normalmente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido basado en un calendario determinado por algún controlador centralizado. Por ejemplo, el CDN podría prepoblar dispositivos de borde con contenido que se espera que sea muy popular o distribuir archivos grandes a las sucursales durante horas fuera del pico en un entorno empresarial limitado por el ancho de banda. Permitir que un único gestor de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y el caso más distribuido. La necesidad de este tipo de separación puede ocurrir por razones de escalabilidad o cuando diferentes dispositivos o aparatos de almacenamiento especializados están obligados a ser controlados por un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas que controla un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo de grano fino por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de contenidos La capa de gestor de contenidos es la interfaz principal a través de la cual aplicaciones específicas utilizan la arquitectura Spectrum. Como tal, la capa de gestor de contenidos proporciona una API para que la aplicación manipule todos los aspectos de la arquitectura Spectrum en diferentes niveles de granularidad. La API del gestor de contenidos tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite añadir dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo control del gestor de contenidos y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos - este es el único lugar en la arquitectura donde se requiere que la aplicación sea consciente de esta distinción. Una vez que un dispositivo se mapea en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Tiendas: Las tiendas son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (p. ej. espacio en disco) a él. Las tiendas sólo se pueden crear en dispositivos físicos que se mapean en el sistema. Grupos de políticas: Los grupos de políticas son los medios por los cuales una aplicación especifica, instancia y modifica las políticas que se aplican al contenido Spectrum. El uso típico de este conjunto de funciones es seleccionar uno de un pequeño conjunto de políticas de base y parametrizar esta instancia específica de la política. Se crean grupos de políticas dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que requieren una especificación de tiempo sofisticada permiten el almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría desalojar el contenido del sistema en un determinado momento absoluto o relativo. Una política temporal ligeramente más implicada, habilitada por la arquitectura Spectrum, podría permitir que el contenido se almacene en una ventana móvil de varias horas (por ejemplo, el número de horas N más reciente se mantiene en el sistema). Las políticas basadas en el tiempo son de particular utilidad cuando se trata de contenidos continuos como una transmisión en vivo. 6 Contenido: En el mejor nivel de contenido de granularidad se puede añadir o eliminar del sistema. El contenido se especifica en el sistema mediante un localizador de recursos uniforme (URL) que indica de forma concisa la ubicación del contenido, así como el protocolo que se utilizará para recuperarlo. Opcionalmente una especificación de tiempo se puede asociar con el contenido. Esto permite obtener contenido en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Una vez más, esto es particularmente útil para tratar con el almacenamiento y la gestión de contenido en vivo. 2.2 Gestor de políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones API. En primer lugar, hay funciones que funcionan en áreas de almacenamiento gestionado y referencias basadas en políticas (prefs) al contenido almacenado allí. En segundo lugar, hay conjuntos de funciones utilizadas para aplicar cada política de gestión. La primera clase de funciones es utilizada por la capa del gestor de contenidos para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar: Estas operaciones son utilizadas por el gestor de contenidos para controlar su acceso al almacenamiento. Los gestores de políticas crean operación se utiliza para establecer contacto con una tienda por primera vez. Una vez hecho esto, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Tenga en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información sólo debe ser transmitida al gestor de políticas una vez a la hora de crear. Para operaciones abiertas, el gestor de políticas utilizará la información en caché para ponerse en contacto con la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el gestor de contenidos consulte al gestor de políticas sobre qué contenido está actualmente presente para una URL dada. Para los intervalos de tiempo continuos de los medios actuales se devolverán. recurso: Las rutinas de recursos se utilizan para consultar al gestor de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su conjunto y otra que se aplica a una determinada referencia política. El recurso API es extensible, actualmente soportamos consultas sobre el uso del disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer es utilizada por el gestor de contenido para referenciar el contenido en la tienda. Si el contenido no está presente, esta llamada resultará en que el contenido sea obtenido (o programado para ser obtenido si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL para almacenarla debajo, la URL para obtener datos de si no está presente, la política para almacenar el contenido debajo y los argumentos utilizados para parametrizar la política. El resultado de una operación pref establecer con éxito es una cadena de identificación de referencia política. Este ID se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones de gestor de políticas se utiliza para implementar todas las políticas apoyadas por Spectrum. Prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitivo puede ser parametrizada para funcionar diariamente, semanal o mensualmente. Tenga en cuenta que el gestor de políticas sólo se ocupa de la ejecución de una política específica. Las razones de mayor nivel para elegir una determinada política son manejadas por el gestor de contenido y aplicación. Una política de base se implementa usando seis funciones: establecer: llamada cuando se establece un pref con las URLs requeridas y los parámetros de las políticas de base. El establecimiento de rutina hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar medidas (por ejemplo. iniciar una descarga) y programa una devolución de llamada para ese tiempo. También puede registrarse para recibir callbacks si se recibe nuevo contenido para una URL dada. actualización: llamada a cambiar los parámetros de un pref, o a descartar la referencia política. newclip: llamado cuando se recibe un trozo de contenido nuevo para una URL de interés. La política de base normalmente organiza que newclip sea llamado para una URL dada cuando se establece la pref. Cuando se llama newclip, la política de base comprueba sus parámetros para determinar si desea añadir una referencia al clip que acaba de recibir. callback: llamado cuando el pref programa un callback basado en temporizador. Este es un mecanismo útil de despertar para prefs que necesitan estar inactivos durante un largo período de tiempo (por ejemplo. entre programas). boot/shutdown: llamado cuando el sistema de gestión de contenido está arrancando o apagando. La operación de arranque se utiliza normalmente para programar las llamadas iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para apagar con gracia flujos de E/S y guardar estado. 2.3 Gestor de almacenamiento El papel del Gestor de almacenamiento Spectrums es controlar todas las operaciones de E/S asociadas a una tienda dada. El gestor de almacenamiento Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo: un aparato de almacenamiento). Para medios continuos, en el nivel de administrador de almacenamiento el contenido se almacena como una colección de trozos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un trozo podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son de entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión tanto las rutinas de entrada como de salida toman intervalos de tiempo que programan cuando la operación de E/S debe ocurrir, y ambas rutinas devuelven una manija de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el gestor de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar tiendas. También es compatible con las operaciones para consultar los usos de recursos y las opciones apoyadas por la tienda. Por último, el administrador de almacenamiento también tiene una rutina de descartes que puede ser utilizada por el administrador de políticas para informar a la tienda para eliminar el contenido de la tienda. 3. CASOS DE APLICACIÓN Y USO En esta sección describimos nuestra implementación de Spectrum y cómo se puede utilizar. 3.1 Implementación Hemos implementado Spectrums tres capas en C como parte de una biblioteca que puede vincularse con aplicaciones basadas en Spectrum. Cada capa realiza un seguimiento de su estado a través de un conjunto de archivos de datos locales que persisten a través de los reinicios, permitiendo así a Spectrum manejar sin problemas los ciclos de potencia. Para capas que residen en sistemas remotos (p. ej. una tienda remota) sólo la meta-información necesaria para contactar con el remoto 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Interfaz gráfica de usuario Red activada DVR Program Information Content DVR Application Figura 2: El espectro en un nodo DVR habilitado de red se almacena localmente. Nuestra aplicación de prueba utiliza una política local y un gestor de almacenamiento para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficazmente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas Spectrums API admiten modos síncronos y asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada API lleva un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de llamada y el estado de retorno. Para llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamadas. Para usar una función Spectrum API, el llamante elige primero el modo sincronización o asíncrona y asigna una estructura reqinfo. Para las llamadas de sincronización, el reqinfo se puede asignar en la pila, de lo contrario se asigna con malloc. Para las llamadas async, se debe proporcionar una función de devolución de llamada cuando se asigna el reqinfo. A continuación, el llamante invoca la función Spectrum API deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas async exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada async se completa o se produce un tiempo de espera, la función de devolución de llamada async se llama con la información adecuada necesaria para completar el procesamiento. El diseño modular/en capas de la arquitectura Spectrum simplifica el objetivo de distribución de la funcionalidad. Además, la comunicación entre funciones es típicamente de naturaleza maestro-esclavo(s). Esto significa que varios enfoques de la operación distribuida son posibles que satisfagan los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un simple diseño modular. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y seleccionar el método de codificación que debe utilizarse con los datos a transferir. Los protocolos de transporte pueden variar protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP plano para la mayor parte de nuestro transporte. Las llamadas de funciones a través de las diferentes API de Spectrum se pueden codificar utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos usando la biblioteca XML de eXpat [4] para codificar nuestras llamadas. Mientras estamos actualmente transfiriendo nuestros mensajes codificados XML usando una conexión TCP simple, en un entorno real esto puede ser reemplazado fácilmente por una implementación basada en una capa segura de sockets (SSL) para mejorar la seguridad mediante la adición de SSL como protocolo de transporte. Un aspecto importante del Spectrum es que puede gestionar contenidos basados en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la sección 2.2, prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben entender las políticas a nivel de base y cómo pueden ser parametrizadas. Para abordar este tema, tratamos cada política a nivel de base como si fuera un programa separado. Cada política a nivel de base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada usando una función tipo getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de bytes no es un problema en una cadena. Dado que esta parte de Spectrum no está en la ruta de datos críticos, este tipo de formato no es un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos del Espectro En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos del Espectro en nuestro entorno. El foco de nuestro trabajo anterior ha sido la distribución de contenido para el contenido multimedia en streaming [2] y la grabación digital de vídeo habilitada en red [3]. El sistema Spectrum es aplicable a ambos escenarios de la manera siguiente. La Figura 2 muestra la arquitectura DVR (NED) activada por red. En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación DVR obtiene listados de programas de alguna fuente de red, se ocupa de la presentación del usuario a través de una interfaz gráfica de usuario (GUI), e interfaz con el sistema Spectrum a través de las API de la capa de gestión de contenidos. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento a 8 Content Manager Centralized Content Management station Información de contenidoGuía de interfaz de usuario Gestor de almacenamiento Gestor de almacenamiento Fetcher Edge Portal Política de servidor Gestor de almacenamiento Gestor de almacenamiento Gestor de almacenamiento Gestor de contenido Fetcher Edge Portal Server Distributed Content To La obtención del contenido (a través de la red o localmente) y el posterior almacenamiento en el sistema local es entonces manejado por los gerentes de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenidos en streaming (p. ej. PRISM [2] se muestra en la Figura 3. En este entorno se está distribuyendo contenido multimedia en streaming (tanto en directo, enlatado en vivo como bajo demanda) a portales de borde desde donde se están sirviendo los puntos finales de streaming. En nuestro entorno la distribución y almacenamiento de contenidos se realiza desde una estación centralizada de gestión de contenidos que controla varios de los portales de borde. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenidos sin necesidad de comunicación continua entre el gestor de contenidos y los dispositivos de borde, es decir. una vez que se han dado instrucciones a los dispositivos de borde que pueden funcionar de forma independiente hasta que se van a hacer cambios. 3.3 Spectrum Operational Ejemplo Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación PVR basada en Spectrum programada para almacenar un día de contenido en streaming en una ventana móvil. Para configurar la ventana móvil, la aplicación utilizaría la API del gestor de contenidos para crear un grupo de políticas y una referencia política al contenido deseado. El establecimiento de la referencia de la política de ventanilla móvil de un día haría que el pesebre de la política pidiera al administrador de almacenamiento que comenzara a recibir la corriente. A medida que llega cada trozo de datos de streaming, el gestor de políticas ejecuta la función newclip de referencias políticas. La función newclip añade una referencia a cada trozo que llega, y programa una devolución de llamada un día después. En ese momento, la política dejará de hacer referencia al contenido, que ya tiene un día de antigüedad, y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considere el caso en el que el usuario decide guardar parte del contenido (por ejemplo. un programa específico) en la ventana de rodadura durante una semana adicional. Para ello, la aplicación solicita que el gestor de contenidos agregue una nueva referencia política adicional a la parte del contenido a conservar. Por lo tanto, el contenido conservado tiene dos referencias: una desde la ventana móvil y otra desde la solicitud de preservar el contenido durante una semana adicional. Después de un día la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. base de datos url1 url2 (archivos multimedia...) (archivos multimedia...) meta store (información general...) url1 screens prefs ranges media screens, etc.url2 poly host ref1 ref1.files ref1.state Figura 4: Diseño de datos de Spectrum policy store preservado por la segunda referencia. Después de la semana adicional ha pasado, la función callback para la segunda referencia será llamada. Esta función descartará la referencia restante al contenido y como no hay referencias restantes, el contenido será liberado. Con el fin de funcionar en escenarios como los descritos anteriormente, Spectrums gestor de políticas debe gestionar y mantener todas las referencias a varios trozos de medios. Estas referencias son persistentes y por lo tanto deben ser capaces de sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestra implementación de Spectrum Policy Manager logra esto usando la estructura de archivos y directorios que se muestra en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el administrador de almacenamiento para almacenar cada URL activa trozos de medios. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Tenga en cuenta que este directorio se utiliza sólo si el administrador de almacenamiento es local. Si el gestor de políticas está utilizando un gestor de almacenamiento externo (por ejemplo: un aparato de almacenamiento), a continuación, los archivos multimedia se almacenan de forma remota y sólo son remotamente referenciados por el gestor de políticas. meta: este directorio contiene meta información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) e información sobre los tipos de trozos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los trozos de datos almacenados. El archivo de trozos contiene una lista de trozos actualmente almacenados y sus cuentas de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de rangos temporales de datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato de los medios almacenados bajo la URL actual. poli: este directorio contiene un conjunto de subdirectorios host. Cada subdirectorio de host contiene el conjunto de referencias políticas creadas por ese host. La información sobre cada referencia política se divide en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files, y ref1.state. El archivo ref1 contiene información sobre la política de referencia que no cambia con frecuencia. Esta información incluye la política de base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a trozos que pref ref1 posee. Por último, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Tenga en cuenta que otras implementaciones son posibles. Por ejemplo, un gestor de Spectrum de grado de operador podría almacenar toda su información normativa y de referencia en un sistema de bases de datos de alto rendimiento. 10 4. TRABAJOS RELACIONADOS Varios autores han abordado el problema de la gestión de contenidos en redes distribuidas. Gran parte de la labor se centra en el aspecto de la gestión de políticas. Por ejemplo en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda de los usuarios mediante un protocolo de difusión de la demanda. El rendimiento del sistema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Router Central, una base de conocimiento caché, subcachés y un juez de desalojo subcaché. La base Cache Knowledge permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenidos en el entorno en red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenidos, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de TV que se utilizan en PVRs para seleccionar automáticamente el contenido para los usuarios, por ejemplo. [6]. En el caso de que Spectrum se utilice en una configuración PVR, este tipo de sistema desempeñaría una función de nivel superior y podría beneficiarse claramente de las funcionalidades de la arquitectura Spectrum. Por último, en los proveedores comerciales de medio ambiente de CDN (por ejemplo, Cisco y Netapp) han desarrollado e implementado productos y herramientas de gestión de contenidos. A diferencia de la arquitectura Spectrum que permite que los dispositivos de borde funcionen de una manera en gran medida autónoma, las soluciones de proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. 5. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo presentamos el diseño e implementación de la arquitectura de gestión de contenidos Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que tengan tiempo y que se ocupen eficazmente del almacenamiento de contenido multimedia continuo. Por último, el diseño modular de la arquitectura Spectrum permite realizaciones independientes y distribuidas para que el sistema se pueda implementar en una variedad de aplicaciones. Hay una serie de cuestiones pendientes que requerirán una labor futura. Algunos de estos problemas incluyen: • Prevemos que Spectrum sea capaz de gestionar contenido en sistemas que van desde grandes CDNs hasta aparatos más pequeños como TiVO [8]. Para que estos sistemas más pequeños soporten Spectrum necesitarán redes y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo puede encajar en la arquitectura Spectrum. • El contenido de nombres de espectro por URL, pero no hemos definido intencionadamente el formato de las URLs de espectro, cómo se mapean al nombre real del contenido, o cómo los nombres y URLs deben ser presentados al usuario. Si bien hemos abordado anteriormente estas cuestiones en otros lugares [2], creemos que queda más trabajo por hacer y que es necesario elaborar normas consensuadas sobre la designación de nombres. • En este artículo nos hemos centrado en la gestión de contenidos para objetos multimedia continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero todavía tenemos que elaborar los detalles necesarios para apoyar esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que los contenidos multimedia se compartan fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. 6. REFERENCIAS [1] K.. Cheng e Y. Kambayashi. Gestión de Contenidos Multicaché-basada para Web Caching. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información Web, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. PRISM Architecture: Apoyando los servicios de transmisión mejorada en una red de distribución de contenido. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de vídeo digital habilitado para la red. 11o Taller de IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, y P. Shenoy. Una arquitectura de clúster de servidores multimedia de transmisión de demanda adaptativa y con conocimiento de la localización (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Recomendador de TV multi-agente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11",
    "error_count": 7,
    "keys": {
        "spectrum content management system": {
            "translated_key": [],
            "translated_annotated_text": "Diseño e implementación de un sistema de gestión de contenido distribuido C. D. Cranor, R. Ethington, A. Sehgal†, D. Shur, C. Sreenan‡ y J.E. van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland RESUMEN La convergencia de los avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan e intercambian de forma rutinaria entre dispositivos habilitados para la red. Mantener un seguimiento de (o gestionar) dicho contenido sigue siendo un reto debido al gran volumen de datos. El almacenamiento de medios continuos en vivo (como contenidos de televisión o radio) aumenta la complejidad en el sentido de que este contenido no tiene un inicio o un final bien definidos y, por lo tanto, resulta engorroso de tratar. El almacenamiento en red permite que los contenidos que se consideran lógicamente como parte de la misma colección se distribuyan de hecho a través de una red, haciendo que la tarea de gestión de contenidos sea casi imposible de manejar sin un sistema de gestión de contenidos. En este trabajo presentamos el diseño y la implementación del sistema de gestión de contenidos Spectrum, que trata de contenido multimedia rico de manera efectiva en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto a escenarios independientes como a diversos escenarios en red. Un aspecto único de Spectrum es que requiere una (o más) políticas de retención para aplicarse a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido que ya no tiene una política de retención aplicada se elimina simplemente del sistema. Las diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así naturalmente el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo que son elementos básicos necesarios para hacer frente al almacenamiento de medios continuos en vivo, a los contenidos. No sólo describimos los detalles de la arquitectura Spectrum, sino que también damos casos de uso típicos. Categorías y Descriptores de Asunto C.2.4 [Organización de Sistemas de Computación]: Sistemas distribuidos por redes de comunicación informática; H.3.4 [Sistemas de Información]: Sistemas de almacenamiento y recuperación de información y software Términos generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar el contenido es y siempre ha sido una de las funciones principales de un ordenador. Las aplicaciones de computación inicial incluyen formateadores de texto y compiladores de programas. El contenido fue administrado inicialmente por interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que la gente desea utilizarlo han cambiado enormemente. Los nuevos tipos de contenidos, como los flujos multimedia continuos, se han convertido en algo común debido a la convergencia de los avances en las tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de vídeo codificado de calidad de TV en una sola unidad de disco. Esto ha llevado a la introducción de sistemas independientes de grabación de vídeo digital o de grabación de vídeo personal (PVR), como TiVO [8] y ReplayTV [7]. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas con la propia red actuando como un enorme repositorio de datos. La proliferación de contenidos de alta calidad gracias a estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. Nuestro trabajo se centra en el almacenamiento de contenidos multimedia ricos y, en particular, el almacenamiento de contenidos multimedia continuos en formatos preenvasados o en directo. La necesidad de gestión de contenidos en esta área es evidente cuando se tiene en cuenta lo siguiente: • El aumento de la capacidad y la disminución del costo de almacenamiento significa que incluso los modestos sistemas de escritorio hoy en día tienen la capacidad de almacenar cantidades masivas de contenido. La gestión manual de dichos contenidos (o, más correctamente, la no gestión manual de dichos contenidos) produce grandes ineficiencias en los casos en que el almacenamiento de residuos de contenidos no deseados y olvidados no es posible y en los que no se puede encontrar el contenido deseado. • Si bien es cierto para todo tipo de contenido, el almacenamiento de contenido multimedia continuo es especialmente problemático. El primer contenido continuo de los medios sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque de almacenamiento sin políticas no funcionará para todos, sino para los sistemas más pequeños. En segundo lugar, el almacenamiento de contenido en vivo como TV o radio es inherentemente problemático, ya que estas señales son corrientes continuas sin terminales. Esto significa que antes de que uno pueda siquiera pensar en manejar tal contenido hay una necesidad de abstraerlo en algo que podría ser manipulado y manejado. 4 • Cuando se trata de medios continuos almacenados, es necesario gestionar dichos contenidos tanto a un nivel de grano fino como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar sólo los aspectos más destacados de un evento deportivo en particular no debe tener que almacenar el contenido correspondiente al evento completo. Al mismo tiempo, el usuario podría querer pensar en el contenido en el agregado, por ejemplo. eliminar todo el contenido que no he visto en el último mes, excepto el contenido que fue explícitamente marcado para archivo. • Como se ha indicado anteriormente, es muy difícil tratar de hacer un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenidos. Sin embargo, cuando los dispositivos de almacenamiento reales se distribuyen a través de una red, la tarea de realizar un seguimiento del contenido es casi imposible. Este escenario es cada vez más común en los sistemas de distribución de contenidos basados en la red y es probable que también sea importante en los escenarios de creación de redes en el hogar. Parece entonces claro que se necesita un sistema de gestión de contenidos que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que se explota la capacidad en red de los dispositivos de almacenamiento. Este sistema debería permitir el almacenamiento eficiente de contenidos y el acceso a ellos a través de dispositivos de almacenamiento de redes heterogéneos, de acuerdo con las preferencias del usuario. El sistema de gestión de contenidos debe traducir las preferencias de los usuarios en políticas adecuadas de almacenamiento de bajo nivel y permitir que esas preferencias se expresen en un nivel fino de granularidad (aunque no lo exijan en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar (es decir. cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenidos distribuidos es difícil debido al número de requisitos que se imponen al sistema. Por ejemplo: • El sistema de gestión de contenidos debe funcionar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando el contenido almacenado en un sistema de archivos local, mientras que en otros, el contenido puede almacenarse en un dispositivo de almacenamiento de red separado. El gestor de contenidos podrá ser responsable de la aplicación de las políticas que utilice para hacer referencia al contenido o de la delegación de dicho papel en un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. • El sistema de gestión de contenidos debe ser flexible y ser capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe obtenerse, cuándo debe obtenerse, cuánto tiempo debe conservarse y en qué circunstancias debe desecharse. Esto significa que el sistema de gestión de contenidos debería permitir a múltiples aplicaciones hacer referencia al contenido con un rico conjunto de políticas y que todos deberían trabajar juntos sin problemas. • El sistema de gestión de contenidos debe poder controlar las referencias de contenido y utilizar esa información para colocar el contenido en la ubicación correcta de la red para un acceso eficiente a las aplicaciones. • El sistema de gestión de contenidos debe manejar la interacción entre la población implícita y explícita de contenidos en el borde de la red. • El sistema de contenidos debe ser capaz de gestionar eficientemente grandes conjuntos de contenidos, incluyendo flujos continuos. Necesita poder empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas hemos diseñado e implementado la arquitectura del sistema de gestión de contenidos Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite a múltiples aplicaciones hacer referencia al contenido utilizando políticas diferentes. Tenga en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenidos (CDN) que puede facilitar la distribución eficiente de contenidos (por ejemplo, la arquitectura PRISM CDN [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. La labor conexa se describe en la sección 4, y la sección 5 contiene nuestras conclusiones y sugerencias para la labor futura. 2. LA ARQUITECTURA DEL SISTEMA DE GESTIÓN DE CONTENIDO DISTRIBUIDO POR ESPECTRO La arquitectura del espectro consta de tres capas de gestión distintas que pueden o no distribuirse entre múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todos los contenidos de las aplicaciones de acuerdo con las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de vídeo personal (PVR), el gestor de contenidos recibe solicitudes de contenido de una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y administrar contenido en el dispositivo. gestor de políticas: implementa y hace cumplir varias políticas de almacenamiento que el gestor de contenidos utiliza para referirse al contenido. El gestor de políticas exporta una interfaz al gestor de contenidos que permite al gestor de contenidos solicitar que el contenido de una pieza sea tratado de acuerdo con una política específica. Spectrum permite que las políticas arbitrarias se realicen proporcionando un conjunto fijo de plantillas de políticas de base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (si no, Spectrum puede ampliarse fácilmente para cargar dinámicamente nuevo código de plantilla de política de base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido sólo puede existir en el sistema mientras se haga referencia a él al menos mediante una política existente. Los conflictos políticos se eliminan haciendo que el director de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin ninguna política asociada con él se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar naturalmente el intercambio de contenidos entre diferentes políticas, lo que es fundamental para el almacenamiento eficiente de objetos de gran tamaño. Tenga en cuenta que una diferencia clave entre el gestor de contenidos y el gestor de políticas es que el gestor de contenidos gestiona referencias a múltiples piezas de contenido, es decir. tiene una visión de aplicación del contenido. Por otra parte, el gestor de políticas sólo se ocupa de la política utilizada para gestionar contenidos independientes. Por ejemplo, en una aplicación PVR, la capa del gestor de contenidos sabría acerca de los diferentes grupos de contenido gestionado, como mantener-indefinidamente, guardar durante un día, y mantener si el espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada contenido tiene 5 contenido Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figura 1: Los componentes de la arquitectura Spectrum y las cuatro formas en que pueden configurarse su propia política (o políticas) se le aplican y son independientes de otros contenidos. administrador de almacenamiento: almacena el contenido de una manera eficiente al tiempo que facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento almacena contenido en trozos de subobjeto. Este enfoque tiene ventajas para la recuperación eficiente de contenidos, pero lo que es más importante, permite que las políticas se apliquen a un nivel de subobjetos que es de importancia crítica cuando se trata de objetos muy grandes como partes de medios continuos, por ejemplo. piezas seleccionadas de contenido de TV que se almacenan en un PVR. Tenga en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas utilizadas por los gestores de contenido y políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la Figura muestra el caso más simple (no distribuido) donde todas las capas se implementan en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como PVRs. El siguiente caso corresponde al caso en que existe un gestor de contenidos centralizado que controla los dispositivos de almacenamiento distribuidos, cada uno de los cuales es responsable de la aplicación del almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, funcionan de forma mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, normalmente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido basado en un calendario determinado por algún controlador centralizado. Por ejemplo, el CDN podría prepoblar dispositivos de borde con contenido que se espera que sea muy popular o distribuir archivos grandes a las sucursales durante horas fuera del pico en un entorno empresarial limitado por el ancho de banda. Permitir que un único gestor de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y el caso más distribuido. La necesidad de este tipo de separación puede ocurrir por razones de escalabilidad o cuando diferentes dispositivos o aparatos de almacenamiento especializados están obligados a ser controlados por un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas que controla un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo de grano fino por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de contenidos La capa de gestor de contenidos es la interfaz principal a través de la cual aplicaciones específicas utilizan la arquitectura Spectrum. Como tal, la capa de gestor de contenidos proporciona una API para que la aplicación manipule todos los aspectos de la arquitectura Spectrum en diferentes niveles de granularidad. La API del gestor de contenidos tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite añadir dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo control del gestor de contenidos y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos - este es el único lugar en la arquitectura donde se requiere que la aplicación sea consciente de esta distinción. Una vez que un dispositivo se mapea en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Tiendas: Las tiendas son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (p. ej. espacio en disco) a él. Las tiendas sólo se pueden crear en dispositivos físicos que se mapean en el sistema. Grupos de políticas: Los grupos de políticas son los medios por los cuales una aplicación especifica, instancia y modifica las políticas que se aplican al contenido Spectrum. El uso típico de este conjunto de funciones es seleccionar uno de un pequeño conjunto de políticas de base y parametrizar esta instancia específica de la política. Se crean grupos de políticas dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que requieren una especificación de tiempo sofisticada permiten el almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría desalojar el contenido del sistema en un determinado momento absoluto o relativo. Una política temporal ligeramente más implicada, habilitada por la arquitectura Spectrum, podría permitir que el contenido se almacene en una ventana móvil de varias horas (por ejemplo, el número de horas N más reciente se mantiene en el sistema). Las políticas basadas en el tiempo son de particular utilidad cuando se trata de contenidos continuos como una transmisión en vivo. 6 Contenido: En el mejor nivel de contenido de granularidad se puede añadir o eliminar del sistema. El contenido se especifica en el sistema mediante un localizador de recursos uniforme (URL) que indica de forma concisa la ubicación del contenido, así como el protocolo que se utilizará para recuperarlo. Opcionalmente una especificación de tiempo se puede asociar con el contenido. Esto permite obtener contenido en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Una vez más, esto es particularmente útil para tratar con el almacenamiento y la gestión de contenido en vivo. 2.2 Gestor de políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones API. En primer lugar, hay funciones que funcionan en áreas de almacenamiento gestionado y referencias basadas en políticas (prefs) al contenido almacenado allí. En segundo lugar, hay conjuntos de funciones utilizadas para aplicar cada política de gestión. La primera clase de funciones es utilizada por la capa del gestor de contenidos para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar: Estas operaciones son utilizadas por el gestor de contenidos para controlar su acceso al almacenamiento. Los gestores de políticas crean operación se utiliza para establecer contacto con una tienda por primera vez. Una vez hecho esto, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Tenga en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información sólo debe ser transmitida al gestor de políticas una vez a la hora de crear. Para operaciones abiertas, el gestor de políticas utilizará la información en caché para ponerse en contacto con la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el gestor de contenidos consulte al gestor de políticas sobre qué contenido está actualmente presente para una URL dada. Para los intervalos de tiempo continuos de los medios actuales se devolverán. recurso: Las rutinas de recursos se utilizan para consultar al gestor de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su conjunto y otra que se aplica a una determinada referencia política. El recurso API es extensible, actualmente soportamos consultas sobre el uso del disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer es utilizada por el gestor de contenido para referenciar el contenido en la tienda. Si el contenido no está presente, esta llamada resultará en que el contenido sea obtenido (o programado para ser obtenido si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL para almacenarla debajo, la URL para obtener datos de si no está presente, la política para almacenar el contenido debajo y los argumentos utilizados para parametrizar la política. El resultado de una operación pref establecer con éxito es una cadena de identificación de referencia política. Este ID se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones de gestor de políticas se utiliza para implementar todas las políticas apoyadas por Spectrum. Prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitivo puede ser parametrizada para funcionar diariamente, semanal o mensualmente. Tenga en cuenta que el gestor de políticas sólo se ocupa de la ejecución de una política específica. Las razones de mayor nivel para elegir una determinada política son manejadas por el gestor de contenido y aplicación. Una política de base se implementa usando seis funciones: establecer: llamada cuando se establece un pref con las URLs requeridas y los parámetros de las políticas de base. El establecimiento de rutina hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar medidas (por ejemplo. iniciar una descarga) y programa una devolución de llamada para ese tiempo. También puede registrarse para recibir callbacks si se recibe nuevo contenido para una URL dada. actualización: llamada a cambiar los parámetros de un pref, o a descartar la referencia política. newclip: llamado cuando se recibe un trozo de contenido nuevo para una URL de interés. La política de base normalmente organiza que newclip sea llamado para una URL dada cuando se establece la pref. Cuando se llama newclip, la política de base comprueba sus parámetros para determinar si desea añadir una referencia al clip que acaba de recibir. callback: llamado cuando el pref programa un callback basado en temporizador. Este es un mecanismo útil de despertar para prefs que necesitan estar inactivos durante un largo período de tiempo (por ejemplo. entre programas). boot/shutdown: llamado cuando el sistema de gestión de contenido está arrancando o apagando. La operación de arranque se utiliza normalmente para programar las llamadas iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para apagar con gracia flujos de E/S y guardar estado. 2.3 Gestor de almacenamiento El papel del Gestor de almacenamiento Spectrums es controlar todas las operaciones de E/S asociadas a una tienda dada. El gestor de almacenamiento Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo: un aparato de almacenamiento). Para medios continuos, en el nivel de administrador de almacenamiento el contenido se almacena como una colección de trozos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un trozo podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son de entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión tanto las rutinas de entrada como de salida toman intervalos de tiempo que programan cuando la operación de E/S debe ocurrir, y ambas rutinas devuelven una manija de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el gestor de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar tiendas. También es compatible con las operaciones para consultar los usos de recursos y las opciones apoyadas por la tienda. Por último, el administrador de almacenamiento también tiene una rutina de descartes que puede ser utilizada por el administrador de políticas para informar a la tienda para eliminar el contenido de la tienda. 3. CASOS DE APLICACIÓN Y USO En esta sección describimos nuestra implementación de Spectrum y cómo se puede utilizar. 3.1 Implementación Hemos implementado Spectrums tres capas en C como parte de una biblioteca que puede vincularse con aplicaciones basadas en Spectrum. Cada capa realiza un seguimiento de su estado a través de un conjunto de archivos de datos locales que persisten a través de los reinicios, permitiendo así a Spectrum manejar sin problemas los ciclos de potencia. Para capas que residen en sistemas remotos (p. ej. una tienda remota) sólo la meta-información necesaria para contactar con el remoto 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Interfaz gráfica de usuario Red activada DVR Program Information Content DVR Application Figura 2: El espectro en un nodo DVR habilitado de red se almacena localmente. Nuestra aplicación de prueba utiliza una política local y un gestor de almacenamiento para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficazmente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas Spectrums API admiten modos síncronos y asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada API lleva un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de llamada y el estado de retorno. Para llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamadas. Para usar una función Spectrum API, el llamante elige primero el modo sincronización o asíncrona y asigna una estructura reqinfo. Para las llamadas de sincronización, el reqinfo se puede asignar en la pila, de lo contrario se asigna con malloc. Para las llamadas async, se debe proporcionar una función de devolución de llamada cuando se asigna el reqinfo. A continuación, el llamante invoca la función Spectrum API deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas async exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada async se completa o se produce un tiempo de espera, la función de devolución de llamada async se llama con la información adecuada necesaria para completar el procesamiento. El diseño modular/en capas de la arquitectura Spectrum simplifica el objetivo de distribución de la funcionalidad. Además, la comunicación entre funciones es típicamente de naturaleza maestro-esclavo(s). Esto significa que varios enfoques de la operación distribuida son posibles que satisfagan los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un simple diseño modular. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y seleccionar el método de codificación que debe utilizarse con los datos a transferir. Los protocolos de transporte pueden variar protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP plano para la mayor parte de nuestro transporte. Las llamadas de funciones a través de las diferentes API de Spectrum se pueden codificar utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos usando la biblioteca XML de eXpat [4] para codificar nuestras llamadas. Mientras estamos actualmente transfiriendo nuestros mensajes codificados XML usando una conexión TCP simple, en un entorno real esto puede ser reemplazado fácilmente por una implementación basada en una capa segura de sockets (SSL) para mejorar la seguridad mediante la adición de SSL como protocolo de transporte. Un aspecto importante del Spectrum es que puede gestionar contenidos basados en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la sección 2.2, prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben entender las políticas a nivel de base y cómo pueden ser parametrizadas. Para abordar este tema, tratamos cada política a nivel de base como si fuera un programa separado. Cada política a nivel de base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada usando una función tipo getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de bytes no es un problema en una cadena. Dado que esta parte de Spectrum no está en la ruta de datos críticos, este tipo de formato no es un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos del Espectro En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos del Espectro en nuestro entorno. El foco de nuestro trabajo anterior ha sido la distribución de contenido para el contenido multimedia en streaming [2] y la grabación digital de vídeo habilitada en red [3]. El sistema Spectrum es aplicable a ambos escenarios de la manera siguiente. La Figura 2 muestra la arquitectura DVR (NED) activada por red. En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación DVR obtiene listados de programas de alguna fuente de red, se ocupa de la presentación del usuario a través de una interfaz gráfica de usuario (GUI), e interfaz con el sistema Spectrum a través de las API de la capa de gestión de contenidos. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento a 8 Content Manager Centralized Content Management station Información de contenidoGuía de interfaz de usuario Gestor de almacenamiento Gestor de almacenamiento Fetcher Edge Portal Política de servidor Gestor de almacenamiento Gestor de almacenamiento Gestor de almacenamiento Gestor de contenido Fetcher Edge Portal Server Distributed Content To La obtención del contenido (a través de la red o localmente) y el posterior almacenamiento en el sistema local es entonces manejado por los gerentes de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenidos en streaming (p. ej. PRISM [2] se muestra en la Figura 3. En este entorno se está distribuyendo contenido multimedia en streaming (tanto en directo, enlatado en vivo como bajo demanda) a portales de borde desde donde se están sirviendo los puntos finales de streaming. En nuestro entorno la distribución y almacenamiento de contenidos se realiza desde una estación centralizada de gestión de contenidos que controla varios de los portales de borde. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenidos sin necesidad de comunicación continua entre el gestor de contenidos y los dispositivos de borde, es decir. una vez que se han dado instrucciones a los dispositivos de borde que pueden funcionar de forma independiente hasta que se van a hacer cambios. 3.3 Spectrum Operational Ejemplo Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación PVR basada en Spectrum programada para almacenar un día de contenido en streaming en una ventana móvil. Para configurar la ventana móvil, la aplicación utilizaría la API del gestor de contenidos para crear un grupo de políticas y una referencia política al contenido deseado. El establecimiento de la referencia de la política de ventanilla móvil de un día haría que el pesebre de la política pidiera al administrador de almacenamiento que comenzara a recibir la corriente. A medida que llega cada trozo de datos de streaming, el gestor de políticas ejecuta la función newclip de referencias políticas. La función newclip añade una referencia a cada trozo que llega, y programa una devolución de llamada un día después. En ese momento, la política dejará de hacer referencia al contenido, que ya tiene un día de antigüedad, y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considere el caso en el que el usuario decide guardar parte del contenido (por ejemplo. un programa específico) en la ventana de rodadura durante una semana adicional. Para ello, la aplicación solicita que el gestor de contenidos agregue una nueva referencia política adicional a la parte del contenido a conservar. Por lo tanto, el contenido conservado tiene dos referencias: una desde la ventana móvil y otra desde la solicitud de preservar el contenido durante una semana adicional. Después de un día la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. base de datos url1 url2 (archivos multimedia...) (archivos multimedia...) meta store (información general...) url1 screens prefs ranges media screens, etc.url2 poly host ref1 ref1.files ref1.state Figura 4: Diseño de datos de Spectrum policy store preservado por la segunda referencia. Después de la semana adicional ha pasado, la función callback para la segunda referencia será llamada. Esta función descartará la referencia restante al contenido y como no hay referencias restantes, el contenido será liberado. Con el fin de funcionar en escenarios como los descritos anteriormente, Spectrums gestor de políticas debe gestionar y mantener todas las referencias a varios trozos de medios. Estas referencias son persistentes y por lo tanto deben ser capaces de sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestra implementación de Spectrum Policy Manager logra esto usando la estructura de archivos y directorios que se muestra en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el administrador de almacenamiento para almacenar cada URL activa trozos de medios. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Tenga en cuenta que este directorio se utiliza sólo si el administrador de almacenamiento es local. Si el gestor de políticas está utilizando un gestor de almacenamiento externo (por ejemplo: un aparato de almacenamiento), a continuación, los archivos multimedia se almacenan de forma remota y sólo son remotamente referenciados por el gestor de políticas. meta: este directorio contiene meta información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) e información sobre los tipos de trozos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los trozos de datos almacenados. El archivo de trozos contiene una lista de trozos actualmente almacenados y sus cuentas de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de rangos temporales de datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato de los medios almacenados bajo la URL actual. poli: este directorio contiene un conjunto de subdirectorios host. Cada subdirectorio de host contiene el conjunto de referencias políticas creadas por ese host. La información sobre cada referencia política se divide en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files, y ref1.state. El archivo ref1 contiene información sobre la política de referencia que no cambia con frecuencia. Esta información incluye la política de base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a trozos que pref ref1 posee. Por último, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Tenga en cuenta que otras implementaciones son posibles. Por ejemplo, un gestor de Spectrum de grado de operador podría almacenar toda su información normativa y de referencia en un sistema de bases de datos de alto rendimiento. 10 4. TRABAJOS RELACIONADOS Varios autores han abordado el problema de la gestión de contenidos en redes distribuidas. Gran parte de la labor se centra en el aspecto de la gestión de políticas. Por ejemplo en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda de los usuarios mediante un protocolo de difusión de la demanda. El rendimiento del sistema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Router Central, una base de conocimiento caché, subcachés y un juez de desalojo subcaché. La base Cache Knowledge permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenidos en el entorno en red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenidos, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de TV que se utilizan en PVRs para seleccionar automáticamente el contenido para los usuarios, por ejemplo. [6]. En el caso de que Spectrum se utilice en una configuración PVR, este tipo de sistema desempeñaría una función de nivel superior y podría beneficiarse claramente de las funcionalidades de la arquitectura Spectrum. Por último, en los proveedores comerciales de medio ambiente de CDN (por ejemplo, Cisco y Netapp) han desarrollado e implementado productos y herramientas de gestión de contenidos. A diferencia de la arquitectura Spectrum que permite que los dispositivos de borde funcionen de una manera en gran medida autónoma, las soluciones de proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. 5. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo presentamos el diseño e implementación de la arquitectura de gestión de contenidos Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que tengan tiempo y que se ocupen eficazmente del almacenamiento de contenido multimedia continuo. Por último, el diseño modular de la arquitectura Spectrum permite realizaciones independientes y distribuidas para que el sistema se pueda implementar en una variedad de aplicaciones. Hay una serie de cuestiones pendientes que requerirán una labor futura. Algunos de estos problemas incluyen: • Prevemos que Spectrum sea capaz de gestionar contenido en sistemas que van desde grandes CDNs hasta aparatos más pequeños como TiVO [8]. Para que estos sistemas más pequeños soporten Spectrum necesitarán redes y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo puede encajar en la arquitectura Spectrum. • El contenido de nombres de espectro por URL, pero no hemos definido intencionadamente el formato de las URLs de espectro, cómo se mapean al nombre real del contenido, o cómo los nombres y URLs deben ser presentados al usuario. Si bien hemos abordado anteriormente estas cuestiones en otros lugares [2], creemos que queda más trabajo por hacer y que es necesario elaborar normas consensuadas sobre la designación de nombres. • En este artículo nos hemos centrado en la gestión de contenidos para objetos multimedia continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero todavía tenemos que elaborar los detalles necesarios para apoyar esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que los contenidos multimedia se compartan fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. 6. REFERENCIAS [1] K.. Cheng e Y. Kambayashi. Gestión de Contenidos Multicaché-basada para Web Caching. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información Web, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. PRISM Architecture: Apoyando los servicios de transmisión mejorada en una red de distribución de contenido. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de vídeo digital habilitado para la red. 11o Taller de IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, y P. Shenoy. Una arquitectura de clúster de servidores multimedia de transmisión de demanda adaptativa y con conocimiento de la localización (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Recomendador de TV multi-agente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "error": []
        },
        "continuous media storage": {
            "translated_key": [],
            "translated_annotated_text": "Diseño e implementación de un sistema de gestión de contenido distribuido C. D. Cranor, R. Ethington, A. Sehgal†, D. Shur, C. Sreenan‡ y J.E. van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland RESUMEN La convergencia de los avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan e intercambian de forma rutinaria entre dispositivos habilitados para la red. Mantener un seguimiento de (o gestionar) dicho contenido sigue siendo un reto debido al gran volumen de datos. El almacenamiento de medios continuos en vivo (como contenidos de televisión o radio) aumenta la complejidad en el sentido de que este contenido no tiene un inicio o un final bien definidos y, por lo tanto, resulta engorroso de tratar. El almacenamiento en red permite que los contenidos que se consideran lógicamente como parte de la misma colección se distribuyan de hecho a través de una red, haciendo que la tarea de gestión de contenidos sea casi imposible de manejar sin un sistema de gestión de contenidos. En este trabajo presentamos el diseño y la implementación del sistema de gestión de contenidos Spectrum, que trata de contenido multimedia rico de manera efectiva en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto a escenarios independientes como a diversos escenarios en red. Un aspecto único de Spectrum es que requiere una (o más) políticas de retención para aplicarse a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido que ya no tiene una política de retención aplicada se elimina simplemente del sistema. Las diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así naturalmente el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo que son elementos básicos necesarios para hacer frente al almacenamiento de medios continuos en vivo, a los contenidos. No sólo describimos los detalles de la arquitectura Spectrum, sino que también damos casos de uso típicos. Categorías y Descriptores de Asunto C.2.4 [Organización de Sistemas de Computación]: Sistemas distribuidos por redes de comunicación informática; H.3.4 [Sistemas de Información]: Sistemas de almacenamiento y recuperación de información y software Términos generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar el contenido es y siempre ha sido una de las funciones principales de un ordenador. Las aplicaciones de computación inicial incluyen formateadores de texto y compiladores de programas. El contenido fue administrado inicialmente por interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que la gente desea utilizarlo han cambiado enormemente. Los nuevos tipos de contenidos, como los flujos multimedia continuos, se han convertido en algo común debido a la convergencia de los avances en las tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de vídeo codificado de calidad de TV en una sola unidad de disco. Esto ha llevado a la introducción de sistemas independientes de grabación de vídeo digital o de grabación de vídeo personal (PVR), como TiVO [8] y ReplayTV [7]. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas con la propia red actuando como un enorme repositorio de datos. La proliferación de contenidos de alta calidad gracias a estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. Nuestro trabajo se centra en el almacenamiento de contenidos multimedia ricos y, en particular, el almacenamiento de contenidos multimedia continuos en formatos preenvasados o en directo. La necesidad de gestión de contenidos en esta área es evidente cuando se tiene en cuenta lo siguiente: • El aumento de la capacidad y la disminución del costo de almacenamiento significa que incluso los modestos sistemas de escritorio hoy en día tienen la capacidad de almacenar cantidades masivas de contenido. La gestión manual de dichos contenidos (o, más correctamente, la no gestión manual de dichos contenidos) produce grandes ineficiencias en los casos en que el almacenamiento de residuos de contenidos no deseados y olvidados no es posible y en los que no se puede encontrar el contenido deseado. • Si bien es cierto para todo tipo de contenido, el almacenamiento de contenido multimedia continuo es especialmente problemático. El primer contenido continuo de los medios sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque de almacenamiento sin políticas no funcionará para todos, sino para los sistemas más pequeños. En segundo lugar, el almacenamiento de contenido en vivo como TV o radio es inherentemente problemático, ya que estas señales son corrientes continuas sin terminales. Esto significa que antes de que uno pueda siquiera pensar en manejar tal contenido hay una necesidad de abstraerlo en algo que podría ser manipulado y manejado. 4 • Cuando se trata de medios continuos almacenados, es necesario gestionar dichos contenidos tanto a un nivel de grano fino como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar sólo los aspectos más destacados de un evento deportivo en particular no debe tener que almacenar el contenido correspondiente al evento completo. Al mismo tiempo, el usuario podría querer pensar en el contenido en el agregado, por ejemplo. eliminar todo el contenido que no he visto en el último mes, excepto el contenido que fue explícitamente marcado para archivo. • Como se ha indicado anteriormente, es muy difícil tratar de hacer un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenidos. Sin embargo, cuando los dispositivos de almacenamiento reales se distribuyen a través de una red, la tarea de realizar un seguimiento del contenido es casi imposible. Este escenario es cada vez más común en los sistemas de distribución de contenidos basados en la red y es probable que también sea importante en los escenarios de creación de redes en el hogar. Parece entonces claro que se necesita un sistema de gestión de contenidos que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que se explota la capacidad en red de los dispositivos de almacenamiento. Este sistema debería permitir el almacenamiento eficiente de contenidos y el acceso a ellos a través de dispositivos de almacenamiento de redes heterogéneos, de acuerdo con las preferencias del usuario. El sistema de gestión de contenidos debe traducir las preferencias de los usuarios en políticas adecuadas de almacenamiento de bajo nivel y permitir que esas preferencias se expresen en un nivel fino de granularidad (aunque no lo exijan en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar (es decir. cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenidos distribuidos es difícil debido al número de requisitos que se imponen al sistema. Por ejemplo: • El sistema de gestión de contenidos debe funcionar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando el contenido almacenado en un sistema de archivos local, mientras que en otros, el contenido puede almacenarse en un dispositivo de almacenamiento de red separado. El gestor de contenidos podrá ser responsable de la aplicación de las políticas que utilice para hacer referencia al contenido o de la delegación de dicho papel en un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. • El sistema de gestión de contenidos debe ser flexible y ser capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe obtenerse, cuándo debe obtenerse, cuánto tiempo debe conservarse y en qué circunstancias debe desecharse. Esto significa que el sistema de gestión de contenidos debería permitir a múltiples aplicaciones hacer referencia al contenido con un rico conjunto de políticas y que todos deberían trabajar juntos sin problemas. • El sistema de gestión de contenidos debe poder controlar las referencias de contenido y utilizar esa información para colocar el contenido en la ubicación correcta de la red para un acceso eficiente a las aplicaciones. • El sistema de gestión de contenidos debe manejar la interacción entre la población implícita y explícita de contenidos en el borde de la red. • El sistema de contenidos debe ser capaz de gestionar eficientemente grandes conjuntos de contenidos, incluyendo flujos continuos. Necesita poder empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas hemos diseñado e implementado la arquitectura del sistema de gestión de contenidos Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite a múltiples aplicaciones hacer referencia al contenido utilizando políticas diferentes. Tenga en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenidos (CDN) que puede facilitar la distribución eficiente de contenidos (por ejemplo, la arquitectura PRISM CDN [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. La labor conexa se describe en la sección 4, y la sección 5 contiene nuestras conclusiones y sugerencias para la labor futura. 2. LA ARQUITECTURA DEL SISTEMA DE GESTIÓN DE CONTENIDO DISTRIBUIDO POR ESPECTRO La arquitectura del espectro consta de tres capas de gestión distintas que pueden o no distribuirse entre múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todos los contenidos de las aplicaciones de acuerdo con las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de vídeo personal (PVR), el gestor de contenidos recibe solicitudes de contenido de una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y administrar contenido en el dispositivo. gestor de políticas: implementa y hace cumplir varias políticas de almacenamiento que el gestor de contenidos utiliza para referirse al contenido. El gestor de políticas exporta una interfaz al gestor de contenidos que permite al gestor de contenidos solicitar que el contenido de una pieza sea tratado de acuerdo con una política específica. Spectrum permite que las políticas arbitrarias se realicen proporcionando un conjunto fijo de plantillas de políticas de base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (si no, Spectrum puede ampliarse fácilmente para cargar dinámicamente nuevo código de plantilla de política de base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido sólo puede existir en el sistema mientras se haga referencia a él al menos mediante una política existente. Los conflictos políticos se eliminan haciendo que el director de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin ninguna política asociada con él se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar naturalmente el intercambio de contenidos entre diferentes políticas, lo que es fundamental para el almacenamiento eficiente de objetos de gran tamaño. Tenga en cuenta que una diferencia clave entre el gestor de contenidos y el gestor de políticas es que el gestor de contenidos gestiona referencias a múltiples piezas de contenido, es decir. tiene una visión de aplicación del contenido. Por otra parte, el gestor de políticas sólo se ocupa de la política utilizada para gestionar contenidos independientes. Por ejemplo, en una aplicación PVR, la capa del gestor de contenidos sabría acerca de los diferentes grupos de contenido gestionado, como mantener-indefinidamente, guardar durante un día, y mantener si el espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada contenido tiene 5 contenido Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figura 1: Los componentes de la arquitectura Spectrum y las cuatro formas en que pueden configurarse su propia política (o políticas) se le aplican y son independientes de otros contenidos. administrador de almacenamiento: almacena el contenido de una manera eficiente al tiempo que facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento almacena contenido en trozos de subobjeto. Este enfoque tiene ventajas para la recuperación eficiente de contenidos, pero lo que es más importante, permite que las políticas se apliquen a un nivel de subobjetos que es de importancia crítica cuando se trata de objetos muy grandes como partes de medios continuos, por ejemplo. piezas seleccionadas de contenido de TV que se almacenan en un PVR. Tenga en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas utilizadas por los gestores de contenido y políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la Figura muestra el caso más simple (no distribuido) donde todas las capas se implementan en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como PVRs. El siguiente caso corresponde al caso en que existe un gestor de contenidos centralizado que controla los dispositivos de almacenamiento distribuidos, cada uno de los cuales es responsable de la aplicación del almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, funcionan de forma mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, normalmente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido basado en un calendario determinado por algún controlador centralizado. Por ejemplo, el CDN podría prepoblar dispositivos de borde con contenido que se espera que sea muy popular o distribuir archivos grandes a las sucursales durante horas fuera del pico en un entorno empresarial limitado por el ancho de banda. Permitir que un único gestor de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y el caso más distribuido. La necesidad de este tipo de separación puede ocurrir por razones de escalabilidad o cuando diferentes dispositivos o aparatos de almacenamiento especializados están obligados a ser controlados por un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas que controla un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo de grano fino por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de contenidos La capa de gestor de contenidos es la interfaz principal a través de la cual aplicaciones específicas utilizan la arquitectura Spectrum. Como tal, la capa de gestor de contenidos proporciona una API para que la aplicación manipule todos los aspectos de la arquitectura Spectrum en diferentes niveles de granularidad. La API del gestor de contenidos tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite añadir dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo control del gestor de contenidos y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos - este es el único lugar en la arquitectura donde se requiere que la aplicación sea consciente de esta distinción. Una vez que un dispositivo se mapea en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Tiendas: Las tiendas son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (p. ej. espacio en disco) a él. Las tiendas sólo se pueden crear en dispositivos físicos que se mapean en el sistema. Grupos de políticas: Los grupos de políticas son los medios por los cuales una aplicación especifica, instancia y modifica las políticas que se aplican al contenido Spectrum. El uso típico de este conjunto de funciones es seleccionar uno de un pequeño conjunto de políticas de base y parametrizar esta instancia específica de la política. Se crean grupos de políticas dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que requieren una especificación de tiempo sofisticada permiten el almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría desalojar el contenido del sistema en un determinado momento absoluto o relativo. Una política temporal ligeramente más implicada, habilitada por la arquitectura Spectrum, podría permitir que el contenido se almacene en una ventana móvil de varias horas (por ejemplo, el número de horas N más reciente se mantiene en el sistema). Las políticas basadas en el tiempo son de particular utilidad cuando se trata de contenidos continuos como una transmisión en vivo. 6 Contenido: En el mejor nivel de contenido de granularidad se puede añadir o eliminar del sistema. El contenido se especifica en el sistema mediante un localizador de recursos uniforme (URL) que indica de forma concisa la ubicación del contenido, así como el protocolo que se utilizará para recuperarlo. Opcionalmente una especificación de tiempo se puede asociar con el contenido. Esto permite obtener contenido en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Una vez más, esto es particularmente útil para tratar con el almacenamiento y la gestión de contenido en vivo. 2.2 Gestor de políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones API. En primer lugar, hay funciones que funcionan en áreas de almacenamiento gestionado y referencias basadas en políticas (prefs) al contenido almacenado allí. En segundo lugar, hay conjuntos de funciones utilizadas para aplicar cada política de gestión. La primera clase de funciones es utilizada por la capa del gestor de contenidos para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar: Estas operaciones son utilizadas por el gestor de contenidos para controlar su acceso al almacenamiento. Los gestores de políticas crean operación se utiliza para establecer contacto con una tienda por primera vez. Una vez hecho esto, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Tenga en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información sólo debe ser transmitida al gestor de políticas una vez a la hora de crear. Para operaciones abiertas, el gestor de políticas utilizará la información en caché para ponerse en contacto con la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el gestor de contenidos consulte al gestor de políticas sobre qué contenido está actualmente presente para una URL dada. Para los intervalos de tiempo continuos de los medios actuales se devolverán. recurso: Las rutinas de recursos se utilizan para consultar al gestor de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su conjunto y otra que se aplica a una determinada referencia política. El recurso API es extensible, actualmente soportamos consultas sobre el uso del disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer es utilizada por el gestor de contenido para referenciar el contenido en la tienda. Si el contenido no está presente, esta llamada resultará en que el contenido sea obtenido (o programado para ser obtenido si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL para almacenarla debajo, la URL para obtener datos de si no está presente, la política para almacenar el contenido debajo y los argumentos utilizados para parametrizar la política. El resultado de una operación pref establecer con éxito es una cadena de identificación de referencia política. Este ID se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones de gestor de políticas se utiliza para implementar todas las políticas apoyadas por Spectrum. Prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitivo puede ser parametrizada para funcionar diariamente, semanal o mensualmente. Tenga en cuenta que el gestor de políticas sólo se ocupa de la ejecución de una política específica. Las razones de mayor nivel para elegir una determinada política son manejadas por el gestor de contenido y aplicación. Una política de base se implementa usando seis funciones: establecer: llamada cuando se establece un pref con las URLs requeridas y los parámetros de las políticas de base. El establecimiento de rutina hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar medidas (por ejemplo. iniciar una descarga) y programa una devolución de llamada para ese tiempo. También puede registrarse para recibir callbacks si se recibe nuevo contenido para una URL dada. actualización: llamada a cambiar los parámetros de un pref, o a descartar la referencia política. newclip: llamado cuando se recibe un trozo de contenido nuevo para una URL de interés. La política de base normalmente organiza que newclip sea llamado para una URL dada cuando se establece la pref. Cuando se llama newclip, la política de base comprueba sus parámetros para determinar si desea añadir una referencia al clip que acaba de recibir. callback: llamado cuando el pref programa un callback basado en temporizador. Este es un mecanismo útil de despertar para prefs que necesitan estar inactivos durante un largo período de tiempo (por ejemplo. entre programas). boot/shutdown: llamado cuando el sistema de gestión de contenido está arrancando o apagando. La operación de arranque se utiliza normalmente para programar las llamadas iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para apagar con gracia flujos de E/S y guardar estado. 2.3 Gestor de almacenamiento El papel del Gestor de almacenamiento Spectrums es controlar todas las operaciones de E/S asociadas a una tienda dada. El gestor de almacenamiento Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo: un aparato de almacenamiento). Para medios continuos, en el nivel de administrador de almacenamiento el contenido se almacena como una colección de trozos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un trozo podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son de entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión tanto las rutinas de entrada como de salida toman intervalos de tiempo que programan cuando la operación de E/S debe ocurrir, y ambas rutinas devuelven una manija de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el gestor de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar tiendas. También es compatible con las operaciones para consultar los usos de recursos y las opciones apoyadas por la tienda. Por último, el administrador de almacenamiento también tiene una rutina de descartes que puede ser utilizada por el administrador de políticas para informar a la tienda para eliminar el contenido de la tienda. 3. CASOS DE APLICACIÓN Y USO En esta sección describimos nuestra implementación de Spectrum y cómo se puede utilizar. 3.1 Implementación Hemos implementado Spectrums tres capas en C como parte de una biblioteca que puede vincularse con aplicaciones basadas en Spectrum. Cada capa realiza un seguimiento de su estado a través de un conjunto de archivos de datos locales que persisten a través de los reinicios, permitiendo así a Spectrum manejar sin problemas los ciclos de potencia. Para capas que residen en sistemas remotos (p. ej. una tienda remota) sólo la meta-información necesaria para contactar con el remoto 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Interfaz gráfica de usuario Red activada DVR Program Information Content DVR Application Figura 2: El espectro en un nodo DVR habilitado de red se almacena localmente. Nuestra aplicación de prueba utiliza una política local y un gestor de almacenamiento para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficazmente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas Spectrums API admiten modos síncronos y asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada API lleva un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de llamada y el estado de retorno. Para llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamadas. Para usar una función Spectrum API, el llamante elige primero el modo sincronización o asíncrona y asigna una estructura reqinfo. Para las llamadas de sincronización, el reqinfo se puede asignar en la pila, de lo contrario se asigna con malloc. Para las llamadas async, se debe proporcionar una función de devolución de llamada cuando se asigna el reqinfo. A continuación, el llamante invoca la función Spectrum API deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas async exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada async se completa o se produce un tiempo de espera, la función de devolución de llamada async se llama con la información adecuada necesaria para completar el procesamiento. El diseño modular/en capas de la arquitectura Spectrum simplifica el objetivo de distribución de la funcionalidad. Además, la comunicación entre funciones es típicamente de naturaleza maestro-esclavo(s). Esto significa que varios enfoques de la operación distribuida son posibles que satisfagan los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un simple diseño modular. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y seleccionar el método de codificación que debe utilizarse con los datos a transferir. Los protocolos de transporte pueden variar protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP plano para la mayor parte de nuestro transporte. Las llamadas de funciones a través de las diferentes API de Spectrum se pueden codificar utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos usando la biblioteca XML de eXpat [4] para codificar nuestras llamadas. Mientras estamos actualmente transfiriendo nuestros mensajes codificados XML usando una conexión TCP simple, en un entorno real esto puede ser reemplazado fácilmente por una implementación basada en una capa segura de sockets (SSL) para mejorar la seguridad mediante la adición de SSL como protocolo de transporte. Un aspecto importante del Spectrum es que puede gestionar contenidos basados en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la sección 2.2, prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben entender las políticas a nivel de base y cómo pueden ser parametrizadas. Para abordar este tema, tratamos cada política a nivel de base como si fuera un programa separado. Cada política a nivel de base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada usando una función tipo getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de bytes no es un problema en una cadena. Dado que esta parte de Spectrum no está en la ruta de datos críticos, este tipo de formato no es un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos del Espectro En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos del Espectro en nuestro entorno. El foco de nuestro trabajo anterior ha sido la distribución de contenido para el contenido multimedia en streaming [2] y la grabación digital de vídeo habilitada en red [3]. El sistema Spectrum es aplicable a ambos escenarios de la manera siguiente. La Figura 2 muestra la arquitectura DVR (NED) activada por red. En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación DVR obtiene listados de programas de alguna fuente de red, se ocupa de la presentación del usuario a través de una interfaz gráfica de usuario (GUI), e interfaz con el sistema Spectrum a través de las API de la capa de gestión de contenidos. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento a 8 Content Manager Centralized Content Management station Información de contenidoGuía de interfaz de usuario Gestor de almacenamiento Gestor de almacenamiento Fetcher Edge Portal Política de servidor Gestor de almacenamiento Gestor de almacenamiento Gestor de almacenamiento Gestor de contenido Fetcher Edge Portal Server Distributed Content To La obtención del contenido (a través de la red o localmente) y el posterior almacenamiento en el sistema local es entonces manejado por los gerentes de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenidos en streaming (p. ej. PRISM [2] se muestra en la Figura 3. En este entorno se está distribuyendo contenido multimedia en streaming (tanto en directo, enlatado en vivo como bajo demanda) a portales de borde desde donde se están sirviendo los puntos finales de streaming. En nuestro entorno la distribución y almacenamiento de contenidos se realiza desde una estación centralizada de gestión de contenidos que controla varios de los portales de borde. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenidos sin necesidad de comunicación continua entre el gestor de contenidos y los dispositivos de borde, es decir. una vez que se han dado instrucciones a los dispositivos de borde que pueden funcionar de forma independiente hasta que se van a hacer cambios. 3.3 Spectrum Operational Ejemplo Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación PVR basada en Spectrum programada para almacenar un día de contenido en streaming en una ventana móvil. Para configurar la ventana móvil, la aplicación utilizaría la API del gestor de contenidos para crear un grupo de políticas y una referencia política al contenido deseado. El establecimiento de la referencia de la política de ventanilla móvil de un día haría que el pesebre de la política pidiera al administrador de almacenamiento que comenzara a recibir la corriente. A medida que llega cada trozo de datos de streaming, el gestor de políticas ejecuta la función newclip de referencias políticas. La función newclip añade una referencia a cada trozo que llega, y programa una devolución de llamada un día después. En ese momento, la política dejará de hacer referencia al contenido, que ya tiene un día de antigüedad, y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considere el caso en el que el usuario decide guardar parte del contenido (por ejemplo. un programa específico) en la ventana de rodadura durante una semana adicional. Para ello, la aplicación solicita que el gestor de contenidos agregue una nueva referencia política adicional a la parte del contenido a conservar. Por lo tanto, el contenido conservado tiene dos referencias: una desde la ventana móvil y otra desde la solicitud de preservar el contenido durante una semana adicional. Después de un día la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. base de datos url1 url2 (archivos multimedia...) (archivos multimedia...) meta store (información general...) url1 screens prefs ranges media screens, etc.url2 poly host ref1 ref1.files ref1.state Figura 4: Diseño de datos de Spectrum policy store preservado por la segunda referencia. Después de la semana adicional ha pasado, la función callback para la segunda referencia será llamada. Esta función descartará la referencia restante al contenido y como no hay referencias restantes, el contenido será liberado. Con el fin de funcionar en escenarios como los descritos anteriormente, Spectrums gestor de políticas debe gestionar y mantener todas las referencias a varios trozos de medios. Estas referencias son persistentes y por lo tanto deben ser capaces de sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestra implementación de Spectrum Policy Manager logra esto usando la estructura de archivos y directorios que se muestra en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el administrador de almacenamiento para almacenar cada URL activa trozos de medios. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Tenga en cuenta que este directorio se utiliza sólo si el administrador de almacenamiento es local. Si el gestor de políticas está utilizando un gestor de almacenamiento externo (por ejemplo: un aparato de almacenamiento), a continuación, los archivos multimedia se almacenan de forma remota y sólo son remotamente referenciados por el gestor de políticas. meta: este directorio contiene meta información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) e información sobre los tipos de trozos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los trozos de datos almacenados. El archivo de trozos contiene una lista de trozos actualmente almacenados y sus cuentas de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de rangos temporales de datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato de los medios almacenados bajo la URL actual. poli: este directorio contiene un conjunto de subdirectorios host. Cada subdirectorio de host contiene el conjunto de referencias políticas creadas por ese host. La información sobre cada referencia política se divide en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files, y ref1.state. El archivo ref1 contiene información sobre la política de referencia que no cambia con frecuencia. Esta información incluye la política de base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a trozos que pref ref1 posee. Por último, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Tenga en cuenta que otras implementaciones son posibles. Por ejemplo, un gestor de Spectrum de grado de operador podría almacenar toda su información normativa y de referencia en un sistema de bases de datos de alto rendimiento. 10 4. TRABAJOS RELACIONADOS Varios autores han abordado el problema de la gestión de contenidos en redes distribuidas. Gran parte de la labor se centra en el aspecto de la gestión de políticas. Por ejemplo en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda de los usuarios mediante un protocolo de difusión de la demanda. El rendimiento del sistema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Router Central, una base de conocimiento caché, subcachés y un juez de desalojo subcaché. La base Cache Knowledge permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenidos en el entorno en red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenidos, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de TV que se utilizan en PVRs para seleccionar automáticamente el contenido para los usuarios, por ejemplo. [6]. En el caso de que Spectrum se utilice en una configuración PVR, este tipo de sistema desempeñaría una función de nivel superior y podría beneficiarse claramente de las funcionalidades de la arquitectura Spectrum. Por último, en los proveedores comerciales de medio ambiente de CDN (por ejemplo, Cisco y Netapp) han desarrollado e implementado productos y herramientas de gestión de contenidos. A diferencia de la arquitectura Spectrum que permite que los dispositivos de borde funcionen de una manera en gran medida autónoma, las soluciones de proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. 5. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo presentamos el diseño e implementación de la arquitectura de gestión de contenidos Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que tengan tiempo y que se ocupen eficazmente del almacenamiento de contenido multimedia continuo. Por último, el diseño modular de la arquitectura Spectrum permite realizaciones independientes y distribuidas para que el sistema se pueda implementar en una variedad de aplicaciones. Hay una serie de cuestiones pendientes que requerirán una labor futura. Algunos de estos problemas incluyen: • Prevemos que Spectrum sea capaz de gestionar contenido en sistemas que van desde grandes CDNs hasta aparatos más pequeños como TiVO [8]. Para que estos sistemas más pequeños soporten Spectrum necesitarán redes y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo puede encajar en la arquitectura Spectrum. • El contenido de nombres de espectro por URL, pero no hemos definido intencionadamente el formato de las URLs de espectro, cómo se mapean al nombre real del contenido, o cómo los nombres y URLs deben ser presentados al usuario. Si bien hemos abordado anteriormente estas cuestiones en otros lugares [2], creemos que queda más trabajo por hacer y que es necesario elaborar normas consensuadas sobre la designación de nombres. • En este artículo nos hemos centrado en la gestión de contenidos para objetos multimedia continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero todavía tenemos que elaborar los detalles necesarios para apoyar esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que los contenidos multimedia se compartan fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. 6. REFERENCIAS [1] K.. Cheng e Y. Kambayashi. Gestión de Contenidos Multicaché-basada para Web Caching. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información Web, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. PRISM Architecture: Apoyando los servicios de transmisión mejorada en una red de distribución de contenido. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de vídeo digital habilitado para la red. 11o Taller de IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, y P. Shenoy. Una arquitectura de clúster de servidores multimedia de transmisión de demanda adaptativa y con conocimiento de la localización (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Recomendador de TV multi-agente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "error": []
        },
        "home-networking scenario": {
            "translated_key": [],
            "translated_annotated_text": "Diseño e implementación de un sistema de gestión de contenido distribuido C. D. Cranor, R. Ethington, A. Sehgal†, D. Shur, C. Sreenan‡ y J.E. van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland RESUMEN La convergencia de los avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan e intercambian de forma rutinaria entre dispositivos habilitados para la red. Mantener un seguimiento de (o gestionar) dicho contenido sigue siendo un reto debido al gran volumen de datos. El almacenamiento de medios continuos en vivo (como contenidos de televisión o radio) aumenta la complejidad en el sentido de que este contenido no tiene un inicio o un final bien definidos y, por lo tanto, resulta engorroso de tratar. El almacenamiento en red permite que los contenidos que se consideran lógicamente como parte de la misma colección se distribuyan de hecho a través de una red, haciendo que la tarea de gestión de contenidos sea casi imposible de manejar sin un sistema de gestión de contenidos. En este trabajo presentamos el diseño y la implementación del sistema de gestión de contenidos Spectrum, que trata de contenido multimedia rico de manera efectiva en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto a escenarios independientes como a diversos escenarios en red. Un aspecto único de Spectrum es que requiere una (o más) políticas de retención para aplicarse a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido que ya no tiene una política de retención aplicada se elimina simplemente del sistema. Las diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así naturalmente el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo que son elementos básicos necesarios para hacer frente al almacenamiento de medios continuos en vivo, a los contenidos. No sólo describimos los detalles de la arquitectura Spectrum, sino que también damos casos de uso típicos. Categorías y Descriptores de Asunto C.2.4 [Organización de Sistemas de Computación]: Sistemas distribuidos por redes de comunicación informática; H.3.4 [Sistemas de Información]: Sistemas de almacenamiento y recuperación de información y software Términos generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar el contenido es y siempre ha sido una de las funciones principales de un ordenador. Las aplicaciones de computación inicial incluyen formateadores de texto y compiladores de programas. El contenido fue administrado inicialmente por interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que la gente desea utilizarlo han cambiado enormemente. Los nuevos tipos de contenidos, como los flujos multimedia continuos, se han convertido en algo común debido a la convergencia de los avances en las tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de vídeo codificado de calidad de TV en una sola unidad de disco. Esto ha llevado a la introducción de sistemas independientes de grabación de vídeo digital o de grabación de vídeo personal (PVR), como TiVO [8] y ReplayTV [7]. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas con la propia red actuando como un enorme repositorio de datos. La proliferación de contenidos de alta calidad gracias a estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. Nuestro trabajo se centra en el almacenamiento de contenidos multimedia ricos y, en particular, el almacenamiento de contenidos multimedia continuos en formatos preenvasados o en directo. La necesidad de gestión de contenidos en esta área es evidente cuando se tiene en cuenta lo siguiente: • El aumento de la capacidad y la disminución del costo de almacenamiento significa que incluso los modestos sistemas de escritorio hoy en día tienen la capacidad de almacenar cantidades masivas de contenido. La gestión manual de dichos contenidos (o, más correctamente, la no gestión manual de dichos contenidos) produce grandes ineficiencias en los casos en que el almacenamiento de residuos de contenidos no deseados y olvidados no es posible y en los que no se puede encontrar el contenido deseado. • Si bien es cierto para todo tipo de contenido, el almacenamiento de contenido multimedia continuo es especialmente problemático. El primer contenido continuo de los medios sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque de almacenamiento sin políticas no funcionará para todos, sino para los sistemas más pequeños. En segundo lugar, el almacenamiento de contenido en vivo como TV o radio es inherentemente problemático, ya que estas señales son corrientes continuas sin terminales. Esto significa que antes de que uno pueda siquiera pensar en manejar tal contenido hay una necesidad de abstraerlo en algo que podría ser manipulado y manejado. 4 • Cuando se trata de medios continuos almacenados, es necesario gestionar dichos contenidos tanto a un nivel de grano fino como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar sólo los aspectos más destacados de un evento deportivo en particular no debe tener que almacenar el contenido correspondiente al evento completo. Al mismo tiempo, el usuario podría querer pensar en el contenido en el agregado, por ejemplo. eliminar todo el contenido que no he visto en el último mes, excepto el contenido que fue explícitamente marcado para archivo. • Como se ha indicado anteriormente, es muy difícil tratar de hacer un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenidos. Sin embargo, cuando los dispositivos de almacenamiento reales se distribuyen a través de una red, la tarea de realizar un seguimiento del contenido es casi imposible. Este escenario es cada vez más común en los sistemas de distribución de contenidos basados en la red y es probable que también sea importante en los escenarios de creación de redes en el hogar. Parece entonces claro que se necesita un sistema de gestión de contenidos que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que se explota la capacidad en red de los dispositivos de almacenamiento. Este sistema debería permitir el almacenamiento eficiente de contenidos y el acceso a ellos a través de dispositivos de almacenamiento de redes heterogéneos, de acuerdo con las preferencias del usuario. El sistema de gestión de contenidos debe traducir las preferencias de los usuarios en políticas adecuadas de almacenamiento de bajo nivel y permitir que esas preferencias se expresen en un nivel fino de granularidad (aunque no lo exijan en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar (es decir. cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenidos distribuidos es difícil debido al número de requisitos que se imponen al sistema. Por ejemplo: • El sistema de gestión de contenidos debe funcionar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando el contenido almacenado en un sistema de archivos local, mientras que en otros, el contenido puede almacenarse en un dispositivo de almacenamiento de red separado. El gestor de contenidos podrá ser responsable de la aplicación de las políticas que utilice para hacer referencia al contenido o de la delegación de dicho papel en un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. • El sistema de gestión de contenidos debe ser flexible y ser capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe obtenerse, cuándo debe obtenerse, cuánto tiempo debe conservarse y en qué circunstancias debe desecharse. Esto significa que el sistema de gestión de contenidos debería permitir a múltiples aplicaciones hacer referencia al contenido con un rico conjunto de políticas y que todos deberían trabajar juntos sin problemas. • El sistema de gestión de contenidos debe poder controlar las referencias de contenido y utilizar esa información para colocar el contenido en la ubicación correcta de la red para un acceso eficiente a las aplicaciones. • El sistema de gestión de contenidos debe manejar la interacción entre la población implícita y explícita de contenidos en el borde de la red. • El sistema de contenidos debe ser capaz de gestionar eficientemente grandes conjuntos de contenidos, incluyendo flujos continuos. Necesita poder empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas hemos diseñado e implementado la arquitectura del sistema de gestión de contenidos Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite a múltiples aplicaciones hacer referencia al contenido utilizando políticas diferentes. Tenga en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenidos (CDN) que puede facilitar la distribución eficiente de contenidos (por ejemplo, la arquitectura PRISM CDN [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. La labor conexa se describe en la sección 4, y la sección 5 contiene nuestras conclusiones y sugerencias para la labor futura. 2. LA ARQUITECTURA DEL SISTEMA DE GESTIÓN DE CONTENIDO DISTRIBUIDO POR ESPECTRO La arquitectura del espectro consta de tres capas de gestión distintas que pueden o no distribuirse entre múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todos los contenidos de las aplicaciones de acuerdo con las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de vídeo personal (PVR), el gestor de contenidos recibe solicitudes de contenido de una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y administrar contenido en el dispositivo. gestor de políticas: implementa y hace cumplir varias políticas de almacenamiento que el gestor de contenidos utiliza para referirse al contenido. El gestor de políticas exporta una interfaz al gestor de contenidos que permite al gestor de contenidos solicitar que el contenido de una pieza sea tratado de acuerdo con una política específica. Spectrum permite que las políticas arbitrarias se realicen proporcionando un conjunto fijo de plantillas de políticas de base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (si no, Spectrum puede ampliarse fácilmente para cargar dinámicamente nuevo código de plantilla de política de base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido sólo puede existir en el sistema mientras se haga referencia a él al menos mediante una política existente. Los conflictos políticos se eliminan haciendo que el director de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin ninguna política asociada con él se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar naturalmente el intercambio de contenidos entre diferentes políticas, lo que es fundamental para el almacenamiento eficiente de objetos de gran tamaño. Tenga en cuenta que una diferencia clave entre el gestor de contenidos y el gestor de políticas es que el gestor de contenidos gestiona referencias a múltiples piezas de contenido, es decir. tiene una visión de aplicación del contenido. Por otra parte, el gestor de políticas sólo se ocupa de la política utilizada para gestionar contenidos independientes. Por ejemplo, en una aplicación PVR, la capa del gestor de contenidos sabría acerca de los diferentes grupos de contenido gestionado, como mantener-indefinidamente, guardar durante un día, y mantener si el espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada contenido tiene 5 contenido Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figura 1: Los componentes de la arquitectura Spectrum y las cuatro formas en que pueden configurarse su propia política (o políticas) se le aplican y son independientes de otros contenidos. administrador de almacenamiento: almacena el contenido de una manera eficiente al tiempo que facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento almacena contenido en trozos de subobjeto. Este enfoque tiene ventajas para la recuperación eficiente de contenidos, pero lo que es más importante, permite que las políticas se apliquen a un nivel de subobjetos que es de importancia crítica cuando se trata de objetos muy grandes como partes de medios continuos, por ejemplo. piezas seleccionadas de contenido de TV que se almacenan en un PVR. Tenga en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas utilizadas por los gestores de contenido y políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la Figura muestra el caso más simple (no distribuido) donde todas las capas se implementan en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como PVRs. El siguiente caso corresponde al caso en que existe un gestor de contenidos centralizado que controla los dispositivos de almacenamiento distribuidos, cada uno de los cuales es responsable de la aplicación del almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, funcionan de forma mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, normalmente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido basado en un calendario determinado por algún controlador centralizado. Por ejemplo, el CDN podría prepoblar dispositivos de borde con contenido que se espera que sea muy popular o distribuir archivos grandes a las sucursales durante horas fuera del pico en un entorno empresarial limitado por el ancho de banda. Permitir que un único gestor de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y el caso más distribuido. La necesidad de este tipo de separación puede ocurrir por razones de escalabilidad o cuando diferentes dispositivos o aparatos de almacenamiento especializados están obligados a ser controlados por un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas que controla un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo de grano fino por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de contenidos La capa de gestor de contenidos es la interfaz principal a través de la cual aplicaciones específicas utilizan la arquitectura Spectrum. Como tal, la capa de gestor de contenidos proporciona una API para que la aplicación manipule todos los aspectos de la arquitectura Spectrum en diferentes niveles de granularidad. La API del gestor de contenidos tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite añadir dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo control del gestor de contenidos y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos - este es el único lugar en la arquitectura donde se requiere que la aplicación sea consciente de esta distinción. Una vez que un dispositivo se mapea en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Tiendas: Las tiendas son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (p. ej. espacio en disco) a él. Las tiendas sólo se pueden crear en dispositivos físicos que se mapean en el sistema. Grupos de políticas: Los grupos de políticas son los medios por los cuales una aplicación especifica, instancia y modifica las políticas que se aplican al contenido Spectrum. El uso típico de este conjunto de funciones es seleccionar uno de un pequeño conjunto de políticas de base y parametrizar esta instancia específica de la política. Se crean grupos de políticas dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que requieren una especificación de tiempo sofisticada permiten el almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría desalojar el contenido del sistema en un determinado momento absoluto o relativo. Una política temporal ligeramente más implicada, habilitada por la arquitectura Spectrum, podría permitir que el contenido se almacene en una ventana móvil de varias horas (por ejemplo, el número de horas N más reciente se mantiene en el sistema). Las políticas basadas en el tiempo son de particular utilidad cuando se trata de contenidos continuos como una transmisión en vivo. 6 Contenido: En el mejor nivel de contenido de granularidad se puede añadir o eliminar del sistema. El contenido se especifica en el sistema mediante un localizador de recursos uniforme (URL) que indica de forma concisa la ubicación del contenido, así como el protocolo que se utilizará para recuperarlo. Opcionalmente una especificación de tiempo se puede asociar con el contenido. Esto permite obtener contenido en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Una vez más, esto es particularmente útil para tratar con el almacenamiento y la gestión de contenido en vivo. 2.2 Gestor de políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones API. En primer lugar, hay funciones que funcionan en áreas de almacenamiento gestionado y referencias basadas en políticas (prefs) al contenido almacenado allí. En segundo lugar, hay conjuntos de funciones utilizadas para aplicar cada política de gestión. La primera clase de funciones es utilizada por la capa del gestor de contenidos para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar: Estas operaciones son utilizadas por el gestor de contenidos para controlar su acceso al almacenamiento. Los gestores de políticas crean operación se utiliza para establecer contacto con una tienda por primera vez. Una vez hecho esto, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Tenga en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información sólo debe ser transmitida al gestor de políticas una vez a la hora de crear. Para operaciones abiertas, el gestor de políticas utilizará la información en caché para ponerse en contacto con la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el gestor de contenidos consulte al gestor de políticas sobre qué contenido está actualmente presente para una URL dada. Para los intervalos de tiempo continuos de los medios actuales se devolverán. recurso: Las rutinas de recursos se utilizan para consultar al gestor de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su conjunto y otra que se aplica a una determinada referencia política. El recurso API es extensible, actualmente soportamos consultas sobre el uso del disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer es utilizada por el gestor de contenido para referenciar el contenido en la tienda. Si el contenido no está presente, esta llamada resultará en que el contenido sea obtenido (o programado para ser obtenido si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL para almacenarla debajo, la URL para obtener datos de si no está presente, la política para almacenar el contenido debajo y los argumentos utilizados para parametrizar la política. El resultado de una operación pref establecer con éxito es una cadena de identificación de referencia política. Este ID se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones de gestor de políticas se utiliza para implementar todas las políticas apoyadas por Spectrum. Prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitivo puede ser parametrizada para funcionar diariamente, semanal o mensualmente. Tenga en cuenta que el gestor de políticas sólo se ocupa de la ejecución de una política específica. Las razones de mayor nivel para elegir una determinada política son manejadas por el gestor de contenido y aplicación. Una política de base se implementa usando seis funciones: establecer: llamada cuando se establece un pref con las URLs requeridas y los parámetros de las políticas de base. El establecimiento de rutina hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar medidas (por ejemplo. iniciar una descarga) y programa una devolución de llamada para ese tiempo. También puede registrarse para recibir callbacks si se recibe nuevo contenido para una URL dada. actualización: llamada a cambiar los parámetros de un pref, o a descartar la referencia política. newclip: llamado cuando se recibe un trozo de contenido nuevo para una URL de interés. La política de base normalmente organiza que newclip sea llamado para una URL dada cuando se establece la pref. Cuando se llama newclip, la política de base comprueba sus parámetros para determinar si desea añadir una referencia al clip que acaba de recibir. callback: llamado cuando el pref programa un callback basado en temporizador. Este es un mecanismo útil de despertar para prefs que necesitan estar inactivos durante un largo período de tiempo (por ejemplo. entre programas). boot/shutdown: llamado cuando el sistema de gestión de contenido está arrancando o apagando. La operación de arranque se utiliza normalmente para programar las llamadas iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para apagar con gracia flujos de E/S y guardar estado. 2.3 Gestor de almacenamiento El papel del Gestor de almacenamiento Spectrums es controlar todas las operaciones de E/S asociadas a una tienda dada. El gestor de almacenamiento Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo: un aparato de almacenamiento). Para medios continuos, en el nivel de administrador de almacenamiento el contenido se almacena como una colección de trozos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un trozo podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son de entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión tanto las rutinas de entrada como de salida toman intervalos de tiempo que programan cuando la operación de E/S debe ocurrir, y ambas rutinas devuelven una manija de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el gestor de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar tiendas. También es compatible con las operaciones para consultar los usos de recursos y las opciones apoyadas por la tienda. Por último, el administrador de almacenamiento también tiene una rutina de descartes que puede ser utilizada por el administrador de políticas para informar a la tienda para eliminar el contenido de la tienda. 3. CASOS DE APLICACIÓN Y USO En esta sección describimos nuestra implementación de Spectrum y cómo se puede utilizar. 3.1 Implementación Hemos implementado Spectrums tres capas en C como parte de una biblioteca que puede vincularse con aplicaciones basadas en Spectrum. Cada capa realiza un seguimiento de su estado a través de un conjunto de archivos de datos locales que persisten a través de los reinicios, permitiendo así a Spectrum manejar sin problemas los ciclos de potencia. Para capas que residen en sistemas remotos (p. ej. una tienda remota) sólo la meta-información necesaria para contactar con el remoto 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Interfaz gráfica de usuario Red activada DVR Program Information Content DVR Application Figura 2: El espectro en un nodo DVR habilitado de red se almacena localmente. Nuestra aplicación de prueba utiliza una política local y un gestor de almacenamiento para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficazmente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas Spectrums API admiten modos síncronos y asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada API lleva un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de llamada y el estado de retorno. Para llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamadas. Para usar una función Spectrum API, el llamante elige primero el modo sincronización o asíncrona y asigna una estructura reqinfo. Para las llamadas de sincronización, el reqinfo se puede asignar en la pila, de lo contrario se asigna con malloc. Para las llamadas async, se debe proporcionar una función de devolución de llamada cuando se asigna el reqinfo. A continuación, el llamante invoca la función Spectrum API deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas async exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada async se completa o se produce un tiempo de espera, la función de devolución de llamada async se llama con la información adecuada necesaria para completar el procesamiento. El diseño modular/en capas de la arquitectura Spectrum simplifica el objetivo de distribución de la funcionalidad. Además, la comunicación entre funciones es típicamente de naturaleza maestro-esclavo(s). Esto significa que varios enfoques de la operación distribuida son posibles que satisfagan los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un simple diseño modular. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y seleccionar el método de codificación que debe utilizarse con los datos a transferir. Los protocolos de transporte pueden variar protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP plano para la mayor parte de nuestro transporte. Las llamadas de funciones a través de las diferentes API de Spectrum se pueden codificar utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos usando la biblioteca XML de eXpat [4] para codificar nuestras llamadas. Mientras estamos actualmente transfiriendo nuestros mensajes codificados XML usando una conexión TCP simple, en un entorno real esto puede ser reemplazado fácilmente por una implementación basada en una capa segura de sockets (SSL) para mejorar la seguridad mediante la adición de SSL como protocolo de transporte. Un aspecto importante del Spectrum es que puede gestionar contenidos basados en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la sección 2.2, prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben entender las políticas a nivel de base y cómo pueden ser parametrizadas. Para abordar este tema, tratamos cada política a nivel de base como si fuera un programa separado. Cada política a nivel de base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada usando una función tipo getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de bytes no es un problema en una cadena. Dado que esta parte de Spectrum no está en la ruta de datos críticos, este tipo de formato no es un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos del Espectro En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos del Espectro en nuestro entorno. El foco de nuestro trabajo anterior ha sido la distribución de contenido para el contenido multimedia en streaming [2] y la grabación digital de vídeo habilitada en red [3]. El sistema Spectrum es aplicable a ambos escenarios de la manera siguiente. La Figura 2 muestra la arquitectura DVR (NED) activada por red. En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación DVR obtiene listados de programas de alguna fuente de red, se ocupa de la presentación del usuario a través de una interfaz gráfica de usuario (GUI), e interfaz con el sistema Spectrum a través de las API de la capa de gestión de contenidos. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento a 8 Content Manager Centralized Content Management station Información de contenidoGuía de interfaz de usuario Gestor de almacenamiento Gestor de almacenamiento Fetcher Edge Portal Política de servidor Gestor de almacenamiento Gestor de almacenamiento Gestor de almacenamiento Gestor de contenido Fetcher Edge Portal Server Distributed Content To La obtención del contenido (a través de la red o localmente) y el posterior almacenamiento en el sistema local es entonces manejado por los gerentes de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenidos en streaming (p. ej. PRISM [2] se muestra en la Figura 3. En este entorno se está distribuyendo contenido multimedia en streaming (tanto en directo, enlatado en vivo como bajo demanda) a portales de borde desde donde se están sirviendo los puntos finales de streaming. En nuestro entorno la distribución y almacenamiento de contenidos se realiza desde una estación centralizada de gestión de contenidos que controla varios de los portales de borde. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenidos sin necesidad de comunicación continua entre el gestor de contenidos y los dispositivos de borde, es decir. una vez que se han dado instrucciones a los dispositivos de borde que pueden funcionar de forma independiente hasta que se van a hacer cambios. 3.3 Spectrum Operational Ejemplo Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación PVR basada en Spectrum programada para almacenar un día de contenido en streaming en una ventana móvil. Para configurar la ventana móvil, la aplicación utilizaría la API del gestor de contenidos para crear un grupo de políticas y una referencia política al contenido deseado. El establecimiento de la referencia de la política de ventanilla móvil de un día haría que el pesebre de la política pidiera al administrador de almacenamiento que comenzara a recibir la corriente. A medida que llega cada trozo de datos de streaming, el gestor de políticas ejecuta la función newclip de referencias políticas. La función newclip añade una referencia a cada trozo que llega, y programa una devolución de llamada un día después. En ese momento, la política dejará de hacer referencia al contenido, que ya tiene un día de antigüedad, y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considere el caso en el que el usuario decide guardar parte del contenido (por ejemplo. un programa específico) en la ventana de rodadura durante una semana adicional. Para ello, la aplicación solicita que el gestor de contenidos agregue una nueva referencia política adicional a la parte del contenido a conservar. Por lo tanto, el contenido conservado tiene dos referencias: una desde la ventana móvil y otra desde la solicitud de preservar el contenido durante una semana adicional. Después de un día la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. base de datos url1 url2 (archivos multimedia...) (archivos multimedia...) meta store (información general...) url1 screens prefs ranges media screens, etc.url2 poly host ref1 ref1.files ref1.state Figura 4: Diseño de datos de Spectrum policy store preservado por la segunda referencia. Después de la semana adicional ha pasado, la función callback para la segunda referencia será llamada. Esta función descartará la referencia restante al contenido y como no hay referencias restantes, el contenido será liberado. Con el fin de funcionar en escenarios como los descritos anteriormente, Spectrums gestor de políticas debe gestionar y mantener todas las referencias a varios trozos de medios. Estas referencias son persistentes y por lo tanto deben ser capaces de sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestra implementación de Spectrum Policy Manager logra esto usando la estructura de archivos y directorios que se muestra en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el administrador de almacenamiento para almacenar cada URL activa trozos de medios. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Tenga en cuenta que este directorio se utiliza sólo si el administrador de almacenamiento es local. Si el gestor de políticas está utilizando un gestor de almacenamiento externo (por ejemplo: un aparato de almacenamiento), a continuación, los archivos multimedia se almacenan de forma remota y sólo son remotamente referenciados por el gestor de políticas. meta: este directorio contiene meta información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) e información sobre los tipos de trozos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los trozos de datos almacenados. El archivo de trozos contiene una lista de trozos actualmente almacenados y sus cuentas de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de rangos temporales de datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato de los medios almacenados bajo la URL actual. poli: este directorio contiene un conjunto de subdirectorios host. Cada subdirectorio de host contiene el conjunto de referencias políticas creadas por ese host. La información sobre cada referencia política se divide en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files, y ref1.state. El archivo ref1 contiene información sobre la política de referencia que no cambia con frecuencia. Esta información incluye la política de base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a trozos que pref ref1 posee. Por último, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Tenga en cuenta que otras implementaciones son posibles. Por ejemplo, un gestor de Spectrum de grado de operador podría almacenar toda su información normativa y de referencia en un sistema de bases de datos de alto rendimiento. 10 4. TRABAJOS RELACIONADOS Varios autores han abordado el problema de la gestión de contenidos en redes distribuidas. Gran parte de la labor se centra en el aspecto de la gestión de políticas. Por ejemplo en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda de los usuarios mediante un protocolo de difusión de la demanda. El rendimiento del sistema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Router Central, una base de conocimiento caché, subcachés y un juez de desalojo subcaché. La base Cache Knowledge permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenidos en el entorno en red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenidos, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de TV que se utilizan en PVRs para seleccionar automáticamente el contenido para los usuarios, por ejemplo. [6]. En el caso de que Spectrum se utilice en una configuración PVR, este tipo de sistema desempeñaría una función de nivel superior y podría beneficiarse claramente de las funcionalidades de la arquitectura Spectrum. Por último, en los proveedores comerciales de medio ambiente de CDN (por ejemplo, Cisco y Netapp) han desarrollado e implementado productos y herramientas de gestión de contenidos. A diferencia de la arquitectura Spectrum que permite que los dispositivos de borde funcionen de una manera en gran medida autónoma, las soluciones de proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. 5. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo presentamos el diseño e implementación de la arquitectura de gestión de contenidos Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que tengan tiempo y que se ocupen eficazmente del almacenamiento de contenido multimedia continuo. Por último, el diseño modular de la arquitectura Spectrum permite realizaciones independientes y distribuidas para que el sistema se pueda implementar en una variedad de aplicaciones. Hay una serie de cuestiones pendientes que requerirán una labor futura. Algunos de estos problemas incluyen: • Prevemos que Spectrum sea capaz de gestionar contenido en sistemas que van desde grandes CDNs hasta aparatos más pequeños como TiVO [8]. Para que estos sistemas más pequeños soporten Spectrum necesitarán redes y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo puede encajar en la arquitectura Spectrum. • El contenido de nombres de espectro por URL, pero no hemos definido intencionadamente el formato de las URLs de espectro, cómo se mapean al nombre real del contenido, o cómo los nombres y URLs deben ser presentados al usuario. Si bien hemos abordado anteriormente estas cuestiones en otros lugares [2], creemos que queda más trabajo por hacer y que es necesario elaborar normas consensuadas sobre la designación de nombres. • En este artículo nos hemos centrado en la gestión de contenidos para objetos multimedia continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero todavía tenemos que elaborar los detalles necesarios para apoyar esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que los contenidos multimedia se compartan fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. 6. REFERENCIAS [1] K.. Cheng e Y. Kambayashi. Gestión de Contenidos Multicaché-basada para Web Caching. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información Web, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. PRISM Architecture: Apoyando los servicios de transmisión mejorada en una red de distribución de contenido. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de vídeo digital habilitado para la red. 11o Taller de IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, y P. Shenoy. Una arquitectura de clúster de servidores multimedia de transmisión de demanda adaptativa y con conocimiento de la localización (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Recomendador de TV multi-agente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "error": []
        },
        "application program interface": {
            "translated_key": "interfaz de programa de aplicación",
            "translated_annotated_text": "Diseño e implementación de un sistema de gestión de contenido distribuido C. D. Cranor, R. Ethington, A. Sehgal†, D. Shur, C. Sreenan‡ y J.E. van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland RESUMEN La convergencia de los avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan e intercambian de forma rutinaria entre dispositivos habilitados para la red. Mantener un seguimiento de (o gestionar) dicho contenido sigue siendo un reto debido al gran volumen de datos. El almacenamiento de medios continuos en vivo (como contenidos de televisión o radio) aumenta la complejidad en el sentido de que este contenido no tiene un inicio o un final bien definidos y, por lo tanto, resulta engorroso de tratar. El almacenamiento en red permite que los contenidos que se consideran lógicamente como parte de la misma colección se distribuyan de hecho a través de una red, haciendo que la tarea de gestión de contenidos sea casi imposible de manejar sin un sistema de gestión de contenidos. En este trabajo presentamos el diseño y la implementación del sistema de gestión de contenidos Spectrum, que trata de contenido multimedia rico de manera efectiva en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto a escenarios independientes como a diversos escenarios en red. Un aspecto único de Spectrum es que requiere una (o más) políticas de retención para aplicarse a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido que ya no tiene una política de retención aplicada se elimina simplemente del sistema. Las diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así naturalmente el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo que son elementos básicos necesarios para hacer frente al almacenamiento de medios continuos en vivo, a los contenidos. No sólo describimos los detalles de la arquitectura Spectrum, sino que también damos casos de uso típicos. Categorías y Descriptores de Asunto C.2.4 [Organización de Sistemas de Computación]: Sistemas distribuidos por redes de comunicación informática; H.3.4 [Sistemas de Información]: Sistemas de almacenamiento y recuperación de información y software Términos generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar el contenido es y siempre ha sido una de las funciones principales de un ordenador. Las aplicaciones de computación inicial incluyen formateadores de texto y compiladores de programas. El contenido fue administrado inicialmente por interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que la gente desea utilizarlo han cambiado enormemente. Los nuevos tipos de contenidos, como los flujos multimedia continuos, se han convertido en algo común debido a la convergencia de los avances en las tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de vídeo codificado de calidad de TV en una sola unidad de disco. Esto ha llevado a la introducción de sistemas independientes de grabación de vídeo digital o de grabación de vídeo personal (PVR), como TiVO [8] y ReplayTV [7]. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas con la propia red actuando como un enorme repositorio de datos. La proliferación de contenidos de alta calidad gracias a estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. Nuestro trabajo se centra en el almacenamiento de contenidos multimedia ricos y, en particular, el almacenamiento de contenidos multimedia continuos en formatos preenvasados o en directo. La necesidad de gestión de contenidos en esta área es evidente cuando se tiene en cuenta lo siguiente: • El aumento de la capacidad y la disminución del costo de almacenamiento significa que incluso los modestos sistemas de escritorio hoy en día tienen la capacidad de almacenar cantidades masivas de contenido. La gestión manual de dichos contenidos (o, más correctamente, la no gestión manual de dichos contenidos) produce grandes ineficiencias en los casos en que el almacenamiento de residuos de contenidos no deseados y olvidados no es posible y en los que no se puede encontrar el contenido deseado. • Si bien es cierto para todo tipo de contenido, el almacenamiento de contenido multimedia continuo es especialmente problemático. El primer contenido continuo de los medios sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque de almacenamiento sin políticas no funcionará para todos, sino para los sistemas más pequeños. En segundo lugar, el almacenamiento de contenido en vivo como TV o radio es inherentemente problemático, ya que estas señales son corrientes continuas sin terminales. Esto significa que antes de que uno pueda siquiera pensar en manejar tal contenido hay una necesidad de abstraerlo en algo que podría ser manipulado y manejado. 4 • Cuando se trata de medios continuos almacenados, es necesario gestionar dichos contenidos tanto a un nivel de grano fino como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar sólo los aspectos más destacados de un evento deportivo en particular no debe tener que almacenar el contenido correspondiente al evento completo. Al mismo tiempo, el usuario podría querer pensar en el contenido en el agregado, por ejemplo. eliminar todo el contenido que no he visto en el último mes, excepto el contenido que fue explícitamente marcado para archivo. • Como se ha indicado anteriormente, es muy difícil tratar de hacer un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenidos. Sin embargo, cuando los dispositivos de almacenamiento reales se distribuyen a través de una red, la tarea de realizar un seguimiento del contenido es casi imposible. Este escenario es cada vez más común en los sistemas de distribución de contenidos basados en la red y es probable que también sea importante en los escenarios de creación de redes en el hogar. Parece entonces claro que se necesita un sistema de gestión de contenidos que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que se explota la capacidad en red de los dispositivos de almacenamiento. Este sistema debería permitir el almacenamiento eficiente de contenidos y el acceso a ellos a través de dispositivos de almacenamiento de redes heterogéneos, de acuerdo con las preferencias del usuario. El sistema de gestión de contenidos debe traducir las preferencias de los usuarios en políticas adecuadas de almacenamiento de bajo nivel y permitir que esas preferencias se expresen en un nivel fino de granularidad (aunque no lo exijan en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar (es decir. cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenidos distribuidos es difícil debido al número de requisitos que se imponen al sistema. Por ejemplo: • El sistema de gestión de contenidos debe funcionar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando el contenido almacenado en un sistema de archivos local, mientras que en otros, el contenido puede almacenarse en un dispositivo de almacenamiento de red separado. El gestor de contenidos podrá ser responsable de la aplicación de las políticas que utilice para hacer referencia al contenido o de la delegación de dicho papel en un ordenador separado. Se necesita una \"interfaz de programa de aplicación\" (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. • El sistema de gestión de contenidos debe ser flexible y ser capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe obtenerse, cuándo debe obtenerse, cuánto tiempo debe conservarse y en qué circunstancias debe desecharse. Esto significa que el sistema de gestión de contenidos debería permitir a múltiples aplicaciones hacer referencia al contenido con un rico conjunto de políticas y que todos deberían trabajar juntos sin problemas. • El sistema de gestión de contenidos debe poder controlar las referencias de contenido y utilizar esa información para colocar el contenido en la ubicación correcta de la red para un acceso eficiente a las aplicaciones. • El sistema de gestión de contenidos debe manejar la interacción entre la población implícita y explícita de contenidos en el borde de la red. • El sistema de contenidos debe ser capaz de gestionar eficientemente grandes conjuntos de contenidos, incluyendo flujos continuos. Necesita poder empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas hemos diseñado e implementado la arquitectura del sistema de gestión de contenidos Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite a múltiples aplicaciones hacer referencia al contenido utilizando políticas diferentes. Tenga en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenidos (CDN) que puede facilitar la distribución eficiente de contenidos (por ejemplo, la arquitectura PRISM CDN [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. La labor conexa se describe en la sección 4, y la sección 5 contiene nuestras conclusiones y sugerencias para la labor futura. 2. LA ARQUITECTURA DEL SISTEMA DE GESTIÓN DE CONTENIDO DISTRIBUIDO POR ESPECTRO La arquitectura del espectro consta de tres capas de gestión distintas que pueden o no distribuirse entre múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todos los contenidos de las aplicaciones de acuerdo con las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de vídeo personal (PVR), el gestor de contenidos recibe solicitudes de contenido de una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y administrar contenido en el dispositivo. gestor de políticas: implementa y hace cumplir varias políticas de almacenamiento que el gestor de contenidos utiliza para referirse al contenido. El gestor de políticas exporta una interfaz al gestor de contenidos que permite al gestor de contenidos solicitar que el contenido de una pieza sea tratado de acuerdo con una política específica. Spectrum permite que las políticas arbitrarias se realicen proporcionando un conjunto fijo de plantillas de políticas de base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (si no, Spectrum puede ampliarse fácilmente para cargar dinámicamente nuevo código de plantilla de política de base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido sólo puede existir en el sistema mientras se haga referencia a él al menos mediante una política existente. Los conflictos políticos se eliminan haciendo que el director de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin ninguna política asociada con él se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar naturalmente el intercambio de contenidos entre diferentes políticas, lo que es fundamental para el almacenamiento eficiente de objetos de gran tamaño. Tenga en cuenta que una diferencia clave entre el gestor de contenidos y el gestor de políticas es que el gestor de contenidos gestiona referencias a múltiples piezas de contenido, es decir. tiene una visión de aplicación del contenido. Por otra parte, el gestor de políticas sólo se ocupa de la política utilizada para gestionar contenidos independientes. Por ejemplo, en una aplicación PVR, la capa del gestor de contenidos sabría acerca de los diferentes grupos de contenido gestionado, como mantener-indefinidamente, guardar durante un día, y mantener si el espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada contenido tiene 5 contenido Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figura 1: Los componentes de la arquitectura Spectrum y las cuatro formas en que pueden configurarse su propia política (o políticas) se le aplican y son independientes de otros contenidos. administrador de almacenamiento: almacena el contenido de una manera eficiente al tiempo que facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento almacena contenido en trozos de subobjeto. Este enfoque tiene ventajas para la recuperación eficiente de contenidos, pero lo que es más importante, permite que las políticas se apliquen a un nivel de subobjetos que es de importancia crítica cuando se trata de objetos muy grandes como partes de medios continuos, por ejemplo. piezas seleccionadas de contenido de TV que se almacenan en un PVR. Tenga en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas utilizadas por los gestores de contenido y políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la Figura muestra el caso más simple (no distribuido) donde todas las capas se implementan en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como PVRs. El siguiente caso corresponde al caso en que existe un gestor de contenidos centralizado que controla los dispositivos de almacenamiento distribuidos, cada uno de los cuales es responsable de la aplicación del almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, funcionan de forma mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, normalmente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido basado en un calendario determinado por algún controlador centralizado. Por ejemplo, el CDN podría prepoblar dispositivos de borde con contenido que se espera que sea muy popular o distribuir archivos grandes a las sucursales durante horas fuera del pico en un entorno empresarial limitado por el ancho de banda. Permitir que un único gestor de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y el caso más distribuido. La necesidad de este tipo de separación puede ocurrir por razones de escalabilidad o cuando diferentes dispositivos o aparatos de almacenamiento especializados están obligados a ser controlados por un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas que controla un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo de grano fino por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de contenidos La capa de gestor de contenidos es la interfaz principal a través de la cual aplicaciones específicas utilizan la arquitectura Spectrum. Como tal, la capa de gestor de contenidos proporciona una API para que la aplicación manipule todos los aspectos de la arquitectura Spectrum en diferentes niveles de granularidad. La API del gestor de contenidos tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite añadir dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo control del gestor de contenidos y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos - este es el único lugar en la arquitectura donde se requiere que la aplicación sea consciente de esta distinción. Una vez que un dispositivo se mapea en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Tiendas: Las tiendas son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (p. ej. espacio en disco) a él. Las tiendas sólo se pueden crear en dispositivos físicos que se mapean en el sistema. Grupos de políticas: Los grupos de políticas son los medios por los cuales una aplicación especifica, instancia y modifica las políticas que se aplican al contenido Spectrum. El uso típico de este conjunto de funciones es seleccionar uno de un pequeño conjunto de políticas de base y parametrizar esta instancia específica de la política. Se crean grupos de políticas dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que requieren una especificación de tiempo sofisticada permiten el almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría desalojar el contenido del sistema en un determinado momento absoluto o relativo. Una política temporal ligeramente más implicada, habilitada por la arquitectura Spectrum, podría permitir que el contenido se almacene en una ventana móvil de varias horas (por ejemplo, el número de horas N más reciente se mantiene en el sistema). Las políticas basadas en el tiempo son de particular utilidad cuando se trata de contenidos continuos como una transmisión en vivo. 6 Contenido: En el mejor nivel de contenido de granularidad se puede añadir o eliminar del sistema. El contenido se especifica en el sistema mediante un localizador de recursos uniforme (URL) que indica de forma concisa la ubicación del contenido, así como el protocolo que se utilizará para recuperarlo. Opcionalmente una especificación de tiempo se puede asociar con el contenido. Esto permite obtener contenido en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Una vez más, esto es particularmente útil para tratar con el almacenamiento y la gestión de contenido en vivo. 2.2 Gestor de políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones API. En primer lugar, hay funciones que funcionan en áreas de almacenamiento gestionado y referencias basadas en políticas (prefs) al contenido almacenado allí. En segundo lugar, hay conjuntos de funciones utilizadas para aplicar cada política de gestión. La primera clase de funciones es utilizada por la capa del gestor de contenidos para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar: Estas operaciones son utilizadas por el gestor de contenidos para controlar su acceso al almacenamiento. Los gestores de políticas crean operación se utiliza para establecer contacto con una tienda por primera vez. Una vez hecho esto, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Tenga en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información sólo debe ser transmitida al gestor de políticas una vez a la hora de crear. Para operaciones abiertas, el gestor de políticas utilizará la información en caché para ponerse en contacto con la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el gestor de contenidos consulte al gestor de políticas sobre qué contenido está actualmente presente para una URL dada. Para los intervalos de tiempo continuos de los medios actuales se devolverán. recurso: Las rutinas de recursos se utilizan para consultar al gestor de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su conjunto y otra que se aplica a una determinada referencia política. El recurso API es extensible, actualmente soportamos consultas sobre el uso del disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer es utilizada por el gestor de contenido para referenciar el contenido en la tienda. Si el contenido no está presente, esta llamada resultará en que el contenido sea obtenido (o programado para ser obtenido si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL para almacenarla debajo, la URL para obtener datos de si no está presente, la política para almacenar el contenido debajo y los argumentos utilizados para parametrizar la política. El resultado de una operación pref establecer con éxito es una cadena de identificación de referencia política. Este ID se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones de gestor de políticas se utiliza para implementar todas las políticas apoyadas por Spectrum. Prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitivo puede ser parametrizada para funcionar diariamente, semanal o mensualmente. Tenga en cuenta que el gestor de políticas sólo se ocupa de la ejecución de una política específica. Las razones de mayor nivel para elegir una determinada política son manejadas por el gestor de contenido y aplicación. Una política de base se implementa usando seis funciones: establecer: llamada cuando se establece un pref con las URLs requeridas y los parámetros de las políticas de base. El establecimiento de rutina hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar medidas (por ejemplo. iniciar una descarga) y programa una devolución de llamada para ese tiempo. También puede registrarse para recibir callbacks si se recibe nuevo contenido para una URL dada. actualización: llamada a cambiar los parámetros de un pref, o a descartar la referencia política. newclip: llamado cuando se recibe un trozo de contenido nuevo para una URL de interés. La política de base normalmente organiza que newclip sea llamado para una URL dada cuando se establece la pref. Cuando se llama newclip, la política de base comprueba sus parámetros para determinar si desea añadir una referencia al clip que acaba de recibir. callback: llamado cuando el pref programa un callback basado en temporizador. Este es un mecanismo útil de despertar para prefs que necesitan estar inactivos durante un largo período de tiempo (por ejemplo. entre programas). boot/shutdown: llamado cuando el sistema de gestión de contenido está arrancando o apagando. La operación de arranque se utiliza normalmente para programar las llamadas iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para apagar con gracia flujos de E/S y guardar estado. 2.3 Gestor de almacenamiento El papel del Gestor de almacenamiento Spectrums es controlar todas las operaciones de E/S asociadas a una tienda dada. El gestor de almacenamiento Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo: un aparato de almacenamiento). Para medios continuos, en el nivel de administrador de almacenamiento el contenido se almacena como una colección de trozos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un trozo podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son de entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión tanto las rutinas de entrada como de salida toman intervalos de tiempo que programan cuando la operación de E/S debe ocurrir, y ambas rutinas devuelven una manija de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el gestor de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar tiendas. También es compatible con las operaciones para consultar los usos de recursos y las opciones apoyadas por la tienda. Por último, el administrador de almacenamiento también tiene una rutina de descartes que puede ser utilizada por el administrador de políticas para informar a la tienda para eliminar el contenido de la tienda. 3. CASOS DE APLICACIÓN Y USO En esta sección describimos nuestra implementación de Spectrum y cómo se puede utilizar. 3.1 Implementación Hemos implementado Spectrums tres capas en C como parte de una biblioteca que puede vincularse con aplicaciones basadas en Spectrum. Cada capa realiza un seguimiento de su estado a través de un conjunto de archivos de datos locales que persisten a través de los reinicios, permitiendo así a Spectrum manejar sin problemas los ciclos de potencia. Para capas que residen en sistemas remotos (p. ej. una tienda remota) sólo la meta-información necesaria para contactar con el remoto 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Interfaz gráfica de usuario Red activada DVR Program Information Content DVR Application Figura 2: El espectro en un nodo DVR habilitado de red se almacena localmente. Nuestra aplicación de prueba utiliza una política local y un gestor de almacenamiento para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficazmente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas Spectrums API admiten modos síncronos y asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada API lleva un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de llamada y el estado de retorno. Para llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamadas. Para usar una función Spectrum API, el llamante elige primero el modo sincronización o asíncrona y asigna una estructura reqinfo. Para las llamadas de sincronización, el reqinfo se puede asignar en la pila, de lo contrario se asigna con malloc. Para las llamadas async, se debe proporcionar una función de devolución de llamada cuando se asigna el reqinfo. A continuación, el llamante invoca la función Spectrum API deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas async exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada async se completa o se produce un tiempo de espera, la función de devolución de llamada async se llama con la información adecuada necesaria para completar el procesamiento. El diseño modular/en capas de la arquitectura Spectrum simplifica el objetivo de distribución de la funcionalidad. Además, la comunicación entre funciones es típicamente de naturaleza maestro-esclavo(s). Esto significa que varios enfoques de la operación distribuida son posibles que satisfagan los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un simple diseño modular. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y seleccionar el método de codificación que debe utilizarse con los datos a transferir. Los protocolos de transporte pueden variar protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP plano para la mayor parte de nuestro transporte. Las llamadas de funciones a través de las diferentes API de Spectrum se pueden codificar utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos usando la biblioteca XML de eXpat [4] para codificar nuestras llamadas. Mientras estamos actualmente transfiriendo nuestros mensajes codificados XML usando una conexión TCP simple, en un entorno real esto puede ser reemplazado fácilmente por una implementación basada en una capa segura de sockets (SSL) para mejorar la seguridad mediante la adición de SSL como protocolo de transporte. Un aspecto importante del Spectrum es que puede gestionar contenidos basados en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la sección 2.2, prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben entender las políticas a nivel de base y cómo pueden ser parametrizadas. Para abordar este tema, tratamos cada política a nivel de base como si fuera un programa separado. Cada política a nivel de base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada usando una función tipo getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de bytes no es un problema en una cadena. Dado que esta parte de Spectrum no está en la ruta de datos críticos, este tipo de formato no es un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos del Espectro En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos del Espectro en nuestro entorno. El foco de nuestro trabajo anterior ha sido la distribución de contenido para el contenido multimedia en streaming [2] y la grabación digital de vídeo habilitada en red [3]. El sistema Spectrum es aplicable a ambos escenarios de la manera siguiente. La Figura 2 muestra la arquitectura DVR (NED) activada por red. En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación DVR obtiene listados de programas de alguna fuente de red, se ocupa de la presentación del usuario a través de una interfaz gráfica de usuario (GUI), e interfaz con el sistema Spectrum a través de las API de la capa de gestión de contenidos. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento a 8 Content Manager Centralized Content Management station Información de contenidoGuía de interfaz de usuario Gestor de almacenamiento Gestor de almacenamiento Fetcher Edge Portal Política de servidor Gestor de almacenamiento Gestor de almacenamiento Gestor de almacenamiento Gestor de contenido Fetcher Edge Portal Server Distributed Content To La obtención del contenido (a través de la red o localmente) y el posterior almacenamiento en el sistema local es entonces manejado por los gerentes de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenidos en streaming (p. ej. PRISM [2] se muestra en la Figura 3. En este entorno se está distribuyendo contenido multimedia en streaming (tanto en directo, enlatado en vivo como bajo demanda) a portales de borde desde donde se están sirviendo los puntos finales de streaming. En nuestro entorno la distribución y almacenamiento de contenidos se realiza desde una estación centralizada de gestión de contenidos que controla varios de los portales de borde. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenidos sin necesidad de comunicación continua entre el gestor de contenidos y los dispositivos de borde, es decir. una vez que se han dado instrucciones a los dispositivos de borde que pueden funcionar de forma independiente hasta que se van a hacer cambios. 3.3 Spectrum Operational Ejemplo Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación PVR basada en Spectrum programada para almacenar un día de contenido en streaming en una ventana móvil. Para configurar la ventana móvil, la aplicación utilizaría la API del gestor de contenidos para crear un grupo de políticas y una referencia política al contenido deseado. El establecimiento de la referencia de la política de ventanilla móvil de un día haría que el pesebre de la política pidiera al administrador de almacenamiento que comenzara a recibir la corriente. A medida que llega cada trozo de datos de streaming, el gestor de políticas ejecuta la función newclip de referencias políticas. La función newclip añade una referencia a cada trozo que llega, y programa una devolución de llamada un día después. En ese momento, la política dejará de hacer referencia al contenido, que ya tiene un día de antigüedad, y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considere el caso en el que el usuario decide guardar parte del contenido (por ejemplo. un programa específico) en la ventana de rodadura durante una semana adicional. Para ello, la aplicación solicita que el gestor de contenidos agregue una nueva referencia política adicional a la parte del contenido a conservar. Por lo tanto, el contenido conservado tiene dos referencias: una desde la ventana móvil y otra desde la solicitud de preservar el contenido durante una semana adicional. Después de un día la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. base de datos url1 url2 (archivos multimedia...) (archivos multimedia...) meta store (información general...) url1 screens prefs ranges media screens, etc.url2 poly host ref1 ref1.files ref1.state Figura 4: Diseño de datos de Spectrum policy store preservado por la segunda referencia. Después de la semana adicional ha pasado, la función callback para la segunda referencia será llamada. Esta función descartará la referencia restante al contenido y como no hay referencias restantes, el contenido será liberado. Con el fin de funcionar en escenarios como los descritos anteriormente, Spectrums gestor de políticas debe gestionar y mantener todas las referencias a varios trozos de medios. Estas referencias son persistentes y por lo tanto deben ser capaces de sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestra implementación de Spectrum Policy Manager logra esto usando la estructura de archivos y directorios que se muestra en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el administrador de almacenamiento para almacenar cada URL activa trozos de medios. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Tenga en cuenta que este directorio se utiliza sólo si el administrador de almacenamiento es local. Si el gestor de políticas está utilizando un gestor de almacenamiento externo (por ejemplo: un aparato de almacenamiento), a continuación, los archivos multimedia se almacenan de forma remota y sólo son remotamente referenciados por el gestor de políticas. meta: este directorio contiene meta información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) e información sobre los tipos de trozos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los trozos de datos almacenados. El archivo de trozos contiene una lista de trozos actualmente almacenados y sus cuentas de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de rangos temporales de datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato de los medios almacenados bajo la URL actual. poli: este directorio contiene un conjunto de subdirectorios host. Cada subdirectorio de host contiene el conjunto de referencias políticas creadas por ese host. La información sobre cada referencia política se divide en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files, y ref1.state. El archivo ref1 contiene información sobre la política de referencia que no cambia con frecuencia. Esta información incluye la política de base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a trozos que pref ref1 posee. Por último, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Tenga en cuenta que otras implementaciones son posibles. Por ejemplo, un gestor de Spectrum de grado de operador podría almacenar toda su información normativa y de referencia en un sistema de bases de datos de alto rendimiento. 10 4. TRABAJOS RELACIONADOS Varios autores han abordado el problema de la gestión de contenidos en redes distribuidas. Gran parte de la labor se centra en el aspecto de la gestión de políticas. Por ejemplo en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda de los usuarios mediante un protocolo de difusión de la demanda. El rendimiento del sistema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Router Central, una base de conocimiento caché, subcachés y un juez de desalojo subcaché. La base Cache Knowledge permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenidos en el entorno en red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenidos, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de TV que se utilizan en PVRs para seleccionar automáticamente el contenido para los usuarios, por ejemplo. [6]. En el caso de que Spectrum se utilice en una configuración PVR, este tipo de sistema desempeñaría una función de nivel superior y podría beneficiarse claramente de las funcionalidades de la arquitectura Spectrum. Por último, en los proveedores comerciales de medio ambiente de CDN (por ejemplo, Cisco y Netapp) han desarrollado e implementado productos y herramientas de gestión de contenidos. A diferencia de la arquitectura Spectrum que permite que los dispositivos de borde funcionen de una manera en gran medida autónoma, las soluciones de proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. 5. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo presentamos el diseño e implementación de la arquitectura de gestión de contenidos Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que tengan tiempo y que se ocupen eficazmente del almacenamiento de contenido multimedia continuo. Por último, el diseño modular de la arquitectura Spectrum permite realizaciones independientes y distribuidas para que el sistema se pueda implementar en una variedad de aplicaciones. Hay una serie de cuestiones pendientes que requerirán una labor futura. Algunos de estos problemas incluyen: • Prevemos que Spectrum sea capaz de gestionar contenido en sistemas que van desde grandes CDNs hasta aparatos más pequeños como TiVO [8]. Para que estos sistemas más pequeños soporten Spectrum necesitarán redes y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo puede encajar en la arquitectura Spectrum. • El contenido de nombres de espectro por URL, pero no hemos definido intencionadamente el formato de las URLs de espectro, cómo se mapean al nombre real del contenido, o cómo los nombres y URLs deben ser presentados al usuario. Si bien hemos abordado anteriormente estas cuestiones en otros lugares [2], creemos que queda más trabajo por hacer y que es necesario elaborar normas consensuadas sobre la designación de nombres. • En este artículo nos hemos centrado en la gestión de contenidos para objetos multimedia continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero todavía tenemos que elaborar los detalles necesarios para apoyar esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que los contenidos multimedia se compartan fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. 6. REFERENCIAS [1] K.. Cheng e Y. Kambayashi. Gestión de Contenidos Multicaché-basada para Web Caching. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información Web, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. PRISM Architecture: Apoyando los servicios de transmisión mejorada en una red de distribución de contenido. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de vídeo digital habilitado para la red. 11o Taller de IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, y P. Shenoy. Una arquitectura de clúster de servidores multimedia de transmisión de demanda adaptativa y con conocimiento de la localización (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Recomendador de TV multi-agente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "error": [
                ""
            ]
        },
        "content distribution network": {
            "translated_key": "red de distribución de contenidos",
            "translated_annotated_text": "Diseño e implementación de un sistema de gestión de contenido distribuido C. D. Cranor, R. Ethington, A. Sehgal†, D. Shur, C. Sreenan‡ y J.E. van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland RESUMEN La convergencia de los avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan e intercambian de forma rutinaria entre dispositivos habilitados para la red. Mantener un seguimiento de (o gestionar) dicho contenido sigue siendo un reto debido al gran volumen de datos. El almacenamiento de medios continuos en vivo (como contenidos de televisión o radio) aumenta la complejidad en el sentido de que este contenido no tiene un inicio o un final bien definidos y, por lo tanto, resulta engorroso de tratar. El almacenamiento en red permite que los contenidos que se consideran lógicamente como parte de la misma colección se distribuyan de hecho a través de una red, haciendo que la tarea de gestión de contenidos sea casi imposible de manejar sin un sistema de gestión de contenidos. En este trabajo presentamos el diseño y la implementación del sistema de gestión de contenidos Spectrum, que trata de contenido multimedia rico de manera efectiva en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto a escenarios independientes como a diversos escenarios en red. Un aspecto único de Spectrum es que requiere una (o más) políticas de retención para aplicarse a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido que ya no tiene una política de retención aplicada se elimina simplemente del sistema. Las diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así naturalmente el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo que son elementos básicos necesarios para hacer frente al almacenamiento de medios continuos en vivo, a los contenidos. No sólo describimos los detalles de la arquitectura Spectrum, sino que también damos casos de uso típicos. Categorías y Descriptores de Asunto C.2.4 [Organización de Sistemas de Computación]: Sistemas distribuidos por redes de comunicación informática; H.3.4 [Sistemas de Información]: Sistemas de almacenamiento y recuperación de información y software Términos generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar el contenido es y siempre ha sido una de las funciones principales de un ordenador. Las aplicaciones de computación inicial incluyen formateadores de texto y compiladores de programas. El contenido fue administrado inicialmente por interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que la gente desea utilizarlo han cambiado enormemente. Los nuevos tipos de contenidos, como los flujos multimedia continuos, se han convertido en algo común debido a la convergencia de los avances en las tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de vídeo codificado de calidad de TV en una sola unidad de disco. Esto ha llevado a la introducción de sistemas independientes de grabación de vídeo digital o de grabación de vídeo personal (PVR), como TiVO [8] y ReplayTV [7]. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas con la propia red actuando como un enorme repositorio de datos. La proliferación de contenidos de alta calidad gracias a estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. Nuestro trabajo se centra en el almacenamiento de contenidos multimedia ricos y, en particular, el almacenamiento de contenidos multimedia continuos en formatos preenvasados o en directo. La necesidad de gestión de contenidos en esta área es evidente cuando se tiene en cuenta lo siguiente: • El aumento de la capacidad y la disminución del costo de almacenamiento significa que incluso los modestos sistemas de escritorio hoy en día tienen la capacidad de almacenar cantidades masivas de contenido. La gestión manual de dichos contenidos (o, más correctamente, la no gestión manual de dichos contenidos) produce grandes ineficiencias en los casos en que el almacenamiento de residuos de contenidos no deseados y olvidados no es posible y en los que no se puede encontrar el contenido deseado. • Si bien es cierto para todo tipo de contenido, el almacenamiento de contenido multimedia continuo es especialmente problemático. El primer contenido continuo de los medios sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque de almacenamiento sin políticas no funcionará para todos, sino para los sistemas más pequeños. En segundo lugar, el almacenamiento de contenido en vivo como TV o radio es inherentemente problemático, ya que estas señales son corrientes continuas sin terminales. Esto significa que antes de que uno pueda siquiera pensar en manejar tal contenido hay una necesidad de abstraerlo en algo que podría ser manipulado y manejado. 4 • Cuando se trata de medios continuos almacenados, es necesario gestionar dichos contenidos tanto a un nivel de grano fino como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar sólo los aspectos más destacados de un evento deportivo en particular no debe tener que almacenar el contenido correspondiente al evento completo. Al mismo tiempo, el usuario podría querer pensar en el contenido en el agregado, por ejemplo. eliminar todo el contenido que no he visto en el último mes, excepto el contenido que fue explícitamente marcado para archivo. • Como se ha indicado anteriormente, es muy difícil tratar de hacer un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenidos. Sin embargo, cuando los dispositivos de almacenamiento reales se distribuyen a través de una red, la tarea de realizar un seguimiento del contenido es casi imposible. Este escenario es cada vez más común en los sistemas de distribución de contenidos basados en la red y es probable que también sea importante en los escenarios de creación de redes en el hogar. Parece entonces claro que se necesita un sistema de gestión de contenidos que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que se explota la capacidad en red de los dispositivos de almacenamiento. Este sistema debería permitir el almacenamiento eficiente de contenidos y el acceso a ellos a través de dispositivos de almacenamiento de redes heterogéneos, de acuerdo con las preferencias del usuario. El sistema de gestión de contenidos debe traducir las preferencias de los usuarios en políticas adecuadas de almacenamiento de bajo nivel y permitir que esas preferencias se expresen en un nivel fino de granularidad (aunque no lo exijan en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar (es decir. cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenidos distribuidos es difícil debido al número de requisitos que se imponen al sistema. Por ejemplo: • El sistema de gestión de contenidos debe funcionar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando el contenido almacenado en un sistema de archivos local, mientras que en otros, el contenido puede almacenarse en un dispositivo de almacenamiento de red separado. El gestor de contenidos podrá ser responsable de la aplicación de las políticas que utilice para hacer referencia al contenido o de la delegación de dicho papel en un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. • El sistema de gestión de contenidos debe ser flexible y ser capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe obtenerse, cuándo debe obtenerse, cuánto tiempo debe conservarse y en qué circunstancias debe desecharse. Esto significa que el sistema de gestión de contenidos debería permitir a múltiples aplicaciones hacer referencia al contenido con un rico conjunto de políticas y que todos deberían trabajar juntos sin problemas. • El sistema de gestión de contenidos debe poder controlar las referencias de contenido y utilizar esa información para colocar el contenido en la ubicación correcta de la red para un acceso eficiente a las aplicaciones. • El sistema de gestión de contenidos debe manejar la interacción entre la población implícita y explícita de contenidos en el borde de la red. • El sistema de contenidos debe ser capaz de gestionar eficientemente grandes conjuntos de contenidos, incluyendo flujos continuos. Necesita poder empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas hemos diseñado e implementado la arquitectura del sistema de gestión de contenidos Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite a múltiples aplicaciones hacer referencia al contenido utilizando políticas diferentes. Tenga en cuenta que la arquitectura Spectrum asume la existencia de una \"red de distribución de contenidos\" (CDN) que puede facilitar la distribución eficiente de contenidos (por ejemplo, la arquitectura PRISM CDN [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. La labor conexa se describe en la sección 4, y la sección 5 contiene nuestras conclusiones y sugerencias para la labor futura. 2. LA ARQUITECTURA DEL SISTEMA DE GESTIÓN DE CONTENIDO DISTRIBUIDO POR ESPECTRO La arquitectura del espectro consta de tres capas de gestión distintas que pueden o no distribuirse entre múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todos los contenidos de las aplicaciones de acuerdo con las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de vídeo personal (PVR), el gestor de contenidos recibe solicitudes de contenido de una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y administrar contenido en el dispositivo. gestor de políticas: implementa y hace cumplir varias políticas de almacenamiento que el gestor de contenidos utiliza para referirse al contenido. El gestor de políticas exporta una interfaz al gestor de contenidos que permite al gestor de contenidos solicitar que el contenido de una pieza sea tratado de acuerdo con una política específica. Spectrum permite que las políticas arbitrarias se realicen proporcionando un conjunto fijo de plantillas de políticas de base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (si no, Spectrum puede ampliarse fácilmente para cargar dinámicamente nuevo código de plantilla de política de base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido sólo puede existir en el sistema mientras se haga referencia a él al menos mediante una política existente. Los conflictos políticos se eliminan haciendo que el director de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin ninguna política asociada con él se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar naturalmente el intercambio de contenidos entre diferentes políticas, lo que es fundamental para el almacenamiento eficiente de objetos de gran tamaño. Tenga en cuenta que una diferencia clave entre el gestor de contenidos y el gestor de políticas es que el gestor de contenidos gestiona referencias a múltiples piezas de contenido, es decir. tiene una visión de aplicación del contenido. Por otra parte, el gestor de políticas sólo se ocupa de la política utilizada para gestionar contenidos independientes. Por ejemplo, en una aplicación PVR, la capa del gestor de contenidos sabría acerca de los diferentes grupos de contenido gestionado, como mantener-indefinidamente, guardar durante un día, y mantener si el espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada contenido tiene 5 contenido Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figura 1: Los componentes de la arquitectura Spectrum y las cuatro formas en que pueden configurarse su propia política (o políticas) se le aplican y son independientes de otros contenidos. administrador de almacenamiento: almacena el contenido de una manera eficiente al tiempo que facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento almacena contenido en trozos de subobjeto. Este enfoque tiene ventajas para la recuperación eficiente de contenidos, pero lo que es más importante, permite que las políticas se apliquen a un nivel de subobjetos que es de importancia crítica cuando se trata de objetos muy grandes como partes de medios continuos, por ejemplo. piezas seleccionadas de contenido de TV que se almacenan en un PVR. Tenga en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas utilizadas por los gestores de contenido y políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la Figura muestra el caso más simple (no distribuido) donde todas las capas se implementan en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como PVRs. El siguiente caso corresponde al caso en que existe un gestor de contenidos centralizado que controla los dispositivos de almacenamiento distribuidos, cada uno de los cuales es responsable de la aplicación del almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, funcionan de forma mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, normalmente operan de manera autónoma. Un ejemplo de este tipo de configuración es una \"red de distribución de contenidos\" (CDN) que distribuye y almacena contenido basado en un calendario determinado por algún controlador centralizado. Por ejemplo, el CDN podría prepoblar dispositivos de borde con contenido que se espera que sea muy popular o distribuir archivos grandes a las sucursales durante horas fuera del pico en un entorno empresarial limitado por el ancho de banda. Permitir que un único gestor de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y el caso más distribuido. La necesidad de este tipo de separación puede ocurrir por razones de escalabilidad o cuando diferentes dispositivos o aparatos de almacenamiento especializados están obligados a ser controlados por un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas que controla un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo de grano fino por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de contenidos La capa de gestor de contenidos es la interfaz principal a través de la cual aplicaciones específicas utilizan la arquitectura Spectrum. Como tal, la capa de gestor de contenidos proporciona una API para que la aplicación manipule todos los aspectos de la arquitectura Spectrum en diferentes niveles de granularidad. La API del gestor de contenidos tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite añadir dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo control del gestor de contenidos y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos - este es el único lugar en la arquitectura donde se requiere que la aplicación sea consciente de esta distinción. Una vez que un dispositivo se mapea en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Tiendas: Las tiendas son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (p. ej. espacio en disco) a él. Las tiendas sólo se pueden crear en dispositivos físicos que se mapean en el sistema. Grupos de políticas: Los grupos de políticas son los medios por los cuales una aplicación especifica, instancia y modifica las políticas que se aplican al contenido Spectrum. El uso típico de este conjunto de funciones es seleccionar uno de un pequeño conjunto de políticas de base y parametrizar esta instancia específica de la política. Se crean grupos de políticas dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que requieren una especificación de tiempo sofisticada permiten el almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría desalojar el contenido del sistema en un determinado momento absoluto o relativo. Una política temporal ligeramente más implicada, habilitada por la arquitectura Spectrum, podría permitir que el contenido se almacene en una ventana móvil de varias horas (por ejemplo, el número de horas N más reciente se mantiene en el sistema). Las políticas basadas en el tiempo son de particular utilidad cuando se trata de contenidos continuos como una transmisión en vivo. 6 Contenido: En el mejor nivel de contenido de granularidad se puede añadir o eliminar del sistema. El contenido se especifica en el sistema mediante un localizador de recursos uniforme (URL) que indica de forma concisa la ubicación del contenido, así como el protocolo que se utilizará para recuperarlo. Opcionalmente una especificación de tiempo se puede asociar con el contenido. Esto permite obtener contenido en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Una vez más, esto es particularmente útil para tratar con el almacenamiento y la gestión de contenido en vivo. 2.2 Gestor de políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones API. En primer lugar, hay funciones que funcionan en áreas de almacenamiento gestionado y referencias basadas en políticas (prefs) al contenido almacenado allí. En segundo lugar, hay conjuntos de funciones utilizadas para aplicar cada política de gestión. La primera clase de funciones es utilizada por la capa del gestor de contenidos para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar: Estas operaciones son utilizadas por el gestor de contenidos para controlar su acceso al almacenamiento. Los gestores de políticas crean operación se utiliza para establecer contacto con una tienda por primera vez. Una vez hecho esto, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Tenga en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información sólo debe ser transmitida al gestor de políticas una vez a la hora de crear. Para operaciones abiertas, el gestor de políticas utilizará la información en caché para ponerse en contacto con la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el gestor de contenidos consulte al gestor de políticas sobre qué contenido está actualmente presente para una URL dada. Para los intervalos de tiempo continuos de los medios actuales se devolverán. recurso: Las rutinas de recursos se utilizan para consultar al gestor de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su conjunto y otra que se aplica a una determinada referencia política. El recurso API es extensible, actualmente soportamos consultas sobre el uso del disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer es utilizada por el gestor de contenido para referenciar el contenido en la tienda. Si el contenido no está presente, esta llamada resultará en que el contenido sea obtenido (o programado para ser obtenido si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL para almacenarla debajo, la URL para obtener datos de si no está presente, la política para almacenar el contenido debajo y los argumentos utilizados para parametrizar la política. El resultado de una operación pref establecer con éxito es una cadena de identificación de referencia política. Este ID se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones de gestor de políticas se utiliza para implementar todas las políticas apoyadas por Spectrum. Prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitivo puede ser parametrizada para funcionar diariamente, semanal o mensualmente. Tenga en cuenta que el gestor de políticas sólo se ocupa de la ejecución de una política específica. Las razones de mayor nivel para elegir una determinada política son manejadas por el gestor de contenido y aplicación. Una política de base se implementa usando seis funciones: establecer: llamada cuando se establece un pref con las URLs requeridas y los parámetros de las políticas de base. El establecimiento de rutina hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar medidas (por ejemplo. iniciar una descarga) y programa una devolución de llamada para ese tiempo. También puede registrarse para recibir callbacks si se recibe nuevo contenido para una URL dada. actualización: llamada a cambiar los parámetros de un pref, o a descartar la referencia política. newclip: llamado cuando se recibe un trozo de contenido nuevo para una URL de interés. La política de base normalmente organiza que newclip sea llamado para una URL dada cuando se establece la pref. Cuando se llama newclip, la política de base comprueba sus parámetros para determinar si desea añadir una referencia al clip que acaba de recibir. callback: llamado cuando el pref programa un callback basado en temporizador. Este es un mecanismo útil de despertar para prefs que necesitan estar inactivos durante un largo período de tiempo (por ejemplo. entre programas). boot/shutdown: llamado cuando el sistema de gestión de contenido está arrancando o apagando. La operación de arranque se utiliza normalmente para programar las llamadas iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para apagar con gracia flujos de E/S y guardar estado. 2.3 Gestor de almacenamiento El papel del Gestor de almacenamiento Spectrums es controlar todas las operaciones de E/S asociadas a una tienda dada. El gestor de almacenamiento Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo: un aparato de almacenamiento). Para medios continuos, en el nivel de administrador de almacenamiento el contenido se almacena como una colección de trozos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un trozo podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son de entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión tanto las rutinas de entrada como de salida toman intervalos de tiempo que programan cuando la operación de E/S debe ocurrir, y ambas rutinas devuelven una manija de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el gestor de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar tiendas. También es compatible con las operaciones para consultar los usos de recursos y las opciones apoyadas por la tienda. Por último, el administrador de almacenamiento también tiene una rutina de descartes que puede ser utilizada por el administrador de políticas para informar a la tienda para eliminar el contenido de la tienda. 3. CASOS DE APLICACIÓN Y USO En esta sección describimos nuestra implementación de Spectrum y cómo se puede utilizar. 3.1 Implementación Hemos implementado Spectrums tres capas en C como parte de una biblioteca que puede vincularse con aplicaciones basadas en Spectrum. Cada capa realiza un seguimiento de su estado a través de un conjunto de archivos de datos locales que persisten a través de los reinicios, permitiendo así a Spectrum manejar sin problemas los ciclos de potencia. Para capas que residen en sistemas remotos (p. ej. una tienda remota) sólo la meta-información necesaria para contactar con el remoto 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Interfaz gráfica de usuario Red activada DVR Program Information Content DVR Application Figura 2: El espectro en un nodo DVR habilitado de red se almacena localmente. Nuestra aplicación de prueba utiliza una política local y un gestor de almacenamiento para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficazmente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas Spectrums API admiten modos síncronos y asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada API lleva un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de llamada y el estado de retorno. Para llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamadas. Para usar una función Spectrum API, el llamante elige primero el modo sincronización o asíncrona y asigna una estructura reqinfo. Para las llamadas de sincronización, el reqinfo se puede asignar en la pila, de lo contrario se asigna con malloc. Para las llamadas async, se debe proporcionar una función de devolución de llamada cuando se asigna el reqinfo. A continuación, el llamante invoca la función Spectrum API deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas async exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada async se completa o se produce un tiempo de espera, la función de devolución de llamada async se llama con la información adecuada necesaria para completar el procesamiento. El diseño modular/en capas de la arquitectura Spectrum simplifica el objetivo de distribución de la funcionalidad. Además, la comunicación entre funciones es típicamente de naturaleza maestro-esclavo(s). Esto significa que varios enfoques de la operación distribuida son posibles que satisfagan los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un simple diseño modular. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y seleccionar el método de codificación que debe utilizarse con los datos a transferir. Los protocolos de transporte pueden variar protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP plano para la mayor parte de nuestro transporte. Las llamadas de funciones a través de las diferentes API de Spectrum se pueden codificar utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos usando la biblioteca XML de eXpat [4] para codificar nuestras llamadas. Mientras estamos actualmente transfiriendo nuestros mensajes codificados XML usando una conexión TCP simple, en un entorno real esto puede ser reemplazado fácilmente por una implementación basada en una capa segura de sockets (SSL) para mejorar la seguridad mediante la adición de SSL como protocolo de transporte. Un aspecto importante del Spectrum es que puede gestionar contenidos basados en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la sección 2.2, prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben entender las políticas a nivel de base y cómo pueden ser parametrizadas. Para abordar este tema, tratamos cada política a nivel de base como si fuera un programa separado. Cada política a nivel de base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada usando una función tipo getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de bytes no es un problema en una cadena. Dado que esta parte de Spectrum no está en la ruta de datos críticos, este tipo de formato no es un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos del Espectro En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos del Espectro en nuestro entorno. El foco de nuestro trabajo anterior ha sido la distribución de contenido para el contenido multimedia en streaming [2] y la grabación digital de vídeo habilitada en red [3]. El sistema Spectrum es aplicable a ambos escenarios de la manera siguiente. La Figura 2 muestra la arquitectura DVR (NED) activada por red. En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación DVR obtiene listados de programas de alguna fuente de red, se ocupa de la presentación del usuario a través de una interfaz gráfica de usuario (GUI), e interfaz con el sistema Spectrum a través de las API de la capa de gestión de contenidos. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento a 8 Content Manager Centralized Content Management station Información de contenidoGuía de interfaz de usuario Gestor de almacenamiento Gestor de almacenamiento Fetcher Edge Portal Política de servidor Gestor de almacenamiento Gestor de almacenamiento Gestor de almacenamiento Gestor de contenido Fetcher Edge Portal Server Distributed Content To La obtención del contenido (a través de la red o localmente) y el posterior almacenamiento en el sistema local es entonces manejado por los gerentes de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenidos en streaming (p. ej. PRISM [2] se muestra en la Figura 3. En este entorno se está distribuyendo contenido multimedia en streaming (tanto en directo, enlatado en vivo como bajo demanda) a portales de borde desde donde se están sirviendo los puntos finales de streaming. En nuestro entorno la distribución y almacenamiento de contenidos se realiza desde una estación centralizada de gestión de contenidos que controla varios de los portales de borde. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenidos sin necesidad de comunicación continua entre el gestor de contenidos y los dispositivos de borde, es decir. una vez que se han dado instrucciones a los dispositivos de borde que pueden funcionar de forma independiente hasta que se van a hacer cambios. 3.3 Spectrum Operational Ejemplo Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación PVR basada en Spectrum programada para almacenar un día de contenido en streaming en una ventana móvil. Para configurar la ventana móvil, la aplicación utilizaría la API del gestor de contenidos para crear un grupo de políticas y una referencia política al contenido deseado. El establecimiento de la referencia de la política de ventanilla móvil de un día haría que el pesebre de la política pidiera al administrador de almacenamiento que comenzara a recibir la corriente. A medida que llega cada trozo de datos de streaming, el gestor de políticas ejecuta la función newclip de referencias políticas. La función newclip añade una referencia a cada trozo que llega, y programa una devolución de llamada un día después. En ese momento, la política dejará de hacer referencia al contenido, que ya tiene un día de antigüedad, y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considere el caso en el que el usuario decide guardar parte del contenido (por ejemplo. un programa específico) en la ventana de rodadura durante una semana adicional. Para ello, la aplicación solicita que el gestor de contenidos agregue una nueva referencia política adicional a la parte del contenido a conservar. Por lo tanto, el contenido conservado tiene dos referencias: una desde la ventana móvil y otra desde la solicitud de preservar el contenido durante una semana adicional. Después de un día la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. base de datos url1 url2 (archivos multimedia...) (archivos multimedia...) meta store (información general...) url1 screens prefs ranges media screens, etc.url2 poly host ref1 ref1.files ref1.state Figura 4: Diseño de datos de Spectrum policy store preservado por la segunda referencia. Después de la semana adicional ha pasado, la función callback para la segunda referencia será llamada. Esta función descartará la referencia restante al contenido y como no hay referencias restantes, el contenido será liberado. Con el fin de funcionar en escenarios como los descritos anteriormente, Spectrums gestor de políticas debe gestionar y mantener todas las referencias a varios trozos de medios. Estas referencias son persistentes y por lo tanto deben ser capaces de sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestra implementación de Spectrum Policy Manager logra esto usando la estructura de archivos y directorios que se muestra en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el administrador de almacenamiento para almacenar cada URL activa trozos de medios. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Tenga en cuenta que este directorio se utiliza sólo si el administrador de almacenamiento es local. Si el gestor de políticas está utilizando un gestor de almacenamiento externo (por ejemplo: un aparato de almacenamiento), a continuación, los archivos multimedia se almacenan de forma remota y sólo son remotamente referenciados por el gestor de políticas. meta: este directorio contiene meta información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) e información sobre los tipos de trozos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los trozos de datos almacenados. El archivo de trozos contiene una lista de trozos actualmente almacenados y sus cuentas de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de rangos temporales de datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato de los medios almacenados bajo la URL actual. poli: este directorio contiene un conjunto de subdirectorios host. Cada subdirectorio de host contiene el conjunto de referencias políticas creadas por ese host. La información sobre cada referencia política se divide en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files, y ref1.state. El archivo ref1 contiene información sobre la política de referencia que no cambia con frecuencia. Esta información incluye la política de base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a trozos que pref ref1 posee. Por último, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Tenga en cuenta que otras implementaciones son posibles. Por ejemplo, un gestor de Spectrum de grado de operador podría almacenar toda su información normativa y de referencia en un sistema de bases de datos de alto rendimiento. 10 4. TRABAJOS RELACIONADOS Varios autores han abordado el problema de la gestión de contenidos en redes distribuidas. Gran parte de la labor se centra en el aspecto de la gestión de políticas. Por ejemplo en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda de los usuarios mediante un protocolo de difusión de la demanda. El rendimiento del sistema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Router Central, una base de conocimiento caché, subcachés y un juez de desalojo subcaché. La base Cache Knowledge permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenidos en el entorno en red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenidos, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de TV que se utilizan en PVRs para seleccionar automáticamente el contenido para los usuarios, por ejemplo. [6]. En el caso de que Spectrum se utilice en una configuración PVR, este tipo de sistema desempeñaría una función de nivel superior y podría beneficiarse claramente de las funcionalidades de la arquitectura Spectrum. Por último, en los proveedores comerciales de medio ambiente de CDN (por ejemplo, Cisco y Netapp) han desarrollado e implementado productos y herramientas de gestión de contenidos. A diferencia de la arquitectura Spectrum que permite que los dispositivos de borde funcionen de una manera en gran medida autónoma, las soluciones de proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. 5. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo presentamos el diseño e implementación de la arquitectura de gestión de contenidos Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que tengan tiempo y que se ocupen eficazmente del almacenamiento de contenido multimedia continuo. Por último, el diseño modular de la arquitectura Spectrum permite realizaciones independientes y distribuidas para que el sistema se pueda implementar en una variedad de aplicaciones. Hay una serie de cuestiones pendientes que requerirán una labor futura. Algunos de estos problemas incluyen: • Prevemos que Spectrum sea capaz de gestionar contenido en sistemas que van desde grandes CDNs hasta aparatos más pequeños como TiVO [8]. Para que estos sistemas más pequeños soporten Spectrum necesitarán redes y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo puede encajar en la arquitectura Spectrum. • El contenido de nombres de espectro por URL, pero no hemos definido intencionadamente el formato de las URLs de espectro, cómo se mapean al nombre real del contenido, o cómo los nombres y URLs deben ser presentados al usuario. Si bien hemos abordado anteriormente estas cuestiones en otros lugares [2], creemos que queda más trabajo por hacer y que es necesario elaborar normas consensuadas sobre la designación de nombres. • En este artículo nos hemos centrado en la gestión de contenidos para objetos multimedia continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero todavía tenemos que elaborar los detalles necesarios para apoyar esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que los contenidos multimedia se compartan fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. 6. REFERENCIAS [1] K.. Cheng e Y. Kambayashi. Gestión de Contenidos Multicaché-basada para Web Caching. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información Web, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. PRISM Architecture: Apoyando los servicios de transmisión mejorada en una red de distribución de contenido. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de vídeo digital habilitado para la red. 11o Taller de IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, y P. Shenoy. Una arquitectura de clúster de servidores multimedia de transmisión de demanda adaptativa y con conocimiento de la localización (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Recomendador de TV multi-agente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "error": [
                ""
            ]
        },
        "uniform resource locator": {
            "translated_key": "localizador de recursos uniforme",
            "translated_annotated_text": "Diseño e implementación de un sistema de gestión de contenido distribuido C. D. Cranor, R. Ethington, A. Sehgal†, D. Shur, C. Sreenan‡ y J.E. van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland RESUMEN La convergencia de los avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan e intercambian de forma rutinaria entre dispositivos habilitados para la red. Mantener un seguimiento de (o gestionar) dicho contenido sigue siendo un reto debido al gran volumen de datos. El almacenamiento de medios continuos en vivo (como contenidos de televisión o radio) aumenta la complejidad en el sentido de que este contenido no tiene un inicio o un final bien definidos y, por lo tanto, resulta engorroso de tratar. El almacenamiento en red permite que los contenidos que se consideran lógicamente como parte de la misma colección se distribuyan de hecho a través de una red, haciendo que la tarea de gestión de contenidos sea casi imposible de manejar sin un sistema de gestión de contenidos. En este trabajo presentamos el diseño y la implementación del sistema de gestión de contenidos Spectrum, que trata de contenido multimedia rico de manera efectiva en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto a escenarios independientes como a diversos escenarios en red. Un aspecto único de Spectrum es que requiere una (o más) políticas de retención para aplicarse a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido que ya no tiene una política de retención aplicada se elimina simplemente del sistema. Las diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así naturalmente el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo que son elementos básicos necesarios para hacer frente al almacenamiento de medios continuos en vivo, a los contenidos. No sólo describimos los detalles de la arquitectura Spectrum, sino que también damos casos de uso típicos. Categorías y Descriptores de Asunto C.2.4 [Organización de Sistemas de Computación]: Sistemas distribuidos por redes de comunicación informática; H.3.4 [Sistemas de Información]: Sistemas de almacenamiento y recuperación de información y software Términos generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar el contenido es y siempre ha sido una de las funciones principales de un ordenador. Las aplicaciones de computación inicial incluyen formateadores de texto y compiladores de programas. El contenido fue administrado inicialmente por interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que la gente desea utilizarlo han cambiado enormemente. Los nuevos tipos de contenidos, como los flujos multimedia continuos, se han convertido en algo común debido a la convergencia de los avances en las tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de vídeo codificado de calidad de TV en una sola unidad de disco. Esto ha llevado a la introducción de sistemas independientes de grabación de vídeo digital o de grabación de vídeo personal (PVR), como TiVO [8] y ReplayTV [7]. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas con la propia red actuando como un enorme repositorio de datos. La proliferación de contenidos de alta calidad gracias a estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. Nuestro trabajo se centra en el almacenamiento de contenidos multimedia ricos y, en particular, el almacenamiento de contenidos multimedia continuos en formatos preenvasados o en directo. La necesidad de gestión de contenidos en esta área es evidente cuando se tiene en cuenta lo siguiente: • El aumento de la capacidad y la disminución del costo de almacenamiento significa que incluso los modestos sistemas de escritorio hoy en día tienen la capacidad de almacenar cantidades masivas de contenido. La gestión manual de dichos contenidos (o, más correctamente, la no gestión manual de dichos contenidos) produce grandes ineficiencias en los casos en que el almacenamiento de residuos de contenidos no deseados y olvidados no es posible y en los que no se puede encontrar el contenido deseado. • Si bien es cierto para todo tipo de contenido, el almacenamiento de contenido multimedia continuo es especialmente problemático. El primer contenido continuo de los medios sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque de almacenamiento sin políticas no funcionará para todos, sino para los sistemas más pequeños. En segundo lugar, el almacenamiento de contenido en vivo como TV o radio es inherentemente problemático, ya que estas señales son corrientes continuas sin terminales. Esto significa que antes de que uno pueda siquiera pensar en manejar tal contenido hay una necesidad de abstraerlo en algo que podría ser manipulado y manejado. 4 • Cuando se trata de medios continuos almacenados, es necesario gestionar dichos contenidos tanto a un nivel de grano fino como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar sólo los aspectos más destacados de un evento deportivo en particular no debe tener que almacenar el contenido correspondiente al evento completo. Al mismo tiempo, el usuario podría querer pensar en el contenido en el agregado, por ejemplo. eliminar todo el contenido que no he visto en el último mes, excepto el contenido que fue explícitamente marcado para archivo. • Como se ha indicado anteriormente, es muy difícil tratar de hacer un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenidos. Sin embargo, cuando los dispositivos de almacenamiento reales se distribuyen a través de una red, la tarea de realizar un seguimiento del contenido es casi imposible. Este escenario es cada vez más común en los sistemas de distribución de contenidos basados en la red y es probable que también sea importante en los escenarios de creación de redes en el hogar. Parece entonces claro que se necesita un sistema de gestión de contenidos que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que se explota la capacidad en red de los dispositivos de almacenamiento. Este sistema debería permitir el almacenamiento eficiente de contenidos y el acceso a ellos a través de dispositivos de almacenamiento de redes heterogéneos, de acuerdo con las preferencias del usuario. El sistema de gestión de contenidos debe traducir las preferencias de los usuarios en políticas adecuadas de almacenamiento de bajo nivel y permitir que esas preferencias se expresen en un nivel fino de granularidad (aunque no lo exijan en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar (es decir. cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenidos distribuidos es difícil debido al número de requisitos que se imponen al sistema. Por ejemplo: • El sistema de gestión de contenidos debe funcionar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando el contenido almacenado en un sistema de archivos local, mientras que en otros, el contenido puede almacenarse en un dispositivo de almacenamiento de red separado. El gestor de contenidos podrá ser responsable de la aplicación de las políticas que utilice para hacer referencia al contenido o de la delegación de dicho papel en un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. • El sistema de gestión de contenidos debe ser flexible y ser capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe obtenerse, cuándo debe obtenerse, cuánto tiempo debe conservarse y en qué circunstancias debe desecharse. Esto significa que el sistema de gestión de contenidos debería permitir a múltiples aplicaciones hacer referencia al contenido con un rico conjunto de políticas y que todos deberían trabajar juntos sin problemas. • El sistema de gestión de contenidos debe poder controlar las referencias de contenido y utilizar esa información para colocar el contenido en la ubicación correcta de la red para un acceso eficiente a las aplicaciones. • El sistema de gestión de contenidos debe manejar la interacción entre la población implícita y explícita de contenidos en el borde de la red. • El sistema de contenidos debe ser capaz de gestionar eficientemente grandes conjuntos de contenidos, incluyendo flujos continuos. Necesita poder empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas hemos diseñado e implementado la arquitectura del sistema de gestión de contenidos Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite a múltiples aplicaciones hacer referencia al contenido utilizando políticas diferentes. Tenga en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenidos (CDN) que puede facilitar la distribución eficiente de contenidos (por ejemplo, la arquitectura PRISM CDN [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. La labor conexa se describe en la sección 4, y la sección 5 contiene nuestras conclusiones y sugerencias para la labor futura. 2. LA ARQUITECTURA DEL SISTEMA DE GESTIÓN DE CONTENIDO DISTRIBUIDO POR ESPECTRO La arquitectura del espectro consta de tres capas de gestión distintas que pueden o no distribuirse entre múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todos los contenidos de las aplicaciones de acuerdo con las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de vídeo personal (PVR), el gestor de contenidos recibe solicitudes de contenido de una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y administrar contenido en el dispositivo. gestor de políticas: implementa y hace cumplir varias políticas de almacenamiento que el gestor de contenidos utiliza para referirse al contenido. El gestor de políticas exporta una interfaz al gestor de contenidos que permite al gestor de contenidos solicitar que el contenido de una pieza sea tratado de acuerdo con una política específica. Spectrum permite que las políticas arbitrarias se realicen proporcionando un conjunto fijo de plantillas de políticas de base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (si no, Spectrum puede ampliarse fácilmente para cargar dinámicamente nuevo código de plantilla de política de base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido sólo puede existir en el sistema mientras se haga referencia a él al menos mediante una política existente. Los conflictos políticos se eliminan haciendo que el director de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin ninguna política asociada con él se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar naturalmente el intercambio de contenidos entre diferentes políticas, lo que es fundamental para el almacenamiento eficiente de objetos de gran tamaño. Tenga en cuenta que una diferencia clave entre el gestor de contenidos y el gestor de políticas es que el gestor de contenidos gestiona referencias a múltiples piezas de contenido, es decir. tiene una visión de aplicación del contenido. Por otra parte, el gestor de políticas sólo se ocupa de la política utilizada para gestionar contenidos independientes. Por ejemplo, en una aplicación PVR, la capa del gestor de contenidos sabría acerca de los diferentes grupos de contenido gestionado, como mantener-indefinidamente, guardar durante un día, y mantener si el espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada contenido tiene 5 contenido Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figura 1: Los componentes de la arquitectura Spectrum y las cuatro formas en que pueden configurarse su propia política (o políticas) se le aplican y son independientes de otros contenidos. administrador de almacenamiento: almacena el contenido de una manera eficiente al tiempo que facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento almacena contenido en trozos de subobjeto. Este enfoque tiene ventajas para la recuperación eficiente de contenidos, pero lo que es más importante, permite que las políticas se apliquen a un nivel de subobjetos que es de importancia crítica cuando se trata de objetos muy grandes como partes de medios continuos, por ejemplo. piezas seleccionadas de contenido de TV que se almacenan en un PVR. Tenga en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas utilizadas por los gestores de contenido y políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la Figura muestra el caso más simple (no distribuido) donde todas las capas se implementan en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como PVRs. El siguiente caso corresponde al caso en que existe un gestor de contenidos centralizado que controla los dispositivos de almacenamiento distribuidos, cada uno de los cuales es responsable de la aplicación del almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, funcionan de forma mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, normalmente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido basado en un calendario determinado por algún controlador centralizado. Por ejemplo, el CDN podría prepoblar dispositivos de borde con contenido que se espera que sea muy popular o distribuir archivos grandes a las sucursales durante horas fuera del pico en un entorno empresarial limitado por el ancho de banda. Permitir que un único gestor de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y el caso más distribuido. La necesidad de este tipo de separación puede ocurrir por razones de escalabilidad o cuando diferentes dispositivos o aparatos de almacenamiento especializados están obligados a ser controlados por un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas que controla un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo de grano fino por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de contenidos La capa de gestor de contenidos es la interfaz principal a través de la cual aplicaciones específicas utilizan la arquitectura Spectrum. Como tal, la capa de gestor de contenidos proporciona una API para que la aplicación manipule todos los aspectos de la arquitectura Spectrum en diferentes niveles de granularidad. La API del gestor de contenidos tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite añadir dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo control del gestor de contenidos y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos - este es el único lugar en la arquitectura donde se requiere que la aplicación sea consciente de esta distinción. Una vez que un dispositivo se mapea en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Tiendas: Las tiendas son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (p. ej. espacio en disco) a él. Las tiendas sólo se pueden crear en dispositivos físicos que se mapean en el sistema. Grupos de políticas: Los grupos de políticas son los medios por los cuales una aplicación especifica, instancia y modifica las políticas que se aplican al contenido Spectrum. El uso típico de este conjunto de funciones es seleccionar uno de un pequeño conjunto de políticas de base y parametrizar esta instancia específica de la política. Se crean grupos de políticas dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que requieren una especificación de tiempo sofisticada permiten el almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría desalojar el contenido del sistema en un determinado momento absoluto o relativo. Una política temporal ligeramente más implicada, habilitada por la arquitectura Spectrum, podría permitir que el contenido se almacene en una ventana móvil de varias horas (por ejemplo, el número de horas N más reciente se mantiene en el sistema). Las políticas basadas en el tiempo son de particular utilidad cuando se trata de contenidos continuos como una transmisión en vivo. 6 Contenido: En el mejor nivel de contenido de granularidad se puede añadir o eliminar del sistema. El contenido se especifica en el sistema mediante un \"localizador de recursos uniforme\" (URL) que indica de forma concisa la ubicación del contenido, así como el protocolo que se utilizará para recuperarlo. Opcionalmente una especificación de tiempo se puede asociar con el contenido. Esto permite obtener contenido en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Una vez más, esto es particularmente útil para tratar con el almacenamiento y la gestión de contenido en vivo. 2.2 Gestor de políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones API. En primer lugar, hay funciones que funcionan en áreas de almacenamiento gestionado y referencias basadas en políticas (prefs) al contenido almacenado allí. En segundo lugar, hay conjuntos de funciones utilizadas para aplicar cada política de gestión. La primera clase de funciones es utilizada por la capa del gestor de contenidos para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar: Estas operaciones son utilizadas por el gestor de contenidos para controlar su acceso al almacenamiento. Los gestores de políticas crean operación se utiliza para establecer contacto con una tienda por primera vez. Una vez hecho esto, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Tenga en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información sólo debe ser transmitida al gestor de políticas una vez a la hora de crear. Para operaciones abiertas, el gestor de políticas utilizará la información en caché para ponerse en contacto con la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el gestor de contenidos consulte al gestor de políticas sobre qué contenido está actualmente presente para una URL dada. Para los intervalos de tiempo continuos de los medios actuales se devolverán. recurso: Las rutinas de recursos se utilizan para consultar al gestor de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su conjunto y otra que se aplica a una determinada referencia política. El recurso API es extensible, actualmente soportamos consultas sobre el uso del disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer es utilizada por el gestor de contenido para referenciar el contenido en la tienda. Si el contenido no está presente, esta llamada resultará en que el contenido sea obtenido (o programado para ser obtenido si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL para almacenarla debajo, la URL para obtener datos de si no está presente, la política para almacenar el contenido debajo y los argumentos utilizados para parametrizar la política. El resultado de una operación pref establecer con éxito es una cadena de identificación de referencia política. Este ID se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones de gestor de políticas se utiliza para implementar todas las políticas apoyadas por Spectrum. Prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitivo puede ser parametrizada para funcionar diariamente, semanal o mensualmente. Tenga en cuenta que el gestor de políticas sólo se ocupa de la ejecución de una política específica. Las razones de mayor nivel para elegir una determinada política son manejadas por el gestor de contenido y aplicación. Una política de base se implementa usando seis funciones: establecer: llamada cuando se establece un pref con las URLs requeridas y los parámetros de las políticas de base. El establecimiento de rutina hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar medidas (por ejemplo. iniciar una descarga) y programa una devolución de llamada para ese tiempo. También puede registrarse para recibir callbacks si se recibe nuevo contenido para una URL dada. actualización: llamada a cambiar los parámetros de un pref, o a descartar la referencia política. newclip: llamado cuando se recibe un trozo de contenido nuevo para una URL de interés. La política de base normalmente organiza que newclip sea llamado para una URL dada cuando se establece la pref. Cuando se llama newclip, la política de base comprueba sus parámetros para determinar si desea añadir una referencia al clip que acaba de recibir. callback: llamado cuando el pref programa un callback basado en temporizador. Este es un mecanismo útil de despertar para prefs que necesitan estar inactivos durante un largo período de tiempo (por ejemplo. entre programas). boot/shutdown: llamado cuando el sistema de gestión de contenido está arrancando o apagando. La operación de arranque se utiliza normalmente para programar las llamadas iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para apagar con gracia flujos de E/S y guardar estado. 2.3 Gestor de almacenamiento El papel del Gestor de almacenamiento Spectrums es controlar todas las operaciones de E/S asociadas a una tienda dada. El gestor de almacenamiento Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo: un aparato de almacenamiento). Para medios continuos, en el nivel de administrador de almacenamiento el contenido se almacena como una colección de trozos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un trozo podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son de entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión tanto las rutinas de entrada como de salida toman intervalos de tiempo que programan cuando la operación de E/S debe ocurrir, y ambas rutinas devuelven una manija de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el gestor de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar tiendas. También es compatible con las operaciones para consultar los usos de recursos y las opciones apoyadas por la tienda. Por último, el administrador de almacenamiento también tiene una rutina de descartes que puede ser utilizada por el administrador de políticas para informar a la tienda para eliminar el contenido de la tienda. 3. CASOS DE APLICACIÓN Y USO En esta sección describimos nuestra implementación de Spectrum y cómo se puede utilizar. 3.1 Implementación Hemos implementado Spectrums tres capas en C como parte de una biblioteca que puede vincularse con aplicaciones basadas en Spectrum. Cada capa realiza un seguimiento de su estado a través de un conjunto de archivos de datos locales que persisten a través de los reinicios, permitiendo así a Spectrum manejar sin problemas los ciclos de potencia. Para capas que residen en sistemas remotos (p. ej. una tienda remota) sólo la meta-información necesaria para contactar con el remoto 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Interfaz gráfica de usuario Red activada DVR Program Information Content DVR Application Figura 2: El espectro en un nodo DVR habilitado de red se almacena localmente. Nuestra aplicación de prueba utiliza una política local y un gestor de almacenamiento para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficazmente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas Spectrums API admiten modos síncronos y asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada API lleva un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de llamada y el estado de retorno. Para llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamadas. Para usar una función Spectrum API, el llamante elige primero el modo sincronización o asíncrona y asigna una estructura reqinfo. Para las llamadas de sincronización, el reqinfo se puede asignar en la pila, de lo contrario se asigna con malloc. Para las llamadas async, se debe proporcionar una función de devolución de llamada cuando se asigna el reqinfo. A continuación, el llamante invoca la función Spectrum API deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas async exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada async se completa o se produce un tiempo de espera, la función de devolución de llamada async se llama con la información adecuada necesaria para completar el procesamiento. El diseño modular/en capas de la arquitectura Spectrum simplifica el objetivo de distribución de la funcionalidad. Además, la comunicación entre funciones es típicamente de naturaleza maestro-esclavo(s). Esto significa que varios enfoques de la operación distribuida son posibles que satisfagan los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un simple diseño modular. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y seleccionar el método de codificación que debe utilizarse con los datos a transferir. Los protocolos de transporte pueden variar protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP plano para la mayor parte de nuestro transporte. Las llamadas de funciones a través de las diferentes API de Spectrum se pueden codificar utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos usando la biblioteca XML de eXpat [4] para codificar nuestras llamadas. Mientras estamos actualmente transfiriendo nuestros mensajes codificados XML usando una conexión TCP simple, en un entorno real esto puede ser reemplazado fácilmente por una implementación basada en una capa segura de sockets (SSL) para mejorar la seguridad mediante la adición de SSL como protocolo de transporte. Un aspecto importante del Spectrum es que puede gestionar contenidos basados en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la sección 2.2, prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben entender las políticas a nivel de base y cómo pueden ser parametrizadas. Para abordar este tema, tratamos cada política a nivel de base como si fuera un programa separado. Cada política a nivel de base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada usando una función tipo getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de bytes no es un problema en una cadena. Dado que esta parte de Spectrum no está en la ruta de datos críticos, este tipo de formato no es un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos del Espectro En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos del Espectro en nuestro entorno. El foco de nuestro trabajo anterior ha sido la distribución de contenido para el contenido multimedia en streaming [2] y la grabación digital de vídeo habilitada en red [3]. El sistema Spectrum es aplicable a ambos escenarios de la manera siguiente. La Figura 2 muestra la arquitectura DVR (NED) activada por red. En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación DVR obtiene listados de programas de alguna fuente de red, se ocupa de la presentación del usuario a través de una interfaz gráfica de usuario (GUI), e interfaz con el sistema Spectrum a través de las API de la capa de gestión de contenidos. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento a 8 Content Manager Centralized Content Management station Información de contenidoGuía de interfaz de usuario Gestor de almacenamiento Gestor de almacenamiento Fetcher Edge Portal Política de servidor Gestor de almacenamiento Gestor de almacenamiento Gestor de almacenamiento Gestor de contenido Fetcher Edge Portal Server Distributed Content To La obtención del contenido (a través de la red o localmente) y el posterior almacenamiento en el sistema local es entonces manejado por los gerentes de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenidos en streaming (p. ej. PRISM [2] se muestra en la Figura 3. En este entorno se está distribuyendo contenido multimedia en streaming (tanto en directo, enlatado en vivo como bajo demanda) a portales de borde desde donde se están sirviendo los puntos finales de streaming. En nuestro entorno la distribución y almacenamiento de contenidos se realiza desde una estación centralizada de gestión de contenidos que controla varios de los portales de borde. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenidos sin necesidad de comunicación continua entre el gestor de contenidos y los dispositivos de borde, es decir. una vez que se han dado instrucciones a los dispositivos de borde que pueden funcionar de forma independiente hasta que se van a hacer cambios. 3.3 Spectrum Operational Ejemplo Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación PVR basada en Spectrum programada para almacenar un día de contenido en streaming en una ventana móvil. Para configurar la ventana móvil, la aplicación utilizaría la API del gestor de contenidos para crear un grupo de políticas y una referencia política al contenido deseado. El establecimiento de la referencia de la política de ventanilla móvil de un día haría que el pesebre de la política pidiera al administrador de almacenamiento que comenzara a recibir la corriente. A medida que llega cada trozo de datos de streaming, el gestor de políticas ejecuta la función newclip de referencias políticas. La función newclip añade una referencia a cada trozo que llega, y programa una devolución de llamada un día después. En ese momento, la política dejará de hacer referencia al contenido, que ya tiene un día de antigüedad, y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considere el caso en el que el usuario decide guardar parte del contenido (por ejemplo. un programa específico) en la ventana de rodadura durante una semana adicional. Para ello, la aplicación solicita que el gestor de contenidos agregue una nueva referencia política adicional a la parte del contenido a conservar. Por lo tanto, el contenido conservado tiene dos referencias: una desde la ventana móvil y otra desde la solicitud de preservar el contenido durante una semana adicional. Después de un día la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. base de datos url1 url2 (archivos multimedia...) (archivos multimedia...) meta store (información general...) url1 screens prefs ranges media screens, etc.url2 poly host ref1 ref1.files ref1.state Figura 4: Diseño de datos de Spectrum policy store preservado por la segunda referencia. Después de la semana adicional ha pasado, la función callback para la segunda referencia será llamada. Esta función descartará la referencia restante al contenido y como no hay referencias restantes, el contenido será liberado. Con el fin de funcionar en escenarios como los descritos anteriormente, Spectrums gestor de políticas debe gestionar y mantener todas las referencias a varios trozos de medios. Estas referencias son persistentes y por lo tanto deben ser capaces de sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestra implementación de Spectrum Policy Manager logra esto usando la estructura de archivos y directorios que se muestra en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el administrador de almacenamiento para almacenar cada URL activa trozos de medios. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Tenga en cuenta que este directorio se utiliza sólo si el administrador de almacenamiento es local. Si el gestor de políticas está utilizando un gestor de almacenamiento externo (por ejemplo: un aparato de almacenamiento), a continuación, los archivos multimedia se almacenan de forma remota y sólo son remotamente referenciados por el gestor de políticas. meta: este directorio contiene meta información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) e información sobre los tipos de trozos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los trozos de datos almacenados. El archivo de trozos contiene una lista de trozos actualmente almacenados y sus cuentas de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de rangos temporales de datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato de los medios almacenados bajo la URL actual. poli: este directorio contiene un conjunto de subdirectorios host. Cada subdirectorio de host contiene el conjunto de referencias políticas creadas por ese host. La información sobre cada referencia política se divide en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files, y ref1.state. El archivo ref1 contiene información sobre la política de referencia que no cambia con frecuencia. Esta información incluye la política de base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a trozos que pref ref1 posee. Por último, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Tenga en cuenta que otras implementaciones son posibles. Por ejemplo, un gestor de Spectrum de grado de operador podría almacenar toda su información normativa y de referencia en un sistema de bases de datos de alto rendimiento. 10 4. TRABAJOS RELACIONADOS Varios autores han abordado el problema de la gestión de contenidos en redes distribuidas. Gran parte de la labor se centra en el aspecto de la gestión de políticas. Por ejemplo en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda de los usuarios mediante un protocolo de difusión de la demanda. El rendimiento del sistema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Router Central, una base de conocimiento caché, subcachés y un juez de desalojo subcaché. La base Cache Knowledge permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenidos en el entorno en red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenidos, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de TV que se utilizan en PVRs para seleccionar automáticamente el contenido para los usuarios, por ejemplo. [6]. En el caso de que Spectrum se utilice en una configuración PVR, este tipo de sistema desempeñaría una función de nivel superior y podría beneficiarse claramente de las funcionalidades de la arquitectura Spectrum. Por último, en los proveedores comerciales de medio ambiente de CDN (por ejemplo, Cisco y Netapp) han desarrollado e implementado productos y herramientas de gestión de contenidos. A diferencia de la arquitectura Spectrum que permite que los dispositivos de borde funcionen de una manera en gran medida autónoma, las soluciones de proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. 5. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo presentamos el diseño e implementación de la arquitectura de gestión de contenidos Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que tengan tiempo y que se ocupen eficazmente del almacenamiento de contenido multimedia continuo. Por último, el diseño modular de la arquitectura Spectrum permite realizaciones independientes y distribuidas para que el sistema se pueda implementar en una variedad de aplicaciones. Hay una serie de cuestiones pendientes que requerirán una labor futura. Algunos de estos problemas incluyen: • Prevemos que Spectrum sea capaz de gestionar contenido en sistemas que van desde grandes CDNs hasta aparatos más pequeños como TiVO [8]. Para que estos sistemas más pequeños soporten Spectrum necesitarán redes y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo puede encajar en la arquitectura Spectrum. • El contenido de nombres de espectro por URL, pero no hemos definido intencionadamente el formato de las URLs de espectro, cómo se mapean al nombre real del contenido, o cómo los nombres y URLs deben ser presentados al usuario. Si bien hemos abordado anteriormente estas cuestiones en otros lugares [2], creemos que queda más trabajo por hacer y que es necesario elaborar normas consensuadas sobre la designación de nombres. • En este artículo nos hemos centrado en la gestión de contenidos para objetos multimedia continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero todavía tenemos que elaborar los detalles necesarios para apoyar esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que los contenidos multimedia se compartan fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. 6. REFERENCIAS [1] K.. Cheng e Y. Kambayashi. Gestión de Contenidos Multicaché-basada para Web Caching. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información Web, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. PRISM Architecture: Apoyando los servicios de transmisión mejorada en una red de distribución de contenido. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de vídeo digital habilitado para la red. 11o Taller de IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, y P. Shenoy. Una arquitectura de clúster de servidores multimedia de transmisión de demanda adaptativa y con conocimiento de la localización (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Recomendador de TV multi-agente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "error": [
                ""
            ]
        },
        "policy manager": {
            "translated_key": [
                "Gestor de políticas",
                "gerente de políticas",
                "jefe de políticas",
                "director de políticas",
                "gerente de políticas",
                "jefe de políticas",
                "gobernador de políticas",
                "gerente de políticas",
                "gerente de políticas",
                "gerente de políticas",
                "gerente de políticas",
                "policy manager",
                "gerente de políticas",
                "gerente de políticas",
                "gerente de políticas",
                "gerente de políticas",
                "director de políticas",
                "jefe de políticas",
                "gerente de políticas",
                "gerente de políticas",
                "gobernador de políticas",
                "policy manager",
                "policy manager",
                "gerente de políticas",
                "gerente de políticas"
            ],
            "translated_annotated_text": "Diseño e implementación de un sistema de gestión de contenido distribuido C. D. Cranor, R. Ethington, A. Sehgal†, D. Shur, C. Sreenan‡ y J.E. van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland RESUMEN La convergencia de los avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan e intercambian de forma rutinaria entre dispositivos habilitados para la red. Mantener un seguimiento de (o gestionar) dicho contenido sigue siendo un reto debido al gran volumen de datos. El almacenamiento de medios continuos en vivo (como contenidos de televisión o radio) aumenta la complejidad en el sentido de que este contenido no tiene un inicio o un final bien definidos y, por lo tanto, resulta engorroso de tratar. El almacenamiento en red permite que los contenidos que se consideran lógicamente como parte de la misma colección se distribuyan de hecho a través de una red, haciendo que la tarea de gestión de contenidos sea casi imposible de manejar sin un sistema de gestión de contenidos. En este trabajo presentamos el diseño y la implementación del sistema de gestión de contenidos Spectrum, que trata de contenido multimedia rico de manera efectiva en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto a escenarios independientes como a diversos escenarios en red. Un aspecto único de Spectrum es que requiere una (o más) políticas de retención para aplicarse a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido que ya no tiene una política de retención aplicada se elimina simplemente del sistema. Las diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así naturalmente el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo que son elementos básicos necesarios para hacer frente al almacenamiento de medios continuos en vivo, a los contenidos. No sólo describimos los detalles de la arquitectura Spectrum, sino que también damos casos de uso típicos. Categorías y Descriptores de Asunto C.2.4 [Organización de Sistemas de Computación]: Sistemas distribuidos por redes de comunicación informática; H.3.4 [Sistemas de Información]: Sistemas de almacenamiento y recuperación de información y software Términos generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar el contenido es y siempre ha sido una de las funciones principales de un ordenador. Las aplicaciones de computación inicial incluyen formateadores de texto y compiladores de programas. El contenido fue administrado inicialmente por interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que la gente desea utilizarlo han cambiado enormemente. Los nuevos tipos de contenidos, como los flujos multimedia continuos, se han convertido en algo común debido a la convergencia de los avances en las tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de vídeo codificado de calidad de TV en una sola unidad de disco. Esto ha llevado a la introducción de sistemas independientes de grabación de vídeo digital o de grabación de vídeo personal (PVR), como TiVO [8] y ReplayTV [7]. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas con la propia red actuando como un enorme repositorio de datos. La proliferación de contenidos de alta calidad gracias a estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. Nuestro trabajo se centra en el almacenamiento de contenidos multimedia ricos y, en particular, el almacenamiento de contenidos multimedia continuos en formatos preenvasados o en directo. La necesidad de gestión de contenidos en esta área es evidente cuando se tiene en cuenta lo siguiente: • El aumento de la capacidad y la disminución del costo de almacenamiento significa que incluso los modestos sistemas de escritorio hoy en día tienen la capacidad de almacenar cantidades masivas de contenido. La gestión manual de dichos contenidos (o, más correctamente, la no gestión manual de dichos contenidos) produce grandes ineficiencias en los casos en que el almacenamiento de residuos de contenidos no deseados y olvidados no es posible y en los que no se puede encontrar el contenido deseado. • Si bien es cierto para todo tipo de contenido, el almacenamiento de contenido multimedia continuo es especialmente problemático. El primer contenido continuo de los medios sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque de almacenamiento sin políticas no funcionará para todos, sino para los sistemas más pequeños. En segundo lugar, el almacenamiento de contenido en vivo como TV o radio es inherentemente problemático, ya que estas señales son corrientes continuas sin terminales. Esto significa que antes de que uno pueda siquiera pensar en manejar tal contenido hay una necesidad de abstraerlo en algo que podría ser manipulado y manejado. 4 • Cuando se trata de medios continuos almacenados, es necesario gestionar dichos contenidos tanto a un nivel de grano fino como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar sólo los aspectos más destacados de un evento deportivo en particular no debe tener que almacenar el contenido correspondiente al evento completo. Al mismo tiempo, el usuario podría querer pensar en el contenido en el agregado, por ejemplo. eliminar todo el contenido que no he visto en el último mes, excepto el contenido que fue explícitamente marcado para archivo. • Como se ha indicado anteriormente, es muy difícil tratar de hacer un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenidos. Sin embargo, cuando los dispositivos de almacenamiento reales se distribuyen a través de una red, la tarea de realizar un seguimiento del contenido es casi imposible. Este escenario es cada vez más común en los sistemas de distribución de contenidos basados en la red y es probable que también sea importante en los escenarios de creación de redes en el hogar. Parece entonces claro que se necesita un sistema de gestión de contenidos que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que se explota la capacidad en red de los dispositivos de almacenamiento. Este sistema debería permitir el almacenamiento eficiente de contenidos y el acceso a ellos a través de dispositivos de almacenamiento de redes heterogéneos, de acuerdo con las preferencias del usuario. El sistema de gestión de contenidos debe traducir las preferencias de los usuarios en políticas adecuadas de almacenamiento de bajo nivel y permitir que esas preferencias se expresen en un nivel fino de granularidad (aunque no lo exijan en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar (es decir. cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenidos distribuidos es difícil debido al número de requisitos que se imponen al sistema. Por ejemplo: • El sistema de gestión de contenidos debe funcionar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando el contenido almacenado en un sistema de archivos local, mientras que en otros, el contenido puede almacenarse en un dispositivo de almacenamiento de red separado. El gestor de contenidos podrá ser responsable de la aplicación de las políticas que utilice para hacer referencia al contenido o de la delegación de dicho papel en un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. • El sistema de gestión de contenidos debe ser flexible y ser capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe obtenerse, cuándo debe obtenerse, cuánto tiempo debe conservarse y en qué circunstancias debe desecharse. Esto significa que el sistema de gestión de contenidos debería permitir a múltiples aplicaciones hacer referencia al contenido con un rico conjunto de políticas y que todos deberían trabajar juntos sin problemas. • El sistema de gestión de contenidos debe poder controlar las referencias de contenido y utilizar esa información para colocar el contenido en la ubicación correcta de la red para un acceso eficiente a las aplicaciones. • El sistema de gestión de contenidos debe manejar la interacción entre la población implícita y explícita de contenidos en el borde de la red. • El sistema de contenidos debe ser capaz de gestionar eficientemente grandes conjuntos de contenidos, incluyendo flujos continuos. Necesita poder empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas hemos diseñado e implementado la arquitectura del sistema de gestión de contenidos Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite a múltiples aplicaciones hacer referencia al contenido utilizando políticas diferentes. Tenga en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenidos (CDN) que puede facilitar la distribución eficiente de contenidos (por ejemplo, la arquitectura PRISM CDN [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. La labor conexa se describe en la sección 4, y la sección 5 contiene nuestras conclusiones y sugerencias para la labor futura. 2. LA ARQUITECTURA DEL SISTEMA DE GESTIÓN DE CONTENIDO DISTRIBUIDO POR ESPECTRO La arquitectura del espectro consta de tres capas de gestión distintas que pueden o no distribuirse entre múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todos los contenidos de las aplicaciones de acuerdo con las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de vídeo personal (PVR), el gestor de contenidos recibe solicitudes de contenido de una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y administrar contenido en el dispositivo. \"Gestor de políticas\": implementa y hace cumplir varias políticas de almacenamiento que el gestor de contenidos utiliza para referirse al contenido. El \"gerente de políticas\" exporta una interfaz al gestor de contenidos que permite al gestor de contenidos solicitar que el contenido de una pieza sea tratado de acuerdo con una política específica. Spectrum permite que las políticas arbitrarias se realicen proporcionando un conjunto fijo de plantillas de políticas de base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (si no, Spectrum puede ampliarse fácilmente para cargar dinámicamente nuevo código de plantilla de política de base en tiempo de ejecución). Un aspecto clave del \"jefe de políticas\" es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido sólo puede existir en el sistema mientras se haga referencia a él al menos mediante una política existente. Los conflictos políticos se eliminan al tener al \"director de políticas\" que se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin ninguna política asociada con él se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar naturalmente el intercambio de contenidos entre diferentes políticas, lo que es fundamental para el almacenamiento eficiente de objetos de gran tamaño. Tenga en cuenta que una diferencia clave entre el gestor de contenidos y el \"gerente de políticas\" es que el gestor de contenidos gestiona referencias a múltiples piezas de contenido, es decir. tiene una visión de aplicación del contenido. Por otro lado, el \"jefe de políticas\" sólo se ocupa de la política utilizada para gestionar piezas de contenido independientes. Por ejemplo, en una aplicación PVR, la capa del gestor de contenidos sabría acerca de los diferentes grupos de contenido gestionado, como mantener-indefinidamente, guardar durante un día, y mantener si el espacio en disco disponible. Sin embargo, a nivel de \"gobernador de políticas\", cada pieza de contenido tiene 5 Gestor de contenidos Gestor de políticas Gestor de contenidos Gestor de contenidos Gestor de políticas Gestor de políticas Gestor de políticas Gestor de almacenamiento Gestor de almacenamiento Gestor de almacenamiento Invocación remota Figura 1: Los componentes de la arquitectura Spectrum y las cuatro formas en que pueden configurarse su propia política (o políticas administrador de almacenamiento: almacena el contenido de una manera eficiente al tiempo que facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento almacena contenido en trozos de subobjeto. Este enfoque tiene ventajas para la recuperación eficiente de contenidos, pero lo que es más importante, permite que las políticas se apliquen a un nivel de subobjetos que es de importancia crítica cuando se trata de objetos muy grandes como partes de medios continuos, por ejemplo. piezas seleccionadas de contenido de TV que se almacenan en un PVR. Tenga en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas utilizadas por los gestores de contenido y políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la Figura muestra el caso más simple (no distribuido) donde todas las capas se implementan en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como PVRs. El siguiente caso corresponde al caso en que existe un gestor de contenidos centralizado que controla los dispositivos de almacenamiento distribuidos, cada uno de los cuales es responsable de la aplicación del almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, funcionan de forma mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, normalmente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido basado en un calendario determinado por algún controlador centralizado. Por ejemplo, el CDN podría prepoblar dispositivos de borde con contenido que se espera que sea muy popular o distribuir archivos grandes a las sucursales durante horas fuera del pico en un entorno empresarial limitado por el ancho de banda. Permitir que un único \"gerente de políticas\" controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y el caso más distribuido. La necesidad de este tipo de separación puede ocurrir por razones de escalabilidad o cuando diferentes dispositivos o aparatos de almacenamiento especializados están obligados a ser controlados por un único \"gerente de políticas\". El caso final muestra un gestor de contenido combinado con un \"gerente de políticas\" que controla un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es un tanto autónomo y no requiere un control continuo de grano fino por parte del \"gerente de políticas\". Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de contenidos La capa de gestor de contenidos es la interfaz principal a través de la cual aplicaciones específicas utilizan la arquitectura Spectrum. Como tal, la capa de gestor de contenidos proporciona una API para que la aplicación manipule todos los aspectos de la arquitectura Spectrum en diferentes niveles de granularidad. La API del gestor de contenidos tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite añadir dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo control del gestor de contenidos y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos - este es el único lugar en la arquitectura donde se requiere que la aplicación sea consciente de esta distinción. Una vez que un dispositivo se mapea en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Tiendas: Las tiendas son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (p. ej. espacio en disco) a él. Las tiendas sólo se pueden crear en dispositivos físicos que se mapean en el sistema. Grupos de políticas: Los grupos de políticas son los medios por los cuales una aplicación especifica, instancia y modifica las políticas que se aplican al contenido Spectrum. El uso típico de este conjunto de funciones es seleccionar uno de un pequeño conjunto de políticas de base y parametrizar esta instancia específica de la política. Se crean grupos de políticas dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que requieren una especificación de tiempo sofisticada permiten el almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría desalojar el contenido del sistema en un determinado momento absoluto o relativo. Una política temporal ligeramente más implicada, habilitada por la arquitectura Spectrum, podría permitir que el contenido se almacene en una ventana móvil de varias horas (por ejemplo, el número de horas N más reciente se mantiene en el sistema). Las políticas basadas en el tiempo son de particular utilidad cuando se trata de contenidos continuos como una transmisión en vivo. 6 Contenido: En el mejor nivel de contenido de granularidad se puede añadir o eliminar del sistema. El contenido se especifica en el sistema mediante un localizador de recursos uniforme (URL) que indica de forma concisa la ubicación del contenido, así como el protocolo que se utilizará para recuperarlo. Opcionalmente una especificación de tiempo se puede asociar con el contenido. Esto permite obtener contenido en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Una vez más, esto es particularmente útil para tratar con el almacenamiento y la gestión de contenido en vivo. 2.2 Policy Manager La capa de \"policy manager\" de la arquitectura Spectrum tiene dos tipos principales de funciones API. En primer lugar, hay funciones que funcionan en áreas de almacenamiento gestionado y referencias basadas en políticas (prefs) al contenido almacenado allí. En segundo lugar, hay conjuntos de funciones utilizadas para aplicar cada política de gestión. La primera clase de funciones es utilizada por la capa del gestor de contenidos para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar: Estas operaciones son utilizadas por el gestor de contenidos para controlar su acceso al almacenamiento. Los gestores de políticas crean operación se utiliza para establecer contacto con una tienda por primera vez. Una vez hecho esto, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Tenga en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información sólo tiene que ser transmitida al \"gerente de políticas\" una vez a la hora de crear. Para operaciones abiertas, el \"gerente de políticas\" utilizará la información en caché para ponerse en contacto con la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el gestor de contenidos consulte al \"gerente de políticas\" sobre qué contenido está actualmente presente para una URL dada. Para los intervalos de tiempo continuos de los medios actuales se devolverán. recurso: Las rutinas de recursos se utilizan para consultar al \"gerente de políticas\" sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su conjunto y otra que se aplica a una determinada referencia política. El recurso API es extensible, actualmente soportamos consultas sobre el uso del disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer es utilizada por el gestor de contenido para referenciar el contenido en la tienda. Si el contenido no está presente, esta llamada resultará en que el contenido sea obtenido (o programado para ser obtenido si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL para almacenarla debajo, la URL para obtener datos de si no está presente, la política para almacenar el contenido debajo y los argumentos utilizados para parametrizar la política. El resultado de una operación pref establecer con éxito es una cadena de identificación de referencia política. Este ID se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones de \"director de políticas\" se utilizan para implementar todas las políticas apoyadas por Spectrum. Prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitivo puede ser parametrizada para funcionar diariamente, semanal o mensualmente. Tenga en cuenta que el \"jefe de políticas\" sólo se ocupa de la ejecución de una política específica. Las razones de mayor nivel para elegir una determinada política son manejadas por el gestor de contenido y aplicación. Una política de base se implementa usando seis funciones: establecer: llamada cuando se establece un pref con las URLs requeridas y los parámetros de las políticas de base. El establecimiento de rutina hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar medidas (por ejemplo. iniciar una descarga) y programa una devolución de llamada para ese tiempo. También puede registrarse para recibir callbacks si se recibe nuevo contenido para una URL dada. actualización: llamada a cambiar los parámetros de un pref, o a descartar la referencia política. newclip: llamado cuando se recibe un trozo de contenido nuevo para una URL de interés. La política de base normalmente organiza que newclip sea llamado para una URL dada cuando se establece la pref. Cuando se llama newclip, la política de base comprueba sus parámetros para determinar si desea añadir una referencia al clip que acaba de recibir. callback: llamado cuando el pref programa un callback basado en temporizador. Este es un mecanismo útil de despertar para prefs que necesitan estar inactivos durante un largo período de tiempo (por ejemplo. entre programas). boot/shutdown: llamado cuando el sistema de gestión de contenido está arrancando o apagando. La operación de arranque se utiliza normalmente para programar las llamadas iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para apagar con gracia flujos de E/S y guardar estado. 2.3 Gestor de almacenamiento El papel del Gestor de almacenamiento Spectrums es controlar todas las operaciones de E/S asociadas a una tienda dada. El gestor de almacenamiento Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo: un aparato de almacenamiento). Para medios continuos, en el nivel de administrador de almacenamiento el contenido se almacena como una colección de trozos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un trozo podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son de entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión tanto las rutinas de entrada como de salida toman intervalos de tiempo que programan cuando la operación de E/S debe ocurrir, y ambas rutinas devuelven una manija de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el \"gerente de políticas\", el gestor de almacenamiento también proporciona funciones de API para crear, abrir y cerrar tiendas. También es compatible con las operaciones para consultar los usos de recursos y las opciones apoyadas por la tienda. Por último, el administrador de almacenamiento también tiene una rutina de descartes que puede ser utilizada por el \"gerente de políticas\" para informar a la tienda para eliminar el contenido de la tienda. 3. CASOS DE APLICACIÓN Y USO En esta sección describimos nuestra implementación de Spectrum y cómo se puede utilizar. 3.1 Implementación Hemos implementado Spectrums tres capas en C como parte de una biblioteca que puede vincularse con aplicaciones basadas en Spectrum. Cada capa realiza un seguimiento de su estado a través de un conjunto de archivos de datos locales que persisten a través de los reinicios, permitiendo así a Spectrum manejar sin problemas los ciclos de potencia. Para capas que residen en sistemas remotos (p. ej. una tienda remota) sólo la meta-información necesaria para contactar con el remoto 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Interfaz gráfica de usuario Red activada DVR Program Information Content DVR Application Figura 2: El espectro en un nodo DVR habilitado de red se almacena localmente. Nuestra aplicación de prueba utiliza una política local y un gestor de almacenamiento para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficazmente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas Spectrums API admiten modos síncronos y asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada API lleva un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de llamada y el estado de retorno. Para llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamadas. Para usar una función Spectrum API, el llamante elige primero el modo sincronización o asíncrona y asigna una estructura reqinfo. Para las llamadas de sincronización, el reqinfo se puede asignar en la pila, de lo contrario se asigna con malloc. Para las llamadas async, se debe proporcionar una función de devolución de llamada cuando se asigna el reqinfo. A continuación, el llamante invoca la función Spectrum API deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas async exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada async se completa o se produce un tiempo de espera, la función de devolución de llamada async se llama con la información adecuada necesaria para completar el procesamiento. El diseño modular/en capas de la arquitectura Spectrum simplifica el objetivo de distribución de la funcionalidad. Además, la comunicación entre funciones es típicamente de naturaleza maestro-esclavo(s). Esto significa que varios enfoques de la operación distribuida son posibles que satisfagan los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un simple diseño modular. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y seleccionar el método de codificación que debe utilizarse con los datos a transferir. Los protocolos de transporte pueden variar protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP plano para la mayor parte de nuestro transporte. Las llamadas de funciones a través de las diferentes API de Spectrum se pueden codificar utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos usando la biblioteca XML de eXpat [4] para codificar nuestras llamadas. Mientras estamos actualmente transfiriendo nuestros mensajes codificados XML usando una conexión TCP simple, en un entorno real esto puede ser reemplazado fácilmente por una implementación basada en una capa segura de sockets (SSL) para mejorar la seguridad mediante la adición de SSL como protocolo de transporte. Un aspecto importante del Spectrum es que puede gestionar contenidos basados en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la sección 2.2, prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben entender las políticas a nivel de base y cómo pueden ser parametrizadas. Para abordar este tema, tratamos cada política a nivel de base como si fuera un programa separado. Cada política a nivel de base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada usando una función tipo getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de bytes no es un problema en una cadena. Dado que esta parte de Spectrum no está en la ruta de datos críticos, este tipo de formato no es un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos del Espectro En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos del Espectro en nuestro entorno. El foco de nuestro trabajo anterior ha sido la distribución de contenido para el contenido multimedia en streaming [2] y la grabación digital de vídeo habilitada en red [3]. El sistema Spectrum es aplicable a ambos escenarios de la manera siguiente. La Figura 2 muestra la arquitectura DVR (NED) activada por red. En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación DVR obtiene listados de programas de alguna fuente de red, se ocupa de la presentación del usuario a través de una interfaz gráfica de usuario (GUI), e interfaz con el sistema Spectrum a través de las API de la capa de gestión de contenidos. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento a 8 Content Manager Centralized Content Management station Información de contenidoGuía de interfaz de usuario Gestor de almacenamiento Gestor de almacenamiento Fetcher Edge Portal Política de servidor Gestor de almacenamiento Gestor de almacenamiento Gestor de almacenamiento Gestor de contenido Fetcher Edge Portal Server Distributed Content To La obtención del contenido (a través de la red o localmente) y el posterior almacenamiento en el sistema local es entonces manejado por los gerentes de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenidos en streaming (p. ej. PRISM [2] se muestra en la Figura 3. En este entorno se está distribuyendo contenido multimedia en streaming (tanto en directo, enlatado en vivo como bajo demanda) a portales de borde desde donde se están sirviendo los puntos finales de streaming. En nuestro entorno la distribución y almacenamiento de contenidos se realiza desde una estación centralizada de gestión de contenidos que controla varios de los portales de borde. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenidos sin necesidad de comunicación continua entre el gestor de contenidos y los dispositivos de borde, es decir. una vez que se han dado instrucciones a los dispositivos de borde que pueden funcionar de forma independiente hasta que se van a hacer cambios. 3.3 Spectrum Operational Ejemplo Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación PVR basada en Spectrum programada para almacenar un día de contenido en streaming en una ventana móvil. Para configurar la ventana móvil, la aplicación utilizaría la API del gestor de contenidos para crear un grupo de políticas y una referencia política al contenido deseado. El establecimiento de la referencia de la política de ventanilla móvil de un día haría que el pesebre de la política pidiera al administrador de almacenamiento que comenzara a recibir la corriente. A medida que llega cada trozo de datos de streaming, el \"gobernador de políticas\" ejecuta la función newclip de referencias políticas. La función newclip añade una referencia a cada trozo que llega, y programa una devolución de llamada un día después. En ese momento, la política dejará de hacer referencia al contenido, que ya tiene un día de antigüedad, y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considere el caso en el que el usuario decide guardar parte del contenido (por ejemplo. un programa específico) en la ventana de rodadura durante una semana adicional. Para ello, la aplicación solicita que el gestor de contenidos agregue una nueva referencia política adicional a la parte del contenido a conservar. Por lo tanto, el contenido conservado tiene dos referencias: una desde la ventana móvil y otra desde la solicitud de preservar el contenido durante una semana adicional. Después de un día la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. base de datos url1 url2 (archivos multimedia...) (archivos multimedia...) meta store (información general...) url1 screens prefs ranges media screens, etc.url2 poly host ref1 ref1.files ref1.state Figura 4: Diseño de datos de Spectrum policy store preservado por la segunda referencia. Después de la semana adicional ha pasado, la función callback para la segunda referencia será llamada. Esta función descartará la referencia restante al contenido y como no hay referencias restantes, el contenido será liberado. Para funcionar en escenarios como los descritos anteriormente, Spectrums \"policy manager\" debe gestionar y mantener todas las referencias a varios trozos de medios. Estas referencias son persistentes y por lo tanto deben ser capaces de sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestra implementación Spectrum \"policy manager\" logra esto usando la estructura de archivos y directorios que se muestra en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el administrador de almacenamiento para almacenar cada URL activa trozos de medios. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Tenga en cuenta que este directorio se utiliza sólo si el administrador de almacenamiento es local. Si el \"gerente de políticas\" utiliza un gestor de almacenamiento externo (por ejemplo: un aparato de almacenamiento), a continuación, los archivos multimedia se almacenan de forma remota y sólo son remotamente referenciados por el \"gerente de políticas\". meta: este directorio contiene meta información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) e información sobre los tipos de trozos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los trozos de datos almacenados. El archivo de trozos contiene una lista de trozos actualmente almacenados y sus cuentas de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de rangos temporales de datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato de los medios almacenados bajo la URL actual. poli: este directorio contiene un conjunto de subdirectorios host. Cada subdirectorio de host contiene el conjunto de referencias políticas creadas por ese host. La información sobre cada referencia política se divide en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files, y ref1.state. El archivo ref1 contiene información sobre la política de referencia que no cambia con frecuencia. Esta información incluye la política de base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a trozos que pref ref1 posee. Por último, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Tenga en cuenta que otras implementaciones son posibles. Por ejemplo, un gestor de Spectrum de grado de operador podría almacenar toda su información normativa y de referencia en un sistema de bases de datos de alto rendimiento. 10 4. TRABAJOS RELACIONADOS Varios autores han abordado el problema de la gestión de contenidos en redes distribuidas. Gran parte de la labor se centra en el aspecto de la gestión de políticas. Por ejemplo en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda de los usuarios mediante un protocolo de difusión de la demanda. El rendimiento del sistema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Router Central, una base de conocimiento caché, subcachés y un juez de desalojo subcaché. La base Cache Knowledge permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenidos en el entorno en red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenidos, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de TV que se utilizan en PVRs para seleccionar automáticamente el contenido para los usuarios, por ejemplo. [6]. En el caso de que Spectrum se utilice en una configuración PVR, este tipo de sistema desempeñaría una función de nivel superior y podría beneficiarse claramente de las funcionalidades de la arquitectura Spectrum. Por último, en los proveedores comerciales de medio ambiente de CDN (por ejemplo, Cisco y Netapp) han desarrollado e implementado productos y herramientas de gestión de contenidos. A diferencia de la arquitectura Spectrum que permite que los dispositivos de borde funcionen de una manera en gran medida autónoma, las soluciones de proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. 5. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo presentamos el diseño e implementación de la arquitectura de gestión de contenidos Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que tengan tiempo y que se ocupen eficazmente del almacenamiento de contenido multimedia continuo. Por último, el diseño modular de la arquitectura Spectrum permite realizaciones independientes y distribuidas para que el sistema se pueda implementar en una variedad de aplicaciones. Hay una serie de cuestiones pendientes que requerirán una labor futura. Algunos de estos problemas incluyen: • Prevemos que Spectrum sea capaz de gestionar contenido en sistemas que van desde grandes CDNs hasta aparatos más pequeños como TiVO [8]. Para que estos sistemas más pequeños soporten Spectrum necesitarán redes y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo puede encajar en la arquitectura Spectrum. • El contenido de nombres de espectro por URL, pero no hemos definido intencionadamente el formato de las URLs de espectro, cómo se mapean al nombre real del contenido, o cómo los nombres y URLs deben ser presentados al usuario. Si bien hemos abordado anteriormente estas cuestiones en otros lugares [2], creemos que queda más trabajo por hacer y que es necesario elaborar normas consensuadas sobre la designación de nombres. • En este artículo nos hemos centrado en la gestión de contenidos para objetos multimedia continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero todavía tenemos que elaborar los detalles necesarios para apoyar esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que los contenidos multimedia se compartan fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. 6. REFERENCIAS [1] K.. Cheng e Y. Kambayashi. Gestión de Contenidos Multicaché-basada para Web Caching. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información Web, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. PRISM Architecture: Apoyando los servicios de transmisión mejorada en una red de distribución de contenido. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de vídeo digital habilitado para la red. 11o Taller de IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, y P. Shenoy. Una arquitectura de clúster de servidores multimedia de transmisión de demanda adaptativa y con conocimiento de la localización (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Recomendador de TV multi-agente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "error": [
                "Gestor de políticas",
                "gerente de políticas",
                "jefe de políticas",
                "director de políticas",
                "gerente de políticas",
                "jefe de políticas",
                "gobernador de políticas",
                "gerente de políticas",
                "gerente de políticas",
                "gerente de políticas",
                "gerente de políticas",
                "policy manager",
                "gerente de políticas",
                "gerente de políticas",
                "gerente de políticas",
                "gerente de políticas",
                "director de políticas",
                "jefe de políticas",
                "gerente de políticas",
                "gerente de políticas",
                "gobernador de políticas",
                "policy manager",
                "policy manager",
                "gerente de políticas",
                "gerente de políticas"
            ]
        },
        "network enabled dvr": {
            "translated_key": [],
            "translated_annotated_text": "Diseño e implementación de un sistema de gestión de contenido distribuido C. D. Cranor, R. Ethington, A. Sehgal†, D. Shur, C. Sreenan‡ y J.E. van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland RESUMEN La convergencia de los avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan e intercambian de forma rutinaria entre dispositivos habilitados para la red. Mantener un seguimiento de (o gestionar) dicho contenido sigue siendo un reto debido al gran volumen de datos. El almacenamiento de medios continuos en vivo (como contenidos de televisión o radio) aumenta la complejidad en el sentido de que este contenido no tiene un inicio o un final bien definidos y, por lo tanto, resulta engorroso de tratar. El almacenamiento en red permite que los contenidos que se consideran lógicamente como parte de la misma colección se distribuyan de hecho a través de una red, haciendo que la tarea de gestión de contenidos sea casi imposible de manejar sin un sistema de gestión de contenidos. En este trabajo presentamos el diseño y la implementación del sistema de gestión de contenidos Spectrum, que trata de contenido multimedia rico de manera efectiva en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto a escenarios independientes como a diversos escenarios en red. Un aspecto único de Spectrum es que requiere una (o más) políticas de retención para aplicarse a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido que ya no tiene una política de retención aplicada se elimina simplemente del sistema. Las diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así naturalmente el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo que son elementos básicos necesarios para hacer frente al almacenamiento de medios continuos en vivo, a los contenidos. No sólo describimos los detalles de la arquitectura Spectrum, sino que también damos casos de uso típicos. Categorías y Descriptores de Asunto C.2.4 [Organización de Sistemas de Computación]: Sistemas distribuidos por redes de comunicación informática; H.3.4 [Sistemas de Información]: Sistemas de almacenamiento y recuperación de información y software Términos generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar el contenido es y siempre ha sido una de las funciones principales de un ordenador. Las aplicaciones de computación inicial incluyen formateadores de texto y compiladores de programas. El contenido fue administrado inicialmente por interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que la gente desea utilizarlo han cambiado enormemente. Los nuevos tipos de contenidos, como los flujos multimedia continuos, se han convertido en algo común debido a la convergencia de los avances en las tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de vídeo codificado de calidad de TV en una sola unidad de disco. Esto ha llevado a la introducción de sistemas independientes de grabación de vídeo digital o de grabación de vídeo personal (PVR), como TiVO [8] y ReplayTV [7]. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas con la propia red actuando como un enorme repositorio de datos. La proliferación de contenidos de alta calidad gracias a estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. Nuestro trabajo se centra en el almacenamiento de contenidos multimedia ricos y, en particular, el almacenamiento de contenidos multimedia continuos en formatos preenvasados o en directo. La necesidad de gestión de contenidos en esta área es evidente cuando se tiene en cuenta lo siguiente: • El aumento de la capacidad y la disminución del costo de almacenamiento significa que incluso los modestos sistemas de escritorio hoy en día tienen la capacidad de almacenar cantidades masivas de contenido. La gestión manual de dichos contenidos (o, más correctamente, la no gestión manual de dichos contenidos) produce grandes ineficiencias en los casos en que el almacenamiento de residuos de contenidos no deseados y olvidados no es posible y en los que no se puede encontrar el contenido deseado. • Si bien es cierto para todo tipo de contenido, el almacenamiento de contenido multimedia continuo es especialmente problemático. El primer contenido continuo de los medios sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque de almacenamiento sin políticas no funcionará para todos, sino para los sistemas más pequeños. En segundo lugar, el almacenamiento de contenido en vivo como TV o radio es inherentemente problemático, ya que estas señales son corrientes continuas sin terminales. Esto significa que antes de que uno pueda siquiera pensar en manejar tal contenido hay una necesidad de abstraerlo en algo que podría ser manipulado y manejado. 4 • Cuando se trata de medios continuos almacenados, es necesario gestionar dichos contenidos tanto a un nivel de grano fino como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar sólo los aspectos más destacados de un evento deportivo en particular no debe tener que almacenar el contenido correspondiente al evento completo. Al mismo tiempo, el usuario podría querer pensar en el contenido en el agregado, por ejemplo. eliminar todo el contenido que no he visto en el último mes, excepto el contenido que fue explícitamente marcado para archivo. • Como se ha indicado anteriormente, es muy difícil tratar de hacer un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenidos. Sin embargo, cuando los dispositivos de almacenamiento reales se distribuyen a través de una red, la tarea de realizar un seguimiento del contenido es casi imposible. Este escenario es cada vez más común en los sistemas de distribución de contenidos basados en la red y es probable que también sea importante en los escenarios de creación de redes en el hogar. Parece entonces claro que se necesita un sistema de gestión de contenidos que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que se explota la capacidad en red de los dispositivos de almacenamiento. Este sistema debería permitir el almacenamiento eficiente de contenidos y el acceso a ellos a través de dispositivos de almacenamiento de redes heterogéneos, de acuerdo con las preferencias del usuario. El sistema de gestión de contenidos debe traducir las preferencias de los usuarios en políticas adecuadas de almacenamiento de bajo nivel y permitir que esas preferencias se expresen en un nivel fino de granularidad (aunque no lo exijan en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar (es decir. cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenidos distribuidos es difícil debido al número de requisitos que se imponen al sistema. Por ejemplo: • El sistema de gestión de contenidos debe funcionar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando el contenido almacenado en un sistema de archivos local, mientras que en otros, el contenido puede almacenarse en un dispositivo de almacenamiento de red separado. El gestor de contenidos podrá ser responsable de la aplicación de las políticas que utilice para hacer referencia al contenido o de la delegación de dicho papel en un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. • El sistema de gestión de contenidos debe ser flexible y ser capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe obtenerse, cuándo debe obtenerse, cuánto tiempo debe conservarse y en qué circunstancias debe desecharse. Esto significa que el sistema de gestión de contenidos debería permitir a múltiples aplicaciones hacer referencia al contenido con un rico conjunto de políticas y que todos deberían trabajar juntos sin problemas. • El sistema de gestión de contenidos debe poder controlar las referencias de contenido y utilizar esa información para colocar el contenido en la ubicación correcta de la red para un acceso eficiente a las aplicaciones. • El sistema de gestión de contenidos debe manejar la interacción entre la población implícita y explícita de contenidos en el borde de la red. • El sistema de contenidos debe ser capaz de gestionar eficientemente grandes conjuntos de contenidos, incluyendo flujos continuos. Necesita poder empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas hemos diseñado e implementado la arquitectura del sistema de gestión de contenidos Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite a múltiples aplicaciones hacer referencia al contenido utilizando políticas diferentes. Tenga en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenidos (CDN) que puede facilitar la distribución eficiente de contenidos (por ejemplo, la arquitectura PRISM CDN [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. La labor conexa se describe en la sección 4, y la sección 5 contiene nuestras conclusiones y sugerencias para la labor futura. 2. LA ARQUITECTURA DEL SISTEMA DE GESTIÓN DE CONTENIDO DISTRIBUIDO POR ESPECTRO La arquitectura del espectro consta de tres capas de gestión distintas que pueden o no distribuirse entre múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todos los contenidos de las aplicaciones de acuerdo con las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de vídeo personal (PVR), el gestor de contenidos recibe solicitudes de contenido de una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y administrar contenido en el dispositivo. gestor de políticas: implementa y hace cumplir varias políticas de almacenamiento que el gestor de contenidos utiliza para referirse al contenido. El gestor de políticas exporta una interfaz al gestor de contenidos que permite al gestor de contenidos solicitar que el contenido de una pieza sea tratado de acuerdo con una política específica. Spectrum permite que las políticas arbitrarias se realicen proporcionando un conjunto fijo de plantillas de políticas de base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (si no, Spectrum puede ampliarse fácilmente para cargar dinámicamente nuevo código de plantilla de política de base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido sólo puede existir en el sistema mientras se haga referencia a él al menos mediante una política existente. Los conflictos políticos se eliminan haciendo que el director de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin ninguna política asociada con él se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar naturalmente el intercambio de contenidos entre diferentes políticas, lo que es fundamental para el almacenamiento eficiente de objetos de gran tamaño. Tenga en cuenta que una diferencia clave entre el gestor de contenidos y el gestor de políticas es que el gestor de contenidos gestiona referencias a múltiples piezas de contenido, es decir. tiene una visión de aplicación del contenido. Por otra parte, el gestor de políticas sólo se ocupa de la política utilizada para gestionar contenidos independientes. Por ejemplo, en una aplicación PVR, la capa del gestor de contenidos sabría acerca de los diferentes grupos de contenido gestionado, como mantener-indefinidamente, guardar durante un día, y mantener si el espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada contenido tiene 5 contenido Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figura 1: Los componentes de la arquitectura Spectrum y las cuatro formas en que pueden configurarse su propia política (o políticas) se le aplican y son independientes de otros contenidos. administrador de almacenamiento: almacena el contenido de una manera eficiente al tiempo que facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento almacena contenido en trozos de subobjeto. Este enfoque tiene ventajas para la recuperación eficiente de contenidos, pero lo que es más importante, permite que las políticas se apliquen a un nivel de subobjetos que es de importancia crítica cuando se trata de objetos muy grandes como partes de medios continuos, por ejemplo. piezas seleccionadas de contenido de TV que se almacenan en un PVR. Tenga en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas utilizadas por los gestores de contenido y políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la Figura muestra el caso más simple (no distribuido) donde todas las capas se implementan en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como PVRs. El siguiente caso corresponde al caso en que existe un gestor de contenidos centralizado que controla los dispositivos de almacenamiento distribuidos, cada uno de los cuales es responsable de la aplicación del almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, funcionan de forma mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, normalmente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido basado en un calendario determinado por algún controlador centralizado. Por ejemplo, el CDN podría prepoblar dispositivos de borde con contenido que se espera que sea muy popular o distribuir archivos grandes a las sucursales durante horas fuera del pico en un entorno empresarial limitado por el ancho de banda. Permitir que un único gestor de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y el caso más distribuido. La necesidad de este tipo de separación puede ocurrir por razones de escalabilidad o cuando diferentes dispositivos o aparatos de almacenamiento especializados están obligados a ser controlados por un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas que controla un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo de grano fino por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de contenidos La capa de gestor de contenidos es la interfaz principal a través de la cual aplicaciones específicas utilizan la arquitectura Spectrum. Como tal, la capa de gestor de contenidos proporciona una API para que la aplicación manipule todos los aspectos de la arquitectura Spectrum en diferentes niveles de granularidad. La API del gestor de contenidos tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite añadir dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo control del gestor de contenidos y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos - este es el único lugar en la arquitectura donde se requiere que la aplicación sea consciente de esta distinción. Una vez que un dispositivo se mapea en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Tiendas: Las tiendas son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (p. ej. espacio en disco) a él. Las tiendas sólo se pueden crear en dispositivos físicos que se mapean en el sistema. Grupos de políticas: Los grupos de políticas son los medios por los cuales una aplicación especifica, instancia y modifica las políticas que se aplican al contenido Spectrum. El uso típico de este conjunto de funciones es seleccionar uno de un pequeño conjunto de políticas de base y parametrizar esta instancia específica de la política. Se crean grupos de políticas dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que requieren una especificación de tiempo sofisticada permiten el almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría desalojar el contenido del sistema en un determinado momento absoluto o relativo. Una política temporal ligeramente más implicada, habilitada por la arquitectura Spectrum, podría permitir que el contenido se almacene en una ventana móvil de varias horas (por ejemplo, el número de horas N más reciente se mantiene en el sistema). Las políticas basadas en el tiempo son de particular utilidad cuando se trata de contenidos continuos como una transmisión en vivo. 6 Contenido: En el mejor nivel de contenido de granularidad se puede añadir o eliminar del sistema. El contenido se especifica en el sistema mediante un localizador de recursos uniforme (URL) que indica de forma concisa la ubicación del contenido, así como el protocolo que se utilizará para recuperarlo. Opcionalmente una especificación de tiempo se puede asociar con el contenido. Esto permite obtener contenido en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Una vez más, esto es particularmente útil para tratar con el almacenamiento y la gestión de contenido en vivo. 2.2 Gestor de políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones API. En primer lugar, hay funciones que funcionan en áreas de almacenamiento gestionado y referencias basadas en políticas (prefs) al contenido almacenado allí. En segundo lugar, hay conjuntos de funciones utilizadas para aplicar cada política de gestión. La primera clase de funciones es utilizada por la capa del gestor de contenidos para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar: Estas operaciones son utilizadas por el gestor de contenidos para controlar su acceso al almacenamiento. Los gestores de políticas crean operación se utiliza para establecer contacto con una tienda por primera vez. Una vez hecho esto, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Tenga en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información sólo debe ser transmitida al gestor de políticas una vez a la hora de crear. Para operaciones abiertas, el gestor de políticas utilizará la información en caché para ponerse en contacto con la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el gestor de contenidos consulte al gestor de políticas sobre qué contenido está actualmente presente para una URL dada. Para los intervalos de tiempo continuos de los medios actuales se devolverán. recurso: Las rutinas de recursos se utilizan para consultar al gestor de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su conjunto y otra que se aplica a una determinada referencia política. El recurso API es extensible, actualmente soportamos consultas sobre el uso del disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer es utilizada por el gestor de contenido para referenciar el contenido en la tienda. Si el contenido no está presente, esta llamada resultará en que el contenido sea obtenido (o programado para ser obtenido si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL para almacenarla debajo, la URL para obtener datos de si no está presente, la política para almacenar el contenido debajo y los argumentos utilizados para parametrizar la política. El resultado de una operación pref establecer con éxito es una cadena de identificación de referencia política. Este ID se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones de gestor de políticas se utiliza para implementar todas las políticas apoyadas por Spectrum. Prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitivo puede ser parametrizada para funcionar diariamente, semanal o mensualmente. Tenga en cuenta que el gestor de políticas sólo se ocupa de la ejecución de una política específica. Las razones de mayor nivel para elegir una determinada política son manejadas por el gestor de contenido y aplicación. Una política de base se implementa usando seis funciones: establecer: llamada cuando se establece un pref con las URLs requeridas y los parámetros de las políticas de base. El establecimiento de rutina hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar medidas (por ejemplo. iniciar una descarga) y programa una devolución de llamada para ese tiempo. También puede registrarse para recibir callbacks si se recibe nuevo contenido para una URL dada. actualización: llamada a cambiar los parámetros de un pref, o a descartar la referencia política. newclip: llamado cuando se recibe un trozo de contenido nuevo para una URL de interés. La política de base normalmente organiza que newclip sea llamado para una URL dada cuando se establece la pref. Cuando se llama newclip, la política de base comprueba sus parámetros para determinar si desea añadir una referencia al clip que acaba de recibir. callback: llamado cuando el pref programa un callback basado en temporizador. Este es un mecanismo útil de despertar para prefs que necesitan estar inactivos durante un largo período de tiempo (por ejemplo. entre programas). boot/shutdown: llamado cuando el sistema de gestión de contenido está arrancando o apagando. La operación de arranque se utiliza normalmente para programar las llamadas iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para apagar con gracia flujos de E/S y guardar estado. 2.3 Gestor de almacenamiento El papel del Gestor de almacenamiento Spectrums es controlar todas las operaciones de E/S asociadas a una tienda dada. El gestor de almacenamiento Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo: un aparato de almacenamiento). Para medios continuos, en el nivel de administrador de almacenamiento el contenido se almacena como una colección de trozos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un trozo podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son de entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión tanto las rutinas de entrada como de salida toman intervalos de tiempo que programan cuando la operación de E/S debe ocurrir, y ambas rutinas devuelven una manija de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el gestor de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar tiendas. También es compatible con las operaciones para consultar los usos de recursos y las opciones apoyadas por la tienda. Por último, el administrador de almacenamiento también tiene una rutina de descartes que puede ser utilizada por el administrador de políticas para informar a la tienda para eliminar el contenido de la tienda. 3. CASOS DE APLICACIÓN Y USO En esta sección describimos nuestra implementación de Spectrum y cómo se puede utilizar. 3.1 Implementación Hemos implementado Spectrums tres capas en C como parte de una biblioteca que puede vincularse con aplicaciones basadas en Spectrum. Cada capa realiza un seguimiento de su estado a través de un conjunto de archivos de datos locales que persisten a través de los reinicios, permitiendo así a Spectrum manejar sin problemas los ciclos de potencia. Para capas que residen en sistemas remotos (p. ej. una tienda remota) sólo la meta-información necesaria para contactar con el remoto 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Interfaz gráfica de usuario Red activada DVR Program Information Content DVR Application Figura 2: El espectro en un nodo DVR habilitado de red se almacena localmente. Nuestra aplicación de prueba utiliza una política local y un gestor de almacenamiento para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficazmente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas Spectrums API admiten modos síncronos y asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada API lleva un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de llamada y el estado de retorno. Para llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamadas. Para usar una función Spectrum API, el llamante elige primero el modo sincronización o asíncrona y asigna una estructura reqinfo. Para las llamadas de sincronización, el reqinfo se puede asignar en la pila, de lo contrario se asigna con malloc. Para las llamadas async, se debe proporcionar una función de devolución de llamada cuando se asigna el reqinfo. A continuación, el llamante invoca la función Spectrum API deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas async exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada async se completa o se produce un tiempo de espera, la función de devolución de llamada async se llama con la información adecuada necesaria para completar el procesamiento. El diseño modular/en capas de la arquitectura Spectrum simplifica el objetivo de distribución de la funcionalidad. Además, la comunicación entre funciones es típicamente de naturaleza maestro-esclavo(s). Esto significa que varios enfoques de la operación distribuida son posibles que satisfagan los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un simple diseño modular. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y seleccionar el método de codificación que debe utilizarse con los datos a transferir. Los protocolos de transporte pueden variar protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP plano para la mayor parte de nuestro transporte. Las llamadas de funciones a través de las diferentes API de Spectrum se pueden codificar utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos usando la biblioteca XML de eXpat [4] para codificar nuestras llamadas. Mientras estamos actualmente transfiriendo nuestros mensajes codificados XML usando una conexión TCP simple, en un entorno real esto puede ser reemplazado fácilmente por una implementación basada en una capa segura de sockets (SSL) para mejorar la seguridad mediante la adición de SSL como protocolo de transporte. Un aspecto importante del Spectrum es que puede gestionar contenidos basados en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la sección 2.2, prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben entender las políticas a nivel de base y cómo pueden ser parametrizadas. Para abordar este tema, tratamos cada política a nivel de base como si fuera un programa separado. Cada política a nivel de base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada usando una función tipo getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de bytes no es un problema en una cadena. Dado que esta parte de Spectrum no está en la ruta de datos críticos, este tipo de formato no es un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos del Espectro En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos del Espectro en nuestro entorno. El foco de nuestro trabajo anterior ha sido la distribución de contenido para el contenido multimedia en streaming [2] y la grabación digital de vídeo habilitada en red [3]. El sistema Spectrum es aplicable a ambos escenarios de la manera siguiente. La Figura 2 muestra la arquitectura DVR (NED) activada por red. En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación DVR obtiene listados de programas de alguna fuente de red, se ocupa de la presentación del usuario a través de una interfaz gráfica de usuario (GUI), e interfaz con el sistema Spectrum a través de las API de la capa de gestión de contenidos. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento a 8 Content Manager Centralized Content Management station Información de contenidoGuía de interfaz de usuario Gestor de almacenamiento Gestor de almacenamiento Fetcher Edge Portal Política de servidor Gestor de almacenamiento Gestor de almacenamiento Gestor de almacenamiento Gestor de contenido Fetcher Edge Portal Server Distributed Content To La obtención del contenido (a través de la red o localmente) y el posterior almacenamiento en el sistema local es entonces manejado por los gerentes de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenidos en streaming (p. ej. PRISM [2] se muestra en la Figura 3. En este entorno se está distribuyendo contenido multimedia en streaming (tanto en directo, enlatado en vivo como bajo demanda) a portales de borde desde donde se están sirviendo los puntos finales de streaming. En nuestro entorno la distribución y almacenamiento de contenidos se realiza desde una estación centralizada de gestión de contenidos que controla varios de los portales de borde. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenidos sin necesidad de comunicación continua entre el gestor de contenidos y los dispositivos de borde, es decir. una vez que se han dado instrucciones a los dispositivos de borde que pueden funcionar de forma independiente hasta que se van a hacer cambios. 3.3 Spectrum Operational Ejemplo Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación PVR basada en Spectrum programada para almacenar un día de contenido en streaming en una ventana móvil. Para configurar la ventana móvil, la aplicación utilizaría la API del gestor de contenidos para crear un grupo de políticas y una referencia política al contenido deseado. El establecimiento de la referencia de la política de ventanilla móvil de un día haría que el pesebre de la política pidiera al administrador de almacenamiento que comenzara a recibir la corriente. A medida que llega cada trozo de datos de streaming, el gestor de políticas ejecuta la función newclip de referencias políticas. La función newclip añade una referencia a cada trozo que llega, y programa una devolución de llamada un día después. En ese momento, la política dejará de hacer referencia al contenido, que ya tiene un día de antigüedad, y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considere el caso en el que el usuario decide guardar parte del contenido (por ejemplo. un programa específico) en la ventana de rodadura durante una semana adicional. Para ello, la aplicación solicita que el gestor de contenidos agregue una nueva referencia política adicional a la parte del contenido a conservar. Por lo tanto, el contenido conservado tiene dos referencias: una desde la ventana móvil y otra desde la solicitud de preservar el contenido durante una semana adicional. Después de un día la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. base de datos url1 url2 (archivos multimedia...) (archivos multimedia...) meta store (información general...) url1 screens prefs ranges media screens, etc.url2 poly host ref1 ref1.files ref1.state Figura 4: Diseño de datos de Spectrum policy store preservado por la segunda referencia. Después de la semana adicional ha pasado, la función callback para la segunda referencia será llamada. Esta función descartará la referencia restante al contenido y como no hay referencias restantes, el contenido será liberado. Con el fin de funcionar en escenarios como los descritos anteriormente, Spectrums gestor de políticas debe gestionar y mantener todas las referencias a varios trozos de medios. Estas referencias son persistentes y por lo tanto deben ser capaces de sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestra implementación de Spectrum Policy Manager logra esto usando la estructura de archivos y directorios que se muestra en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el administrador de almacenamiento para almacenar cada URL activa trozos de medios. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Tenga en cuenta que este directorio se utiliza sólo si el administrador de almacenamiento es local. Si el gestor de políticas está utilizando un gestor de almacenamiento externo (por ejemplo: un aparato de almacenamiento), a continuación, los archivos multimedia se almacenan de forma remota y sólo son remotamente referenciados por el gestor de políticas. meta: este directorio contiene meta información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) e información sobre los tipos de trozos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los trozos de datos almacenados. El archivo de trozos contiene una lista de trozos actualmente almacenados y sus cuentas de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de rangos temporales de datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato de los medios almacenados bajo la URL actual. poli: este directorio contiene un conjunto de subdirectorios host. Cada subdirectorio de host contiene el conjunto de referencias políticas creadas por ese host. La información sobre cada referencia política se divide en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files, y ref1.state. El archivo ref1 contiene información sobre la política de referencia que no cambia con frecuencia. Esta información incluye la política de base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a trozos que pref ref1 posee. Por último, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Tenga en cuenta que otras implementaciones son posibles. Por ejemplo, un gestor de Spectrum de grado de operador podría almacenar toda su información normativa y de referencia en un sistema de bases de datos de alto rendimiento. 10 4. TRABAJOS RELACIONADOS Varios autores han abordado el problema de la gestión de contenidos en redes distribuidas. Gran parte de la labor se centra en el aspecto de la gestión de políticas. Por ejemplo en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda de los usuarios mediante un protocolo de difusión de la demanda. El rendimiento del sistema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Router Central, una base de conocimiento caché, subcachés y un juez de desalojo subcaché. La base Cache Knowledge permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenidos en el entorno en red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenidos, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de TV que se utilizan en PVRs para seleccionar automáticamente el contenido para los usuarios, por ejemplo. [6]. En el caso de que Spectrum se utilice en una configuración PVR, este tipo de sistema desempeñaría una función de nivel superior y podría beneficiarse claramente de las funcionalidades de la arquitectura Spectrum. Por último, en los proveedores comerciales de medio ambiente de CDN (por ejemplo, Cisco y Netapp) han desarrollado e implementado productos y herramientas de gestión de contenidos. A diferencia de la arquitectura Spectrum que permite que los dispositivos de borde funcionen de una manera en gran medida autónoma, las soluciones de proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. 5. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo presentamos el diseño e implementación de la arquitectura de gestión de contenidos Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que tengan tiempo y que se ocupen eficazmente del almacenamiento de contenido multimedia continuo. Por último, el diseño modular de la arquitectura Spectrum permite realizaciones independientes y distribuidas para que el sistema se pueda implementar en una variedad de aplicaciones. Hay una serie de cuestiones pendientes que requerirán una labor futura. Algunos de estos problemas incluyen: • Prevemos que Spectrum sea capaz de gestionar contenido en sistemas que van desde grandes CDNs hasta aparatos más pequeños como TiVO [8]. Para que estos sistemas más pequeños soporten Spectrum necesitarán redes y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo puede encajar en la arquitectura Spectrum. • El contenido de nombres de espectro por URL, pero no hemos definido intencionadamente el formato de las URLs de espectro, cómo se mapean al nombre real del contenido, o cómo los nombres y URLs deben ser presentados al usuario. Si bien hemos abordado anteriormente estas cuestiones en otros lugares [2], creemos que queda más trabajo por hacer y que es necesario elaborar normas consensuadas sobre la designación de nombres. • En este artículo nos hemos centrado en la gestión de contenidos para objetos multimedia continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero todavía tenemos que elaborar los detalles necesarios para apoyar esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que los contenidos multimedia se compartan fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. 6. REFERENCIAS [1] K.. Cheng e Y. Kambayashi. Gestión de Contenidos Multicaché-basada para Web Caching. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información Web, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. PRISM Architecture: Apoyando los servicios de transmisión mejorada en una red de distribución de contenido. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de vídeo digital habilitado para la red. 11o Taller de IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, y P. Shenoy. Una arquitectura de clúster de servidores multimedia de transmisión de demanda adaptativa y con conocimiento de la localización (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Recomendador de TV multi-agente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "error": []
        },
        "high-performance database system": {
            "translated_key": "sistema de bases de datos de alto rendimiento",
            "translated_annotated_text": "Diseño e implementación de un sistema de gestión de contenido distribuido C. D. Cranor, R. Ethington, A. Sehgal†, D. Shur, C. Sreenan‡ y J.E. van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland RESUMEN La convergencia de los avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan e intercambian de forma rutinaria entre dispositivos habilitados para la red. Mantener un seguimiento de (o gestionar) dicho contenido sigue siendo un reto debido al gran volumen de datos. El almacenamiento de medios continuos en vivo (como contenidos de televisión o radio) aumenta la complejidad en el sentido de que este contenido no tiene un inicio o un final bien definidos y, por lo tanto, resulta engorroso de tratar. El almacenamiento en red permite que los contenidos que se consideran lógicamente como parte de la misma colección se distribuyan de hecho a través de una red, haciendo que la tarea de gestión de contenidos sea casi imposible de manejar sin un sistema de gestión de contenidos. En este trabajo presentamos el diseño y la implementación del sistema de gestión de contenidos Spectrum, que trata de contenido multimedia rico de manera efectiva en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto a escenarios independientes como a diversos escenarios en red. Un aspecto único de Spectrum es que requiere una (o más) políticas de retención para aplicarse a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido que ya no tiene una política de retención aplicada se elimina simplemente del sistema. Las diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así naturalmente el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo que son elementos básicos necesarios para hacer frente al almacenamiento de medios continuos en vivo, a los contenidos. No sólo describimos los detalles de la arquitectura Spectrum, sino que también damos casos de uso típicos. Categorías y Descriptores de Asunto C.2.4 [Organización de Sistemas de Computación]: Sistemas distribuidos por redes de comunicación informática; H.3.4 [Sistemas de Información]: Sistemas de almacenamiento y recuperación de información y software Términos generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar el contenido es y siempre ha sido una de las funciones principales de un ordenador. Las aplicaciones de computación inicial incluyen formateadores de texto y compiladores de programas. El contenido fue administrado inicialmente por interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que la gente desea utilizarlo han cambiado enormemente. Los nuevos tipos de contenidos, como los flujos multimedia continuos, se han convertido en algo común debido a la convergencia de los avances en las tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de vídeo codificado de calidad de TV en una sola unidad de disco. Esto ha llevado a la introducción de sistemas independientes de grabación de vídeo digital o de grabación de vídeo personal (PVR), como TiVO [8] y ReplayTV [7]. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas con la propia red actuando como un enorme repositorio de datos. La proliferación de contenidos de alta calidad gracias a estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. Nuestro trabajo se centra en el almacenamiento de contenidos multimedia ricos y, en particular, el almacenamiento de contenidos multimedia continuos en formatos preenvasados o en directo. La necesidad de gestión de contenidos en esta área es evidente cuando se tiene en cuenta lo siguiente: • El aumento de la capacidad y la disminución del costo de almacenamiento significa que incluso los modestos sistemas de escritorio hoy en día tienen la capacidad de almacenar cantidades masivas de contenido. La gestión manual de dichos contenidos (o, más correctamente, la no gestión manual de dichos contenidos) produce grandes ineficiencias en los casos en que el almacenamiento de residuos de contenidos no deseados y olvidados no es posible y en los que no se puede encontrar el contenido deseado. • Si bien es cierto para todo tipo de contenido, el almacenamiento de contenido multimedia continuo es especialmente problemático. El primer contenido continuo de los medios sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque de almacenamiento sin políticas no funcionará para todos, sino para los sistemas más pequeños. En segundo lugar, el almacenamiento de contenido en vivo como TV o radio es inherentemente problemático, ya que estas señales son corrientes continuas sin terminales. Esto significa que antes de que uno pueda siquiera pensar en manejar tal contenido hay una necesidad de abstraerlo en algo que podría ser manipulado y manejado. 4 • Cuando se trata de medios continuos almacenados, es necesario gestionar dichos contenidos tanto a un nivel de grano fino como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar sólo los aspectos más destacados de un evento deportivo en particular no debe tener que almacenar el contenido correspondiente al evento completo. Al mismo tiempo, el usuario podría querer pensar en el contenido en el agregado, por ejemplo. eliminar todo el contenido que no he visto en el último mes, excepto el contenido que fue explícitamente marcado para archivo. • Como se ha indicado anteriormente, es muy difícil tratar de hacer un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenidos. Sin embargo, cuando los dispositivos de almacenamiento reales se distribuyen a través de una red, la tarea de realizar un seguimiento del contenido es casi imposible. Este escenario es cada vez más común en los sistemas de distribución de contenidos basados en la red y es probable que también sea importante en los escenarios de creación de redes en el hogar. Parece entonces claro que se necesita un sistema de gestión de contenidos que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que se explota la capacidad en red de los dispositivos de almacenamiento. Este sistema debería permitir el almacenamiento eficiente de contenidos y el acceso a ellos a través de dispositivos de almacenamiento de redes heterogéneos, de acuerdo con las preferencias del usuario. El sistema de gestión de contenidos debe traducir las preferencias de los usuarios en políticas adecuadas de almacenamiento de bajo nivel y permitir que esas preferencias se expresen en un nivel fino de granularidad (aunque no lo exijan en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar (es decir. cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenidos distribuidos es difícil debido al número de requisitos que se imponen al sistema. Por ejemplo: • El sistema de gestión de contenidos debe funcionar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando el contenido almacenado en un sistema de archivos local, mientras que en otros, el contenido puede almacenarse en un dispositivo de almacenamiento de red separado. El gestor de contenidos podrá ser responsable de la aplicación de las políticas que utilice para hacer referencia al contenido o de la delegación de dicho papel en un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. • El sistema de gestión de contenidos debe ser flexible y ser capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe obtenerse, cuándo debe obtenerse, cuánto tiempo debe conservarse y en qué circunstancias debe desecharse. Esto significa que el sistema de gestión de contenidos debería permitir a múltiples aplicaciones hacer referencia al contenido con un rico conjunto de políticas y que todos deberían trabajar juntos sin problemas. • El sistema de gestión de contenidos debe poder controlar las referencias de contenido y utilizar esa información para colocar el contenido en la ubicación correcta de la red para un acceso eficiente a las aplicaciones. • El sistema de gestión de contenidos debe manejar la interacción entre la población implícita y explícita de contenidos en el borde de la red. • El sistema de contenidos debe ser capaz de gestionar eficientemente grandes conjuntos de contenidos, incluyendo flujos continuos. Necesita poder empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas hemos diseñado e implementado la arquitectura del sistema de gestión de contenidos Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite a múltiples aplicaciones hacer referencia al contenido utilizando políticas diferentes. Tenga en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenidos (CDN) que puede facilitar la distribución eficiente de contenidos (por ejemplo, la arquitectura PRISM CDN [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. La labor conexa se describe en la sección 4, y la sección 5 contiene nuestras conclusiones y sugerencias para la labor futura. 2. LA ARQUITECTURA DEL SISTEMA DE GESTIÓN DE CONTENIDO DISTRIBUIDO POR ESPECTRO La arquitectura del espectro consta de tres capas de gestión distintas que pueden o no distribuirse entre múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todos los contenidos de las aplicaciones de acuerdo con las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de vídeo personal (PVR), el gestor de contenidos recibe solicitudes de contenido de una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y administrar contenido en el dispositivo. gestor de políticas: implementa y hace cumplir varias políticas de almacenamiento que el gestor de contenidos utiliza para referirse al contenido. El gestor de políticas exporta una interfaz al gestor de contenidos que permite al gestor de contenidos solicitar que el contenido de una pieza sea tratado de acuerdo con una política específica. Spectrum permite que las políticas arbitrarias se realicen proporcionando un conjunto fijo de plantillas de políticas de base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (si no, Spectrum puede ampliarse fácilmente para cargar dinámicamente nuevo código de plantilla de política de base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido sólo puede existir en el sistema mientras se haga referencia a él al menos mediante una política existente. Los conflictos políticos se eliminan haciendo que el director de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin ninguna política asociada con él se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar naturalmente el intercambio de contenidos entre diferentes políticas, lo que es fundamental para el almacenamiento eficiente de objetos de gran tamaño. Tenga en cuenta que una diferencia clave entre el gestor de contenidos y el gestor de políticas es que el gestor de contenidos gestiona referencias a múltiples piezas de contenido, es decir. tiene una visión de aplicación del contenido. Por otra parte, el gestor de políticas sólo se ocupa de la política utilizada para gestionar contenidos independientes. Por ejemplo, en una aplicación PVR, la capa del gestor de contenidos sabría acerca de los diferentes grupos de contenido gestionado, como mantener-indefinidamente, guardar durante un día, y mantener si el espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada contenido tiene 5 contenido Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figura 1: Los componentes de la arquitectura Spectrum y las cuatro formas en que pueden configurarse su propia política (o políticas) se le aplican y son independientes de otros contenidos. administrador de almacenamiento: almacena el contenido de una manera eficiente al tiempo que facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento almacena contenido en trozos de subobjeto. Este enfoque tiene ventajas para la recuperación eficiente de contenidos, pero lo que es más importante, permite que las políticas se apliquen a un nivel de subobjetos que es de importancia crítica cuando se trata de objetos muy grandes como partes de medios continuos, por ejemplo. piezas seleccionadas de contenido de TV que se almacenan en un PVR. Tenga en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas utilizadas por los gestores de contenido y políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la Figura muestra el caso más simple (no distribuido) donde todas las capas se implementan en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como PVRs. El siguiente caso corresponde al caso en que existe un gestor de contenidos centralizado que controla los dispositivos de almacenamiento distribuidos, cada uno de los cuales es responsable de la aplicación del almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, funcionan de forma mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, normalmente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido basado en un calendario determinado por algún controlador centralizado. Por ejemplo, el CDN podría prepoblar dispositivos de borde con contenido que se espera que sea muy popular o distribuir archivos grandes a las sucursales durante horas fuera del pico en un entorno empresarial limitado por el ancho de banda. Permitir que un único gestor de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y el caso más distribuido. La necesidad de este tipo de separación puede ocurrir por razones de escalabilidad o cuando diferentes dispositivos o aparatos de almacenamiento especializados están obligados a ser controlados por un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas que controla un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo de grano fino por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de contenidos La capa de gestor de contenidos es la interfaz principal a través de la cual aplicaciones específicas utilizan la arquitectura Spectrum. Como tal, la capa de gestor de contenidos proporciona una API para que la aplicación manipule todos los aspectos de la arquitectura Spectrum en diferentes niveles de granularidad. La API del gestor de contenidos tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite añadir dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo control del gestor de contenidos y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos - este es el único lugar en la arquitectura donde se requiere que la aplicación sea consciente de esta distinción. Una vez que un dispositivo se mapea en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Tiendas: Las tiendas son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (p. ej. espacio en disco) a él. Las tiendas sólo se pueden crear en dispositivos físicos que se mapean en el sistema. Grupos de políticas: Los grupos de políticas son los medios por los cuales una aplicación especifica, instancia y modifica las políticas que se aplican al contenido Spectrum. El uso típico de este conjunto de funciones es seleccionar uno de un pequeño conjunto de políticas de base y parametrizar esta instancia específica de la política. Se crean grupos de políticas dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que requieren una especificación de tiempo sofisticada permiten el almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría desalojar el contenido del sistema en un determinado momento absoluto o relativo. Una política temporal ligeramente más implicada, habilitada por la arquitectura Spectrum, podría permitir que el contenido se almacene en una ventana móvil de varias horas (por ejemplo, el número de horas N más reciente se mantiene en el sistema). Las políticas basadas en el tiempo son de particular utilidad cuando se trata de contenidos continuos como una transmisión en vivo. 6 Contenido: En el mejor nivel de contenido de granularidad se puede añadir o eliminar del sistema. El contenido se especifica en el sistema mediante un localizador de recursos uniforme (URL) que indica de forma concisa la ubicación del contenido, así como el protocolo que se utilizará para recuperarlo. Opcionalmente una especificación de tiempo se puede asociar con el contenido. Esto permite obtener contenido en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Una vez más, esto es particularmente útil para tratar con el almacenamiento y la gestión de contenido en vivo. 2.2 Gestor de políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones API. En primer lugar, hay funciones que funcionan en áreas de almacenamiento gestionado y referencias basadas en políticas (prefs) al contenido almacenado allí. En segundo lugar, hay conjuntos de funciones utilizadas para aplicar cada política de gestión. La primera clase de funciones es utilizada por la capa del gestor de contenidos para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar: Estas operaciones son utilizadas por el gestor de contenidos para controlar su acceso al almacenamiento. Los gestores de políticas crean operación se utiliza para establecer contacto con una tienda por primera vez. Una vez hecho esto, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Tenga en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información sólo debe ser transmitida al gestor de políticas una vez a la hora de crear. Para operaciones abiertas, el gestor de políticas utilizará la información en caché para ponerse en contacto con la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el gestor de contenidos consulte al gestor de políticas sobre qué contenido está actualmente presente para una URL dada. Para los intervalos de tiempo continuos de los medios actuales se devolverán. recurso: Las rutinas de recursos se utilizan para consultar al gestor de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su conjunto y otra que se aplica a una determinada referencia política. El recurso API es extensible, actualmente soportamos consultas sobre el uso del disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer es utilizada por el gestor de contenido para referenciar el contenido en la tienda. Si el contenido no está presente, esta llamada resultará en que el contenido sea obtenido (o programado para ser obtenido si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL para almacenarla debajo, la URL para obtener datos de si no está presente, la política para almacenar el contenido debajo y los argumentos utilizados para parametrizar la política. El resultado de una operación pref establecer con éxito es una cadena de identificación de referencia política. Este ID se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones de gestor de políticas se utiliza para implementar todas las políticas apoyadas por Spectrum. Prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitivo puede ser parametrizada para funcionar diariamente, semanal o mensualmente. Tenga en cuenta que el gestor de políticas sólo se ocupa de la ejecución de una política específica. Las razones de mayor nivel para elegir una determinada política son manejadas por el gestor de contenido y aplicación. Una política de base se implementa usando seis funciones: establecer: llamada cuando se establece un pref con las URLs requeridas y los parámetros de las políticas de base. El establecimiento de rutina hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar medidas (por ejemplo. iniciar una descarga) y programa una devolución de llamada para ese tiempo. También puede registrarse para recibir callbacks si se recibe nuevo contenido para una URL dada. actualización: llamada a cambiar los parámetros de un pref, o a descartar la referencia política. newclip: llamado cuando se recibe un trozo de contenido nuevo para una URL de interés. La política de base normalmente organiza que newclip sea llamado para una URL dada cuando se establece la pref. Cuando se llama newclip, la política de base comprueba sus parámetros para determinar si desea añadir una referencia al clip que acaba de recibir. callback: llamado cuando el pref programa un callback basado en temporizador. Este es un mecanismo útil de despertar para prefs que necesitan estar inactivos durante un largo período de tiempo (por ejemplo. entre programas). boot/shutdown: llamado cuando el sistema de gestión de contenido está arrancando o apagando. La operación de arranque se utiliza normalmente para programar las llamadas iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para apagar con gracia flujos de E/S y guardar estado. 2.3 Gestor de almacenamiento El papel del Gestor de almacenamiento Spectrums es controlar todas las operaciones de E/S asociadas a una tienda dada. El gestor de almacenamiento Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo: un aparato de almacenamiento). Para medios continuos, en el nivel de administrador de almacenamiento el contenido se almacena como una colección de trozos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un trozo podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son de entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión tanto las rutinas de entrada como de salida toman intervalos de tiempo que programan cuando la operación de E/S debe ocurrir, y ambas rutinas devuelven una manija de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el gestor de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar tiendas. También es compatible con las operaciones para consultar los usos de recursos y las opciones apoyadas por la tienda. Por último, el administrador de almacenamiento también tiene una rutina de descartes que puede ser utilizada por el administrador de políticas para informar a la tienda para eliminar el contenido de la tienda. 3. CASOS DE APLICACIÓN Y USO En esta sección describimos nuestra implementación de Spectrum y cómo se puede utilizar. 3.1 Implementación Hemos implementado Spectrums tres capas en C como parte de una biblioteca que puede vincularse con aplicaciones basadas en Spectrum. Cada capa realiza un seguimiento de su estado a través de un conjunto de archivos de datos locales que persisten a través de los reinicios, permitiendo así a Spectrum manejar sin problemas los ciclos de potencia. Para capas que residen en sistemas remotos (p. ej. una tienda remota) sólo la meta-información necesaria para contactar con el remoto 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Interfaz gráfica de usuario Red activada DVR Program Information Content DVR Application Figura 2: El espectro en un nodo DVR habilitado de red se almacena localmente. Nuestra aplicación de prueba utiliza una política local y un gestor de almacenamiento para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficazmente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas Spectrums API admiten modos síncronos y asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada API lleva un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de llamada y el estado de retorno. Para llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamadas. Para usar una función Spectrum API, el llamante elige primero el modo sincronización o asíncrona y asigna una estructura reqinfo. Para las llamadas de sincronización, el reqinfo se puede asignar en la pila, de lo contrario se asigna con malloc. Para las llamadas async, se debe proporcionar una función de devolución de llamada cuando se asigna el reqinfo. A continuación, el llamante invoca la función Spectrum API deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas async exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada async se completa o se produce un tiempo de espera, la función de devolución de llamada async se llama con la información adecuada necesaria para completar el procesamiento. El diseño modular/en capas de la arquitectura Spectrum simplifica el objetivo de distribución de la funcionalidad. Además, la comunicación entre funciones es típicamente de naturaleza maestro-esclavo(s). Esto significa que varios enfoques de la operación distribuida son posibles que satisfagan los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un simple diseño modular. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y seleccionar el método de codificación que debe utilizarse con los datos a transferir. Los protocolos de transporte pueden variar protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP plano para la mayor parte de nuestro transporte. Las llamadas de funciones a través de las diferentes API de Spectrum se pueden codificar utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos usando la biblioteca XML de eXpat [4] para codificar nuestras llamadas. Mientras estamos actualmente transfiriendo nuestros mensajes codificados XML usando una conexión TCP simple, en un entorno real esto puede ser reemplazado fácilmente por una implementación basada en una capa segura de sockets (SSL) para mejorar la seguridad mediante la adición de SSL como protocolo de transporte. Un aspecto importante del Spectrum es que puede gestionar contenidos basados en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la sección 2.2, prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben entender las políticas a nivel de base y cómo pueden ser parametrizadas. Para abordar este tema, tratamos cada política a nivel de base como si fuera un programa separado. Cada política a nivel de base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada usando una función tipo getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de bytes no es un problema en una cadena. Dado que esta parte de Spectrum no está en la ruta de datos críticos, este tipo de formato no es un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos del Espectro En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos del Espectro en nuestro entorno. El foco de nuestro trabajo anterior ha sido la distribución de contenido para el contenido multimedia en streaming [2] y la grabación digital de vídeo habilitada en red [3]. El sistema Spectrum es aplicable a ambos escenarios de la manera siguiente. La Figura 2 muestra la arquitectura DVR (NED) activada por red. En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación DVR obtiene listados de programas de alguna fuente de red, se ocupa de la presentación del usuario a través de una interfaz gráfica de usuario (GUI), e interfaz con el sistema Spectrum a través de las API de la capa de gestión de contenidos. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento a 8 Content Manager Centralized Content Management station Información de contenidoGuía de interfaz de usuario Gestor de almacenamiento Gestor de almacenamiento Fetcher Edge Portal Política de servidor Gestor de almacenamiento Gestor de almacenamiento Gestor de almacenamiento Gestor de contenido Fetcher Edge Portal Server Distributed Content To La obtención del contenido (a través de la red o localmente) y el posterior almacenamiento en el sistema local es entonces manejado por los gerentes de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenidos en streaming (p. ej. PRISM [2] se muestra en la Figura 3. En este entorno se está distribuyendo contenido multimedia en streaming (tanto en directo, enlatado en vivo como bajo demanda) a portales de borde desde donde se están sirviendo los puntos finales de streaming. En nuestro entorno la distribución y almacenamiento de contenidos se realiza desde una estación centralizada de gestión de contenidos que controla varios de los portales de borde. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenidos sin necesidad de comunicación continua entre el gestor de contenidos y los dispositivos de borde, es decir. una vez que se han dado instrucciones a los dispositivos de borde que pueden funcionar de forma independiente hasta que se van a hacer cambios. 3.3 Spectrum Operational Ejemplo Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación PVR basada en Spectrum programada para almacenar un día de contenido en streaming en una ventana móvil. Para configurar la ventana móvil, la aplicación utilizaría la API del gestor de contenidos para crear un grupo de políticas y una referencia política al contenido deseado. El establecimiento de la referencia de la política de ventanilla móvil de un día haría que el pesebre de la política pidiera al administrador de almacenamiento que comenzara a recibir la corriente. A medida que llega cada trozo de datos de streaming, el gestor de políticas ejecuta la función newclip de referencias políticas. La función newclip añade una referencia a cada trozo que llega, y programa una devolución de llamada un día después. En ese momento, la política dejará de hacer referencia al contenido, que ya tiene un día de antigüedad, y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considere el caso en el que el usuario decide guardar parte del contenido (por ejemplo. un programa específico) en la ventana de rodadura durante una semana adicional. Para ello, la aplicación solicita que el gestor de contenidos agregue una nueva referencia política adicional a la parte del contenido a conservar. Por lo tanto, el contenido conservado tiene dos referencias: una desde la ventana móvil y otra desde la solicitud de preservar el contenido durante una semana adicional. Después de un día la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. base de datos url1 url2 (archivos multimedia...) (archivos multimedia...) meta store (información general...) url1 screens prefs ranges media screens, etc.url2 poly host ref1 ref1.files ref1.state Figura 4: Diseño de datos de Spectrum policy store preservado por la segunda referencia. Después de la semana adicional ha pasado, la función callback para la segunda referencia será llamada. Esta función descartará la referencia restante al contenido y como no hay referencias restantes, el contenido será liberado. Con el fin de funcionar en escenarios como los descritos anteriormente, Spectrums gestor de políticas debe gestionar y mantener todas las referencias a varios trozos de medios. Estas referencias son persistentes y por lo tanto deben ser capaces de sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestra implementación de Spectrum Policy Manager logra esto usando la estructura de archivos y directorios que se muestra en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el administrador de almacenamiento para almacenar cada URL activa trozos de medios. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Tenga en cuenta que este directorio se utiliza sólo si el administrador de almacenamiento es local. Si el gestor de políticas está utilizando un gestor de almacenamiento externo (por ejemplo: un aparato de almacenamiento), a continuación, los archivos multimedia se almacenan de forma remota y sólo son remotamente referenciados por el gestor de políticas. meta: este directorio contiene meta información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) e información sobre los tipos de trozos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los trozos de datos almacenados. El archivo de trozos contiene una lista de trozos actualmente almacenados y sus cuentas de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de rangos temporales de datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato de los medios almacenados bajo la URL actual. poli: este directorio contiene un conjunto de subdirectorios host. Cada subdirectorio de host contiene el conjunto de referencias políticas creadas por ese host. La información sobre cada referencia política se divide en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files, y ref1.state. El archivo ref1 contiene información sobre la política de referencia que no cambia con frecuencia. Esta información incluye la política de base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a trozos que pref ref1 posee. Por último, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Tenga en cuenta que otras implementaciones son posibles. Por ejemplo, un gestor de Spectrum de grado de operador podría almacenar toda su información normativa y de referencia en un \"sistema de bases de datos de alto rendimiento\". 10 4. TRABAJOS RELACIONADOS Varios autores han abordado el problema de la gestión de contenidos en redes distribuidas. Gran parte de la labor se centra en el aspecto de la gestión de políticas. Por ejemplo en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda de los usuarios mediante un protocolo de difusión de la demanda. El rendimiento del sistema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Router Central, una base de conocimiento caché, subcachés y un juez de desalojo subcaché. La base Cache Knowledge permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenidos en el entorno en red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenidos, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de TV que se utilizan en PVRs para seleccionar automáticamente el contenido para los usuarios, por ejemplo. [6]. En el caso de que Spectrum se utilice en una configuración PVR, este tipo de sistema desempeñaría una función de nivel superior y podría beneficiarse claramente de las funcionalidades de la arquitectura Spectrum. Por último, en los proveedores comerciales de medio ambiente de CDN (por ejemplo, Cisco y Netapp) han desarrollado e implementado productos y herramientas de gestión de contenidos. A diferencia de la arquitectura Spectrum que permite que los dispositivos de borde funcionen de una manera en gran medida autónoma, las soluciones de proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. 5. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo presentamos el diseño e implementación de la arquitectura de gestión de contenidos Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que tengan tiempo y que se ocupen eficazmente del almacenamiento de contenido multimedia continuo. Por último, el diseño modular de la arquitectura Spectrum permite realizaciones independientes y distribuidas para que el sistema se pueda implementar en una variedad de aplicaciones. Hay una serie de cuestiones pendientes que requerirán una labor futura. Algunos de estos problemas incluyen: • Prevemos que Spectrum sea capaz de gestionar contenido en sistemas que van desde grandes CDNs hasta aparatos más pequeños como TiVO [8]. Para que estos sistemas más pequeños soporten Spectrum necesitarán redes y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo puede encajar en la arquitectura Spectrum. • El contenido de nombres de espectro por URL, pero no hemos definido intencionadamente el formato de las URLs de espectro, cómo se mapean al nombre real del contenido, o cómo los nombres y URLs deben ser presentados al usuario. Si bien hemos abordado anteriormente estas cuestiones en otros lugares [2], creemos que queda más trabajo por hacer y que es necesario elaborar normas consensuadas sobre la designación de nombres. • En este artículo nos hemos centrado en la gestión de contenidos para objetos multimedia continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero todavía tenemos que elaborar los detalles necesarios para apoyar esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que los contenidos multimedia se compartan fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. 6. REFERENCIAS [1] K.. Cheng e Y. Kambayashi. Gestión de Contenidos Multicaché-basada para Web Caching. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información Web, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. PRISM Architecture: Apoyando los servicios de transmisión mejorada en una red de distribución de contenido. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de vídeo digital habilitado para la red. 11o Taller de IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, y P. Shenoy. Una arquitectura de clúster de servidores multimedia de transmisión de demanda adaptativa y con conocimiento de la localización (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Recomendador de TV multi-agente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "error": [
                ""
            ]
        },
        "carrier-grade spectrum manager": {
            "translated_key": [],
            "translated_annotated_text": "Diseño e implementación de un sistema de gestión de contenido distribuido C. D. Cranor, R. Ethington, A. Sehgal†, D. Shur, C. Sreenan‡ y J.E. van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland RESUMEN La convergencia de los avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan e intercambian de forma rutinaria entre dispositivos habilitados para la red. Mantener un seguimiento de (o gestionar) dicho contenido sigue siendo un reto debido al gran volumen de datos. El almacenamiento de medios continuos en vivo (como contenidos de televisión o radio) aumenta la complejidad en el sentido de que este contenido no tiene un inicio o un final bien definidos y, por lo tanto, resulta engorroso de tratar. El almacenamiento en red permite que los contenidos que se consideran lógicamente como parte de la misma colección se distribuyan de hecho a través de una red, haciendo que la tarea de gestión de contenidos sea casi imposible de manejar sin un sistema de gestión de contenidos. En este trabajo presentamos el diseño y la implementación del sistema de gestión de contenidos Spectrum, que trata de contenido multimedia rico de manera efectiva en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto a escenarios independientes como a diversos escenarios en red. Un aspecto único de Spectrum es que requiere una (o más) políticas de retención para aplicarse a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido que ya no tiene una política de retención aplicada se elimina simplemente del sistema. Las diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así naturalmente el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo que son elementos básicos necesarios para hacer frente al almacenamiento de medios continuos en vivo, a los contenidos. No sólo describimos los detalles de la arquitectura Spectrum, sino que también damos casos de uso típicos. Categorías y Descriptores de Asunto C.2.4 [Organización de Sistemas de Computación]: Sistemas distribuidos por redes de comunicación informática; H.3.4 [Sistemas de Información]: Sistemas de almacenamiento y recuperación de información y software Términos generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar el contenido es y siempre ha sido una de las funciones principales de un ordenador. Las aplicaciones de computación inicial incluyen formateadores de texto y compiladores de programas. El contenido fue administrado inicialmente por interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que la gente desea utilizarlo han cambiado enormemente. Los nuevos tipos de contenidos, como los flujos multimedia continuos, se han convertido en algo común debido a la convergencia de los avances en las tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de vídeo codificado de calidad de TV en una sola unidad de disco. Esto ha llevado a la introducción de sistemas independientes de grabación de vídeo digital o de grabación de vídeo personal (PVR), como TiVO [8] y ReplayTV [7]. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas con la propia red actuando como un enorme repositorio de datos. La proliferación de contenidos de alta calidad gracias a estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. Nuestro trabajo se centra en el almacenamiento de contenidos multimedia ricos y, en particular, el almacenamiento de contenidos multimedia continuos en formatos preenvasados o en directo. La necesidad de gestión de contenidos en esta área es evidente cuando se tiene en cuenta lo siguiente: • El aumento de la capacidad y la disminución del costo de almacenamiento significa que incluso los modestos sistemas de escritorio hoy en día tienen la capacidad de almacenar cantidades masivas de contenido. La gestión manual de dichos contenidos (o, más correctamente, la no gestión manual de dichos contenidos) produce grandes ineficiencias en los casos en que el almacenamiento de residuos de contenidos no deseados y olvidados no es posible y en los que no se puede encontrar el contenido deseado. • Si bien es cierto para todo tipo de contenido, el almacenamiento de contenido multimedia continuo es especialmente problemático. El primer contenido continuo de los medios sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque de almacenamiento sin políticas no funcionará para todos, sino para los sistemas más pequeños. En segundo lugar, el almacenamiento de contenido en vivo como TV o radio es inherentemente problemático, ya que estas señales son corrientes continuas sin terminales. Esto significa que antes de que uno pueda siquiera pensar en manejar tal contenido hay una necesidad de abstraerlo en algo que podría ser manipulado y manejado. 4 • Cuando se trata de medios continuos almacenados, es necesario gestionar dichos contenidos tanto a un nivel de grano fino como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar sólo los aspectos más destacados de un evento deportivo en particular no debe tener que almacenar el contenido correspondiente al evento completo. Al mismo tiempo, el usuario podría querer pensar en el contenido en el agregado, por ejemplo. eliminar todo el contenido que no he visto en el último mes, excepto el contenido que fue explícitamente marcado para archivo. • Como se ha indicado anteriormente, es muy difícil tratar de hacer un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenidos. Sin embargo, cuando los dispositivos de almacenamiento reales se distribuyen a través de una red, la tarea de realizar un seguimiento del contenido es casi imposible. Este escenario es cada vez más común en los sistemas de distribución de contenidos basados en la red y es probable que también sea importante en los escenarios de creación de redes en el hogar. Parece entonces claro que se necesita un sistema de gestión de contenidos que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que se explota la capacidad en red de los dispositivos de almacenamiento. Este sistema debería permitir el almacenamiento eficiente de contenidos y el acceso a ellos a través de dispositivos de almacenamiento de redes heterogéneos, de acuerdo con las preferencias del usuario. El sistema de gestión de contenidos debe traducir las preferencias de los usuarios en políticas adecuadas de almacenamiento de bajo nivel y permitir que esas preferencias se expresen en un nivel fino de granularidad (aunque no lo exijan en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar (es decir. cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenidos distribuidos es difícil debido al número de requisitos que se imponen al sistema. Por ejemplo: • El sistema de gestión de contenidos debe funcionar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando el contenido almacenado en un sistema de archivos local, mientras que en otros, el contenido puede almacenarse en un dispositivo de almacenamiento de red separado. El gestor de contenidos podrá ser responsable de la aplicación de las políticas que utilice para hacer referencia al contenido o de la delegación de dicho papel en un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. • El sistema de gestión de contenidos debe ser flexible y ser capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe obtenerse, cuándo debe obtenerse, cuánto tiempo debe conservarse y en qué circunstancias debe desecharse. Esto significa que el sistema de gestión de contenidos debería permitir a múltiples aplicaciones hacer referencia al contenido con un rico conjunto de políticas y que todos deberían trabajar juntos sin problemas. • El sistema de gestión de contenidos debe poder controlar las referencias de contenido y utilizar esa información para colocar el contenido en la ubicación correcta de la red para un acceso eficiente a las aplicaciones. • El sistema de gestión de contenidos debe manejar la interacción entre la población implícita y explícita de contenidos en el borde de la red. • El sistema de contenidos debe ser capaz de gestionar eficientemente grandes conjuntos de contenidos, incluyendo flujos continuos. Necesita poder empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas hemos diseñado e implementado la arquitectura del sistema de gestión de contenidos Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite a múltiples aplicaciones hacer referencia al contenido utilizando políticas diferentes. Tenga en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenidos (CDN) que puede facilitar la distribución eficiente de contenidos (por ejemplo, la arquitectura PRISM CDN [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. La labor conexa se describe en la sección 4, y la sección 5 contiene nuestras conclusiones y sugerencias para la labor futura. 2. LA ARQUITECTURA DEL SISTEMA DE GESTIÓN DE CONTENIDO DISTRIBUIDO POR ESPECTRO La arquitectura del espectro consta de tres capas de gestión distintas que pueden o no distribuirse entre múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todos los contenidos de las aplicaciones de acuerdo con las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de vídeo personal (PVR), el gestor de contenidos recibe solicitudes de contenido de una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y administrar contenido en el dispositivo. gestor de políticas: implementa y hace cumplir varias políticas de almacenamiento que el gestor de contenidos utiliza para referirse al contenido. El gestor de políticas exporta una interfaz al gestor de contenidos que permite al gestor de contenidos solicitar que el contenido de una pieza sea tratado de acuerdo con una política específica. Spectrum permite que las políticas arbitrarias se realicen proporcionando un conjunto fijo de plantillas de políticas de base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (si no, Spectrum puede ampliarse fácilmente para cargar dinámicamente nuevo código de plantilla de política de base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido sólo puede existir en el sistema mientras se haga referencia a él al menos mediante una política existente. Los conflictos políticos se eliminan haciendo que el director de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin ninguna política asociada con él se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar naturalmente el intercambio de contenidos entre diferentes políticas, lo que es fundamental para el almacenamiento eficiente de objetos de gran tamaño. Tenga en cuenta que una diferencia clave entre el gestor de contenidos y el gestor de políticas es que el gestor de contenidos gestiona referencias a múltiples piezas de contenido, es decir. tiene una visión de aplicación del contenido. Por otra parte, el gestor de políticas sólo se ocupa de la política utilizada para gestionar contenidos independientes. Por ejemplo, en una aplicación PVR, la capa del gestor de contenidos sabría acerca de los diferentes grupos de contenido gestionado, como mantener-indefinidamente, guardar durante un día, y mantener si el espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada contenido tiene 5 contenido Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figura 1: Los componentes de la arquitectura Spectrum y las cuatro formas en que pueden configurarse su propia política (o políticas) se le aplican y son independientes de otros contenidos. administrador de almacenamiento: almacena el contenido de una manera eficiente al tiempo que facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento almacena contenido en trozos de subobjeto. Este enfoque tiene ventajas para la recuperación eficiente de contenidos, pero lo que es más importante, permite que las políticas se apliquen a un nivel de subobjetos que es de importancia crítica cuando se trata de objetos muy grandes como partes de medios continuos, por ejemplo. piezas seleccionadas de contenido de TV que se almacenan en un PVR. Tenga en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas utilizadas por los gestores de contenido y políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la Figura muestra el caso más simple (no distribuido) donde todas las capas se implementan en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como PVRs. El siguiente caso corresponde al caso en que existe un gestor de contenidos centralizado que controla los dispositivos de almacenamiento distribuidos, cada uno de los cuales es responsable de la aplicación del almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, funcionan de forma mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, normalmente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido basado en un calendario determinado por algún controlador centralizado. Por ejemplo, el CDN podría prepoblar dispositivos de borde con contenido que se espera que sea muy popular o distribuir archivos grandes a las sucursales durante horas fuera del pico en un entorno empresarial limitado por el ancho de banda. Permitir que un único gestor de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y el caso más distribuido. La necesidad de este tipo de separación puede ocurrir por razones de escalabilidad o cuando diferentes dispositivos o aparatos de almacenamiento especializados están obligados a ser controlados por un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas que controla un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo de grano fino por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de contenidos La capa de gestor de contenidos es la interfaz principal a través de la cual aplicaciones específicas utilizan la arquitectura Spectrum. Como tal, la capa de gestor de contenidos proporciona una API para que la aplicación manipule todos los aspectos de la arquitectura Spectrum en diferentes niveles de granularidad. La API del gestor de contenidos tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite añadir dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo control del gestor de contenidos y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos - este es el único lugar en la arquitectura donde se requiere que la aplicación sea consciente de esta distinción. Una vez que un dispositivo se mapea en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Tiendas: Las tiendas son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (p. ej. espacio en disco) a él. Las tiendas sólo se pueden crear en dispositivos físicos que se mapean en el sistema. Grupos de políticas: Los grupos de políticas son los medios por los cuales una aplicación especifica, instancia y modifica las políticas que se aplican al contenido Spectrum. El uso típico de este conjunto de funciones es seleccionar uno de un pequeño conjunto de políticas de base y parametrizar esta instancia específica de la política. Se crean grupos de políticas dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que requieren una especificación de tiempo sofisticada permiten el almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría desalojar el contenido del sistema en un determinado momento absoluto o relativo. Una política temporal ligeramente más implicada, habilitada por la arquitectura Spectrum, podría permitir que el contenido se almacene en una ventana móvil de varias horas (por ejemplo, el número de horas N más reciente se mantiene en el sistema). Las políticas basadas en el tiempo son de particular utilidad cuando se trata de contenidos continuos como una transmisión en vivo. 6 Contenido: En el mejor nivel de contenido de granularidad se puede añadir o eliminar del sistema. El contenido se especifica en el sistema mediante un localizador de recursos uniforme (URL) que indica de forma concisa la ubicación del contenido, así como el protocolo que se utilizará para recuperarlo. Opcionalmente una especificación de tiempo se puede asociar con el contenido. Esto permite obtener contenido en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Una vez más, esto es particularmente útil para tratar con el almacenamiento y la gestión de contenido en vivo. 2.2 Gestor de políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones API. En primer lugar, hay funciones que funcionan en áreas de almacenamiento gestionado y referencias basadas en políticas (prefs) al contenido almacenado allí. En segundo lugar, hay conjuntos de funciones utilizadas para aplicar cada política de gestión. La primera clase de funciones es utilizada por la capa del gestor de contenidos para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar: Estas operaciones son utilizadas por el gestor de contenidos para controlar su acceso al almacenamiento. Los gestores de políticas crean operación se utiliza para establecer contacto con una tienda por primera vez. Una vez hecho esto, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Tenga en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información sólo debe ser transmitida al gestor de políticas una vez a la hora de crear. Para operaciones abiertas, el gestor de políticas utilizará la información en caché para ponerse en contacto con la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el gestor de contenidos consulte al gestor de políticas sobre qué contenido está actualmente presente para una URL dada. Para los intervalos de tiempo continuos de los medios actuales se devolverán. recurso: Las rutinas de recursos se utilizan para consultar al gestor de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su conjunto y otra que se aplica a una determinada referencia política. El recurso API es extensible, actualmente soportamos consultas sobre el uso del disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer es utilizada por el gestor de contenido para referenciar el contenido en la tienda. Si el contenido no está presente, esta llamada resultará en que el contenido sea obtenido (o programado para ser obtenido si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL para almacenarla debajo, la URL para obtener datos de si no está presente, la política para almacenar el contenido debajo y los argumentos utilizados para parametrizar la política. El resultado de una operación pref establecer con éxito es una cadena de identificación de referencia política. Este ID se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones de gestor de políticas se utiliza para implementar todas las políticas apoyadas por Spectrum. Prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitivo puede ser parametrizada para funcionar diariamente, semanal o mensualmente. Tenga en cuenta que el gestor de políticas sólo se ocupa de la ejecución de una política específica. Las razones de mayor nivel para elegir una determinada política son manejadas por el gestor de contenido y aplicación. Una política de base se implementa usando seis funciones: establecer: llamada cuando se establece un pref con las URLs requeridas y los parámetros de las políticas de base. El establecimiento de rutina hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar medidas (por ejemplo. iniciar una descarga) y programa una devolución de llamada para ese tiempo. También puede registrarse para recibir callbacks si se recibe nuevo contenido para una URL dada. actualización: llamada a cambiar los parámetros de un pref, o a descartar la referencia política. newclip: llamado cuando se recibe un trozo de contenido nuevo para una URL de interés. La política de base normalmente organiza que newclip sea llamado para una URL dada cuando se establece la pref. Cuando se llama newclip, la política de base comprueba sus parámetros para determinar si desea añadir una referencia al clip que acaba de recibir. callback: llamado cuando el pref programa un callback basado en temporizador. Este es un mecanismo útil de despertar para prefs que necesitan estar inactivos durante un largo período de tiempo (por ejemplo. entre programas). boot/shutdown: llamado cuando el sistema de gestión de contenido está arrancando o apagando. La operación de arranque se utiliza normalmente para programar las llamadas iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para apagar con gracia flujos de E/S y guardar estado. 2.3 Gestor de almacenamiento El papel del Gestor de almacenamiento Spectrums es controlar todas las operaciones de E/S asociadas a una tienda dada. El gestor de almacenamiento Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo: un aparato de almacenamiento). Para medios continuos, en el nivel de administrador de almacenamiento el contenido se almacena como una colección de trozos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un trozo podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son de entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión tanto las rutinas de entrada como de salida toman intervalos de tiempo que programan cuando la operación de E/S debe ocurrir, y ambas rutinas devuelven una manija de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el gestor de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar tiendas. También es compatible con las operaciones para consultar los usos de recursos y las opciones apoyadas por la tienda. Por último, el administrador de almacenamiento también tiene una rutina de descartes que puede ser utilizada por el administrador de políticas para informar a la tienda para eliminar el contenido de la tienda. 3. CASOS DE APLICACIÓN Y USO En esta sección describimos nuestra implementación de Spectrum y cómo se puede utilizar. 3.1 Implementación Hemos implementado Spectrums tres capas en C como parte de una biblioteca que puede vincularse con aplicaciones basadas en Spectrum. Cada capa realiza un seguimiento de su estado a través de un conjunto de archivos de datos locales que persisten a través de los reinicios, permitiendo así a Spectrum manejar sin problemas los ciclos de potencia. Para capas que residen en sistemas remotos (p. ej. una tienda remota) sólo la meta-información necesaria para contactar con el remoto 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Interfaz gráfica de usuario Red activada DVR Program Information Content DVR Application Figura 2: El espectro en un nodo DVR habilitado de red se almacena localmente. Nuestra aplicación de prueba utiliza una política local y un gestor de almacenamiento para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficazmente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas Spectrums API admiten modos síncronos y asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada API lleva un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de llamada y el estado de retorno. Para llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamadas. Para usar una función Spectrum API, el llamante elige primero el modo sincronización o asíncrona y asigna una estructura reqinfo. Para las llamadas de sincronización, el reqinfo se puede asignar en la pila, de lo contrario se asigna con malloc. Para las llamadas async, se debe proporcionar una función de devolución de llamada cuando se asigna el reqinfo. A continuación, el llamante invoca la función Spectrum API deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas async exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada async se completa o se produce un tiempo de espera, la función de devolución de llamada async se llama con la información adecuada necesaria para completar el procesamiento. El diseño modular/en capas de la arquitectura Spectrum simplifica el objetivo de distribución de la funcionalidad. Además, la comunicación entre funciones es típicamente de naturaleza maestro-esclavo(s). Esto significa que varios enfoques de la operación distribuida son posibles que satisfagan los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un simple diseño modular. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y seleccionar el método de codificación que debe utilizarse con los datos a transferir. Los protocolos de transporte pueden variar protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP plano para la mayor parte de nuestro transporte. Las llamadas de funciones a través de las diferentes API de Spectrum se pueden codificar utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos usando la biblioteca XML de eXpat [4] para codificar nuestras llamadas. Mientras estamos actualmente transfiriendo nuestros mensajes codificados XML usando una conexión TCP simple, en un entorno real esto puede ser reemplazado fácilmente por una implementación basada en una capa segura de sockets (SSL) para mejorar la seguridad mediante la adición de SSL como protocolo de transporte. Un aspecto importante del Spectrum es que puede gestionar contenidos basados en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la sección 2.2, prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben entender las políticas a nivel de base y cómo pueden ser parametrizadas. Para abordar este tema, tratamos cada política a nivel de base como si fuera un programa separado. Cada política a nivel de base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada usando una función tipo getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de bytes no es un problema en una cadena. Dado que esta parte de Spectrum no está en la ruta de datos críticos, este tipo de formato no es un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos del Espectro En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos del Espectro en nuestro entorno. El foco de nuestro trabajo anterior ha sido la distribución de contenido para el contenido multimedia en streaming [2] y la grabación digital de vídeo habilitada en red [3]. El sistema Spectrum es aplicable a ambos escenarios de la manera siguiente. La Figura 2 muestra la arquitectura DVR (NED) activada por red. En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación DVR obtiene listados de programas de alguna fuente de red, se ocupa de la presentación del usuario a través de una interfaz gráfica de usuario (GUI), e interfaz con el sistema Spectrum a través de las API de la capa de gestión de contenidos. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento a 8 Content Manager Centralized Content Management station Información de contenidoGuía de interfaz de usuario Gestor de almacenamiento Gestor de almacenamiento Fetcher Edge Portal Política de servidor Gestor de almacenamiento Gestor de almacenamiento Gestor de almacenamiento Gestor de contenido Fetcher Edge Portal Server Distributed Content To La obtención del contenido (a través de la red o localmente) y el posterior almacenamiento en el sistema local es entonces manejado por los gerentes de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenidos en streaming (p. ej. PRISM [2] se muestra en la Figura 3. En este entorno se está distribuyendo contenido multimedia en streaming (tanto en directo, enlatado en vivo como bajo demanda) a portales de borde desde donde se están sirviendo los puntos finales de streaming. En nuestro entorno la distribución y almacenamiento de contenidos se realiza desde una estación centralizada de gestión de contenidos que controla varios de los portales de borde. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenidos sin necesidad de comunicación continua entre el gestor de contenidos y los dispositivos de borde, es decir. una vez que se han dado instrucciones a los dispositivos de borde que pueden funcionar de forma independiente hasta que se van a hacer cambios. 3.3 Spectrum Operational Ejemplo Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación PVR basada en Spectrum programada para almacenar un día de contenido en streaming en una ventana móvil. Para configurar la ventana móvil, la aplicación utilizaría la API del gestor de contenidos para crear un grupo de políticas y una referencia política al contenido deseado. El establecimiento de la referencia de la política de ventanilla móvil de un día haría que el pesebre de la política pidiera al administrador de almacenamiento que comenzara a recibir la corriente. A medida que llega cada trozo de datos de streaming, el gestor de políticas ejecuta la función newclip de referencias políticas. La función newclip añade una referencia a cada trozo que llega, y programa una devolución de llamada un día después. En ese momento, la política dejará de hacer referencia al contenido, que ya tiene un día de antigüedad, y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considere el caso en el que el usuario decide guardar parte del contenido (por ejemplo. un programa específico) en la ventana de rodadura durante una semana adicional. Para ello, la aplicación solicita que el gestor de contenidos agregue una nueva referencia política adicional a la parte del contenido a conservar. Por lo tanto, el contenido conservado tiene dos referencias: una desde la ventana móvil y otra desde la solicitud de preservar el contenido durante una semana adicional. Después de un día la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. base de datos url1 url2 (archivos multimedia...) (archivos multimedia...) meta store (información general...) url1 screens prefs ranges media screens, etc.url2 poly host ref1 ref1.files ref1.state Figura 4: Diseño de datos de Spectrum policy store preservado por la segunda referencia. Después de la semana adicional ha pasado, la función callback para la segunda referencia será llamada. Esta función descartará la referencia restante al contenido y como no hay referencias restantes, el contenido será liberado. Con el fin de funcionar en escenarios como los descritos anteriormente, Spectrums gestor de políticas debe gestionar y mantener todas las referencias a varios trozos de medios. Estas referencias son persistentes y por lo tanto deben ser capaces de sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestra implementación de Spectrum Policy Manager logra esto usando la estructura de archivos y directorios que se muestra en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el administrador de almacenamiento para almacenar cada URL activa trozos de medios. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Tenga en cuenta que este directorio se utiliza sólo si el administrador de almacenamiento es local. Si el gestor de políticas está utilizando un gestor de almacenamiento externo (por ejemplo: un aparato de almacenamiento), a continuación, los archivos multimedia se almacenan de forma remota y sólo son remotamente referenciados por el gestor de políticas. meta: este directorio contiene meta información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) e información sobre los tipos de trozos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los trozos de datos almacenados. El archivo de trozos contiene una lista de trozos actualmente almacenados y sus cuentas de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de rangos temporales de datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato de los medios almacenados bajo la URL actual. poli: este directorio contiene un conjunto de subdirectorios host. Cada subdirectorio de host contiene el conjunto de referencias políticas creadas por ese host. La información sobre cada referencia política se divide en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files, y ref1.state. El archivo ref1 contiene información sobre la política de referencia que no cambia con frecuencia. Esta información incluye la política de base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a trozos que pref ref1 posee. Por último, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Tenga en cuenta que otras implementaciones son posibles. Por ejemplo, un gestor de Spectrum de grado de operador podría almacenar toda su información normativa y de referencia en un sistema de bases de datos de alto rendimiento. 10 4. TRABAJOS RELACIONADOS Varios autores han abordado el problema de la gestión de contenidos en redes distribuidas. Gran parte de la labor se centra en el aspecto de la gestión de políticas. Por ejemplo en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda de los usuarios mediante un protocolo de difusión de la demanda. El rendimiento del sistema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Router Central, una base de conocimiento caché, subcachés y un juez de desalojo subcaché. La base Cache Knowledge permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenidos en el entorno en red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenidos, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de TV que se utilizan en PVRs para seleccionar automáticamente el contenido para los usuarios, por ejemplo. [6]. En el caso de que Spectrum se utilice en una configuración PVR, este tipo de sistema desempeñaría una función de nivel superior y podría beneficiarse claramente de las funcionalidades de la arquitectura Spectrum. Por último, en los proveedores comerciales de medio ambiente de CDN (por ejemplo, Cisco y Netapp) han desarrollado e implementado productos y herramientas de gestión de contenidos. A diferencia de la arquitectura Spectrum que permite que los dispositivos de borde funcionen de una manera en gran medida autónoma, las soluciones de proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. 5. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo presentamos el diseño e implementación de la arquitectura de gestión de contenidos Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que tengan tiempo y que se ocupen eficazmente del almacenamiento de contenido multimedia continuo. Por último, el diseño modular de la arquitectura Spectrum permite realizaciones independientes y distribuidas para que el sistema se pueda implementar en una variedad de aplicaciones. Hay una serie de cuestiones pendientes que requerirán una labor futura. Algunos de estos problemas incluyen: • Prevemos que Spectrum sea capaz de gestionar contenido en sistemas que van desde grandes CDNs hasta aparatos más pequeños como TiVO [8]. Para que estos sistemas más pequeños soporten Spectrum necesitarán redes y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo puede encajar en la arquitectura Spectrum. • El contenido de nombres de espectro por URL, pero no hemos definido intencionadamente el formato de las URLs de espectro, cómo se mapean al nombre real del contenido, o cómo los nombres y URLs deben ser presentados al usuario. Si bien hemos abordado anteriormente estas cuestiones en otros lugares [2], creemos que queda más trabajo por hacer y que es necesario elaborar normas consensuadas sobre la designación de nombres. • En este artículo nos hemos centrado en la gestión de contenidos para objetos multimedia continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero todavía tenemos que elaborar los detalles necesarios para apoyar esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que los contenidos multimedia se compartan fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. 6. REFERENCIAS [1] K.. Cheng e Y. Kambayashi. Gestión de Contenidos Multicaché-basada para Web Caching. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información Web, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. PRISM Architecture: Apoyando los servicios de transmisión mejorada en una red de distribución de contenido. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de vídeo digital habilitado para la red. 11o Taller de IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, y P. Shenoy. Una arquitectura de clúster de servidores multimedia de transmisión de demanda adaptativa y con conocimiento de la localización (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Recomendador de TV multi-agente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "error": []
        },
        "distribute content management": {
            "translated_key": [],
            "translated_annotated_text": "Diseño e implementación de un sistema de gestión de contenido distribuido C. D. Cranor, R. Ethington, A. Sehgal†, D. Shur, C. Sreenan‡ y J.E. van der Merwe AT&T Labs - Research † University of Kentucky ‡ University College Cork Florham Park, NJ, USA Lexington, KY, USA Cork, Ireland RESUMEN La convergencia de los avances en tecnologías de almacenamiento, codificación y redes nos ha llevado a un entorno donde grandes cantidades de contenido multimedia continuo se almacenan e intercambian de forma rutinaria entre dispositivos habilitados para la red. Mantener un seguimiento de (o gestionar) dicho contenido sigue siendo un reto debido al gran volumen de datos. El almacenamiento de medios continuos en vivo (como contenidos de televisión o radio) aumenta la complejidad en el sentido de que este contenido no tiene un inicio o un final bien definidos y, por lo tanto, resulta engorroso de tratar. El almacenamiento en red permite que los contenidos que se consideran lógicamente como parte de la misma colección se distribuyan de hecho a través de una red, haciendo que la tarea de gestión de contenidos sea casi imposible de manejar sin un sistema de gestión de contenidos. En este trabajo presentamos el diseño y la implementación del sistema de gestión de contenidos Spectrum, que trata de contenido multimedia rico de manera efectiva en este entorno. Spectrum tiene una arquitectura modular que permite su aplicación tanto a escenarios independientes como a diversos escenarios en red. Un aspecto único de Spectrum es que requiere una (o más) políticas de retención para aplicarse a cada pieza de contenido que se almacena en el sistema. Esto significa que no hay políticas de desalojo. El contenido que ya no tiene una política de retención aplicada se elimina simplemente del sistema. Las diferentes políticas de retención pueden aplicarse fácilmente al mismo contenido, facilitando así naturalmente el intercambio sin duplicación. Este enfoque también permite a Spectrum aplicar fácilmente políticas basadas en el tiempo que son elementos básicos necesarios para hacer frente al almacenamiento de medios continuos en vivo, a los contenidos. No sólo describimos los detalles de la arquitectura Spectrum, sino que también damos casos de uso típicos. Categorías y Descriptores de Asunto C.2.4 [Organización de Sistemas de Computación]: Sistemas distribuidos por redes de comunicación informática; H.3.4 [Sistemas de Información]: Sistemas de almacenamiento y recuperación de información y software Términos generales Diseño, Gestión 1. INTRODUCCIÓN Manipular y gestionar el contenido es y siempre ha sido una de las funciones principales de un ordenador. Las aplicaciones de computación inicial incluyen formateadores de texto y compiladores de programas. El contenido fue administrado inicialmente por interacción explícita del usuario a través del uso de archivos y sistemas de archivos. A medida que la tecnología ha avanzado, tanto los tipos de contenido como la forma en que la gente desea utilizarlo han cambiado enormemente. Los nuevos tipos de contenidos, como los flujos multimedia continuos, se han convertido en algo común debido a la convergencia de los avances en las tecnologías de almacenamiento, codificación y redes. Por ejemplo, al combinar mejoras en el almacenamiento y la codificación, ahora es posible almacenar muchas horas de vídeo codificado de calidad de TV en una sola unidad de disco. Esto ha llevado a la introducción de sistemas independientes de grabación de vídeo digital o de grabación de vídeo personal (PVR), como TiVO [8] y ReplayTV [7]. Otro ejemplo es la combinación de la codificación y la tecnología de redes de banda ancha. Esta combinación ha permitido a los usuarios acceder y compartir contenido multimedia en redes locales y remotas con la propia red actuando como un enorme repositorio de datos. La proliferación de contenidos de alta calidad gracias a estos avances en tecnología de almacenamiento, codificación y redes crea la necesidad de nuevas formas de manipular y gestionar los datos. Nuestro trabajo se centra en el almacenamiento de contenidos multimedia ricos y, en particular, el almacenamiento de contenidos multimedia continuos en formatos preenvasados o en directo. La necesidad de gestión de contenidos en esta área es evidente cuando se tiene en cuenta lo siguiente: • El aumento de la capacidad y la disminución del costo de almacenamiento significa que incluso los modestos sistemas de escritorio hoy en día tienen la capacidad de almacenar cantidades masivas de contenido. La gestión manual de dichos contenidos (o, más correctamente, la no gestión manual de dichos contenidos) produce grandes ineficiencias en los casos en que el almacenamiento de residuos de contenidos no deseados y olvidados no es posible y en los que no se puede encontrar el contenido deseado. • Si bien es cierto para todo tipo de contenido, el almacenamiento de contenido multimedia continuo es especialmente problemático. El primer contenido continuo de los medios sigue siendo muy exigente en términos de recursos de almacenamiento, lo que significa que un enfoque de almacenamiento sin políticas no funcionará para todos, sino para los sistemas más pequeños. En segundo lugar, el almacenamiento de contenido en vivo como TV o radio es inherentemente problemático, ya que estas señales son corrientes continuas sin terminales. Esto significa que antes de que uno pueda siquiera pensar en manejar tal contenido hay una necesidad de abstraerlo en algo que podría ser manipulado y manejado. 4 • Cuando se trata de medios continuos almacenados, es necesario gestionar dichos contenidos tanto a un nivel de grano fino como a un nivel agregado. Por ejemplo, un usuario individual de PVR que desee conservar sólo los aspectos más destacados de un evento deportivo en particular no debe tener que almacenar el contenido correspondiente al evento completo. Al mismo tiempo, el usuario podría querer pensar en el contenido en el agregado, por ejemplo. eliminar todo el contenido que no he visto en el último mes, excepto el contenido que fue explícitamente marcado para archivo. • Como se ha indicado anteriormente, es muy difícil tratar de hacer un seguimiento del contenido en un sistema independiente sin un sistema de gestión de contenidos. Sin embargo, cuando los dispositivos de almacenamiento reales se distribuyen a través de una red, la tarea de realizar un seguimiento del contenido es casi imposible. Este escenario es cada vez más común en los sistemas de distribución de contenidos basados en la red y es probable que también sea importante en los escenarios de creación de redes en el hogar. Parece entonces claro que se necesita un sistema de gestión de contenidos que pueda manejar eficientemente contenido rico en medios, al mismo tiempo que se explota la capacidad en red de los dispositivos de almacenamiento. Este sistema debería permitir el almacenamiento eficiente de contenidos y el acceso a ellos a través de dispositivos de almacenamiento de redes heterogéneos, de acuerdo con las preferencias del usuario. El sistema de gestión de contenidos debe traducir las preferencias de los usuarios en políticas adecuadas de almacenamiento de bajo nivel y permitir que esas preferencias se expresen en un nivel fino de granularidad (aunque no lo exijan en general). El sistema de gestión de contenidos debe permitir al usuario manipular y razonar (es decir. cambiar la política de almacenamiento asociada con) el almacenamiento de (partes de) contenido multimedia continuo. Abordar este problema de gestión de contenidos distribuidos es difícil debido al número de requisitos que se imponen al sistema. Por ejemplo: • El sistema de gestión de contenidos debe funcionar en un gran número de sistemas heterogéneos. En algunos casos, el sistema puede estar gestionando el contenido almacenado en un sistema de archivos local, mientras que en otros, el contenido puede almacenarse en un dispositivo de almacenamiento de red separado. El gestor de contenidos podrá ser responsable de la aplicación de las políticas que utilice para hacer referencia al contenido o de la delegación de dicho papel en un ordenador separado. Se necesita una interfaz de programa de aplicación (API) y protocolos de red asociados para que el sistema de gestión de contenidos proporcione una interfaz uniforme. • El sistema de gestión de contenidos debe ser flexible y ser capaz de manejar diferentes requisitos para las políticas de gestión de contenidos. Estas políticas reflejan qué contenido debe obtenerse, cuándo debe obtenerse, cuánto tiempo debe conservarse y en qué circunstancias debe desecharse. Esto significa que el sistema de gestión de contenidos debería permitir a múltiples aplicaciones hacer referencia al contenido con un rico conjunto de políticas y que todos deberían trabajar juntos sin problemas. • El sistema de gestión de contenidos debe poder controlar las referencias de contenido y utilizar esa información para colocar el contenido en la ubicación correcta de la red para un acceso eficiente a las aplicaciones. • El sistema de gestión de contenidos debe manejar la interacción entre la población implícita y explícita de contenidos en el borde de la red. • El sistema de contenidos debe ser capaz de gestionar eficientemente grandes conjuntos de contenidos, incluyendo flujos continuos. Necesita poder empaquetar este contenido de tal manera que sea conveniente para los usuarios acceder a él. Para abordar estos problemas hemos diseñado e implementado la arquitectura del sistema de gestión de contenidos Spectrum. Nuestra arquitectura en capas es flexible: su API permite que las capas residan en un solo ordenador o en múltiples ordenadores heterogéneos en red. Permite a múltiples aplicaciones hacer referencia al contenido utilizando políticas diferentes. Tenga en cuenta que la arquitectura Spectrum asume la existencia de una red de distribución de contenidos (CDN) que puede facilitar la distribución eficiente de contenidos (por ejemplo, la arquitectura PRISM CDN [2]). El resto de este documento está organizado de la siguiente manera. La sección 2 describe la arquitectura de nuestro sistema de gestión de contenidos. En la Sección 3 describimos tanto nuestra implementación de la arquitectura Spectrum como ejemplos de su uso. La labor conexa se describe en la sección 4, y la sección 5 contiene nuestras conclusiones y sugerencias para la labor futura. 2. LA ARQUITECTURA DEL SISTEMA DE GESTIÓN DE CONTENIDO DISTRIBUIDO POR ESPECTRO La arquitectura del espectro consta de tres capas de gestión distintas que pueden o no distribuirse entre múltiples máquinas, como se muestra en la Figura 1. Las tres capas son: gestor de contenido: contiene información específica de la aplicación que se utiliza para gestionar todos los contenidos de las aplicaciones de acuerdo con las preferencias del usuario. Por ejemplo, en una aplicación de grabadora de vídeo personal (PVR), el gestor de contenidos recibe solicitudes de contenido de una interfaz de usuario e interactúa con las capas inferiores de la arquitectura Spectrum para almacenar y administrar contenido en el dispositivo. gestor de políticas: implementa y hace cumplir varias políticas de almacenamiento que el gestor de contenidos utiliza para referirse al contenido. El gestor de políticas exporta una interfaz al gestor de contenidos que permite al gestor de contenidos solicitar que el contenido de una pieza sea tratado de acuerdo con una política específica. Spectrum permite que las políticas arbitrarias se realicen proporcionando un conjunto fijo de plantillas de políticas de base que pueden ser fácilmente parametrizadas. Creemos que para la mayoría de las implementaciones esto será adecuado (si no, Spectrum puede ampliarse fácilmente para cargar dinámicamente nuevo código de plantilla de política de base en tiempo de ejecución). Un aspecto clave del gestor de políticas es que permite que diferentes políticas se apliquen simultáneamente al mismo contenido (o partes del mismo contenido). Además, el contenido sólo puede existir en el sistema mientras se haga referencia a él al menos mediante una política existente. Los conflictos políticos se eliminan haciendo que el director de políticas se ocupe exclusivamente de las políticas de retención en lugar de una combinación de políticas de retención y desalojo. Esto significa que el contenido sin ninguna política asociada con él se elimina inmediata y automáticamente del sistema. Este enfoque nos permite apoyar naturalmente el intercambio de contenidos entre diferentes políticas, lo que es fundamental para el almacenamiento eficiente de objetos de gran tamaño. Tenga en cuenta que una diferencia clave entre el gestor de contenidos y el gestor de políticas es que el gestor de contenidos gestiona referencias a múltiples piezas de contenido, es decir. tiene una visión de aplicación del contenido. Por otra parte, el gestor de políticas sólo se ocupa de la política utilizada para gestionar contenidos independientes. Por ejemplo, en una aplicación PVR, la capa del gestor de contenidos sabría acerca de los diferentes grupos de contenido gestionado, como mantener-indefinidamente, guardar durante un día, y mantener si el espacio en disco disponible. Sin embargo, a nivel de gestor de políticas, cada contenido tiene 5 contenido Manager Policy Manager Storage Manager Content Manager Content Manager Content Manager Content Manager Policy Manager Policy Manager Storage Manager Storage Manager Storage Manager Remote Invocation Figura 1: Los componentes de la arquitectura Spectrum y las cuatro formas en que pueden configurarse su propia política (o políticas) se le aplican y son independientes de otros contenidos. administrador de almacenamiento: almacena el contenido de una manera eficiente al tiempo que facilita los objetivos de las capas superiores. Específicamente, el administrador de almacenamiento almacena contenido en trozos de subobjeto. Este enfoque tiene ventajas para la recuperación eficiente de contenidos, pero lo que es más importante, permite que las políticas se apliquen a un nivel de subobjetos que es de importancia crítica cuando se trata de objetos muy grandes como partes de medios continuos, por ejemplo. piezas seleccionadas de contenido de TV que se almacenan en un PVR. Tenga en cuenta que el gestor de almacenamiento no tiene conocimiento de las políticas utilizadas por los gestores de contenido y políticas. Otra parte única de nuestro enfoque es que las interfaces entre las capas pueden ser locales o distribuidas. La Figura 1 muestra los cuatro casos posibles. El caso en el extremo izquierdo de la Figura muestra el caso más simple (no distribuido) donde todas las capas se implementan en una sola caja. Esta configuración se utilizaría en aplicaciones autónomas como PVRs. El siguiente caso corresponde al caso en que existe un gestor de contenidos centralizado que controla los dispositivos de almacenamiento distribuidos, cada uno de los cuales es responsable de la aplicación del almacenamiento basado en políticas. En este caso, aunque los dispositivos remotos son controlados por el gestor central, funcionan de forma mucho más independiente. Por ejemplo, una vez que reciben instrucciones del gerente central, normalmente operan de manera autónoma. Un ejemplo de este tipo de configuración es una red de distribución de contenido (CDN) que distribuye y almacena contenido basado en un calendario determinado por algún controlador centralizado. Por ejemplo, el CDN podría prepoblar dispositivos de borde con contenido que se espera que sea muy popular o distribuir archivos grandes a las sucursales durante horas fuera del pico en un entorno empresarial limitado por el ancho de banda. Permitir que un único gestor de políticas controle varios administradores de almacenamiento conduce a la siguiente combinación de funciones y el caso más distribuido. La necesidad de este tipo de separación puede ocurrir por razones de escalabilidad o cuando diferentes dispositivos o aparatos de almacenamiento especializados están obligados a ser controlados por un único gestor de políticas. El caso final muestra un gestor de contenido combinado con un gestor de políticas que controla un gestor de almacenamiento remoto. Esta separación sería posible si el gestor de almacenamiento es algo autónomo y no requiere un control continuo de grano fino por parte del gestor de políticas. Ahora examinamos la función de las tres capas en detalle. 2.1 Gestor de contenidos La capa de gestor de contenidos es la interfaz principal a través de la cual aplicaciones específicas utilizan la arquitectura Spectrum. Como tal, la capa de gestor de contenidos proporciona una API para que la aplicación manipule todos los aspectos de la arquitectura Spectrum en diferentes niveles de granularidad. La API del gestor de contenidos tiene funciones que manejan: Dispositivos físicos: Este conjunto de funciones permite añadir dispositivos de almacenamiento físico a Spectrum, poniéndolos bajo control del gestor de contenidos y poniendo el almacenamiento a disposición del sistema. Los dispositivos físicos pueden ser locales o remotos - este es el único lugar en la arquitectura donde se requiere que la aplicación sea consciente de esta distinción. Una vez que un dispositivo se mapea en la aplicación a través de esta interfaz, el sistema rastrea su tipo y ubicación. Los usuarios simplemente se refieren al contenido a través de una etiqueta proporcionada por la aplicación. Tiendas: Las tiendas son subconjuntos de dispositivos de almacenamiento físico. A través de estas funciones, una aplicación puede crear una tienda en un dispositivo físico y asignar recursos (p. ej. espacio en disco) a él. Las tiendas sólo se pueden crear en dispositivos físicos que se mapean en el sistema. Grupos de políticas: Los grupos de políticas son los medios por los cuales una aplicación especifica, instancia y modifica las políticas que se aplican al contenido Spectrum. El uso típico de este conjunto de funciones es seleccionar uno de un pequeño conjunto de políticas de base y parametrizar esta instancia específica de la política. Se crean grupos de políticas dentro de las tiendas existentes en el sistema. La arquitectura Spectrum tiene políticas que normalmente están asociadas con el almacenamiento que tienen como objetivo optimizar el uso del disco. Además, un conjunto de políticas que requieren una especificación de tiempo sofisticada permiten el almacenamiento que es consciente del tiempo. Por ejemplo, una política simple basada en el tiempo podría desalojar el contenido del sistema en un determinado momento absoluto o relativo. Una política temporal ligeramente más implicada, habilitada por la arquitectura Spectrum, podría permitir que el contenido se almacene en una ventana móvil de varias horas (por ejemplo, el número de horas N más reciente se mantiene en el sistema). Las políticas basadas en el tiempo son de particular utilidad cuando se trata de contenidos continuos como una transmisión en vivo. 6 Contenido: En el mejor nivel de contenido de granularidad se puede añadir o eliminar del sistema. El contenido se especifica en el sistema mediante un localizador de recursos uniforme (URL) que indica de forma concisa la ubicación del contenido, así como el protocolo que se utilizará para recuperarlo. Opcionalmente una especificación de tiempo se puede asociar con el contenido. Esto permite obtener contenido en el sistema en algún momento futuro, o en intervalos de tiempo futuros. Una vez más, esto es particularmente útil para tratar con el almacenamiento y la gestión de contenido en vivo. 2.2 Gestor de políticas La capa de gestor de políticas de la arquitectura Spectrum tiene dos tipos principales de funciones API. En primer lugar, hay funciones que funcionan en áreas de almacenamiento gestionado y referencias basadas en políticas (prefs) al contenido almacenado allí. En segundo lugar, hay conjuntos de funciones utilizadas para aplicar cada política de gestión. La primera clase de funciones es utilizada por la capa del gestor de contenidos para acceder al almacenamiento. Las operaciones incluyen: crear, abrir y cerrar: Estas operaciones son utilizadas por el gestor de contenidos para controlar su acceso al almacenamiento. Los gestores de políticas crean operación se utiliza para establecer contacto con una tienda por primera vez. Una vez hecho esto, la tienda se puede abrir y cerrar utilizando las rutinas apropiadas. Tenga en cuenta que los parámetros utilizados para crear una tienda contienen información sobre cómo llegar a ella. Por ejemplo, las tiendas locales tienen un camino asociado con ellas, mientras que las tiendas remotas tienen un host remoto y un camino remoto asociado con ellas. La información sólo debe ser transmitida al gestor de políticas una vez a la hora de crear. Para operaciones abiertas, el gestor de políticas utilizará la información en caché para ponerse en contacto con la tienda. búsqueda: La operación de búsqueda proporciona una forma para que el gestor de contenidos consulte al gestor de políticas sobre qué contenido está actualmente presente para una URL dada. Para los intervalos de tiempo continuos de los medios actuales se devolverán. recurso: Las rutinas de recursos se utilizan para consultar al gestor de políticas sobre su uso actual de recursos. Hay dos rutinas de recursos: una que se aplica a la tienda en su conjunto y otra que se aplica a una determinada referencia política. El recurso API es extensible, actualmente soportamos consultas sobre el uso del disco y la carga de E/S. pref establecer/actualizar: La operación pref establecer es utilizada por el gestor de contenido para referenciar el contenido en la tienda. Si el contenido no está presente, esta llamada resultará en que el contenido sea obtenido (o programado para ser obtenido si el contenido no está disponible actualmente). Los parámetros de esta función incluyen la URL para almacenarla debajo, la URL para obtener datos de si no está presente, la política para almacenar el contenido debajo y los argumentos utilizados para parametrizar la política. El resultado de una operación pref establecer con éxito es una cadena de identificación de referencia política. Este ID se puede utilizar con la operación de actualización para cambiar los parámetros de la política de almacenamiento o eliminar la referencia por completo. El segundo grupo de funciones de gestor de políticas se utiliza para implementar todas las políticas apoyadas por Spectrum. Prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Por ejemplo, una política que implementa la grabación de una ventana de tiempo repetitivo puede ser parametrizada para funcionar diariamente, semanal o mensualmente. Tenga en cuenta que el gestor de políticas sólo se ocupa de la ejecución de una política específica. Las razones de mayor nivel para elegir una determinada política son manejadas por el gestor de contenido y aplicación. Una política de base se implementa usando seis funciones: establecer: llamada cuando se establece un pref con las URLs requeridas y los parámetros de las políticas de base. El establecimiento de rutina hace referencia a cualquier contenido ya presente en la tienda y luego determina la próxima vez que necesita tomar medidas (por ejemplo. iniciar una descarga) y programa una devolución de llamada para ese tiempo. También puede registrarse para recibir callbacks si se recibe nuevo contenido para una URL dada. actualización: llamada a cambiar los parámetros de un pref, o a descartar la referencia política. newclip: llamado cuando se recibe un trozo de contenido nuevo para una URL de interés. La política de base normalmente organiza que newclip sea llamado para una URL dada cuando se establece la pref. Cuando se llama newclip, la política de base comprueba sus parámetros para determinar si desea añadir una referencia al clip que acaba de recibir. callback: llamado cuando el pref programa un callback basado en temporizador. Este es un mecanismo útil de despertar para prefs que necesitan estar inactivos durante un largo período de tiempo (por ejemplo. entre programas). boot/shutdown: llamado cuando el sistema de gestión de contenido está arrancando o apagando. La operación de arranque se utiliza normalmente para programar las llamadas iniciales o iniciar operaciones de E/S. La operación de apagado se utiliza para apagar con gracia flujos de E/S y guardar estado. 2.3 Gestor de almacenamiento El papel del Gestor de almacenamiento Spectrums es controlar todas las operaciones de E/S asociadas a una tienda dada. El gestor de almacenamiento Spectrums admite almacenar contenido tanto en un sistema de archivos local como en un servidor de archivos remoto (por ejemplo: un aparato de almacenamiento). Para medios continuos, en el nivel de administrador de almacenamiento el contenido se almacena como una colección de trozos basados en el tiempo. Dependiendo del sistema de archivos subyacente, un trozo podría corresponder a un solo archivo o a un nodo de datos en una base de datos de almacenamiento. Las dos operaciones principales del gestor de almacenamiento son de entrada y salida. La rutina de entrada se utiliza para almacenar contenido en una tienda bajo un nombre dado. La rutina de salida se utiliza para enviar datos de la tienda a un cliente. Para los medios de transmisión tanto las rutinas de entrada como de salida toman intervalos de tiempo que programan cuando la operación de E/S debe ocurrir, y ambas rutinas devuelven una manija de E/S que se puede utilizar para modificar o cancelar la solicitud de E/S en el futuro. Al igual que el gestor de políticas, el administrador de almacenamiento también proporciona funciones de API para crear, abrir y cerrar tiendas. También es compatible con las operaciones para consultar los usos de recursos y las opciones apoyadas por la tienda. Por último, el administrador de almacenamiento también tiene una rutina de descartes que puede ser utilizada por el administrador de políticas para informar a la tienda para eliminar el contenido de la tienda. 3. CASOS DE APLICACIÓN Y USO En esta sección describimos nuestra implementación de Spectrum y cómo se puede utilizar. 3.1 Implementación Hemos implementado Spectrums tres capas en C como parte de una biblioteca que puede vincularse con aplicaciones basadas en Spectrum. Cada capa realiza un seguimiento de su estado a través de un conjunto de archivos de datos locales que persisten a través de los reinicios, permitiendo así a Spectrum manejar sin problemas los ciclos de potencia. Para capas que residen en sistemas remotos (p. ej. una tienda remota) sólo la meta-información necesaria para contactar con el remoto 7 Content Manager Policy Manager Storage Manager Storage Fetcher Program Listings Interfaz gráfica de usuario Red activada DVR Program Information Content DVR Application Figura 2: El espectro en un nodo DVR habilitado de red se almacena localmente. Nuestra aplicación de prueba utiliza una política local y un gestor de almacenamiento para obtener contenido y almacenarlo en un sistema de archivos normal basado en Unix. Para manejar eficazmente las comunicaciones con capas que se ejecutan en sistemas remotos, todas las llamadas Spectrums API admiten modos síncronos y asíncronos a través de una interfaz uniforme definida por la estructura reqinfo. Cada llamada API lleva un puntero a una estructura reqinfo como uno de sus argumentos. Esta estructura se utiliza para mantener el estado de llamada y el estado de retorno. Para llamadas asíncronas, el reqinfo también contiene un puntero a una función de devolución de llamadas. Para usar una función Spectrum API, el llamante elige primero el modo sincronización o asíncrona y asigna una estructura reqinfo. Para las llamadas de sincronización, el reqinfo se puede asignar en la pila, de lo contrario se asigna con malloc. Para las llamadas async, se debe proporcionar una función de devolución de llamada cuando se asigna el reqinfo. A continuación, el llamante invoca la función Spectrum API deseada pasando la estructura reqinfo como argumento. Para las llamadas de sincronización, el resultado de las llamadas se devuelve inmediatamente en la estructura reqinfo. Para llamadas async exitosas, se devuelve un valor de llamada en progreso. Más tarde, cuando la llamada async se completa o se produce un tiempo de espera, la función de devolución de llamada async se llama con la información adecuada necesaria para completar el procesamiento. El diseño modular/en capas de la arquitectura Spectrum simplifica el objetivo de distribución de la funcionalidad. Además, la comunicación entre funciones es típicamente de naturaleza maestro-esclavo(s). Esto significa que varios enfoques de la operación distribuida son posibles que satisfagan los requisitos arquitectónicos. En nuestra implementación hemos optado por realizar esta funcionalidad con un simple diseño modular. Proporcionamos un conjunto de rutinas de acceso remoto asíncrono que permiten a los usuarios seleccionar el protocolo de transporte a utilizar y seleccionar el método de codificación que debe utilizarse con los datos a transferir. Los protocolos de transporte pueden variar protocolos simples como UDP hasta protocolos más complejos como HTTP. Actualmente estamos utilizando TCP plano para la mayor parte de nuestro transporte. Las llamadas de funciones a través de las diferentes API de Spectrum se pueden codificar utilizando una variedad de formatos que incluyen texto plano, XDR y XML. Actualmente estamos usando la biblioteca XML de eXpat [4] para codificar nuestras llamadas. Mientras estamos actualmente transfiriendo nuestros mensajes codificados XML usando una conexión TCP simple, en un entorno real esto puede ser reemplazado fácilmente por una implementación basada en una capa segura de sockets (SSL) para mejorar la seguridad mediante la adición de SSL como protocolo de transporte. Un aspecto importante del Spectrum es que puede gestionar contenidos basados en una política dada en plataformas heterogéneas. Como explicamos anteriormente en la sección 2.2, prevemos un pequeño conjunto de funciones normativas a nivel de base que pueden ser parametrizadas para producir una amplia gama de políticas de almacenamiento. Para que esto funcione correctamente, todas las aplicaciones basadas en Spectrum deben entender las políticas a nivel de base y cómo pueden ser parametrizadas. Para abordar este tema, tratamos cada política a nivel de base como si fuera un programa separado. Cada política a nivel de base debe tener un nombre bien conocido y opciones de línea de comandos para la parametrización. De hecho, en nuestra implementación pasamos parámetros a las políticas de nivel base como una cadena que puede ser analizada usando una función tipo getopt. Este formato es fácil de entender y proporciona portabilidad ya que el orden de bytes no es un problema en una cadena. Dado que esta parte de Spectrum no está en la ruta de datos críticos, este tipo de formato no es un problema de rendimiento. 3.2 Uso del Sistema de Gestión de Contenidos del Espectro En esta sección mostramos dos ejemplos del uso del Sistema de Gestión de Contenidos del Espectro en nuestro entorno. El foco de nuestro trabajo anterior ha sido la distribución de contenido para el contenido multimedia en streaming [2] y la grabación digital de vídeo habilitada en red [3]. El sistema Spectrum es aplicable a ambos escenarios de la manera siguiente. La Figura 2 muestra la arquitectura DVR (NED) activada por red. En este caso, todas las capas de la arquitectura Spectrum residen en el mismo dispositivo físico en una configuración local. La aplicación DVR obtiene listados de programas de alguna fuente de red, se ocupa de la presentación del usuario a través de una interfaz gráfica de usuario (GUI), e interfaz con el sistema Spectrum a través de las API de la capa de gestión de contenidos. Esta combinación de funciones de nivel superior permite al usuario seleccionar tanto el contenido a almacenar como las políticas de almacenamiento a 8 Content Manager Centralized Content Management station Información de contenidoGuía de interfaz de usuario Gestor de almacenamiento Gestor de almacenamiento Fetcher Edge Portal Política de servidor Gestor de almacenamiento Gestor de almacenamiento Gestor de almacenamiento Gestor de contenido Fetcher Edge Portal Server Distributed Content To La obtención del contenido (a través de la red o localmente) y el posterior almacenamiento en el sistema local es entonces manejado por los gerentes de políticas y almacenamiento. El uso de Spectrum en una arquitectura de distribución de contenidos en streaming (p. ej. PRISM [2] se muestra en la Figura 3. En este entorno se está distribuyendo contenido multimedia en streaming (tanto en directo, enlatado en vivo como bajo demanda) a portales de borde desde donde se están sirviendo los puntos finales de streaming. En nuestro entorno la distribución y almacenamiento de contenidos se realiza desde una estación centralizada de gestión de contenidos que controla varios de los portales de borde. La estación centralizada permite a los administradores gestionar la distribución y almacenamiento de contenidos sin necesidad de comunicación continua entre el gestor de contenidos y los dispositivos de borde, es decir. una vez que se han dado instrucciones a los dispositivos de borde que pueden funcionar de forma independiente hasta que se van a hacer cambios. 3.3 Spectrum Operational Ejemplo Para ilustrar cómo Spectrum maneja las referencias al contenido, considere una aplicación PVR basada en Spectrum programada para almacenar un día de contenido en streaming en una ventana móvil. Para configurar la ventana móvil, la aplicación utilizaría la API del gestor de contenidos para crear un grupo de políticas y una referencia política al contenido deseado. El establecimiento de la referencia de la política de ventanilla móvil de un día haría que el pesebre de la política pidiera al administrador de almacenamiento que comenzara a recibir la corriente. A medida que llega cada trozo de datos de streaming, el gestor de políticas ejecuta la función newclip de referencias políticas. La función newclip añade una referencia a cada trozo que llega, y programa una devolución de llamada un día después. En ese momento, la política dejará de hacer referencia al contenido, que ya tiene un día de antigüedad, y el contenido será descartado a menos que sea referenciado por alguna otra política. Ahora, considere el caso en el que el usuario decide guardar parte del contenido (por ejemplo. un programa específico) en la ventana de rodadura durante una semana adicional. Para ello, la aplicación solicita que el gestor de contenidos agregue una nueva referencia política adicional a la parte del contenido a conservar. Por lo tanto, el contenido conservado tiene dos referencias: una desde la ventana móvil y otra desde la solicitud de preservar el contenido durante una semana adicional. Después de un día la referencia de la ventana móvil será descartada, pero el contenido será 9 ref2, etc. base de datos url1 url2 (archivos multimedia...) (archivos multimedia...) meta store (información general...) url1 screens prefs ranges media screens, etc.url2 poly host ref1 ref1.files ref1.state Figura 4: Diseño de datos de Spectrum policy store preservado por la segunda referencia. Después de la semana adicional ha pasado, la función callback para la segunda referencia será llamada. Esta función descartará la referencia restante al contenido y como no hay referencias restantes, el contenido será liberado. Con el fin de funcionar en escenarios como los descritos anteriormente, Spectrums gestor de políticas debe gestionar y mantener todas las referencias a varios trozos de medios. Estas referencias son persistentes y por lo tanto deben ser capaces de sobrevivir incluso si la máquina que las mantiene se reinicia. Nuestra implementación de Spectrum Policy Manager logra esto usando la estructura de archivos y directorios que se muestra en la Figura 4. Hay tres clases de datos almacenados, y cada clase tiene su propio directorio de nivel superior. Los directorios son: datos: este directorio es utilizado por el administrador de almacenamiento para almacenar cada URL activa trozos de medios. Los archivos multimedia se pueden codificar en cualquier formato, por ejemplo MPEG, Windows Media o QuickTime. Tenga en cuenta que este directorio se utiliza sólo si el administrador de almacenamiento es local. Si el gestor de políticas está utilizando un gestor de almacenamiento externo (por ejemplo: un aparato de almacenamiento), a continuación, los archivos multimedia se almacenan de forma remota y sólo son remotamente referenciados por el gestor de políticas. meta: este directorio contiene meta información general sobre el administrador de almacenamiento que se está utilizando y los datos que está almacenando. La información general se almacena en el subdirectorio de la tienda e incluye la ubicación de la tienda (local o remota) e información sobre los tipos de trozos de datos que la tienda puede manejar. El directorio meta también contiene un subdirectorio por URL que contiene información sobre los trozos de datos almacenados. El archivo de trozos contiene una lista de trozos actualmente almacenados y sus cuentas de referencia. El archivo prefs contiene una lista de referencias de políticas activas que apuntan a esta URL. El archivo de rangos contiene una lista de rangos temporales de datos actualmente almacenados. Finalmente, el archivo multimedia describe el formato de los medios almacenados bajo la URL actual. poli: este directorio contiene un conjunto de subdirectorios host. Cada subdirectorio de host contiene el conjunto de referencias políticas creadas por ese host. La información sobre cada referencia política se divide en tres archivos. Por ejemplo, una referencia de política llamada ref1 se almacenaría en ref1, ref1.files, y ref1.state. El archivo ref1 contiene información sobre la política de referencia que no cambia con frecuencia. Esta información incluye la política de base y los parámetros utilizados para crear la referencia. El archivo ref1.files contiene la lista de referencias a trozos que pref ref1 posee. Por último, el archivo ref1.state contiene información de estado específica de la política opcional que puede cambiar con el tiempo. Juntos, estos archivos y directorios se utilizan para rastrear referencias en nuestra implementación de Spectrum. Tenga en cuenta que otras implementaciones son posibles. Por ejemplo, un gestor de Spectrum de grado de operador podría almacenar toda su información normativa y de referencia en un sistema de bases de datos de alto rendimiento. 10 4. TRABAJOS RELACIONADOS Varios autores han abordado el problema de la gestión de contenidos en redes distribuidas. Gran parte de la labor se centra en el aspecto de la gestión de políticas. Por ejemplo en [5], se considera el problema de servir contenido multimedia a través de servidores distribuidos. El contenido se distribuye entre los recursos del servidor en proporción a la demanda de los usuarios mediante un protocolo de difusión de la demanda. El rendimiento del sistema se compara mediante simulación. En [1] el contenido se distribuye entre subcachés. Los autores construyen un sistema que emplea varios componentes, como un Router Central, una base de conocimiento caché, subcachés y un juez de desalojo subcaché. La base Cache Knowledge permite emplear políticas sofisticadas. La simulación se utiliza para comparar el esquema propuesto con algoritmos de reemplazo bien conocidos. Nuestro trabajo difiere en que estamos considerando más que los aspectos de gestión de políticas del problema. Después de considerar cuidadosamente la funcionalidad requerida para implementar la gestión de contenidos en el entorno en red, hemos dividido el sistema en tres funciones simples, a saber, Gestor de contenidos, Gestor de políticas y Gestor de almacenamiento. Esto nos ha permitido implementar y experimentar fácilmente con un sistema prototipo. Otro trabajo relacionado implica los llamados sistemas de recomendación de TV que se utilizan en PVRs para seleccionar automáticamente el contenido para los usuarios, por ejemplo. [6]. En el caso de que Spectrum se utilice en una configuración PVR, este tipo de sistema desempeñaría una función de nivel superior y podría beneficiarse claramente de las funcionalidades de la arquitectura Spectrum. Por último, en los proveedores comerciales de medio ambiente de CDN (por ejemplo, Cisco y Netapp) han desarrollado e implementado productos y herramientas de gestión de contenidos. A diferencia de la arquitectura Spectrum que permite que los dispositivos de borde funcionen de una manera en gran medida autónoma, las soluciones de proveedores suelen estar más estrechamente acopladas a un controlador centralizado y no tienen las operaciones sofisticadas basadas en el tiempo ofrecidas por Spectrum. 5. CONCLUSIÓN Y FUTURO TRABAJO En este trabajo presentamos el diseño e implementación de la arquitectura de gestión de contenidos Spectrum. Spectrum permite aplicar políticas de almacenamiento a grandes volúmenes de contenido para facilitar un almacenamiento eficiente. Específicamente, el sistema permite aplicar diferentes políticas al mismo contenido sin replicación. Spectrum también puede aplicar políticas que tengan tiempo y que se ocupen eficazmente del almacenamiento de contenido multimedia continuo. Por último, el diseño modular de la arquitectura Spectrum permite realizaciones independientes y distribuidas para que el sistema se pueda implementar en una variedad de aplicaciones. Hay una serie de cuestiones pendientes que requerirán una labor futura. Algunos de estos problemas incluyen: • Prevemos que Spectrum sea capaz de gestionar contenido en sistemas que van desde grandes CDNs hasta aparatos más pequeños como TiVO [8]. Para que estos sistemas más pequeños soporten Spectrum necesitarán redes y una API externa. Cuando esa API esté disponible, tendremos que averiguar cómo puede encajar en la arquitectura Spectrum. • El contenido de nombres de espectro por URL, pero no hemos definido intencionadamente el formato de las URLs de espectro, cómo se mapean al nombre real del contenido, o cómo los nombres y URLs deben ser presentados al usuario. Si bien hemos abordado anteriormente estas cuestiones en otros lugares [2], creemos que queda más trabajo por hacer y que es necesario elaborar normas consensuadas sobre la designación de nombres. • En este artículo nos hemos centrado en la gestión de contenidos para objetos multimedia continuos. También creemos que la arquitectura Spectrum se puede aplicar a cualquier tipo de documento, incluidos los archivos simples, pero todavía tenemos que elaborar los detalles necesarios para apoyar esto en nuestro entorno prototipo. • Cualquier proyecto que ayude a permitir que los contenidos multimedia se compartan fácilmente a través de Internet tendrá obstáculos legales que superar antes de lograr una aceptación generalizada. Adaptar Spectrum para cumplir con los requisitos legales probablemente requerirá más trabajo técnico. 6. REFERENCIAS [1] K.. Cheng e Y. Kambayashi. Gestión de Contenidos Multicaché-basada para Web Caching. Actas de la Primera Conferencia Internacional sobre Ingeniería de Sistemas de Información Web, Jume 2000. [2] C. Cranor, M. Green, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. PRISM Architecture: Apoyando los servicios de transmisión mejorada en una red de distribución de contenido. IEEE Internet Computing, julio/agosto de 2001. [3] C. Cranor, C. Kalmanek, D. Shur, S. Sibal, C. Sreenan y J. van der Merwe. NED: un grabador de vídeo digital habilitado para la red. 11o Taller de IEEE sobre Redes de Área Local y Metropolitana, marzo de 2001. [4] eXpat. expat.sourceforge.net. [5] Z. Ge, P. Ji, y P. Shenoy. Una arquitectura de clúster de servidores multimedia de transmisión de demanda adaptativa y con conocimiento de la localización (DALA). NOSSDAV, mayo de 2002. [6] K. Kurapati y S. Gutta y D. Schaffer y J. Martino y J. Zimmerman. Recomendador de TV multi-agente. Actas del taller UM 2001, julio de 2001. [7] ReplayTV. www.sonicblue.com. [8] TiVo. www.tivo.com. 11 ",
            "error": []
        }
    }
}